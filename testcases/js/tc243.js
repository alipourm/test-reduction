tryItOut("(({a1:1}) + null);\nreturn (<x/>)(this, __noSuchMethod__);\n");
tryItOut("if((uneval(null)) for (({ __proto__: __iterator__, __parent__: __parent__ }) in window) if (<x/>)) {yield [,,];__parent__; }");
tryItOut("/*for..in*/L:for(const __count__ = __iterator__ in  '' ) {(#3={a:#3#}); }");
tryItOut("let(__count__ = [11,12,13,14].sort .@x:: eval(\"{}\", ({ set __iterator__.__proto__ __iterator__ (__proto__)(yield <><x\f><y/></x></>),  get constructor(__count__, constructor)(\n[1,,]) }))) ((function(){return;})());");
tryItOut("M:if(prototype.(__count__ = <x/>)) { if (yield (__parent__.(<x/> ^= <x><y/></x>)).@*) /*infloop*/do (window); while(<><x><y/></x></>); else for(let y in []);}");
tryItOut("/*infloop*/\tdo {return __iterator__;; } while( '' );");
tryItOut("with({__parent__: *})gc() const __iterator__;");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = [15,16,17,18].map(((1 for (x in []))).call, prototype = -3/0, prototype = constructor.eval(prop)) in __noSuchMethod__\n) with({__noSuchMethod__: <y><z/></y>}){; }");
tryItOut("M:if(this %  '' ) {; } else {return; }");
tryItOut("{throw -3/0; }");
tryItOut("/*infloop*/do let (__count__) { M:if(( /x/g  && window)) const __noSuchMethod__ = *::*; else  if (((__count__ for (prop in <><x><y/></x></>)))) {false; } else {Function } } while(eval(\"\", __proto__ = this));");
tryItOut("let (__count__, function::prop = null) { if( \"\" ) __count__ =  '' ; else  if (__noSuchMethod__) \f{throw true;var __count__, prop = [[1]]; } else <><x><y/></x></>; } const __noSuchMethod__;");
tryItOut("L:if(([1,2,3,4].slice)()) { if ([z1]) {const prototype = <><x><y/></x></>, prop = <y><z/></y>;yield <x/>; }} else yield  '' ;yield *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.__noSuchMethod__ in @foo) {;<><x><y/></x></>; }");
tryItOut("if(this) undefined else  if (<><x><y/></x></>) return;\nfunction(q) { return q; }\n");
tryItOut("/*infloop*/do {let (constructor = [[], , ({ __count__: __proto__ }), , ] = [11,12,13,14].filter, __parent__ = <x><y/></x>.__defineSetter__(\"prop\", function  prototype (__noSuchMethod__) '' ) if ( /x/ )) { /*infloop*/for(const __count__ = true /= *; ([15,16,17,18].map(({}).hasOwnProperty, <y><z/></y>)); \f<x/> >>>={(__proto__);var get, prop; }) yield constructor; } } while(__iterator__-=(yield \n<x><y/></x> > this));");
tryItOut("if( \"\" [true]) {return;function(q) { return q; } }");
tryItOut("/*infloop*/for(var ({ __iterator__: __count__, __iterator__: prototype }) = <><x><y/></x></> ? null : #3={a:#3#}; ( /x/  >>> function ([y]) { }); (({__parent__ getter: <><x><y/></x></> }))) {export prototype; }");
tryItOut("with({})  /x/ ;");
tryItOut("L:with(<{constructor}><><ccc:ddd><!--yy--></ccc:ddd></></{constructor}>)if(({})) { if (window) break L; else __noSuchMethod__ = <y><z/></y>, __noSuchMethod__ = true;}");
tryItOut("switch([[1]] += this) { case ([15,16,17,18].filter([1,2,3,4].slice, *)): function () { yield true } \nif() { if (<x><y/></x>) {return @foo;(<y><z/></y>); }} else function(q) { return q; }break;  }");
tryItOut("yield #1=[<><x><y/></x></>.__lookupSetter__(\"__count__\")];");
tryItOut("with((prototype = 5.0000000000000000000000)){true; }");
tryItOut("/*infloop*/for(const __count__ = ((<x><y/></x> if (<y><z/></y>))); <><x><y/></x></>; true) ");
tryItOut("var __proto__ = false; const __count__;");
tryItOut("L:\tif(this.zzz.zzz)  { return __parent__ = __parent__ }  else  if (<bbb xmlns:ccc=\"<bbb xmlns=\"<x><y/></x>\"></bbb>\"><ccc:eee></ccc:eee></bbb>) L: {yield <><x><y/></x></>; }");
tryItOut("L:while(([15,16,17,18].filter(this,  \"\" ).__noSuchMethod__ = new Array(<x><y/></x>).@*) && 0)if(<y><z/></y> ^ false) {; } else {return;throw <><x><y/></x></>; }");
tryItOut("var __noSuchMethod__, __parent__ = 5.0000000000000000000000;gc()");
tryItOut("L:if((prop) /= <y><z/></y> ?  ''  :  /x/ ) { if ([11,12,13,14].map) {{yield; } }} else {return;L:if(1e+81) {throw <><x><y/></x></>; } }");
tryItOut("L: /*infloop*/while( /x/ .__iterator__.__lookupGetter__(\"prototype\")){return .2; }");
tryItOut("with({}) { constructor = constructor; } ");
tryItOut("/*infloop*/for(({ __proto__: ({ __parent__: __noSuchMethod__, __iterator__: __iterator__ }) }) = <y><z/></y>;  /x/ ; __noSuchMethod__.prototype) [1,2,3,4].slice");
tryItOut("throw StopIteration;");
tryItOut("M:if(3) {export *;(@foo); } else /*infloop*/for((~<><x><y/></x></>); (undefined /= @foo); default: \n) \f{export *;yield; }");
tryItOut("L:if( '' ) { if (__parent__.([[]][<><x><y/></x></>])) {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in function(id) { return id }) yield 3;\twith({__count__: this})let __iterator__, __proto__ = 5.0000000000000000000000; } else {/*infloop*/do {} while(__noSuchMethod__);export *; }}");
tryItOut("M:while(((__proto__ !== constructor)) && 0)/*infloop*/for(const ({ constructor: prototype, constructor: __parent__ }) = <x><y/></x>; this; *) gc()");
tryItOut("L: (*)\n");
tryItOut("case 4: default: prop = __proto__;break; case function::__count__.__count__ = *::*.yoyo(undefined.valueOf(\"number\")): /*infloop*/for(const __proto__; ([1,2,3,4].slice).call(this, <x><y/></x>, *::*) :: __noSuchMethod__ =  \"\" ; <><x>\f<y/></x></> in __count__) prop = @foo;");
tryItOut("/*for..in*/for(let this in (([1,2,3,4].slice)(<>[z1,,]</>)))(<><x><y/></x></>);");
tryItOut("{let(constructor, __parent__ = \f<><x><y/></x></>) { for(let y in [5,6,7,8]) yield  \"\" ; }\n");
tryItOut("if(this.zzz.zzz) { if (new window()) break L;} else ;");
tryItOut("/*for..in*/for(let constructor = true in <x/>) { }");
tryItOut("break L;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration\nlet (__iterator__) { let __noSuchMethod__ = window, prop =  /x/g ; }");
tryItOut("{L: {return; }switch(<x><y/></x>) { case 8: break;  } }");
tryItOut("/*for..in*/for([get, __proto__] =  /x/  in new (this).watch(*::*)) {(true); }");
tryItOut(";\nreturn;\n");
tryItOut("/*for..in*/for(__noSuchMethod__ in (eval(\" \\\"\\\" \", @foo))) ( '' )\nyield  \"\" ;");
tryItOut("/*for..in*/for(var constructor = <y><z/></y> in (-0)) {{} }");
tryItOut("if( '' ) {export *;return <><x><y/></x></>; } else  if (prop) {var prop;([,,]); }");
tryItOut("while((window) && 0){const __iterator__, __iterator__; }\n(#1=[#1#]);");
tryItOut("return @foo.__proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */return;\ncontinue L;\n");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] = (uneval(__iterator__)) in ([, prop, , , constructor] = let (__noSuchMethod__, __noSuchMethod__ = <x/>) #1#)) {yield <><x><y/></x></>; }");
tryItOut("let (__iterator__, prop) { /*for..in*/for(var [__noSuchMethod__, constructor] = eval(\"yield;\",  /x/g .unwatch(\"__iterator__\")) in window) {yield <x><y/></x>; } }");
tryItOut("M:do {yield } while(((@foo + ('fafafa'.replace(/a/g, function(y) { yield y; (<x><y/></x>);; yield y; })))) && 0);");
tryItOut("var prop = <x><y/></x>;");
tryItOut("L:with(@foo){<><x><y/></x></>;continue L; }");
tryItOut("if(\f(-1.isPrototypeOf( \"\" )).__proto__ = 1e81) if(prop) { if (function::prototype = #1#) {var __count__ = <x><y/></x>, __noSuchMethod__ = __count__;{} } else yield @foo;} else  if (this.zzz.zzz @ ((<x><y/></x>))) {try { yield <y><z/></y>; } catch(prototype) { break ; } finally { yield ({}); } {let __proto__;{} } } else {( \"\" );{__parent__; } }");
tryItOut("L:if(var constructor =  '' ) {window<x><y/></x>; } else  if ([15,16,17,18].sort('haha'.split, *::*[[,,]])) throw  /x/g ;");
tryItOut("if((uneval([,] ? this : *))) { if (this.__defineGetter__(\"constructor\", 0x99)) {gc() const <><x><y/></x></>; }} else {throw *; }");
tryItOut("/*for..in*/for(constructor in ((function (__noSuchMethod__)'fafafa'.replace(/a/g, <x><y/></x>))(['fafafa'.replace(/a/g, Math.pow)])))/*infloop*/do {yield \t /x/ ;window; } while(<x/>);");
tryItOut("return (this.__defineSetter__(\"constructor\", function  prototype () { yield (false(0/0, <x><y/></x>)) } ));");
tryItOut("continue ;\nyield;\n");
tryItOut("this.zzz.zzz;");
tryItOut("{/*infloop*/L:for(const [__iterator__, __noSuchMethod__, ] = [,,z1]; prototype / this; undefined % <><x><y/></x></>) {var  }{gc()export __iterator__; } }");
tryItOut("return <><x><y/></x></>;function ()@foo");
tryItOut("return;");
tryItOut("export *; const __proto__;");
tryItOut("if((__noSuchMethod__.( /x/g ) ? <><x><y/></x></>\t() : <x><y/></x>)) { if (eval(\"gc()\",  /x/g )) {var __parent__ = undefined, __proto__ = *::*; } else {function (__noSuchMethod__, prop)constructor.(this)return; }}");
tryItOut("/*infloop*/M:for(const __proto__; ( /x/g )(function(id) { return id }, __parent__); (({__noSuchMethod__:  /x/ ,  set __noSuchMethod__ prototype () { return; }  })) ? (<x><y/></x>\n) :  \"\"  % <y><z/></y>) {yield <y><z/></y>;var prototype, constructor; }");
tryItOut(" \"\" \n");
tryItOut("{{} const prop; const prototype; }");
tryItOut("/*infloop*/L:while(-0){return; }");
tryItOut("var prototype, prototype = (-0)\n");
tryItOut("/*for..in*/for(prop = false <<= <x><y/></x> in (yield <x/>)) L: yield *::*\n__iterator__");
tryItOut("/*infloop*/do do { } while((false) && 0); while((([11,12,13,14].some) <= eval(\"0\", null)));");
tryItOut("/*for..in*/L:for(var prop(5.0000000000000000000000 ? null : 4.) in __count__.__parent__ setter= [,]) yield this;");
tryItOut("yield;\n/*infloop*/while(<x/>)return  \"\" ;\n");
tryItOut("L:while(((#1# @ ((({}).hasOwnProperty)()).__lookupSetter__(\"__proto__\"))) && 0)if(typeof (function  prototype (prototype, __parent__) { yield (prop.__defineGetter__(\"__count__\", *)) } (<x><y/></x>++, (false.__defineSetter__(\"__count__\", function  __parent__ (__noSuchMethod__, constructor) { return <><x><y/></x></> } )))))  else if((__noSuchMethod__)) export __iterator__; else {return @foo; }");
tryItOut("with({}) throw __noSuchMethod__;");
tryItOut("L: return;");
tryItOut("for(let y in [5,6,7,8]) throw __count__;");
tryItOut("/*infloop*/L:do continue L; while(<x/>\n);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__count__) in []) return;\nM:if((<y><z/></y> <<= 0.1)) {<x/>; } else  if (__noSuchMethod__ =  \"\" ) continue M; else gc()\n");
tryItOut("prop");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(new Function((p={}, (p.z = prototype.prototype)())); 0/0; __noSuchMethod__.function::constructor setter= ({}).hasOwnProperty) {/*for..in*/L:for(const prototype in arguments) {return; }; }");
tryItOut("throw StopIteration;");
tryItOut("with([*::* for each (constructor in <x><y/></x>)])");
tryItOut("L:if(prop) { if ((yield (eval(\"let __proto__;\",  /x/g  & 3)))) const __iterator__;;} else {throw null;if(3.141592653589793 + 1.3) var __count__, prop; else  if (([\fprototype .@x:: <x/>])) break M\t; else {{export /__proto__; }export *; } }");
tryItOut("delete <><x><y/></x></>.valueOf(\"number\")");
tryItOut("/*infloop*/M:for(let __parent__; new function(q) { return q; }(); ((-0).__iterator__)) return;");
tryItOut("throw StopIteration;");
tryItOut("{let (({ __parent__: ({ __proto__: function::constructor, constructor: __iterator__ }), function::prop: ({ __count__: __count__ }) }) = (this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"gc()\")))), ({ __count__: constructor, __count__: constructor })) { /*infloop*/M:do {/*for..in*/M:for(__iterator__ = __proto__ in <x><y/></x>) {function (__proto__)<x><y/></x>prototype, __proto__ }yield __count__; } while(this >>=  /x/g  && new 1e4(__proto__ = *)); }yield; }");
tryItOut("/*infloop*/for(constructor = (<x><y/></x>.propertyIsEnumerable(\"prop\")); (<{__count__}><!--yy--></{__count__}> >>>  /x/g ); (0/0 = <><x><y/></x></>)) \t{M:if(constructor) return undefined; else  if (break L;) prototype = prop, prototype = <x/>; else __count__, __proto__M:while(('fafafa'.replace(/a/g, /a/gi)) && 0)/*infloop*/for(let __parent__ = @foo; [1,,]; 1e4)  }");
tryItOut("/*for..in*/for(constructor = <><x><y/></x></> in <y><z/></y>) {export *; }");
tryItOut("if(try { var __count__ = ({a1:1}); } catch(prop) { {} } finally { break ; }  -= this.hasOwnProperty(\"__iterator__\")) { if ([11,12,13,14].some) {{} }} else {{} } const __noSuchMethod__;");
tryItOut("if(new /a/gi( for (constructor in  '' ) if (this))) {if((undefined)( /x/ ,  \"\" )) L:with(null){; } } else  if (window.hasOwnProperty(\"__iterator__\")) do ; while((0x99.watch(\"__count__\", [1,2,3,4].slice)) && 0); else {with(let(constructor = [], __proto__) ((function(){constructor;})());)throw <><x><y/></x></>; }");
tryItOut("if(this) /*infloop*/L:for([prototype]; prop.constructor = undefined; false.eval([1,,])) {return null; }");
tryItOut("if((-0)) {let __noSuchMethod__, constructor; } else  if (((function ([y]) { })() ? <><x><y/></x><\f/> : <x><y/></x>)) ([,]);");
tryItOut("L:switch(<><bbb xmlns=\"delete [z1,,]\"><ccc:ddd><!--yy--></ccc:ddd></bbb></>\f) { case 3:  }");
tryItOut("/*for..in*/for(const [prop, __proto__] = 033 ^= <><x><y/></x></> in __parent__) __parent__;");
tryItOut("{gc(); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [] in ({ prototype: __proto__, __parent__: ({ __parent__: __noSuchMethod__, __count__: __proto__ }) }) = ([, ] = this.__defineGetter__(\"prop\", Math.sin))) {\nthrow this; }");
tryItOut("if((new <><x><y/></x></>(<><x><y/></x></>))) { if (([[1]]())) {export *;export *; } else {return @foo; }}");
tryItOut("M:if((*::*).eval(delete <y><z/></y>)) { if (3.141592653589793) const __proto__ = prototype; else {let __iterator__ = this, prop; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in *::*) {{}__parent__ = (1 for (x in [])); }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <y><z/></y>) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in [15,16,17,18].map(({}).__lookupGetter__, (++__iterator__ =  \"\" ))) export prototype;");
tryItOut("M:if(<><x><y/></x></>) { if (({}).__lookupGetter__) var __parent__;} else export prop;");
tryItOut("return function ([y]) { } != <y><z/></y>;");
tryItOut("L:if(false) { ''  } else yield <x/>;");
tryItOut("{L:if(delete [1,2,3,4].slice()) {const __noSuchMethod__, __noSuchMethod__;yield <y><z/></y>; } else  if (new (function  __iterator__ () { return <><x><y/></x></> } )(*)) {yyylet __proto__ = <><x><y/></x></>; } else {return;yield; } }");
tryItOut("let([[, [], , ({ __count__: prop }), *], , [({ *::*: __iterator__ }), , ({ prototype: ({ prop: ({ prop: __parent__, __iterator__: __count__ }) }) }), ({ prototype: ({ __parent__: prop }) })], ]) { return eval(\"return;\", @foo);");
tryItOut("prop = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in null) {{} }");
tryItOut("/*infloop*/for(const __parent__ = <>\t<x><y/></x></>[@foo]; __count__(this) = ([<><x><y/></x></> if ( /x/g )]).valueOf(\"number\"); eval(\" /x/g ;\", undefined)) (<y><z/></y>).call");
tryItOut("/*for..in*/for(const __iterator__ = * in false) yield;");
tryItOut("L:\fif(Function( '' )) {} else throw <><x><y/></x></>;");
tryItOut("with(__count__.throw((-1)) %= 0.1 ? undefined : <x><y/></x>){__noSuchMethod__\nyield <y><z/></y>; }");
tryItOut("if(({ __iterator__: ({ __proto__: __proto__ }), ({ prop: __count__, constructor: __count__ }): ({ __noSuchMethod__: __count__, __iterator__: __parent__ }) }) = ((yield __count__))) {const ({ prototype: __iterator__ }) = __noSuchMethod__ = undefined;/*for..in*/for(const [prototype, __count__] = ({prototype setter: \t[1,2,3,4].map }).eval(this.__defineGetter__(\"constructor\", ( '' ).watch)) in <><x><y/></x></>) {[1,2,3,4].map } }");
tryItOut(";");
tryItOut("L: export *;return 0.1; const prop;");
tryItOut("L:if(new yield (new <y><z/></y>)()) {({}).__lookupGetter__ }");
tryItOut("/*infloop*/for(<y><z/></y>; __iterator__; <x><y/></x>) {; }");
tryItOut("/*infloop*/for(const prop; <x><y/></x>; this) yield;");
tryItOut("/*infloop*/do /*for..in*/for(var constructor.__iterator__ in 1e+81) false; while(window);");
tryItOut("with({prototype: (prop = *::*)})const __count__ = constructor;");
tryItOut("yield (new 'haha'.split(<><x><y/></x></>, <x><y/></x>));");
tryItOut("yield\n{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in *::*) Math.pow");
tryItOut("let(prop = (p={}, (p.z = ((*)))())) { yield;\nyield;\n");
tryItOut("let(__count__ = (new RegExp()).propertyIsEnumerable(\"prop\"),  = *.__lookupGetter__(\"__iterator__\")) { constructor = __proto__;");
tryItOut("M:switch( /* Comment */(__iterator__ .@*:: this.__defineSetter__(\"__noSuchMethod__\", gc))) { default: continue M;case 5: break; break;  }");
tryItOut("if(\f({prototype: 1e4, prop: 1.2e3 }))  else  if (prototype && 1e81) {export *;yield; } else ");
tryItOut("L:if(window) { if (@foo) gc() else let __proto__, __parent__;}");
tryItOut("if(*::*.yoyo(this.__defineGetter__(\"__count__\", Function))) {if(\nfalse) { if (new (<><x><y/></x></>)()) {export __noSuchMethod__;throw  '' ; }} else {}let (prop =  '' ) { (({a1:1})); } } else  if ((function(y) { yield y; export *;; yield y; }.watch(\"__count__\", (1 for (x in [])))\n)) {}\nlet __noSuchMethod__ = <x><y/></x>, constructor; else {/*for..in*/for(const __parent__ in ((0x99)( '' )))yield []; }");
tryItOut("L:switch([({prototype: <x><y/></x>})].filter([1,2,3,4].map)) { case 4: /*infloop*/for(const ({ __proto__: __noSuchMethod__, __iterator__: __parent__ }) = this.__defineSetter__(\"prop\", <x><y/></x>); (new Number(5.0000000000000000000000, <x><y/></x>)); <y><z/></y>.@*) const prototype = *, __parent__; }");
tryItOut("{}");
tryItOut("let (prototype = @foo &= [[]]) { gc() }");
tryItOut("M:switch(([[1]])) {  { yield 1.2e3 |= <x/> }  }");
tryItOut("if([15,16,17,18].sort([1,2,3,4].map, (-(033\n)))) { if ((({ __parent__: __parent__, __noSuchMethod__: constructor }) = <><x><y/></x></>)) } else break M;");
tryItOut("throw <x><y/></x>;");
tryItOut("/*infloop*/for(let ({ __proto__: __parent__, __count__: __proto__ }) = new String(__parent__); (constructor = [[1]]); false.__defineGetter__(\"__parent__\", *::*)) {(<><x><y/></x></>);{} }\ndo {export *; } while((<x><y/></x>) && 0);");
tryItOut("{{gc() } }");
tryItOut("while((constructor = (Function).call(prop, )) && 0)Math.pow\n");
tryItOut("with((({}) >>>= \"\" )--){/*infloop*/do {break L;{ } }\f while(([<x><y/></x> if (<x/>)]));; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in ((({}).hasOwnProperty)(<y><z/></y>)))<y><z/></y>;");
tryItOut("if(new *(this.__defineGetter__(\"prototype\", function () { yield  ''  } ))) { if ((({__count__ setter: Math.sin }).__defineSetter__(\"prop\", Math.pow))) {with({__iterator__: <y><z/></y>}) } else (033).watch}");
tryItOut("(--(yield  /x/g )), #3={a:#3#}");
tryItOut("let(__parent__ = true, prototype) ((function(){return;})());");
tryItOut("let (({ constructor: __iterator__, __noSuchMethod__: ({ prop: ({ __noSuchMethod__: prototype, constructor: __parent__ }), __count__: [, __parent__, , __iterator__, __proto__] }) }), __count__) { /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in new *) {1e4;gc() } }");
tryItOut("/*for..in*/M:for(var constructor = (-0)-- in <x><y/></x>) \n( '' ); const __count__;");
tryItOut("/*for..in*/for(const [__proto__, __parent__] = (<x><y/></x>.hasOwnProperty(\"__count__\").unwatch(\"({ __iterator__: prototype, __noSuchMethod__: __count__ })\")) in (undefined)(<><x><y/></x></>)) {; }");
tryItOut("if(undefined) { if (false) export *;} else const __proto__ = arguments, __iterator__ = 0/0;");
tryItOut("if(([11,12,13,14].sort <<=  /* Comment */<x><y/></x>)) throw <x/>; else  if (constructor.prototype setter= ({}).__lookupGetter__) gc");
tryItOut("try {  } catch(constructor.__parent__) { constructor = __count__; } finally { this.zzz.zzz; } ");
tryItOut("do {gc()yield; } while((<x/>) && 0);");
tryItOut("let (constructor) { /*infloop*/while(<y><z/></y>){{} } }");
tryItOut("with(<y><z/></y> += __iterator__ = <x><y/></x>)L: /*infloop*/for(undefined; constructor; <y><z/></y>) {(new Function(\"eval\")) }");
tryItOut("{; }");
tryItOut("if((yield constructor) :: (let (__iterator__ = <x><y/></x>) __parent__)) var __iterator__ = false; else \t if ( { __count__ = <x><y/></x>, __iterator__ = [[1]]; } ) gc() else return;");
tryItOut("with({__iterator__:  \"\" }){/*infloop*/for(({ __proto__: __parent__ }); this.zzz.zzz; #1# .@x:: null) return @foo;window; }");
tryItOut("let prototype, constructor");
tryItOut("L: {'haha'.split/*for..in*/for(const yield = gc in 1e+81) {const constructor, __parent__ = constructor; } }");
tryItOut("throw  '' ;");
tryItOut("L:with(this.__defineGetter__(\"__iterator__\", [1,2,3,4].map))gc()");
tryItOut("/*for..in*/for(const __iterator__ = ({})--(new (((yield  /x/g )).@foo)(prop.__iterator__, (null.@*)), (<><xxx>{__parent__}</xxx></>.valueOf(\"number\"))) in (yield false)) {throw 1.3;export *; }");
tryItOut("throw StopIteration;");
tryItOut("let (__noSuchMethod__) { Functionthrow  /x/g ; }");
tryItOut("/*for..in*/for(let ( /x/ .hasOwnProperty(\"__noSuchMethod__\")) in ((((new Function(\"constructor = *::*;\"))).call)(*::*.__defineSetter__(\"prop\", function(y) { yield y; (<x/>);; yield y; })))){yield prop; }");
tryItOut("/*infloop*/for(var __count__; #1=[#1#] .. null; [11,12,13,14].map) {/*for..in*/for(var prop in true) throw prototype;/*infloop*/for(const prop; <x><y/></x>; 3.141592653589793) eval }");
tryItOut("let __parent__, constructor = #1=[#1#]\n({a2:z2}) += -0;");
tryItOut("if((p={}, (p.z = ({ __proto__: __noSuchMethod__, constructor: __noSuchMethod__ }) = (<x><y/></x>.unwatch(\"__count__\")))())) { if ((uneval(*::*)).eval(<x><y/></x>)) const __iterator__, prototype =  \"\" ; else {const __noSuchMethod__ = <x><y/></x>, prop = true; }}");
tryItOut("switch(3) { default: null\nvar __parent__ = <x/>;case <><x><y/></x></>: break; case 3: break; break;  }");
tryItOut("/*for..in*/for(const __parent__ in 3) {prototype; }");
tryItOut("/*for..in*/for(var constructor in <y><z/></y>.@* >>>=3) let (__parent__ = ({})) { /*infloop*/for(__parent__; [z1,,];  /x/ ) {throw <x/>; } }");
tryItOut("/*infloop*/for(let __parent__; ({ .2: prop, prototype: function::__iterator__ }) = (<x><y/></x>.([1]));  = (*::* ||  \"\" )) {while((<><x><y/></x></> <= <x><y/></x>) && 0)/*infloop*/M:while(<x><y/></x>)export __noSuchMethod__; } const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in true) export prototype");
tryItOut("{/*infloop*/L:for(const prototype; ![z1,,]; <x><y/></x\t> .@ <><x><y/></x></> <= __parent__.__iterator__ = <x><y/></x>) return <x><y/></x>;L:with({prop: <x><y/></x>})throw prototype; }");
tryItOut("if( ''  >>= <y><z/></y>(<x><y/></x> instanceof  /x/ , <x><y/></x>)) { if ([(.(\"__iterator__\", Math.sin)) if ((eval(\"*\", <x/>)))]) {prototype, __noSuchMethod__ = undefined; } else {export prototype; }}");
tryItOut("/*for..in*/for(yyy in (((({}).__lookupGetter__).call)(<x/*\n*/><y/></x> .@ __noSuchMethod__.unwatch(\"prop\")))){if(( /x/  @ <><x><y/></x></>)) throw <x/>; else yield function ([y]) { }; }");
tryItOut("{{}gc() }");
tryItOut("{([1]); }");
tryItOut("__proto__ = constructor;");
tryItOut("/*infloop*/while(__proto__ = -0)this.__defineGetter__(\"__noSuchMethod__\", function  __proto__ ()0 & <y><z/></y>)");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = (prototype - (-1)) in (Error())) L: gc()");
tryItOut("__parent__ = @foo, __parent__;");
tryItOut("Lif(undefined) {{}let __noSuchMethod__ = <y><z/></y>; } else  if (prop) {<x><y/></x>;yield; } else ;");
tryItOut("/*for..in*/L:for(let constructor in (((<x><y/></x>.throw(__iterator__)) ^= __iterator__ = window)(#1#))){let __iterator__ = null; }");
tryItOut("M:if(function::__count__) { if (4.) {L:if(<y><z/></y> * null) throw <><x><y/></x></>; else continue ;try { return ('haha'.split).call; } catch(__proto__) { return; } finally { try { yield __proto__; } catch(__parent__ if (function(){;})()) { continue ; } catch(__count__ if (function(){[z1,,];})()) { export constructor; } catch(__iterator__ if (function(){;})()) { export *; } finally { (constructor); }  }  } else M:if(@foo .@x:: prop) <x><y/></x> else  if (undefined -  /x/ .__proto__) /*for..in*/for(const __count__ in window) return; else {constructor = [[1]], __noSuchMethod__;\f }}");
tryItOut("throw constructor;");
tryItOut("with({}) for(let y in []);");
tryItOut("if(null) ; else  if (<y><z/></y>)  else { }");
tryItOut("L:with({__proto__: -1}){let prototype, prop;arguments; }");
tryItOut("if(eval(\"this\", [[1]]).eval(<x><y/></x>, @foo.__noSuchMethod__ = null)) prototype else  if (((-1)[\rtrue])) {yield [[]];yield *::*; } else return;");
tryItOut("let([, [], ] = undefined ? <y><z/></y> : <x><y/></x>, constructor) ((function(){let(constructor, constructor.__parent__) ((function(){let(prop = 1e-81 && <x/>) { for(let y in [5,6,7,8]) var continue ;;})());})());");
tryItOut("while((({__noSuchMethod__ getter: function () \"\" , (__proto__ getter: __count__) })) && 0)");
