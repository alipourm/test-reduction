tryItOut("/*for..in*/M:for(__noSuchMethod__ = __proto__ = * in new ({}).hasOwnProperty(true)) /*infloop*/for(prototype = <><x><y/></x></>; <y><z/></y>; *) {{}(this); }");
tryItOut("L:if( /x/g ) {; }");
tryItOut("if(gc()) { if (new ((1 for (x in [])))(5.0000000000000000000000, *::*)) { /x/g  }} else {return; }");
tryItOut("let prototype = 4.;");
tryItOut("with(undefined){/*infloop*/do {yield [1,,]; } while([15,16,17,18].filter(/a/gi, arguments)); }");
tryItOut("/*for..in*/for(const (__parent__) = <x/>.hasOwnProperty(\"__parent__\") in window) {const __noSuchMethod__, __count__; const prototype; }");
tryItOut("/*infloop*/; while get prop(__proto__, prop) { yield @foo } );");
tryItOut("{export constructor\n }");
tryItOut("export __parent__;");
tryItOut("if(eval(\"<><x><y/></x></>\", *::*)) (-1); else  if (#1# = *) {'haha'.split } else ;");
tryItOut("yield;");
tryItOut("*;1.3;");
tryItOut("const __noSuchMethod__\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ in *::*) {export *; }\n");
tryItOut("L:if(('haha'.split\f).call(<y><z/></y>, ) instanceof (prop = 'fafafa'.replace(/a/g, gc))) {throw this !== __count__;if( /x/g ) {<x/>;yield; } else  if (false) export prop; } else {prop; }");
tryItOut("if((--window)) { if ((({}).__lookupGetter__).call(arguments, (@foo.isPrototypeOf(<x/>)))) {yield window;do new Function while(((window.watch(\"__parent__\", \ffunction(q) { return q; }))) && 0); } else {if(#=<x><y/></x>)  else throw ({}); }}");
tryItOut("M:with((yield this.zzz.zzz)){throw __iterator__;; }");
tryItOut("if(RegExp()) {throw undefined; } else  if ( \"\" .@*) break ;");
tryItOut("Function");
tryItOut("/*infloop*/while(<x/>){do {(1e-81);yield ({a1:1}); } while((<x><y/></x>.eval(constructor)) && 0); }");
tryItOut("if() { if (#1=[#1#] && <y><z/></y>) {throw -3/0; }} else gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in this.__defineGetter__(\"prop\", <y><z/></y>)) {__count__ = true; }");
tryItOut("/*infloop*/for(let __parent__; (<><bbb xmlns=\"new (eval)( \"\" )\">yyy</bbb></>.unwatch(\"constructor\")); this) {export *; }");
tryItOut("M:if((__noSuchMethod__.propertyIsEnumerable(\"prop\"))) {} else  if ((__proto__-=this\n)) function(y) { yield y; (x::prop).watch; yield y; } else ");
tryItOut("{gc()gc() }");
tryItOut("/*for..in*/for(const __proto__ in \t-1.prototype) throw constructor;");
tryItOut("/*for..in*/for((\f((({ get constructor() { return <x/> } , __count__: <><x><y/></x></> })) for each (function::__count__ in constructor) if (<><x><y/></x></>)))(\n({a1:1})) in *) <><x><y/></x></>");
tryItOut("this.zzz.zzz;");
tryItOut("{/*infloop*/for(--<x><y/></x>; @foo; (yield (({ __iterator__: __noSuchMethod__, prop: __parent__ }) = <y><z/></y>))) yield; }");
tryItOut("return\nlet (__noSuchMethod__ = (<><x><y/></x></> <= this)) { return; }\n");
tryItOut("/*for..in*/for(let constructor in ((({}).hasOwnProperty)([,,z1].valueOf(\"number\"))))({)const __iterator__, __parent__ = null;var prototype; {{({}).__lookupGetter__ }continue ; } }");
tryItOut("M:if((prototype.watch(\"__count__\", function(q) { return q; })).isPrototypeOf((new (<><x><y/></x></>)(null,  /x/g )))) { if (eval(\"yield;\",  '' ).yoyo(<x/>)) {(new Function(\"break ;\")) }} else {/*infloop*/do {} while(*); }");
tryItOut("if(let (constructor =  '' ) __count__) { if ((constructor.propertyIsEnumerable(\"__proto__\"))) __proto__, prop} else let __proto__;");
tryItOut("/*infloop*/M:for(<xxx {__count__}={this} />; <x/>; <x><y/></x> for each (__parent__ in false)) {prototype = <x><y/></x>; }");
tryItOut("M:switch(<><x><y/></x></>.__noSuchMethod__.__defineGetter__(\"constructor\", [1,2,3,4].map)) { case 5: /*for..in*/M:for(let constructor(<y><z/></y>.hasOwnProperty(\"constructor\")) in ((Math.pow)(function(y) { yield y; ;; yield y; }))){({ prototype: [function::__noSuchMethod__, , __iterator__(<><x><y/></x></>)] }) }break; case [11,12,13,14].some: break;  }");
tryItOut("/*infloop*/L:do break ; while((((({})).watch).call(<x/>.__lookupGetter__(\"prototype\"), <x><y/></x>, this)));");
tryItOut("/*infloop*/do let prototype, prop; while(__proto__.constructor = yield this);");
tryItOut("/*infloop*/for(var __proto__; [,,]; (__noSuchMethod__.(<y><z/></y>.__proto__.yoyo([1].isPrototypeOf(undefined))))++) {export constructor; }");
tryItOut("/*infloop*/while(new (prop)()){if((constructor)()) { if ((uneval(prototype))) {}} else yield __count__;yield \f<><x><y/></x></>\n }");
tryItOut("throw __proto__\n");
tryItOut("export prototype; const __noSuchMethod__;/*infloop*/for({}.__defineSetter__(\"prop\", new Function); this.__defineSetter__(\"__iterator__\", function  prototype (constructor, __parent__) { return [] } ); prop = __noSuchMethod__) {yield; }");
tryItOut("/*for..in*/for([prototype, prop] = window.__defineSetter__(\"prototype\", function (__count__, prop) { return __parent__ } ) in <x><y/></x>\t) {export __iterator__;var prototype = null, __count__; }");
tryItOut("/*for..in*/for(let [__count__, function::prop] = prototype.(<x/>) in function(id) { return id }) export *\ntry { ({}).hasOwnProperty } finally { {} } ");
tryItOut("if(__count__ = undefined\n) {(prototype);false; } else {const __iterator__ = __proto__, __parent__; } const function::prototype;");
tryItOut("/*for..in*/M:for(let [prop, prototype] = <x/> in -Math.sin()) {/*for..in*/for(const __parent__ = new ([1])(.2) in [1,,]) yield 4.;if(false) { if ( /x/ ) {T{} } else {yield; }} }");
tryItOut("let (__iterator__ = this + window) { var __iterator__ = constructor; }");
tryItOut("yield [11,12,13,14].filter;");
tryItOut("return;");
tryItOut("/*infloop*/M:for(<x><y/></x>.(__parent__); [15,16,17,18].map((Math.pow).call, (-1)); this.zzz.zzz\f.__lookupGetter__(\"constructor\")) if(({x::__noSuchMethod__: <x><y/></x> - <x/>})) export constructor; else  if ((__count__ = constructor.@*)) {{} }");
tryItOut("{export *; }");
tryItOut("L: {<x><y/></x>export *; }");
tryItOut("M:while((this >> <x><y/></x>) && 0){const prop = true, constructor; }");
tryItOut("if(033.prop = <><x><y/></x></>\r) {(__count__);return <x><y/></x>; } else {prop; }");
tryItOut("if( /x/g ) /*infloop*/for(prop; __parent__; <><x><y/></x></>) ({}).hasOwnProperty else {gc() }");
tryItOut("switch(<><x><y/></x></>.__iterator__ *= 033) { default: /*infloop*/M:do  for each (constructor in .2) while(3/0 | <><x><y/></x></>);break;  }");
tryItOut("let (prototype = <x/>, __proto__ = <y><z/></y>) { -1; }");
tryItOut("gc()\n");
tryItOut("/*for..in*/M:for(let __parent__ in *::*) {return  /x/ ; }");
tryItOut("for(let y in []);");
tryItOut("with((prototype.*)){}\nif(function(q) { return q; }) { if (!<><x><y/></x></>) {<><x><y/></x></>; } else {export *; }}");
tryItOut("/*for..in*/M:for(prop = <x/>++ in new function(y) { yield y; yield;; yield y; }()) {/*infloop*/do while(([<><x><y/></x><\t/>]) && 0){let [1,2,3,4].map; } while((gc)(default: break; case 8: ));return\n }");
tryItOut("if(<y><z/></y>) <x><y/></x> else  if (this) {yield; } else {let constructor = prop; }");
tryItOut("/*infloop*/for(3/0 * 1.3.__defineGetter__(\"__parent__\", function (let, __iterator__)(<x><y/></x>.(false))); function::__iterator__; ({ get constructor __noSuchMethod__ (__count__)*::* })) {; }");
tryItOut("gc()");
tryItOut("while((<><x><y/></x></>.__defineSetter__(\"__count__\", function(y) { yield y; ({a2:z2});; yield y; })) && 0)for(let y in []);");
tryItOut("try { with({}) { with({}) { return 1e+81; }  }  } finally { __proto__ = __iterator__; } ");
tryItOut("/*infloop*/for(1.2e3; #1=[#1#]; [,,z1]) { for each (__noSuchMethod__ in prop = -0) for (({ __count__: ({ __iterator__: __parent__ }) }) in prototype.__parent__ = this) if (__proto__) }");
tryItOut("throw StopIteration;");
tryItOut("switch(({ constructor: prop, constructor: ({ constructor: prototype }) }) = window.__lookupSetter__(\"__noSuchMethod__\")) { default: /*infloop*/M:do return; while((constructor = this));break;  }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in 1e-81.eval(*)) {/*infloop*/L:for(let __noSuchMethod__; <y><z/></y>; #1=[#1#]) continue L; }");
tryItOut("M:switch(null) { default: break; case 3: break; case prototype: {}break;  }");
tryItOut("yield;");
tryItOut("/*infloop*/while((yield <><x><y/></x></>)){{while((window) && 0){var __iterator__; }([,,]); }let (constructor) { L:if(*::*) { if ( /x/g ) export *; else {export *;const __noSuchMethod__; }} } }");
tryItOut("if(true << *) { if /*\n*/(<><x><y/></x></>) } else {const prototype = <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) with({}) try { with({})  } catch(__iterator__ if __iterator__ =  { return <y><z/></y> }  >>= undefined) { __iterator__ = __proto__; } finally { yield (new function (prototype, __parent__)window(this, <x><y/></x>));\t } ");
tryItOut("/*for..in*/L:for(let __proto__.__iterator__ in (@foo)(window, this)) {/*for..in*/for(const __iterator__ = (0x99 :: 1e4) in <x><y/></x>) {let prototype;yield *::*; }L: export *; }");
tryItOut("prototype, __noSuchMethod__ = prototype\nexport *; const __parent__/*\n*/;");
tryItOut("/*infloop*/while(( /x/ .@foo.watch(\"prop\", gc))){L: {prototype = {}; }return arguments; }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: [({ __proto__: __proto__ })] }) = __count__ =  '' ; var __proto__, constructor; (RegExp())) {__count__ =  /x/ ; }");
tryItOut("with(this.yoyo(-0)){({}).hasOwnProperty } const constructor;");
tryItOut("M:with({__iterator__: ([__proto__, [], ({ __noSuchMethod__: prop, prototype: [({ __parent__: __count__, prototype: __count__ })] }), ,  { yield Function((this.__defineSetter__(\"function::__proto__\", ({}).hasOwnProperty).throw(<y><z/></y>.watch(\"__proto__\", ([1,2,3,4].slice).apply)))) } ] = this)})/*infloop*/M:do {return window; } while(this.zzz.zzz < *.prop);");
tryItOut("this.zzz.zzz;");
tryItOut("{{} }");
tryItOut("M:with({__count__: 0x99 & this}){yield break L;;continue ; }");
tryItOut("/*for..in*/M:for(var __proto__ in *::*) yield [,,z1];");
tryItOut("/*infloop*/do {/*for..in*/L:for(const [constructor, __noSuchMethod__] = [15,16,17,18].sort(function  constructor (__noSuchMethod__, __parent__) { yield this } , this) in *) break ;constructor = *::*; } while(([11,12,13,14].sort));");
tryItOut("/*infloop*/for((window.watch(\"__parent__\",  /x/g )); (!<x/>); window & <><x><y/></x></> && prototype) var __noSuchMethod__ = undefined;");
tryItOut("with({}) with({}) { ; } ");
tryItOut("{(function::prototype); }");
tryItOut("if((__proto__ = __count__)) {window; }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("if((<y><z/></y>)(__noSuchMethod__, <x><y/></x>).__defineGetter__(\"__count__\", function  __iterator__ (__noSuchMethod__)false)) L: __count__ = <x><y/></x>, __count__;{if(window) { if (prototype - -3/0) throw  \"\" ; else {export *;prop.__count__ = yield <><x><y/></x></> }} }");
tryItOut("/*infloop*/for(__parent__; -0; <><x><y/></x></>) {export *;; }");
tryItOut("throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut("with({prototype: (Date(<x/>)) = (new Date(__noSuchMethod__, <x><y/></x>))})do gc() while((1.3) && 0);");
tryItOut("let (__parent__ = true, __parent__) { gc() }");
tryItOut("if((eval(\"<x><y/></x>\", (new ((function(y) { yield y; continue ;; yield y; }).apply)(<><x><y/></x></>, 4.))))) { if ((({__parent__: false})).*) {{} }} else {return __noSuchMethod__; }\n");
tryItOut("export *;");
tryItOut("M:with(yield <><x><y/></x></>.yoyo(yield window.yoyo(<y><z/></y>))){yield prop;{gc() } }");
tryItOut("do yield; while((window) && 0);");
tryItOut("if((Iterator(<x><y/></x>))) {export __iterator__;gc() } else  if (({}) - <x><y/></x>) {gc() } else ");
tryItOut("if(null) L:if(this) Math.pow else  if (<x><y/></x>) {yield <><x><y/></x></>; } else {return; } else  if ((new (Math.sin)(__parent__, __iterator__))) yield; else /*for..in*/M:for(const __iterator__ = 1e4 in this) {return [[1]]; }");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>.__lookupSetter__(\"constructor\")) {<y><z/></y>; const prop\n; }");
tryItOut("/*for..in*/for((<x><y/></x>.hasOwnProperty(\"prop\")).prop in __count__.__noSuchMethod__) (<><x><y/></x></>);");
tryItOut("L: var __iterator__ = undefined;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((new Function(\"yield;\")))([z1]))){yield; }");
tryItOut("/*infloop*/while(@foo){/*for..in*/for(var constructor.prop in ((Math.sin)([,,z1].throw([[]])))){break ; }{/*for..in*/for(const [__parent__, prototype] = constructor = [z1,,] in [1,,]) if( '' ) ;\t else  if (-0) {throw <><x><y/></x></>; } } }");
tryItOut("{L:if(\tnew ( /x/ )(<><x><y/></x></>, window)) { if (__count__) const __iterator__ = ({a1:1}), __parent__; else {yield; }} }");
tryItOut("export prototype;\nyield true;\n");
tryItOut("throw *::*;\nif(undefined instanceof __proto__) const __noSuchMethod__, __parent__; else  if (<y><z/></y> == <y><z/></y>) {var __parent__ =  \"\" , __count__ = __proto__;yield null; }\n");
tryItOut("");
tryItOut("/*infloop*/while( /x/g .eval(<x><y/></x>))yield this;");
tryItOut("yield __count__ =  /x/ ");
tryItOut("gc()\n");
tryItOut("/*infloop*/L:for(let prototype; (__noSuchMethod__3.141592653589793); (<x><y/></x> :: ({a1:1}))) {{} }");
tryItOut("if((__noSuchMethod__ = *::*)) yield; else {}");
tryItOut("let (({ __parent__: ({ __iterator__: [prop, constructor, ({ __noSuchMethod__: x::__noSuchMethod__ }), , []] }), __proto__: [__parent__, ({ prop: [, prop, , ], prop: [, prop, constructor, ] })] }) = 1e81) { (continue) L; }");
tryItOut("/*for..in*/for(var prototype in ((Function)(constructor))){const __proto__\n }");
tryItOut("/*for..in*/L:for(const __iterator__.prop in ((__parent__ =  /x/g )((0.throw(window) for (constructor(this) in constructor) for each (__parent__ in <><x><y/></x></>))))){throw <><x><y/></x></>\n }\n(yield).__defineSetter__");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (-0) in ((window)(true())))continue ;");
tryItOut("/*for..in*/for(var __count__ = .2 in __proto__ = [, , ({ __noSuchMethod__: prototype, constructor: __noSuchMethod__ })/*\n*/, ({ prototype: __count__, __iterator__\r: prototype })]) return;");
tryItOut("let(__proto__) { with({}) let(__parent__) ((function(){return;})());");
tryItOut("{var prototype;const __noSuchMethod__, prop; }");
tryItOut("return;");
tryItOut("try { try { throw StopIteration; } catch(constructor) { throw __noSuchMethod__; } finally { yield <><x><y/></*\n*//x></>; }  } finally { let(__proto__) ((function(){with({}) { return \teval(\" '' \", this); } })()); } ");
tryItOut("while((#2=[<><x><y/></x></>]) && 0){with([15,16,17,18].filter(eval, prototype)){<x><y/></x>;/*infloop*/for(__proto__ = <x/>; 1e+81; false) ; }function  prop ()__iterator__ }");
tryItOut("if(*::*) {} else  if (this.__defineGetter__(\"__proto__\", (-1).apply)) {gc()var prop = this, prototype = <x/>; } else {export __proto__;\t }");
tryItOut("/*for..in*/for(__count__ = * in []) {prop; }");
tryItOut("L:with({__iterator__: function  __count__ () { return (function::__proto__) } ([15,16,17,18].some(function (__noSuchMethod__, prototype)undefined, [,]) &= (let (prop = [,,]) 1e+81))})with(<x/>){const prop = <y><z/></y>, constructor;let __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (__proto__) in *::*) yield;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in #0=({__count__: <x/>})) let (__proto__, __parent__ = <x><y/></x>) { __noSuchMethod__ = null }");
tryItOut("throw this\n");
tryItOut("{L:do export __iterator__;\n__iterator__, __noSuchMethod__;\n while((new ({}).__lookupGetter__(<x/>, [1])) && 0);yield\n }");
tryItOut("break L;\nexport \tprototype;\n");
tryItOut("/*infloop*/for((prop-=({constructor: undefined, __iterator__: <x><y/></x> })); __parent__.__noSuchMethod__; (function(q) { return q; })(<x/>, <x><y/></x>)) { \"\"  }");
tryItOut("M:if((#3={a:#3#}.prop = __proto__)[eval(\"this\", <x><y/></x>)]) (-1); else  if (\n__iterator__) {yield; } else {L: {gc()return; }(window); }");
tryItOut("switch(([,,] = ({})) <<= [each = <x><y/></x>].map(function(y) { yield y; yield;; yield y; })) { case 2: /*for..in*/for(__parent__ = (__iterator__.((uneval(<y><z/></y>)))) in __proto__) {export __noSuchMethod__; }break; default: this.zzz.zzz;case *::* >> *::* * <x><y/></x>.watch(\"__parent__\", Function): /a/gibreak; case Boolean(this, constructor): break; yield <x><y/></x>;\n([,]).__defineSetter__\ncase (<x><y/></x>)(constructor) = + \"\" \t: export *;break; (this); }");
tryItOut("this.zzz.zzz;");
tryItOut("M:while((let ({ prop: __count__ }); / ) && 0)break ;");
tryItOut("export *;");
tryItOut("let prop, __proto__;<x/>;");
tryItOut("do {{L:switch({}) { default: export *; } } } while((({ __proto__: [, , , []] }) = __count__ ?  /* Comment */ : (undefined\n).__lookupSetter__(\"__count__\").__count__ && ({__count__: (*::* |= <x><y/></x>),  set __noSuchMethod__ __count__ (__proto__) { yield this.__defineSetter__(\"__iterator__\", [1,2,3,4].map) <<= *.prop = -1 }  })) && 0);");
tryItOut("with({__count__: __parent__ = <y><z/></y>.__noSuchMethod__}){return;export __proto__; }");
tryItOut("[,,]");
tryItOut("/*infloop*/L:while(#0=({__parent__: <x><y/></x>}))return;");
tryItOut("prop = __count__;");
tryItOut("/*infloop*/do {gc() } while(<><x><y/></x></>);");
tryItOut("(get) = yield;");
tryItOut("/*infloop*/for((__count__.__parent__ = __count__|=5.0000000000000000000000.__noSuchMethod__); ({ __parent__:  ''  }) = ({ set __proto__//h\n(prop, __noSuchMethod__) { yield <><x><y/>\f</x></> } ,  set function::__iterator__(__count__) { return window }  }); window) if(<x/>) { if ([[1]]) {yield prototype; }} else export *;");
tryItOut("with({__count__: ([__proto__.valueOf(\"number\")].some('haha'.split)\r)}){{} }");
tryItOut("this;with({}) { (;); } ");
tryItOut("\fif((__noSuchMethod__)[prototype = @foo.hasOwnProperty(\"__iterator__\")]) /*for..in*/L:for(const function::__noSuchMethod__ in  /x/ ) __iterator__; else {; }");
tryItOut("L:with({prop:  /x/ [constructor]})");
tryItOut("M:if(\rtrue) const prop, prototype = true; else continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */prototype");
tryItOut("\treturn (new (({}).__lookupGetter__)(window, this));");
tryItOut("{}");
tryItOut("M:if(@foo) for(let y in []); else  if (((eval(\"String()\", <x/> instanceof *::*)).throw((@foo ? <><x><y/></x></> : //h\n<x><y/></x>).*))) {if(__count__ > <><x><y/></x></>) { if (0/0 = <><x><y/></x></>.hasOwnProperty(\"getter\")) var prop, '; else {return\nconst __count__, __parent__; }}gc() }");
tryItOut("/*infloop*/M:while\f(__noSuchMethod__.(([__parent__]) for each (constructor in 5.0000000000000000000000) for each (__proto__ in <x/>))){return  /x/g ;/*infloop*/for(let [, ({ __noSuchMethod__: __proto__, __noSuchMethod__: __proto__ }), , constructor, ] =  '' .@*; +this.zzz.zzz; ({__proto__: <y><z/></y>, __parent__ setter: eval }) ^ ((new Function(\"(<x><y/></x>).__defineSetter__\")).__defineSetter__(\"__count__\",  '' ))) {gc() } }");
tryItOut("let(__noSuchMethod__ = __iterator__, __proto__) { return let;");
tryItOut("/*for..in*/for(constructor = ((({(-3/0);{} }))(true\f(null)) = <><xxx>{__noSuchMethod__}</xxx></>) in arguments) p");
tryItOut("for(let y in [5,6,7,8]) try { for(let y in []); } catch(__count__) { throw StopIteration; } finally { try { with({}) { with({})  }  } catch(constructor if  /* Comment */(yield true).@foo) { for(let y in []); }  } ");
tryItOut("with({}) { let ({ prop: prototype, \f__count__: ({ __count__: ({ __noSuchMethod__: __iterator__, constructor: prototype }) }) }), __noSuchMethod__; } ");
tryItOut("L:if(this.__defineGetter__(\"__proto__\", Math.sin)) { if ([]) ([]).watch else const __proto__;}");
tryItOut("gc()");
tryItOut("<x><y/></x>");
tryItOut("/*for..in*/for(let [__proto__, prototype] = [window if (1.3)] in false) do {(window); } while((window) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x><y/></x>) __proto__;");
tryItOut("if(033) {const __parent__;/*infloop*/M:do export __iterator__; while(__iterator__); } else const prototype = <y><z/></y>;");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __noSuchMethod__] = eval(\"/*for..in*/M:for(var __noSuchMethod__ in ((function (prop, prototype) { yield window } )(*)))const let;\", 'fafafa'.replace(/a/g, <><x><y/></x>>)) in (this % (new Function(\";\")))) break ;");
tryItOut("/*infloop*/while((__noSuchMethod__[arguments]))constructor = <x><y/></x>, __proto__ = <y><z/></y>;");
tryItOut("if(<><x><y/></x></>) {var __parent__, __iterator__ = 1e4; } else  if (0) yield undefined;");
tryItOut("/*for..in*/for(let __iterator__ = var constructor; in (prop in <x/> .. null)) {break ; }");
tryItOut("<><x><y/></x></>; const __count__;");
tryItOut("/*for..in*/for(function::__parent__.__proto__ = ((function ([y]) { })().prop = this) in <x><y/></x>) M:with({__noSuchMethod__: this})yield constructor;");
tryItOut("return;");
tryItOut("/*infloop*/M:do {/*for..in*/M:for(var (__proto__) in ((function (__parent__)<><x><y/></x></>)((function  prop (prototype)this)()))){with({prototype: window}); } } while(1e81.constructor = *::*);");
tryItOut("/*infloop*/(L\f:for(; prototype; ) {__parent__ = __proto__; })");
tryItOut("__proto__, __proto__ = <><x><y/></x></>\nprop:  /x/ ");
tryItOut("M:if(__iterator__ = 0) with((String(__parent__, @foo))){(constructor); } else  if ((({a2:z2}))[@foo]) {/*infloop*/L:for(let prototype\t = null; <y><z/></y>; __noSuchMethod__.__proto__ = <><x><y/></x></>) let __noSuchMethod__ = true; }");
tryItOut("if((this.__defineGetter__(\"__proto__\", function(y) { yield y; if(( /x/ ).call(*::*, <x><y/></x>, <x><y/></x>)) { if ( /x/g  | -3/0) {continue M; } else __parent__}; yield y; }))) { if ((eval(\"export *;\", ({}))['__noSuchMethod__'] * 5.0000000000000000000000)) {if( /x/g ) { if (window) export __noSuchMethod__;} else yield  /x/g ;export * } else 3;}");
tryItOut("prop");
tryItOut("/*for..in*/for(const [__proto__, \nconstructor] = __iterator__(function(id) { return id },  '' ) in <><x><y/></x></>) return @foo;");
tryItOut("throw 1.2e3;");
tryItOut("do let prop, prototype; while((true.__defineSetter__(\"__noSuchMethod__\", function (__noSuchMethod__) { #1 } )) && 0);");
tryItOut("/*for..in*/for(const [prop, constructor] = <x><y/></x> in constructor) {export __count__;prop = <><x><y/></x></>, K =  /x/g ; }");
tryItOut("L:if(new (function(id) { return id })()) {return;__proto__;gc() }");
tryItOut("if(~let (__count__ = <y><z/></y>, __parent__) <x><y/></x>) { if () {/*infloop*/L:for(const __iterator__; <x><y/></x>.(<x><y/></x>); (uneval([z1,,]))) {{} }export __count__; }} else {var constructor, __proto__ = __count__; }");
tryItOut("const __parent__, __parent__ = [,];");
tryItOut("throw true");
tryItOut("with({__parent__: ((<x><y/></x>)(null))})<x><y/></x>;");
tryItOut("if(this.zzz.zzz) {(true); } else export *;");
tryItOut("with({}) { yield; } ");
tryItOut("yield  /x/ ;");
tryItOut("/*for..in*/for([__parent__, constructor] = <xxx>{__noSuchMethod__}</xxx> in (__parent__ = ( \"\"  in  /x/ ))) {return arguments; }");
tryItOut("{M:if((Function( '' , [,,z1]))) { if ([] = void  /x/g ) {var __count__ =  /x/g , __parent__;let (__proto__ = __proto__, prototype) { export *; } } else {continue ; }} }");
tryItOut("{{} }");
tryItOut("L:if(<xxx>{prototype}</xxx>) { if ((((eval(\"export __iterator__;\", <><x><y/></x></>))).watch())) {yield  '' ;export prototype; }} else continue ;");
tryItOut("for(let y in [5,6,7,8]) with({}) {  } ");
