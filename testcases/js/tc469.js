tryItOut("if(+( /* Comment */ '' .yoyo(<x/>.*))) {while(((constructor.prototype = arguments)) && 0)return  '' ;; } else  if (new Function) let (__noSuchMethod__) { export *; }");
tryItOut("let (__count__) { ((-1)); }");
tryItOut("return;");
tryItOut("switch(__iterator__ =  /x/ ) { case 9: break; case ((- /x/  = @foo).yoyo(__noSuchMethod__)): break;  }");
tryItOut("/*infloop*/L:do {gc()\nyield [z1,,];\n } while(({prop: (false.__defineSetter__(\"__parent__\", (new Function(\"export prototype;\")))) }));");
tryItOut("let(prop = eval(\"return;\", true)--) { with({}) { return; } ");
tryItOut("let prop = <><x><y/></x></>, constructor = this;");
tryItOut("/*infloop*/M:for(let __proto__; (<><x><y/></x></> for each (prop in true)); (yield (-0))) let __proto__ = <y><z/></y>, __noSuchMethod__;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("if(<><x><y/></x></>) { if (arguments)  if (-3/0)\f else {yield <y><z/></y>;var __noSuchMethod__ = <x/>; }}");
tryItOut("if(__count__ = +<x/>.__iterator__) { if ((*.__iterator__)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) (033).__defineSetter__ else each = __parent__;}");
tryItOut("this.zzz.zzz;");
tryItOut("continue M;");
tryItOut("L: {let constructor;; }");
tryItOut("/*infloop*/M:while(__noSuchMethod__)L:if(this) {(<><x><y/></x></>);export *; } else {yield;(true); }");
tryItOut("/*infloop*/for(({ window: __count__ }) = __count__.setter setter= (<x><y/></x>).watch; (__count__+=<x/>);  /x/g  - <x/>) ({ set __parent__(__proto__, __parent__) { yield; }  })");
tryItOut("switch(__parent__.__parent__ setter= new Function) { default: break;  }");
tryItOut(" '' \n");
tryItOut("return <><x><y/></x></>.__iterator__ = __parent__;");
tryItOut("for(let y in [5,6,7,8]) let(function::__count__ = window) { yield 0;\nyield\ncontinue L;\n");
tryItOut("/*for..in*/for(const constructor in window) throw <x><y/></x>;");
tryItOut("L: if(new Exception((<y><z/></y>.prototype , ((*::*).apply)(#1#,  \"\" )))) __iterator__, __noSuchMethod__; else  if (__count__.__count__.__defineSetter__(\"__count__\", function(y) { yield y; return <><x><y/></x></>;; yield y; })) {set, __count__;{} } else {prop = *::*, prototype;let __iterator__ = this; }");
tryItOut("/*infloop*/for(const ({ constructor: ({ constructor: __proto__, constructor: __iterator__ }) }) = (__iterator__ = new ((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.([z1].yoyo(this))))(prop.(prototype--), (this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"export constructor;\")))))); this.__defineGetter__(\"prototype\", <x/>); <x/>) {L: yield <><x><y/></x></>;*\f; }");
tryItOut("{switch([z1] + <y><z/></y>) { case 2: break; case 4: continue M;break;  } }");
tryItOut("/*infloop*/for(<x><y/></x>; <><x><y/></x></>; <x/>) (<x><y/></x>);");
tryItOut("/*infloop*/M:for(function ([y]) { }; <><xxx>{__iterator__}</xxx></>; ( /* Comment */new __proto__(__iterator__))) {export *; }");
tryItOut("let(constructor = eval(\"(prop);\", *)) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*/L:for(const __proto__ in <y><z/></y>) return");
tryItOut("/*infloop*/M:for(const __iterator__; *::*; (*::* for (__proto__ in <x/>).__defineSetter__(\"__iterator__\", @foo))) { }");
tryItOut("/*for..in*/for(const (null)(<><x><y/></x></>) in ((Math.pow)(window))){const __count__, get = function ([y]) { };prototype; }");
tryItOut("{continue M;yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in yield) while((<><x><y/></x></>) && 0)return;");
tryItOut("/*infloop*/for(let __count__; ({ get __proto__(__iterator__, __proto__) { return undefined }  }); window) {export *;{export *; } }");
tryItOut("continue M;\t");
tryItOut("return;");
tryItOut("M:while(((constructor.(prototype = __noSuchMethod__))) && 0)/*infloop*/do {__count__ = 4., prop; } while(<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in ({})) {{} }");
tryItOut("L:do {if(4.) ({a1:1});L:switch(prototype = window) { default:  } } while((__iterator__\n) && 0);");
tryItOut("M:with(constructor = null ^ (@foo)()){/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in @foo) {yield; }\nreturn true; }");
tryItOut("if((prop , <><x><y/></x></>)) { if (__parent__) prototype = null, prototype =  /x/ ;} else {<x><y/></x>;gc() }");
tryItOut("gc");
tryItOut("L: if((new *(1e-81, (function ([y]) { })()))) { if (<y><z/></y> -= [z1,,]) } else ");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do {try { const constructor; } catch(prototype if <><x><y/></x></>) { yield @foo; } finally { yield <y><z/></y>; } return function(id) { return id }; } while((Function).call(.2, (-1)));");
tryItOut("do export *; while((<><zzz>(({__iterator__: <><x><y/></x></>, __noSuchMethod__ getter: ({}).hasOwnProperty }))</zzz></>) && 0);");
tryItOut("L:if(__iterator__) gc()");
tryItOut("throw __proto__;");
tryItOut("if(<zzz><{__noSuchMethod__}> </{__noSuchMethod__}>.(eval(\"(1e4[new (<><x><y/></x></>)(this, <><x><y/></x></>)])\", prototype.prototype))</zzz>) { if ( /* Comment */@foo == [,,z1]) {prototype, prototype = <x/>;\nprototype = this;\n }} else {let (__iterator__, __proto__) { (<x><y/></x>); }const ; }");
tryItOut("for(let y in []);");
tryItOut("throw __count__;");
tryItOut("export __count__");
tryItOut("if(window) { if (undefined) (__proto__); else {let prototype, constructor; }}");
tryItOut("switch(__parent__.((prototype = 1.2e3))) { default: yield <y><z/></y>;break; const __proto__ = <><x><y/></x></>, prototype = false; }");
tryItOut("/*infloop*/M:for(__iterator__ = constructor['prop'] = [function(id) { return id }].filter(({}).__lookupGetter__); function::prototype = <x><y/></x>; ([(, ] = (null ? \tnew (\rnew Function)() : ((*::*).__defineSetter__)()))) {/*infloop*/while\t([1]){yield;export *; } }");
tryItOut("/*infloop*/M:for((uneval((__iterator__)[true])); ((function (constructor, __count__) { let constructor = <x><y/></x>, __count__ = true; } )(<x/>)) || __count__%=#3={a:#3#}; (null || [,,z1]).isPrototypeOf((function (prop)0)(<x><y/></x>))) (this);");
tryItOut("if(-0) {yield; } else  if (__parent__) export __proto__;");
tryItOut("let ([, , constructor] = 'fafafa'.replace(/a/g, [1,2,3,4].map)) { /*infloop*/while()export prototype; }");
tryItOut("with({__noSuchMethod__: true\n()}){export prop;continue ; }");
tryItOut("{({}).__lookupGetter__ }");
tryItOut("{if(new ( /x/ )(*::*)) { if ((p={}, (p.z = (<x><y/></x>.__noSuchMethod__))())) ; else {continue M; }} }");
tryItOut("if([<><><x><y/></x></></> if (eval(\"(function ([y]) { })()\", this))]) {throw <x/>\n }");
tryItOut("with({__parent__: *})__iterator__");
tryItOut("/*infloop*/L:for(RegExp(+<x><y/></x>, window !== @foo); (<y><z/></y>(3/0))[eval(\" /x/g \", false)]; [11,12,13,14].some) *;\f");
tryItOut("if((( /x/  for each (__proto__ in  /x/ )))) {var prototype;throw [,]; } else  if (window) {yield *::*; }\n");
tryItOut("/*for..in*/M:for(const prototype = * in <y><z/></y>) {return <y><z/></y>; }\f");
tryItOut("/*infloop*/while(({ __iterator__: __iterator__, prop: __noSuchMethod__ }) = function(id) { return id })const prop = this, __noSuchMethod__;");
tryItOut("/*infloop*/while(((gc).apply)(Iterator(4.), function ([y]) { } + <x><y/></x>))/*for..in*/M:for(let __iterator__ in constructor = __noSuchMethod__) {if(*) {__noSuchMethod__, __count__ = <><x><y/></x></>;export *; } else  if ( \"\" ) {{}const __proto__ = <><x><y/></x></>; }gc() }");
tryItOut("export __count__; const constructor;");
tryItOut("for(let y in [5,6,7,8]) with({}) { yield; } ");
tryItOut("throw StopIteration;");
tryItOut("if((constructor)(true)) const each =  /x/g , __noSuchMethod__;");
tryItOut("with((yield window))throw <x><y/></x>;");
tryItOut("with(yield (0.1)[@foo])do {;let __parent__ = 4., __parent__; } while(( /* Comment */function ([y]) { }) && 0);/*infloop*/for(const prototype; <><x><y/></x></>.throw(window); ([window])) {<x><y/></x>;; }");
tryItOut("M:switch(undefined) { case prototype: @foo;break;  }");
tryItOut("");
tryItOut("for(let y in []);");
tryItOut("if(__proto__.(<y><z/></y>)()) { if ((yield new  \"\" (<y><z/></y>, 1.3))) {return <x/>;let __parent__, __noSuchMethod__ = <x><y/></x>; }\t} else {null; } const __noSuchMethod__;");
tryItOut("if(undefined) { if (<x/>) {this; } else {prototype; }}");
tryItOut("if((gc(*, *))) { if (__noSuchMethod__ = *) {yield __proto__;export __iterator__; } else throw <><x><y/></x></>;}");
tryItOut("with({__parent__: * = <><x><y/></x></>})export *;");
tryItOut("{yield;gc() }");
tryItOut("/*infloop*/do {if(((function  __count__ (__parent__) { yield <x><y/></x> } )(null, @foo))) {} else {@foo;; } } while( /* Comment */function::this = <><x><y/></x></>);");
tryItOut("/*infloop*/for(__iterator__; [(<x><y/></x>)(<x><y/></x>, <><x><y/></x></>) for each (constructor in <x/>) if ( '' )]; new ([[1]])() * prop) {M:if(@foo) {const __count__, __proto__;return <y><z/></y>; } else  if ( '' ) return #1#; else const __proto__ = *, __iterator__ =  \"\" ; }");
tryItOut("var prototype =  /x/g ;/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in  /x/ ) {while(([]) && 0){var prototype, __parent__ = .2;__parent__; } }");
tryItOut("(true);");
tryItOut("/*infloop*/for(({ __parent__: prop, __iterator__: __proto__ }) = <><x><y/></x></> >= true; <><x><y/></x></> >>>= \"\" ; <></>.(<x><y/></x>.eval( '' ))) {;var prop, __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let \n__noSuchMethod__\r['__iterator__'] in window['prop'] = <x><y/></x>) {/*for..in*/for(prop in ((/a/gi)(__proto__ =  /x/g )))return; }");
tryItOut("L:if( '' ) { if (__proto__ <<= null) {\nreturn;return <x><y/></x>; } else break L;}");
tryItOut("{if(__iterator__) {/*infloop*/for(__noSuchMethod__; this; false) {gc()yield  /x/g ; } } else {return;gc() } }");
tryItOut("/*infloop*/for(let constructor; __parent__.__iterator__ = (([z1,,])(window) = \n__proto__ = <y><z/></y>); (\n__parent__.__proto__ setter= 'haha'.split.__lookupGetter__(\"__parent__\"))) {/*for..in*/for(var [__count__, prototype] = <y><z/></y> in <x><y/></x>) {<><x><y/></x></>; }\nthrow [[]];\n }");
tryItOut("{return this;<x/>; }");
tryItOut("if(__iterator__.__count__) { if ([15,16,17,18].filter(({}).hasOwnProperty, new new gc()((({(this).apply: <><x><y/></x></> })), this))) {return 1e4;return; }} else {var __noSuchMethod__, __noSuchMethod__;break ; }");
tryItOut("L:with({prototype: ({__count__ setter: 'haha'.split })}){break M;/*for..in*/L:for([setter, __count__] = __count__ = __noSuchMethod__ in <y><z/></y>) {yield __parent__; } }");
tryItOut("/*infloop*/do  while(*::*);");
tryItOut("if(<><x><y/></x></>[constructor]) {var prototype; }");
tryItOut("if((-1)) { if (this) yield []; else {break ; }}");
tryItOut("if(@foo) { if (<x><y/></x>) {(undefined); }} else {({}).hasOwnProperty<y><z/></y> }");
tryItOut("M:with(__noSuchMethod__){/*for..in*/for(let prop in (((this.__defineGetter__(\"prop\", [1,2,3,4].map)))( for each (__proto__ in D)\n))){const __parent__ =  '' , __iterator__; } }");
tryItOut("/*infloop*/for(<x><y/></x>.(this); __noSuchMethod__ = prop; (__noSuchMethod__ = (constructor = @foo))\f) {gc()yield; }");
tryItOut("if(eval(\"({each getter: Math.sin })\", (this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"throw <y><z/></y>;\")))))) { if (#2=[__count__]) {/*infloop*/for(const prop; function ([y]) { }; #3={a:#3#}) break L; }} else {yield;var __count__, __proto__ = *::*; }\nprop");
tryItOut("if(Exception()) {__count__ = *::*;'haha'.split } else  if ([__iterator__.prototype].filter(Math.sin)) yield <><x><y/></x></>;");
tryItOut("L: {; }");
tryItOut("/*for..in*/for(const __count__ = (__parent__ = window) in <><x><y/></x></>) ;");
tryItOut("if( \"\" .__defineGetter__(\"__parent__\", <x><y/></x>).unwatch(\"__iterator__\")) { if (<x><y/></x> =  /x/ ) { }} else {M:with({__proto__: false})let prototype; }");
tryItOut("let(__count__ = \nfunction::__noSuchMethod__ = <x><y/></x>) { prototype = __noSuchMethod__;");
tryItOut("let (__count__ = (__proto__ = (!window).unwatch(\"__parent__\")) <<= this.zzz.zzz, [, __parent__, []++] = <x/> / #1#) { with({__proto__: new (this.watch(\"constructor\", eval))(@foo, <x><y/></x>.__lookupSetter__(\"constructor\"))}){throw <y><z/></y>;let(__noSuchMethod__, __noSuchMethod__ = null) ((function(){(null);})()); } }");
tryItOut("(__count__ = <><x><y/></x></>//h\n == __proto__.__proto__ getter= (<y><z/></y>).__defineSetter__)");
tryItOut("/*infloop*/do {/*for..in*/for([prop, __iterator__] = constructor in try { return __count__; } catch(__proto__ if <x/>) { new Function } catch(prototype if <x/>) { export *; } catch(__proto__) { {} } finally { export *; } ) {}\n } while(-3/0.valueOf(\"number\"));");
tryItOut("/*for..in*/for(__iterator__ = (let (prop = this, __iterator__) <>__noSuchMethod__.prototype</>) in <><x><y/></x></>) {{}\fyield window; }");
tryItOut("/*for..in*/L:for(const constructor = \nFunction( /x/ , this).propertyIsEnumerable(\"__proto__\") in (prop = Date())) (*::*);\n{{};; }\n");
tryItOut("throw StopIteration;");
tryItOut("with({constructor: __proto__ = <x><y/></x>.isPrototypeOf(<\n><x><y/></x></>)})constructor/*\n*/");
tryItOut("(<x><y/></x>).__defineSetter__");
tryItOut("switch((__parent__ = [constructor, __parent__])) { case <><x><y/></x></> >>> window: (new Function(\"<x><y/></x>;\"))default: (((@foo)()) |  /x/g .@foo)break; case 8: __parent__ = __parent__, getter;break; while((<x><y/></x>) && 0)export prototype;break; case 2: gc()break; break; return; }");
tryItOut("if(((new Function(\"([1,,]).watch\")))()) { if (__iterator__.__count__%=3) {;throw prototype; } else {__parent__ = false; }}");
tryItOut("window;\ngc()\n\n/*infloop*/for(prototype; __count__;  '' ) yield  /x/g \n\n");
tryItOut("with([[]] = (@foo)[window]){return *;if(__proto__) __parent__, prop = <><x><y</>; else  if (true) /a/gi }");
tryItOut("{}\nthrow __count__;\n");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {export *;(1 for (x in [])) } else  if (<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")) <bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb> else  /x/g ");
tryItOut("/*infloop*/M:while(({constructor: prototype = false.isPrototypeOf((({}).hasOwnProperty)((-1))).__count__ = new (function  __parent__ (prototype) { yield  \"\"  } )(, <x><y/></x>) }))export *\nexport __parent__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("let (({ constructor: __proto__ })) { export *; }");
tryItOut("");
tryItOut("L: {export *; }");
tryItOut("M:switch([ '' ]) { case 6: with(0){const __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("yield \n(window.valueOf(\"number\")) && ( '' ());");
tryItOut("/*infloop*/do {Math.sin } while(((5.0000000000000000000000.@foo).propertyIsEnumerable(\"function::constructor\")));");
tryItOut("/*for..in*/for((undefined['__noSuchMethod__']) in \f<><x><y/></x></>) switch( \"\" ) { default: break;  }");
tryItOut("/*infloop*/for(const ({ prop: ({ __count__: __iterator__ })//h\n }) = ({constructor: @foo}); (true.prop); ([z1].unwatch(\"prototype\"))) export *;");
tryItOut("if(\n[z1,,]) { if (033++) {export prop;return; } else return <x><y/></x>;}");
tryItOut("gc()\n");
tryItOut("/*infloop*/M:do /*for..in*/M:for(const [function::__proto__, prototype] = (yield this.__defineGetter__(\"__noSuchMethod__\", ((new Function(\"([]);\"))).apply)) in <x><y/></x> / <x/>) {(<><x><y/></x></>);<><x><y/></x></>; } while(+__parent__ = arguments);");
tryItOut("{{}export function::__iterator__; }");
tryItOut("do gc() while(((-0 & -0).propertyIsEnumerable(\"__noSuchMethod__\")) && 0);");
tryItOut("with((x::prototype = prototype))const prototype = [1];");
tryItOut("/*for..in*/for(var __proto__ = (<x><y/>\n</x>) in ()) {/*for..in*/for(const prototype in ((({}).hasOwnProperty)(([1,2,3,4].map).call( \"\" , (-1))))); }");
tryItOut("if((this > prop)) throw <y><z/></y>; else  if (<x><y/></x>.__lookupGetter__(\"__count__\") || <x/> .@ <x><y/></x>) throw window; else (3.141592653589793);");
tryItOut("/*for..in*/for(var 0/0 in ((new Function)(new Error([11,12,13,14].filter)))){if(false.yoyo(*::*)) function  function::__parent__ () { export *; }  }");
tryItOut("(true); const __parent__;");
tryItOut("M:do {return; } while((<x><y/></x>.*) && 0);");
tryItOut("L:with({__noSuchMethod__: __parent__\t = true >>>=[1]})var __proto__ = 4., prop;");
tryItOut("/*for..in*/M:for(var __count__ = ('fafafa'.replace(/a/g, null)) in throw null) L: {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in eval(\"*\", new Function)) continue ;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = 1.3 in ((uneval(<y><z/></y>))).__defineGetter__(\"__noSuchMethod__\", new Function)) {throw {};const __noSuchMethod__ = undefined; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <><><> /x/  >>> <x/></>yyy</></>['getter'] in (Array(true, __parent__))) break ;");
tryItOut("return;\nexport __noSuchMethod__;\n");
tryItOut("for(let y in [5,6,7,8]) return __count__ ^ (-0);");
tryItOut("gc()\n({ __noSuchMethod__: __count__ })\n");
tryItOut("{export *;export *; }");
tryItOut("if([,,] if (this)) {{} } else  if ((false)[this]) {{}(function ([y]) { }); } else {{} }");
tryItOut("if(eval(\"if(<x><y/></x>) {yield; } else yield <x><y/></x>;\", *)) { if (((uneval(<x><y/></x>)))) {export *; }} else export __count__;");
tryItOut("if([1e4].some([1,2,3,4].slice)) {gc(){} } else  if (0/0.propertyIsEnumerable(\"constructor\")) {throw <x/>{let prototype = this;{} } } else ");
tryItOut("/*infloop*/for(var __iterator__; __noSuchMethod__ = (([1,2,3,4].map).call([z1],  /x/g , this)); ( /* Comment */__count__ =  '' )) {0/0; }");
tryItOut("/*infloop*/for(this.zzz.zzz;; --(<><x><y/></x></>.@foo)[(3/0)()]; (yield  \"\" [ \"\" ])) const constructor, constructor;\nreturn;\n");
tryItOut("/*for..in*/M:for(var [constructor, this] = (function () { return <x><y/></x> } )() for each (__noSuchMethod__ in prop) for (__parent__ in  '' ) in <x/>) var  for (prop in <><x><y/></x></>), prop;");
tryItOut("yield;/*for..in*/for(const  \"\" ['__proto__'] in <><x><y/></x></>) {{} }");
tryItOut("if(__noSuchMethod__.@foo) with({__noSuchMethod__: <><x><y/></x></>})export *; else  if (prop) {var prototype; } else export __noSuchMethod__;");
tryItOut("if(5.0000000000000000000000) { if () yield <x/>;} else {eval }");
tryItOut("for(let y in [5,6,7,8]) constructor = __noSuchMethod__;");
tryItOut("L: if((<y><z/></y>.__lookupGetter__(\"__noSuchMethod__\").__proto__)) {export __proto__; } else {let __parent__ = <><x\f><y/></x></>;return <x><y/></x>; }");
tryItOut("if(({}).yoyo( \"\" ) !== (let (constructor) @foo)) let __iterator__ = (-1), __count__ =  /x/ ; else  if (( /x/g  instanceof <x><y/></x>)) return;");
tryItOut("while((let (__count__) <x/>) && 0)/*for..in*/for(const __count__ = constructor in null) gc()");
tryItOut("for(let y in [5,6,7,8]) const constructor = __count__, constructor;");
tryItOut("/*for..in*/L:for([prop, constructor] = __proto__ in <><x><y/></x></>) {var prototype = 5.0000000000000000000000, __proto__; }");
tryItOut("/*infloop*/for(let __parent__; <><x><y/></x></> == *; new RangeError(for(let y in []);, this)) {return; }");
tryItOut("L:with({constructor: __count__})(1 for (x in []))");
tryItOut("/*infloop*/while(<x/>){__parent__; }");
tryItOut("throw __iterator__;");
tryItOut("switch(prototype.__iterator__|=(__count__ for (prototype in [z1]))) { default: let __proto__ = <y><z/></y>, prototype;break; throw [,,];case prop.x::__iterator__ setter= function(y) { yield y; gc(); yield y; }: /*for..in*/M:for([__count__, x::prop] = (<><x><y/></x></> & this) in this) export *;return; }");
tryItOut("constructor = __iterator__;");
tryItOut("if(__proto__ = __noSuchMethod__\t) {const prop = null; } else  if (<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", function (__parent__) { return [[1]] } )) ;");
tryItOut("/*infloop*/L:do throw ; while( /* Comment */(__proto__.prop) &= (({ __count__: [, ({ __noSuchMethod__: __iterator__, __iterator__: __proto__ }), , ] }) = [this['prototype'], ]));");
tryItOut("throw StopIteration;");
tryItOut("{with(constructor = undefined){[1,2,3,4].mapreturn @foo; } }");
tryItOut("if(this) { if ({}) ;} else {yield <><x><y/></x></>;<x><y/></x\f>; }");
tryItOut("/*infloop*/for((yield <><x><y/></x></>).throw(*.__defineSetter__(\"prototype\", window)); !<><x><y/></x></>\t.__proto__; ({constructor: 0/0,  set __parent__(constructor, __proto__)(__proto__.([, __noSuchMethod__, ]: (null)())) })) {;<x><y/></x> }");
tryItOut("/*infloop*/M:for(let __count__; ( /x/g  @ *); prop) {continue M;continue L; }");
tryItOut("L:if((({x::__iterator__: - /x/ .propertyIsEnumerable(\"__proto__\")}))) { if (<><bbb xmlns=\"window.__defineGetter__(\"__parent__\", 'haha'.split)\"><!--yy--></bbb></>) /*infloop*/M:for(yield window.__defineSetter__(\"__noSuchMethod__\", gc); window; __iterator__.@foo) const __iterator__, constructor = __proto__; else {/*for..in*/M:for(var prototype in <x><y/></x>)  }}");
tryItOut("{}");
tryItOut("/*infloop*/for(let __parent__; (let ([], __parent__) (*.__lookupGetter__(\"__iterator__\"))); 0) gc()");
tryItOut("{continue ;yield; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <x><y/></x>) {export *; }");
tryItOut("/*infloop*/L:do {do {(null);{} } while((0.1) && 0); } while(new Function(*::*, window));");
tryItOut("/*infloop*/L:for(let __iterator__ = prop.(this);  /x/g ; (<x><y/></x>.__lookupSetter__(\"__parent__\") ? (3.141592653589793.hasOwnProperty(\"__proto__\")) : this >>=  /x/ ) .@ <><x><y/></x></>.__proto__ = #1#) {if(<x/>) {var __count__;(prototype); } else  if (<x><y/></x>) var prop =  '' , __noSuchMethod__; else {(null).watch }yield *; }");
tryItOut("if(++ /x/g ) {prototype, __parent__;0/0 } else {;<><x><y/></x></> }");
tryItOut("/*infloop*/for(var prototype; <>(( \"\" --)((@foo ? this : <x><y/></x>), <x/>))</>.( /x/ .__defineGetter__(\"constructor\", function  __parent__ (__parent__)function(id) { return id })); const prototype, 1e-81) {gc() }");
tryItOut("let (__count__) { {} }\n");
tryItOut("/*infloop*/for(__proto__; this.zzz.zzz; this.__defineSetter__(\"__count__\", ((let (__iterator__) true)).__defineSetter__)) {return; }");
tryItOut("{yield; }");
tryItOut("if(<x><y/></x>.( \"\" )) <x><y/></x>");
tryItOut("/*infloop*/for(new ([[1]].constructor\t)((__iterator__-- == (__count__)) if (<x/>), (uneval( { return gc } ))); <><><><x><y/></x> for (prop in [[1]])</>yyy</></>; (3/0)()) {with({__iterator__: (*::*[true])})export *; }");
tryItOut("continue M; const __noSuchMethod__;");
tryItOut("if(true) throw #1=[#1#]; else {return;throw undefined; }");
tryItOut("L: {let __noSuchMethod__, __proto__\n }");
tryItOut("{yield;throw StopIteration; }");
tryItOut("with({prototype: (({__proto__: * }))}){L: /*infloop*/while(\f<><x><y/></x></>)gc()\r }");
tryItOut("/*infloop*/for(const __iterator__ = 'fafafa'.replace(/a/g, Math.pow).propertyIsEnumerable(\"<><bbb xmlns=\\\"[11,12,13,14].filter.eval((__noSuchMethod__ = [,]))\\\"><ccc:ddd>yyy</ccc:ddd></bbb></>\"); __parent__ += window; (yield ({ __count__: [__proto__] }) = ({ __iterator__: prototype, __iterator__: [prototype] }))) {M:if(x::__iterator__) 1e4;/*for..in*/M:for(const __proto__ in #1=[#1#]) {#1=[#1#];const prop, __iterator__ = this; } }");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)) {if((({__parent__: <y><z/></y>, prototype: __parent__ }))) yield; else  if ((<><x><y/></x></> &=  '' )) {let __parent__, constructor = @foo; } } else  if (1.3) gc()");
tryItOut("throw ({a2:z2});");
