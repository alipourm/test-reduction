tryItOut("if((new ( /x/g )(window)[.2.eval(undefined)]\f)) { if ((({ prototype: constructor }) = <x/>)) gc()} else {const __count__ = __proto__;prototype, __parent__ = <x/>; }");
tryItOut("__count__ = __proto__;");
tryItOut("let(prototype = \n(uneval(null)).yoyo((((function(y) { yield y; export __noSuchMethod__;; yield y; }).call)()))) { return null.unwatch(\"prototype\");");
tryItOut("with({}) { try { for(let y in []); } catch(__noSuchMethod__ if __noSuchMethod__) { this.zzz.zzz; } finally { throw StopIteration; }  } ");
tryItOut("/*for..in*/M:for(__iterator__.prop in ((/a/gi)(eval(\"\", this))))export prop;");
tryItOut("{(this)\nif((this.__defineSetter__(\"constructor\",  /x/ ))) var , __iterator__ = 0/0; else  if ([,].unwatch(\"__iterator__\")) {continue ; } }");
tryItOut("/*for..in*/for([__iterator__, prototype] = __proto__ = [] in <x/>) const __noSuchMethod__ = function ([y]) { }, constructor = true;");
tryItOut("");
tryItOut("/*infloop*/for(const __noSuchMethod__; prop = (@foo.eval(__count__)).throw([] + function ([y]) { }); (p={}, (p.z = [15,16,17,18].sort(function(q) { return q; }, #1#))())) {yield function  __count__ (__parent__) { yield @foo } ; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in *::*) {{}(__parent__); }");
tryItOut("L:if((__count__ = true)) prototype else  if ( \"\" ) {let __proto__ = 1e4, prop;const __proto__ = this; } else {<><x><y/></x></\t>\tyield <y><z/></y>; }switch(this) { case __noSuchMethod__:  }");
tryItOut("{{} }");
tryItOut("{let prototype = @foo, constructor; }");
tryItOut("/*infloop*/for(var __iterator__; <><x><y/></x></> === ([*]); (<x><y/></x>\n)) yield false;");
tryItOut("while((([function::setter = <x/> for each (prop in [1,,])])) && 0)let (prototype) { throw <x><y/></x>; }");
tryItOut("/*infloop*/L:while((p={}, (p.z = ( /x/g .@foo))())){}");
tryItOut("/*for..in*/for(const (window.__defineGetter__(\"__parent__\", ([[]]).__defineSetter__))(<\fx><y/></x>) in __iterator__) {/*infloop*/for(__parent__; [15,16,17,18].sort(function(y) { yield y; gc(); yield y; }, #3={a:#3#}); eval(\"with(true & __count__)throw  '' ;\", ((uneval(<><x><y/></x></>))))) if(true) { if (null) (<x/>);} else {prop = true;return  \"\" ;\r }(constructor)\n }");
tryItOut("L:if(true) return *::*; else (*::*);");
tryItOut("L:do L:with({prototype: *}\f){yield;{} } while(((<xxx {prop}={[15,16,17,18].filter((new Function(\"export __noSuchMethod__;\")), window)} />.({}))) && 0);\nL:if( /x/g ) __parent__; else  if ((({x::__parent__: window }))) return window;\n");
tryItOut("/*infloop*/while(window){(*::*);return *; }");
tryItOut("throw __parent__;");
tryItOut("M:if((((*).apply).apply).call(this, window)--) yield (#1# :: window);\n else  if ((__count__) = ({__parent__:  /x/ .__noSuchMethod__})) {break ;yield; }");
tryItOut(";\nL:if(Exception((eval).call(<><x><y/></x><//h\n/>, )).isPrototypeOf(window - @foo.@*)) { if (__count__.hasOwnProperty(\"prop\")) {const getter = <><x><y/></x></>;{prototype;__parent__; } }} else return;\n");
tryItOut("/*for..in*/for(const prototype = <x><y/></x> in <x><y/></x>) __iterator__ = undefined;");
tryItOut("if((eval(\";\", prop)) for (each in [[]])) {{/*for..in*/for(var __proto__ in <><x><y/></x></>) {var __iterator__, prop;let yield, function::__proto__; } }if(<x/>) { if (<x><y/></x>) yield <><x><y/></x></>; else yield;}\nthrow  /x/ ;\n }");
tryItOut("/*infloop*/for(({ prototype: [[prop, , __proto__, ], ({ __count__: prop, __proto__: __count__ }), __iterator__, , constructor], __parent__: ({ __parent__: [__parent__, , -0, , ], __parent__: [prop, , , __noSuchMethod__, ] }) }) = (yield  \"\" ); [__noSuchMethod__].map([1,2,3,4].map).valueOf(\"number\") ? ([15,16,17,18].some(Function,  /x/g .eval(constructor))) : new ( \"\" )(__parent__, <x><y/></x>); prop = <x/>) {const constructor = @foo, constructor;function(y) { yield y; ; yield y; } }");
tryItOut("with( /x/g );");
tryItOut("/*for..in*/for(var __parent__ in ((function (constructor) { /*infloop*/M:for(let __parent__ = window; <x><y/></x>; <><x><y/></x></>) yield undefined; } )((Function(1.3)).__count__))){/*for..in*/L:for(const __parent__ in ((new Function)(<y><z/></y>))){case 9: function(y) { yield y; gc(); yield y; }default: const __count__ = <x/>;{}break; case 2: break; __parent__ = -0, __proto__ = <><x><y/></x></>;case 9: break;  }export *; }");
tryItOut("if(var __parent__, __parent__ = 1.3) { if (-1) {export *; }} else {export prototype;const __proto__ =  /x/g , case  /x/g : const __count__, __iterator__ = window;case 7: export __proto__;break; break;  =  /x/ ; }");
tryItOut("/*infloop*/M:for(let ({ __count__: __noSuchMethod__ }) = ({function::prop: <x><y/></x>, constructor setter: function () { yield <><x><y/></x></> }  }); (this.zzz.zzz)[(({__proto__ setter: function  prototype () { return __proto__ }  }))]; <x><y/></x>.hasOwnProperty(\"constructor\") === let (prop = *::*, __count__ = this)  \"\" ) {return <x/>;export __parent__; }");
tryItOut("/*infloop*/L:while(new (<x/>)(*::*)){function  __parent__ (prop)<x><y/></x> }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in [,]) {switch\n(true) { default: true }export *; }\f(eval).apply }");
tryItOut("{(new Function(\"<y><z/></y>\")) }");
tryItOut("/*infloop*/for(let __noSuchMethod__; ( '' )().watch(\"prototype\", function  yield (__proto__, __proto__) { ; } )((__noSuchMethod__ ? false : 1.3)(<x><y/></x>.isPrototypeOf(<x/>))); *) ;");
tryItOut("(new (({}))((constructor = <><x><y/></x></>), <x/>).prototype =  /x/ ), ( /* Comment */(prop = (getter)).isPrototypeOf(<bbb xmlns=\"this >> __parent__\"> <\t/bbb>.(__parent__.__parent__ setter= gc((#1=[#1#])[<x><y/></x>]))))");
tryItOut("if((<x><y/></x>.([[]]))) throw (-0); else {(5.0000000000000000000000); }");
tryItOut("M:if([,,] , this) return <><x><y/></x></>; else export __noSuchMethod__;");
tryItOut("{}");
tryItOut("/*for..in*/for(let ({__iterator__: [15,16,17,18].some(({}).__lookupGetter__, (undefined.hasOwnProperty(\"constructor\")))}) in ([11,12,13,14].sort)) {/*infloop*/L:for(eval(\"(p={}, (p.z = \\n<x><y/></x>)())\", Error(let (__proto__, __noSuchMethod__) constructor)); this; (<x><y/>< yyyx>.eval(<y><z/></y>))) break M; }");
tryItOut("{if((yield <><x><y/></x></>.__proto__ for each (each in window) for (prop in *))) { if (({__iterator__ setter: function(q) { return q; }, constructor: (constructor = void []) })) export *;} else {const __parent__;export prop; } }");
tryItOut("{return; }");
tryItOut("let (prop = (export __noSuchMethod__)) { /*infloop*/for((((yield __noSuchMethod__ = return <x/>;).hasOwnProperty(\"prop\")).prop getter= gc); this; (-0)) {yield; } }");
tryItOut("break L;");
tryItOut("__iterator__ = __iterator__;");
tryItOut("if((<y><z/></y>)) { if (<x><y/></x> &  /x/g .watch(\"constructor\", gc)) {/*for..in*/for([constructor, __parent__] = <x/> in undefined) export *;{return <x/>;(#1=[#1#]); } } else {gc()throw ; }}");
tryItOut("/*for..in*/for(const __iterator__ = ('fafafa'.replace(/a/g, new Function)) in ({a2:z2}).throw(window)) {Math.sincontinue L; }");
tryItOut("/*for..in*/for(const [prop, __proto__] = <{__iterator__}></{__iterator__}> in yield this.__defineGetter__(\"__parent__\"\f, function(q) { return q; })) /*infloop*/for(__iterator__; @foo(this, <x><y/></x>); ({ get constructor __iterator__ (__iterator__, __parent__) { return new Function(<><x><y/></x></>) }  })) {gc()export *; }");
tryItOut("L: {switch(constructor) { case <x><y/></x>: break;  } }");
tryItOut("/*for..in*/for(const prototype = <y><z/></y> in new ('haha'.split)()) {break M; }");
tryItOut("; const prototype;");
tryItOut("/*infloop*/for(__parent__; 1e81; false) {export *;gc() }");
tryItOut("/*for..in*/M:for(var constructor in ((eval)(null))){return;yield <x><y/></x>; }");
tryItOut("/*for..in*/for(let __parent__ in __noSuchMethod__) {return; }");
tryItOut("/*infloop*/for(__noSuchMethod__; (-0); ({a2:z2})) {(this); }");
tryItOut("if([1,2,3,4].slice()) { if () {gc()yield; }} else L:if(([1,2,3,4].map)()) const constructor; else  if (<><x><y/></x></>.valueOf(\"number\")) {yield; } else {yield <y><z/></y>;return; }");
tryItOut("{while((({ __count__: __iterator__, prop:  }) = __noSuchMethod__ = <x/>) && 0){return;for(let y in [5,6,7,8]) continue ; }let (__noSuchMethod__ getter: prototype = <>case <x/>: export constructor;case 5: gc()default: case <y><z/></y>: {}</> .@x:: <x><y/></x>.yoyo(<></*\n*/x><y/></x></>)) { /*for..in*/for(const constructor = <y><z/></y> in * >> <><x><y/>\f</x></> in  \"\" ) export *; } }");
tryItOut("while((__noSuchMethod__.__noSuchMethod__ = false) && 0){const __iterator__, __noSuchMethod__ = __parent__;const __count__, __count__ =  /x/g ; }");
tryItOut("for(let y in []);");
tryItOut("{switch([undefined]) { case 8: default: break;  }M:if(this) {;; } else  if (__count__) break ; }");
tryItOut("/*for..in*/for(const [prototype, __count__] = (<><x><y/></x></>.__count__ = this) in __parent__) gc()");
tryItOut("\tyield (prototype !== <><x><y/></x></>)\n");
tryItOut("let(prototype) ((function(){return;})())\n");
tryItOut("__proto__.__parent__ = __proto__;\t");
tryItOut("/*for..in*/L:for(var (function ([y]) { } @ 0/0)(eval(\"export *\\nconstructor = -1;\",  '' )) in ((delete-=\n0x99.yoyo(.2))(( /* Comment */arguments).__iterator__ = \rreturn [[]].prop;))){/*infloop*/for(<><x><y/></x></>; @foo; constructor) prop{} }");
tryItOut("/*for..in*/for(var __parent__ = <y><z/></y> in <><x><y/></x></>) { }");
tryItOut("{} const prototype;");
tryItOut("/*for..in*/for(const prop in (((1 for (x in [])))( '' )))");
tryItOut("M:do try { return []; } catch(__proto__) { let(__parent__, prop) { for(let y in []); }  while((this.__defineGetter__(\"__count__\", (__iterator__ = <x><y/></x>).watch)) && 0);");
tryItOut("{L:while(((.__count__ = <x><y/></x>)) && 0)throw @foo;gc() }");
tryItOut("while((prop) && 0){<y><z/></y>(*::*) =  /x/g  * prop, __count__ = (-1);; }");
tryItOut("if((true.hasOwnProperty(\"this\"))) throw false;");
tryItOut("/*for..in*/L:for(__iterator__ in {}) L:if(eval(\"yield;\", <><x><y/></x></>)) gc() else  if (undefined.eval( '' )) continue ; else yield function(id) { return id };");
tryItOut("{yield;export __count__; }\n");
tryItOut("if(this) ({a1:1}); else  if (*::*) {return; } else {(window);({}).hasOwnProperty }");
tryItOut("/*infloop*/L:while([5.0000000000000000000000 for each (prototype in true)]){throw <y><z/></y>;let prop, __proto__; }");
tryItOut("if([(__proto__.(3)) if (null >> 4.)]) M:if((null / *)) throw #1#; else  if (__iterator__ instanceof [z1]) return;");
tryItOut("\nexport *;\n");
tryItOut("do {{__iterator__;export *; } } while((\n(p={}, (p.z = <><x><y/></x></>)())) && 0);");
tryItOut("with({get: 0.1}){}");
tryItOut("this.zzz.zzz;");
tryItOut("with({__proto__: ([11,12,13,14].some)})function  constructor () { (constructor); } \nyield; const __proto__;\n");
tryItOut("L: {window;yield; }\n(__count__);");
tryItOut("");
tryItOut("if(__count__) { /x/g ; } else  if (eval(\"\", [15,16,17,18].filter(({}).hasOwnProperty, <y><z/></y>)).@*) {throw <><x><y/></x></>;throw 3.141592653589793; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (Iterator()) in *::*) {} const constructor;");
tryItOut("/*for..in*/for(*::*.__noSuchMethod__ in ((eval)((__count__ = __parent__))))yield __count__;return;");
tryItOut("/*infloop*/M:for(var [] = __proto__ = *::*.isPrototypeOf(<x/>); __noSuchMethod__ =  /* Comment */gc; (((*.__defineSetter__(\"__proto__\", prototype)) >>> *::*\n for each (__count__ in <x><y/></x>)))) constructor = [1]");
tryItOut("/*for..in*/L:for((__iterator__) in (new (({}).__lookupGetter__)(<y><z/></y>))) with({}) { throw StopIteration; } ");
tryItOut("{window;(constructor); }");
tryItOut("/*for..in*/L:for(var __iterator__ in (((true).watch)(this.__defineGetter__(\"prop\", ({}).hasOwnProperty)))){let __proto__ = <><x><y/></x></>;/*for..in*/L:for(__proto__ in <><x><y/></x></>) {const constructor, prop = #3={a:#3#};yield; } }");
tryItOut("/*infloop*/L:while(function(id) { return id }.__noSuchMethod__)yield\nwith({__proto__:  /* Comment */[z1,,]}){(prototype); }");
tryItOut("for(let y in []);");
tryItOut(" else  if (3/0) {(false); }const __proto__;");
tryItOut("{do  while(((this.__defineGetter__(\"constructor\", (new Function).call))\n) && 0);M:do {yield <><x><y/></x></>;prop; } while((()) && 0); }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) __proto__ = prop;");
tryItOut("/*for..in*/for(let [__proto__, (__iterator__)] = new (((true for each (__noSuchMethod__ in function ([y]) { }))))() in (({}).__lookupGetter__)()) ");
tryItOut("let (__iterator__, prototype) { const get, prop; } const __noSuchMethod__;");
tryItOut("/*infloop*/M:for(const ({ __proto__: __parent__, __noSuchMethod__: function::__proto__ }) = (([1,2,3,4].map)(prop)); this.__defineGetter__(\"__iterator__\", (1 for (x in []))); function::__noSuchMethod__ = __count__) { { return __count__ }  }");
tryItOut("yield .2");
tryItOut("prop, prototype =  \"\" ; const __count__;");
tryItOut("/*for..in*/for(var prototype in *) (*);");
tryItOut("/*infloop*/L:for(({ __parent__: [(\t{ prototype: __noSuchMethod__, __iterator__: ({ : __noSuchMethod__ }) }), , ({ prop: ({ __proto__: ({ __parent__: __proto__ })\f, __iterator__: __iterator__ }) }), , ] }) = this.zzz.zzz.set; yield , (+new true.eval(null)); let (constructor = this.__defineSetter__(\"__parent__\", ({}).hasOwnProperty), prototype =  '' ) eval(\"{}\", __count__)) {/*infloop*/while(window)export *; }");
tryItOut("switch(break M) { case 0: break; default: return (__noSuchMethod__.__count__ setter= [1,2,3,4].map);L:with([[]])return;case ((p={}, (p.z = ((window)[__noSuchMethod__] - <x><y/></x>))())) ? * : prop: /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __count__ = <x/>) (function(id) { return id });break; case 6: switch(<><x><y/></x></>) { case 7: {}default: break; case 7: {}break; export *;break; case <y><z/></y>: case window: throw this;case 7:  /x/g ;break;  }break; case 6: case 9: /*infloop*/while(<x><y/></x>)<><x><y/></x></>;break; case 6: break;  }");
tryItOut("S");
tryItOut("while(( /x/g .yoyo(0/0)) && 0){export __iterator__;let __proto__ = window, prop = <><x><y/></x></>; }\n/*for..in*/for(constructor in window) var __parent__ =  '' , constructor;");
tryItOut("prop = constructor;");
tryItOut("_");
tryItOut("let constructor;");
tryItOut("do yield <x><y/></x>; while(({{}export constructor; }) && 0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L://h\n for  each\f(const \f__count__ in let (constructor = @foo, __iterator__ =  typeof ) let (prototype = constructor, __proto__) window) {\nthrow 1.2e3;if((\n<x><y/></x>.__count__)) { if (new (this)(<x><y/></x>)) yield; else return @foo;} }");
tryItOut("{break L; }");
tryItOut("L:do {const __proto__, __count__;(-0).watch } while(((window instanceof null)) && 0);");
tryItOut("export *\nyield <><x><y/></x></>");
tryItOut("/*for..in*/for(let <xxx>{__parent__}</xxx>.prototype in (({prototype: <><x><y/></x></>.valueOf(\"number\")}))) {L: throw <><x><y/></x></>.__defineSetter__(\"__proto__\", Math.pow); }");
tryItOut("for(let y in [5,6,7,8]) try { throw StopIteration; } catch(__count__) { let(constructor) { return; } finally { yield function(id) { return id }; } ");
tryItOut("/*infloop*/for(constructor; __iterator__; (null.unwatch(\"prototype\").propertyIsEnumerable(\"__proto__\"))) with({}) (prototype);");
tryItOut("/*for..in*/for(prototype.set in \n\nthis) if((Iterator([[]]))) { if (new 1e81(this,  /x/g )) {( /x/ ); } else {const __iterator__ = prototype, prototype; }}");
tryItOut("/*infloop*/do {yield <x/>;export __count__; }/ while(__iterator__.prototype);");
tryItOut("yield __iterator__ <<= 1.3;");
tryItOut("M:if(this.__defineGetter__(\"__proto__\", (new Function(\"let __noSuchMethod__ = <><x><y/></x></>, prop = [,];\")))) { if (yield new ((p={}, (p.z = <><x><y/></x></>)()) !==  \"\" )(__proto__ = (__noSuchMethod__|= '' ), this << 5.0000000000000000000000)) L: yield;} else with((0/0(<>__count__</>))){var prototype, __count__; }");
tryItOut("{throw 0/0; }");
tryItOut("const __noSuchMethod__ = 1e4;");
tryItOut("/*for..in*/L:for(const (3/0)(__parent__) in  /x/ ) ");
tryItOut("const ({ prototype: constructor }) = constructor\n");
tryItOut("M:while((new function (__noSuchMethod__, __proto__) { return 1e4 } ()) && 0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (new (*::*.propertyIsEnumerable(\"__proto__\"))(({__count__: <y><z/></y> % @foo})))(__noSuchMethod__.( /x/  /= #3={a:#3#})) in for(let y in [5,6,7,8]) let prototype;) break M;");
tryItOut("/*infloop*/for(constructor; (([3/0])--); prototype = true) throw true;");
tryItOut("/*infloop*/for(undefined.*; (<><x><y/></x></> |= <x/>++); <x><y/></x>.@foo == (function ([y]) { })()) {let __proto__ = false;if((yield function ([y]) { })) {\t(__iterator__); } else  if ((*::* & <x><y/></x>)) {yield; } }");
tryItOut("/*infloop*/do {with({__count__: (true\n)})__iterator__if(window) { if () yield __noSuchMethod__; else function(y) { yield y; yield 3.141592653589793;; yield y; }} } while(/a/gi);");
tryItOut("L: {do {x::__iterator__ = setter;yield; } while(((/a/gi)()) && 0);/*infloop*/L:for(-0; __count__; true) {} }");
tryItOut("__noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__ = <y><z/></y>;");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>[(null for (__parent__ in -0))]) /*for..in*/for(prototype = 'fafafa'.replace(/a/g, ((this).apply).call) in undefined) {export prop; } else  if (*::*) Math.sin");
tryItOut("const __iterator__ = [], __count__ = [,,];[1,,];");
tryItOut("/*for..in*/for(constructor = __count__ = prototype in <x><y/></x>) [,,z1];");
tryItOut("if(( /x/g .__defineGetter__(\"__parent__\", <><x><y/></x></>))) { if (__proto__.__proto__ = __count__ = <y><z/></y>.__defineSetter__(\"__proto__\", Math.pow)) {continue L;export *; } else /*infloop*/for(<{__iterator__}><ccc:ddd><x><y/></x></ccc:ddd></{__iterator__}>; new (<x><y/></x>)(<y><z/></y>.__defineGetter__(\"prototype\", Math.pow)); (0[ /x/ ]))  \"\" }");
tryItOut("return <x><y/></x>.(__iterator__);");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (( \"\" )(<x><y/></x>))){return {};yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(constructor = ((<x/>.yoyo(1.2e3))).@foo; new Number(\n__iterator__ = this.zzz.zzz); ([{{} } for each (__proto__ in {})])\n.watch(\"prop\", (undefined).__defineSetter__)) case 6: break; break; ");
tryItOut("<><x><y/></x></>;");
tryItOut("with({}) { gc() } ");
tryItOut("/*infloop*/for(prototype; (__count__ = true); (null in <x><y/></x>)) {return <x><y/></x>;const __noSuchMethod__, constructor = 0.1; }");
tryItOut("return");
tryItOut("while((<y><z/></y>.hasOwnProperty(\"__noSuchMethod__\")) && 0){export *;prop: <x><y/></x> }");
tryItOut("L:if( /x/g ) {M:if(({a1:1})) break ; else {yield; }let __proto__ = ; }");
tryItOut("let (__iterator__, prop) { while((<><x><y/>\f</x></>) && 0); }");
tryItOut("if(0.1) { if (new (([[]] ? <x/> : @foo))(new 1e+81(__iterator__, #1#) === eval(\"let __noSuchMethod__ = <y><z/></y>;\", <><x><y/></x></>)))  \"\" \nconst __noSuchMethod__; else /*for..in*/M:for(var __noSuchMethod__ = (-1).__proto__ = (window + <y><z/></y>) in false) gc()}");
tryItOut("/*for..in*/for(let __noSuchMethod__ = * in __count__ = constructor.(3/0) ::  try ) {/*for..in*/L:for(const prototype = undefined in <x><y/><\f/x>) return;return RegExp(0x99); }");
tryItOut("<bbb xmlns:ccc=\"<zzz>[11,12,13,14].sort</zzz>.__iterator__\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*for..in*/for(prop in ((gc)([z1])))gc");
tryItOut("/*infloop*/for(__parent__; <x><y/></x>.unwatch(\"prototype\"); null) ;");
tryItOut("/*infloop*/for(__parent__ = __parent__\f; window; [[]]) {(<x><y/></x>);gc() }\n");
tryItOut("L:switch((~ \"\"  < window)) { default: break;  }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("with(__noSuchMethod__.prop setter= gc)default: /*infloop*/for(const __noSuchMethod__\r = new ( /x/g )(<x><y/></x>, false); function(q) { return q; }(1e81, <x><y/></x>); this.throw(undefined)) {( /x/g ); }break; ");
tryItOut("do yield; while(( \"\" ) && 0);");
tryItOut("let(prototype = <x><y/></x>.__parent__ = <x/>, prop) ((function(){constructor = __count__;})());");
tryItOut("L:if((-1)) {{} } else {this;L: ({a1:1}); }");
tryItOut("/*for..in*/for(var [__proto__, prototype] = #1# in <zzz>__count__</zzz>) {var __count__ =  /x/ , __noSuchMethod__ = this; }");
tryItOut("yield;gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x>) var __parent__ = [[1]];");
tryItOut("gc()\n");
tryItOut("/*for..in*/for(var this in *::*['__parent__'] in new ((__proto__.prototype = null))()) {{with({prop: {}})export *; }export __noSuchMethod__; const prop; }");
tryItOut("/*for..in*/for(let function::__noSuchMethod__ =  in __count__ ^= #3={a:#3#}) new Function");
tryItOut("let(__proto__ = (<x><y/></x>.__defineSetter__(\"__proto__\", Math.pow)),   = 1e4) ((function(){let(__noSuchMethod__ = [1]) { ;})());");
tryItOut("throw StopIteration;\nexport *;\n");
tryItOut("break ;");
tryItOut("/*infloop*/for(let ({ prop: ({ __noSuchMethod__: __proto__, x::__proto__: constructor }), function::__iterator__: prototype }) = prop; (<x/>(<><x><y/></x></>, null)); <xxx>{__noSuchMethod__}</xxx>) {}");
tryItOut("{prop = <x/>, __iterator__;do {#1#function(q) { return q; } } while((#2=[__parent__]) && 0); }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; __noSuchMethod__; 3) /*infloop*/for(__noSuchMethod__; this\n; 0) {{}{} }");
tryItOut("M:if() {yield constructor; } else  if (((prop.prop = null) ? (p={}, (p.z = <y><z/></y>)()) : this)) {}");
tryItOut("switch(({a2:z2})) { case [,,]: break;  }");
tryItOut("{yield; }");
tryItOut("throw __iterator__;");
tryItOut("with({constructor: ({ get __count__ __noSuchMethod__ (__parent__)<xxx>{__iterator__}</xxx>.(<y><z/></y>.__defineSetter__(\"constructor\", (-0).__defineSetter__)) }) ? (<y><z/></y>.yoyo(undefined).propertyIsEnumerable(\"__proto__\")) : ([__iterator__ = <x><y/></x> if (033)])}){return <x/>;/*infloop*/do {return;Math.sin } while(this.__lookupSetter__(\"constructor\")); }");
tryItOut("with({__parent__: (* , <x/>)})yield;");
tryItOut("with/*\n*/({constructor: 1.2e3.[]})gc()\nreturn;");
tryItOut("/*infloop*/for(let [, , ] = 'fafafa'.replace(/a/g, [1,2,3,4].slice); [ /x/g ].filter(eval); ((({}).hasOwnProperty).call).call(*::*)) export *;");
tryItOut("/*infloop*/for(let ({ prop: __iterator__, __iterator__: __noSuchMethod__ }) = (<><x><y/></x></>[false] ^= (window !== *)); ( /x/g .isPrototypeOf(null)); <x><y/></x> == .2 = yield <x><y/></x>) {return window;\freturn 1e-81; }");
tryItOut("/*for..in*/M:for(let __iterator__ in  /x/ ) {var prototype = <x><y/></x>;(<x><y/></x>); }");
tryItOut("{M:if( /x/g  in #1#) {export __noSuchMethod__; } else  if (__proto__ = *) {const prop =  '' ; } }");
tryItOut("with(({__parent__ getter: Math.pow, prototype: String(<x/>, <><x><y/></x></>) - \n1e81 }) & <><x><y/></x></\f>())");
tryItOut("yield \n*::* :: <><x><y/></x></>\n");
tryItOut("/*infloop*/do {/*for..in*/for(__parent__ in ((Math.pow)([1]))){export __count__; } } while(let (__count__ = <y><z/></y>) window);");
tryItOut("if([([(1e81 for each (<x><y/></x> in  \"\" ))].sort(<><x//h\n><y/></x></>))].map((__parent__.hasOwnProperty(\"prop\")))) {const constructor = <x><y/></x>, __proto__; } else  if (({ __parent__: prop }))  for (prop in [1,,]) for each (__iterator__ in this)");
tryItOut("(<><x><y/></x></>);\nreturn;\n");
tryItOut("if(((gc)(<x/>))[__iterator__.__iterator__]) throw this;");
tryItOut("/*infloop*/for(const ({ constructor: __noSuchMethod__ }) = (true > [,] < <x><y/></x>[ /x/ ]\f); (<bbb xmlns=\"<!--yy--> = (new (return <x><y/></x>;)( \"\" )) >>= __noSuchMethod__ = window\"> </bbb>.((null['__parent__'] = __noSuchMethod__ = (1e81.propertyIsEnumerable(\"__count__\"))))); [15,16,17,18].map((function ()this).apply, 0x99).unwatch(\"constructor\").unwatch(\"__count__\")) {L: <><x><y/></x></>; }");
tryItOut("L: __noSuchMethod__;\nprop = __count__;\n");
tryItOut("<y><z/></y>\nyield false;");
tryItOut("let (prop = <y><z/></y>) { const prop = <><x><y/></x></>, __iterator__ = function::prop\nlet constructor, prototype; }");
tryItOut("M:if((eval(\"break ;\",  '' ))) { if (undefined) } else {if((p={}, (p.z = @foo)())) { if (true) {throw 3.141592653589793; } else {{} }}break L; }");
tryItOut("with(let (constructor =  '' ) *)const __proto__ = <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("gc()\nif(*) const __iterator__ = <><x><y/></x></>; else  if (( \"\" [{}] - (let (prop, __count__ = [z1]) <x><y/></x>))) {let __proto__ = (-0), __proto__ = __proto__; const __iterator__; }\n");
tryItOut("");
tryItOut("switch((p={}, (p.z = false)()).__defineGetter__(\"set\", gc)) { default: if(-3/0 /= window) { if (true.eval(3.141592653589793)) throw 3; else {{return;let __parent__; } }}case 0: case 5:  }");
tryItOut("/*infloop*/do {yield __proto__; } while((__parent__));");
tryItOut("L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__noSuchMethod__ in <y><z/></y>) var __iterator__ = <><x><y/></x></>, __parent__ =  '' ;L: {var __count__, prop = <x><y/></x>;var __count__, __count__; } }\r while((('fafafa'.replace(/a/g, (<x><y/></x>).call))) && 0);");
