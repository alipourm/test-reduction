tryItOut("/*for..in*/for(let [prop, __iterator__] = undefined in 3.141592653589793) throw <x><y/></x>;");
tryItOut(";L: []");
tryItOut("{export prototype;{} }");
tryItOut("L:switch(undefined) { default: break; case 7: const __proto__ = <x><y/></x>, prop = <x><y/></x>;break; prop, <x><y/></x>yield *::*;case (<x><y/></x> for each (constructor in __iterator__)): (null); }");
tryItOut("if('fafafa'.replace(/a/g, new Function)) { if (__noSuchMethod__) 'haha'.split else {return <x><y/></x>;yield; }}");
tryItOut("if(gc()) /*for..in*/for(let prop( '' ) in ((Function)(__parent__ = prop)))throw __count__; else  if (window) {var delete = <y><z/></y>\n } else ;");
tryItOut("/*infloop*/do case __parent__: break ; while(*);");
tryItOut("L:do {} while((#1=[#1#].unwatch(\"__count__\")) && 0)\n");
tryItOut("var __parent__;");
tryItOut("L: {let (prop = __proto__, __count__ = window) { {} } }\n");
tryItOut("__proto__ = __count__;");
tryItOut("yield prototype;");
tryItOut("/*for..in*/for(let [prop, prop] = (__count__ = ((1e-81++)[0/0 && undefined])) ? <><{__parent__}></{__parent__}></> : ({prototype getter: (1 for (x in [])), __count__ getter: new Function }) in (__parent__.(({})).valueOf(\"number\"))) {if(({ __iterator__: __noSuchMethod__, __noSuchMethod__: __count__ }) = (*::*.__lookupGetter__(\"constructor\"))) return window; else {break M;([1,2,3,4].slice).apply }(this).__defineSetter__ }");
tryItOut("L:with({__parent__: ((.__lookupSetter__(\"__proto__\")) ==  /x/  ? __iterator__ :  '' ).*}){export *;(1 for (x in [])) }");
tryItOut("/*infloop*/L:do {return null;let (__noSuchMethod__ = __noSuchMethod__, prototype) { return this; } } while(#1=[#1#].__defineSetter__(\"__proto__\", \f(( /x/g ).watch).apply) >>= let (__proto__ = (this.__defineSetter__(\"prototype\", Math.pow)) >>>=({constructor:  /x/ , prototype: true })) #0=[constructor]);");
tryItOut("throw prototype;");
tryItOut("if((- /x/ )) { if (((1 for (x in []))).call(this, *) /= new String([,], window)) {yield;export constructor; }} else {var __iterator__;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ('haha'.split.__lookupGetter__(\"__parent__\")['__noSuchMethod__']) in ((yield constructor = <><x><y/></x></>) instanceof __parent__.__parent__ = (<><x><y/></x></>.@foo) && undefined)) __iterator__");
tryItOut("({ __iterator__: ({ constructor: [], prototype: [] }), __parent__: ({ prototype: [, ({ yield: ({ constructor: ({ __parent__: ({ __noSuchMethod__: prototype, __iterator__: __count__ }) }), __count__: [] }), __parent__: __iterator__ }), ({ __proto__: [, , ({ __iterator__: prototype, prop: __proto__ }), ({ __proto__: __noSuchMethod__, prop: prototype }),  { break ; } ] }), [({ __parent__: [], __proto__: ({ getter: prop setter: new Function, prototype: ({ __parent__: __iterator__, prop: constructor }\f) }) })], ] }) })");
tryItOut("L: {}");
tryItOut("let (constructor, __iterator__ = <><x><y/></x></>) { (#3={a:#3#}); }");
tryItOut("{let prototype; }\n");
tryItOut("/*infloop*/do {yield <><x><y/></x></>; } while(let (prop = new undefined(), __iterator__) ({}.valueOf(\"number\") ? __noSuchMethod__.prop = 1e4 : __iterator__.constructor = __noSuchMethod__));");
tryItOut("prop = __iterator__;");
tryItOut("while((function(id) { return id }) && 0){{} }");
tryItOut("return <><xxx>{\t__parent__}</xxx></>;");
tryItOut("if(function (constructor, constructor) { yield  /x/  } ) { if (*::*[prototype]) {yield <x><y/></x>.(arguments); } else {/*for..in*/for(const __count__ in @foo) {yield 1e81;{} } }}");
tryItOut("switch(({ prop: ({ prototype: __count__, __iterator__: __parent__ }), __parent__: getter }) = <xxx>{prototype}</xxx>) { case <><x><y/></x></>.__lookupSetter__(\"prototype\"): break;  }");
tryItOut("(1 for (x in []))\nthrow 0x99;\n");
tryItOut("with({constructor: ( /* Comment */({__noSuchMethod__: window}))}){let prototype = 0/0;if((__proto__.hasOwnProperty(\"__parent__\") |= #1#(<><x><y/></x></>))) {{}continue M; } else {(4.);yield; } }");
tryItOut("if(RangeError(__noSuchMethod__, arguments)) { if (++function ([y]) { }) {return; }} else export *;");
tryItOut("/*infloop*/for(let __noSuchMethod__; this.__defineGetter__(\"constructor\", function(y) { yield y; ; yield y; }); ++((new Function( /x/ , true)) if (null ? true : -1))) {if(((prop)|=(({ __parent__: function::prop: (undefined.eval(this)) }) = ({ constructor: prototype })))) {/*infloop*/do arguments; while((<x/>(0.1, <><x><y/></x></>))); } else  if ((function () { yield window } )(#1=[ \"\" ], 033)) ; else __parent__ = <x/>, __noSuchMethod__ = true;/*infloop*/for(let ({ constructor: __iterator__ }) = prototype ^= <y><z/></y>; (__proto__ = function(id) { return id }); 1e+81) ; }");
tryItOut("/*infloop*/L:while(let (constructor = prototype) (033).call(let, [,])){with(prop){return; }var constructor = window, __count__ }");
tryItOut("/*for..in*/for(__iterator__ in [1,,]) return  /x/g ;");
tryItOut("with({constructor: <><x><y/></x></> << #1=[#1#] @ }){yield 1e+81;M:if(<><x><y/></x></>) {let prototype;export *; } else  if (0/0) throw  '' ; else {gc() } }");
tryItOut("let (prototype = (p={}, (p.z = <x><y/></x>)())--) { return\n }");
tryItOut("let(__noSuchMethod__) ((function(){return;})());");
tryItOut("L: {/*infloop*/do {gc() } while(<x/>);; }");
tryItOut("for(let y in [5,6,7,8]) Math.pow");
tryItOut("with(((prop.__iterator__ =  /x/ (eval(\"<x><y/></x>\", <x/>)))(\n[[]], prototype = throw  '' ;))){/*infloop*/for((return <y><z/></y>); <><xxx>{__iterator__}</xxx></>; *::* /= this) {export *;(5.0000000000000000000000); }(window); }");
tryItOut("if(__count__ = prototype.__proto__ getter= ([1,,]).__defineSetter__) {throw constructor.(<><x><y/></x></>);{} } else  if ((new (prototype.__parent__ = (<><x><y/></x></>.prop))())) export __noSuchMethod__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = .2 in (new (false.prop ? __count__ : (({}).hasOwnProperty(\"__proto__\")))( /* Comment */(({a2:z2}))(window, 3/0)))) /*infloop*/while(<x/>.unwatch(\"__proto__\")){yield undefined; }");
tryItOut("{<y><z/></y>; }");
tryItOut("{<x><y/></x>;var prop = #3={a:#3#}, prop; }");
tryItOut("/*infloop*/do (this); while((({ get __noSuchMethod__ prop () { return @foo >>> __count__ }  })));\nreturn prop.eval(constructor);\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><bbb xmlns:ccc=\"prop\"><ccc:eee></ccc:eee></bbb></>.constructor in (-0) % window) {let (@foo) { export *;\f } }");
tryItOut("do {} while((__iterator__ = [z1,,].__lookupGetter__(\"prop\")) && 0);");
tryItOut("{gc()L:if(({a2:z2})) { if (<><x><y/></x></>) {({}).__lookupGetter__ } else {yield;throw true; }} }");
tryItOut("{ }return };");
tryItOut("this.zzz.zzz;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const __parent__ = -1 instanceof <xxx>{__iterator__}</xxx> in ((<y><z/></y>)[window]) > window) (export prop);");
tryItOut("throw constructor;");
tryItOut("var constructor = function(id) { return id };");
tryItOut("/*infloop*/for(({ constructor: prototype, __proto__: \tprototype }) = <><x><y/></x></> > <x><y/></x>.valueOf(\"number\").throw(('fafafa'.replace(/a/g, (<y><z/></y>).__defineSetter__)) <<= <y><z/></y>); (prototype & .valueOf(\"number\")); window) [1,2,3,4].slice");
tryItOut("{/*infloop*/for(var __noSuchMethod__ = []; prop; 4.) {; } }");
tryItOut("do /*for..in*/for(var [z1] in <><x><y/></x></>)  while((null.valueOf(\"number\")) && 0);");
tryItOut("if(delete) {/*for..in*//* nogeckoex bug 349964 */ for  each(const false(*::* ? <x><y/></x> : window) in ) ;return __iterator__; } else  if (__parent__-=undefined.isPrototypeOf(prop)) if(@foo) {continue M; } else (#3={a:#3#});");
tryItOut("export prop;\nreturn <><x><y/></x></>;\n");
tryItOut("throw StopIteration;");
tryItOut("if(<x><y/></x> /= window.@foo) { if (1.3) return null; else {L:if(( /* Comment */*)) { if (__proto__ = <y><z/></y>) {export constructor;continue ; } else {break L;return; }} }}");
tryItOut("for(let y in [5,6,7,8]) try { yield; } catch(__noSuchMethod__ if (function(){const prototype = this, x::__noSuchMethod__ = [,,z1];})()) { return; } finally { return eval(\"[]\", <y><z/></y>); } ");
tryItOut("/*infloop*/do {__proto__;return {}; } while(*::*);");
tryItOut("if(*.hasOwnProperty(\"prop\")) \nyield;\n else  if () export *;");
tryItOut("with(this.zzz.zzz){return;return; }");
tryItOut("gc()");
tryItOut("L:do {var __count__, __proto__ = <y><z/></y>;var prototype, __proto__; } while((*) && 0);");
tryItOut("\n");
tryItOut("if(__proto__%=<x><y/></x> ? (<x><y/></x> +=  \"\" ) : [(<x><y/></x>[constructor])]) { if (null) {throw undefined; } else M:with({__parent__: (* , *::*)})const prop = <y><z/></y>;}");
tryItOut("<x><y/></x>;");
tryItOut("with({}) try { prototype = prop; } catch(prototype) { export *; } ");
tryItOut("/*for..in*/for(let __proto__ = __proto__ != this in  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(__proto__ = function ([y]) { }))) {export *; }");
tryItOut("continue ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in ((__noSuchMethod__ = <x><y/></x> !== __parent__ = ) if ((*).call(<x><y/></x>, __noSuchMethod__, window)))) if(new __proto__()) prototype else  if (<x/> % new Math.pow(<x><y/></x>)(<x/>)) throw __proto__; else {return;let __parent__ = <><x><y/></x></>, __noSuchMethod__; }");
tryItOut("return 1e4;const __parent__;return;");
tryItOut("with({__count__: prototype .@x::  '' .__defineGetter__(\"constructor\", \nfunction(q) { return q; })})return;");
tryItOut("yield (![,,] if (1.2e3));");
tryItOut("(function  __count__ (__count__) { return this } ).apply const prototype;");
tryItOut("/*infloop*/for((true.@* += (<x><y/></x> - __parent__)); true.propertyIsEnumerable(\"__proto__\"); (function ([y]) { })().__parent__ = prototype < eval(\"/*infloop*/for(__count__ = <><x><y/></x></>; false; function ([y]) { }) {return;break M; }\", [1,,])) {if((__iterator__)(<y><z/></y>)) gc() else  if (this.__defineGetter__(\"constructor\", [1,2,3,4].slice)) let __count__ =  /x/ , __parent__ = null; else {return;;export *; } }with({constructor: ({constructor: [1,2,3,4].map})}) '' ;");
tryItOut("/*for..in*/for(let constructor = <x><y/></x> in constructor) export *;");
tryItOut("\n(__noSuchMethod__);");
tryItOut("if([,,]) {{}export __noSuchMethod__; } else  if ((function  __noSuchMethod__ (__noSuchMethod__, __parent__) { gc() } ).call(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>[(-0.yoyo( /x/g ))], <y><z/></y>)) {; }");
tryItOut("with({}) with({}) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__(__parent__) in <x/>) /a/gi");
tryItOut("return <><x><y/></x></>++;");
tryItOut("/*infloop*/for(const __parent__; (function(q) { return q; }(3.141592653589793, function ([y]) { })); (__proto__ = #1#)) export __parent__;");
tryItOut("/*for..in*/M:for(constructor in ((new Array(__proto__))(this)))__noSuchMethod__ = <x><y/></x>, prop;");
tryItOut("{{} }");
tryItOut("try { throw StopIteration; } catch(constructor if (function ([y]) { })() %  /x/g ) { with({}) continue ; } catch(__noSuchMethod__) { return; } finally { throw this; } ");
tryItOut("throw StopIteration;");
tryItOut("yield __count__.constructor;");
tryItOut("/*infloop*/do gc() while((\n(get = <><x><y/></x></>)));\r");
tryItOut("/*infloop*/while(new ((new <x/> + (-1)(let (prototype = this, __proto__) [], *::*)))(#1=({__noSuchMethod__: undefined }))){/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in <><x><y/></x></>) {{} }{export *; } }");
tryItOut("do {export __proto__\n } while((({ __proto__: ({ function::__count__: ({ prop: ({ __iterator__: __count__, constructor: ({ __iterator__: __noSuchMethod__, __parent__: prop }) }), __iterator__: prop }) }) }) = new ()) && 0);");
tryItOut("L: {with(0.1);yield; }");
tryItOut("/*for..in*/for(let __count__ = constructor = __iterator__./*\n*/__proto__ = 4. <<= this ? (this.__defineGetter__(\"__iterator__\", Math.pow)) : (yield 1.2e3) in (prototype = __proto__ | <x/>.propertyIsEnumerable(\"__noSuchMethod__\")).__proto__ = eval(\"<x/>\", @foo).__defineGetter__(\"__parent__\", function (__iterator__)<><x><y/></x></>)) yield Function(<x><y/></x>, false);.prop");
tryItOut("break M;");
tryItOut(".2;");
tryItOut("var prop, __iterator__;switch(1e4) { case window: break; __noSuchMethod__ = [1,,], __noSuchMethod__ = <><x><y/></x></>;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in window .@x:: <x><y/></x>) if((*.__lookupGetter__(\"constructor\"))) {gc() } else  if (@foo.throw(<><x><y/></x></>)) export __proto__; else export __noSuchMethod__;");
tryItOut("yield\n\n");
tryItOut("M:switch((eval(\"[,,].valueOf(\\\"number\\\")\", [15,16,17,18].map(function(y) { yield y; ;; yield y; }, <x/>)))) { default:  }");
tryItOut("default: case function::__count__: (\ffalse);;break; case -0: break; case 8: yield;break; case 1: break; \n{}");
tryItOut("with({<x/>[<y><z/></y>].prop: this.__defineGetter__(\"__noSuchMethod__\", !<x><y/></x>)})throw <><x><y/></x></>\n{}\n/*for..in*/for(__parent__ in (( '' )(({})))){var __count__, __parent__; }");
tryItOut("");
tryItOut("if((p={}, (p.z = undefined)())) export x::__count__; else  if (( '' .propertyIsEnumerable(\"__count__\"))) yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __parent__ in ((gc)(this)))yield;");
tryItOut("let( \"\" ) ((function(){{}})());");
tryItOut("with({prototype: new (window)(*::*.unwatch(\"__count__\"))}){yield this; }");
tryItOut("if(<x><y/></x>) (4.);");
tryItOut("L:if(((<><x><y/></x></>)())) continue ; else gc()");
tryItOut("/*for..in*/for(prototype = __iterator__ = __noSuchMethod__-- in new (({function::__iterator__: false, __count__ getter:  /x/g  }))(__noSuchMethod__, __parent__)) /*for..in*//* nogeckoex bug 349964 */M: for  each(const x::setter in 1e+81) {yield this;gc() }");
tryItOut("switch(undefined) { default: gc()export __noSuchMethod__;break; case 6: yield <><x><y/></x></>;var __parent__ = true;case 7: break ; }");
tryItOut("/*for..in*/for(const [function::constructor, prototype] = false in (undefined.__noSuchMethod__ if (window))) /*infloop*/for(var prototype = return;; \n; @foo in 1e-81) {__parent__ = (-1), __noSuchMethod__ = 1e+81; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = (__noSuchMethod__.__count__) in ( /x/ .@* %= ++*::*)) with({constructor: prop|=this})break M;");
tryItOut("while((<y><z/></y>) && 0){const __count__ = [[1]], prototype = [,];with(window.__noSuchMethod__ = <x><y/></x>){gc()let prop, __iterator__; } }");
tryItOut("/*infloop*/for(({ __parent__: (<x><y/></x>)(<x/>) }) = prototype = (this.zzz.zzz); throw window ^ <y><z/></y>; constructor.constructor = <x><y/></x>.hasOwnProperty(\"__count__\")) {/*for..in*/for(const constructor in ((((new Function(\"yield;\"))).call)(new function (constructor) { return @foo } (({}), <x><y/></x>))))(({})); }");
tryItOut("{/*infloop*/do {const __count__ = <><x><y/></x></>; } while(constructor = __parent__); }");
tryItOut("/*infloop*/M:for(let __iterator__; __iterator__.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map); __iterator__) export *;");
tryItOut("/*for..in*/for(__iterator__ in ((prototype)(1e4)))export *;");
tryItOut("/*for..in*/for(let try { export *; } finally { break L; }  in (('haha'.split)((({__iterator__: constructor})))))let ( { return (yield \n<x><y/></x>[<x><y/>\t</x>]) } ) { gc() }");
tryItOut("/*for..in*/for(var prototype in <x><y/></x>) {return <x><y/></x>; }");
tryItOut("if(__iterator__ = window.prototype) {{({}).hasOwnPropertygc() }{} }");
tryItOut("var <x/> = null;");
tryItOut("with(<y><z/></y>.yoyo(<y><z/></y>)){(<x><y/></x>);yield *::*; }");
tryItOut("/*infloop*/for(const __proto__; <x><y/></x>.@* &= (true.throw(({a1:1}))); (RegExp(<x><y/></x>.prop = <y><z/></y>, *))) {with(__parent__)__count__ = this; /  }while(((__parent__ = this)((__proto__.__iterator__ getter= eval), (this.__defineGetter__(\"__noSuchMethod__\", Math.pow)))) && 0){export *;<x/> } }");
tryItOut("M:do {{}\nexport *; } while(('fafafa'.replace(/a/g, __count__.prototype) > undefined) && 0);");
tryItOut("L: gc()");
tryItOut("yield [,];");
tryItOut("if(this.__defineSetter__(\"prototype( '' )\", ([1,2,3,4].slice)/*\n*/.call)) if((__iterator__.@foo)) return; else  if ((return)) {var __noSuchMethod__ = __iterator__, prop; }");
tryItOut("this.zzz.zzz;");
tryItOut("try { throw __proto__; } finally { var __parent__ = <y><z/></y>, __count__; } ");
tryItOut("with({}) return *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(x::prop in <><x><y/></x></>) {throw window;; }");
tryItOut("let (__count__ = (\n( /x/g .throw(true)))) { {;let prototype = null; }\n }");
tryItOut("with((<><x><y/></x></> in  /x/g ))null;");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("L: {}");
tryItOut("__count__ const __proto__;");
tryItOut("with({}) { return; } ");
tryItOut("L:with(([*::* for each (__count__ in <x><y/></x>)]))export *;\nreturn;\n");
tryItOut("/*infloop*/for(let __count__; __noSuchMethod__+=this.__defineGetter__(\"__iterator__\", Math.sin); function::prop) throw  '' ;");
tryItOut("{{}throw prototype; }");
tryItOut("/*for..in*/for(var prop = eval(\"arguments\", false) in @foo) { }\n");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in  /x/ ) export __count__\nlet (__proto__ = (prototype.__iterator__ setter= <><x><y/></x></>), prop) {  }");
tryItOut("let(__iterator__, __noSuchMethod__) ((function(){with({}) for(let y in [5,6,7,8]) let(__parent__) { (<x/>);})());");
tryItOut("if(new (function () { return constructor.__noSuchMethod__ =  /* Comment */<><x><y/></x></> } )()) export __count__; else  if (( /x/ .hasOwnProperty(\"prop\"))) {__proto__;throw <x><y/></x>; } else yield;");
tryItOut("prototype");
tryItOut("/*infloop*/M:do {L: {return undefined;; } } while(((-0))[({__noSuchMethod__ getter: function(q) { return q; }, __noSuchMethod__ getter: function(q) { return q; } })]);");
tryItOut("let([15,16,17,18].some(function  __iterator__ (delete, prop) { yield <x><y/></x> } , this) = (#3={a:#3#} >> <x><y/></x>)()) { return;");
tryItOut("L:if((@foo &= <><x><y/></x></>.eval(false ? prop : 1e4))) this.zzz.zzz;");
tryItOut("if( /x/g ) { if (()) {if((eval(\" '' \", this))) return; else  if (eval(\"true\",  '' )) {const __iterator__, __noSuchMethod__;\f } else let function::__iterator__ = {}, __count__ = null; }} else /*infloop*/L:do /*for..in*/for(const __proto__(<x/>) in ((function  prop ()this.propertyIsEnumerable(\"prop\"))(__iterator__ =  /x/  ? <x><y/></x> : 1e-81.__proto__)))/*infloop*/M:for(<><x><y/></x>\n</>; __count__; this) {yield 1e+81;break L; } while(prototype = this);");
tryItOut("/*infloop*/L:do return (0x99)(__proto__,  '' ); while((eval(\"\", (eval(\"(-1).@*\", prototype = <><x><y/></x></>)))));");
tryItOut("{export *;M:if(<x><y/></x>.yoyo( '' )) {const __parent__ = *;\t__proto__, constructor = function(id) { return id }; } else {*::*; } }");
tryItOut("while((false) && 0){ { return <><x><y/></x></>() }  }");
tryItOut("{export *;L: {export *;Math.pow }/*\n*/ }");
tryItOut("/*for..in*/for(let __proto__ in *::*) {export __parent__; }");
tryItOut("if(if(<y><z/></y>) throw prototype\f; else {({}).__lookupGetter__export __count__; <ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>  }) yield *::*; else <y><z/></y>;");
tryItOut("gc()\nfunction (__proto__){{} }");
tryItOut("/*infloop*/for(x::prop = (\nnull); window.__parent__ = (function ([y]) { })(); (uneval(033 /= __iterator__))) <y><z/></y>;");
tryItOut("let (__iterator__ = ({__proto__: (++<x><y/></x>) }), __noSuchMethod__) { do  while((*.__noSuchMethod__) && 0); }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __iterator__ = @foo in <x><y/></x>) {gc() }");
tryItOut("M:if( /* Comment */ '' .throw((prop[ /x/g ]))) { '' ; } else  if (__noSuchMethod__ = ([[]])[<x><y/></x>]) {(this); } else {return <><x><y/></x></>;with({prototype: <x><y/></x>})return <x><y/></x>; }");
tryItOut("if(__parent__ = (-1)) { if ([<x><y/></x>]) function  __proto__ (__proto__) { yield .2 }  else {}}");
tryItOut("/*infloop*/for(var [, ] = <x><y/></x>; (let (__iterator__ = <><x><y/></x></>, __iterator__)  /x/g ); __count__ = 0x99) do {*::* } while(( '' ) && 0)//h\n;");
tryItOut("if(<x><y/></x>) { if (this) export __noSuchMethod__; else {yield;yield; }}throw <x><y/></x>;");
tryItOut("M:if((__proto__.yoyo(true))) { if ((constructor\n.__defineGetter__(\"[ ''  for each (constructor in <x/>)]\", <x><y/></x>))) {const __noSuchMethod__, __proto__ = false;gc() }} else export *;");
tryItOut("/*infloop*/for(({ __noSuchMethod__: [({ constructor: ({ __iterator__: prop }) })] }) =  \"\"  === <y><z/></y>\t; 3.141592653589793; constructor.@*) do gc() while((window) && 0);");
tryItOut("{((1 for (x in []))).apply }");
tryItOut("if(prototype.constructor setter= Function) const __noSuchMethod__; else {/*infloop*/for(var __parent__ = __count__; 0x99; <><x><y/></x></>) <x/>; }");
tryItOut("if(<>(([1,2,3,4].slice))</>) throw constructor; else L:if((false)(window, function(id) { return id })) var __proto__; else  if (Date(this)) {__count__ = <x/>; }");
tryItOut("/*infloop*/M:for([15,16,17,18].sort(true, false); ( /x/g  ^ <y><z/></y>); (<><xxx {prop}={<y><z/></y>} /></>.__defineGetter__(\"__parent__\", 0x99.unwatch(\"__noSuchMethod__\")))) {if( /x/g ) new Function else {} } const __noSuchMethod__;");
tryItOut("\ngc()\nthrow get, prototype;");
tryItOut("/*infloop*/do {var constructor = true, get; } while( \"\" );");
tryItOut("{}");
tryItOut("/*infloop*/L:for(<x/>; false; ({})) {yield;throw null; }");
tryItOut("M:if(window) {/*for..in*/for(let prototype in (p={}, (p.z = <><x><y/></x></>)())) {/*for..in*/for(const [prop, __noSuchMethod__] = (prop[<><x><y/></x></>]) in this) {(<x><y/></x>).watch } }{yield <><y/></x>; } } else while((<bbb xmlns:ccc=\"(yield <><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb>.(-3/0 .. <x><y/></x>(<x/>, @foo))) && 0){break L; }");
tryItOut("throw StopIteration;");
tryItOut("M:switch('fafafa'.replace(/a/g, gc) /= (Math.sin).call(0, )\f['haha'.split]) { default: case eval(\"<x/>\", this): break; case [<y><z/></y> for each (__noSuchMethod__ in <><x><y/></x></>)]: case constructor++: yield prototype;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __count__: [prop] }) in [({ set prototype __parent__ (__proto__, constructor) /x/g , __iterator__:  ''  })].some((new Function(\"var __noSuchMethod__ = @foo, let = <x><y/></x>;\")))) yield;");
tryItOut("(<x/>);");
tryItOut("{return [z1,,] / <y><z/></y>;case 1: default: const constructor = @foo, __iterator__;break; case __proto__ = (/a/gi)(): break; case 7: return  /x/g ;break; yield; }");
tryItOut("if((p={}, (p.z = *::* === [[]])())) (set); else  if (prop = null) {;return  '' ; } else if(<x><y/></x>) {var __count__, constructor = window; }");
tryItOut("L:if(*\n) {var constructor, constructor; } else export __count__;");
tryItOut("constructor");
tryItOut("/*infloop*/L:for(let __count__ = (__iterator__ = ); ((1.3).call(*.__lookupGetter__(\"__proto__\"), )); this.__defineSetter__(\"prop\", gc)) switch(__noSuchMethod__.__parent__ = *::*) { case 8: break ;break;  }");
tryItOut("if( \"\" ) { if (<zzz>continue //h\nM</zzz>) {__noSuchMethod__ = <><x><y/></x></>\nexport __parent__;let __count__ = *, __noSuchMethod__; }} else {\n(@foo); const __parent__;__count__ = window; }");
tryItOut("M:if(([[z1]].filter([1,2,3,4].slice))) gc() else ({}).__lookupGetter__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in this.__defineSetter__(\"constructor\", function () { (#1#)__iterator__ = eval ;(/ } )) {gc()/*for..in*/for(const __iterator__ = [[]] in (function ([y]) { })())  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in false) const prop = <x><y/></x>, __parent__;");
tryItOut("let (({ function::__parent__: __count__ }), [, ({ __proto__: ({ __iterator__.1e+81: [({ __parent__: function::__iterator__ }), , , ({ function::__parent__: prop, __parent__: prototype })] }), prototype: ({ __parent__: ({ prop: ({ __iterator__: constructor, __count__: __proto__ }) }), constructor: ({ __count__: __parent__ }) }) }), [, each, [, prop, ]]]) { M:if((false.*)) return (window).__defineSetter__; }");
tryItOut("gc() const constructor;");
tryItOut("/*infloop*/M:for(( '' )(*::*); [1,,] for each (__count__ in <x><y/></x>) if ([1,,]); false) {yield; const __parent__; }");
tryItOut("export __proto__\n");
tryItOut("{}");
tryItOut("if((new (1e-81).apply(((<><x><y/></x></>).watch)(1e+81, __parent__)))) { if (new ((((__count__ = <x><y/></x>)).watch).call)(\f(this.zzz.zzz), [15,16,17,18].filter(<x><y/></x>, export \t*;))) const __proto__, __proto__; else {return true;while((3) && 0){return;const __parent__, prototype = this; } }}");
tryItOut("while((eval(\"@foo\", true)) && 0){gc() } const __count__;");
tryItOut("M:if(eval(\"<x/>\", 1e81)) { if (yield <y><z/></y> :: true) if(<y><z/></y>) yield; else {(/a/gi).applyyield *; } else {(this);{}export __count__; }}");
tryItOut("Function");
tryItOut("/*infloop*/for((({ __proto__: __count__(this), __count__: ({ constructor: ({ function::__parent__: __iterator__ }) }) }) = prototype.prop); (([ /x/g ].map(/a/gi).@*).propertyIsEnumerable(\"__proto__\")) >= [11,12,13,14].map; __iterator__ = constructor.__proto__) do {this__iterator__ = <x><y/></x>, __iterator__ =  /x/g ; } while((null) && 0);");
