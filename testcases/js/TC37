
tryItOut("/*infloop*/L:for(({ prop: __iterator__, prop: ({ __parent__: ({ prop: ({ __noSuchMethod__: [, constructor, , ], __proto__: __noSuchMethod__ }) }), constructor: ({ __parent__: ({ __proto__: ({ __count__: __noSuchMethod__.__proto__, __noSuchMethod__: ({ __iterator__: [__noSuchMethod__] }) }), __iterator__: [__noSuchMethod__] }), __count__: [[[], ]] }) }) }) = (__parent__ = this.__defineGetter__(\"__count__\", /a/gi)); <>yyy</>.(({a2:z2}).yoyo(true)); __noSuchMethod__ = (p={}, (p.z = __count__)())) L:do return *::*;\f while((#3={a:#3#}) && 0)");
tryItOut("/*for..in*/for(var __iterator__ = (yield <x><y/></x>) in *::*) {prototype =  /x/ ; }");
tryItOut("return (let (__iterator__ = undefined, __proto__ = <y><z/></y>) @foo);");
tryItOut("yield; const __iterator__;");
tryItOut("if(function (__count__, constructor) { return __iterator__ = -1 } ()) { if ((delete <><x><y/></x></>) - (new Function(null))) {if(<x><y/></x>) (<><x><y/></x></>); else  if (arguments) {export __iterator__;export prop; }do {yield; } while((1.2e3) && 0); } else {/*infloop*/for(var __noSuchMethod__; __count__;  \"\" ) {continue M; }function  __parent__ (prop) { return <><x><y/></x></> }  }}");
tryItOut("__noSuchMethod__ = @foo;");
tryItOut("/*for..in*/for(var prototype in (((new Function(\"continue L;\")))(*))){export *;return; }");
tryItOut("M:with({prototype: (prototype.prop getter= /a/gi).valueOf(\"number\")}){/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in 0/0) export __noSuchMethod__; }");
tryItOut("switch(0/0) { case this: {}break;  }/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in null ? true : <x><y/></x>) undefined, __count__;");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: prototype }) = ++eval(\"__noSuchMethod__\", {}) >> <><>yyy</></>.__lookupSetter__(\"constructor\"); this.zzz.zzz; prototype =  /x/g (({__iterator__ setter: ([1,2,3,4].map).call }), function ([y]) { }) == [z1,,]) {/*for..in*/for(let __parent__ in window) {export __count__; } }");
tryItOut("\tif((new (function(y) { yield y; export *;; yield y; })(1e4, [1,,])) || yield <x><y/></x>) return; else  if (__iterator__ = arguments.__lookupSetter__(\"__parent__\")) {export __noSuchMethod__;export constructor; } else {return <x><y/></x>; }");
tryItOut("<!--yy-->if(null) { if (@foo ^= *[__parent__\n].yoyo( \"\" ).unwatch(\"__proto__\")) this else (x::function::__proto__);} const __iterator__;");
tryItOut("with(true.watch(\"__proto__\", function(q) { return q; })){export __parent__; }");
tryItOut("if(prop = <x><y/></x> @ <><x><y/></x></>.__noSuchMethod__) { if ((new function(q) { return q; }(null, [1,,])).__proto__) if(({a1:1})) { if (-1) (@foo); else {return constructor;return; }} else return;}");
tryItOut("/*for..in*/M:for(var __parent__.prototype in ((gc)([false])))throw StopIteration;");
tryItOut("export __iterator__\n");
tryItOut("if(yield) {yield;let __count__ = <x><y/></x>, __noSuchMethod__; } else  if (prop =  /x/ ) break ; else {export *;\n(*);\n }");
tryItOut("M:if(([15,16,17,18].map(function () { return; } , function ([y]) { } ? undefined : window))) { if (((*);)) {return  /x/g  } else switch( /x/ ) { default: break;  }}");
tryItOut("{ }");
tryItOut("L:while((this.__defineSetter__(\"prop\", /a/gi)) && 0){__noSuchMethod__ = *::*;export __parent__; }");
tryItOut("/*for..in*/for(__iterator__ in undefined) <><x><y/></x></>;");
tryItOut("with({__count__: new (function(y) { yield y; break ;; yield y; })(prop = false)})export *;");
tryItOut("M:with({prop: __parent__ = window})throw <><x><y/></x></>;");
tryItOut("M:with({__noSuchMethod__: ((this'.)__defineSetter__(\"prop\", 'haha'.split))}){if(false) {yield; } else gc() }");
tryItOut("switch(~<x><y/></x>(<x><y/></x>, @foo)) { case 6: L: {} const __count__;default: /*infloop*/for(( /x/  in this); [__parent__] = [z1,,] :: __parent__; __parent__) {/*infloop*/M:for(const prop; (eval(\"<y><z/></y>\", <>__count__</>)); <><x><y/></x></>) export *; }gc()case (<y><z/></y>++ in (__proto__ = (-0)\n).valueOf(\"number\")): case 1e4: throw StopIteration;{prototype = window;__parent__ }/*if(Exception( /x/g , window)) /*export __parent__; else {3/0;let  { yield __proto__ } ; }break; break; case 6:  }");
tryItOut("L:with(new function  function::__proto__ (constructor, prototype) { export *; } ((uneval(#1=[#1#].eval(<x/>))), <x/>.unwatch(\"constructor\")))*::*");
tryItOut("/*infloop*/while((prop instanceof 0 & ({ prototype: __count__, prototype: __count__ }) = this.valueOf(\"number\"))){/*infloop*/do {throw [,,];{} } while(<x><y/></x>);\n\n }");
tryItOut("break ;\nconst __proto__;\n");
tryItOut("/*for..in*/for(const [prototype, __count__] = export constructor in <><x><y/></x></> for (prop in <y><z/></y>)) gc()");
tryItOut("continue L\n__noSuchMethod__ = <y><z/></y>, prototype;");
tryItOut("if(null .. @foo) yield 4.; else {yield __proto__; }");
tryItOut("yield new Number(<x><y/></x>.__defineSetter__(\"__parent__\", [1,2,3,4].map));");
tryItOut("L: do {throw  /x/g ;let __proto__ = @foo, __count__ = __parent__; } while((eval(\"1.3\", (-0))) && 0);");
tryItOut("constructor");
tryItOut("if(({ set prototype(__proto__) { yield __iterator__ } , __parent__: function ([y]) { } }).__proto__) window; else {; }");
tryItOut("if((1.3.@foo) ? #1=[#1#].* : ({prop: <y><z/></y> }).@foo) {/*infloop*/do yield <><x><y/></x></>; while(*); } else  if (<x><y/></x> instanceof <><x><y/></x></>) {Math.pow } else __proto__ = (prop)[<x/>] < eval(\"[<x/> if ( /x/g )]\", <x><y/></x> ? constructor :  \"\" )");
tryItOut("let (__iterator__ = *::*) { {const get = <x><y/></x>, constructor;((function ([y]) { })()); } }");
tryItOut("/*infloop*/M:for(let ({ prop: ({ __count__: ({ delete: prototype }), prototype: ({ constructor: constructor }) }), prop: ({ __proto__: ({ __iterator__: __noSuchMethod__ }), __parent__: prototype }) }) = prop = (-1)((#1#\n), <x><y/></x>); ++new Math.sin(prop); __proto__.__parent__) {yield this;\f<x/> }");
tryItOut("/*for..in*/for(const <x/> in window) yield <x/>;");
tryItOut("/*for..in*/for(var [__iterator__, __noSuchMethod__] = function (prop) { return * } () in __proto__) yield <><x><y/></x></>;throw #1#;");
tryItOut("with(__parent__|=*::*)__count__ getter: <x><y/></x>");
tryItOut("/*for..in*/for(const constructor((eval(\";\", __count__))) in <y><z/></y>) break M;");
tryItOut("/*infloop*/for(*; (({ prototype: [__parent__, prop], prototype: ({ __proto__:  /x/ ['__iterator__'] }) }) = <{__noSuchMethod__}>yyy</{__noSuchMethod__}>); (<x><y/></x>.__defineSetter__(\"prop\", function(q) { return q; }).yoyo(__proto__ = __parent__ = ({a1:1})))) L:if(true) {break ;{} } else  if (this) {(<><x><y/></x></>); }");
tryItOut("let(prototype = (({__noSuchMethod__: 3}))) ((function(){return prototype%=#3={a:#3#};})());");
tryItOut("M:if(prototype = null) {} else  if (prop.valueOf(\"number\"))  else {const prototype, __parent__; }");
tryItOut("{/*infloop*/do if(<><x><y/></x></>) {return;var prop; } else  if (<><x><y/></x></>) {<x><y/></x> } while(({\f__proto__: (<y><z/></y>), prototype: @foo })); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (<><x><y/></x>\t</>)[[1,,]] in constructor) /*infloop*/do var prototype, __iterator__ = *::*; while(*::*);");
tryItOut("if((prototype.__lookupSetter__(\"prototype\") %= <x><y/></x> % 'fafafa'.replace(/a/g, function(q) { return q; }) >= ([,,].prototype .@x:: (this < true)))) {with((([1,2,3,4].slice)(this.__defineSetter__(/*\n*/\"prototype\", function(y) { yield y; 0; yield y; }))))/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in \f*) __noSuchMethod__ =  '' , __noSuchMethod__;export __noSuchMethod__; } else  if (yield ( \"\"  % <x/>) ? * : new Date()) /*infloop*/do return; while(*::*); else if(null) {const __proto__ =  /x/g ;(<x><y/></x>).watch } else \r if ( /x/g ) return; else ( /x/ );");
tryItOut("for(let y in [5,6,7,8]) for(let y in [])\n");
tryItOut("let (__parent__, __parent__) { return; }");
tryItOut("if(this)  else  if ([,]) {yield <x><y/></x>; } else const constructor, __parent__ = <><x><y/></x></>;");
tryItOut("{export constructor; }");
tryItOut("M:with(prototype =  '' ){; }");
tryItOut("/*for..in*/for(const __count__ = [] = constructor in false.__count__) break ;");
tryItOut("yield ({a2:z2})\ncontinue M;");
tryItOut("\f;\n{}\n");
tryItOut("{\tvar prototype; }");
tryItOut("let(__proto__, constructor) { throw StopIteration;");
tryItOut("/*infloop*/L:for( /* Comment */__noSuchMethod__.constructor.__parent__; this.zzz.zzz; void yield false instanceof ++3) {/*for..in*/L:for(const __noSuchMethod__ = [,,z1] >>= yield  /x/  in 3 < <><x><y/></x></>) break ; }");
tryItOut("if(__parent__.this getter= Math.sin) { if ((p={}, (p.z = 1e81)()).__parent__) throw __count__; else if(__iterator__) } const (#0=({__count__: this})).*;");
tryItOut("M:if(__noSuchMethod__ = __iterator__.( \"\" )) {yield;; } else  if (-prop) {let (({ __iterator__: prototype, __count__: __parent__ }) = this.zzz.zzz, prototype)\t { yield; } }");
tryItOut("const __proto__ = (-1)( '' ,  /x/g ), ({ prototype: __iterator__ }) = [window]\n{if(1e-81) {return *; } else export *; }");
tryItOut("M:if(new ((new Function(\"yield;\")))()) { if (typeof (<><x><y/></x></>.__lookupGetter__(\"prototype\"))) {throw  /x/g ;*; }} else {gc()yield; }");
tryItOut("M:do {/*infloop*/for(let prop = window; false; (function ([y]) { });) yield; } while(('fafafa'.replace(/a/g, function  prototype () { return   } )) && 0);");
tryItOut("if(3) { if (true) {prototype, __count__; }} else gc()");
tryItOut("with(new Error(__count__ ?  /x/g  : <><x><y/></x></>)) /x/ ;");
tryItOut("let(__parent__) { yield  '' ;");
tryItOut("if(@foo) { if (prototype) (<><x><y/></x></>); else let constructor, __count__ = [z1,,];}");
tryItOut("/*infloop*/for(const __proto__; (__iterator__ = __proto__, __iterator__ =  /x/ .hasOwnProperty(\"prototype\").unwatch(\"__noSuchMethod__\")); ({}).__lookupGetter__()) var __proto__ = <><x>\t<y/></x></>, prototype = __noSuchMethod__;");
tryItOut("L:if((({}).hasOwnProperty).call(this, try { gc() } catch(__parent__) { {} } , <><x><y/><\t/x></>)) { if ((__parent__) = (eval(\"__iterator__ = [[1]];\", <x><y/></x>) != (Math.sin()))) {export *;yield #1=[#1#]; }} else {true; }");
tryItOut("/*infloop*/M:for(__iterator__; constructor = prop; (new __parent__.(([1,,].* + x::__parent__.__proto__ = <y><z/></y>)) | (/a/gi)().throw(prototype(<x><y/></x>, <y><z/></y>))())) {L: {/*infloop*/do {export __iterator__; } while(prop);__iterator__; }(function ([y]) { }); }");
tryItOut("if(*) return; else {{} }");
tryItOut("export __parent__\n");
tryItOut("{yield; }");
tryItOut("if(((__count__ = prototype))[<x/>--]) {var __noSuchMethod__, __noSuchMethod__ = ({}); } else  if ( /* Comment */Function()) return null; else {export __noSuchMethod__;return false; }");
tryItOut("if((constructor =  \"\" )) { if (false.propertyIsEnumerable(\"__iterator__\")) ;} else {<x><y/></x>; }");
tryItOut("if(#1=[#1#]) { if (*::*) {[1,2,3,4].slicebreak ; } else }");
tryItOut("with( /x/ .watch(\"constructor\", (new Function(\"break ;\")))){; }");
tryItOut("/*infloop*/for(var ({ __count__: [__proto__, ] }) = <bbb xmlns=\"prop.prop setter= (<x><y/></x>).watch\"><!--yy--></bbb>; *::*.unwatch(\"__noSuchMethod__\"); eval(\"yield;\", this.__defineSetter__(\"let\", /a/gi))) export *;");
tryItOut("/*infloop*/for(const constructor; (__iterator__.__count__ = window.@foo); __count__ @ ((yield undefined))) {gc()\nL:switch(__iterator__.prototype = function ([y]) { }) { default:  } }");
tryItOut("return null;");
tryItOut("M:with({<x><y/></x>: <><x><y/></x></>.isPrototypeOf(@foo)})return;");
tryItOut("with(this.__defineGetter__(\"prop\", Math.sin)){yield [z1]; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("let(__parent__) ((function(){this.zzz.zzz;})());");
tryItOut("if([([this]) for each (prop in [,,z1][this])]) {\t if ([[1]].eval(true)[[11,12,13,14].map] for each (__iterator__ in delete) for (__proto__ in <y><z/></y>) if ((-0))) /*infloop*/while( \"\" ){export *;return; } else export *;}");
tryItOut("L: return (#1=[undefined]);");
tryItOut("__proto__, __noSuchMethod__ = <><x><y/></x></>;\n{}\n");
tryItOut("L:if( , ([15,16,17,18].filter(<><x><y/></x></>\f, #3={a:#3#})).*) {/*infloop*/for(var constructor; @foo.valueOf(\"number\"); ) {{}export __count__; } } else  if (constructor = eval(\"/*for..in*/for(let [__noSuchMethod__, __parent__] = window in <><x><y/></x></>) {; }\", *)) {yield;M:if(*::*) { if (window) {var __noSuchMethod__ = []; } else yield;} const function::__noSuchMethod__; } else {/*infloop*/for(-1; null; prop) {__count__;var __parent__ = *; } }");
tryItOut("/*infloop*/M:for((<x><y/></x> ? [,,] : 5.0000000000000000000000).constructor; (<x><y/></x> for each (__parent__ in  /x/ )).watch(\"__iterator__\", @foo); *::*.prop ? #2=({__proto__: 0}) : 'fafafa'.replace(/a/g, 0)) {(new Function(\"return  \\\"\\\" ;\")) }");
tryItOut("if((Object(undefined,  '' ))) /*infloop*/for(<><x><y/></x></>; <x><y/></x>; <y><z/></y>) {constructor;[,,]; } else  if (this.__defineSetter__(\"prototype\", 'haha'.split)) export *;");
tryItOut("<y><z/></y>\n");
tryItOut("do {break ;(<><x><y/></x></>); }\n while(([x::constructor = __iterator__ = constructor].filter(gc)) && 0);");
tryItOut("export __iterator__; const __iterator__;");
tryItOut("/*for..in*/for(var [1]['__count__'] in this) function(q) { return q; }");
tryItOut("M:switch(prop = new ( /x/g )(<x><y/></x>)) { default: yield;break;  }");
tryItOut("/*for..in*/for(let function::__iterator__ in null) {const __noSuchMethod__;(__proto__); }");
tryItOut("this");
tryItOut("/*for..in*/for(prop in ((gc)())) {throw  '' ;\n/*infloop*/do continue M; while(window);\n }");
tryItOut("switch(prop.__proto__ setter= function  __count__ (__noSuchMethod__)<y><z/></y>) { case 4:  }");
tryItOut("/*infloop*/while(*){/*infloop*/M:for(let __count__ = @foo; <x><y/></x>; <y><z/></y>) break ;/*for..in*/for(let __proto__ in ((({}).__lookupGetter__)(<x><y/></x>)))const prop = <x>< try { if( /x/  > <x/>) {return *::*; } else {export __noSuchMethod__; } } catch(prototype if (function(){let(prototype, prop) { for(let y in []);})()) { let(prototype = yield  \"\" , __iterator__) {  } catch(__noSuchMethod__ if (function(){with({}) { for(let y in [5,6,7,8]) const __noSuchMethod__ = this, prop = __count__; } })()) { with({}) for(let y in [5,6,7,8]) {} } catch(__proto__) { with({}) { for(let y in [5,6,7,8]) export __proto__; }  } finally { try { ; } catch(__proto__ if (*.valueOf(\"number\"))) { yield <y><z/></y>; } catch(prototype if (function(){break M;})()) { return <> </>; } catch(__count__) { return; }  } /></x>; }");
tryItOut("/*for..in*/for(let prop = 1.3 in <x><y/></x>) var __proto__;");
tryItOut("M:if(((function (constructor) { return (-case 7: ) } ()) == (new ((eval(\"yield;\", <><x><y/></x></>)).@*)()))) { if ((({__parent__: <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>() }))) {/*infloop*/for(const ({ __parent__: __iterator__, __iterator__: ({ function::yield: __proto__ }) }) = <><x><y/></x></>.unwatch(\"prototype\"); __iterator__; (<bbb xmlns=\"false\"><!--yy--></bbb>.( /x/g .yoyo(<><x><y/></x></>)))) return;(*); }} else let(__parent__) { this.zzz.zzz;");
tryItOut("if(<x><y/></x> & [,])  else  if ([ /x/ ].filter(<x><y/></x>)) prop");
tryItOut("gc()");
tryItOut("L: while((arguments) && 0){yield;gc() }");
tryItOut("for(let y in [5,6,7,8]) __count__ = __noSuchMethod__;");
tryItOut("while((__noSuchMethod__ = this) && 0){throw function(id) { return id }; }");
tryItOut("/*for..in*/for(var prop in *()) {/*for..in*/M:for(let __proto__ = <x/> in  /x/g ) __count__ setter: ({}).__lookupGetter__ }\nL: *::*;\n");
tryItOut("throw constructor;");
tryItOut("for(let y in []);");
tryItOut("L: {if() { if (true) let prototype = constructor, constructor = this; else break M;} }");
tryItOut("/*infloop*/for(undefined.__parent__; <zzz>let (prototype)  /x/ </zzz> for ((constructor) in (yield #1#)) for (__iterator__ in  \"\" ) if (<y><z/></y>); <xxx {__parent__}={this\n} />) {}");
tryItOut("__count__ = x::prototype;");
tryItOut("M:if(*) {window } else  if (<><x><y/></x></>)  \"\"  else {break ; } const __parent__;");
tryItOut("L:if((<y><z/></y>.__proto__)[(new (function  __proto__ (__iterator__, __count__) { constructor, __count__; } )(<x/>, __proto__)) = __iterator__]) break L; else  if ((((1 for (x in [])))(,  /x/g ))) {/*infloop*/for(var __proto__ = yield (*::* for (__parent__ in __noSuchMethod__)); (({}).hasOwnProperty).call(<><x><y/></x></>, ).*; (({ prototype: ({ __noSuchMethod__: __noSuchMethod__ }) }) = (this.prop = <x/>)(window, false))) {export *;gc() } } else continue L;");
tryItOut("if(let (__noSuchMethod__, __proto__) function ([y]) { }) <x><y/></x>;");
tryItOut("while((prototype.(<><x><y/></x></>)) && 0){var __iterator__ = 1.3;yield; }");
tryItOut("let (__proto__ = 4.) { export *; }");
tryItOut("/*infloop*/do if((__count__ = __proto__)) var prototype; else {null; } while(![prototype =  \"\"  if (__iterator__)]);");
tryItOut("return [15,16,17,18].map((/a/gi).call, window);");
tryItOut("while(((p={}, (p.z = null)())) && 0){continue M; }");
tryItOut("let (({ __noSuchMethod__: <y><z/></y> }) = ('haha'.split)(null).__defineGetter__(\"prop\", function(y) { yield y; /*for..in*/for(let [prop, __parent__] =  in true) \tprototype = false;; yield y; }), __iterator__ = [11,12,13,14].filter) { /*infloop*/while(-1)\ngc()\n }");
tryItOut("with({function::__noSuchMethod__: (({ __parent__: [, __noSuchMethod__], __parent__: prototype }) = __noSuchMethod__.eval([11,12,13,14].sort))}){throw eval(\"return false;\", <><x><y/></x></>); }");
tryItOut("with({}) throw prototype;");
tryItOut("/*infloop*/do <x/>; while(({}));");
tryItOut("export *;");
tryItOut("{}export *\nconst prototype = 0x99; const __noSuchMethod__;");
tryItOut("switch([11,12,13,14].sort.throw(window !== <x><y/></x>)) { default: case  /x/g : break; /*infloop*/while((eval(\"continue ;\", prototype) > (prototype.let setter= Function))){ /x/g ; }break;  }");
tryItOut("with({__count__: var prop, __noSuchMethod__}){__iterator__ = 0.1;return @foo; }");
tryItOut("{/*infloop*/while((Array(window, constructor)))export __noSuchMethod__;/*infloop*/L:while(<x><y/></x>)<><x><y/></x></>; }");
tryItOut("; const prop;");
tryItOut("/*infloop*/while([new (@foo)([[1]])])\f{/*for..in*/L:for((prop) in ((gc)(<x/>))){const __parent__ = window, __iterator__ = *;let __count__\f;export *; } }");
tryItOut("/*for..in*/for(const __proto__ in undefined) break ;");
tryItOut("L: /*for..in*/for(var __noSuchMethod__ in ((*)(({__proto__: <x><y/></x>, __count__: <x><y/></x> }))))continue L;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with((Object((<><x><y/></x></> === window)))){(this); const x::__noSuchMethod__; }");
tryItOut("M:do let (__noSuchMethod__, prototype) { this; } while((new ({}).__lookupGetter__(~*, -0) in *) && 0);");
tryItOut("__count__ = 3/0;");
tryItOut("for(let y in [5,6,7,8]) throw [z1,,];");
tryItOut("L: {/*infloop*/M:for((<x/> &= this); (false); (Error())) {gc() }if(constructor = <><x><y/></x></>) ({a1:1}); else  }");
tryItOut("if() {return @foo;'haha'.split } else  if ((undefined).isPrototypeOf(let (__proto__ = this) <x><y/></x>).watch(\"prop\", let (__noSuchMethod__ = <><x><y/></x></>) <x><y/></x>.isPrototypeOf( /x/g ))) {{const __count__ = <><x><y/></x></>, __noSuchMethod__;gc() }export *; }");
tryItOut("let (__iterator__ = 0x99.throw( \"\" ) |= yield <x><y/></x>\n, []) { gc() }");
tryItOut("try { for(let y in [5,6,7,8]) let(__count__ = prop.constructor) ((function(){gc()})()); } finally { with({}) throw prototype; } ");
tryItOut("with({__parent__: <x/>}){/*for..in*//* nogeckoex bug 349964 */ '' {} }");
tryItOut("/*infloop*/M:for(var [__parent__, ({ __noSuchMethod__: prototype }), , __iterator__, [__noSuchMethod__, __noSuchMethod__, , , ]]\f = (false if ( /x/g )); 1e+81.hasOwnProperty(\"prototype\"); [11,12,13,14].some--) gc()");
tryItOut("switch(+constructor) { case 1: /*for..in*/for(var [__parent__, __iterator__] = <x/> in  '' )  }");
tryItOut("L:switch(0) { default: while((\n__iterator__.watch(\"__iterator__\", <x/>)) && 0){gc()return *::*; }case prototype.constructor: (<><x><y/></x></>);case [,,z1]:  }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in (((new Function(\";\")))(true))\t){(prop); }");
tryItOut("while((([this for (__proto__ in arguments)].eval())) && 0){let <><x><y/></x></>; }");
tryItOut("\n");
tryItOut("/*for..in*/for(__parent__ = [<><x><y/></x></> if (0)] in 033) var prototype;");
tryItOut("/*for..in*/for(let ((prototype)) in ((function (__iterator__) { if((function (constructor, prop)*::*).call([1,,], #1#).propertyIsEnumerable(\"__proto__\")) {if((-0)) {return; } else  if (1.2e3) {throw false;window; } } else  if (((<><x><y/></x></> ? [1] : []).__lookupSetter__(\"__count__\"))) var __count__ = <x><y/></x>, prototype = <y><z/></y>; else {const prototype =  '' , __count__ = undefined\n } } )(true))){break ; }");
tryItOut("while((this for (__count__ in __count__).__defineSetter__(\"__parent__\", function (__iterator__, __iterator__)constructor)) && 0){function  constructor () { return <><x><y/></x></> } return; }");
tryItOut("if((new Boolean(<x/>,  '' )).throw('fafafa'.replace(/a/g, function ([y]) { }))) __iterator__ = prototype = true, constructor else  if (@foo.__defineSetter__(\"prop\", (new Function(\"gc()\")))) throw #1=[#1#]; else {(1 for (x in [])) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ([function ([y]) { }].map(({}).__lookupGetter__)).constructor in new RegExp(<{__iterator__}></{__iterator__}>, #1=({__count__: <><x><y/></x></>}))) export __count__;");
tryItOut("{yield; }");
tryItOut("with({({ prop: prop }): -1})try { ([z1]); } finally { var __iterator__ = case 3: var prop = this;default: export *;break; ; } ");
tryItOut("yield;");
tryItOut("switch(<x/>) { default: export *;break; case (#1=({__count__:  \"\" })()): const __parent__ = [1,,], __proto__ = this;break; ( '' );break;  }");
tryItOut("/*for..in*/for(var constructor = (function(y) { yield y; 0;; yield y; }).throw(undefined\n) in <ccc:ddd>yyy</ccc:ddd>) {L:while((((__proto__ = prop) for (__proto__.prototype in this))) && 0){gc } }");
tryItOut("let ([__proto__, __count__, , __proto__, ] = prototype.__noSuchMethod__ = 0.1, __count__) { (*::*); }");
tryItOut("return;");
tryItOut("/*infloop*/M:for(__proto__ = <x/>; *; \t3.141592653589793) export *;");
tryItOut("/*infloop*/M:do {export *; } while((<x/> ? ({a1:1}) : <y><z/></y>));");
tryItOut("if( \"\"  ? <x><y/></x> :  '' ) /*infloop*/for(prop; ((3/0.propertyIsEnumerable(\"prototype\"))[5.0000000000000000000000.prototype.yoyo(prop < -1)]); (this.zzz.zzz)) gc() else {gc() }");
tryItOut("yield;");
tryItOut("yield;");
tryItOut("/*for..in*/for(let 'fafafa'.replace(/a/g, [1,2,3,4].map) = ++(prop).call([,,z1].isPrototypeOf(), ) in __iterator__.__proto__ = __parent__.prop = (<y><z/></y>\n).valueOf(\"number\")) {; }");
tryItOut("do gc() while((this.__defineSetter__(\"constructor\", (function (__parent__) {  } ).apply)) && 0);");
tryItOut("/*infloop*/L:while((this for each (__noSuchMethod__\t in __parent__)).__lookupGetter__(\"__proto__\")){continue M;\nvar __iterator__ = __iterator__;\n }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("{/*for..in*/for(var prop in  /x/ ) {var prop, __proto__ = <>\t<x><y/></x></>;export __parent__; }continue ; }");
tryItOut("/*for..in*/for(var [prototype, __iterator__] = (__parent__ = new (new Function)(false)) in (prop.__parent__)) {0x99 } const null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__noSuchMethod__) in new function  __noSuchMethod__ () { yield  /x/g  } ()) {M:with({constructor: true ? this : prototype.throw(\r[1,2,3,4].slice)})export constructor;/*infloop*/while(<><x><y/></x></>){throw <x><y/></x>; } }\n{/*infloop*/for(<><\fx><y/></x></>; <x><y/></x>; <x/>) <y><z/></y>;function (prototype, null) { continue M; }  }");
tryItOut("return;");
tryItOut("if(([ '' ].sort(true) in __iterator__.(false))) do {/*for..in*/for(let __parent__ = arguments .. window in constructor) {/*for..in*/for(__noSuchMethod__ in ((<><x><y/></x></>)([z1,,])))export *; } } while((((<y><z/></y>.__proto__) :: prototype < true.hasOwnProperty(\"__noSuchMethod__\"))) && 0); else  if (__count__ = [,,z1] in [#0=({__count__: *})].filter((1 for (x in [])))) /*infloop*/M:do (null).watch const __noSuchMethod__; while((false.__parent__ = (-1) for (prop['__count__'] in <x><y/></x>) for each (__proto__ in  /x/g )));");
tryItOut("constructor");
tryItOut("let (__iterator__ = [11,12,13,14].map) { let __count__ = @foo,  = <y><z/></y>; }");
tryItOut("/*infloop*/ { 8 } for(__count__; new Boolean(); window /= <x><y/></x> if (@foo))  /x/ ");
tryItOut("throw constructor;");
tryItOut("let (prop) { L:switch([1].throw(false)) { default: break; case 6: break; case 0: /*infloop*/for(const prop = false; __iterator__; <><x><y/></x></>) {export __iterator__; }__proto__break;  } }");
tryItOut("if(( for each (prototype in @foo)) <>prototype</> ) {{}gc() } else  if ((1e4)[__iterator__.prop]) (eval).apply");
tryItOut("M:if(<x/>) {var __proto__; } else  if (<x/>.__defineSetter__(\"constructor\", (Math.sin).apply)) do return <><x><y/></x></>; while((<y><z/></y>) && 0);");
tryItOut("throw <><x><y/></x></>; const __count__");
tryItOut("/*for..in*/M:for(var prototype.__proto__ in ((__parent__ = [<><x><y/></x></> if (#3={a:#3#})])((__noSuchMethod__ = <x/>)))){throw function(id) { return id }; }");
tryItOut("/*infloop*/do ; while(__iterator__);");
tryItOut("/*infloop*/for(({__parent__: <x><y/></x> }); __noSuchMethod__); false.yoyo(window)) \tdo {  } while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/for(let __noSuchMethod__; ((yield false)); eval(\" '' \", <x><y/></x>)) __parent__ = @foo;");
tryItOut("switch((__parent__ = __count__)) { default: break;  }");
tryItOut("continue L;");
tryItOut("if(prototype(*::*,  /x/g )) ; else  if (@foo(__parent__)) {yield function(id) { return id };return; }");
tryItOut("if(__count__|=*) continue M; else break ;");
tryItOut("/*for..in*/for(let [ \"\" , __count__] = <><x><y/></x></> in 1.3) (<y><z/></y>);");
tryItOut("L:while((let (__proto__, prop) true) && 0)return;");
tryItOut("/*for..in*/L:for(let [prop, __parent__] = -3/0 in #3={a:#3#}) {eval }\n");
tryItOut("{return 0;export __proto__; }/*infloop*/for(((function (prototype) { yield <y><z/></y> } ()).__defineGetter__(\"constructor\", function  __parent__ (constructor, __parent__) { continue M; } )); ((p={}, (p.z = this)())); <><x><y/></x></>.isPrototypeOf(this)) gc");
tryItOut("let(prop = \nundefined) ((function(){for(let y in []);})());");
tryItOut("let (prop) { gc() }");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __parent__] = <{prototype}> </{prototype}> in (prop = <x><y/></x>)) if( /x/  < this) yield; else  if (window) {{} } else {export prop; }");
