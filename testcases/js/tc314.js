tryItOut("if(<><x//h\n><y/></x></> = ((prototype)[<><x><y/></x></>])) { if ((uneval(( '' )()))) {/*infloop*/for(const constructor;  '' ; <x><\ty/></x>) try { throw <><x><y/></x></>; } finally { return <x><y/></x>; } (__iterator__); }} else \n{export *; }");
tryItOut("gc()");
tryItOut("for(let y in [5,6,7,8]) prototype = __iterator__;");
tryItOut("if(\ntrue ? <x/> : <y><z/></y>) { if (((\n<x/>).__defineSetter__)(<x><y/></x> = (void <y><z/></y>).__lookupGetter__(\"*::*\"), new Exception())) {return;if(this) export prototype; else  if (<y><z/></y>) {{} } else  } else {}}");
tryItOut("with(arguments){this; }");
tryItOut("/*infloop*/for(<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\"); <><x><y/></x></>.__lookupGetter__(\"__iterator__\").valueOf(\"number\");  *= (uneval(1.3))) const constructor;");
tryItOut("switch((<y><z/></y> ? 033 : true)) { default: case 1: break;  }");
tryItOut("\fif(@foo) { if ((this.__defineSetter__(\f\"__iterator__\", @foo))) throw window;} else {gc() }");
tryItOut("with({}) { yield \t<x><y/></x> % @foo; } ");
tryItOut("M:if(constructor.__count__ = __proto__.__noSuchMethod__ setter= (1 for (x in [])))  else  if (export \f__iterator__) {export *; } else {return; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = //h\n(-1) != prototype in constructor = {}.yoyo(#3={a:#3#})) L:switch(([1,2,3,4].map)(new undefined)) { default: break; case 5: case constructor.(null): with({__noSuchMethod__: null}){return this;export *; }break;  }");
tryItOut("{if(false.watch(\"prototype\", function (constructor) { return window } )) { if (1.3\n.propertyIsEnumerable(\"__parent__\")) yield <x><y/></x>; else return *;}throw window; }");
tryItOut("/*for..in*/M:for(const __iterator__ = (new function(q) { return q; }((<y><z/></y>.hasOwnProperty(\"__parent__\")), <x/>)) in 1.3) {__proto__, prop;with(@foo){yield; } }");
tryItOut("if(+__parent__.(--__count__) |= constructor.@foo) { if (prop.yoyo(<><x><y/></x></>)) switch((yield arguments)) { case 1e81: break;  } else /*infloop*/for(gc(); ({a1:1}); function ([y]) { }) ;}");
tryItOut("const constructor;");
tryItOut("/*for..in*/L:for(let in ((({}).__lookupGetter__)(function(id) { return id }))){(*);throw *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in 0) ");
tryItOut("");
tryItOut("switch(<><x><y/></x></> ^= *) { case undefined: yield <x><y/></x>;function (__noSuchMethod__, prototype) { if(false) yield; } break; M:if((++ '' )) { if (<><x><y/></x></> ? * : function ([y]) { }) ;} else break M;break; /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in 3/0) {throw [1];let __proto__ = __noSuchMethod__; }break; (0);break; default: break; const prop, __count__;case ([(*.throw( /x/g ))]): M:if(-<y><z/></y>) { if (-1) export prototype;} else if(@foo) <><x><y/></x></>; else  if (<x><y/></x>)  } const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x><y/></x>) {yield; }");
tryItOut("/*for..in*/L:for(let __count__(this) in <><x><y/></x></>) {with(window)\r; }");
tryItOut("/*infloop*/for(__parent__ = __iterator__ = (prop|=<><x><y/></x></>.watch(\" { return false } \", gc)); new Iterator(yield constructor); (eval(\"yield <y><z/></y>;\", true).__lookupSetter__(\"prop\").__lookupSetter__(\"__parent__\"))) { }\n");
tryItOut("gc()");
tryItOut("if((prop.__parent__)) { if (*) {return  '' ;const __proto__ = *; }} else {}L: {__iterator__ = *::*, __iterator__; }");
tryItOut("default: case 7: /*for..in*/for\f(x::constructor in ((<y><z/></y>)([1]))){; }break; ");
tryItOut("{const __noSuchMethod__, prop; }");
tryItOut("{L:with(<x/>)/a/gi/*infloop*/for(const delete; <x><y/></x> &= window; (yield <><x><y/></x></>)) {export __proto__;\rreturn __proto__; } }");
tryItOut("let (prop =  /x/g ) { throw true; }");
tryItOut("/*for..in*/for([prototype, __parent__] = this.__lookupSetter__(\"__proto__\") in <xxx>{prototype}</xxx>) {/*for..in*/for(let __noSuchMethod__ =  \"\"  in constructor = 3.141592653589793) /*infloop*/while(arguments <<  /x/g )<x><y/></x>; }");
tryItOut("/*for..in*//*\n*/for(let [prop, prop] = __count__ in <><x><y/></x></>) {{}(__proto__); }");
tryItOut("eval(\"__iterator__\", <x/>).__count__ = prototype;");
tryItOut("/*for..in*/for(let (@foo)(<x><y/></x>.(*::*)) in ((eval)([, , constructor] = (@foo)[[[]]])))/*infloop*/while(@foo)yield 3.141592653589793;");
tryItOut(";Function");
tryItOut("/*infloop*/do {continue ; } while([z1] | true);");
tryItOut("/*for..in*/for(var prototype = (new  /* Comment */<y><z/></y>(this.__defineSetter__(\"__proto__\", *::*), *))++ in new window()) constructor = <x/>, prototype = <y><z/></y>");
tryItOut("with(eval(\"gc()\", new (new Function(\"let constructor = 3/0;\"))((({}).__lookupGetter__).call([,,z1], window), 0x99)) && (().@foo.prop)){/*infloop*/\rM:do const prototype, __iterator__; while((#3={a:#3#}.__lookupGetter__(\"constructor\"))); }");
tryItOut("L: while((null) && 0){gc() }\n\n");
tryItOut("M:if(String(((uneval(<><xxx>{prop}</xxx></>))), #0=<x/> /= <x><y/></x>)) {let (({}).__lookupGetter__(), __count__ = *::*) { gc() /x/g ; }/*infloop*/do throw <x/>; while(0x99); }");
tryItOut("/*infloop*/for(((*::*.prototype)--); [,,z1]; new Array(this.zzz.zzz)) {const __proto__ =  /x/g , __count__; }");
tryItOut("try { return function ([({ __count__: constructor, constructor: __proto__ }), ], ({ prototype: constructor }))(<x><y/></x>.propertyIsEnumerable(\"__parent__\")).hasOwnProperty(\"constructor\"); } finally { yield <><x><y/></x></>; } ");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in (('haha'.split)('fafafa'.replace(/a/g, ({}).hasOwnProperty))))throw <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__(prototype) in (true :: (return;)())) {;\fif(<x><y/></x>)  \"\" ; else {export *; } }");
tryItOut("var __proto__ = <x><y/></x>, __iterator__;");
tryItOut("with(undefined)throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [prototype, prototype] = __iterator__.__parent__ = ({ getter: [] }) = (function ([y]) { })().yoyo(<x/>) in (let (__noSuchMethod__ = #1# & __iterator__, __parent__ = ({}))  /x/ .__defineGetter__(\"__parent__\", [1,2,3,4].map))) (*::*);");
tryItOut("do return; while(((@foo & @foo)) && 0);");
tryItOut("{gc() }");
tryItOut("let(__noSuchMethod__ =  /x/ , __parent__ = window) { for(let y in [5,6,7,8]) (<x><y/></x>);");
tryItOut("/*infloop*/while(this.unwatch(\"__proto__\") for each (__noSuchMethod__ in (new <y><z/></y>))){throw 3.141592653589793; }");
tryItOut("gc()");
tryItOut("while((new ((__noSuchMethod__).__defineSetter__)( /x/ .@foo)) && 0)if([15,16,17,18].map(function(y) { yield y; constructor = <x/>; yield y; }\t, @foo)) try { undefined } finally { ( '' ); }  else  if \t(({__parent__: null, prototype setter: function (__parent__, prototype) { yield [,,] }  })) ;");
tryItOut("var prototype;\nreturn;\n");
tryItOut("/*for..in*/L:for(const __parent__ in (((().watch).call)(@foo.__parent__))){return; }");
tryItOut("/*for..in*/M:for(let prop.constructor in -0) {yield;gc() }");
tryItOut("return\nlet prop");
tryItOut("if(eval(\"\", *::*)) let \r__count__ = (-1); else  if (({__parent__:  ''  for (__iterator__ in undefined)/*\n*/, __count__: ({constructor getter: Function,  get __noSuchMethod__ __iterator__ () { {} }  }) })) const __proto__ = this; else {return;export prototype; }");
tryItOut("if(1e4.__count__ = 0x99) {this }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in (__parent__ = undefined)) {/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (window.unwatch(\"constructor\"))) export __count__; }");
tryItOut("const prototype, __noSuchMethod__;\nreturn;\n");
tryItOut("L: {var __iterator__, constructor;/*infloop*/while(null .@x:: <><x><y/></x></>)(<><x><y/></x></>); }L:if(3) { if (__parent__ = this) return 1.2e3; else return;}yield (<><x><y/></x></>)( '' );");
tryItOut("if((__parent__.__noSuchMethod__ getter= ( /x/g ).__defineSetter__)(#3={a:#3#} &= @foo, @foo).__defineSetter__(\"prototype\", Function)) { if (((*::*)())) {; } else {if(new Function()) {yield #3={a:#3#}; }({a1:1}); }}");
tryItOut("__proto__ = constructor;");
tryItOut("yield __iterator__\n");
tryItOut("L: {export *; }");
tryItOut("/*for..in*/for(const \t[constructor, prop] = ({}) in  /x/ ) {yield *;<x/>; }");
tryItOut("throw StopIteration;");
tryItOut("const constructor;\nswitch(({prop: (eval(\"*::*\", <x><y/></x>))})) { case 9: case (-1).watch(\"__noSuchMethod__\", function () { yield <x><y/></x> } ): break; default: case 7: {}case null + #1=[#1#]:  }\n\nconst constructor = 5.0000000000000000000000.hasOwnProperty(\"__count__\");");
tryItOut("M:do yield <x><y/></x>; while((__count__ = (yield <x><y/></x>)) && 0);");
tryItOut("if((<y><z/></y>.*)) { if ((constructor.__proto__)) {throw __parent__, prototype;return <><x><y/></x></>; } else {export prototype;continue ; }}");
tryItOut("{; }");
tryItOut("let(prop = new ()(), __parent__) ((function(){__parent__ = __iterator__;})());");
tryItOut("/*infloop*/do {( /x/g );const <><x><y/></x></>; } while(<x><y/></x>);");
tryItOut("let (__count__) { /*for..in*/for(let __parent__ in ((<><x><y/></x></>)((true << <x><y/></x>)))){/*infloop*/for(let prototype = .2; __noSuchMethod__; *) break ; } }");
tryItOut("with({}) { with({}) { throw constructor; }  } ");
tryItOut("if( /x/g  instanceof this) { if (<x/>) let Function;} else {if(prototype) gc() else  if (<><x><y/></x></>) export prop; else yield; }");
tryItOut("new eval(<x/>, true), constructor = [] && <x><y/></x>");
tryItOut("/*infloop*/for(const ({ __iterator__: [[({ prop: (5.0000000000000000000000 <<= <x><y/></x>)(()), __parent__: [, ({ <{__count__}><ccc:ddd> </ccc:ddd></{__count__}>: __noSuchMethod__, <><x><y/></x></> || *::*: ({ __parent__: __parent__ }) })] }), [], , [], ], , ], constructor: [, , , \n] }) = \n((-1) >>= window) != typeof * .. false >>>=null; ('fafafa'.replace(/a/g, undefined)) for (<y><z/></y>.function::let in <x/>) if (function ([y]) { })((function ([y]) { })() / (this.zzz.zzz)); (eval(\"[15,16,17,18].some((new Function(\\\"each;\\\")), [])\", this\t for each (prototype in <x><y/></x>)))) {M:switch(<x><y/></x>.(null)) { default: /*infloop*/for(__parent__ = false; __iterator__;  /x/g ) {let __iterator__ = <><x><y\f/></x></>;yield __noSuchMethod__; }break; case 8: export constructor; } }");
tryItOut("return;");
tryItOut("let (__noSuchMethod__ = <x><y/></x>) { (*::*); }");
tryItOut("{{}function(y) { yield y; throw [];; yield y; } }");
tryItOut("with({}) try { const prototype; } catch(__noSuchMethod__ if (function(){__iterator__;})()) { throw <x><y/></x>; } finally { __iterator__ = <x><y/></x>; } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>.__defineGetter__(\"__parent__\", (1 for (x in [])))) ;");
tryItOut("\fyield (window.__lookupGetter__(\"prop\"));");
tryItOut("let (__parent__) { /*for..in*/for(var [__noSuchMethod__, __proto__] = (typeof <><x><y/></x></>) in __proto__) <!-- }");
tryItOut("M:with(function ([y]) { }){([z1,,]); }");
tryItOut("L:if(yield.__lookupSetter__(\"constructor\")) { if (__count__.__iterator__ = <><x><y/></x>\n</> | prototype.__count__) if((+<x/>)) {export *; } else {[1,2,3,4].slicereturn; } else const __parent__, prototype;}");
tryItOut("throw StopIteration;");
tryItOut("if( \"\" ) { if (<><x><y/></x></>) {; } else {this; }}");
tryItOut("{return \n({__proto__: <x><y/></x>,  get prop __noSuchMethod__ () { ((new Function(\"return undefined;\"))).apply }  }); }");
tryItOut("/*infloop*/L:while(window)");
tryItOut("/*for..in*/for(var __parent__ in (( '' )((__proto__ = __parent__))))do {var __iterator__ = undefined, function::__iterator__;function::prop; } while((@foo) && 0);");
tryItOut("L: {const constructor =  '' \n }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = <>(let __parent__, __count__)\f</> in *) {gc()/*infloop*/L:while(__count__ = 1e-81)continue ; }");
tryItOut("__proto__");
tryItOut("/*infloop*/for(let __proto__; eval(); ({__parent__: (__proto__ = #1=[#1#]) })) if(each) { if (<x/>) export __parent__;} else return this;");
tryItOut("yield;return <><x><y/></x></>;");
tryItOut("if((-1)) export __proto__; else  if (<x><y/></x>) {<x><y/></x\f>: falsethrow <x><y/></x>; }");
tryItOut("M:if(false--) { if ((__iterator__.__proto__ setter= Math.pow)) M:while((function(id) { return id }) && 0){; } else export *;}");
tryItOut("/*infloop*/M:while((__count__ = 3/0)){yield; }");
tryItOut("/*for..in*/for([__iterator__, __parent__] = prototype.@foo.__lookupGetter__(\"function::__noSuchMethod__\") in __proto__) {prototype, constructor; }");
tryItOut("M:if(this) {switch(false) { case 0: /*infloop*/for(__proto__ = window; <x><y/></x>; this) {{} }case [z1,,]: break; default: break; break; break; case 4: 'haha'.split } } else ;");
tryItOut("yield this;");
tryItOut("return *.__iterator__ << (({<x/> setter: <><x><y/></x></> }) ? *.__count__ : null.valueOf(\"number\"));");
tryItOut("L\n: L:if(__count__) { if ((constructor | <x><y/></x>)) throw  '' ;} else return;");
tryItOut("var __proto__ = [,,];\nwith(this.__defineGetter__(\"constructor\", function  __count__ (prototype) { yield null } )){const __noSuchMethod__; }\n");
tryItOut("/*for..in*/for(let prototype in ((function ()(constructor.constructor = eval(\" /x/ (@foo, <y><z/></y>)\", (String( '' ))) for each (prop in [z1]))())(__parent__ = <><x><y/></x></>.watch(\"__noSuchMethod__\", (*)/*\n*/.watch).__lookupSetter__(\"__iterator__\").prop))){<y><z/></y>;/*for..in*/for(let __count__ in ((Math.pow)(this .@*:: <><x><y/></x></>))){switch(<y><z/></y>) { default:  }gc() } }");
tryItOut("if(<y><z/></y>++.isPrototypeOf(new ({ get __noSuchMethod__(__iterator__, constructor)<x><y/></x> })(<y><z/></y> && window, new (<x/>)()))) L:if(@foo([,,], window)) return; else  if (new (([11,12,13,14].filter).__noSuchMethod__ = (<x><y/></x>.(3/0))).\f__defineSetter__((@foo.*)).*) {yield (-0);/*infloop*/for(<x/>.__defineSetter__(\"__noSuchMethod__\", /a/gi); <x/>.__lookupSetter__(\"__count__\");  /* Comment */ /x/g ) {L: return constructor;\t } }");
tryItOut("L: /*\n*/gc()");
tryItOut("{{return  /x/ ; } }");
tryItOut("/*infloop*/while(((function ([y]) { } % <x><y/></x>) .@x:: __noSuchMethod__ =  '' )){false; }");
tryItOut("yield");
tryItOut("for(let y in []);");
tryItOut("L:with(function(q) { return q; }){; }");
tryItOut("/*infloop*/for(let __proto__ = <><x><y/></x></>; *::*; @foo) __proto__ = <x><y/></x>;");
tryItOut("switch(__count__.__parent__ setter= function (__proto__) { return [,,] instanceof <x><y/></x> } ) { default: if(5.0000000000000000000000 ? #1=[#1#] : window.propertyIsEnumerable(\"__noSuchMethod__\")) {I } else  if ((prop = __parent__)) <><x><y/></x></>case __noSuchMethod__ =  \"\"  @ --null.@foo: case 5: break; case #2=<x/>: export __iterator__; }");
tryItOut("/*infloop*/for(let ({ __parent__: constructor, __count__: __parent__ }) = <x><y/></x>--;  '' ; *::*) ;\n;\n");
tryItOut("if(( /* Comment */(([15,16,17,18].some(*::*, ((eval).call(@foo, gc(), __noSuchMethod__))))))) {{export __noSuchMethod__;export prop; }return  /x/g ; }");
tryItOut("with({__proto__: \twindow >>>=new 'haha'.split(undefined)}){yield;let constructor = window, __iterator__; }");
tryItOut("/*infloop*/do {{(*::*);throw @foo; }return; } while(__proto__);");
tryItOut("if((p={}, (p.z = this)())) with(.2)__parent__");
tryItOut("let(set, __iterator__) ((function(){let(constructor, constructor = prop = ( /* Comment */*)) { ;})());");
tryItOut("");
tryItOut("{M:switch(__iterator__ .. <><x><y/></x></>) { default: yieldcase constructor.(undefined): ; }var prop = #1=[#1#].__count__; }");
tryItOut("switch((@foo ^ this)) { default:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in (<y><z/></y> if (window))) return");
tryItOut("let(prop = <x/>, __iterator__) { ;");
tryItOut("return;");
tryItOut("/*infloop*/while(eval(\"break ;\", prop)){gc()M:if(__iterator__ = __parent__) export *; else {const __iterator__; } }");
tryItOut("switch(eval(\"__noSuchMethod__, __proto__ = [[1]];\", <x><y/></x>) > undefined if ()) { case eval(\"(-0)\", *) &= (p={}, (p.z =  \"\" .throw(<><x><y/></x></>))()): break; case 4: while((<><x><y/></x></>) && 0){break ;gc() } const prop;break; case function::prop.__parent__ = this: let __noSuchMethod__ = this;;break;  }");
tryItOut("switch(<zzz>(@foo++)</zzz>) { case 0: export *;case __iterator__ = [(-1)]: /*infloop*/do /*for..in*/for(var yield = constructor in 5.0000000000000000000000) {yield;{} } while(__iterator__.propertyIsEnumerable(\"__parent__\"));break; default: {}case 9: break; case 4:  }");
tryItOut("continue ;export *;\nyield;\n");
tryItOut("M:while((<x><y/></x>.yoyo(this)) && 0)const prop = false\n");
tryItOut("throw <x/>;;");
tryItOut("/*infloop*/for(<x><y/></x>.throw(@foo) != 1.3.prop = [([ /x/ ])]; (((*.__lookupSetter__(\"constructor\")) += __proto__ = (function ([y]) { })()).__parent__); (eval(\"<><x><y/></x></>\",  \"\" )).*) __iterator__ = (yield yield [,,z1]), __count__ = *;");
tryItOut("export *\n");
tryItOut("yield <x><y/></x>\nexport __proto__;");
tryItOut("");
tryItOut("if((\n /x/g ).__iterator__) {yield;function(y) { yield y; return <><x><y/></x></>;; yield y; } }");
tryItOut("with({}) yield (new ([[1]])(@foo, constructor));if(false) { if (({a2:z2})) export *;} else yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(const prop = ([11,12,13,14].some) in @foo.__count__.__parent__) {{} }");
tryItOut("{return <x><y/></x>; }");
tryItOut("M:with({__iterator__: (__parent__ = [this].filter(new Function)).__lookupSetter__(\"__iterator__\") === (* ? <x><y/></x> : <><x><y/></x></>)((prototype.each setter=  '' )) = __proto__}){yield\nvar constructor = <x><y/></x>, function::prototype = <x/>; }");
tryItOut("M:if(new ((window)(window)-=((function(id) { return id })[<><x><y/></x></>]))().__lookupGetter__(\"prop\")) {throw  \"\" ;gc() } else  if ((<x/> ? 3/0 : __parent__ ^= *::* == (function ([y]) { })()).eval(this.throw( /x/g ))) {const prop = prototype;{\f}\n } else {(<x><y/></x>);return; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ((Math.pow)(1e4)))var __proto__ = <><x><y/></x></>;");
tryItOut("let (__count__, __parent__) { export constructor; }");
tryItOut("do {throw  \"\" ; } while((((yield (~({constructor getter: gc }))))) && 0);");
tryItOut("throw 'fafafa'.replace(/a/g, <x/>) * [[11,12,13,14].map];");
tryItOut("/*infloop*/while(this){}");
tryItOut("L: {(<><x><y/></x></>); }");
tryItOut("{{}yield  \"\" ; }");
tryItOut("L:while(((((__iterator__.__parent__).yoyo(3.__parent__) if (new ([@foo for each (__noSuchMethod__ in <x/>)])(this.zzz.zzz))).__proto__)) && 0){/*infloop*/do {gc()var __noSuchMethod__ = [[1]]; } while([11,12,13,14].map);; }");
tryItOut("gc()");
tryItOut("/*infloop*/while(<x><y/></x>++){__proto__;[z1,,] }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let constructor = new #1=[constructor = <x><y/></x>](constructor\t.__iterator__ = [,].__count__, __iterator__.__count__); ((prototype = <><x><y/></x></>).throw(((<x><y/></x>.__lookupSetter__(\"constructor\")) ? ((function(y) { yield y; {}; yield y; })(*::*, true)) : undefined.propertyIsEnumerable(\"prototype\")))); (((prototype.__iterator__).__defineSetter__)(<y><z/></y>))) yield;");
tryItOut("/*infloop*/do {gc()export *; } while(__iterator__(__iterator__.(<x/>)) =  '' [<x><y/></x>]);");
tryItOut("prototype, function::__parent__ = true;\nvar prototype = true, prototype = constructor;\n");
tryItOut("/*for..in*/for(const __parent__ in [1]) {gc() }");
tryItOut("L: constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each\t(var prop in (window[<><x><y/></x></>])) {const constructor, prototype = function(id) { return id };export *; }");
tryItOut("return 1.3;");
tryItOut("with({}) { return prototype.constructor getter= (1 for (x in [])); }  const __count__;");
tryItOut("/*for..in*/for(prototype = \n@foo in this) {yield <x><y/></x>; }");
tryItOut("let(__count__) { let constructor = undefined;");
tryItOut("with(false--){with(<><x><y/></x></>)export constructor; }");
tryItOut("return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = 0.1 in (<x\t><y/></x>.throw(#1#))) {/*for..in*/for(const __proto__ in <x><y/></x>) {export __parent__; }/*for..in*/for(var __iterator__ = this in 3.141592653589793) yield 1.2e3; }");
tryItOut("let (constructor =  /x/g ) { with({}) { yield; }  }");
tryItOut("if(eval(\"<x><y/></x>\", (prototype))) { if (\n((<x><y/></x>).call(window, <><x><y/></x></>) for (window in __noSuchMethod__) for each (constructor in 0/0) for each (prop in [,,]))) {L: yield; }} else {case 3: default: /*infloop*/L:for(0; __count__ = <><x><y/></x></>; (Object(<x><y/></x>))) {yield;([z1,,]); } }");
tryItOut("[1];");
tryItOut("do return; while((let (function::constructor) window) && 0);");
tryItOut("/*infloop*/for(let __count__; 1e4; prop) export *;");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("with(null %= true)while((<x><y/></x>) && 0)(false)\n;");
tryItOut("/*infloop*/for(const __noSuchMethod__; undefined; [,]) export *;");
tryItOut("/*for..in*/for(let [set, prop] = true in <x><y/></x>) {return;var prototype = #3={a:#3#}, __parent__ = <x><y/></x>; }");
tryItOut("@foo\nexport *;");
tryItOut("{/*infloop*/while(new (return;).__defineSetter__()) const prop;{if(false) { if (3.141592653589793)  else prototype}gc() } }");
tryItOut("yield __proto__;");
tryItOut("/*for..in*/for(const constructor['__iterator__'] in <><x><y/></x></>) L:if([[]]) { if (<x><y/></x>) (1 for (x in [])) else {gc() }}");
tryItOut("/*infloop*/M:for(__iterator__.(* >>= prototype); (([1,2,3,4].map)(false.__parent__)); undefined >>> 1.2e3) var constructor = window, __count__;");
tryItOut("4.;\ngc()\n");
tryItOut("return;");
tryItOut("M:if(<><x><y/></x></>) { if (this) \f{let __proto__ = ({});throw __count__; }} else let __proto__ = null, __count__ = <y><z/></y>;");
tryItOut("L:if(*::*) throw prop; else  if (({})) return; else {throw  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in *::*) {throw (let (__iterator__)  /x/g );if(void __iterator__ = window) { if ((({ __noSuchMethod__: prop }) = eval(\"[ /x/g ].map((new Function(\\\"1e-81;\\\")))\", (yield @foo))).eval((<x><y/></x>\n) << new (__noSuchMethod__)(;))) {return constructor;function  prototype (prototype) { gc() }  }} else {break ;this } }");
tryItOut("/*infloop*/for(__iterator__; ((function (__iterator__, prop) { yield <><x><y/></x></> } ).call(<x><y/></x>, ))([<>x::__proto__</>], ([ /x/  if ({})])); new (this)().__lookupSetter__(\"__iterator__\")) {yield <y><z/></y>;throw this; }");
tryItOut("if(new Exception(<x/>, <x><y/></x>)) {gc()yield; }");
tryItOut("if(constructor = prototype)  else  if ([[1]]) return;");
tryItOut("/*for..in*/L:for(let [prop, constructor] = this.__defineSetter__(\"__count__\", function (constructor) { return <><x><y/></x></> } ) in @foo) {; }throw  /x/ ;");
tryItOut("Function");
tryItOut("throw  '' \nL:if(__noSuchMethod__) {; }");
tryItOut("L:if(eval(\"window ^= false\", __iterator__.eval(new Error(prop, [z1])))) { if (( /x/g )) \t\f{continue L;\f{}; }} else L: {throw <y><z/></y>\ngc() }");
tryItOut("do /*infloop*/for(<y><z/></y> ? <><x><y/></x></> : <x><y/></x>; {}[-3/0] && window;; (function ([y]) { })()) {if([[]]) ; else  if (#1=[#1#]) {let __iterator__; } } while((+prototype = __noSuchMethod__ getter: true\n) && 0);");
tryItOut("for(let y in [5,6,7,8]) let(({ __proto__: window.__proto__ }) = (function (({ __parent__: __count__ }), __proto__) { yield <y><z/></y> } )((<x><y/></x> for (prototype in  /x/ )), @foo.valueOf(\"number\")), __parent__ = <y><z/></y>) { let(__count__) ((function(){with({}) return <y><z/></y>.eval( '' );})());");
tryItOut("if(constructor\t.constructor.eval([15,16,17,18].map(Math.sin, (this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__))))) {continue ; } else {__iterator__ = return [,,z1];, __count__ = [z1,,];let  switch , __parent__; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("{with(this){;(/*\n*/); }let prototype, __iterator__; }");
tryItOut("export *;\n__proto__;\n");
