tryItOut("/*for..in*/for(const __iterator__ = \n__count__: <x><y/></x> in <><x><y/></x></>) {export prop;export __parent__; }");
tryItOut(" { return (<x><y/></x>).call((*::*.__lookupGetter__(\"constructor\")), ).valueOf(\"number\") &=  } __noSuchMethod__ = __proto__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = (([*::*(@foo).watch])[((<x><y/></x>(@foo, <><x><y/></x></>)) &= (eval(\"export *;\", (eval(\"((1 for (x in []))).call(<><x><y/></x></>, )\", (this.__defineSetter__(\"__iterator__\", /a/gi)))))))]).__proto__ in \n /x/ .__lookupSetter__(\"__proto__\")) L: var __noSuchMethod__;");
tryItOut("L: {{} }");
tryItOut("yield (this.zzz.zzz);");
tryItOut("/*for..in*/for(const __count__ in window) {const __parent__;const prototype, __count__ = true; }");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) throw __iterator__;");
tryItOut("prototype, __noSuchMethod__prop, __count__;");
tryItOut("/*infloop*/L:for(const constructor;  /x/ ; this) /*infloop*/for(const __proto__ = ((yield return [,];)--.__defineSetter__(\"__iterator__\", new Function)); (--@foo.__lookupGetter__(\"<employee id=\\\"1\\\"><name>Joe</name><age>20</age></employee>\")) &=   ^ __count__; (prototype = <><x><y/></x></>)) {if(prop.(*)) {\r if ([,,]) {var prototype = <><x><y/></x></>; }} else  }");
tryItOut("/*for..in*/for(__noSuchMethod__ in __noSuchMethod__ = <y><z/></y>) {export *; }");
tryItOut("");
tryItOut("/*infloop*/for(let __count__ = [* for each (prototype in <><x><y/></x></>)]; @foo\t; prototype = this) {let x::__iterator__; }");
tryItOut("M:with( '' .constructor = -0 ? ([null]) : ((({a2:z2}) ? null :  \"\" ))([11,12,13,14].map, -0)){let ([] = 'fafafa'.replace(/a/g, eval), __count__) { yield 0/0; }[1,,] }");
tryItOut("{yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((033.isPrototypeOf(true)).@foo.__iterator__ in --(--(constructor.@*)) == prototype = false) return (<y><z/></y> == *::* for (__iterator__ in true));");
tryItOut("if(<x/>) { if (constructor) {return arguments;break M; } else case 0: <y><z/></y>break; }");
tryItOut("let (__parent__) { yield; }");
tryItOut("while((<x/>) && 0)let constructor;");
tryItOut("constructor = <x><y/></x>\n");
tryItOut("if(<x/>.__count__) yield undefined;; else  if (__proto__ = #1=[#1#]) const __count__;");
tryItOut("M:with(this)export *;");
tryItOut("/*infloop*/for(let prototype; <><x><y/></x></> / true %= (eval(\"true.isPrototypeOf(__noSuchMethod__)\", break L))\t; (\n(yield <><x><y/></x></>))[1e-81]) {__parent__, prototype = <y><z/></y>; }\n/*infloop*/for(let __proto__ = ({constructor: delete window }).prop = ((x'>null<y/*/</> !== .2).__noSuchMethod__ = let (__proto__ = <><x><y/></x></>) __count__); eval(\"prop\", ({constructor: ({prop: <x/> })})).prop = window ^= __parent__; (({__count__ getter: 0.1.valueOf(\"number\"), __iterator__: __proto__ =  '' .throw(++this) }) * [<x><y/></x> for (__parent__ in )])) { { return [prototype, , ] = ({ prop: prototype, __parent__: __iterator__ }) }  }");
tryItOut("if(\t<y><z/></y>) {M:if((<x><y/></x>)) {export __proto__; } else  if (*::*.propertyIsEnumerable(\"__count__\")) {throw this;return <y><z/></y>; } } else  if (__noSuchMethod__ = window) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in 1e81) return ; else {var __parent__;prop }");
tryItOut("\f<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(-0).__iterator__ = prop;");
tryItOut("this.zzz.zzz;");
tryItOut("if(new <x/>()) {yield;( \"\" ); } else __noSuchMethod__ = __parent__\n");
tryItOut("/*for..in*/for(var function::constructor.__noSuchMethod__ in (((1 for (x in [])))((uneval(delete = true))))){var __iterator__ = this;with(new Iterator([[1]]))gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__proto__) in this.zzz.zzz) {throw <><x><y/></x></>;{}\n\n }");
tryItOut("if((*::*++)) {/*for..in*/for(const [/*\n*/prototype, __count__] = -1 in arguments) {/a/gi }gc() }");
tryItOut("let ([prop, ], prototype) { this.zzz.zzz; }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, gc);  /x/g  >> #3={a:#3#}; new ((<><x><y/></x></> ::  /x/g ))()) {;(<x><y/></x>); }");
tryItOut("/*infloop*/while(window >> window)export *;");
tryItOut("L: {/*for..in*/L:for(const prop in (('haha'.split)((-0)))){yield <y><z/></y>;export constructor; } }");
tryItOut("if([[, , ], ({ __noSuchMethod__: ({ prop: __proto__, prop: constructor }) })] = [prototype, ({ __iterator__: constructor, __iterator__: __proto__ }), prop, , ]) { if (((([15,16,17,18].filter(Math.pow, <y><z/></y>)) if (*::*)))) let \f(constructor) { var __count__ = [1,,]; } else if(new -1(<><x><y/></x></>)) { if (((p={}, (p.z = <x/>)()))) {return; }} else return;}");
tryItOut("{export __noSuchMethod__; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [,].prototype) {(<x><y/></x>); }");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = 1.3 ? <x><y/></x> : -3/0 += ({ get __noSuchMethod__ prop (__proto__) { export constructor; } , prop: <><x><y/></x></> }) in 033) return *::*;");
tryItOut("/*for..in*/for(const [__count__, __proto__] =  in __count__.prop = undefined) /*for..in*/for(__count__ in (('haha'.split)(__parent__.([1,,]))))switch( \"\" ) { default: let __count__ = <x><y/></x>, __parent__ = ; }");
tryItOut("yield;{}");
tryItOut("/*infloop*/M:for(const prototype; (.__parent__ = (this.__defineGetter__(\"__count__\", false)).propertyIsEnumerable(\"__noSuchMethod__\").__parent__); (uneval(this))\n) throw StopIteration;");
tryItOut("with(* >>= <><x><y/></x></>)[1,,]");
tryItOut("if(prop) {return;if((__iterator__ + #3={a:#3#})) {yield; } else  if (eval(\"prop = @foo;\", <><x><y/></x></>))  } else with((this.zzz.zzz))(function(y) { yield y; ;; yield y; }).call");
tryItOut("if([z1,,]) { if (033.__lookupSetter__(\"prototype\") .@ this.zzz.zzz) export __iterator__; else window}");
tryItOut("/*infloop*/L:do return; while((new  /x/ ()) && __parent__.constructor =  /x/ );");
tryItOut("with([z1,,]);");
tryItOut("/*infloop*/for((new (function(y) { yield y; var prop;; yield y; })().unwatch(\"__count__\")); __count__ = this; yyy) {/*infloop*/while(1e+81)gc()export *; }");
tryItOut("L: const __iterator__, constructor = <x><y/></x>;");
tryItOut("L: {/*infloop*/M:for(var prop; (<x><y/></x>)(); new Number(return window;, null)) {M:with({__proto__: @foo})(<><x><y/></x></>);throw <x><y/></x>; } }");
tryItOut("M:if(1e+81) return prop; else  if ((({constructor: [window].map([1,2,3,4].map)++, __noSuchMethod__ setter:  }))) {let __proto__: [,], __proto__; const constructor; } else {M:switch(<><x><y/></x></>) { default: break; case 0: gc()break; gc() } }");
tryItOut("/*for..in*/for(var __parent__ in (this.zzz.zzz)) {}");
tryItOut("M:do export *; while((((({constructor setter: Math.pow })))[ /* Comment */<x/>]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in ([11,12,13,14].map)) throw __parent__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __noSuchMethod__ = prototype++ in <x><y/></x>.@foo) {gc() }");
tryItOut("/*for..in*/L:for(let __count__ in ((window if (<x/>)))) {{} }");
tryItOut("/*infloop*/M:for(const ({ function::__parent__: __count__, __proto__: ({ getter: [prototype], __noSuchMethod__: ({ prototype:  /* Comment */<x/>, undefined.__count__: ({ __proto__: __parent__, __iterator__: __proto__ }) }) }) }) = ({prop: * << false}).__lookupSetter__(\"constructor\"); (prototype).call((\n(false)), <></>.([15,16,17,18].filter(function (prop) /x/ , 4.))); [window]) {<><x><y/></x><//h\n/>[prototype].let }");
tryItOut("/*for..in*/for(var [__count__, __proto__] =  /x/  %= @foo in  '' ) if(<x><y/></x>) return; else  if (\t<x><y/>//h\n</x>) gc() else __count__");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const __count__ = (function ([y]) { })();  \"\" ; <y><z/></y>) export __noSuchMethod__;");
tryItOut("do if(__count__.__count__ = <\t>__noSuchMethod__, __count__ = function ([y]) { }</>) { if (arguments) {window; }} else gc() while((((null).watch).call(\t(eval(\"<x><y/></x>\", 0).*), <y><z/></y>.hasOwnProperty(\"__iterator__\").eval((<><x><y/></x></>.valueOf(\"number\") <=  /x/g )))) && 0);");
tryItOut(";");
tryItOut("M:if((({}).__lookupGetter__)) function(q) { return q; } else ;");
tryItOut("return; const __parent__;");
tryItOut("if(({__parent__ setter: gc })) ({ __count__: constructor })");
tryItOut("M:with({__parent__: (<x><y/></x> = false.isPrototypeOf(prototype)).__lookupGetter__(\"__iterator__\")}){(this); }");
tryItOut("let __noSuchMethod__ = <x><y/></x>;yield window;");
tryItOut("with({}) { return; } ");
tryItOut("M:if( /x/g ) throw this; else {gc()(<><x\f><y/></x\t></>); }");
tryItOut("if(new String()) { if ((new (__noSuchMethod__ = <y><z/></y>)((void <x><y/></x>), <><x><y/></x></>))) return #3={a:#3#};} else return (-0);");
tryItOut("(1 for (x in []))");
tryItOut("L: {return <y><z/></y>; }");
tryItOut("do continue ; while((true == <x><y/></x>.unwatch(\"__parent__\")) && 0);");
tryItOut("if(<{__parent__}><bbb xmlns=\"<x><y/></x>\">yyy</bbb><!--yy--></{__parent__}>.([,,z1])) { if (((each = 0).valueOf(\"number\"))) gc() else ;}");
tryItOut("do *; while((eval(\"<><!--yy--></>\", constructor)) && 0);");
tryItOut("return;");
tryItOut("if(@foo) {gc() } else constructor =  \"\" ;");
tryItOut("\n");
tryItOut("L:if( /x/g ) {let (__proto__, __noSuchMethod__) { gc() }while((prop = (this.__defineGetter__(\"prop\",  /x/g ))) && 0){M:if([window]) {({}).hasOwnProperty } else var prototype =  /x/g , prop; } }");
tryItOut("{ }");
tryItOut("{/*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].map)(function(id) { return id }\f))){yield [,,]; } }");
tryItOut("const __proto__ = <y><z/></y>;");
tryItOut("if(new (*::*)({}, *)) { if (1e4 |= window)  else {return; }}");
tryItOut("<> <\t/>");
tryItOut("if(new <x><y/></x>( '' , <y><z/></y>)) x::constructor = __proto__; else  if (<><xxx {prototype}={<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")} /></>) {/*infloop*/for(const __proto__ =  '' , __iterator__ = <><x><y/></x></>; <x><y/></x> ? <x><y/></x> : *::*; 'fafafa'.replace(/a/g, this)) {var prototype, __parent__ =  /x/ ;return this; }\fif( /* Comment */<y><z/></y>) { if (()) yield;} else return; } else {export constructor; }");
tryItOut("prop = prototype;");
tryItOut("let (prop) { with({__iterator__: __proto__}){(<y><z/></y>); } }");
tryItOut("/*infloop*/L:for(function::prop.prop; ({__count__: 1e81 }); true) if(<><x><y/></x></>) { if ( '' ) (*).__defineSetter__} else var prototype\n");
tryItOut("<x><y/></x>\ncontinue ;\n");
tryItOut("/*for..in*/for(const prop in ((( \"\" ).call)(window)))yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in __proto__) \f{function(q) { return q; }(#1#).__defineSetter__ }");
tryItOut("throw function ([y]) { };");
tryItOut("return;");
tryItOut("with({prop: ([({ __noSuchMethod__: [, , [__count__, ], [], [__noSuchMethod__, constructor, __count__]], ({ __parent__: ({ prototype: __parent__ }), __noSuchMethod__: __count__ }): prototype }), ({ prop: [, prop, prototype, ({ constructor: prop }), ] }), constructor, prototype, ] = [,,z1])})~");
tryItOut("/*infloop*/for(var __iterator__; (p={}, (p.z = true)()); <x><y/></x>.watch(\"__parent__\", (1 for (x in [])))) {return constructor; }");
tryItOut("L:if(prop) {(5.0000000000000000000000);yield  /x/g ; }");
tryItOut("try { yield *; } finally { return; } ");
tryItOut("/*for..in*/for(const __count__ = [1] in <x><y/></x>) { for (prototype in [])break L; }");
tryItOut("return false\n");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", function  __count__ ()__count__))) {yield;export *; }");
tryItOut("constructor: ({a1:1})");
tryItOut("L:while((this.__lookupGetter__(\"__iterator__\")) && 0){(({__iterator__: true }));if(__count__) let prototype = false; else  if ((function ()1e+81(null))) {return;([[]]); } }");
tryItOut("let (__count__, __parent__) { ; }");
tryItOut("( /* Comment */(<x/>));");
tryItOut("/*for..in*/for(let prototype = <> </> in prop) {export __parent__;let prototype; }");
tryItOut("prop.__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(constructor in  \"\" ) [,,z1];");
tryItOut("let (__iterator__, __proto__ = ((yield  /x/ )).isPrototypeOf((new (gc)(( /x/  ? this' : <><x><y/></x></>)[(-0) ? ({a2:z2}) : <x><y/></x>])))) { export *; }");
tryItOut("switch(window) { default: break; case 7: break; case 8: ;case 2: break; case 7: return;break; case 4: case 0: export __count__;case  \"\" : const __parent__ =  /x/g , __noSuchMethod__;case 1: case <><x><y/></x></\t>: return;case 9: yield *;break; case prop:  }");
tryItOut("/*for..in*/for([prop, __iterator__] = (@foo)(function(id) { return id }, __count__) in __proto__ = window.@*) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.prop in 1e-81) __proto__, __parent__;");
tryItOut("switch(let (__count__ = __parent__) (<x><y/></x> | __parent__)) { default: prop\ncontinue ; }");
tryItOut("export __count__/*infloop*/while(((<x><y/></x>)(false, <x/>))){return @foo;var prop, __parent__ =  '' ; }");
tryItOut("yield");
tryItOut("M:if(null) {;do throw <x><y/></x>; while((false) && 0); } else (window);");
tryItOut("with({}) return;");
tryItOut("let __iterator__ = true, 033\n__iterator__ = this, prop = __parent__;");
tryItOut("L:while((__parent__, __count__) && 0)(1e81);");
tryItOut("if(continue M; const prop) {;gc() } else  if ([[]] ? window : window) {return \ttrue; }");
tryItOut("while((this.__defineGetter__(\"__count__\", ([,,].throw(<x/>))).constructor = (this.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) != (p={}, (p.z = this)()).hasOwnProperty(\"prop\")) && 0){with(0.1)prop;{} }");
tryItOut("do yield; while((new ({}).hasOwnProperty( /x/g , undefined)\t) && 0);");
tryItOut("with({}) ;");
tryItOut("/*infloop*/for(let __count__; <y><z/></y>; <x><y/></x>) ;");
tryItOut("/*infloop*/L:do {continue ; } while(this.zzz.zzz);with((new Function) ? (__parent__.prop setter= function  __noSuchMethod__ (__count__) { yield window } ) : new window(*, 3.141592653589793)){function  function::<x><y/></x> (__proto__, __iterator__) { yield let  /x/g , __iterator__ = <y><z/></y>; }  }");
tryItOut("/*for..in*/for(var __count__ = (eval(\"this\", null)) * __proto__.(0/0) in __iterator__) yield <x/>");
tryItOut("L:with(([1,2,3,4].map)){prop;\fconst __proto__; }");
tryItOut("if(<x/>) {function(q) { return q; }yield  '' ; } else  if (<x/>) return; else {export *; }");
tryItOut("with({prototype: prototype.unwatch(\"prototype\").__proto__})(<x/>);");
tryItOut("{/*infloop*/for(prototype; ([1,2,3,4].map)(); /a/gi) {throw (yield [z1]); }/*for..in*/for(__noSuchMethod__ in (((<x/> |= .2 -  \"\" ))(arguments ? <y><z/></y> : <x><y/></x> ? (p={}, (p.z = ((3/0)[constructor]))()) : (uneval(!<x><y/></x>))))){let [1], prop;gc() } }");
tryItOut("if((1.3 |= arguments)) export *;");
tryItOut("if([, , , prop] = prop = <><x><y/></x></>) {return; } else  if ([15,16,17,18].sort(function  __parent__ () { prop, __count__ = <><x><y/></x></>; } , new Math.pow())) {{} }");
tryItOut("with({}) \f__parent__;");
tryItOut("/*for..in*/for(prototype in ((Math.sin)(({ __count__: ({ prop: __parent__, __count__: __proto__ }) }) = ((<x><y/></x>)[<><x><y/></x></>]))))if(<y><z/></y>) \f{ if (__noSuchMethod__.__noSuchMethod__ getter= 'haha'.split) export __iterator__;} else {__noSuchMethod__, __count__; }");
tryItOut("let(__proto__, __proto__) ((function(){for(let y in [5,6,7,8]) for(let y in []);})());");
tryItOut("L: {<y><z/></y>; }");
tryItOut("with(yield <x/>){(window); }");
tryItOut("if(++ \"\" ) {/*for..in*/for(const __proto__ in <y><z/></y>) {export *; }\n } else  if (let (constructor.__count__, prop = prototype) __iterator__ = [11,12,13,14].filter) {(1 for (x in [])) } else switch( \"\" ) { case 6: (<y><z/></y>); } const constructor;");
tryItOut("while(() && 0)__count__, constructor\n");
tryItOut("<x/>;");
tryItOut("L:switch((<x/>.__parent__)) { case 'haha'.split: export prop;break;  }");
tryItOut("while((1e81) && 0)4.");
tryItOut("return __noSuchMethod__; const __count__;");
tryItOut("/*for..in*/for(__parent__ in ((({}).__lookupGetter__)(3/0.__lookupGetter__(\"__proto__\"))))throw StopIteration;");
tryItOut("M:if(__parent__ = prototype, __count__.__iterator__) { if (let (__count__, __parent__) let (__iterator__ = <><x><y/></x></>) <x/>()) {/*infloop*/while(new *(<><x><y/></x\t></>, false)){gc() } } else throw ('fafafa'.replace\t(/a/g, /a/gi));}");
tryItOut(" { with({__noSuchMethod__: 0/0}){return; } } ");
tryItOut("M:while((constructor getter: \f*) && 0)export __count__\n__parent__ = this, __parent__ = null;");
tryItOut("throw StopIteration;");
tryItOut("<{constructor}> </{constructor}>");
tryItOut("let(__count__, __count__) { with({}) this.zzz.zzz;");
tryItOut("M:do throw undefined; while((prop) && 0);");
tryItOut("L:do  while((undefined += <y><z/></y>) && 0);");
tryItOut("return [[]];");
tryItOut("if(<bbb xmlns=\"[]\"><x><y/></x><!--yy--></bbb> >>>=new (__parent__.prop)(window)) throw  /x/g ; else {while((<y><z/></y>.yoyo( /x/g )) && 0){yield; }gc() }");
tryItOut("/*infloop*/while(<y><z/></y> >>  '' )/*for..in*/M:for(prototype = <><x><y/></x></> ? <><x><y/></x></> : 0/0 in __parent__) let __count__ = *;");
tryItOut("this;\nreturn <y><z/></y>;\n");
tryItOut("if(((p={}, (p.z = [void <x/>].map(function  __iterator__ (prop) { yield <y><z/></y> } ))()))) { if ( ''  .@ <y><z/></y>) {{}let constructor = false, constructor =  /x/g ; } else {let(prototype = window, __parent__ = @foo) ((function(){export *;})()); }}");
tryItOut("yield window\n//h\nexport __count__;");
tryItOut("/*infloop*/L:for((typeof __proto__ = true); ([,] += <><x><y/></x></> if (window)); #3={a:#3#}(@foo, #1#)) return;");
tryItOut("/*infloop*/do /*infloop*/for(__proto__ -= 4.; ([__noSuchMethod__]); eval(\"<x><y/></x>\", *::*)) (this); while(delete ([[]] * null).@* | <><zzz>(<y><z/></y> /= new function  __iterator__ () { return <><x><y/></x></> } (false++, prototype))</zzz></>);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(* ?  : window in (--<x/>).__noSuchMethod__ = (undefined >>= arguments)) const prop; }");
tryItOut("yield;");
tryItOut("with(undefined)function  __parent__ (__noSuchMethod__) { return ([1]); } ");
tryItOut("if(new (({a2:z2}))().eval(((<><x><y/></x></> >>>=#1#).prop = (__iterator__)))) { if ([11,12,13,14].some) if(window) { if (prop) {(this).__defineSetter__yield true; }} else {throw this;; }} else {yield window;\nlet __iterator__, constructor = <y><z/></y>;\n\nreturn;\n(<><x><y/></x></>); }");
tryItOut("/*infloop*/do const __count__; while(__count__);");
tryItOut("(null)\nif(?) export *; else  if (*::*) {(<x/>);return  /x/g ; }");
tryItOut("/*infloop*/for([15,16,17,18].some([1,2,3,4].slice, (null !==  '' )); Math.sin(); setter.prototype getter= @foo.watch(\"get\", (true).watch)) throw <><x><y/></x></>;");
tryItOut("L: if( '' .__defineGetter__(\"__iterator__\", <y><z/></y>)) prop; else {gc() }");
tryItOut("/*for..in*/for(var [__proto__, prototype] = 'fafafa'.replace(/a/g, (this).__defineSetter__) in <><x><y/></x></>) {yield 0;return 4.; }");
tryItOut("if([,,].propertyIsEnumerable(\"__proto__\")) { if ( /x/ ) {yield <y><z/></y>; } else (true);}");
tryItOut("L:switch(({ get constructor __proto__ (constructor)<><x><y/></x></>.* })) { case 3: break; default: break; case (#3={a:#3#})[*]: const constructor = <x><y/></x>;break;  }");
tryItOut("if((false || __iterator__)) {(window);{} } else  if (([15,16,17,18].sort(\tfunction \t __proto__ ()*, this)).eval(3/0)) {(__iterator__);export __parent__; } else \f{}");
tryItOut("if(__noSuchMethod__) export constructor;");
tryItOut("return <x/>\n");
tryItOut("for(let y in [5,6,7,8]) window.isPrototypeOf(<x/>)");
tryItOut("/*infloop*/do {throw [,,]; } while(__proto__.__noSuchMethod__ = (<><x><\fy/></x></> instanceof  /x/g ) &= (undefined.watch(\"__proto__\", new Function)));");
tryItOut("/*infloop*/for(var prototype; __proto__ = @foo; (__iterator__ = __count__.__proto__ = new ((1 for (x in []))//h\n)(prototype = <x><y/></x>,  /x/ ))) {throw <x><y/></x>;/*for..in*///h\nfor(var (constructor) in (([1,2,3,4].map)(<x/>))) }");
tryItOut("/*for..in*/M:for(let [prop, __noSuchMethod__] =  in @foo in try { var __iterator__ = <x><y/></x>, __proto__ = *; } catch(prop if ) { throw <x><y/></x>; } finally { {} } ) const __parent__ =  '' \n");
tryItOut("throw (function (x::__parent__, prop) { return ({a1:1}) } ).call.unwatch(\"__parent__\").eval(( '' ));");
tryItOut("/*for..in*/for(var window in (('haha'.split)(<x/>))){return; }");
tryItOut("/*for..in*/for(let prototype in ((let (prop = <x><y/></x>) prop ? <x><y/></x> : 0)(~3/0.__lookupGetter__(\"prototype\"))))throw <x><y/></x>;");
tryItOut("if((0/0(__proto__))) {} else  if ((*::* ? * :  /x/g )) {({ __parent__: __count__ }) }");
tryItOut("if(//h\n<x/> + function(y) { yield y; yield __count__;; yield y; }) {constructor = <x/>;continue L; }");
tryItOut("/*infloop*/for(let ({ prop: constructor }) = __iterator__ =  /x/g  *= __parent__; eval(\"export *;\", __iterator__ = __iterator__); ({ __iterator__: prop, __iterator__: __count__ }) = new String(__iterator__ =  \"\" , <x><y/></x>.__count__)) /*infloop*/for(let prop; <x/>; <x/>) {yield function ([y]) { };; }");
tryItOut("do gc() while(((<x><y/></x> == __noSuchMethod__)) && 0);");
tryItOut("with(false.prop = <x/>)let __noSuchMethod__ =  /x/g , prototype = @foo;");
tryItOut("/a/gi const constructor;");
tryItOut("L: export *;");
tryItOut("M:if(<x><y/></x>.(window)) { if ((new (#1=[let = false])())) {yield;throw <><x><y/></x></>; }} else {break ;/*for..in*/for(const [__parent__, __parent__] = <y><z/></y> in prop)  \"\" ; }");
tryItOut("if(0x99.__lookupSetter__(\"__parent__\") |= function (__iterator__, __noSuchMethod__) { return <><x><y/></x></> } \n) {export *;{return *;(*); } } else {with(__noSuchMethod__((window)[<x/>]))throw this; }");
tryItOut("L:do {var gc; } while((__parent__.prop setter= constructor) && 0);");
tryItOut("/*infloop*/while([]){return; }");
tryItOut("{continue ;var __count__ = window, __count__ = <x/>; }");
tryItOut("throw StopIteration;");
tryItOut("L:with({__parent__: (({ __count__: ({ constructor: constructor }) }) = (this.__defineGetter__(\"__count__\", /a/gi)))}){/*infloop*/for(let ({ prop: prototype, __noSuchMethod__: / }) = __parent__.(null); this.__defineGetter__(\"function(id) { return id }\", (function  __proto__ (prototype, prop) { yield 033 } ).apply); (true == @foo)) {__proto__ = <x><y/></x>; }/*for..in*/for(var [({ constructor: prototype }), , , ({ __parent__: constructor, prototype: __noSuchMethod__ })] in __iterator__) {export constructor; } }");
tryItOut("with(new Date( /x/ )((new ('haha'.split)()))){return __proto__; }");
tryItOut("if(<y><z/></y>) { if (1e4) {return;/a/gi } else @foo;}");
tryItOut("<!--yy-->");
tryItOut("/*for..in*/L:for(const [prop, __iterator__] = --4..__defineSetter__(\"function::prop\", function () { return false } ) in (prop.__noSuchMethod__ setter= new Function)) {L:if( '' .eval([1,,])) { if ([(this / __iterator__) for each (__proto__ in false)]) __noSuchMethod__ = undefined, prop = this;} else ( /x/g ); }");
tryItOut("yield\nprototype = ({});");
tryItOut("if( /x/g .throw(prototype)) { if (1.2e3) *; else {({}).hasOwnProperty }}\n{yield;__count__ = <x><y/></x>\nyield;\n }");
tryItOut("with({__noSuchMethod__: (new ([1,2,3,4].slice)(<x><y/></x>, <><x><y/></x></>))})return <><x><y/></x></>;");
tryItOut("/*infloop*/while([,])if(eval(\"L: {return;yield; }\", __parent__)) {yield  '' ; } else return {};");
