tryItOut("export __noSuchMethod__;\n{gc()const __parent__, __noSuchMethod__; }\n");
tryItOut("try { yield (function(y) { yield y; __parent__; yield y; })((uneval(undefined)),  \"\" ); } finally { for(let y in [5,6,7,8]) return; } ");
tryItOut("export constructor;\n/*infloop*/M:for(const __parent__ = false; {}; ({a1:1})) ;\n");
tryItOut("M:if(<y><z/></y>) { if (<><x><y/></x></>) {return <x><y/></x>; }} else {break ;var prototype =  \"\" , prop; }");
tryItOut("yield (-0) <= (let (prop = @foo, prop) __proto__);");
tryItOut("while((constructor|=constructor) && 0){}");
tryItOut("/*infloop*/do function::let = window, __noSuchMethod__ = <><x><y/></x></>; while(({ constructor: prototype }) = (-1).propertyIsEnumerable(\"constructor\"));");
tryItOut("prototype;");
tryItOut(" { return  /* Comment */this } ");
tryItOut("switch(this.zzz.zzz) { default: ;case 2: do throw <><x><y/></x></>; while((<><x><y/></x></>) && 0);break; case 1: export constructor;break;  }\n");
tryItOut("/*infloop*/for(let __count__; yield constructor = __noSuchMethod__.eval(1.2e3 && this); <zzz><x/></zzz> - [, __noSuchMethod__, , prototype] =  /x/  >=  /x/g ) {with({prototype: constructor});export *; }");
tryItOut("let (prototype = #1=<><x>\t<y/></x></>) { export __noSuchMethod__;\nthrow [z1];\n }");
tryItOut("/*infloop*/while( /x/ ){return;export *; }");
tryItOut("with({\tconstructor: (function () { return default: export *;break; case 9: case <x><y/></x> + function ([y]) { }: break; case 5: (<x/>); } )()}){let (__count__ = <><x><y/></x></>, __count__) { gc() }throw *::*; }");
tryItOut(";");
tryItOut("yield ((1 for (x in []))).call(yield __parent__, );");
tryItOut("return;");
tryItOut("/*infloop*/while((<x/>)())return;");
tryItOut("{export __proto__;var prop; }");
tryItOut("with(({__count__: <><x><y/></x></>,  set function::prop __parent__ () { return (<y><z/></y> !== undefined) }  })){( '' );{yield;<><x><y/></x></> } }\t");
tryItOut("M:do with({prop: null}){throw <x><y/></x>; } while((033) && 0);");
tryItOut("/*infloop*/for(null; <><x><y/></x></> if ( '' ) >>  /* Comment */#1#; -3/0.unwatch(\"__proto__\")) {(undefined); }");
tryItOut("if(([<y><z/></y>])) {/*infloop*/for(var __proto__ = (({setter: #1#})); 'fafafa'.replace(/a/g, (1 for (x in []))); (#1#.watch(\"prop\", __proto__))) constructor }");
tryItOut("/*for..in*/for(const [constructor, constructor] = new __iterator__() in -1) throw *::*;");
tryItOut("for(let y in [5,6,7,8]) let(({ __parent__: __parent__ })) { return <y><z/></y>.__lookupGetter__(\"__proto__\") += 3.141592653589793;");
tryItOut("with(<><{__noSuchMethod__}></{__noSuchMethod__}></>){return <><x><y/></x></>;export __noSuchMethod__; }");
tryItOut("return new function(q) { return q; }();");
tryItOut("/*for..in*/M:for([__iterator__, prop] = __noSuchMethod__.__parent__ in <><x><y/></x></>) {([[1]]);export __noSuchMethod__; }");
tryItOut("L:with(1e81 .. <x/>[ \"\"  >>= <x><y/></x>])export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in 0x99) {let __noSuchMethod__ = <x><y/></x>, __iterator__ = *::*;{} }\nlet __proto__, __parent__;/*for..in*/for(prop in ((function (prop, __iterator__)<x/>)( /x/ ))){; }\n");
tryItOut("/*for..in*/for([__parent__, __proto__] = #1# in ) {var set, prototype; }");
tryItOut("{;return this; }");
tryItOut("L: {yield this;yield; }");
tryItOut("with(Exception(@foo,  /x/g ))constructor");
tryItOut("(<x><y/></x>).__defineSetter__\n");
tryItOut("/*infloop*/for(0x99; <x><y/></x>; <x><y/></x>) function::prototype = 4.;");
tryItOut("/*for..in*/for(let [prop, __proto__] = *::* in  '' ) {yield __count__;*::*; }");
tryItOut("__count__: true.__defineGetter__(\"__parent__\", Math.sin)");
tryItOut("throw 1e-81;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(prop in ((<x><y/></x> ? <y><z/></y> : 1.3)(__noSuchMethod__.__count__ getter= Math.pow))){yield ({a1:1}) }");
tryItOut("L: gc()\nundefined;\n");
tryItOut("if(new  '' ().unwatch(\"__noSuchMethod__\")) {export *; } else  if ( \"\" ) {export *;throw __iterator__; } else /*for..in*/for(__iterator__ in ((<><x><y/></x></>)(__noSuchMethod__))){yield; }");
tryItOut("M:with({__parent__: this.eval(window)})/*infloop*/do {yield;{break ; } } while( /x/g );");
tryItOut("/*for..in*/for(var __proto__ in (*::* < (<><x><y/></x></>.@foo))) return;");
tryItOut("(prop);");
tryItOut("continue ;");
tryItOut("while((([11,12,13,14].sort)) && 0){yield <y><z/></y>;/*infloop*/while(__parent__.prop = __parent__, prop = <><x><y/></x></>.__noSuchMethod__)(prop, prop = *;function  constructor ()<x><y/></x>).call }");
tryItOut("let (__count__ = this, __parent__) { (new Function(\"(false);\")) }\n;\n");
tryItOut("do {(<><x><y/></x></>);gc() } while(((<x><y/></x>.(function(id) { return id }).watch(\"__iterator__\", [1,2,3,4].map))) && 0);");
tryItOut("if(*) {(<><x><y/></x></>); } else /a/gi");
tryItOut("/*infloop*/do {/*infloop*/do if(({prototype: this, __proto__: <y><z/></y> })) { if ([15,16,17,18].map(function (__count__, __iterator__)/*\n*/ { \tyield {} } , {})) {let __parent__, __parent__;yield __iterator__; }} else yield; while(({}));{if(<x><y/></x>) {throw <x><y/></x>; } else  if (this) (<><x><y/></x></>); else ;yield *::*; } } while([ /x/g  for each (__parent__ in *) if (@foo)]);");
tryItOut("let(({ __proto__: prototype })) ((function(){})());");
tryItOut("if( /x/ ) {yield;export *; } else  if (1e+81) {[1];export *; } else \n{}");
tryItOut("let (__proto__) { yield  /x/ ; }");
tryItOut("if((undefined /= <x><y/></x> .@*:: prototype = __noSuchMethod__)) {;break ; } else  if ((p={}, (p.z =  ''  ? __count__(yield null)  :  { return null } )())) ");
tryItOut("/*for..in*/for(const prototype = this.__defineSetter__(\"function::constructor\", [1,2,3,4].map) in <x><y/></x>.__proto__ = @foo) ");
tryItOut("let (__proto__) { throw <y><z/></y>\nthrow <x/>; }");
tryItOut("/*for..in*/for(prop =  in <x><y/></x>.(__parent__)) for(let y in [5,6,7,8]) [*]");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in @foo.*) (window);\nreturn false;\n");
tryItOut("gc()\nyield <y><z/></y>;\n\n");
tryItOut("try { __count__, __noSuchMethod__; } catch(constructor) { ; } finally { continue M; } ");
tryItOut("/*for..in*/for(const constructor in eval(\"return;\", ({__noSuchMethod__: __proto__ })) @ <x><y/></x>.isPrototypeOf(true)) {yield;\nexport *; }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("switch(let __parent__ = null) { default: ;break;  }");
tryItOut("with(*){yield 0;<y><z/></y>;\t/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in @foo) ; }");
tryItOut("/*for..in*/L:for(const __iterator__ in ((Math.sin)(__proto__)))/*infloop*/for(let __proto__ = Error(); __noSuchMethod__ = prototype; <y><z/></y>) {var __noSuchMethod__;(constructor); }");
tryItOut("{this.zzz.zzz;export *;\nthrow window;\n }");
tryItOut("return;");
tryItOut("with({__count__: (<x><y/></x> for each (prop in <x><y/></x>)) << [11,12,13,14].sort}){}");
tryItOut("/*infloop*/for((constructor.__noSuchMethod__ =  /x/g  ? 0x99 : *::*); (-1) |= [z1,,]; window) {export __proto__; }");
tryItOut("for(let y in []);");
tryItOut("throw <><x><y/></x></>;\nreturn;\n");
tryItOut("{return;/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in undefined) {yield;return; } }");
tryItOut("/*infloop*/L:for((3.__iterator__ = <x><y/></x>); <><x><y/></x></>; false.unwatch\f(\"constructor\")) {return; }");
tryItOut("with({constructor: --this.*.prop})throw __iterator__;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((window)(prototype)))let __count__ = <x/>;");
tryItOut("/*for..in*/for(var [constructor, ({ __parent__: prop })] = (({a1:1}).hasOwnProperty(\"__iterator__\")) in prototype.(false).@foo) {{}var __count__ = window, prototype; }");
tryItOut("with(window)yield -0;");
tryItOut("/*infloop*/do /*for..in*/for(var prototype in ((Function)(false.watch(\"constructor\", function(q) { return q; })--)))/*infloop*/for(__noSuchMethod__; window; <><x><y/></x></>) {;undefined; } while(__noSuchMethod__);");
tryItOut("if((new Boolean(<x><y/></x>.prototype = * ? (\f[{/*infloop*/do {return {}; } while(*::*); }]) : [,,z1], new /a/gi(undefined, *)))) <>gc().hasOwnProperty(\"prop\")</><!--yy--> else  if ([*]) export *; else {;/*for..in*/M:for(const case  /* Comment */(-0): __parent__, __parent__;['__parent__'] in ((function () { return window } )(let (prototype = <><x><y/></x></>)  '' ))){yield; } }");
tryItOut("with({x::prototype: __count__.__defineSetter__(\"prop\", (new Function(\"yield  /x/ ;\")))}){return 3.141592653589793; }");
tryItOut("/*for..in*/L:for( /x/ ['__noSuchMethod__'] in {}) return\n/*for..in*/for(let __noSuchMethod__ = eval(\"*.hasOwnProperty(\\\"__count__\\\")\", <{__iterator__}></{__iterator__}>) in (yield <><x><y/></x></>)) prototype, constructor = window\n");
tryItOut("if(function::__proto__) let __parent__ = window, __count__; else  if (new (new Error(__iterator__, function  __noSuchMethod__ ()<x><y/></x>))()) gc()");
tryItOut("switch( \"\" [__iterator__]) { case 3: return;case 4: return <><x><y/></x></>;break; case 5: /*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in window) let prop = __count__;1e4break;  }");
tryItOut("yield @foo\n;");
tryItOut("return <x><y/></x>;");
tryItOut("return;");
tryItOut("M:if() yield function::__proto__; else  if (eval(\"<!--yy-->\", <><x><y/></x></>)) {throw try { (({a1:1})); } catch(__parent__ if (function(){return <><x><y/></x></>;})()) { return [[]]; } ;break ; }");
tryItOut("L: yield undefined\n");
tryItOut("do {yield {}; } while(([@foo].filter(new Function)) && 0);");
tryItOut("/*infloop*/for(var prototype; 033;  /x/g ) {}");
tryItOut(";");
tryItOut("while((new Math.pow(.2, <x/>) -= 0 ? <x><y/></x> : <x/>.__count__ = this[<><x><y/></x></>]) && 0)/*infloop*/M:for(const prop; window; ((uneval(Exception())))) {return; }");
tryItOut("default: {}case __proto__ = __iterator__: ");
tryItOut("with({}) return  /x/g ;");
tryItOut("let (({ __count__: __parent__, prototype: __proto__ }) = @foo.unwatch(\"__parent__\")) { const __noSuchMethod__ = prototype; const getter; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; new (0x99.__lookupGetter__(\"constructor\") :: ((p={}, (p.z = -1)())))(); delete) yield \n*::*;");
tryItOut("/*for..in*/M:for(const __iterator__ in  \"\" ) {}");
tryItOut("\ngc()\n");
tryItOut("L:switch((<><x><y/></x></> || function ([y]) { })) { default: break; (true);case 5: return @foo;break; case 5: break;  }");
tryItOut("let(({ constructor: __count__, __parent__: __count__ })) ((function(){throw StopIteration;})());");
tryItOut("/*infloop*/for(var ({ prototype: prototype }\f) =  /x/g ; .__parent__ = <x><y/></x> @ -0; (uneval(function(id) { return id }))) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var 0x99 in window = __proto__ += null) /*infloop*//*\n*/do {export __iterator__; } while(this)");
tryItOut("try { yyy } catch(__count__) { L: {;gc() } } ");
tryItOut("/*infloop*/for(\neval(\"throw <x><y/></x>;\", @foo); ; undefined.prototype) {prototype, prop; }");
tryItOut("gc()");
tryItOut("L:with({__parent__: ((constructor: this).call([,,z1], window, (function ([y]) { })()))})/*infloop*/do {yield;throw function ([y]) { }; } while(<y><z/></y> >= __count__);");
tryItOut("yield ((<x><y/></x>)[(-1)]);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let prop = new Function; __parent__ = *::*; [,,]) {{}throw <><x><y/></x></>; }");
tryItOut("let (prototype = [z1]) { const __parent__ = <y><z/></y>; }");
tryItOut("if(@foo) { if (*) null; else <><x><y/></x></>;}");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = [<\tx><y/></x> for each (prop in window)] in (({constructor: <x><y/></x>, prototype: prop }))) {}");
tryItOut("\nyield;\n\n/*infloop*/do {var __count__;{} } while(__iterator__.__parent__);");
tryItOut("if(__parent__ = __count__.unwatch(\"__count__\")) { if (({prop: <x><y/></x>})) for(let y in [5,6,7,8]) *;} else ; const x::constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("__parent__\n(1e+81);\n const prop;");
tryItOut("if(constructor = <x/>) each; else  if (__iterator__ = *.__defineGetter__(\"constructor\", ({}).__lookupGetter__)) /*infloop*/for(const constructor = undefined;  '' ; <x><y/></x>) yield .2;");
tryItOut("try { gc() } catch(__proto__ if [,,z1].propertyIsEnumerable(\"__count__\")) { constructor = prototype; } catch(__iterator__) { throw StopIteration; } finally { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(var prototype; *.@*; (constructor.( /x/g ))) yield __parent__;");
tryItOut("/*infloop*/for(let __count__; <{prop}><!--yy--></{prop}>; ( /x/g .__count__ = <><x><y/></x></> <<= false .@ <>__parent__</> :: [,,])) {/*infloop*/for(const constructor; #3={a:#3#}; #2=[[11,12,13,14].filter]) {function(q) { return q; } }/*for..in*/for([__noSuchMethod__, __count__] = @foo in __parent__) {const __noSuchMethod__, get = this; } }");
tryItOut("{with(prop.propertyIsEnumerable(\"__parent__\"))var __iterator__ = <y><z/></y>;\n }");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = (window)(<y><z/></y>, <x><y/></x>).propertyIsEnumerable(\"constructor\") in ((@foo)((1 for (x in []))))) {{yield;j }/*for..in*/for([constructor, __count__] = <y><z/></y> in true\f) continue ; }");
tryItOut("with({}) yield (window == <x><y/></x>);");
tryItOut("yield prop % false != <x><y/></x> && [15,16,17,18].sort(Math.pow, <x><y/></x>);");
tryItOut("this.zzz.zzz\n");
tryItOut("return <y><z/></y>;");
tryItOut("if((({prop: (prop = __noSuchMethod__), @foo })[1e-81].__proto__)) { if (this.__defineSetter__(\"__proto__\", [1,2,3,4].map)) (#0=({prop: -0}));} else <x/>");
tryItOut("({}).hasOwnProperty");
tryItOut("if(function ([y]) { }) throw null;");
tryItOut("/*for..in*/for(var prop = [#3={a:#3#}].map(({}).__lookupGetter__\f)++ in (#2=[<x/>] for (__count__ in <x/>) for (prototype in window))) {/*infloop*/L:for(let prototype; undefined; constructor) {return; }return function ([y]) { }; }");
tryItOut("while((5.0000000000000000000000.__lookupSetter__(\"__noSuchMethod__\")) && 0)throw null;");
tryItOut("M\t:if(++<y><z/></y> ^ .2 && <><x><y/></x></> ^= true.__lookupGetter__(\"__count__\")) { if (__noSuchMethod__ = false) {return;(__parent__)\nvar __noSuchMethod__ = *;export __iterator__; }} else if(<><x><y/></x></>) yield; else [,,];");
tryItOut("/*infloop*/while(<><x><y/></x></>)");
tryItOut("switch(([(constructor = -3/0)])) { case prop = false: break;  }");
tryItOut("with([('fafafa'.replace(/a/g, ({}).hasOwnProperty))])const __proto__;");
tryItOut("/*infloop*/for(__parent__; __count__.prop = ( /x/g ++); (Number(this))) if( /x/g ) ; else  if (window) {yield null; } else {{}prop }");
tryItOut("if([0/0 for each (prop in @foo)]) {yield ({a1:1})\nlet (__iterator__, __count__) { export prototype; } }");
tryItOut("/*infloop*/while()try { let(constructor) ((function(){break L;})()); } finally { throw __count__; } return <x><y/></x>;");
tryItOut("let(__iterator__, __proto__) { continue L; const prop;");
tryItOut("if(<><x><y/></x></>) return [,,z1]; else var  /x/ , prop;");
tryItOut("L:if( '' ) { if ((#1=[ '' ])(__proto__ = ({}))) } else {let __parent__, __proto__;export *; }");
tryItOut("__parent__ = constructor;");
tryItOut("/*for..in*/M:for(const __parent__ = <x><y/></x> in __noSuchMethod__) ");
tryItOut("L:if(({__parent__:  /x/g .__lookupSetter__(\"__proto__\")})) prop, __parent__; else return 1e81;");
tryItOut("if(<><x><y/></x></>) export *; else  if ( /x/g )  else {return;continue L; }\n");
tryItOut("with({__iterator__: __count__ = []}){L: let prototype = *; }");
tryItOut("/*for..in*/for(prop in <x/>) {export *; const __noSuchMethod__;{} }");
tryItOut("this.zzz.zzz;");
tryItOut("if([( /* Comment */0/0)]) yield  /x/ ; else  if (4..__defineGetter__(\"__noSuchMethod__\", Math.sin)) {yield true; } else yield;");
tryItOut("if(1e81) var try { return @foo; } finally { ; } ; else  if ( \"\" ) throw null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  /x/ .__count__ in [[1]].*) {throw <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for([__parent__, __parent__] = -3/0 != > in <x><y/></x>) export *;");
tryItOut("__noSuchMethod__ = true, prop = *::*");
tryItOut("M:with({__iterator__: <y><z/></y>}){return;return *::*; }");
tryItOut("/*for..in*/for(const __noSuchMethod__.constructor in constructor.prototype setter= eval.@*) {{} }");
tryItOut("/*infloop*/for(let ({ constructor: [__count__, __proto__, ] }) = #0=({a1:1}); <><x><y/></x></>.prototype =  \"\" ; []) {;export *; }");
tryItOut("switch(this.__defineGetter__(\"get\", (new Function(\"yield;\")))) { case 4: break; var __parent__ = 3.141592653589793, __noSuchMethod__ = <y><z/></y>\n }");
tryItOut("/*infloop*/for(new Function(<x><y/></x>, __noSuchMethod__); false if (function(id) { return id }); [ \"\"  .@ window].sort(function(y) { yield y; function ([y]) { }, []; yield y; })) while((this) && 0){let __count__, prototype; }");
tryItOut("L:if(0/0.__lookupGetter__(\"__noSuchMethod__\").yoyo(#0=true)) { if ((uneval((-0)))) {return; }} else yield prototype;");
tryItOut("L:switch((({a1:1})/*\n*/) -= ((prototype = prototype = #3={a:#3#}))) { default: break; if(__proto__) { if (prototype)  if (())} else {undefined; }switch(1e+81) { default: break; export __noSuchMethod__;break; case 0.1: continue M; }case <x/>.yoyo(window): gc()break;  }");
tryItOut("/*for..in*/for(const __parent__ in ((gc)((-0))))true;\ndo  while(( /x/  in ({a1:1})) && 0);\n");
tryItOut("do __proto__ while((yield  '' .eval(undefined)) && 0);");
tryItOut("this\nfunction(id) { return id };");
tryItOut("L:  { {} } ");
tryItOut("{[1,2,3,4].map }\n");
tryItOut("/*for..in*/for(const prop in (((p={}, (p.z = ((new function () { yield this } (<x/>, window)) && <y><z/></y>--))()))((((* || <x><y/></x>)).apply).call(((yield \t({__noSuchMethod__: (yield  /x/ )}))).*, ((({__count__: <><x><y/></x></> })) >>= 3.141592653589793.prop), @foo))))/*infloop*/while(<y><z/></y>);");
tryItOut("throw StopIteration;");
tryItOut("if( /x/ ) { if (((<x><y/></x>)[@foo])) {yield false;throw <x/>; }} else yield;");
tryItOut("0/0;");
tryItOut("this.zzz.zzz;");
tryItOut("export prop; const constructor;");
tryItOut("if(<zzz><x><y/></x></zzz>) {export *;export *; } else  if ((try { gc() } finally { return; } [<x/>])) \n");
tryItOut("L:if(constructor-= /x/g ) {; } const prototype;");
tryItOut("L:if(window) return; else  if (function ([y]) { }) {yield; } else (<x/>);");
tryItOut("prototype = <><x><y/></x></>;\ngc()\n");
tryItOut("/*for..in*/L:for(let constructor =  ''  <= window in <y><z/></y>[this]) throw prototype;");
tryItOut("/*infloop*/while(this =  /* Comment */true){if((-1)) var __proto__ = [,,z1], prop; else {{} }let __iterator__ = <y><z/></y>, __parent__//h\n\n\t }");
tryItOut("with(/({__noSuchMethod__:  /* Comment */<><x><y/></x></> + __parent__.__defineSetter__(\"constructor\", ({}).hasOwnProperty)})");
tryItOut("if(*::* |  '' ) return (function ([y]) { })(); else {__proto__;{} }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = this in (this.__defineGetter__(\"__iterator__\", <><x><y/></x></>))) {while((([#3={a:#3#}].some(function(y) { yield y; let __parent__ = true, prop =  '' ;; yield y; }))) && 0)export *;return #1=[#1#]/*\n*/; }");
tryItOut("{__noSuchMethod__ }");
tryItOut("if(<y><z/></y>) {yield;; } else {prop;return; }\n");
tryItOut("{{}\n }");
tryItOut("/*for..in*/for(var __count__ = (@foo .@*:: ({a2:z2})).__proto__ = (p={}, (p.z = ({}))()) ,  /* Comment */window in ([,,] * 1.2e3)) {;(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __noSuchMethod__.__proto__ in <x/>) export *;");
tryItOut("do ; while((window >>=  \"\" ) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let *['prop'] in *::*) {{}{} }");
tryItOut("/a/gi{M:if( /x/g ) let __iterator__; else  if (false) {export *;export *; } else {(function::__iterator__); } }");
tryItOut("let (function::prototype = -1\n, __noSuchMethod__ = <zzz>[,]</zzz>) { yield }");
tryItOut("constructor = constructor;");
tryItOut("/*infloop*/for((__parent__.__parent__); 'fafafa'.replace(/a/g, eval); \tprototype = <x/>) {yield;new Function }");
tryItOut("M:if(this.__defineSetter__(\"__parent__\", Math.pow)) { if ([11,12,13,14].map) {(__parent__); }} else {gc(){} }");
tryItOut("while((<x/>) && 0)var __parent__ = true, __iterator__;");
tryItOut("<x><y/></x>.unwatch(\"constructor\"), @foo.__parent__ = <><x><y/></x></>");
tryItOut("if((this[__noSuchMethod__])) {new Functionthrow <x><y/></x>; } else  if (#\t0=(Math.sin).call(<><x><y/></x></>, <><x><y/></x></>)) var prop = [];");
tryItOut("/*infloop*/while()export *;");
