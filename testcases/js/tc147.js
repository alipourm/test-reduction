tryItOut("/*for..in*/for([prop, __noSuchMethod__] = [,,z1] in 'fafafa'.replace(/a/g, Math.pow)) {L:if(Date(window, [])) {let __count__;export *; } else  if (this) (@foo); }");
tryItOut("export *;");
tryItOut("/*infloop*/for(const __proto__ = -0.__noSuchMethod__ =  '' ; ({get:  /x/ , prop: __parent__.(({prototype: (prototype.(<y><z/></y>)), __noSuchMethod__ setter: function  prop (__noSuchMethod__) { yield <><x><y/></x></> }  })) }); (new (new Function(\"throw <y><z/></y>;\"))())[<x><y/></x>.prototype]) {prototype = constructor = 1.3 }");
tryItOut("M:if(new window()) { if (this.zzz.zzz) {<x><y/></x>;(<x><y/></x>); }} else {constructor = __iterator__(0); }");
tryItOut("/*infloop*/L:for(var ({ prototype: __parent__ }) = [<y><z/></y>].filter(Function);  /x/ ; yield false) {gc() }");
tryItOut("/*infloop*/for((__iterator__-=({__parent__ =  /x/g , __parent__ })); [(*::*)[prop]].some(<x><y/></x>); (<><x><y/></x></>)(<><x><y/></x></>) = this.__defineSetter__(\"__parent__\", Math.sin)) return <x><y/></x>;");
tryItOut("export *;");
tryItOut("/*infloop*/while(yield -0){export *;return __parent__; }");
tryItOut("L:if([(window\n)].sort((gc).apply)) {gc()let __iterator__, prototype = constructor; } else  if ((__noSuchMethod__)) {yield *;continue ; } else { { yield <x><y/></x>; } ; }");
tryItOut("if(({__count__: (({__count__: 1e+81, __parent__ setter: gc })) })) let __parent__, __count__ = window; else  if (({__proto__: ((({}).__lookupGetter__).call()) %= window})) let __parent__ = 0/0; else /*for..in*/for(constructor = (yield (__iterator__ = 3)) in __proto__|=*::*) ;");
tryItOut("let(__noSuchMethod__ = __parent__) { for(let y in [5,6,7,8]) ;");
tryItOut("return;");
tryItOut("with({__proto__: *::*}){var __iterator__, prototype; }");
tryItOut("with((this.__defineSetter__(\"prototype\", -3/0))){export __noSuchMethod__;prototype; }");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] = true.__noSuchMethod__ / *.propertyIsEnumerable(\"prototype\") in  /x/g ) yield *::*;");
tryItOut("if((__iterator__++)\t) let __count__, __count__; else  if ([({a2:z2})]) if((<x><y/></x>.prototype)) export __iterator__; else {yield <x/>; } else gc()");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("M:if(__proto__) {/*for..in*/for([constructor, constructor] = *::* in *::*) {; } } else  if ((-0) ^  \"\" ) let(__parent__) ((function(){true;})());");
tryItOut("L:while(((function(q) { return q; }())) && 0){const prototype =  /x/ ;break L; }");
tryItOut("if(this) {const __count__ =  '' , __noSuchMethod__;let __count__, __parent__; } else  if ((window |= true.valueOf(\"number\"\t)).__defineSetter__(\"x::constructor\", (*::*).watch)) {gc()yield; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let ~ in <y><z/></y>) export *;const prop = (-1), __parent__; }");
tryItOut("if(([, ]\t = __count__)) { if ((eval(\"__proto__ = null\", __parent__ =  /x/ )) if ((<><x><y/></x></>.__defineSetter__(\"constructor\", [1,2,3,4].map)\r).(\"constructor\"))) {yield [z1,,]\nexport __proto__;let(__proto__) { with({}) return; } else /*for..in*//* nogeckoex bug 349964 */ for  each((window in __iterator__)([15,16,17,18].map(new Function, 3/0)) in new String()) {let __count__ = constructor;{} }}");
tryItOut("with({__noSuchMethod__: (constructor = constructor)}){break ; }");
tryItOut("if((null , <x><y/></x> @ yield <><x><y/></x>yyy</>)) {L:switch(<x/>) { default: /*infloop*/for(<x/>; <x><y/></x>; <x><y/></x>) break; case 1e+81: let __iterator__ = [1,,], __proto__ = <><x><y/></x></>;{}break; case 4: break; (undefined);break; case 2: break; case setter: return  \"\" ;case 3: break; case 7: break; return;break; case 4:  }/*infloop*/for( \"\" .__iterator__ = @foo; delete constructor; ((<><x><y/></x></> for (__proto__ in <x><y/>/*\n*/</x>)))) /*for..in*/L:for(const prop in ((function  prop (prop, __parent__) { yield .2 } )(<y><z/></y>)))export *; } else  if ([ /x/  for (__iterator__ in <y><z/></y>)]) /*for..in*/L:for(var prototype in ((({}).__lookupGetter__)(<x/>)))new Function");
tryItOut("yield (*[<><x><y/></x></>]);");
tryItOut("/*infloop*/for(new <><x><y/></x></>.__noSuchMethod__ = <x><y/></x>(window + <x><y/></x>).__defineSetter__(\"__noSuchMethod__\", function (constructor: (__iterator__ = *--), ({ __iterator__: [] })) { __iterator__; } ); (constructor.((constructor = __noSuchMethod__.propertyIsEnumerable(\"__proto__\"))))(@foo / undefined, @foo.__defineGetter__(\"__parent__\", (Function).apply)); throw <x><y/></x> ? <x><y/></x>.(window) : constructor%=window) return ! /x/g ;");
tryItOut("/*for..in*/for(let constructor = __iterator__ in true) gc() const constructor;");
tryItOut("switch((p={}, (p.z = function (constructor, __count__) { yield @foo } (<x><y/></x>))())) { case 7: M:while(([z1]) && 0)break; break; break;  }");
tryItOut("/*infloop*/while( /x/g .__lookupGetter__(\"__iterator__\"))gc()");
tryItOut("M:while(((<x/> for (__noSuchMethod__ in -0))) && 0){throw //h\nwindow;\nyield;\n }");
tryItOut("/*infloop*/for(const constructor = ((((yield <x><y/></x>)).watch(\"prototype\", new Function))--); ((yield window.hasOwnProperty(\"__noSuchMethod__\"))); (uneval(([15,16,17,18].some(<><x><y/></x></>, prop))))) {{L:yyy if([1,,]) {; } else  if (<><x><y/></x></>) export *; else {throw false; } }export *; }");
tryItOut("export <x/>;");
tryItOut("/*for..in*/for(const __count__ = <y><z/></y> in <><x><y/></x></>) yield *;");
tryItOut("L:if(yield __noSuchMethod__ = [, __proto__, ]) /*infloop*/L:for(let __noSuchMethod__; [1,,].hasOwnProperty(\"__noSuchMethod__\"); <x><y/></x> / undefined) {{}yield; } else {throw <><x><y/></x></>;{} }");
tryItOut("let (__proto__) { switch([z1]) { default: var __parent__ = *::*;{} } }");
tryItOut("let (__noSuchMethod__ = (p={}, (p.z = 3)())) {  }");
tryItOut("__count__ = constructor;");
tryItOut("function(q) { return q; }");
tryItOut("/*for..in*/for((<><x><y/></x></>.isPrototypeOf())['__noSuchMethod__'] in (({constructor setter: Math.pow, __count__: (__noSuchMethod__ = <x><y/></x>) }))) /*for..in*/L:for(__parent__ in ((([,]).__defineSetter__)(.2.__defineGetter__(\"prop\", (\t'haha'.split).apply))))if(<x><y/></x>) { if (__iterator__) {prop; } else yield false;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const [constructor, prop, __parent__, , ] in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) gc()");
tryItOut("/*for..in*/for(__proto__ in (((true.__lookupSetter__(\"__noSuchMethod__\")).call)(({__count__ getter: gc, __parent__: <><x><y/></x></> }))))__proto__ = window;");
tryItOut("__parent__;");
tryItOut("{'haha'.splitexport constructor; }");
tryItOut("\f;for(let y in []);");
tryItOut("var __iterator__;if(([]++)) { if (#3={a:#3#} &= <><x><y/></x></>) { } else {gc() }}");
tryItOut("for(let y in [5,6,7,8]) export __iterator__;");
tryItOut("if(([,,].eval((<x><y/></x> >> window)))) ; else  if ((new Number(true))) ; else {*::* }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in undefined.prop = #3={a:#3#}) {const __noSuchMethod__;/*for..in*/for(setter in ((eval)(prop))){__noSuchMethod__, prop; } }");
tryItOut("/*for..in*/for(__proto__.prototype in (([1,2,3,4].slice)(new *))){M:with({__proto__: #1=({prop: window})})export __count__; }");
tryItOut("/*for..in*/for([function::__iterator__, __noSuchMethod__] = (this.__defineGetter__(\"__noSuchMethod__\", 3/0)) in <><x><y/></x></>) const prototype;");
tryItOut("L:if(<zzz>033++</zzz>) ; else  if (-0.@*.__defineGetter__(\"prototype\", [1,2,3,4].map)) {var constructor, prototype;throw <y><z/></y>; } else ;");
tryItOut("let(({ __proto__: __proto__ }) = return this) { {}");
tryItOut("M:if(constructor|=<x><y/></x> /  /x/ ) { if ((((({ { yield 3 } :  /x/g })).watch)(undefined.__noSuchMethod__ = false))) {; } else yield;}");
tryItOut("/*for..in*/for(const [prototype, function::__noSuchMethod__] = [,,] in prop) {return *; }");
tryItOut("L:if((( ''  >= @foo))) { if (this if (window)) export *;} else const yield, __proto__ = @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (true) in <x><y/></x>) export prototype;");
tryItOut("/*for..in*/for(const [let, set] = (prototype = this) in <><x><y/></x></>) {yield ({a1:1});this; }");
tryItOut("with({}) { return 'fafafa'.replace(/a/g, [z1,,]); } ");
tryItOut("/*for..in*/for([prop, prop] = 0/0\f in false) with({__parent__: <><x><y/></x></>})");
tryItOut("\tif((__count__ = each).(new (function (constructor) { const __parent__, __proto__; } )(<x/>)).constructor.watch(\"__noSuchMethod__\", (1 for (x in [])))) return; else  if ((<x><y/></x>)( \"\" , @foo) *= 1.2e3.* >>> (#0=[[1]]).yoyo((__parent__ = *::*))) {return <x><y/></x>;with({__parent__: this.__defineSetter__(\"__proto__\", (1 for (x in [])))}){return;this } } else {let __iterator__;with((function  __iterator__ (function::__count__, __parent__)(-0))) }");
tryItOut("/*for..in*/L:for(let [__proto__, constructor] = (eval(\"yield;\", (window <= prop)).@foo) in 3) L: return;");
tryItOut("M:with({prototype: __noSuchMethod__ = 033})yield;");
tryItOut("switch(window) { default: break; break;  }");
tryItOut("{return <x><y/></x>;throw *::*; }");
tryItOut("const __proto__, prototype");
tryItOut("var prop;");
tryItOut("/*for..in*/for(var [__parent__, constructor] = <x/> in (-0 / __noSuchMethod__)) return 033;");
tryItOut("if(<x><y/></x>.(setter)) {return [[]];<><x><y/></x></>; }");
tryItOut("{export *; }");
tryItOut("M:with({constructor: ({})})export *;");
tryItOut("{(<y><z/></y>);const prop; }");
tryItOut("while((0/0) && 0)break M;");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = ({}) in (function ([y]) { })(<x/>)) /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in //h\n<><x><y/></x></>) throw [,,];");
tryItOut("/*for..in*/for(let (\n<y><z/></y>)(this) in ((new Function)(([let (__parent__) @foo])))){let constructor = null, __proto__;\nlet __parent__;\n/*for..in*/for(var [__parent__, __noSuchMethod__] =  \"\"  in {}.__lookupSetter__(\"prototype\")) {return; } }");
tryItOut("/*infloop*/for(const __proto__; [1,2,3,4].slice; ((({}).hasOwnProperty)(prototype = __parent__.__lookupGetter__(\"__count__\")))) {return; }");
tryItOut("/*infloop*/M:for(let __noSuchMethod__ = <><x><y/></x></>.__iterator__; prototype = constructor; [z1] <= false) {export *; }");
tryItOut("while((__count__ = <><x><y/></x></> =  /* Comment */<x><y/></x>) && 0){const __proto__, __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <\t><xxx>{__proto__}</xxx></>) yield");
tryItOut("let ([[prop, , __parent__, ], , constructor, ]) {  }");
tryItOut("while(((this.__defineGetter__(\"constructor\", (this |= <x/>)))) && 0){{}\nif(<y><z/></y>) {new Functionyield *; }\n }");
tryItOut("let (__proto__ = (-1)) { yield; }");
tryItOut("{with({constructor: <x/>})({}).hasOwnProperty{}\nlet (__parent__, __noSuchMethod__ = window) {  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in (this <<= ('fafafa'.replace(/a/g, 'haha'.split)))) /*infloop*/for(const __iterator__; this.zzz.zzz; eval(\"false\", __proto__)) (<y><z/></y>);");
tryItOut("(<x/>);");
tryItOut("if(<><x><y/></x></>) {export *; } else export *\nbreak ;\f\nconst __parent__ = *::*;\n\ngc()\nyield;\n");
tryItOut("do export *; while((prototype) && 0);");
tryItOut("return;");
tryItOut("/*for..in*/for([__iterator__, constructor] = <x><y/></x> == #1# in <><x><y/></x></>) continue ;");
tryItOut("if(__count__.__lookupGetter__(\"constructor\")) {while((-0) && 0); } else { }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <x><y/></x>; function () { export prop; } ; (this ^= *::*)) {(function  __noSuchMethod__ (__parent__) { return <y><z/></y> } ).callgc() }");
tryItOut("yield;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in #1#) continue ;__iterator__;");
tryItOut("let (__parent__, __proto__) { export *; }");
tryItOut("(window);\nexport prototype;\n");
tryItOut("");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = [\n<x/>] in __iterator__ = null) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <><x><y/></x></>) {; }");
tryItOut("with( /* Comment */__count__ .@x:: <x/>)return function(id) { return id }\n");
tryItOut("this.zzz.zzz;");
tryItOut("{export *;const __parent__ = 3; }\nthrow 0x99;");
tryItOut("M:if((uneval(<><x><y/></x></>))) { if (yield [1,2,3,4].slice) } else /*for..in*/for(const __parent__(eval(\"export constructor;\", ({a2:z2}))) in <x><y/></x>) {export ;/*infloop*/do function  constructor (constructor) { continue M; }  while(<y><z/></y>); }");
tryItOut("switch(let (\rconstructor) window) { default: break; case ((1 for (x in []))).call(*, __count__):  }");
tryItOut("let(__noSuchMethod__ = (-0.eval((-0))), __proto__ = (uneval(true))) ((function(){throw StopIteration;})());");
tryItOut("switch((3/0).call(*::*, (0/0\n)) == [11,12,13,14].some.__lookupSetter__(\"__noSuchMethod__\")) { case ++(yield (prop%= '' ))--: if(-@foo &  ''  @ ({ set __proto__(__count__) { ({}).hasOwnProperty } , prop: *::* })) {/*infloop*/M:for(prop; this[1e81]; window) {export \f__count__; } }break; throw __noSuchMethod__;break; case 1: break;  }");
tryItOut("(this);");
tryItOut("if((uneval(<x><y/></x>))) { if (( \"\" .watch(\"__noSuchMethod__\", Math.sin))) gc()} else {return 1.3; }(<><x><y/></x></>);");
tryItOut("/*for..in*/L:for(var __proto__ in (([1,2,3,4].slice)(<></> === (__iterator__ =  \"\" )\n))){\f }");
tryItOut("/*infloop*/for(<x><y/></x>; window; <x><y/></x>) {yield; }");
tryItOut("do {throw [1,,];__parent__ = <x><y/></x>, prop = ({a2:z2}); } while((<x\f><y/></x>.watch(\"__parent__\"\f, new Function)) && 0);");
tryItOut("M:if(5.0000000000000000000000) {continue M; } else  if ((3)[ /x/ ]) {export *; }");
tryItOut("with({__count__: \r( /* Comment */this.zzz.zzz)})/*infloop*/M:for(const ({ prototype: [] }) = 3( /* Comment */4.); (yield <><x><y/></x></\t>).__lookupSetter__(\"prototype\"); (([] = <x><y/></x>.@foo))[undefined]) switch((<y><z/></y>.unwatch(\"__noSuchMethod__\"))) { case new <y><z/></y>: break;  }");
tryItOut("let (__noSuchMethod__) { /*infloop*/M:for(let prop = this; undefined; __noSuchMethod__) {(null); } }");
tryItOut("/*infloop*/for(@foo * <><x><y/></x></>.prototype; \n /x/ ; -0) gc()");
tryItOut("with({}) { for(let y in [5,6,7,8]) export __noSuchMethod__; } ");
tryItOut("/*infloop*/while((<y><z/></y>.__lookupGetter__(\"__count__\")))prop = __count__;");
tryItOut("L: \tif(prototype) yield; else  if (3.141592653589793) {yield this;export __proto__; } else throw {};__noSuchMethod__ = window;\nconst __proto__, __noSuchMethod__;__iterator__ = @foo;\n");
tryItOut("/*for..in*/for(let in ((function (__proto__) { yield --function () { throw <x/>; } () } )(window))){/*infloop*/for((function  __count__ () { ; } ).apply; eval(\"gc()\", window); !true ? (<y><z/></y> ^= prototype) : (({}).__lookupGetter__).call(<x><y/></x>,  /x/g )) {__count__ = <x><y/></x>, __proto__\tfunction  __noSuchMethod__ () { return {} }  }\n }");
tryItOut("if(()) { if ((--window++)) (@foo); else {var __iterator__ = <x/>; }}");
tryItOut("/*for..in*/L:for(let [constructor, __count__] = constructor .. <><x><y/></x></> in <y><z/></y>) null;");
tryItOut("with({}) { return; } ");
tryItOut("__count__, __noSuchMethod__ = ");
tryItOut("\nvar __noSuchMethod__ = this--;\n");
tryItOut("/*infloop*/\rwhile(({(1 for (x in [])), prototype setter: Math.sin }))/*for..in*/L:for(const __noSuchMethod__ in ((/a/gi)(( /x/ (({}), __proto__))))){; }");
tryItOut("for(let y in []);");
tryItOut("L:with(1.3\n)continue ;");
tryItOut("switch((yield ( \"\" .unwatch(\"__parent__\")))) { case 4: throw __parent__\n/*infloop*/do {export constructor;true; } while(4.);case 3: function(y) { yield y; return;; yield y; }break;  }");
tryItOut("if(((/a/gi).apply)( /x/g )) { if (this /  '' .hasOwnProperty(\"__parent__\")) yield;} else {export __noSuchMethod__;; }");
tryItOut("M:do export __proto__; while((<x/>) && 0);");
tryItOut("export *;");
tryItOut("if(default: ) { if (__iterator__) {let prop = <x><y/></x>; }} else constructor\n");
tryItOut("yield typeof 1e4.__lookupGetter__(\"__proto__\");");
tryItOut("M:with({constructor: (<x/>.eval(<x><y/></x>))\f.__count__})(1 for (x in []))");
tryItOut("if(([(uneval( /x/ .__defineSetter__(\"prop\", ({}).__lookupGetter__))) for each (__iterator__ in new <y><z/></y>()) for (__count__.prototype in (-1)) for each (__count__ in <x><y/></x>) for each (__noSuchMethod__ in 0x99)])) { if (++(<><x><y/></x></>.*)) \fyield;\nexport *;\n else {return ([15,16,17,18].filter(eval, this for (prop in 033)));; }}");
tryItOut("/*for..in*/for((__proto__) in (('haha'.split)(<y><z/></y> !== <y><z/></y>))){{return; }/*for..in*/for(var __count__ =  ''  in ([15,16,17,18].filter(<x><y/></x>, <x><y/></x>))) L:if((__parent__.(null))) {(<x/>);yield; } }");
tryItOut("if(constructor = @foo) {<><x><y/></x></>; }");
tryItOut("/*infloop*/for(let [, ] = new Exception((*.prototype), *); (-- /x/g ); (export __proto__)) {( /x/ );export __iterator__; }");
tryItOut("return new (p={}, (p.z = arguments)())();return  /x/ ");
tryItOut("switch((((<x><y/></x>//h\n.@*).@*) .@*:: (new new (<><x><y/></x></>)()()))) { default: case new ({}).__lookupGetter__(): break; case <y><z/></y>.isPrototypeOf(function(id) { return id })\t: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in true) if(constructor) export __iterator__;");
tryItOut("if((({}).__lookupGetter__).call(!*\f, (<x/>.__count__))) { if (<y><z/></y>) yield;throw __count__;} else {gc() }");
tryItOut("if(#1=[#1#]) {(@foo); }");
tryItOut("M:while(((<><x><y/></x></>.__defineGetter__(\"__iterator__\", __count__).__lookupGetter__(\"@foo.__defineGetter__(\\\"__proto__\\\", undefined)\")).hasOwnProperty(\"__count__\")) && 0)yield;");
tryItOut("/*infloop*/for(const __count__; ((<><x><y/></x></>).apply.propertyIsEnumerable(\"__count__\")); <bbb xmlns:ccc=\"(true ? <><ccc:ddd><!--yy--></ccc:ddd></> : [[]])\"><ccc:eee></ccc:eee></bbb>.(<x><y/\t></x>.(<y><z/></y>))) ;");
tryItOut("/*for..in*/M:for(var __parent__ =  /x/  in __parent__) var constructor = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("return <><x><y/></x></>\n");
tryItOut("try { throw null; } catch(constructor) { gc() } finally { ; } ");
tryItOut("L:switch(prototype = 1e81.unwatch(\"constructor\")) { default: break; break; break; case ((true)):  }");
tryItOut("/*for..in*/M:for(let constructor in (({ __noSuchMethod__: prototype, __proto__: __proto__ }\t) = ({ prop: __proto__ }))) {{} }");
tryItOut("/*infloop*/while((let (__iterator__, __proto__) (this |=  ''  ^ function(y) { yield y; export x::__parent__;; yield y; }(*::*, <><x><y/></x></>)))){__iterator__;return getter; }");
tryItOut("if(constructor)  else  if (\n@foo) {constructor;let __count__, __proto__; } else {(1 for (x in [])) }/*for..in*//* nogeckoex bug 349964 */ for  each((__count__)(<x><y/></x>.watch(\"prop\", window)) in ({ __count__: function::prop, __iterator__: __noSuchMethod__ })) return;");
tryItOut("/*for..in*/for(prop = <><x><y/></x></> in this) <><x><y/></x></>");
tryItOut("if('fafafa'.replace(/a/g, ({}).hasOwnProperty) in (new Function(\"var prop = this, prop = true;\"))(this[<x/>],  /x/g )) false else  if ((<x><y/></x>.(<><x><y/></x></>))) {throw <x/>; } else {yield; }");
tryItOut("/*infloop*/for(let __count__; *::*; <x/>) {let __proto__;const function::__proto__; }");
tryItOut("/*infloop*/do prototype; while(window);");
tryItOut("let(prop = (!new ((([null])).__defineSetter__)())[([15,16,17,18].filter(function  constructor (prototype, prototype)__count__, <>\r<x><y/></x></>))], __proto__ = #2=<y><z/></y>.propertyIsEnumerable(\"__iterator__\")) { throw StopIteration;");
tryItOut("M:if(((--(<x><y/></x> * function::setter)) for each (constructor in ~constructor) if (<><x><y/\f></x></>))) continue ; else  if (constructor.__iterator__) {if(*)  else {}return  /x/g ; } else {throw [1,,];throw function(id) { return id }; }");
tryItOut("/*infloop*/do do {return;gc() } while((new (//h\n( /x/ ).call)()) && 0) while(( /* Comment */__iterator__ = __count__, __proto__ = <x/> |= (yield <x><y/></x>).__noSuchMethod__));");
tryItOut("throw StopIteration;");
tryItOut("if(({ get constructor __count__ (prototype, function::__parent__) { /*infloop*/M:do Math.pow while(({ set constructor() { yield <><x><y/></x></> }  })); } : __iterator__.prop = prototype, __parent__: __noSuchMethod__ })) \fwhile((new this(__iterator__, <x><y/></x>)) && 0){__parent__, constructor; } else export *;");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; (#3={a:#3#} && (-3/0 for each (constructor in (function ([y]) { })()) = this)); prototype = __count__.__lookupSetter__(\"prop\")) with(<><x><y/></x></>\n){([,,z1]); }");
tryItOut("let (__parent__ = 1e81 >> undefined, prop = (yield .2)) { /*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in @foo) {export get;; }/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in (-0)) var __noSuchMethod__ = prototype; }");
tryItOut("M:if(<bbb xmlns=\" /x/ \"><!--yy--></bbb>) { if (__proto__ =  /x/ ) if(new (this)()) {break L;prop = prototype, __proto__ = prototype; }} else {return <y><z/></y>\nif(<><x><y/></x></>) { '' ;export prop; } else {export prototype;{} } }");
tryItOut("M:if(__iterator__) const prototype = [[1]]; else  if (__parent__.prop = null.__noSuchMethod__ = (<x><y/></x>.valueOf(\"number\"))) {/*infloop*/while(__proto__.__proto__ = __proto__);function (__iterator__) { yield <x/> }  }");
tryItOut("switch(__noSuchMethod__.__iterator__ setter= (<y><z/></y>).__defineSetter__) { default: break; case 4: with(Boolean(<><x><y/></x></>)){gc() }break; break; break; case <><x><y/></x></>: break;  }");
tryItOut("/*infloop*/do {if(new [](__proto__)) {return (function ([y]) { })(); }L: export __proto__; } while((({ set prototype(__parent__) { yield window } ,  set constructor __parent__ (__noSuchMethod__, __proto__) { return  /x/  }  }) ? window['__noSuchMethod__'] = 3/0 : prototype.constructor = <><x><y/></x></>));");
tryItOut("L: ");
tryItOut("return new (<x/> ,  ''  = [1,,])();");
tryItOut("/*infloop*/do  while(3);");
tryItOut("gc()");
tryItOut("/*for..in*/for(let [__parent__, constructor] = ( /* Comment */ /x/g ) in 4.) var constructor;");
tryItOut("let(__noSuchMethod__ = <x/>) ((function(){continue ;})());");
tryItOut("{}\ngc()");
tryItOut("/*infloop*/L:for(constructor; undefined; prototype) return @foo;");
tryItOut("switch( '' .yoyo((new (((<><x><y/></x></> |= .2) .@x:: this))([15,16,17,18].filter(function  __count__ (prototype)*::*, *).__lookupSetter__(\"__count__\"))))) { default: break;  }");
tryItOut("/*infloop*/M:for(let ({ __iterator__: prototype }) = new function () /x/g --(*, *); __iterator__;  \"\" ) /*infloop*/for(let prototype; eval(\"<x><y/></x>\", (Function())); (function (function::constructor, __parent__) \"\" ).call(true,  '' )\f =  /x/g  || *::*) gc()");
tryItOut("L:do throw (__iterator__ = constructor).call(<><{<><x><y/></x></>}>yyy</{<><x><y/></x></>}></>, ); while((({ prototype: __noSuchMethod__ }) = ({ __count__: (\f{ __count__: prototype, __proto__: __count__ }) })) && 0);");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return;");
tryItOut(" const constructor;");
tryItOut("return true;");
tryItOut("{const __noSuchMethod__ = false, __noSuchMethod__: prop =  /x/ ;gc() }");
tryItOut("while((<><zzz>false</zzz></\f>[prototype([__count__].filter(function (__parent__, __parent__) { var prototype, __iterator__ = <><x><y/></x></>; } ))]) && 0)if(<y><z/></y>) export prop;");
tryItOut("if(<><x><y/></x></>) throw <x><y/></x>;");
tryItOut("throw 3;");
tryItOut("if((uneval(this.__parent__.__proto__))) {if(try { let(prototype = {}, constructor =  '' ) { break M; } catch(constructor if (.__lookupSetter__(\"prop\"))) { throw StopIteration; } catch(__count__) { throw __iterator__; } finally { this.zzz.zzz; } ) <x><y/></x> else  if (<x><y/></x>) return;break L; } else  if (\n([0/0].some(function () { return __count__ } ))) {; } else continue ;");
tryItOut("throw  /x/ ;");
tryItOut("L: (window);");
tryItOut("if((yield #1=[#1#] ? ({ get __parent__ __parent__ (__parent__) { gc() }  }) : <y><z/></y>)) { if ((((<y><z/></y>).watch).call(undefined, <x><y/></x>))(({prototype: [1]}), __parent__ = window)) {continue M;return <><x><y/></x></>; } else {if(<x/>) {{}return; } else export *;break ; }}");
tryItOut("do ({ prototype: ({ prop: ({ prop: __parent__, __noSuchMethod__: __parent__ }) }) }) while((constructor / *::*.throw(null)++) && 0);");
tryItOut("M:switch(__noSuchMethod__ == <><x><y/></x></>.@*) { default: return ([* for (__iterator__ in <y><z/></y>)]);break;  }");
tryItOut("/*infloop*/L:do { } while(<bbb xmlns:ccc=\"(function ([y]) { })()\"><ccc:eee></ccc:eee></bbb> :: [<><x><y/></x></>]);");
tryItOut("if((__noSuchMethod__ = eval(\"yield __parent__;\",  /x/g ))) throw __count__; else ");
tryItOut("/*for..in*/for([__parent__, __parent__] = ( /x/g .propertyIsEnumerable(\"prop\")).throw(prop.(*::*)) :: window in __parent__-= '' ) ");
tryItOut("L:do {;throw __parent__; } while(((3/0 % <><x><y/></x></>.hasOwnProperty(\"__iterator__\"))) && 0);");
tryItOut("/*infloop*/for(const [] = *.*; __noSuchMethod__.__parent__; {}) export constructor;");
tryItOut("/*for..in*/for(let constructor in (([,])(this.__defineGetter__(\"constructor\", ({ __count__: prop, constructor: prop }) = <x><y/>/*\n*/</x>.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; ;; yield y; }))))){ }");
tryItOut("switch(__iterator__) { default:  }");
tryItOut("\n");
tryItOut("{M:if( \"\" ) { if (-0) {export *;var __iterator__ = <><x><yconst __noSuchMethod__ = 1e-81;></x></>, setter = undefined; } else {export *; }}yield; }");
tryItOut("yield false;");
tryItOut("/*for..in*/for(const __count__ in ((( \"\" ).watch)(__iterator__)));");
tryItOut("/*infloop*/for(((([,,].__lookupGetter__(\"function::__count__\")).__lookupSetter__(\"__count__\") !== ((window)[[1,,].hasOwnProperty(\"constructor\")]))).watch(); constructor; this.__defineSetter__(\"constructor\", (new Function(\"export __count__;\")))) {with({prop: #1#})(<x/>); }");
