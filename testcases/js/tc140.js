tryItOut("if( \"\" ) { if (<><x><y/></x></>) {gc()(null); } else {export __noSuchMethod__; }}");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = null in <x/>) continue M;");
tryItOut("([[]])\nreturn ({a1:1}); const __iterator__;");
tryItOut("throw yield <>__parent__</>\n");
tryItOut("__proto__ =  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x/*\n*/><y/></x>) {gc()(<x/>); }\n");
tryItOut("/*for..in*/L:for((void @foo)(__count__(@foo)) in <x><y/></x> ? <x><y/></x> : <y><z/></y>) const prop, __iterator__ = *;");
tryItOut("/*infloop*/");
tryItOut("let ([function::prototype, [], ], __noSuchMethod__) { for(let y in []); }");
tryItOut("/*infloop*/do {return;(<x><y/></x>); } while(<><x><y/></x></>);");
tryItOut("L:with({__iterator__: this.zzz.zzz}){{}/*for..in*/for([__iterator__, prototype] = <y><z/></y> in <x><y/></x>) throw *; }");
tryItOut("do {continue L;({}).hasOwnProperty } while(((.2 = <x/>\f)) && 0);");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __proto__: [__count__, , prototype, prototype, ] }) }) = [11,12,13,14].some++; (let __parent__ = undefined, __parent__ = __iterator__); prototype = (<y><z/></y>.__defineGetter__(\"__proto__\", [1,2,3,4].map))) ");
tryItOut("with({constructor: void 0.yoyo((this)[ '' ]).@foo})(null);");
tryItOut("if(#0=0) {export __noSuchMethod__;throw <x/>; } else  if (3/0++) __count__ else yield null;");
tryItOut("if(<x><y/></x>) { if ([[]]) {; }} else []\nreturn 1.2e3;");
tryItOut("switch(window.propertyIsEnumerable(\"function::__parent__\")) { default:  }\n/*infloop*/while(new (eval)())/*for..in*/for(const delete in (([1])( /x/g )))(@foo);\n");
tryItOut("throw __noSuchMethod__-=<x><y/></x>;\nlet (__count__) { break L; }\n");
tryItOut("/*infloop*/L:for(let prototype(<><x><y/></x></>); (__count__ = window); new String(@foo)) {continue L;constructor }");
tryItOut("let __proto__\nif(new eval()) {yield;/*\n*/ } else  if ([prototype] = ({ __noSuchMethod__: __proto__, __count__: prototype })) {throw <x><y/></x>;with({__noSuchMethod__: window})prototypebreak ; } else {let __parent__ = this, prop;{} }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*for..in*/for([constructor, __parent__] = (<><x><y/></x></>.yoyo(false)) in (new Iterator(window, <><x><y/></x></>))[[z1,,]]) L: /*for..in*/for(let [prop, __count__] = <y><z/></y> in (-1))  get prototype __count__ (__parent__) { return (<x><y/></x>)(<x><y/></x>) } ");
tryItOut("export *;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for([__proto__, __iterator__] = (new Function(*::*)).unwatch(\"__parent__\") in ([<><x><y/></x></> &&  /x/g  for each (constructor in each) for each (__noSuchMethod__ in __noSuchMethod__) if (0.1)])) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const \n[z1,,] in __iterator__ = +-1) {return; }");
tryItOut("export *;");
tryItOut("if(\n(__noSuchMethod__ = undefined.watch(\"__count__\", /a/gi))) {break M; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; this < 1.2e3; (__proto__ = prototype)) {;break ; }");
tryItOut("/*infloop*/for( '' ; this.__defineSetter__(\"__count__\", ({}).hasOwnProperty); new <x/>(<x><y/></x>)) {var prop = <><x><y/></x></>;{gc() } }");
tryItOut("/*infloop*/do {export constructor; } while(<> </>);");
tryItOut("/*for..in*/for(const prototype in (((function  __noSuchMethod__ (function::__proto__) { return <><x><y/></x>\f</> } ).call)(({a2:z2})))){( \"\" );yield; }");
tryItOut("let (({ __proto__: __count__ }), constructor = <x><y/></x>) { export __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(var __iterator__ in @foo) {yield constructor;yield <x/>; }");
tryItOut("switch(window) { default: break;  }");
tryItOut("export __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("with((__iterator__ = (({ __parent__: [] }))))yield\nyield __iterator__;");
tryItOut("export prop");
tryItOut("/*infloop*/for(null; *; <>\t<x><y/></x></>) {yield <x><y/></x>; }");
tryItOut("let (__noSuchMethod__, __proto__ { {let __iterator__ = undefined;var constructor = <x/>, __proto__ = false; } }");
tryItOut("L:if(<x><y/></x>) throw <><x><y/></x></>;");
tryItOut("var __proto__, prop =  '' \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (new ((<x/> -= 033))())((__count__.([15,16,17,18].filter(<><x><y/></x></>, *).__defineSetter__(\"prototype\",  \"\" )) !=  /x/ )) in prop.__noSuchMethod__) {}");
tryItOut("/*infloop*/L:for(const prototype\t; <xxx>{__proto__}</xxx>.(/a/gi); ((/a/gi).call).call(, 3.141592653589793.unwatch(\"prototype\"))) M:with(<x><y/></x>)");
tryItOut("/*infloop*/for(__parent__; (function(y) { yield y; export *;; yield y; })(); (uneval(((uneval(1e81)))))) {var constructor;({}).hasOwnProperty }");
tryItOut("/*infloop*/L:for(let (this)([z1]); __parent__.hasOwnProperty(\"__iterator__\"); new ((-1))()) function (__iterator__) { return <y><z/></y> } ");
tryItOut("{let(({ __proto__: __noSuchMethod__, __count__: x::__iterator__ }) = new ( '' )(__parent__, [1,,]), __iterator__ = #3={a:#3#}) { this.zzz.zzz; }");
tryItOut("/*infloop*/while([, ({ constructor: constructor, constructor: prototype })] = <><x><y/></x></>.isPrototypeOf(<><x><y/></x></>)){yield eval(\"<x><y/></x>\", null); }");
tryItOut("for(let y in []);");
tryItOut("if((__parent__ = ( \"\" .prototype))) {(*); } else {(__parent__);const function::prop = ;\t }");
tryItOut("throw *::*\n");
tryItOut("/*infloop*/M:for(const __parent__ = <x><y/></x>; __noSuchMethod__;  '' ) {;; }");
tryItOut("{yield #2=<><x><y/></x></>; }");
tryItOut("if(this) {gc() } else gc()");
tryItOut("let (prop, __iterator__ = #2=1.2e3) { {} }");
tryItOut("yield;*;");
tryItOut("{prop['__iterator__'] = ((function(y) { yield y; let constructor = <><x><y/></x></>, __noSuchMethod__ = __proto__;; yield y; })())continue ; }");
tryItOut("this.zzz.zzz;");
tryItOut("export __parent__\nvar function::__iterator__ = <y><z/></y>\nvar __count__ = __noSuchMethod__, constructor;");
tryItOut("/*infloop*/M:for(var prototype; __proto__; prop) export *;");
tryItOut("/*for..in*/for(const constructor in (@foo\n *  \"\" ))  ");
tryItOut("/*infloop*/for([z1,,]; <x><y/></x>; *) break \n/*for..in*/for(let prop in ((function ()({prototype: (window.__proto__ = ({}).__parent__)}))(((eval(\"-0\", <><x><y/></x></>))++))))__iterator__ =  /x/ , __proto__;");
tryItOut("if(0 % this.zzz.zzz) { } else {return; }");
tryItOut("export *");
tryItOut("/*for..in*/for(let __noSuchMethod__ = __noSuchMethod__ @  /x/g  >>>= ''  in ({prototype: *::*})) {<><x><y/></x></>; }");
tryItOut("M:if(constructor.prototype = (-0).__parent__) -3/0; else  if ((<x/>)(1e+81, this)) {return ({a1:1});{} } else {gc() }");
tryItOut("/*for..in*/for(let __parent__ in <><>undefined</></>) {(this.__defineSetter__(\"__parent__\", ( /x/ ).__defineSetter__)) }");
tryItOut("(__iterator__ <<= [,])");
tryItOut("if(<x><y/></x>) {function  __count__ (prop) { yield [1], window } return undefined; } const prop;");
tryItOut("if(({ __count__: __count__ }) = ({ constructor: prototype, __iterator__: prop }).eval((new Function(\"{}\"))(__parent__)([@foo], __proto__)).__defineSetter__(\"__noSuchMethod__\", new Function)) {let(prototype = this) ((function(){return @foo;})()); } else {<x><y/></x>; }");
tryItOut("/*infloop*/for(<x/>;  /x/ ; <y><z/></y> ? this : __iterator__.@foo) let (__count__ = let (__proto__ =  \"\" , __noSuchMethod__ = @foo) undefined) { {yield;( '' ); } }");
tryItOut("return <x/>.__count__;");
tryItOut("L:with(this. default: export *;break; case __noSuchMethod__.( /x/g ):  throw(@foo))[1,2,3,4].map");
tryItOut("/*for..in*/L:for(let [__iterator__, prop] =  /x/g .unwatch(\"__count__\") in *::*) {[1,2,3,4].map }");
tryItOut("<x><y/></x>;");
tryItOut("return;\n/*infloop*/L:do {gc()gc() } while(<x/> + 3);\n");
tryItOut("if(<y><z/></y>) {var __parent__ = 1e+81; } else  if (<><x><y/></x></>)  /x/ ; else {var __noSuchMethod__ = prop;gc() }");
tryItOut("let (__iterator__) { if((__count__ = window)) {export __noSuchMethod__; } else  if ((@foo)) export __count__; else __proto__, __iterator__; }");
tryItOut("/*for..in*/L:for(const [prototype, __count__] = ([<><x><y/></x></>].filter((1 for (x in []))))(constructor, [prototype = [[1]]]) in __noSuchMethod__ = ([15,16,17,18].map((1 for (x in [])), this))) {if((__parent__.@*)) { if ((<y><z/></y>.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__))) {const __iterator__ = *;yield <x><y/></x>; }} else {return;return <x><y/></x>; }with({prototype: (__proto__-=<x><y/></x>)})var prototype = @foo; }");
tryItOut("try { throw prototype; } finally { return __iterator__ = <><x><y/></x></>; } ");
tryItOut("let (__count__ = (uneval((new ((-0))(-1))))) { with( /x/g  for (prototype in true)'){let __count__; } }");
tryItOut("/*infloop*/for(let __count__; <x/>; (constructor.propertyIsEnumerable(\"constructor\") + this.throw(constructor))) {export *;if(__count__) { if (window) return  '' ; else {true; }} }");
tryItOut("/*infloop*/while(let constructor)yield ((@foo).watch);");
tryItOut("return ((uneval(eval(\"false\",  /x/ ))));");
tryItOut("(0.1); const __iterator__;");
tryItOut("L: {while((('fafafa'.replace(/a/g, function (default: break; continue ;case -3/0: ;break; , __proto__) { return -0 } ))) && 0){} }");
tryItOut("/*for..in*/for([prop, __parent__] = constructor = , __iterator__ = \n<x><y/></x> in __count__.prop = this.__defineSetter__(\"constructor\", 'haha'.split)) {yield  /x/g ;return; }");
tryItOut(" for each (__proto__ in  /x/g ) for each (prop in constructor.constructor) for (x::__count__.<!--yy--> in @foo <<= <x/>.throw(__count__ ? [[]] : <x/>))");
tryItOut("/*infloop*/while((({ prototype: __proto__, false: prototype }) = (__proto__.(constructor)))){L: {continue ;(-0); }var default: break; , __parent__; }");
tryItOut("let __count__;");
tryItOut("/*for..in*/for(let __proto__ in (p={}, (p.z = <x><y/></x>)())) try { let(({ __count__: ({ __iterator__: prop, prop: __count__ }) }) = new Iterator(constructor).__lookupGetter__(\"__proto__\"), __count__) ((function(){let(<x><y/></x>['constructor'], __iterator__) ((function(){return;})());})()); } catch(__parent__ if ( \"\" .yoyo(*::*))((__count__ = 0.1))) { let(constructor, __noSuchMethod__) { throw __iterator__; } catch(prototype) { constructor = prop; } finally { let(constructor) { return <x/> ? 3.141592653589793 : <x><y/></x>; } ");
tryItOut("throw 0x99; const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <x/>) {(window);throw 0/0; }");
tryItOut("/*for..in*/for(let __iterator__.prop in ((Math.pow)(constructor = undefined))){gc()__noSuchMethod__ }");
tryItOut("if(new (Function)(__noSuchMethod__, window) % @foo) {return;export *; } else yield <><\tx><y/></x></>;");
tryItOut("/*for..in*/for(__iterator__ = ((yield function ([y]) { }) %= <x><y/></x> ? 3 :  \"\" ) in [,]) {let __parent__;throw [z1,,]; }");
tryItOut("/*infloop*/for(({ __iterator__: __noSuchMethod__ }) = -0; (__iterator__.prop getter= 'haha'.split); prototype = prototype) /*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in *::*) var prop = <x><y/></x>;");
tryItOut("L: {/*infloop*/while((((p={}, (p.z = (uneval(this)))())))((prop.( /x/ )--), [15,16,17,18].map(function(q) { return q; },  /x/g )))L:with( /x/g )export *; }");
tryItOut("if(true) { if ((new ((<x/>).watch)(<y><z/></y>))) {/*infloop*/while((eval(\"<x><y/></x>.(window)\", [11,12,13,14].some))){(constructor); } }} else L: yield  \"\" ;");
tryItOut("/*infloop*/while((3.141592653589793 >> null)){if( /x/ ) throw this; else  if (<x><y/></x>) {(new Function(\"false;\"))*, __parent__; } }");
tryItOut("let(constructor) ((function(){for(let y in []);})());");
tryItOut("{/*for..in*/L:for(const constructor(<x/>) in [,,]) return; }");
tryItOut("/*infloop*/for(let __count__; (__count__.__iterator__ = prototype); (((uneval(<y><z/></y> !== true .@*:: undefined | (prototype = *)))) .@x:: (function::__proto__.prop+=).@foo)) {switch(@foo\t) { default:  } }");
tryItOut("/*infloop*/for(this;  /x/g ; <>try { let function::__noSuchMethod__ = __proto__, __proto__; } finally { export prototype; } </>) \nyield (prototype = arguments);");
tryItOut("if(<{constructor}>yyy</{constructor}>) {export __noSuchMethod__; } else throw <><x><y/></x></>;");
tryItOut("L:if(new (eval)\f((let (__parent__, __count__) prototype getter: ([1,2,3,4].map).call.yoyo([1,,])), eval(\" /x/ \", this))) for(let y in [5,6,7,8]) return  \"\"  ==  '' ;");
tryItOut("return <x><y/></x>;");
tryItOut("try { throw StopIteration; } finally { let(x::__proto__) ((function(){continue ;})()); } ");
tryItOut("/*for..in*/for([constructor, __iterator__] = (yield [11,12,13,14].sort) in (eval(\"(this / @foo).eval(<y><z/></y>[constructor])\", yield <y><z/></y>\r.unwatch(\"__proto__\")))) /*for..in*//*\n*/for(__noSuchMethod__ in *) {gc()\tfunction () { yield <y><z/></y> }  }");
tryItOut("let (constructor = function ([y]) { }.throw(3.141592653589793), constructor = true ? <x><y/></x> : @foo = [z1,,]--) { if(([__proto__, , __count__, , ] = prop.(*))) {return;throw constructor; } else  if (;.propertyIsEnumerable(\"__noSuchMethod__\")) let constructor = null, __noSuchMethod__ = ({a1:1}); }");
tryItOut("L: {gc() }");
tryItOut("if(<y><z/></y>.isPrototypeOf(window).isPrototypeOf()) {return <x><y/></x>; } else {continue ;yield @foo; }");
tryItOut("break ; const __count__;");
tryItOut("return;");
tryItOut("yield ([11,12,13,14].map) > __parent__ = __noSuchMethod__;");
tryItOut("with(constructor(window) = ((function  prototype ()<><x><y/></x></>).call)( \"\" .watch(\"__noSuchMethod__\", Math.sin)))__iterator__ = [z1]");
tryItOut("export *; const __proto__;for(let y in [5,6,7,8]) try { let prototype = 033, __proto__ = window; } catch(prop) { gc() } finally { ( /x/ ); } ");
tryItOut("with({}) throw constructor;");
tryItOut("/*infloop*/for([, , []] = ; new ((<><x><y/></x></>).__defineSetter__)(__noSuchMethod__); (new function  __proto__ (constructor)*::*((__proto__ = false), <><\fx><y/></x></>))) {if(eval(\";\", this * constructor))  else ((-0)); }");
tryItOut("/*infloop*/for(constructor; prop; (void return this)) {this;if((-0.unwatch(\n\"__parent__\"))) { if (3/0[<x><y/></x>].__count__ = prop = *) {; } else {return;constructor = <><x><y/></x></>, prototype = []; }} }");
tryItOut("if((new <x/>())) __proto__ = <><x><y/></x></>");
tryItOut("if((undefined)(#1=[#1#]) = <><x><y/></x></> != __count__ = (__parent__ = window)) {let prop = *;function  __proto__ (prop) { throw  '' ; }  } else  if ((((<x/> %= yield;))[<y><z/></y>.__lookupGetter__(\"prop\")])) {continue ; } else return\n");
tryItOut("L:if(\nfalse) break M; else  if (5.0000000000000000000000) __proto__, (window);;");
tryItOut("/*infloop*/for(@foo <<= <x><y/></x>; <y><z/></y>; ) {__iterator__ }");
tryItOut("with({}) { export *; } ");
tryItOut("{/*infloop*/L:for(#1=[#1#].valueOf(\"number\"); ([<x><y/></x>]); undefined) {{} } }");
tryItOut("/*for..in*/for(constructor in <><x><y/></x></>) break ;");
tryItOut("/*for..in*/for(let __proto__ in ((((new Function(\"return;\"))).call)([11,12,13,14].filter))){false; }");
tryItOut("while(((0 < <><x><y/></x></>)) && 0)L: ( /x/ ).watch");
tryItOut("yield;\n__noSuchMethod__;\n");
tryItOut("yield\n");
tryItOut("with((this.zzz.zzz).__defineGetter__(\"__proto__\", Math.pow)){if(<x><y/></x>) { if ( '' ) break M;/*\n*/ else {(<x><y/></x>);; }}const ({ __iterator__: prop, __noSuchMethod__: [__noSuchMethod__, , ] }) = Iterator(constructor); }");
tryItOut("export *; const prototype;");
tryItOut("if(__count__ = [[1]] | __noSuchMethod__.__parent__ ^=  /x/g ) {let (prototype = <y><z/></y>, __proto__) { const constructor, prototype = <x><y/></x>; }return  '' ; } else  if ([11,12,13,14].map) yield ( /* Comment */__noSuchMethod__ if (false));");
tryItOut("if(({ prop: prop }) = (String(__parent__))) (1.3); else  if (((p={}, (p.z = 1.2e3)()) .@ (p={}, (p.z = this)()))) {export *; } else {;gc() }");
tryItOut("let __noSuchMethod__, __count__ = <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__count__ in *) export *;");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 0/0) {(<x><y/></x>); }");
tryItOut("if(({delete: <y><z/></y>,  set prop __count__ ( \"\" ) { ; }  })) if( /x/g ) {((3.141592653589793).apply).apply } else  if (function(id) { return id }) {export *;let __noSuchMethod__; } else {case  \"\" :  } else  if (undefined[<>\t<x><y/></x></>[arguments]] <<= new (true).watch()) {__noSuchMethod__; } else {prototype = prop, __count__ = __iterator__;; }");
tryItOut("gc()");
tryItOut("{yield false; }");
tryItOut("/*for..in*/for(({ __parent__: __count__, __noSuchMethod__: constructor }) in (((this).watch)(new <x><y <x><y/></x>/()))){/*for..in*/for(__parent__ in ((function  __count__ (__noSuchMethod__, yield) { yield window } )(*::*))){gc() }return; }");
tryItOut("(undefined);\nbreak L;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in (new Math.sin())) if(__count__) {__noSuchMethod__, __noSuchMethod__ = <x/>;continue ; } else  if ( /x/g ) {function::__iterator__; } else {yield [[1]]; }");
tryItOut("let(prototype = window) { this.zzz.zzz;");
tryItOut("/*infloop*/L:for(((-1).valueOf(\"number\")); \n[1] >>= window; [z1] & null < <x><y/></x>.isPrototypeOf(prototype)) yield undefined;");
tryItOut("while((({})) && 0){const __iterator__, __iterator__; } const prototype;");
tryItOut("{window; }");
tryItOut("yield;\n@foo\n");
tryItOut("return;");
tryItOut("/*for..in*/for(let [prop, __count__] = eval(\";\", ({ get prop __noSuchMethod__ () { return (new (#1=[#1#])(__iterator__)) } , __count__ setter: Math.pow })) in ) {L:if([1,2,3,4].slice(#1=[#1#], 1e81))  else  if (true(__noSuchMethod__)) continue ; else yield <x/>;L: {var __noSuchMethod__;; } }");
tryItOut("with({}) var __count__, __iterator__;");
tryItOut("switch(#1#) { case <y><z/></y>: 'haha'.splitbreak; default: case 9:  }");
tryItOut("L:switch((this.__defineGetter__(\"__count__\", <><x><y/></x></>))) { case (({prop: <><x><y/></x></> ^= undefined })): with({__iterator__: <><x><y/></x></>}){export *; }case #2=<x><y/></x>(*::*): /*infloop*/for(const constructor; <><x><y/></x></>; <x/>) {yield this; } }");
tryItOut("yield;");
tryItOut("do (<x><y/></x>); while((<x><y/></x>.propertyIsEnumerable(\"__proto__\") %=  \"\" ) && 0);");
tryItOut("/*infloop*/M:while(__noSuchMethod__-=[z1,,] in <><x><y/></x></>.__defineSetter__(\"prop\", 1e-81)){yield false;yield <x><y/></x>; }");
tryItOut("/*infloop*/do {return <x><y/></x>; } while(function  __proto__ () { yield  /x/g  }  in let (__proto__, __parent__) (Iterator()));");
tryItOut("/*infloop*/for(*::*; <x/>; getter) throw  /x/ ;");
tryItOut("if(([3/0])[__proto__ in  '' ]) break ; else  if ((new ('fafafa'.replace(/a/g, (new Function(\"\"))))(false /= undefined))) return <><x><y/></x></>;");
tryItOut("/*infloop*/for([[], [constructor\t, , , , ]] = yield __proto__.__iterator__ = <x><y/></x>\f; eval(\";\", function::__proto__); (yield <x/>)) {(<><x><y/></x></>);/*infloop*/for(var [] = (prototype = prop).__count__; false.__lookupSetter__(\"prop\").throw(-1);  '' .valueOf(\"number\")) (this); }");
tryItOut("{export *;gc() }");
tryItOut("/*for..in*/for(var __count__ = (delete 0) in @foo) ;");
tryItOut("{}");
tryItOut("/*infloop*/while(new (window >>> [z1])(<><x>/*\n*/<y/></x></> %= <><x><y/></x></>, this)){if(<x><y/></x>) {gc() } else  if (window) {<><x><y/></x></>;return @foo; } else {Math.sin }with(window /= <y><z/></y>)yield this; }");
tryItOut("if(@foo) return true;");
tryItOut("if((<><x><y/></x></>.__lookupGetter__(\"__proto__\").unwatch(\"constructor\"))()) var constructor; else  if (new ([15,16,17,18].map(gc, <><x><y/></x></>)) >> [null].some([1,2,3,4].slice)()) {return; }");
tryItOut("/*infloop*/for(new (<x><y/></x>(); __count__.(0); ({ get __noSuchMethod__ __noSuchMethod__ (constructor) { yield prototype >>> this.eval(<x><y/></x>) }  })) {/*for..in*/for(var __count__ in  '' ) __parent__, __count__/*for..in*/for(let [__proto__, constructor] = <x><y/></x> in <x><y/></x>) return; }");
tryItOut("/*for..in*/L:for(constructor in (((1 for (x in [])))(((yield new (new Function(\"yield;\"))(prototype)))))){/*infloop*/for(new true(undefined); *.__defineSetter__(\"__count__\", (1 for (x in []))); new Function) gc() }");
tryItOut("with({}) continue M;");
tryItOut("/*for..in*/for([constructor, constructor] = \nconstructor-=((<y><z/></y>)[0.1]) in (new (-0.prop = <y><z/></y> instanceof [] = ({ __iterator__: __proto__ }))())) continue M");
tryItOut("/*for..in*/for(let __iterator__ = ([11,12,13,14].filter) in <><x><y/></x></>) {*;/*infloop*/M:for(let __count__ = null; [z1,,]; <><x><y/></x></>) gc() } const constructor;");
tryItOut("/*for..in*/for(function (__noSuchMethod__) { return; } ['prototype'] in [z1] == this) throw  /x/g ;");
tryItOut("let __iterator__, __parent__ = ( /x/ .*);");
tryItOut("{while((((window.__proto__ = __iterator__).__lookupGetter__(\"__iterator__\").hasOwnProperty(\"x::prop\"))) && 0){<><x><y/></x></>;<xxx>{__parent__}</xxx> } }");
tryItOut("M:if([1,2,3,4].map) ");
tryItOut("/*for..in*/for(var __noSuchMethod__ =  ''  in -0) ;");
tryItOut("let(__iterator__ = (false ? <y><z/></y> : {})) { this.zzz.zzz;");
tryItOut("__noSuchMethod__, prototype;");
tryItOut("__proto__;");
tryItOut("yield\n");
tryItOut("/*infloop*/while(<x/>){if({}) export __parent__; else  if (window) {return;; }return; }");
tryItOut("/*infloop*/for(let x::__parent__.__parent__; window; <x><y/\t></x> ? [z1,,] :  /x/ ) break ;");
tryItOut("M:if((-__noSuchMethod__ if (true) instanceof eval(\"let __iterator__ = undefined; = constructor\",  /x/g ))) {/*for..in*/for(__parent__ = prop.constructor setter= (function(y) { yield y; ; yield y; }).apply in <x/> %= this) {L:if(1e81[ \"\" ]) {yield  \"\" ; } else return  \"\" ; } }");
tryItOut("/*infloop*/for(var __count__; --window; [(__iterator__ = 0x99) if (*)]) yield;");
tryItOut(";");
tryItOut("/*for..in*/for(constructor.__iterator__ in ((({}).hasOwnProperty)(false + <x><y/></x>.isPrototypeOf(((-0).__count__)))))var function::__iterator__, __parent__ = <><x><y/></x></>;");
tryItOut("switch(false) { case 9: export constructor; }");
tryItOut("throw (let (prototype = ((p={}, (p.z = prop)()))) [z1]);");
tryItOut("let(__iterator__ = ({__iterator__: ({prop: null}),  get __parent__ __noSuchMethod__ () { return ((<x><y/></x>)(0x99)) }  })) ((function(){try { yield (prototype)(null ^=  \"\" , null); } catch(__iterator__ if (function(){with({}) __count__ = prop;})()) { with({}) this } catch(prop if (function(){/*infloop*/L:for(var ({ __proto__: setter, let: constructor }) = ;  /* Comment */constructor; * :: <x><y/></x>) {; }})()) { return; } catch(constructor if /*\n*/(function(){__count__ = prototype;})()) { with({}) { try { var 3; } finally { throw  \"\" ; }  }  } catch(__count__ if void <y><z/></y> -= null) {  \"\" .throw(1e4); } catch(__count__ if (function(){throw __count__;})()) { {} } catch(__iterator__) { ; } })());");
tryItOut("export __noSuchMethod__;");
tryItOut("if([1,,]) yield __noSuchMethod__; else  if ((window.__lookupSetter__(\"prop\"))) export prototype;");
tryItOut("gc()\n__count__ setter: (new Function(\"yield;\"))\nvar , __proto__;\n\n");
tryItOut("/*infloop*/for(__iterator__ = (yield <x/>.valueOf(\"number\")); window.prototype; getter) ");
tryItOut("/*for..in*/L:for(let prop in (-0)) {return;(@foo); }");
tryItOut("L:if(1.3) {Math.sin }\n/*for..in*/M:for(let prop in ((((new Function(\"yield;\"))).call)( /x/ )))export prop;");
