tryItOut("new Function");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in ([false].*)) {if(this\n) __parent__ = this() }");
tryItOut("while((@foo) && 0)return;");
tryItOut("/*infloop*/for(const prop; {with(0.1)return; }; (prototype.(*::*).__lookupGetter__(\"__iterator__\"))) {var __proto__, prototype = function(id) { return id }; }");
tryItOut("if(__count__.prop getter= function  prop () { yield [15,16,17,18].sort(<y><z/></y>, false) } ) { if ((__count__.((1.2e3.unwatch(\"__iterator__\"))))) L: return __count__;} else {}");
tryItOut("do  while(((p={}, (p.z = __noSuchMethod__)())) && 0);");
tryItOut("for(let y in []);");
tryItOut("if(__count__ = (prototype = __proto__).unwatch(\"__parent__\")) {constructor = true, prop = <x/>;yield <x><y/></x>; } else  if (<y><z/></y> ? function::prototype : false++ ? __noSuchMethod__.prop getter= (function(q) { return q; }).call : (new (prototype)(<y><z/></y> === <><x><y/></x></>/*\n*/) .. [1,2,3,4].slice))  else {L:if( '' [window]) { if (<x><y/></x> ^= [,,]) {const __proto__;\rthrow *::*; } else {[1,2,3,4].map }}export *; }");
tryItOut("if( \"\"  === prop.yoyo(__noSuchMethod__) |= new /a/gi(this)) { if (prototype = this) return <><x><y/></x></>; else {let constructor; }}");
tryItOut("L: {L:with({__noSuchMethod__: Error(@foo, <x><y/></x>)}){export constructor; }M:switch(({ __parent__: [], __proto__: ({ __parent__: constructor }) }) = (<y><z/></y> / this.hasOwnProperty(\"constructor\"))) { default: yield prop;break; break;  } }");
tryItOut("switch(eval(\"E\", <x/>)) { case (@foo.propertyIsEnumerable(\"constructor\")): {}default:  }");
tryItOut("break ;");
tryItOut("/*for..in*/for(var __count__ = ~<\tx><y/></x> in @foo) [z1,,];");
tryItOut("{yield ({ for(let y in []);: prototype }) = ; }");
tryItOut("yield [1];\n0/0;\n");
tryItOut("const constructor;");
tryItOut(";L:with(*)export *;");
tryItOut("__proto__ = __count__;");
tryItOut("/*infloop*/for( /x/  >>> @foo; ((1.2e3 && <>(/<x><y/></x></>).@*); undefined) gc()");
tryItOut("if(((<><x><y/></x></> for (prototype in <x><y/></x>)))) return; else {return; }");
tryItOut("yield;");
tryItOut("/*infloop*/for([15,16,17,18].some(Math.pow, ({prototype: <x><y/></x> & <x/>.@*.@foo,  set __proto__(prop)(((@foo.yoyo(<><x><y/></x></>))).__defineSetter__).call(new (__parent__)(-1)(this.__defineGetter__(\"__parent__\", eval)), 0.1, ((<x><y/></x>))) })); ((false.prototype).hasOwnProperty(\"__iterator__\")); (new Date())) {let (__parent__ = <x/>, __parent__ = [,]) { __count__; }/*infloop*/while(<><x><y/></x></>/*\n*/)throw 3.141592653589793; }");
tryItOut("/*infloop*/for(const __noSuchMethod__;  \"\" ; window) {__count__, __noSuchMethod__; }");
tryItOut("yield <x/>\nthrow <y><z/></y>;");
tryItOut("L: {yield; }");
tryItOut("/*infloop*/for(let constructor = <><x><y/></x></>; __noSuchMethod__; *::*) {{yield;yield (function ([y]) { })(); } }");
tryItOut("L: {yield <x/>; }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("/*infloop*/while(window){gc()export prototype; }\n");
tryItOut("L: {const __noSuchMethod__; }");
tryItOut("let (constructor = 0, prop) { Math.pow }");
tryItOut("if(new  /x/ (<><x><y/></x></>)) { if (null) 0x99 else {gc()prop = false, __parent__; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (null.__lookupSetter__(\"prop\"))(<><x><y/></x></>) in __iterator__ = window << window) /*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in <x><y/></x>) {(Function).apply }");
tryItOut("");
tryItOut("L:if((window.\fvalueOf(\"number\"))) {break L;export *; }");
tryItOut("({});");
tryItOut("/*infloop*/L:do throw this -  \"\" ; while([15,16,17,18].map(eval, @foo).throw(eval(\" '' \", undefined)) *= (({prop:  /x/g .isPrototypeOf(true)})));");
tryItOut("if(<x/>) yield  \"\" ;");
tryItOut("do {let prototype = <><x><y/></x></>;/*\n } while(((({__noSuchMethod__: new Function() }))) && 0)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) {{}return; }");
tryItOut("switch(((Function).call(*::*, ))) { default: case 8: L:with({prop: 5.0000000000000000000000}){const prop = __proto__, __parent__;([z1]); }break; L:if(<x><y/></x>) {let __proto__, prop = @;export __parent__; }break; case function  __count__ (constructor)__proto__(3/0): 'haha'.split }");
tryItOut("/*infloop*/for(({ __iterator__: constructor\f }) = (prop.constructor = 0); ((p={}, (p.z = <y><z/></y>)())).yoyo(__proto__.__proto__).__noSuchMethod__ setter= new Function; (prop = __parent__)) yield 1e-81;");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", eval))) {export *; } else  if ((<x><y/></x> ? <x><y/></x> : this)) throw  /x/ ;");
tryItOut("with((this.yoyo(<><x><y/></x></>))){export *;function(q) { return q; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  set __count__(this.zzz.zzz;) { yield __count__ +=  ''  } ) {{}if((__iterator__ = 1e81)) let prop = __proto__, __proto__; else  if (try { yield  '' ; } catch(__proto__) { var constructor = x::constructor, prototype = ({}); } finally { return *::*; }  = this) throw  /x/ ; else {let prototype = window; } }");
tryItOut("if(false) ( '' ); else  if (<x><y/></x>.(-1) ? false : <x/> ||  /x/g ) return null;");
tryItOut("/*for..in*/for(var __iterator__ in ((({}).hasOwnProperty)((function (({ __count__: prototype }), constructor) { yield (new /*\n*/()prototype)(thisfalse, prop) } )()))){export (constructor);{} }");
tryItOut("/*for..in*/for(var constructor = constructor+=<><x><y/></x></> in @foo) {}");
tryItOut("with({__iterator__: eval(\"export *;\", *::*) .@x:: __count__ *= <x><y/></x>})if(this.zzz.zzz) { if (new (({}).hasOwnProperty)(__count__ = __parent__--, (-1) == #1#)) {L: <x><y/></x> } else {/*for..in*/for(let __iterator__ in <><x><y/></x></>) try { (this); } finally { {} } export prototype; }}");
tryItOut("<><x><y/></x></>");
tryItOut("let (prototype = window, prototype) { if([,]) {const prop, constructor;var constructor; } }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if((constructor)) { if (window) /*for..in*/for(var <y><z/></y> in ((Math.sin)( /x/ )))export *; else {gc()/*for..in*/for(prototype in 1e4) <><x><y/></x></>; }}");
tryItOut("switch(undefined.constructor = window) { default: yield __parent__;break;  }");
tryItOut("/*infloop*/for((this)[<x/>]; __iterator__ = set; <y><z/></y>.propertyIsEnumerable(\"prototype\")) { }");
tryItOut("/*infloop*/for(\fvar prototype; (prop.valueOf(\"number\")); [(__parent__.__proto__ = (function::__count__.__iterator__ getter= [1,2,3,4].slice))]) new (*::*)( /x/g );");
tryItOut("L:switch(<zzz>*::*</zzz>) { case <x><y/></x> |=  /x/g : continue ;/*for..in*/for(let [__noSuchMethod__, prototype] = constructor in <x><y/></x>) var __iterator__;break; export prop;break; yield *;;break;  }");
tryItOut("M:if(this in @foo) {yield;continue M; } else  if (<><x><y/></x></>) {continue ; }");
tryItOut("let (({ __iterator__: ({ constructor: prop, __noSuchMethod__: prototype }), __iterator__: __count__ }) = (\t({__parent__.__proto__ })) != ( /* Comment */({})), ({ __count__: __noSuchMethod__, __noSuchMethod__: constructor })) { /*infloop*/M:for((uneval( \"\" )); (this.__defineGetter__(\"__proto__\", this)); window) {; } }");
tryItOut("<x><y/></x>\n");
tryItOut("L:switch( /* Comment */<><x><y/></x></>) { default: return;break; continue ;break; break;  }");
tryItOut("/*for..in*/throw <y><z/></y>;");
tryItOut("try { throw prop; } catch(prototype) { yield <x><y/></x>.__lookupSetter__(\"prop\"); } ");
tryItOut("/*for..in*/for( in [11,12,13,14].filter) {L: { }switch( /x/ ) { case  /x/ : throw <x><y/></x>; }\nreturn; }");
tryItOut("/*infloop*/for(var prop;  /* Comment */*; (void return;)) {{} } const (-1);");
tryItOut("/*for..in*/for(const yield in (this.__defineSetter__(\"constructor\", ({}).hasOwnProperty))) {(new Function(\"export *;\"))if(<><x><y/></x></> *= 1e81) { if (void *::* >>= \f<x><y/></x>) } else <x><y/></x>; }/*for..in*/for(const prop = this.__defineSetter__(\"constructor\", [1,2,3,4].map).@foo & [undefined].map(function (prototype, prop) { return; } ) in ([1,2,3,4].slice)()) {export *; }");
tryItOut("let(__proto__) { __iterator__ = prototype;");
tryItOut("switch(false.propertyIsEnumerable(\"__iterator__\")) { case ({__noSuchMethod__: *::* += <x><y/></x> }): return <y><z/></y>;break; break; case 4: break;  }");
tryItOut("return;");
tryItOut("let __iterator__ = 033, prototype = <y><z/></y>;");
tryItOut("L: /*infloop*/M:for(let prototype; false[ \"\" ]; -0) /*for..in*/for(var prop = this in true) {( '' );return #1#; }");
tryItOut("/*infloop*/M:while((((1 for (x in []))).apply).call((constructor = @foo), )){export __count__;return <y><z/></y>; }");
tryItOut("if(true) L:if((({__parent__ setter: ({}).__lookupGetter__ }))) { if (1.2e3.hasOwnProperty(\"__noSuchMethod__\").throw(__count__)) {yield; }} else (*::*); else  if (delete (__iterator__.__count__ = ( /* Comment */3--))) {return; }");
tryItOut("{const __iterator__, __iterator__ = <><x><y/></x></>/*for..in*//* nogeckoex bug 349964 */M: for  each((5.0000000000000000000000 ? [1,,] : ({a2:z2})).prop in yield __count__ == window.@*) return; }");
tryItOut("/*infloop*/L:while(<></>)/*infloop*/for(({ prototype: ({ __parent__: constructor, __count__: ({ prop: __proto__ }) }) }) = ({}); <><bbb xmlns:ccc=\"(0/0.__defineGetter__(\"__count__\", [1,2,3,4].map))\"><ccc:eee></ccc:eee></bbb></>; @foo & (__parent__ = *)) return;");
tryItOut("M:with({__parent__: __parent__ = 1e-81.@*})yield *;");
tryItOut("L: {__noSuchMethod__ = __parent__, __proto__; }");
tryItOut("try { var prop; } finally { return @foo; } ");
tryItOut("export *;");
tryItOut("if((((__count__ = <><x><y/></x></>))[[11,12,13,14].filter < (({__parent__ getter: (eval).call }))]).__iterator__) /*infloop*/for(<y><z/></y>; <bbb xmlns=\"null\">yyy</bbb>; new Object(|=)) {if(this) {export *; } else {nullexport __iterator__; } } else if(__proto__ = <><x><y/></x></> %= (prototype = <x><y/></x>)) /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <><x><y/></x></>) /*infloop*/for(1e-81; 0x99; {}) yield __count__;");
tryItOut("if((function(y) { yield y; yield  /x/g ;; yield y; }(null)) >  /x/g .hasOwnProperty(\"__noSuchMethod__\")) {; } else ");
tryItOut("L:if(/*<><xxx>{prop}</xxx></>) {let 1e-81 = #1=[#1#], __count__; } else  if (window > 3/0 ('fafafa'.replace(/a/g, function  __noSuchMethod__ () { yield prototype } ))) {} else const __iterator__ = <x><y/></x>, __iterator__ = prototype; const constructor;");
tryItOut("{export __parent__;yield __noSuchMethod__ = #1=[#1#].unwatch(\"constructor\"); } const constructor;");
tryItOut("/*for..in*/for(__iterator__ in ((new Function)(__proto__)))(0.1);");
tryItOut("try { throw StopIteration; } catch\f(delete) { throw __iterator__; } finally { for(let y in []); } ");
tryItOut("if(5.0000000000000000000000) { if (new new Function((true)(.2) = ((<x><y/></x>.throw(#1#)).propertyIsEnumerable(\"__iterator__\")), <x/>[[z1]] >= eval(\"<><x><y/></x></>\", <><x><y/></x></>))) {{return @foo; } } else if( \"\" ) var __parent__ = <><x><y/></x></>; else  if (<><x><y/></x></>) {; } else ;}");
tryItOut("/*infloop*/while(*::*.__parent__){(<><x><y/></x></>);if((false)) { if (undefined) \fnull;} else {export *;yield; } }");
tryItOut("/*infloop*/M:for(({__count__ getter: Math.sin, __parent__: [11,12,13,14].map }); this.__defineSetter__(\"prop\", 'haha'.split); this.__defineSetter__(\"__proto__\", ((function ([y]) { })())())) {return __noSuchMethod__;if(let (__noSuchMethod__) @foo) export *; else  if (constructor.__defineGetter__(\"__proto__\", (1 for (x in [])))) {function(y) { yield y; const __iterator__, prototype = @foo;; yield y; }let __count__ = prop; } }");
tryItOut("while(([(this.zzz.zzz)].sort((new Function(\"/*infloop*/for(const prop = Boolean(<><x><y/></x></>); this; __count__.prototype = -0) {(<><x><y/></x></>); }\")))) && 0)for(let y in [5,6,7,8]) throw -0;");
tryItOut("/*for..in*/M:for(var [__count__, prototype] = <x><y/></x> in *::*) export prototype;");
tryItOut("with({__iterator__: (([15,16,17,18].map((new Function(\"return;\")), <x><y/></x>)) === (({a1:1}) >>= constructor))([].eval(*))}){return; }");
tryItOut("M:if(( \"\" .propertyIsEnumerable(\"__proto__\"))) { if ({} ^=  \"\"  for (__count__ in ([1,,])[[z1,,]]) for each (__parent__ in  '' ) if (<><x><y/></x></>)) {throw  \"\" ; ''  }} else {if((eval(\"gc()\", ({ __noSuchMethod__: constructor, __proto__: __iterator__ }) = (__noSuchMethod__ = <x/>)))) {return <><x><y/></x></>;; } else  if (((<y><z/></y> ? <><x><y/></x></> : <><x><y/></x></>) -= undefined)) /*for..in*/M:for(const __iterator__ = * in __noSuchMethod__) __parent__; else throw (-1);/*infloop*/for(let __parent__; ( /x/g  = false); (__noSuchMethod__.x::__proto__)) {[1,2,3,4].slice } }");
tryItOut("while((((eval(\"export *;\", 1.3))(prototype = #1#))) && 0){{} }");
tryItOut("/*for..in*/for(__iterator__ = <x/> in (-0)) yield null\n(@foo += [z1]);");
tryItOut("if((uneval(#1#))) { } else {Math.pow }");
tryItOut("yield __parent__; const __proto__;");
tryItOut("with(* && <x/>);");
tryItOut("let (__parent__, function::__count__) { <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var __iterator__ = <><x><y/></x></>; <y><z/></y>; <x/>) return __noSuchMethod__\n");
tryItOut("continue ; const prototype;");
tryItOut("gc()");
tryItOut("switch((eval(\"( '' );\", <x/>)--)) { default: case function ()(this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__))(new Number((\nfalse)[(eval(\"switch(__noSuchMethod__\\f) { case 8: return; }\", <x><y/></x>))])): /*for..in*/for(let constructor = <><x><y/></x></> in <><x><y/></x></>) break ;break; case 1e-81.__count__ = *::*: throw <x><y/></x>;break;  }");
tryItOut("/*infloop*/while((--<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)){export function::prototype;gc }");
tryItOut("this.zzz.zzz;");
tryItOut("if(({ prototype: __count__, prop: [, , , __parent__] }) = (uneval(constructor))) return <x><y/></x>; else if(0/0) {yield; } else {__iterator__ = true; }");
tryItOut("L:while((*::*) && 0)export *;");
tryItOut("/*infloop*/for(__iterator__.__noSuchMethod__ = false.isPrototypeOf(#1#);  /* Comment */1e4;  /* Comment */({}.hasOwnProperty(\"__proto__\"))) __proto__, function::__proto__;");
tryItOut("let(__count__ = (gc), __parent__) ((function(){return +(this.zzz.zzz);})());");
tryItOut("L:do { } while(( /x/ ) && 0);");
tryItOut("/*infloop*/for(let [] = ([<x><y/></x> if ([])] += *::*[(eval(\"window\", #3={a:#3#}))]); __proto__.__defineGetter__(\"__noSuchMethod__\", function  __proto__ (__iterator__) { throw  /x/g ; } ) .. __count__ = <y><z/></y>; (eval(\" /x/g \", <x><y/></x>))) const __proto__ = -1, prototype = false; const __parent__;");
tryItOut("/*infloop*/for(var <ccc:ddd><!--yy--></ccc:ddd> = constructor = (__parent__ for (constructor in <><x><y/></x></>) .@ prototype |= *.@*); eval(\"export constructor;\", prop).isPrototypeOf(<><x><y/></x></>.__lookupGetter__(\"getter\")); (p={}, (p.z = (<y><z/></y>.__defineGetter__(\"\", function(y) { yield y; __proto__ = <x><y/></x>, prototype;; yield y; }).__defineGetter__(\"__count__\", function\f  prototype () { return [z1] } )))())) {const prop;__iterator__; }");
tryItOut("while((<x/>) && 0){var __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <x/>) <x<y/>/x;");
tryItOut("throw StopIteration;");
tryItOut("do continue ; while((1e81 >> [((({a2:z2}))[*::*])]");
tryItOut("\n/*for..in*/for(let __proto__ in ((({}).hasOwnProperty)( /x/ )))");
tryItOut("/*infloop*/for(__count__ = <><x><y/></x></>.constructor; ((p={}, (p.z = <x><y/></x>)())); constructor ?  /x/g  : <x/>) yield ;");
tryItOut("/*for..in*/for(prop in eval(\"[15,16,17,18].sort(function(q) { return q; }, <x><y/></x> || *::*)\", ({a2:z2})).unwatch(\"prototype\")) /*for..in*/for(__proto__ in ((Math.sin)(( '' ))))/*for..in*/for(const __proto__.__proto__ in (('haha'.split)(<><x><y/></x></> ? [,,z1] : \t<>[,,z1]</>)))return  /x/g ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ([z1,,])(undefined) in  /x/g ) {(__count__);yield window; }");
tryItOut("L:if(false <  /x/g ) __iterator__");
tryItOut("with(false){export *;throw []; }");
tryItOut("/*infloop*/do {__parent__gc() } while((new Date()));");
tryItOut("with((*::*.watch(\"x::__count__\", function(y) { yield y; prototype;; yield y; })) << <x><y/></x>--)yield;");
tryItOut("if(__proto__ = this) {throw <x><y/></x>;return 0/0; }");
tryItOut("yield 5.0000000000000000000000;");
tryItOut("if(<y><z/></y>) { if (<y><z/></y>) continue ;} else {return this;yield; }");
tryItOut("if(__count__ = (<x><y/></x>.watch(\"__parent__\", 'haha'.split))) {try { gc() } finally { return <><x><y/></x></>; } gc() } else ");
tryItOut("while((prop) && 0){with({}) throw StopIteration;/*infloop*/for(let [, ] = ((try { ; } finally { gc() } ).__proto__)\t; (uneval((#0=[*::*.__lookupSetter__(\"__parent__\")] !=  /x/g .__lookupSetter__(\"__iterator__\")))); [__parent__].map([1,2,3,4].map).constructor) gc() }");
tryItOut("{with({}) throw StopIteration;gc() }");
tryItOut("/*for..in*/L:for(const ({__parent__: 1e-81}) in true.propertyIsEnumerable(\"__parent__\")) {const __proto__;true; }");
tryItOut("/*infloop*/\rfor(let prototype = <x><y/></x>;  \"\" ; <x><y/></x>) {return;return <x><y/></x>; }");
tryItOut(";this\n");
tryItOut("if(new (__parent__.__count__)(this).isPrototypeOf(((this.__defineGetter__(\"__parent__\", Math.pow))[__count__(({a2:z2}))]))) let ({ prop: prototype }) = <><\fx><y/></></>; else  if ( '' ) /*for..in*/for(const function::__count__ = <><x><y/></x></> >= 0 in <x><y/></x>) var __count__, __count__;");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("const constructor; const __iterator__\n");
tryItOut("M:if(__count__ ?  /x/g .\f__noSuchMethod__ : <x><y/></x>.__defineSetter__(\"constructor\", function (__iterator__) { var __proto__, __noSuchMethod__; } )) /*infloop*/for(var prop; <><x><y/></x><//*\n*/>; window) {(function(y) { yield y; ;; yield y; }).call } else  if (0/0) {throw window;return; } else {(0/0).apply }");
tryItOut("{;{} }");
tryItOut("/*for..in*/for(<y><z/></y>.__count__ in *) {}");
tryItOut("with([1,,]){export __noSuchMethod__; }");
tryItOut("if(1.2e3) yield; else  if ((({}).propertyIsEnumerable(\"prop\")) = prop) /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x><y/></x>) {}");
tryItOut("return;");
tryItOut("/*for..in*/M:for(prototype in ((function (j) { yield [z1].__parent__ = <x><y/></x> } )(prototype = <x><y/></x>.yoyo((-1))))){; }");
tryItOut("/*infloop*/L:for(let prototype = <><x><y/></x></>.constructor; ((__noSuchMethod__ for each (prop in ((\n-0))(this.__defineGetter__(\"__count__\", Function),  /x/g )))); [15,16,17,18].map(function (__parent__) { try { for(let y in [5,6,7,8]) yield (<x/> for each (prototype in constructor)); } catch(__proto__ if __count__(<><x><y/></x></>)+=( /x/ --)) { let(constructor, []) { return [__iterator__]; }  } , (constructor+=(prop.(__proto__.__proto__))))) {(({constructor: eval(\"gc()\", <><x><y/></x></>), constructor: *.__lookupSetter__(\"__parent__\") })); }");
tryItOut("/*for..in*/for(var __parent__ in ((([1,2,3,4].slice).call)(prop = __proto__ for each (constructor in [z1]) if (__noSuchMethod__)))){function (__proto__, constructor) { const __parent__; } ; }");
tryItOut("switch(<y><z/></y>--) { default: this.zzz.zzz;if(5.0000000000000000000000) gc()case __parent__.(@foo).@*: break;  }");
tryItOut("L: ;\nyield;\n");
tryItOut("/*infloop*/M:for(; new  '' () , (new (Function)(({a2:z2}), <x/>)) !== __iterator__; (try { const __noSuchMethod__; } finally { __proto__ =  /x/g  } .__defineGetter__(\"prop\", ({}).__lookupGetter__) ? <x><y/></x> ^ <y><z/></y> : (Iterator()))) {return;(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(const __proto__ = (eval(\"( /x/ ).__defineSetter__\", <x><y/></x>)).@* in null++) {if(-{}(\nwindow, <x/>)) {/*infloop*/M:for(var __noSuchMethod__ = __parent__; <x><y/></x>; *::*) throw 1.3; } }");
tryItOut("{}\n");
tryItOut("if(window) with(({})){continue ;var __count__, constructor = <x><y/></x>; } else  if ((void [[1]] <= <y><z/></y>)) {export * }");
tryItOut("\n");
tryItOut("L:if(((<x/> !== constructor))[<x/> >> window]) return this; else {yield; }");
tryItOut("/*for..in*/for(prototype in ((/a/gi)((<><x><y/></x></>.throw(0/0).throw(typeof  /* Comment */__count__: window)) %= (let (prototype, __iterator__) 0)))){/*infloop*/while(<y><z/></y> << []){ }while(( /* Comment */(function ([y]) { })()) && 0){export prototype;yield = null, __noSuchMethod__; } }");
tryItOut("/*infloop*/for(<x><y/></x>-- for (__proto__.__count__ in  \"\" ) for each (__parent__ in prototype); ((new Function(\"{}\\n\"))).call(__proto__ = this.zzz.zzz, <x/>\n); (__parent__.(*::*)).eval(delete.(this))) gc()");
tryItOut("__proto__.function::__proto__ = let;");
tryItOut("{; }");
tryItOut("try { __parent__ = __iterator__; } finally { let(({ prototype: ({ __noSuchMethod__: ({ __count__: __parent__ }), prop: ({ __noSuchMethod__: prop }) }), constructor: ({ __proto__: prop }) }) = __iterator__ = <x><y/></x> for each (constructor in  /x/g ) if (<><x><y/></x></>), __count__) { let(prop, constructor = <x><y/></x>.throw(constructor)) { with({}) { try { yield; } catch(prototype) { export *; } finally { yield <y><z/></y>; }  }  } ");
tryItOut("export *;");
tryItOut("/*infloop*/do {export *;{export *;; } } while(<x><y/></x>.__lookupSetter__(\"__proto__\"));");
tryItOut("switch(<><x><y/></x></>) { default:  }\n");
tryItOut("return prop = (arguments - <x><y/></x>); const constructor;");
tryItOut("/*for..in*/for([function::__iterator__, prototype] = __iterator__ in <x><y/></x>) export *;");
tryItOut("do false; while((this) && 0);");
tryItOut("continue ;continue ;");
tryItOut("switch(__count__) { case 3: break;  }");
tryItOut("L: {/*for..in*/for(const __count__.constructor in <x><y/></x>) {with({__parent__: window}){yield 1e-81;\n } } }");
tryItOut("L: if((true.__noSuchMethod__ =  \"\" )[({ prototype: ({ prop: __iterator__, prototype: __count__ }), __count__: __noSuchMethod__ }) =  /* Comment */Function( /x/g )]) __noSuchMethod__; else  if (__parent__.__defineGetter__(\"prop\", (<y><z/></y>).__defineSetter__)) {M:do yield <><x><y/></x></>; while(( /x/g ) && 0);{return <y><z/></y>; } } else /*for..in*/for(const __noSuchMethod__ = (this.__defineGetter__(\"constructor\", function  __parent__ ()<y><z/></y>) ? null : <x/>.__lookupGetter__(\"constructor\")) in <y><z/></y>) export *;");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("/*infloop*/while(((constructor)(__iterator__,  /x/ )))throw (-1); const __noSuchMethod__;");
tryItOut("gc()");
tryItOut("{export *;const prop = <><x><y/></x></>; }");
tryItOut("L: *;");
tryItOut("M:if(eval(\"export *;\", <x><y/></x>)) \t else (4.);");
tryItOut("{return <y><z/></y>;\ngc()\n }");
tryItOut("let (__iterator__ = new Number(undefined.constructor), __iterator__) { /*infloop*/do {[1,2,3,4].sliceexport __parent__; } while((<><x><y/></x></>).call(true, <x><y/></x>, <y><z/></y>)); }\n");
tryItOut("if(this) yield; else  if (<y><z/></y>) (window); const __count__;");
tryItOut("/*for..in*/for(let prop in (this.__defineSetter__(\"__proto__\", <x/>))) {/*infloop*/for(var constructor; __iterator__.prop; +prop.prop) {with(<y><z/></y>){var __count__; } } }");
tryItOut("/*for..in*/for(const [__count__, prototype] = [*::*].sort(gc) :: (<><x><y/></x></>.__lookupSetter__(\"__proto__\")) in (gc()).unwatch(\"__iterator__\")) gc()");
tryItOut("L:with({__proto__: ()})export *;");
tryItOut("/*infloop*/for(1e4; __count__; this) {yield @foo;__iterator__ = <><x><y/></x></>, prop; }");
tryItOut("{/*infloop*/for(const __noSuchMethod__; (p={}, (p.z = (function (\t) { return prototype } (<x><y/></x> *= <><x><y/></x></>, this)))()); (undefined)) {/a/giwith(__iterator__)this; }\t }");
tryItOut("throw #1#; const __proto__;");
tryItOut("/*infloop*/for(let prototype; <x/>; true) {return;throw 4.;\t }");
tryItOut("return\nreturn;");
tryItOut("function(q) { return q; }");
tryItOut("while((true) && 0){return window;return <x><y/></x>; } const __parent__;");
tryItOut("do {yield <><x><y/></x></>;let __count__ = [1], constructor = this; } while((__count__) && 0);");
tryItOut("/*infloop*/do {/*infloop*/do window; while( /x/ ); } while(<x/> &= @foo in  /x/g );");
tryItOut("break L");
tryItOut("L: {yield;export *; }");
tryItOut("var prop;[1,2,3,4].slice");
tryItOut("switch((((undefined)[ \"\" ].throw(window)).__defineGetter__(\"__iterator__\", (#1=['haha'.split])))) { case 0: break;  }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("/*infloop*/while(<x><y/></x>){{}yield; }");
tryItOut("with(@foo)1e+81;");
tryItOut("/*infloop*/for(__parent__; this.__defineGetter__(\"__proto__\", /a/gi); true.__defineSetter__(\"__proto__\", function  __iterator__ () { __parent__, __noSuchMethod__; } )) {do ; while((<><x><y/></x></>) && 0);(null); }");
tryItOut("var prop = <><x><y/></x></>, prototype;");
tryItOut("return @foo;");
tryItOut("return;");
tryItOut("return function(y) { yield y; throw  /x/g ;throw ;; yield y; }([5.0000000000000000000000 !== __noSuchMethod__].filter(Function));");
