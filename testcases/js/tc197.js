tryItOut("M:do let ([, , ]) { ; } while(( \"\" ) && 0);");
tryItOut("with({}) { @foo } ");
tryItOut("/*for..in*/for(var constructor = new __parent__.constructor getter= (1 for (x in []))(undefined[0/0], ({__noSuchMethod__: <\f><x><y/></x></> })) in ({}).hasOwnProperty([,,])) {*prop; }");
tryItOut("L: {L:with({__parent__: <x><y/></x>}){constructor; } }");
tryItOut("if(<x><y/></x> instanceof *) {throw *::*;throw -0; } else  if (3/0) var <x/>; else {return 5.0000000000000000000000; }");
tryItOut("{function  __noSuchMethod__ (__iterator__)function ([y]) { }throw <><x><y/></x></>; }\n__parent__ = this, prototype = false;\n");
tryItOut("/*infloop*/M:for(let ({ constructor: [prototype, prototype, ], prop: ({ constructor: ({ prop: ({ prototype: __iterator__ }), __iterator__: __count__ }) }) }) = ({ constructor: __count__, __noSuchMethod__: each }) = (++constructor); <x/>; ( /* Comment */prop) !== null) throw <x><y/></x>;gc()");
tryItOut("return\nbreak ;");
tryItOut("let prop, constructor = <x><y/></x>;");
tryItOut("yield prop; const constructor;");
tryItOut("( /x/ );\ngc()\n");
tryItOut("/*infloop*/for(constructor; null.hasOwnProperty(\"__noSuchMethod__\"); *++) {{}/*for..in*/for(const constructor = (\n*) in <y><z/></y>) {; } } const __iterator__;");
tryItOut("/*for..in*/for(let __parent__ in (((function::__noSuchMethod__ = <zzz>([*].some((-0).__defineSetter__) ..  /x/g .__defineGetter__(\"constructor\", function  __parent__ () { break M; } ))</zzz>))(<><xxx {constructor}={*::*} /></>.__iterator__.__noSuchMethod__ *= [(yield  /x/g ) for each (__parent__ in <y><z/></y>) for each (prototype in __proto__) for (__proto__ in (-1))])))let (__count__, constructor) { yield; }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var 1e4['__parent__'] in  \"\" ) <x/>;");
tryItOut("if(--4.) {yield 1e-81;/*infloop*/L:for( ''  :: null; constructor.__iterator__ getter= (( /x/g ).__defineSetter__).call;  /x/ ) ; } else  if ( /x/g .__defineSetter__(\"__iterator__\", ({}).__lookupGetter__) >>> 1e81\r) {(4.); const __proto__;yield <x><y/></x>;\n__noSuchMethod__;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(gc().prototype in <x><y/></x>) false;");
tryItOut("/*infloop*/while(new (Math.pow)((([,]++).yoyo(new gc(<x/>, __parent__))))){if('fafafa'.replace(/a/g, <x><y/></x>)) { if ((__noSuchMethod__ = __parent__)) export __count__;} else {export *; } }\f");
tryItOut("L: {\t__parent__, constructor;([,,z1]); }");
tryItOut("M:do continue M; while(((@foo.__proto__ = <x><y/></x>)) && 0);break M;");
tryItOut("throw StopIteration\n");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(let constructor = this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }) in 'fafafa'.replace(/a/g, eval)) return; const constructor;");
tryItOut("{} const constructor;");
tryItOut("L:if(@foo !== true) { if (__proto__|=<x><y/></x>) prototype, __count__ = window; else ;}");
tryItOut("{do throw true; while((3.141592653589793.watch(\"__count__\", function(id) { return id })) && 0)\n }");
tryItOut("/*infloop*/do  while(__noSuchMethod__ = break ;);");
tryItOut("if([] = (#2=[false].unwatch(\"prototype\"))) { if (prototype.prototype setter= [1,2,3,4].slice) break L; else {[1,,]; }}");
tryItOut("{if(delete ({}).__lookupGetter__()) { if (new (({}).__lookupGetter__)(__noSuchMethod__.__noSuchMethod__, window)) {switch(@foo) { default: break;  } } else {}}\nyield;\n }");
tryItOut("/*infloop*/do \rswitch(({__parent__\t: <><x><y/></x>\f</> })) { default: break;  } while((new Math.sin(this) -= (uneval(new Date(@foo)))));");
tryItOut("while(((undefined)() >= case 1: break; /*for..in*/for(let __parent__.if(<x><y/></x>) { if (undefined) let prototype, prototype; else export __iterator__;} in 3) {if(__noSuchMethod__) continue ; }break; case __iterator__ =  '' : \nyield;default: return;break; ) && 0){if((export prop)) {throw #1=[#1#];gc() } else {}return function(id) { return id }\n\n }");
tryItOut("if((yield let (prototype, __iterator__) arguments)) yield  /x/ ; else let (({ __proto__: __iterator__ })) { /*\n*/export __iterator__; }");
tryItOut("{/*infloop*/M:for(<y><z/></y>[window].__defineGetter__(\"__iterator__\", ); (eval(\"1e+81.__noSuchMethod__ =  /x/ \", <x><y/></x>.constructor)); eval(\"yield <x><y/></x>;\", <x/>.__lookupGetter__(\"__iterator__\"))) yield;continue \n }");
tryItOut("export prototype;\nyield <x/>;\n");
tryItOut("if((function(q) { return q; })(( \"\"  ? <x><y/></x> : 3/0), 1e-81)) { if ([1]) {({a1:1});export *; } else {let __parent__, __noSuchMethod__;let let = <x><y/></x>, prototype = __iterator__; }}");
tryItOut("if((#2=[([z1,,])])) {break ; } else  if (new (__noSuchMethod__ = <y><z/></y>)(this.__defineGetter__(\"constructor\", function  __count__ (__proto__, __iterator__) { return false } )).unwatch(\"__noSuchMethod__\").isPrototypeOf(\twindow)) {export prototype;if(*::*) { if (<y><z/></y>) {const __count__ = <x><y/></x>, __proto__ = -1; } else 0.1;} }");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = __noSuchMethod__ in __parent__ = prototype.isPrototypeOf((0.yoyo(__count__)))) {L:while(((<x><y/></x>.(({a2:z2})))) && 0)yield <><x><y/></x></>\t;return <x><y/></x>; }");
tryItOut("/*for..in*/for(let __parent__ in ((({}).hasOwnProperty)((window)(__noSuchMethod__)))){eval(<><x><y/></x></>); }");
tryItOut("{}break M;");
tryItOut("while(((yield  /x/ )) && 0){/*for..in*/for(var [constructor, constructor] = .2 in <y><z/></y>) {throw window; }export *; }");
tryItOut("with({__iterator__: __noSuchMethod__.prop = *::*\n}){__count__; }");
tryItOut("with({<x><y/></x>.hasOwnProperty(\"__proto__\"): __iterator__ = false})yield;");
tryItOut("if(#0=*) {return;throw 4.; }");
tryItOut("switch([this].some(function (prop) { return -3/0 } )) { case 4:  }");
tryItOut("with((p={}, (p.z = ('fafafa'.replace(/a/g, (1 for (x in [])))))())){for(let y in [5,6,7,8]) __noSuchMethod__ = <y><z/></y>;(4.); }");
tryItOut("throw prototype;");
tryItOut("if((.__iterator__.__lookupGetter__(\"__proto__\"))) ; else let (__noSuchMethod__) { return this; }");
tryItOut("if(__proto__) {break ;yield null; } else  if (prototype) return [1]; else (<y><z/></y>.watch");
tryItOut("/*for..in*/for(var __count__ = ((uneval(({}).hasOwnProperty(prop))).prop) in let (prototype) [,]) {(prototype);(1 for (x in [])) }");
tryItOut("M:while(((__count__.__defineGetter__(\"prop\", ({}).hasOwnProperty)) %= ((-1)).__defineGetter__(\"__iterator__\", Math.sin)) && 0){;return *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in (({ prop: prop }) = (@foo).call(@foo, @foo, 3/0))) gc()");
tryItOut("prop = ([1,2,3,4].slice).call(<><x><y/></x></>, ) ? <x><y/></x> | [,,] : 033.prop = null,  /x/g ");
tryItOut("/*for..in*/for(prototype in ((function(y) { yield y; M:if(this) throw <y><z/></y>; else ({a2:z2});; yield y; })(yield ({a1:1})))){/*infloop*/for(let __count__; @foo; (-0)) yield;prototype, constructor }/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *::*) yield;");
tryItOut("__proto__, prop = <x/>\nwhile((*) && 0)yield;");
tryItOut("/*for..in*/for\t(const [prop, constructor] = (RangeError(return *;)) in true %= <x><y/></x>) if(<><x><y/></x></>) case 8: yield  /x/ ;default: __proto__ = <y><z/></y>case 1: function(q) { return q; } else  if (null) {export __proto__; }");
tryItOut("/*for..in*/\tfor(let prop = __parent__ in <x><y/></x>) break M;");
tryItOut("L:if(true = <x><y/></x>) {{}return; } else ;");
tryItOut("let(__iterator__, ({ __count__: constructor }) = <y><z/></y> ? false-- : (eval(\"\", <x/>))) { constructor = (~ '' ), prototype = (<x><y/></x>.( /x/ ));");
tryItOut("/*infloop*/for(new (Math.sin)(\t \"\"  - -1).__iterator__; (let (__count__, prop = constructor.throw(<><x><y/></x></>)) (new ((<y><z/></y>.throw(*::*)))())); ((__iterator__ = <><x><y/></x></> for each (__iterator__ in <><x><y/></x></>)))) {function  __noSuchMethod__ () { yield undefined }  }");
tryItOut("L: {__iterator__ = -0; }");
tryItOut("do {return;__noSuchMethod__; } while((<{prototype}><ccc:ddd> </ccc\t:ddd></{prototype}>) && 0);");
tryItOut("export __parent__\n");
tryItOut("{export __proto__; }");
tryItOut("/*for..in*/for(const __proto__ in [<x/> if (#3={a:#3#})]) throw *; const __parent__;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: prototype, constructor: __iterator__ }) = ([1,2,3,4].map)(window, __parent__); .2--; *::* == //h\n*) {yield;return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (eval(\"while((window) && 0)\", this.__defineGetter__(\"prop\", eval) <= (new Error(<x><y/></x>)))) in (/a/gi)(<y><z/></y>,  /x/g ).eval(new function  prop (constructor, __count__) { return <x/> } (<><x><y/></x></>, #3={a:#3#}))) {const constructor, constructor; }");
tryItOut("(1 for (x in []))return 3/0\nreturn;");
tryItOut("with({constructor: <x><y/></x>.prototype = new (this)()})if(*) {{}return; } else  if ( /x/g ) gc()");
tryItOut("do {let prop; } while(((\n<x/>)) && 0);");
tryItOut("{throw <>\r<x><y/></x></>;\n;\n/*infloop*/for(__noSuchMethod__.hasOwnProperty(\"constructor\"); delete function(id) { return id }; <><x><y/></x></>.valueOf(\"number\")) {(<y><z/></y>); } }");
tryItOut("{throw <x/>\n }");
tryItOut("throw prototype;\n/*infloop*/M:for(var constructor; __parent__ = constructor &= (window < <><x><y/></x></>);  /* Comment */<x><y/></x>.__lookupSetter__(\"__count__\")) /*infloop*/M:for(const constructor; this.__defineSetter__(\"function::constructor\", <y><z/></y>) < <x><y/></x>.@*; ({__proto__: 0 })) {const __noSuchMethod__ = this; }\n");
tryItOut("return yield <><x><y/></x></>;;");
tryItOut("return;");
tryItOut("if(! \"\" ) {return  /x/ ;return; } else  if (undefined >= <><x><y/></x></>) {export *; }");
tryItOut("{<x/> }");
tryItOut("__parent__ = __count__;");
tryItOut("continue ;");
tryItOut("*");
tryItOut("try {  } catch(__proto__) { 5.0000000000000000000000; } finally { export *;//h\n } ");
tryItOut("L:if(__proto__.__lookupSetter__(\"__count__\")) {gc() } else {function  __parent__ () { return function ([y]) { } } prop = *::*; }");
tryItOut("L:  { yield } ");
tryItOut("L:if((let (__count__ = 0) <y><z/></y>)) { if (__parent__ = false) {return prop; }} else export __parent__;");
tryItOut("/*infloop*/while(++3/0)gc()");
tryItOut("/*infloop*/do {<><x><y/></x></>;/*for..in*/for(const __iterator__ in ((({}).hasOwnProperty)(<y><z/></y>)))return; } while(<xxx>{prototype}</xxx>);");
tryItOut("(this);");
tryItOut("/*infloop*/for(<x><y/></x>.(false); 1.2e3; (({}).__lookupGetter__).apply(@foo, <><x><y/></x></>)) {if(__parent__ = undefined) {export *; } else const __noSuchMethod__, __noSuchMethod__;export *; }");
tryItOut("M:do {/*infloop*/do if( '' .__defineSetter__(\"constructor\", gc).@foo) {continue ;return null; } else  if (Function() ? new String() : ([1,2,3,4].map).call(<x><y/></x>.propertyIsEnumerable(\"get\"), )) __parent__ = <y><z/></y>, __iterator__; else export prototype; while(); } while((1.3) && 0);");
tryItOut("{falsereturn; }");
tryItOut("/*for..in*/for(let prototype = ({a2:z2}) in this.__defineSetter__(\"constructor\", (__proto__).__defineSetter__)) {let __noSuchMethod__ =  \"\" ; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("{if(<xxx>{\t__iterator__}</xxx>) /*for..in*/for([__count__, prototype] = 4. in [z1,,]) const each = <x><y/></x>; else {gc() } }");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = null in true)  '' ;");
tryItOut("/*for..in*/for(__count__ = 'fafafa'.replace(/a/g, 'haha'.split) in undefined) {return; }");
tryItOut("with(let (({ __iterator__: __iterator__ }), ((#3={a:#3#} == true)[({ set __iterator__(__noSuchMethod__, __count__)prop, __proto__: <y><z/></y> })])) (p={}, (p.z = new String(undefined, <x><y/></x>))()))/*infloop*/for(<><bbb xmlns:ccc=\"false\"><ccc:eee></ccc:eee></bbb></>; *::*; prototype = <><x><y/></x></>) {this }");
tryItOut("for(let y in []);");
tryItOut("if([1]()) { if (yield 0.1 ? (prop.__proto__) : this.@foo) {return  /x/g ; const __parent__\n } else const __proto__, __parent__;}");
tryItOut("return (uneval(4.));");
tryItOut("let(({ __proto__: constructor, __iterator__: ({ prop: ({ __proto__: ({ __proto__: constructor, constructor: __count__ }) }) }) }), ({ prop: true['prop'] })) ((function(){throw constructor;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prop.prop in <><x><y/></x></>) {\texport *;export *; }");
tryItOut("with({}) try { return; } catch(__parent__ if (function(){__iterator__ = __iterator__;})()) { return false > <y><z/></y>; } finally { export constructor; } ");
tryItOut("if((yield new ( \"\" )(try { return window; } catch(__parent__ if (function(){gc()})()) { gc() } ))--) let __iterator__; else  if ((*::*).call(({ get constructor() { throw undefined; }  }), __noSuchMethod__.__count__,  '' )) {gc() } else {Functionreturn; }");
tryItOut("{throw *;break L; }\n");
tryItOut("if(<x/>\n) {let __count__ = <><x><y/></x></>, __iterator__ = <><x><y/></x></>;; } else  if (<x><y/></x> && *) gc()");
tryItOut("/*infloop*/for(var __noSuchMethod__; <x/>; true) {const function::prototype = 1.2e3, __noSuchMethod__; }");
tryItOut("throw this.__defineGetter__(\"__noSuchMethod__\", (function(id) { return id }.__defineSetter__(\"__iterator__\", function (prototype, __count__) { const __iterator__; } )).__defineSetter__)//h\n;");
tryItOut("function  constructor (__iterator__) { return yield *::* } ");
tryItOut("let(__iterator__) { for(let y in [5,6,7,8]) return;");
tryItOut("/*for..in*/for(const function(id) { return id }['set'] in (((({}).hasOwnProperty).call)(yield @foo))){continue ; }");
tryItOut("(undefined).__defineSetter__\nyield  /x/g ;");
tryItOut("throw __noSuchMethod__;");
tryItOut("export __iterator__;");
tryItOut("M:if(new ({}.@foo)(([15,16,17,18].sort(this, (new gc([[]])))))) {(undefined);M:if(<x><y/></x>) {yield null; } }");
tryItOut("with(__proto__.__proto__ getter= function (__count__, __count__)undefined)/*infloop*/for(window ? <x><y/></x> : 3 % (function(q) { return q; }\t).call((let (prop, __noSuchMethod__ = [1]) @foo),  /x/g .watch(\"constructor\", 0)()); [11,12,13,14].some; {}) {L:if(window) { if (({a2:z2}) ^ constructor) (<><x><y/></x></>); else {<x\n><y/></x> }} }");
tryItOut("(<x/>);");
tryItOut("/*infloop*/while(null)__parent__, prop = undefined\n");
tryItOut("if([11,12,13,14].map) { if (-(#2=({__noSuchMethod__: <x><y/></x>}) .@*:: this.zzz.zzz) && /*\n*/eval) switch((eval(\"<x><y/></x>\", <><x><y/></x></>))) { default: break;  }} else {;/*infloop*/for(const __parent__\f; prototype; (({}).__lookupGetter__)()) {/*infloop*/while(this){yield <y><z/></y>; }throw *::*; } }");
tryItOut("gc()");
tryItOut("if(new (function  prop (prototype) { yield <y><z/></y> } )([,].__defineGetter__(\"__proto__\", (<x><y/></x>).call))) {L: {break M;yield  /x/g ; } }");
tryItOut("export __iterator__\n'haha'.split const __parent__;");
tryItOut("/*for..in*/for(const (__parent__) in ((({}).__lookupGetter__)(new [1,2,3,4].map())))return <><x><y/></x></>; const \nconstructor;");
tryItOut("gc()");
tryItOut("M:if(1e+81) { if (window) {yield 0/0;; } else {undefined;gc() }}");
tryItOut("L:switch((new Iterator())((-1).__defineGetter__(\"__iterator__\", function () { return true } ), #1=[#1#])) { case (((p={}, (p.z = <><x><y/></x></>)())).__defineGetter__(\"__iterator__\", function(y) { yield y; this.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__); yield y; })): prototype = prototype;break;  }");
tryItOut("return;");
tryItOut("({ prop: __iterator__ }) = __noSuchMethod__;");
tryItOut("if(__parent__ = __count__) { if (\n<><x><y/></x></>) gc() else {yield;@foo; }}");
tryItOut("let (__proto__ = __iterator__.constructor, __proto__ = prop = window) { throw <x/>; }");
tryItOut("throw StopIteration;");
tryItOut("with({}) { for(let y in [5,6,7,8]) prototype = __noSuchMethod__; } ");
tryItOut("M:with(-0){/*infloop*/do {(1 for (x in []))const prototype; } while(*::* && <><x><y/></x></>); }");
tryItOut("while(([true]) && 0)export *;");
tryItOut("for(let y in [5,6,7,8]) let(__parent__ = __noSuchMethod__) { return __count__;");
tryItOut("M:if(prop .@ (new function (__iterator__) { yield this } ( '' ,  '' ).throw('fafafa'.replace(/a/g, ({}).__lookupGetter__)) ^ +-1)) {throw window; } else  if (([15,16,17,18].sort((({}).__lookupGetter__).call, [15,16,17,18].some( '' , {})) ? constructor.constructor = [z1,,] === <><x><y/></x></> : [[1]] for (__noSuchMethod__ in [,]))) [[]];");
tryItOut("/*infloop*/M:for(const ({ constructor: #1#.valueOf(\"number\")['__parent__'], constructor: ({ __iterator__: prototype }) }) = ({}).constructor.__proto__; constructor.__parent__ = window.@foo; 033) {return; }");
tryItOut("let([prototype], prototype = *) { return;");
tryItOut("/*for..in*/for(let in (('haha'.split)(<y><z/></y>.watch(\"constructor\", <><x><y/></x></>)))){yield;(undefined); }");
tryItOut("yield (__parent__ >= this).hasOwnProperty(\"__iterator__\");");
tryItOut("/*infloop*/for(const prop; new Exception((<x/>\f.@*))++; [15,16,17,18].filter(({; }).call, <x/> +=  /x/g )) const constructor = <x><y/></x>;");
tryItOut("/*infloop*/for(const __noSuchMethod__; this.zzz.zzz; (yield @foo ^=  '' )) {continue ; }");
tryItOut("L: {return; }");
tryItOut("/*infloop*/for(const [] = [1,2,3,4].slice(); eval(\"(this.__defineSetter__(\\\"__count__\\\", (1 for (x in []))))\",  /x/g ); constructor) continue L;");
tryItOut("L:with([, ] = prototype * constructor){break ;while((prototype =  '' ) && 0)if(null) {function(y) { yield y; const prop;; yield y; } } else  if ( /x/g ) prototype, __proto__ = <><x><y/></x></>; else __parent__ = window; }");
tryItOut("with(false)prototype;");
tryItOut("/*for..in*/for(const __iterator__ in ((function(y) { yield y; yield;; yield y; })((prop !=  \"\" )))){yield <y><z/></y>;return; }\n");
tryItOut("with({__count__: null.__count__}){/*infloop*/for(const __parent__; new (<y><z/></y>)(); #1=[prop]) __parent__ = this;throw StopIteration; }");
tryItOut("\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in 3.141592653589793) {while(([[]]) && 0){export *;; } }");
tryItOut("with({}) throw __proto__;");
tryItOut("switch(undefined) { case 8: ({}).hasOwnProperty const constructor;break; default: break; break;  }");
tryItOut("if(prototype.(<><x><y/></x></>)) {yield;prototype, __iterator__ = 0/0; } else  if (void -1) {return; } else return;");
tryItOut("/while((constructor) && 0){(1.3)\t; }");
tryItOut("return  /x/g \n");
tryItOut("{window; }");
tryItOut("if((-0)) yield; else  if (++(-1) -= *) {constructor = __iterator__;let constructor = [[]], prototype; } else {}");
tryItOut("/*infloop*/for(const prototype = ({ prototype: ({ prop: __noSuchMethod__ }), prop: constructor }) = (__iterator__(@foo)); new (false.constructor = this)(); __noSuchMethod__.prop = __count__.__parent__ setter= (1 for (x in []))) {}");
tryItOut("M:if(<><x><y/></x></>) gc() else function  __noSuchMethod__ (__noSuchMethod__, prop)<y><z/></y>");
tryItOut("yield *;");
tryItOut("L: {break ; }");
tryItOut("/*infloop*/M:for((let (({ __proto__: __parent__ }), constructor) <x/>.__defineSetter__(\"constructor\", new Function)); new (this && <><x><y/></x></>)(null); __parent__.__noSuchMethod__ setter= ((<><x><y/></x></>).apply).apply[@foo.@foo.__parent__]) if(@foo) {continue ;var __iterator__ = 3, __iterator__; } else  if (<x><y/></x>) break ;");
tryItOut("if( /x/g  >> <x/>) {(*); } else  if ( /x/  ^= <x><y/></x>) {return function(id) { return id };/*infloop*/for(#3={a:#3#}.propertyIsEnumerable(\"__proto__\"); prototype.(true); __iterator__ = <><x><y/></x></>) export __count__; }");
tryItOut("return <y><z/></y>;");
tryItOut("/*for..in*/for(const throw <x><y/></x>;.hasOwnProperty(\"prototype\")[((*)[undefined])]['constructor'] in ((Function)(<><{__count__}></{__count__}></>)));");
tryItOut("for(let y in []);");
tryItOut("if((new (new Function)())) { if (__noSuchMethod__ = (yield <x><y/></x> & <><x><y/></x></>)) [1,2,3,4].map else __parent__ = *, __noSuchMethod__ =  '' ;}");
tryItOut("/*for..in*/for(__parent__ in ((Object(__count__))((-0).__lookupGetter__(\"prototype\")))){yield; }");
tryItOut(" const __parent__;");
tryItOut("L:if(constructor) var __parent__; else return *::*;");
tryItOut("prototype['constructor'] = __parent__;");
tryItOut("/*infloop*/for(var ({ prop: constructor, __proto__: ({ __iterator__: ({ constructor: ({ __iterator__: __noSuchMethod__ }) }) }) }) = ; ((uneval(prototype.(({__count__: (function ([y]) { })()}))))); (<y><z/></y> instanceof <><x><y/></x></>)) {if(<x><y/></x>) {<x><y/></x>yield; } }");
tryItOut("if(0x99.__parent__ = 'fafafa'.replace(/a/g, eval) -= <x><y/></x> = this.zzz.zzz) do {{}; } while(( \"\" ) && 0);");
tryItOut("case -*(\"prototype\": break; default: break; case 5: ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in [1].__defineGetter__(\"__iterator__\", function (prop) { yield <x><y/></x> } )) {yield;[1,,] }");
tryItOut("if([[]]--) { if (<y><z/></y>[<x/>]) ;} else throw //h\ntrue;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__noSuchMethod__) in ) throw constructor;");
tryItOut("if((*::*.__parent__)) { if ( \"\" ) return  /x/g } else {throw <x><y/></x>;/*infloop*/for(__parent__ = <x><y/></x>; <><x><y/></x></>; __noSuchMethod__) {throw  /x/g ; } }");
tryItOut("/*infloop*/L:for(const constructor; \n({ set prototype __noSuchMethod__ () { yield <x/> } ,  get __iterator__ __iterator__ (__noSuchMethod__) {  '' ; }  });  '' ) /*for..in*/for(__proto__ = __proto__ in prototype) let __count__, prototype;");
tryItOut("/*infloop*/for(let __parent__; __count__; new (__noSuchMethod__ ? constructor : *)((__proto__ = 4.).unwatch(\"__noSuchMethod__\"))) {const gc; }");
tryItOut("");
tryItOut("/*infloop*/while((<><x><y/></x></> ? @foo : <x/>));");
tryItOut("export *;");
tryItOut("/*infloop*/while(null.__proto__ = <></>)continue ;");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in ([#3={a:#3#}].some(function(y) { yield y; (<y><z/></y>);; yield y; }) ? !<x/> : new (prototype)((function ([y]) { })(), <y><z/></y>))) __noSuchMethod__.__parent__ = @foo.__proto__");
tryItOut("let (({ prop: __count__ }) = __noSuchMethod__.valueOf(\"number\"), __noSuchMethod__) { let(__noSuchMethod__ = 033, __proto__) ((function(){let __parent__, __iterator__;})()); }");
tryItOut("if((<x><y/></x>).__defineSetter__([z1,,])) { if ((uneval( /x/g .__lookupGetter__(\"__count__\")))) if(((p={}, (p.z = (__noSuchMethod__ = <y><z/></y>))())) <<= (yield <x/>.__defineGetter__(\"__noSuchMethod__\", gc))) {var __proto__ = this; } else {/*infloop*/do ; while(new #1=[#1#]); }} else { }");
tryItOut("/*for..in*/for(let ({ __iterator__: prototype }) in __count__ = (prop = __iterator__ << true)) L: var __parent__ = 1e+81, __count__;");
tryItOut("/*for..in*/for(var prop in (((1 for (x in [])))/*\n*/(typeof null))){( \"\" ); }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.__parent__ in (constructor = <><x><y/></x></>)) yield false; }");
tryItOut("/*infloop*/for(const 0['__parent__'] = @foo; *; [[1]]) prototype, constructor = <x><y/></x>;");
tryItOut(";");
tryItOut("return window.unwatch(\"prototype\").hasOwnProperty(\"__parent__\");");
tryItOut("try { export __iterator__; } catch(constructor if (function(){})()) { return; } finally {  } ");
tryItOut("try { (prototype) = __iterator__; } finally { const __iterator__ = 0x99; } ");
tryItOut("L:switch(<y><z/></y>) { case this: case window: yield;break; case 7: break;  }");
tryItOut("L:if( /x/ ) {{} } else  if (window) {; } else return -1;");
tryItOut("{gc()\nexport __proto__;\nexport __count__; }");
tryItOut("if(<x/>) break ; else  if ([15,16,17,18].map(new Function, @foo).yoyo([<x><y/></x>].sort((new Function(\"throw prototype;\"))))) {const __noSuchMethod__ = {}; }");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("with((__iterator__.__iterator__ = 1.2e3)){yield constructor; }");
