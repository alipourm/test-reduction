tryItOut("[,,]['__iterator__'] = prototype;");
tryItOut("let (({ prop: __iterator__ }) = , __proto__) { export prototype; }");
tryItOut("if(__iterator__) {gc()return; }");
tryItOut("L: var undefined = <x><y/></x>");
tryItOut("do {gc()__noSuchMethod__; } while((*) && 0);");
tryItOut("/*for..in*/L:for(var [constructor, function::__proto__] = __noSuchMethod__\n in *::*) export prop;");
tryItOut("if(<><x><y/></x></>.yoyo(@foo)) {new Functionvar __parent__ = window, constructor = this; } else  if ((\n*)) {}");
tryItOut("<bbb xmlns=\"(<x/>.unwatch(\"constructor\"))\"><!--yy--></bbb>");
tryItOut("/*for..in*/for(const __iterator__ = @foo in *::*) return;");
tryItOut("/*infloop*/do throw 3; while( /* Comment */(null.__lookupSetter__(\"__noSuchMethod__\")));");
tryItOut("L: {#1=[#1#]; }");
tryItOut("/*for..in*/for(const [prototype, prototype] = yield in *.* >> ++[,,]) if((uneval((prop.__iterator__ = prop))).watch(\"constructor\",  '' .@*)) { if (window) <x><y/></x>; else {(__parent__);function  __noSuchMethod__ () { return window }  }}");
tryItOut("L:while(((new <x><y/></x>([,,]))) && 0){export __noSuchMethod__;return; }");
tryItOut("prototype");
tryItOut("if(<><x><y/></x></>) {let prototype; } else {;__count__ = <x><y/></x>; }__iterator__;");
tryItOut("/*infloop*/for(constructor; (this.__defineGetter__(\"constructor\", function(y) { yield y; var prototype = ({a2:z2});; yield y; })); <><x><y/></x></> >>>=<x/>) const __count__, prop;");
tryItOut("/*infloop*/for(const __parent__; \n(__iterator__)(); <x><y/></x>\n[(new Error(eval(\"function ([y]) { }\", undefined)).hasOwnProperty(\"__proto__\"))]) {let(__proto__, __count__ = <><x><y/></x></> % <y><z/></y>) ((function(){try { throw constructor; } finally { let(__iterator__) { throw true; } })()); }");
tryItOut("this.zzz.zzz;");
tryItOut("let ([, , [], function::__noSuchMethod__], __iterator__ = (__parent__ = <x><y/></x>)) { /*for..in*/for(const let (prototype) 3/0.prop in 3) {} }");
tryItOut("Function");
tryItOut("{new Function }");
tryItOut("let (__count__ = [<x/>].map(function  prototype (__iterator__)__count__)) { /*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype.prototype in *::*) return; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = [1].isPrototypeOf(@foo) in true) export __noSuchMethod__;");
tryItOut("L: switch((new (3/0)( \"\" ).@foo).isPrototypeOf(true.prototype = ([1,2,3,4].map).call(function ([y]) { }, true\t))) { case (new RangeError(__iterator__ = <x><y/></x>, __iterator__())): if(3.141592653589793) {export function::__noSuchMethod__;export *; } else  if (+ /x/g ) {prop = false;export *; } else export *;break; case <><>[z1,,]</></>: {}break;  }");
tryItOut("/*for..in*/for(var x::prototype = (new (true)(true).prop) in constructor.__lookupSetter__(\"__iterator__\")) export *;");
tryItOut("switch(new (__iterator__)(__parent__.(<x/>.constructor = <><x><y/></x></>))) { case ({ __parent__: ({ __count__: [[({ prototype: __parent__, __parent__: try { (this); } catch(__parent__ if __count__) { __noSuchMethod__; } catch(__iterator__ if (function(){return <x/>;})()) { __iterator__ = undefined } finally { break\f M; }  }), ,  \"\" , ], ({ constructor: [, constructor, __proto__, ] })] }), __parent__: ({ __proto__: [__noSuchMethod__, , , ] }) }) = (constructor.constructor).@*: break; case (__noSuchMethod__ = <x><y/></x>): break; break; default: yield true;if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) /*for..in*/for(prop in ((gc)(3))){} else {return *; }if(@foo == #3={a:#3#}) {(<x><y/></x>); } else  if (eval(\";\",  /x/g )) {gc() ''  } else {yield 1.2e3; }break; constructor, __parent__case null: export *; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do gc() while(yield <><x><y/></x></>);");
tryItOut("M:if([].hasOwnProperty(\"__noSuchMethod__\")) {var constructor = undefined, prototype; } else  if ( /x/g  ? <y><z/></y> : 3) const __count__; else {yield  '' ; }");
tryItOut("M:if(\n == this) function  prop () { yield (function ([y]) { })() } ");
tryItOut("throw undefined; const __count__;");
tryItOut("if(this) {;export constructor; } else gc()");
tryItOut("with({__parent__: prototype.constructor = []})return  /x/ ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (--this.zzz.zzz)) {/*for..in*/for(const constructor in (-1)) ; }");
tryItOut("switch((*)) { case 6: L: const prototype, constructor;case 2: /*for..in*/for(let __iterator__ in (({})(@foo))){const prototype, __proto__ =  /x/ ; }\ncase void (null ? window : <><x><y/></x></>): break ;case 4: break; default:  }");
tryItOut("let (prop = <><\fx><y/></x></>, __proto__) { M:if(-1) {} else  if (<><x><y/></x></>) {{}const __parent__ = [z1,,]; } }");
tryItOut("return;");
tryItOut("/*infloop*/for(const constructor = #2=({constructor: ((__proto__ if (5.0000000000000000000000)))}); (__parent__ = let (__iterator__ = this, __parent__) true) .@x:: ({prop setter: Math.pow }); (typeof function (__noSuchMethod__, __count__) { yield  ''  } () ? (yield <x/>) : <x><y/></x> == undefined)\n) throw constructor\n\nnew Function\n");
tryItOut("if((eval(\"(Function(<x><y/></x>,  \\\"\\\" ))\", (-1 >>= <y><z/></y>)))) {; }");
tryItOut("export *;");
tryItOut("var ({ __parent__: __count__, prop: (function ([y]) { })() }), __noSuchMethod__ = window;");
tryItOut("if(\f(let (__proto__, constructor) 3/0)) ; else {(<x><y/></x>);var prototype = true; }");
tryItOut("/*infloop*/for(__noSuchMethod__; <y><z/></y>; <x><y/></x>) return;");
tryItOut("/*infloop*/while([z1,,])var __noSuchMethod__;");
tryItOut("/*infloop*/for(var __count__ = constructor.__proto__ getter\f= [1,2,3,4].slice; (prototype-=* ^ <y><z/></y>.eval( /x/ ).isPrototypeOf(@foo.eval(__parent__))); eval) {{(window); } const constructor;prop; }");
tryItOut("for(let y in []);");
tryItOut("let each = false, prototype;\nthis.zzz.zzz;\n");
tryItOut("M:if(1e81) yield *; else  if (String([,,])) {throw (-1); } else {(<>\t<x><y/></x></>);var __noSuchMethod__, __iterator__ = 1e+81; }");
tryItOut("{yield (<x/>)(<x><y/></x>); }");
tryItOut("with((<y><z/></y> % undefined).@foo){ }");
tryItOut("if([] = (new Function(\"const __iterator__ = window, __parent__ = <x><y/></x>;\"))()['__count__']) {{; }/*infloop*/while(function ([y]) { }.throw(__count__)){{} } }");
tryItOut("/*for..in*/for(const <><x><y/></x></> in __proto__) Function");
tryItOut("{L: \f({ __proto__: constructor })if(prototype) { if (undefined) each;} else {throw <y><z/></y>;yield; } }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <><xxx>{__proto__}</xxx></>) {/*infloop*/for(var ({ constructor: ({ prop: __parent__ }) }) = eval(\"switch(false) { case 9: const __proto__, __proto__ = <y><z/></y>; }\",  ''  << this); #0= \"\"  <= (window.yoyo(<><x><y/></x></>)); function::__noSuchMethod__ .. undefined) {yield;{} }gc() }");
tryItOut("return __iterator__ *= <><x><y/></x></>;");
tryItOut("L: switch([z1,,].__defineGetter__(\"prototype\", (new Function(\"function (prop)3.141592653589793\")))) { case 8: ;break;  }");
tryItOut("export __noSuchMethod__;");
tryItOut("if(( /* Comment */++(window)())) {throw <x/>; }");
tryItOut("{{}{} }\n{prop = <x><y/></x>, x::__iterator__ = __noSuchMethod__;{} }\n");
tryItOut("/*infloop*/for(let __count__; <x><y/></x>.__lookupGetter__(\"__proto__\").propertyIsEnumerable(\"prop\"); (this + let (__count__ =  /x/g ) #1#)) {\fgc()\nyield window;\n }");
tryItOut("yield  { return  /x/g ; } .unwatch(\"__noSuchMethod__\");");
tryItOut("if(delete (function::__parent__ = (x::__iterator__ = <x><y/></x>))) if(<x><y/></x>) { if (null | __iterator__) throw <y><z/></y>; else {return;break L; }}");
tryItOut("let (__iterator__ = (\n(({__iterator__: (function ([y]) { })(), \r__count__: *::* })) |= (({ __parent__: prototype })\t = <x><y/></x>))) { M:if(undefined) {constructor = undefined;var prop; } else  if ([,,].watch(\"__parent__\", <x><y/></x>)) 3 }");
tryItOut("if((function (__noSuchMethod__, __noSuchMethod__)this.eval([]))(false.isPrototypeOf(({__parent__: <x><y/></x> })), __iterator__ = constructor)) yield <><x><y/></x></>;");
tryItOut("do { } while(( /x/ ) && 0); const __count__;");
tryItOut("return; const __noSuchMethod__;");
tryItOut("/*infloop*/for(__noSuchMethod__; ~new window(window); <><x><y/></x></>.__lookupGetter__(\"__parent__\")) {/*infloop*/do (undefined); while(@foo); }");
tryItOut("{{} }");
tryItOut("for(let y in []);");
tryItOut("if(((yield undefined.valueOf(\"number\")) for (__count__ in false) for (__proto__ in <x/>) for each (prop in <><x><y/></x></>))) {gc()@foo; } else  if ((<y><z/></y>)()) <y><z/></y>;throw @foo; else {let prototype = <x><y/></x>, __iterator__; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in __parent__) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in prototype) return;throw <x/>; }");
tryItOut("/*for..in*/for(var prop in ((function(y) { yield y; throw __noSuchMethod__\n; yield y; })(__noSuchMethod__ = prop)))<x/>;");
tryItOut("/*for..in*/M:for(let __proto__ in (((p={}, (p.z = __count__.@*)()))(( = (__parent__.yoyo(__parent__)) % )))){ }");
tryItOut("export constructor; const __count__;default: break; case prototype: break ;break; ");
tryItOut("let (prototype) { yield; }");
tryItOut("var prop = *, prop = 5.0000000000000000000000; const constructor;");
tryItOut("let (__proto__ = 3.141592653589793, __parent__ = <><x><y/></x></>) { /*for..in*/for(let constructor = <><x><y/></x></> in  /x/g ) yield; }");
tryItOut("/*infloop*/L:for(const ({ __proto__: [], __parent__: ({ prototype: [[__noSuchMethod__, , ({ prop: ({ __iterator__: [, __noSuchMethod__, ] }) }), , ], ({ __noSuchMethod__: __noSuchMethod__, __iterator__: ({ __proto__: __parent__ }) }), __count__((<x/>.__defineGetter__(\"prop\", function  __count__ () { {} } )))], __iterator__: prototype }) }) =  /x/ .__iterator__ = function(id) { return id }.__proto__; null; __proto__.prop = ([15,16,17,18].some(function (__noSuchMethod__) { export *; } , (__iterator__ = ({}))))) {let(__parent__) { export __parent__;L:switch(('fafafa'.replace(/a/g, function(q) { return q; })((<x/>),  /* Comment */({})))) { case this.__defineGetter__(\"__iterator__\", <y><z/></y>):  } }");
tryItOut("/*for..in*/for(prop in ((Math.pow)(*.propertyIsEnumerable(\"__parent__\")))){yield constructor;'haha'.split }");
tryItOut("/*infloop*/for(const ({ prop: __iterator__, __iterator__: [__noSuchMethod__, ] }) = [] = new Function(true); ([({ prop: ({ prototype: [], __parent__: prop }) }), __count__, ({ prototype: ({ prototype: ({ prop: __proto__, __iterator__: constructor }), constructor: ({ __parent__: __count__, __parent__: __iterator__ }) }) })] = <x/>.yoyo(*::*)); (({__parent__: #1#, x::prototype setter: function(y) { yield y; (Math.sin).apply; yield y; } })).@*) {gc(){}\n }");
tryItOut("M:with(([1e4].map(({}).__lookupGetter__).throw().unwatch(\"__noSuchMethod__\"))){const constructor;throw (function ([y]) { })(); }");
tryItOut("/*infloop*/\fL:for(var ({ __proto__: ({ __count__: [__count__, __proto__, setter, , ] }) }) = ; (this)(<y><z/></y>, false);  /x/g  ? <\f><x><y/></x></> : window) ");
tryItOut("if(prop =  /x/g .__noSuchMethod__) {gc()var __parent__; const prototype; } else  if ((__iterator__ = null)) if(new (this)(window, [[1]])) return (-0); else {let prototype, constructor; } else /*for..in*//* nogeckoex bug 349964 */M: for  each(let ({ __noSuchMethod__: prototype, __noSuchMethod__: prop }) in ((this.zzz.zzz)(prop = *))) {export constructor;; }");
tryItOut("/*infloop*/for(({__iterator__: false}); this.zzz.zzz.isPrototypeOf(({prototype setter: gc, __count__: false })); new (*::*)((-<x>\t<y/></x>), [11,12,13,14].map)) M:while((__count__.watch(\"__iterator__\", function (prototype)__proto__)) && 0){yield; }");
tryItOut("/*infloop*/for(let [, ({ prototype: [({ __count__: prototype })], constructor: [, , ({ __count__: \t({ prop: ({ constructor: __proto__, __count__: __parent__ }), __proto__: [, , , , __proto__] }), __proto__: ({ @foo: ({ prop: [prop, __count__, ] }) }) }), ] }), , , ] = typeof if(prototype.(<x><y/></x>)) yield false; else  if ((<><x><y/></x></>)[1e+81]) (<><x><y/></x></>);; {}\n; -@foo.unwatch(\"__iterator__\").__noSuchMethod__ = @foo) {L:if(new (gc)(__count__, window)) __parent__ =  '' ; else  if ((new (function(q) { return q; })\f().valueOf(\"number\"))) yield; else return false; }");
tryItOut("try { try { (__count__); } finally { return <><x><y/></x>\r</>; }  } finally { yield <><x><y/></x></>.__defineGetter__(\"constructor\", ([1,2,3,4].map).__defineSetter__) >>>=(@foo.eval(0x99)); } ");
tryItOut("if(({a1:1}))  \"\" ; else {throw 1e-81;#1#; }");
tryItOut("L:if(({ __count__: prop }) = constructor = <bbb xmlns:ccc=\"#1#\"><ccc:eee></ccc:eee></bbb>yyy.__noSuchMethod__ setter= Function)  { yield export __noSuchMethod__ }  else  if (<bbb xmlns=\"({__proto__: (@foo.__count__)})\"><><!--yy--></><><></><ccc:ddd>yyy</ccc:ddd></>yyy</bbb>) /*infloop*/for(__parent__; <x/>; 1e81) {export *; } else {;if(<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", [[1]])) export *; }");
tryItOut("/*for..in*/for(<><x/*\n*/><y/></x></> ? <><x><y/></x></> :  /x/ .prop = Array() in  /* Comment */constructor) return [z1,,]\n");
tryItOut("let (__count__, constructor = __proto__) { prop }");
tryItOut("yield;");
tryItOut("with({__noSuchMethod__: new eval()}){(*);if(__noSuchMethod__ = 4.) { if (*::* + __noSuchMethod__) {return;throw <x><y/></x>; } else export *;} }");
tryItOut("yield; const x::constructor;");
tryItOut("with(__iterator__-=__iterator__){const __parent__;return __count__; }");
tryItOut("continue M\nreturn;");
tryItOut("L:if((-3/0).call(__parent__ = @foo, ({__iterator__: <><x><y/></x></> }) instanceof [[]].filter((new Function(\"(window);\"))))) { if ([11,12,13,14].filter) {export *;while(((( \"\" ).call).call(<x/>, <><x><y/></x></>, *::*)) && 0)return  '' ; }} else {do return; while((<y><z/></y>) && 0); }");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; 'fafafa'.replace(/a/g\n, [1,2,3,4].slice); (this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))))) (*);");
tryItOut("export __proto__; const constructor;");
tryItOut("if(try { return; } catch(function::prop if __iterator__) { this.zzz.zzz; } catch(prop if -1 |= 1e+81.__defineSetter__(\"prototype\", (1 for (x in [])))) { __count__ = __iterator__; } ) { }");
tryItOut("prototype = [z1]\n");
tryItOut("if(([3/0 if (<x><y/></x>)])) { if ([15,16,17,18].filter(({}).hasOwnProperty, this)) @foo; else continue ;}");
tryItOut("const __parent__ = *::*;");
tryItOut("new Function\nexport *;\n\nexport __iterator__;");
tryItOut("with({__count__: }){{} }");
tryItOut("/*for..in*/L:for(var __proto__ = [,,z1].yoyo( '' ).__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>).hasOwnProperty(\"__parent__\") in null ^ <x><y/></x>) {const prop, prototype =  \"\" ; }");
tryItOut("/*for..in*/for(((constructor)[undefined])((<x><y/></x> !== *::*)) in  \"\" ) {return #1=[#1#]\nreturn false;return; }");
tryItOut("M:if(<bbb xmlns:ccc=\"1e-81\"><ccc:eee></ccc:eee></bbb>) throw @foo;");
tryItOut("yield; const __iterator__;");
tryItOut("throw function::prototype;");
tryItOut("with((({ prototype: [__proto__] }) = true >>= @foo for (__iterator__ in __noSuchMethod__.__parent__ getter= prototype / true) if (__proto__))){if(true\n) {} else  if (({__parent__ getter: x::__iterator__, (<><x><y/></x></>)(false) })) {return; } else {gc() } }");
tryItOut("M:\fdo {/*infloop*/while(@foo)gc()do { } while(((prop = undefined)) && 0); } while((<><bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb></>[Date(__noSuchMethod__, undefined)]) && 0);");
tryItOut("[,]");
tryItOut("if(__parent__ = (__iterator__ = (prop).watch)) {gc(){continue ; } }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(var ((__proto__.__parent__ = <x><\ry/></x>))((({}).__lookupGetter__).call(new Error({}), let (constructor) __parent__, (-0))) in this\n) { /x/g ;while((function ([y]) { }) && 0){continue ; } } while((prop = prop.__defineGetter__(\"prototype\", ((1 for (x in []))).call)) && 0);");
tryItOut("with({}) with({}) { for(let y in []); } ");
tryItOut("");
tryItOut("while((*::*.__lookupSetter__(\"__iterator__\")) && 0);");
tryItOut("{; }");
tryItOut("/*for..in*/for(let __parent__ in (((<><x><y/></x></>).__defineSetter__)(@foo))){export __iterator__;const constructor = false; }\n;\n");
tryItOut("if([] = ({ __iterator__: __count__ })\t) { if ( \"\" .__defineGetter__(\"prototype\", (1 for (x in [])))) L:with(new ([1,2,3,4].map)())return null\n else for(let y in []);}");
tryItOut("/*infloop*/for((-1); Object(1e4.propertyIsEnumerable(\"__noSuchMethod__\"), /a/gi([<x><y/></x>].filter(({}).hasOwnProperty), <y><z/></y>)); <>[,,z1] <= <><x><y/></x></></>) {export *;yield false; }");
tryItOut("{/*for..in*/for(let <x><y/></x>['__parent__'] in (((function (__iterator__: <y><z/></y>)<y><z/></y>).apply)(export __proto__))){if(<x><y/></x>) {break ;export *; } else  if (null) throw [z1]; else {propyield; } }gc() }");
tryItOut("try { with({}) { return (new ({}).hasOwnProperty(__iterator__|=*)); }  } catch(__count__) { for(let y in [5,6,7,8]) throw StopIteration; } finally { this.zzz.zzz; } ");
tryItOut("/*infloop*/M:for(const prop; (eval(\"prototype\", <x><y/></x>)); [1,,]) break ;");
tryItOut("L:if((__noSuchMethod__ = (const __parent__))++) {yield window; } else yield *::*\nbreak ;");
tryItOut("while(((__iterator__ = this)) && 0){var __iterator__, __count__;const prop, prototype = prototype; }");
tryItOut("switch(({ __proto__: ({ prop: prop }) }) = (p={}, (p.z = ({__iterator__: true}))())) { case (__iterator__.((#2=[(new [[1]] << __parent__+=#1=[#1#])]))): if(Function(this, constructor)) { if ((throw prototype)().unwatch(\"prop\")) {yield; }} else <x/>;default: if(1e81) let constructor =  '' , prop; else  if ((null.unwatch(\"__proto__\")))  const constructor;break; case prop.constructor = (__proto__)( \"\" .__defineGetter__(\"constructor\", /a/gi))(): ;break; case 8: /*infloop*/for(var __iterator__ = (__iterator__ = <x><y/></x>); ((function(y) { yield y; var prototype;; yield y; })(null)); <x/> ? <><x><y/></x></> : export __parent__;) {export __noSuchMethod__;yield this; }case 8: break; __parent__, prop;break; case false &= window: {/*infloop*/for(constructor = __count__;  '' ; -1) {let __noSuchMethod__ = undefined;yield; } }break; break;  }");
tryItOut("/*for..in*/for(let [*, get] = (false /= \f<y><z/></y>) in (new Math.sin((yield <ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>)))) ;");
tryItOut("switch(({ __iterator__: prop }) = [()]) { default: break; \tyield this.valueOf(\"number\");case 8: yield;case 1:  }");
tryItOut("{/*infloop*/do {{}return this; } while((undefined([1,,], <><x><y/></x></>\f)));\nfalse;\n }");
tryItOut("throw StopIteration;");
tryItOut("const constructor, function::__iterator__ = prototype;");
tryItOut("switch((__iterator__.((prototype.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; ; yield y; }).propertyIsEnumerable(\"__count__\"))))) { default: break; case 8: if( \"\" ) { if (<y><z/></y>) {{}export *; }} else (true).watch\nbreak; return;case ({ x::function::constructor: prototype }) = [this]: function (__parent__, __noSuchMethod__) { export get; } break; yield [1,,];if(undefined) {throw [1];export __iterator__; } else  if (false) {yield;throw 3; } else {export __noSuchMethod__; }break; case 4: break;  }");
tryItOut("let (__proto__ =  '' , __iterator__) {  /x/ ; }");
tryItOut("__iterator__;");
tryItOut("*::*;");
tryItOut("with(<x><y/></x> ? (p={}, (p.z = (function ([y]) { })())()) : true %= <y><z/></y>){yield @foo; const __noSuchMethod__; }");
tryItOut("L:with({: <y><z/></y>}) __count__ \n<><x><y/></x></>;");
tryItOut("yield [z1];break M;");
tryItOut("if((({__noSuchMethod__ getter: (true)\f.watch }) set __noSuchMethod__ __proto__ (({ ({ constructor: [__proto__, __proto__, __proto__, ] }): getter, __count__: prop }), __noSuchMethod__) { yield (<><x><y/></x></>)[[,,z1]] } )[(__count__.__proto__)]) \f{yield;throw *; } else  if ((__count__(3/0) = 1e81)) {; } else {if(__count__)  }");
tryItOut("/*infloop*/do {/*infloop*/for(const __noSuchMethod__; (-0); <><x><y/></x></>) 1.3 } while((false).call(({__parent__: __noSuchMethod__, __parent__: *::* }), ((setter)()), __proto__)); const __count__;");
tryItOut("/*infloop*/do {return;export __count__; } while(.valueOf(\"number\"));");
tryItOut("if(-<y><z/></y>) {export *; } else  if (prop.__iterator__ = *)  /x/g \nif(<>yyy</>.((let (__proto__ = <x><y/></x>) function(id) { return id }))) { if () } else {}");
tryItOut("/*for..in*/M:for(let __parent__ = <x/> in ~eval(\";\", 0x99)) prop = yield;, throw constructor;;");
tryItOut("if(constructor.(<><x><y/></x></>)) __noSuchMethod__; else  if (!new String(constructor)\f) return; else {/*for..in*/for(let __proto__ in ((((1 for (x in []))).call)(({a1:1})))){export *; }throw __count__;return; }");
tryItOut("(null);\n;\n");
tryItOut("switch((null *  /x/  || arguments)) { case 2: <x><y/></x><ccc:ddd>yyy</ccc:ddd> }");
tryItOut("/*for..in*/M:for(__count__ in #0=[@foo]++.prototype) {/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in null)  break  }");
tryItOut("/*infloop*/M:do yield constructor; while(return;);");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/M:for(let __parent__; <><x><y/></x></>; this) {gc(){} }");
tryItOut("/*for..in*/for(var [constructor, __count__] = (Error([1] >= @foo, __parent__ =  /x/ )) in ([<><x><y/></x></>.__iterator__ =  /x/g ].sort(({}).hasOwnProperty))) /*infloop*/L:for(window; __proto__; <y><z/></y>) {continue ;function  constructor () { export *; }  }");
tryItOut("/*for..in*/for(let prototype in <x><y/></x>) {return; }\nwhile((([15,16,17,18].sort(function(q) { return q; }, __parent__))) && 0)/*infloop*/for(undefined; [[1]]; function ([y]) { }) return;");
tryItOut("M:if(((@foo)(true, <x><y/></x>))) { if (((({}).hasOwnProperty).apply(<x/>)))  /x/g ; else {-3/0; }}");
tryItOut("export __iterator__;");
tryItOut("export *\n");
tryItOut("return;");
tryItOut("<employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("with(<><x><y/></x></>--)export __noSuchMethod__;");
tryItOut("/*infloop*/M:for(let [] = [1,,] |= (<><x><y/></x></>.watch(\"constructor\", (gc).apply)); yield @foo; true || <x><y/></x>) let (constructor) { /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x><y/></x>) //h\nlet __iterator__, __iterator__; }");
tryItOut("/*for..in*/M:for(const prop = false in [z1,,]) {return;export *; }");
tryItOut("yield");
tryItOut("/*for..in*/for([__parent__, __proto__] = *::* ^ * in ((gc)([1,,]).__defineSetter__(\"__parent__\", *::* , function ([y]) { } |= arguments\f ? __parent__ : <y><z/></y>))) function (prototype, constructor) { yield <x><y/></x> } ((__proto__ = this))");
tryItOut("return 0.1;");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/do (__iterator__); while((this)(__parent__));");
tryItOut("do {/*infloop*/for(this; [[]];  \"\" ) {yield;{} }/*infloop*/while([,,z1]){export *;yield; } } while((x::__count__ = (<x><y/></x>)[-1]) && 0);");
tryItOut("{if('fafafa'.replace(/a/g,  \"\" ) ? ++<x><y/></x> : (yield __parent__)) do {const constructor, __noSuchMethod__;(@foo); } while(( '' ) && 0); }");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("__parent__+=__parent__; const __noSuchMethod__;");
tryItOut("L: prototype");
tryItOut("{let (__count__) { return #1=[#1#]; } const prop;/*infloop*/for(const constructor; @foo; @foo) let __count__; }");
tryItOut("/*infloop*/do {throw false;yield this;yield false; } while((<x><y/></x> || window.eval((__iterator__.__defineSetter__(\"__parent__\", (<y><z/></y>).watch)))).propertyIsEnumerable(\"__proto__\"));");
tryItOut("return {yield (function ([y]) { })();(1e-81); };");
tryItOut("/*for..in*/M:for(var [prop, __proto__] = (yield <><x><y/></x></> !== <y><z/></y>.yoyo(__parent__)) in (<><x><y/></x></>.__count__)) {M:with({__iterator__: constructor.__lookupGetter__(\"__proto__\")}){; } }");
tryItOut("return ((4. for each (prototype in #3={a:#3#})));");
tryItOut("/*for..in*/L:for(const __parent__.__count__ in ((Math.pow)([(__iterator__ = function::__parent__).eval(export __parent__)].__iterator__ = new /a/gi((0.1++),  \"\" ).__proto__ = <x><y/></x>))){with({__proto__: __iterator__.__proto__}){1.3{} } }");
tryItOut("throw __count__;");
tryItOut("/*infloop*/for(( /x/g  < undefined); __noSuchMethod__ = __iterator__;; eval(\"([1,2,3,4].slice & <y><z/></y> <<= 3.141592653589793)\", window)) {gc() }");
tryItOut("/*infloop*/while(Error(this,  /x/g ))export *;");
tryItOut("/*infloop*/for( '' ; [<><x><y/></x></>].some(function  __iterator__ (__noSuchMethod__, __parent__)__iterator__); *::*) {/*infloop*/for(null; prop; null) continue M; }");
tryItOut("/*infloop*/M:do {([ /x/g ]);if(<x><y/></x>.yoyo( \"\" )) (<y><z/></y>); else gc() } while((prototype = this)(__proto__ = (eval).call(<><x><y/></x></>,  /x/ )));");
tryItOut("/*infloop*/for(eval(\";\", *::*); (this.__defineGetter__(\"__count__\", ([1,2,3,4].slice).apply) | <x><y/></x> @  \"\" ); (\n#1=({__noSuchMethod__: null}))) {var prop = <><x><y/></x></>; }");
tryItOut("let(__parent__ = <x/> *= <><x><y/></x></>.isPrototypeOf( '' ), __parent__ = ((<x><y/></x> !==  /x/g ))) { let(__iterator__, __count__) ((function(){throw StopIteration;})());");
tryItOut("{yield  \"\" ;var prop =  /x/g , prop = [,,z1]; }");
tryItOut("with(new (Math.sin)(__noSuchMethod__ = constructor)){3<x><y/></x>; }");
tryItOut("with(this.__defineSetter__(\"prototype\", function (prop)prop)){\ngc() }");
tryItOut("yield <x><y/></x>");
tryItOut("if(null) { if ((__count__ = __proto__)) ([z1]).watch else gc()}");
tryItOut("/*infloop*/for(__count__; window; 1.3) yield;");
tryItOut("L: {/*infloop*/for(({ prop: [] }) = (__proto__|=__noSuchMethod__%=__iterator__); (__count__.__parent__[new ( \"\" )(true, this)] |= (__count__ =  \"\"  >>> __iterator__ = this)); yield window) /*infloop*/for(var prototype; this; <x><y/></x> >> false) (<><x><y/></x></>);export *; }");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = <zzz>[15,16,17,18].some(Math.pow, [,])</zzz> in ((yield (this.__defineGetter__(\"prototype\", (function(y) { yield y; export *;; yield y; }).apply))))) const __count__, prototype;");
tryItOut("/*for..in*/for(let __iterator__ in  /x/g ) /*\n*/{L: {((-1)); }const function::prop, prototype; }");
tryItOut("if(( /* Comment */ /x/g .yoyo(<y><z/></y>))) {do {<x><y/></x>; } while((__noSuchMethod__) && 0); } else  if (let (__noSuchMethod__, __iterator__) <xxx {get}={prototype, __iterator__} />) /*infloop*/for(var __parent__; null; this) {export __count__;export *; }");
tryItOut("/*for..in*/for(var \r__iterator__ in (__parent__.constructor = __proto__, prop)) {;yield; }");
tryItOut("{yield;gc() }");
tryItOut("if(((undefined.@*)(-0.__defineSetter__(\"__noSuchMethod__\", function  __noSuchMethod__ () { return [[]] } ) <<= prop = , __parent__.__parent__ = default: ;break; ))) {with({__proto__: ((prototype =  ''  for (__parent__ in <x><y/></x>)))}){(this);constructor = <><x><y/></x></>; }if([[]].hasOwnProperty(\"constructor\")) { if (<><x><y/></x></>) {const __noSuchMethod__;export constructor; } else {yield <><x><y/></x></>; }} } else  if (({prop: [[1]].constructor })) {if(\n__noSuchMethod__) ; else  if (A) ; else {([[]]); } }");
tryItOut("/*infloop*/do {throw  \"\" ; } while(this);");
tryItOut("while((\nnull) && 0){({}).hasOwnProperty }");
tryItOut("let (prop, function::prop = (p={}, (p.z = 5.0000000000000000000000)())) { with({}) { prototype = __parent__; }  }");
