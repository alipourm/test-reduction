tryItOut("let ([] = this @  '' , prototype = [z1,,]) { let prototype = @foo; }");
tryItOut("return ;");
tryItOut("/*infloop*/L:for( \"\" .__lookupGetter__(\"__proto__\"); this.zzz.zzz; (#3={a:#3#} != <y><z/></y>)) {yield <x\t><y/></x>; }");
tryItOut(";");
tryItOut("return;");
tryItOut("/*for..in*/for([constructor, __iterator__] = <x><y/></x> in <x/>) continue M;");
tryItOut("/*infloop*/for(var prototype = @foo ? false : __parent__; <><x><y/></x></> & <x><y/></x>; <><x><y/></x></> :: <x><y/></x>) continue ;");
tryItOut("L:if(__proto__()) {gc() } else return;");
tryItOut("L:if( \"\"  != (3/0.unwatch(\"__proto__\"))) (__iterator__); else yield arguments");
tryItOut("__proto__ = __proto__;");
tryItOut("with({}) for(let y in []);");
tryItOut("with({}) for(let y in [])");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with({prototype: 'fafafa'.replace(/a/g, Math.pow)})P const __parent__;");
tryItOut("L:if(this.@*) (<x/>); else  if (({}).hasOwnProperty\n) [], prop");
tryItOut("if(<><x><y/></x></>) (undefined); else  if (*::*) {(undefined);{} }");
tryItOut("/*infloop*/for(constructor; constructor.constructor[[,]]; 0) {return; }");
tryItOut("yield prop = (__proto__.__proto__ setter= ({}).__lookupGetter__);");
tryItOut("switch( /* Comment */__noSuchMethod__) { case <bbb xmlns:ccc=\"(*)()\"><ccc:eee></ccc:eee></bbb>: case 2: break; default: gc()break; break; break;  }");
tryItOut("if(window.__proto__) {const constructor, prototype; } else {yield window; }");
tryItOut("with((*.__defineGetter__(\"__noSuchMethod__\", (<x><y/></x>\f).__defineSetter__)))let (prop = ({a2:z2}), __noSuchMethod__ = <x/>) { do throw __parent__; while((<><x><y/></x></>) && 0); }");
tryItOut("if((({a1:1}) / *::*).watch(\"__count__\", eval)) { if (<xxx>{__iterator__}</xxx> ? (<><x><y/></x></>.@foo ^ --1e81) : ((eval(\"<x/>\", <y><z/></y>)) if ((false && 1e4)))) {{return false; } }} else {do new Function while((<x/>) && 0);/*infloop*/for(4.; <><x><y/></x></>; __iterator__)  }");
tryItOut("/*for..in*/for(let [prop, __count__] = <y><z/></y>.valueOf(\"number\") in this) {}");
tryItOut("/*for..in*/for(let (__iterator__) in ((/a/gi)(-(__count__)))){*::*/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x><y/></x>) {yield;gc() } }");
tryItOut("/*for..in*/L:for(let __parent__ in undefined) break ;");
tryItOut("switch(prototype = __proto__ / __count__ = @foo) { case (@foo | <y><z/></y>): return *::* || __proto__;case [ \"\"  for each (__parent__ in @foo)]: yield;break; gc() }");
tryItOut("let (__parent__ = ( if (__proto__)), __proto__) { let __count__ = __proto__, constructor = <x><y/></x>; }");
tryItOut("/*for..in*/M:for(let prop = ((<x/>.__defineSetter__(\"__proto__\", Function)))[(prop.throw(<><x><y/></x></>))].hasOwnProperty(\"__noSuchMethod__\") in  /* Comment */( '' .__lookupSetter__(\"prototype\"))) {L:if(<x><y/></x>) {yield; } else  if (window) {yield <x><y/></x>; } }");
tryItOut("L:if(*::*.__defineSetter__(\"__noSuchMethod__\", eval).*) {do {{} } while(([15,16,17,18].map(<><x><y/></x></>, <x><y/></x>)) && 0);@foo } else  if (__parent__.prop = ({constructor: @foo}) * delete  /x/ ) {/*infloop*/L:for(( export ).call(<><x><y/></x></>,  /x/g , prop); ({a1:1}).__iterator__ = 1.2e3; <x><y/></x>[constructor]) yield; }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = this in <x><y/></x>) {continue ; }");
tryItOut("if(yield  /x/ ) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in false) {function::constructor = <x><y/></x>, __parent__; } } else  if ((!false)) L: {<x><y/></x>;([1]); } else {M:do const prop; while((<x><y/></x>) && 0); }");
tryItOut("L:switch(Object(return;.__lookupSetter__(\"__iterator__\"))) { case 0: {}break; default: break; break;  }");
tryItOut("with({}) { throw prototype; } ");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/do {<x/>; } while(Function);");
tryItOut("/*for..in*/for(var prop in <x><y/></x>.*) export constructor");
tryItOut("/*infloop*/L:do {} while(@foo.hasOwnProperty(\"__parent__\"));");
tryItOut("/*infloop*/for((this.__defineGetter__(\"let\", \tnew Function)); eval(\"this\", <x><y/></x>); (prop = ><x><y/></x>__count__ </> = @foo.isPrototypeOf( /x/ ))) gc()");
tryItOut("/*for..in*/for(prop in (([1,2,3,4].map)(this.__defineSetter__(\"__count__\", __noSuchMethod__.__parent__ getter= *::*)))){if(prop.__proto__ = <x/>) {{}(<x><y/></x>); }export <x><y/></x>; }");
tryItOut("/*infloop*/for((<><x><\ty/></x></>)(this.zzz.zzz) = (null for each (__noSuchMethod__ in this)); __count__; __parent__.constructor = __iterator__.prop = <y><z/></y>.__defineGetter__(\"prototype\", Function)\t) if(eval(\"constructor\", undefined)) {gc() } else  if ((RangeError(__count__))) {export *;let __proto__ =  /x/ ; }");
tryItOut("var x::prop;constructor;");
tryItOut("/*for..in*/for(const ({ __proto__: ({ __count__: constructor }) }) in ({ __proto__: prop, __iterator__: ({ __proto__: prototype, __proto__: __proto__ }) }) = [z1]\n) {; }");
tryItOut("with({__iterator__: (new (({}).hasOwnProperty)(,  \"\" ))}){{var __count__; } }");
tryItOut("yield;");
tryItOut("/*infloop*/while(function  __iterator__ ()__noSuchMethod__){yield window;let constructor = <x><y/></x>, prototype = <y><z/></y>; }");
tryItOut("{/*infloop*/while(([[]].__lookupSetter__(\"__parent__\")))({ __iterator__: [constructor, __noSuchMethod__, prototype, ] })yield this; }");
tryItOut("[1,2,3,4].map");
tryItOut("return __parent__;");
tryItOut("with({}) with({}) { yield try { gc() } catch(prototype) { 1e+81; } finally {  } ; } ");
tryItOut("L: {export __count__;export __iterator__; } const __count__;");
tryItOut("/*infloop*/for((p={}, (p.z = <x/>)()); 1e81; __parent__) {/*for..in*/for(const prototype = * in (function ([y]) { })()) {return [];gc() } }");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(var <>yyy</>(__parent__.__count__ = <y><z/></y> for (constructor in window.__defineSetter__(\"__parent__\", Function)) if ( \"\" )) in ((new Function(\"gc\")))(((3).watch(( /x/  -= this))), (prop = (prototype.valueOf(\"number\"))))) ;throw this;");
tryItOut("for(let y in []);");
tryItOut("L:if(<x/>) {export *;*; } else {yield; }");
tryItOut("if((*::*.isPrototypeOf(null))) {const function::prototype = __parent__;'haha'.split }");
tryItOut("/*for..in*/for(__proto__ in this) gc()");
tryItOut("/*infloop*/while(033.__lookupGetter__(\"prototype\").propertyIsEnumerable(\"__proto__\"))gc()");
tryItOut("if((function ([y]) { })()) {let prototype;throw  '' ; }");
tryItOut("gc()");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { if (([(<><x><y/></x></> >> [,,z1])])) {yield <x><y/></x>;return; } else {const __proto__ = <><x><y/></x></>;do {gc()throw <x><y/></x>; } while((__proto__) && 0); }}");
tryItOut("{throw [[1]];[,,]; }");
tryItOut("if(Math.pow) { if ([yield <>__noSuchMethod__</> ? <><x><y/></x></> : __proto__.prototype return [z1];  getter= window for ([] in ((#1#)(constructor))) for each (function::prototype in (new  \"\" ( /x/g , <x/>)))]) {if(({a2:z2})) ; } else {if(<x/>) {export window;let __parent__ = <x><y/></x>, <x><y\f/></x>; }/*infloop*/while(<zzz><x><y/></x></zzz>){let (prototype = <x><y/></x>, prop = <><x><y/></x></>) { return undefined; } } }}");
tryItOut("export constructor;\n/*infloop*/for(let __noSuchMethod__; @foo ^ <x/>; new *::*(<><x><y/></x></>)) export __count__;\n");
tryItOut("if((new (({}).hasOwnProperty)())) {0.1; } else  if (this.__defineGetter__(\"__proto__\", Math.sin)) {/a/gi } else __proto__;");
tryItOut("throw __parent__;");
tryItOut("L:if([11,12,13,14].some) const constructor;\nyield false;\n\t else  if (prop) prototype, __noSuchMethod__ else {L: {const __iterator__;const __iterator__ = constructor; }/*for..in*/L:for(__iterator__ = ({a1:1}).__parent__ in __parent__) {export __iterator__;export *; } }");
tryItOut("/*for..in*/M:for([constructor, prop] = this in ((this if (*::*)))) if(*::*)  else {__proto__, __proto__ = 1.2e3; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [({ __count__: constructor, __proto__: __count__ }), [__iterator__, __parent__, , , ], \f({ __parent__: constructor, prop: prop }), ({ __iterator__: __noSuchMethod__ }), ({ __parent__: prop, __parent__: constructor })] in {let <><x><y/></x></>; }) do {var true = (-1); } while(((yield <y><z/></y>)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const prop; 'haha'.split; typeof __count__.(<x><y/></x>)) {yield __proto__; }");
tryItOut("\n;");
tryItOut("__iterator__ = __parent__;");
tryItOut("let (({ __iterator__: [, prototype, __count__] }) = <><x><y/></x></> ..  '' ) { (<><x><y/></x></>); }");
tryItOut("with({__noSuchMethod__: new new Function()})((-0));");
tryItOut("switch((yield *::*)) { default: yield undefined;case 9: <x><y/></x>break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in [15,16,17,18].sort(((p={}, (p.z = <x><y/></x>)())),  '' .__lookupGetter__(\"prototype\")[<><x><y/></x></>.__defineSetter__(\"__proto__\", function () { yield <x><y/></x> } )])) /*for..in*/for(const __noSuchMethod__ in ((gc)(#1=[#1#] -= Object(__noSuchMethod__))))yield;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("gcprop, __proto__;");
tryItOut("while(( set __noSuchMethod__ prop (__count__, constructor){yield; }['__count__'] = (window.yoyo(window))) && 0){ }");
tryItOut("{return <y><z/></y>; }");
tryItOut("with({__iterator__: <x/>})(Math.pow).apply");
tryItOut("while((let (constructor = prototype.__iterator__ = {}, __count__) new (new Function(\"<><x><y/></x></>;\"))()) && 0)/*infloop*/do (function(q) { return q; }).apply while(__proto__);");
tryItOut("L: {var function::__count__ = <x/>; }");
tryItOut("with({}) {  } ");
tryItOut("/*infloop*/for(var constructor; <x><y/></x>; window) const __iterator__ = [1], constructor = .2;");
tryItOut("{yield prop.eval(window);/*for..in*/for(__noSuchMethod__ in __parent__) {} }");
tryItOut("with(<>\f<bbb xmlns=\"(#1=[#1#] ==  /x/ )\"><!--yy--></bbb></> ? __iterator__ = * : (({a1:1})['__iterator__'] = ([*::*]).yoyo(eval(\"<><x><y/></x></>\", (-1)))))var constructor; const __count__;");
tryItOut("/*infloop*/do if(<><bbb xmlns:ccc=\"__iterator__ = <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></>) constructor =  '' , <x/> while(new (<y><z/></y> - <x><y/>//h\n</x>)([15,16,17,18].some(gc, <x><y/></x>), <><x><y/></x></>));");
tryItOut("/*infloop*/M:do {__iterator__ getter: gc } while((++<>\f<x><y/></x></>));");
tryItOut("{}\n");
tryItOut("let (({ \f__count__: [, , ({ __count__: __iterator__ }), , ] })) { yield #1=[#1#]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in [@foo >>= __parent__\n if (*)][this.zzz.zzz]) \f{return <><x><y/></x></>\n/*for..in*/for(const __count__ in ((new Function)(<><x><y/></x>\f</>)))yield true; }");
tryItOut("/*for..in*/for(var [__iterator__, prop] = this.zzz.zzz in @foo for ((undefined)(<><x><y/></x></>) in __noSuchMethod__) if (null)) {{(<y><z/></y>);{} }return [z1,,]; }");
tryItOut("if(__proto__ = <><x><y/></x></>.__lookupGetter__(\"__parent__\")) {__count__;; } else /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in prototype) throw [z1];");
tryItOut("/*for..in*/for(const prototype in ({__noSuchMethod__: ()})) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (new Function).apply.yoyo(@foo) in ((this).__defineSetter__).call(prop.( /x/g ), (__proto__ = 3))) {L:with({prop: #0=[<x><y/></x>]}) }");
tryItOut("/*infloop*/while(<x><y/>\f</x>)constructor;");
tryItOut("/*infloop*/while((( /* Comment */null) < constructor = <><x><y/></x></>)){;return  \"\" ; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(constructor = let (__iterator__, __iterator__) null\t; ([,]\n); (-0).throw(@foo)) export __noSuchMethod__;");
tryItOut("M:if((function(q) { return q; }).call((0/0 for (prototype in __proto__)), \t)) {throw <x/>;case 3: (<><x><y/></x></>); } else {throw window;let __count__ = @foo, __count__ = ; }");
tryItOut("__count__ = prop;");
tryItOut("/*infloop*/for(\n__noSuchMethod__ = constructor.watch(\"__proto__\",  /x/ --); [1,,].__defineGetter__\r(\"__noSuchMethod__\", function  prototype (__noSuchMethod__) { return \t<><x><y/></x></> } ); (Date( \"\" ) ? eval(\"(({constructor: <x><y/></x>.valueOf(\\\"number\\\"),  get __count__ __noSuchMethod__ (__noSuchMethod__, prop)__proto__[false] }))\", \n(-0)) : new (true)())) /*infloop*/for(__proto__ = @foo; constructor; __proto__) export __count__;");
tryItOut("if(new ()(<><x><y/></x></>, 3.141592653589793)) { if (<y><z/></y>) var __proto__, __proto__; else  { let __parent__ = [,,z1]; }}");
tryItOut("/*infloop*/for((-1); window; <><x><y/></x></>) export __noSuchMethod__;");
tryItOut("__parent__, __iterator__");
tryItOut("if((({ __parent__: constructor, __parent__: ({ __iterator__: __proto__, __noSuchMethod__: __count__ }) }) = new window((new false(@foo))))) { if (prototype.hasOwnProperty(\"__noSuchMethod__\")) {while((window) && 0)const __iterator__ = function ([y]) { }, prop = []; } else throw __noSuchMethod__;}");
tryItOut("if((new RegExp(++this))) { if ((undefined)[__noSuchMethod__ = *::*]) constructor, prop;} else {{}({}).hasOwnProperty }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = this.__defineSetter__(\"constructor\", [,,z1].watch(\"x::__parent__\", (Math.sin).apply)).__lookupSetter__(\"__parent__\") in (<><x><y/></x></>).watch < this.__defineSetter__(\"__parent__\", delete null)) /*for..in*/for(var [setter, __proto__] = @foo in true) (false);");
tryItOut("/*infloop*/while(<x/>){let(__parent__, prototype = <><x><y/></x></>) { [,,z1]; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var ({ __count__: constructor }) = (eval(\"constructor.prop\", <x><y/></x>)); ((prototype)[this]); ((new Function(\"{}\")) = this)) break ;");
tryItOut("/*for..in*/L:for(var __iterator__ in yield true) export __iterator__\nyield <><x><y/></x></>");
tryItOut("if([] = #1=1.2e3) if(this) { if ('fafafa'.replace(/a/g, function () { yield prototype } ))  else L: const __iterator__ = #1=[#1#], __count__ = (function ([y]) { })();\t}");
tryItOut("if(<y><z/></y>) {( /x/ ); } else  if ((\n({a1:1}))) {;{} }");
tryItOut("try { throw __parent__; } catch(prop) { __count__ = prototype, __iterator__ = false; } finally { prototype; } ");
tryItOut("/*infloop*/do {/*infloop*/M:for(eval(\"window\", -1); -1 ^= <x><y/></x>; ~ /x/g  - .2) return 1e-81; } while(((uneval((Function())))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((__count__)) in [,,]) __parent__ = __parent__, __noSuchMethod__;");
tryItOut("\nswitch(({a2:z2}).hasOwnProperty(\"__count__\")) { default: break;  }");
tryItOut("L: __count__ = __iterator__;");
tryItOut("M:if(prototype) {default: /*for..in*/for(var constructor = <y><z/></y> in 1e-81) {var __iterator__, __parent__; }break; case 9: /*infloop*/for((<><x><y/></x></> += <x/>); __parent__; yield 4. .@*:: *.yoyo(@foo)) {break L;[1,2,3,4].slice } } else  if ([, , , __noSuchMethod__, constructor] = (((this.__defineSetter__(\"constructor\", __iterator__)))[ \"\"  ? @foo : {}])) {constructor, __iterator__; } else {while((<><x><y/></x></>) && 0)([]); }");
tryItOut("export function::constructor; const setter\nswitch(true[*::*]) { default: case 0: /*for..in*/__iterator__\nbreak; {{yield function(id) { return id }; } }case 1: let ( set getter()3/0, __proto__ = window) {  }break; case 4.: break; (*\f);break; break; case ([@foo].map(Math.sin)): break;  }");
tryItOut("L:switch(constructor <<= #1=({__count__: [z1,,]})) { case 9: default: break; break; throw <x/>(constructor = false, this __count__ ); }");
tryItOut("M:switch((RegExp())) { case 0: case (constructor = <><x><y/></x></> <<= <y><z/></y>): break;  }");
tryItOut("{if(window) {break ; } else  if ((function(q) { return q; })) {export prototype;; } else {\n} }");
tryItOut("switch(((p={}, (p.z = <y><z/></y>)()))) { case yield <><x><y/></x></>: if(<x/>) {gc() } else {gc() }break; 'haha'.splitbreak; case 7: break;  }\n");
tryItOut("if(null\n) { if (constructor = null , <x><y/></x>) {return set;break L; }} else L:if( /x/g ) {{}{} } else  if (<x><y/>\t</x>) {let constructor; } else {yield constructor;throw <x/>; }");
tryItOut("with(this.__defineGetter__(\"constructor\", ({ __parent__: (\f{ __iterator__: __count__ }) }) = ))continue ;\nreturn window;\n");
tryItOut("do {yield this;(); } while(([z1]) && 0);");
tryItOut("\fprototype, constructor = -0; const __noSuchMethod__;");
tryItOut("L:if(__proto__-=5.0000000000000000000000.__lookupSetter__(\"__iterator__\")) if(<><x><y/></x></>) { if (<><x><y/></x></>) {return null; } else {const getter = *::*, prototype;(<x/>); }}");
tryItOut("if(constructor = const __parent__ = <x/>;) { if (([] =  /x/  for each (__noSuchMethod__ in window))) {{yield;if(window) var __iterator__ = window; else  if (<><x><y/></x></>) throw true; } } else {/*infloop*/for(var __parent__ = <x><y/></x>; <><x><y/></x></>;  /x/ ) {continue L;export *; }gc()yield  \"\" ; }}");
tryItOut("3\n");
tryItOut("/*for..in*/for(var prototype = (Function)(<><x><y/></x></>) in  '' ) let __proto__ = __noSuchMethod__, constructor = undefined;");
tryItOut("/*for..in*/for(var constructor((__noSuchMethod__.prototype = <x/>)) in (Function(null <<= <x/>, <y><z/></y>))) let (__iterator__ =  /x/g , __iterator__ = undefined) { *; }");
tryItOut("/*for..in*/M:for(const __parent__ in (\f{__count__: ((<><x><y/></x></>)) })) {return\nreturn <y><z/></y>;export constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in window) {M:if(undefined) {yield; } else  if (<x><y/></x>) {yield; }(__iterator__, function::__iterator__); }");
tryItOut("if(4.) yield\n/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x><y/></x>) default: case [z1,,]: yield  \"\" ;break;  else  if (<y><z/></y>.*.__defineGetter__(\"__proto__\", ((function ([y]) { })())())) let __noSuchMethod__ = <x><y/></x>, prototype;");
tryItOut("export *;");
tryItOut("if(new (new RangeError())()) return  '' ; else  if (constructor.(new String(1e-81, __count__))) return  /x/g ;\n\n");
tryItOut(";");
tryItOut("/*infloop*/for(; <><x><y/></x></><ccc:ddd> </ccc:ddd> ; ) {}");
tryItOut("/*for..in*/for(const [__iterator__, prop] = function::prototype( /x/ ) <  in (prototype.function::__noSuchMethod__ setter= function(y) { yield y; return ({a1:1});; yield y; }.eval(prototype getter: (<x><y/></x>).apply))) {while((<x><y/></x>) && 0){} }");
tryItOut("/*infloop*/while((prototype.\f(<><x><y/></x></>))){ }");
tryItOut("__iterator__");
tryItOut("let(prop, __noSuchMethod__) { this.zzz.zzz;");
tryItOut("do {throw *;export __iterator__; } while((prototype = this) && 0);");
tryItOut("M:with({__iterator__: (*::* if (<y><z/></y>))})(1 for (x in []))");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __count__] = ((false.__proto__ = 3.141592653589793).__lookupSetter__(\"prop\")) in ({ function::constructor: ({ __proto__: ({ constructor: __parent__ }), __parent__: __count__ }) }) = prototype = ) return;");
tryItOut("try { with({}) { throw prop; }  } finally { let __parent__ = __count__, __proto__; } ");
tryItOut("while(((function(id) { return id }())) && 0){throw ({a1:1}); }");
tryItOut("return (yield ~<><x><y/></x></>);");
tryItOut("M:if(__proto__ = __noSuchMethod__) { if ([window.eval(undefined)].filter(<x><y/></\fx>)) let __parent__ = <><x><y/></x></>, __count__;} else {throw  \"\" ; }");
tryItOut("with({}) __count__;");
tryItOut("while((__noSuchMethod__ = window.unwatch(\"__proto__\")) && 0){__proto__, prop = <x/>; }");
tryItOut("\f{export __proto__; }");
tryItOut("if(__parent__) false; else {gc() }");
tryItOut("let(__count__) ((function(){for(let y in [5,6,7,8]) yield (__iterator__ = <><x><y/></x></>);})());");
tryItOut("/*infloop*/M:for(var ({ __proto__: ({ __noSuchMethod__: ({ function::__parent__: [, __parent__, , constructor], __parent__: ({ __proto__: constructor, prop: constructor }) }) }), __parent__: __iterator__ }) =  \"\" ; <bbb xmlns=\"__iterator__ = window .@x:: window\"> </bbb>; (new new Function( /x/g )) ? () : new ((@foo).__defineSetter__)(({prop: <x><y/></x>, constructor setter: (<x/>).__defineSetter__ }), <x><y/></x>)) {gc() const __noSuchMethod__; }");
tryItOut("with({prop: *.watch(\"constructor\", <y><z/></y>)}){; }");
tryItOut("/*for..in*/for(var __count__ in ((<><x><y/></x></>.__iterator__ = [1,,].throw(<><x><y/></x></> = #1=[#1#]))((*.unwatch(\"__parent__\")))))/*infloop*/for(var prototype; 3; prototype) continue L;");
tryItOut("yield  /* Comment */constructor = @foo;");
tryItOut("if(constructor = new -3/0) { if ((new Error(<>__parent__: 0x99</> ? this : [__proto__-=*::*]\t, <><{prop}><!--yy--></{prop}></>) = typeof <x><y/></x>)) var constructor, __iterator__ = 033;} else /*for..in*/for(prop in  /x/g ) export __noSuchMethod__;");
tryItOut("L: {export __noSuchMethod__;if((__proto__.__count__ = window.__defineSetter__(\"constructor\", ))) { if (function  __noSuchMethod__ (__noSuchMethod__)this) {}} else return __count__; }");
tryItOut("L:if( /x/g ) yield prop; else {constructor } const __parent__;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((((function(q) { return q; }).apply).call\f)( /x/ )))do {; } while(([1,,] =  /* Comment */[,,z1]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <{__parent__}></{__parent__}> += undefined) {;gc() }");
tryItOut(" '' \n");
tryItOut("/*for..in*/for(let #3={a:#3#}.prototype in prop) yield window;");
tryItOut("/*infloop*/do yield  /x/ ; while(let (__parent__) this\n);");
tryItOut("L:do L: return; while((.((each+= '' ))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in prop.(.2)) {/*infloop*/for(--<y><z/></y>; __noSuchMethod__ = 1.3; prop = ({})) ;gc() }");
tryItOut("({}).hasOwnProperty\n/*infloop*/M:for((([z1]++).yoyo((this.zzz.zzz))); (let (__noSuchMethod__, prototype = null) __proto__.__count__); __iterator__.__count__ getter= this.__defineSetter__(\"__iterator__\", @foo)) {(-0); }");
tryItOut("/*for..in*/for((Iterator(this))((this.zzz.zzz.unwatch(\"__parent__\"))) in ((undefined\n\n)((uneval(<x/>))))){ }");
tryItOut("if([<x><y/></x> for each (__parent__ in prototype)]) {;yield; } else {const prop;yield; }");
tryItOut("M:switch((window.valueOf(\"number\"))) { default: if(<y><z/></y>) { if ( \"\" ) \r{} else {throw window;<><x><y/></x></>; }} }");
tryItOut("{export *; }");
tryItOut("L:with({__iterator__: <x><y/></x>}){__parent__ = <><x><y/></x></>;({}).hasOwnProperty }");
tryItOut("if( \"\" .__lookupGetter__(\"prototype\")) export *; else  if (eval(\"1.3\", (function ([y]) { })())) { }");
tryItOut("with({__iterator__: (yield 1e-81)})( \"\" );");
tryItOut("if((Math.sin).apply) { if (prop.eval(undefined)) {export *;let __count__, __iterator__; }} else {throw window; }\nwith({__noSuchMethod__: (__iterator__ = <><x><y/></x></>)})export *;");
tryItOut("/*for..in*/for(let __iterator__ in ((Math.sin)((__iterator__.__count__ getter= 'haha'.split)))){throw <x><y/></x>; }");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(x::__noSuchMethod__(this) in yield __proto__ = <y><z/></y>) with({}) { with({}) prop = prototype; } ");
tryItOut("if([15,16,17,18].filter(Math.pow, {})) ; else  if \t(<y><z/></y>.__lookupSetter__(\"prototype\")) undefined, 0x99 else {x::__parent__, __count__;{} }");
tryItOut("/*infloop*/do {yield 5.0000000000000000000000;/*infloop*/for(var yield = <x/>; <x><y/></x>; this) yield  /x/g ; } while((( /x/g .watch(\"__count__\", ({}).hasOwnProperty)) for (__count__ in {}) for each (__proto__ in false) for each (__iterator__ in <x/>)));");
tryItOut("/*infloop*/for(let __count__; null ^ ({a2:z2}); #1#)  \"\" ");
tryItOut("with( /x/ [5.0000000000000000000000.unwatch(\"prop\")])switch([,,z1]) { case : /*infloop*/do const __iterator__ = 5.0000000000000000000000; while(<><x><y/></x></>);var __iterator__, __proto__ = ({a2:z2}); }");
tryItOut("if((([z1]).watch() |= [ '' ].filter(function(y) { yield y; /a/gi; yield y; }))) { if (((yield <x/>)).__count__ - constructor.([<><x><y/></x></>].some(Function)))  { new Function }  else {with(__iterator__ , <><x><y/></x></\f>)export __count__;return <x/>;/*infloop*/for(var prototype; @foo; <x><y/></x>) var x::__parent__ = *; }}");
tryItOut("switch(<x/>) { default: return ( \"\"  ? undefined : <><x><y/></x></>);case 0: yield (__noSuchMethod__ = prototype);case 2: /*for..in*//* nogeckoex bug 349964 */ for  each(var ( /x/ )(false) in undefined) {if(3/0) {return undefined;let prototype, __noSuchMethod__; } else return undefined;const __count__, prop = #1#; }case (new (({}).__lookupGetter__)()): thiscase (#0=window.__lookupSetter__(\"prototype\")): if(this) {} else  if ({}) {var prototype = <x/>, constructor; }break; case 0 !== <y><z/></y>: const constructor;const constructor = (function ([y]) { })(), prototype; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in  /x/ ) yield window;");
tryItOut("if(__iterator__.(__noSuchMethod__)) {yield <x><y/></x>; } else  if (new (__iterator__ = __iterator__.eval(new <><x><y/></x></>(prop)))(<x><y/></x>.(false), (__noSuchMethod__ = false))) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in ) export x::__iterator__\nlet prototype;\nvar __parent__;\n");
tryItOut("let (__parent__) { /*infloop*/while(<><x><y/></x></>){( '' );(default: break; case *: yield *::*;case 7: (<x><y/></x>);break; case 4: break; break; case 033: ;break; ); } }");
tryItOut("switch((-1)) { case 0: export constructor; }");
tryItOut("/*infloop*/while(((constructor = null) %= ((Math.sin).call({},  '' , this).__parent__ = prototype = 0/0)))gc()\n");
tryItOut("if((Iterator())) {var constructor } else {}\nyield __proto__;{}\n");
tryItOut("");
