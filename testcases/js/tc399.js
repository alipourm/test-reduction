tryItOut("try { return; } finally { return let (__noSuchMethod__, constructor = true) .2.__iterator__ = ({constructor: ({a1:1})}) @ (<x/>\t @ *); } ");
tryItOut("with({__proto__: ({constructor: (--this.@*.__defineGetter__(\"__parent__\", (Function).call))})}){if(<><x><y/></x></>.hasOwnProperty(\"__proto__\")) { if (0/0.watch(\"prototype\", eval)) /*infloop*/do  while(this ? .2 : __iterator__); else setter, __count__ = undefined;} }");
tryItOut("M:if(eval(\"<><x><y/></x></>\", ({})).yoyo((<><x><y/></x></>.hasOwnProperty(\"__count__\")))) {throw [1,,];{} } else  if ((null ? __noSuchMethod__ : constructor.isPrototypeOf((__iterator__)[(1e4[[,,z1]])]))) {} else {throw <x/>;M:if( { __count__ = __count__; } ) { if (__proto__) {__proto____parent__ } else {continue ; }} }");
tryItOut("with({__parent__: (uneval(-0))})switch(new <x><y/></x>(<x><y/></x>, [1,,])) { case 7: if(.2) { if (window) {export *;yield; } else yield;}break; {} }");
tryItOut("L: {gc()export *; }");
tryItOut("if(window) if(0/0) {} else yield; else  if (* <<= window) {let __count__ = [z1,,], constructor; } else if({}) {const constructor = 1.2e3, __iterator__ = undefined; } else  if (@foo) __noSuchMethod__ = <y><z/></y>, __proto__ =  \"\" ;");
tryItOut("/*infloop*/while(++(p={}, (p.z = true)()))let prototype = <x><y/></x>, __iterator__ =  /x/g \nif(__iterator__ = <>x><y/></x></>) { if (prop.([[1]].__defineGetter__(\"constructor\", ({}).hasOwnProperty))) let __proto__ = <x><y/></x>, prototype = 5.0000000000000000000000;} else {gc()window; }");
tryItOut("(<x><y/></x>.@*)(new RangeError())");
tryItOut("if(yield 033) export *; else {{}\n\t\n/*\n*/ }");
tryItOut("L:with(@foo){yield;export *; }");
tryItOut("/*for..in*/for(const __count__ = @foo in (<x><y/></x>)[ /x/g ]) {<x/>;/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__(function(y) { yield y; yield;; yield y; } in <><x><y/></x></>.prop = [[1]]) return #1#; }");
tryItOut("switch(typeof  '' .isPrototypeOf((__proto__ = prop))) { default: {yield ; }/*infloop*/for(var constructor; 1e81;  \"\" ) {-0; }0.1;case 1: let __count__ = @foo;break;  }");
tryItOut("while((null) && 0)/*infloop*/while( '' )export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype.prop in <x><y/></x>) export *;");
tryItOut("{} const constructor;");
tryItOut("let(constructor = ( /* Comment */1e-81)) { throw set;");
tryItOut("(__proto__);return __iterator__;");
tryItOut("let(({ __count__: __count__ }) = Iterator()) { return <x><y/></x>;");
tryItOut("/*infloop*/while(yield (let (constructor, __proto__) <employee id=\"1\"><name>Joe</name><age>20</age></employee>([<><x><y/></x></>.throw(1.2e3)])))yyyexport __parent__\nreturn @foo instanceof <x><y/></x> /= 1e+81 <= let (function::__proto__ = #1#)  '' ;");
tryItOut("/*for..in*/for(const __proto__ in ((((new (this)(window))).watch)(.unwatch(\"__proto__\"))))(*);");
tryItOut("const prototype = true;");
tryItOut("/*for..in*/for//h\n(const [getter, prototype] = ('fafafa'.replace(/a/g, function (constructor) { return new (*)(<x/>) } ).valueOf(\"number\"))[*::* === this] in (this.zzz.zzz)) let (__noSuchMethod__, prop = <><x><y/></x></>) { /*for..in*/for(const [prototype, prop] = __count__ in true) {(<y><z/></y>); } }");
tryItOut("/*infloop*/\tL:for(this.__defineGetter__(\"__parent__\", (1 for (x in []))); new [1,2,3,4].slice([11,12,13,14].sort); ((((new Function(\"{}\")))()) ^= (new (*)(1e81, true)).isPrototypeOf([z1,,].__lookupSetter__(\"constructor\")))) yield;");
tryItOut("/*infloop*/M:do {throw StopIteration; } while(this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }));");
tryItOut("{}");
tryItOut("let ([, constructor, , ({ \fconstructor: ({ constructor: __count__ }) }), ], __noSuchMethod__ =  /x/g [#3={a:#3#}]) { gc()\f }");
tryItOut("with([prop].map(Math.sin))if(eval(\"{}\", *).hasOwnProperty(\"prototype\")) \f else  if (window.__defineGetter__(\"__noSuchMethod__\", #1=[#1#])) throw __parent__; else {}");
tryItOut("if(@foo) {const __iterator__ = true;{} } else  if (constructor) [{return;__iterator__ = <x><y/></x>, __iterator__; = @foo; }, __proto__, __parent__] else ({a1:1})");
tryItOut("/*for..in*/for(var __count__ = this.__defineGetter__(\"__parent__\", (<y><z/></y>.unwatch(\"prop\")).watch)\t in (0/0 %= <x/>)) ");
tryItOut("M:if(__count__) { if ( \"\" ) export __iterator__; else {export *; }}");
tryItOut("return (-0 > constructor = undefined);");
tryItOut("/*for..in*/for(let x::__noSuchMethod__ in (p={}, (p.z = undefined)())) const __proto__ = \n<x><y/></x> * <><x><y/></x></>.isPrototypeOf(0);");
tryItOut("switch(((function(y) { yield y; throw @foo;; yield y; })(prop))) { default: case <x><y/></x> = __iterator__ = <y><z/></y>: break; /*infloop*/for(let __count__ = <x/>; function ([y]) { }; true) export *;/*infloop*/while(eval(\" '' \", __count__))yield false;break; case ({ prototype: [__count__, __noSuchMethod__] }) = this.zzz.zzz: break; case 5: break;  }");
tryItOut("if(#3={a:#3#}) constructor = arguments, __iterator__; else  if ([[]]) {yield <x><y/></x>;; } else {return; }");
tryItOut("/*for..in*/L:for(const <>(prototype = <x><y/></x>)</> = __parent__-=__iterator__.propertyIsEnumerable(\"__count__\") in <{prop}></{prop}>.(<><x><y/></x></>)) __parent__");
tryItOut("M:if(constructor = <x/>) { if (__noSuchMethod__) {export function::__proto__; }} else {};");
tryItOut("L: {;<><x><y/></x></>; }");
tryItOut("/*for..in*/for(var false in ((new Function(\"gc()\"))).call(4., prop)) {with({__count__: (this.valueOf(\"number\")).unwatch(\"prototype\")}){({}); } }");
tryItOut("var prototype = [,], __iterator__ = <y><z/></y>\n<> </>, ]");
tryItOut("M:if(#1=({__parent__: *::*++}).@*) /*for..in*/for(const __parent__ = constructor = prototype in #2=({__proto__: null})) {export *;\n;\n } else  if ((prop.__iterator__ setter= ({}).hasOwnProperty) >= ([1,,] , null).__defineGetter__(\"__parent__\", <><x><y/></x></>)) {const prototype, __count__;{export *;default: return;break;  } } else /*infloop*/for(*::* = [({prop: 'haha'.split})]; this.yoyo(new ((*).watch)(*::*,  '' )); <y><z/></y>) {const prototype;(<x><y/></x>); }");
tryItOut("prop = <y><z/></y>; const __count__;");
tryItOut("/*for..in*/for(var ({ prop: __parent__ }) in (('haha'.split)(<>true.watch(\"__noSuchMethod__\", (1e4).__defineSetter__).__lookupSetter__(\"prop\")</>))){const __count__ =  /x/ , __iterator__;let __proto__, __proto__; }");
tryItOut("{return; }");
tryItOut("/*infloop*/do {} while(((this).call(<y><z/></y>, *)));");
tryItOut("/*infloop*/L:do { } while(__parent__);");
tryItOut("with({}) throw getter;");
tryItOut("/*infloop*/while(({})){return; }");
tryItOut("M:while((((uneval(#0=<x><y/></x>)))) && 0){eval }");
tryItOut("if( \"\" ) 4. else {/a/gicontinue L; }");
tryItOut("{((function ([y]) { })());throw const __parent__, prototype;; }");
tryItOut("if( /x/ ) let __noSuchMethod__ = *, __proto__ = <x><y/>\f</x>; else  if (<x><y/></x>) {const constructor = 033, __noSuchMethod__ = this; } else {{} }");
tryItOut("var constructor;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (this.__defineSetter__(\"__parent__\"\f, function(q) { return q; })) in <y><z/></y>) __parent__, __parent__: <x><y/></x> = @foo;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = __parent__ = (__noSuchMethod__ = <><x><y/></x></>)\t in window/*\n*/ %= function(id) { return id }) {\nif((new function(y) { yield y; export __proto__;; yield y; }(null)).hasOwnProperty(\"prototype\")) { if (3) ( \"\" ); else {return 1.2e3;var __noSuchMethod__ = [1]; }} }");
tryItOut("let (prototype) { \fwhile((3.141592653589793) && 0)break L; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const try { yield; } catch(__proto__) { return <x/>; } \f in *::* = this) if(window === [[]]) { if (prop-=<x/>) export *;} else {export *; }");
tryItOut("return ( /x/g  ? \nlet (prop, __count__ = <x><y/><\r/x>) <x><y/></x> : (prototype ^=  '' ) | @foo |= this);");
tryItOut("{}");
tryItOut("*::*;/*for..in*/for(let __count__ in ((undefined)(arguments)))__parent__ = <x><y/>\f</x>;");
tryItOut("let ([, [], ({ *['prop']: ({ __proto__: constructor, prototype: constructor }), constructor: [, ] }), ] = <><></></>, [__count__, [({ __proto__: __parent__, __proto__: prototype }), , ({ x::prop: prototype, prop: __count__ }), []], , prop, ]) { {} }");
tryItOut(" /x/g , -0\n");
tryItOut("window.__proto__ = function(id) { return id }, (yield *.@foo)");
tryItOut("/*for..in*/M:for(const [__proto__, __parent__] = (p={}, (p.z = (({a2:z2}))(this))()) in ( /* Comment */ \"\" )) {M:switch((<x><y/></x> ^= window)) { default: return;break;  }while((__proto__ for (__count__ in 0)) && 0){} }");
tryItOut("switch(({prototype: new (null)().valueOf(\"number\") != #3={a:#3#} for each (__noSuchMethod__ in null), __noSuchMethod__: __count__ })) { case <bbb xmlns=\"<x><y/></x>.yoyo(default: case <x><y/></x>: case 2: case 0: break; case 3: const __proto__ = <><x><y/></x></>, __iterator__ =  /x/g ;break; return;<x><y/></x>;case 1: break; break; case constructor: export *;break; case 2: {}break; case 3: __count__, __iterator__; *= undefined)\"><xxx {__count__}={function(q) { return q; }} /><!--yy--></bbb>:  break; /*infloop*/do {var __count__ = <y><z/></y>, __count__;var __proto__; } while(window.yoyo(<x><y/></x>));break; default: break; evalbreak; case 7: constructor;case #0=[<y><z/></y>].unwatch(\"prop\"): break; break;  }\n");
tryItOut("do export *; while((__noSuchMethod__.__lookupSetter__(\"prototype\")) && 0);");
tryItOut("let(__noSuchMethod__ = ({})--) { with({}) { export *; } ");
tryItOut("this.zzz.zzz;");
tryItOut("return <x/>;{return;yield; }");
tryItOut("throw window;");
tryItOut("/*infloop*/while(.2 ?  /x/g  : [[]])/*infloop*/while((yield -1))return <x><y/></x>;");
tryItOut("L: {<x><y/></x> } const prop;");
tryItOut("L:switch((*::*.__defineSetter__(\"__iterator__\", (new Function).call))) { default: ;break;  }");
tryItOut("L: let(__parent__, __parent__) ((function(){return;})());");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] = gc ^= yield <y><z/></y> in ({__iterator__:  /x/g }).\f__noSuchMethod__) export *;");
tryItOut("/*for..in*/for(const [__iterator__, prop] = (-3/0 for (__noSuchMethod__ in @foo)) in \n<><x><y/></x></> + window) {return;return; }");
tryItOut("{/*for..in*/\ffor(var __parent__ in true) var __noSuchMethod__, constructor = <x/>; }");
tryItOut("({ constructor: ({ __noSuchMethod__: [, ] }), __iterator__: ({ constructor: __count__, __iterator__: [[, __parent__, , constructor]] }) })");
tryItOut("let __iterator__;\nreturn __count__;\n");
tryItOut("if([,,z1]) { if ( /x/g ) {} else {gc()export __count__; }}");
tryItOut("/*infloop*/for(let __parent__; (/a/gi); (export __count__; = <><x><y/></x></>) += [1].prop = <x/>) let prototype, __parent__ = null;");
tryItOut("if((new  \"\" )) {__noSuchMethod__(<x/>); } else (<x><y/></x>);");
tryItOut("/*for..in*/for(const (__noSuchMethod__) in (((Function).call)(#1=({__iterator__: this}))))/*infloop*/do {let prototype; } while(({ set prototype(__proto__, __proto__) { yield <><x><y/></x></>; } , each: false.throw(*) }));");
tryItOut("/*infloop*/for(const ({ constructor: __proto__, __proto__: __proto__ }) = ( /* Comment */prop.@foo).__noSuchMethod__ = +__count__ = __parent__, prop = *::*; [15,16,17,18].map(Function, __iterator__ = this.__defineSetter__(\"__iterator__\", (1 for (x in [])))); let (__iterator__) (yield <x><y/></x>)) if(__iterator__) yield; else __proto__");
tryItOut("if(<><x><y/></x></> > __noSuchMethod__) {yield false;return; } else return  /x/ ;");
tryItOut("(new Function(\"gc()\"))");
tryItOut("/*infloop*/while(void <><x><y/></x></>){gc*; }");
tryItOut("/*for..in*/for((__noSuchMethod__) in this.__defineSetter__(\"prop\", prop)) /*infloop*/do var try { export *; } finally {  } ; while(*);");
tryItOut("if((__noSuchMethod__ = function::__proto__)) throw  \"\" ; else yield;");
tryItOut(";");
tryItOut("var __noSuchMethod__, __iterator__;");
tryItOut("L: const __noSuchMethod__ = window, __parent__ = <y><z/></y>;");
tryItOut("/*for..in*/for(var __proto__ in ((function (function::__proto__, constructor) { break L; } )((setter =  /x/g )))){;return; }");
tryItOut("switch(__parent__) { default: /*for..in*/for(const __noSuchMethod__ = false in <y><z/></y>) let __iterator__, __count__ = 1e+81;/*infloop*/M:for(({constructor: window });  '' ; constructor = <><x><y/></x></>) continue L;case 1: ( /x/ );function(y) { yield y; throw <y><z/></y>;; yield y; }(<x/>);break;  }{} const __noSuchMethod__;");
tryItOut("return;");
tryItOut("M:if(prop = window.valueOf(\"number\")) /*for..in*/for(const [prototype, constructor] = <><x><y/></x></> in prop) export prototype; else  if ((p={}, (p.z = @foo)()))  else {yield;<x><y/></x>; }");
tryItOut("\twhile(((<x><y/></x>.(<><x><y/></x></>))) && 0)constructor = <x><y/\f></x>, prop\nif((this.__defineGetter__(\"__proto__\", 'haha'.split))) throw __count__;");
tryItOut("M:if([] = #3={a:#3#}.yoyo(__proto__) ?  '' .unwatch(\"__proto__\") : *.watch(\"__parent__\", Math.sin)) {} else  if ([15,16,17,18].some([<><x><y/></x></> for (__noSuchMethod__ in __iterator__, __noSuchMethod__)], <x><y/></x>.(prototype).__lookupSetter__(\"__proto__\"))) {} else ");
tryItOut("prop = __iterator__;");
tryItOut("M:if(Function()) { if (typeof __parent__.(true.isPrototypeOf(1e4))) return;} else {return; }");
tryItOut("M:if((this.isPrototypeOf(window))) { if (['fafafa'.replace(/a/g, this)]) {break M;L:if(<x/>) (<x><y/></x>).watch } else {continue L;throw *::*; }}");
tryItOut("var prop =  /x/ , __count__ = this;\n;\n");
tryItOut("/*infloop*/L:while(false){this }");
tryItOut("export *; const __proto__;");
tryItOut("/*infloop*/L:do {export *; } while((p={}, (p.z = window)()));");
tryItOut("/*for..in*/for(let [,,z1].prototype in ((<><x><y/></x></>([1,,]))(new ([[]])(1e-81)))){continue L; }");
tryItOut("var __iterator__;");
tryItOut("throw prototype;");
tryItOut("/*infloop*/while(__parent__.( /x/g )){yield; }");
tryItOut(" '' ;let constructor;");
tryItOut("L: if(undefined) { if (window) {<><x><y/></x></>;[z1,,] } else {__iterator__ = null, constructor; }}");
tryItOut("switch(__proto__;) { default:  }");
tryItOut("/*infloop*/for(const __count__; (__proto__.watch(\"__proto__\", [1,2,3,4].map))[window]; (([1,2,3,4].slice)())) {var __proto__ = <y><z/></y>, prop; }");
tryItOut("/*for..in*/for(__parent__ in ((function  __iterator__ (({ __count__: ({ __parent__: ({ prototype: ({ constructor: prop, prototype: [, , , ({ __noSuchMethod__: prop, __noSuchMethod__: __parent__ }), ] }) }), constructor: constructor }) })) { try { gc } catch(prop if (function(){const __proto__ = function ([y]) { }, __proto__;})()) { break M; } finally { (window); }  } )(prop))){export prototype;let __count__, __parent__; }");
tryItOut("[1,2,3,4].map\nyield #1#; const prop;");
tryItOut("/*infloop*/L:do yield __iterator__ = __count__; while(((/*\n*/this += (-1) = Error() || ((yield )) ?  ''  *= prototype : prototype for each (__proto__ in try { with({}) { ; }  } catch(__proto__) { for(let y in [5,6,7,8]) {} }  for (__iterator__ in true)) for each (__noSuchMethod__ in ((p={}, (p.z = [15,16,17,18].filter(function  __count__ (__proto__, __parent__) { {} } , window))()))))));");
tryItOut("if([1,,]) { if (([( .@ window)])) return;} else {return;return ({}).__lookupGetter__; }");
tryItOut("if(yield null.unwatch(\"__iterator__\")) { if (let (constructor) <><x><y/></x></>.watch(\"__count__\", Math.sin)) {constructor } else {yield; }}");
tryItOut("if(((null\n.watch(\"constructor\", this))++)) { if ((__iterator__.(new Math.sin(prototype, #3={a:#3#})).prop getter= [1,2,3,4].slice)) gc()} else ;");
tryItOut("/*for..in*/for(prop in (eval(\"{let(prototype) { try { var  set __proto__(constructor)null = __proto__ getter: function  __parent__ (__parent__, __proto__) { yield <><x><y/></x></> } , prop = <x/>; } catch(constructor if (function(){window})()) { __count__ } catch(constructor if (function(){return;})()) { gc() } catch(__iterator__ if @foo) { throw __noSuchMethod__; } catch(__iterator__) { export *; } __parent__; }\", window))) {__count__ = <x/>, prototype\nprop;{/*infloop*/for(var prototype = <><x><y/></x></>; *; Math.pow) {return;let prototype, __noSuchMethod__ = -3/0; } } }");
tryItOut("with({}) { try { <x/>; } catch(__count__) { throw <x/>; } finally { <x><y/></x>; }  } ");
tryItOut("switch(#1#.valueOf(\"number\")) { default: if((new #1=[#1#](<y><z/></y>, this)))  else {break M;; } }");
tryItOut("L: with({__iterator__: __count__.constructor = {/a/gi/*infloop*/for(__parent__ = this;  \"\" ; 4.) return *::*; }})if(0x99) break  yield 5.0000000000000000000000;M else  if (#2=this) gc() else yield true;");
tryItOut("with({}) { for(let y in [5,6,7,8]) let __count__ = [,]; } ");
tryItOut("if((__noSuchMethod__ if (<x><y/></x>))) if(<x><y/></x>) {throw [,,z1];throw <><x><y/></x></>; } else export *;");
tryItOut("let (prop, function::__count__) { /*for..in*/for(let (null.__defineSetter__(\"prop\", <y><z/></y>))['__noSuchMethod__'] in ((__count__)(prototype = window.__lookupGetter__(\"prop\"))))export *; }");
tryItOut("if((void <><x><y/></x></>\n)) /*for..in*/for(let [function::prop, prop] = * in <><x><y/></x></>) {<x><y/></x>; } else  if (new (__iterator__ = [,])(@foo)) let __count__; else {throw  \"\" ; }");
tryItOut("let (prop = (eval(\"true\", <><x><y/></x></>)), __parent__) { /*for..in*/for(var function::constructor = (this.__defineSetter__(\"__parent__\", ({}).hasOwnProperty)) in *::*) {continue M;return; } }");
tryItOut("M:if((this.zzz.zzz)) {{} } else {while(([]\t) && 0){const constructor; } }");
tryItOut("L:if([15,16,17,18].sort(Math.sin, <x><y/></x>)) { if ((__parent__.__iterator__).__proto__ = +<><x><y/></x>\f</>) {\n }} else 1e81;");
tryItOut("/*infloop*/do /*for..in*/for([__noSuchMethod__, __count__] = <y><z/></y> in [1,,]) {([z1]);var __parent__ = @foo; } while((new new Function()));");
tryItOut("with({__noSuchMethod__: window\n}){gc() }");
tryItOut("with({}) { with({}) { return __parent__; }  } ");
tryItOut("if(window) { if (<y><z/></y>) break ; else export prototype;}");
tryItOut("if((this.__parent__ = <y><z/></y>.*)) { if (@foo >> ([z1,,] >>> *::*) for ((__parent__) in this.__defineGetter__(\"constructor\", <x><y/></x>)) for ((undefined)(__parent__\t) in __iterator__ = __noSuchMethod__)) } else {/*infloop*/while((@foo / *)(window.prop = <><x><y/></x></>) = (false)(false))/*for..in*/for(let prototype = true in this) {break ; } }");
tryItOut("/*infloop*/for(+constructor(false) = (<x><y/></x>).__defineSetter__(-3/0); (yield __count__.prototype setter= [1,2,3,4].map); (null)(function::__noSuchMethod__, <><x><y/></x></>)) {}");
tryItOut("for(let y in [5,6,7,8]) export prototype;");
tryItOut("L:if((let (__parent__ = undefined, __noSuchMethod__) [,,]).throw(Exception(<y><z/></y>, __parent__))) export *; else  if (*::* ^ @foo) {L:if(let (function::x::__proto__) <x><y/></x>) {const constructor = <><x><y/></x></>, __parent__;(<x><y/></x>); } else  if (constructor %  /x/g ) constructor, constructor; else export *;M:with({__count__: <x><y/></x>})let __parent__ = window; } else {gc() const prototype; }");
tryItOut("/*infloop*/do {{yield  /x/g ; }; } while((<x/>.propertyIsEnumerable(\"__proto__\") >>>=new (<x><y/></x>)(true))); const constructor;");
tryItOut("{/*infloop*/for(var prototype; ((uneval(#1#))); ((yield window))) gc()L: {yield;__count__; } }");
tryItOut("/*for..in*/for(let [[__noSuchMethod__], prop] = ( ''  >>= 3) in __noSuchMethod__ = ({ prop: __parent__ })) /*for..in*//*\n*/for(const __noSuchMethod__ in ((function  prop () { prototype; } )(__count__ = @foo)))gc()");
tryItOut("/*infloop*/for(var prototype = <x><y/></x> ^ false; {}; (<x/>)[window]) throw  \"\" ;");
tryItOut("{throw window;; }");
tryItOut("do function(q) { return q; } while((constructor = __iterator__ = <><x><y/></x></> + {}) && 0);");
tryItOut("/*infloop*/for( \"\" .__iterator__ = <x><y/></x>; ([, , __proto__, prototype, ] = (({constructor getter: function(y) { yield y; continue L;; yield y; }, prop: __noSuchMethod__ }))); <><x><y/></x></>\n in --<x/>.unwatch(\"prototype\")) {false;{return <><x><y/></x></>;; } }");
tryItOut("let([, ], __iterator__) ((function(){throw __parent__;})());");
tryItOut("throw 1.2e3;\nM:switch(<y><z/></y> instanceof window / @foo.__defineGetter__(\"set\", [1,2,3,4].slice)) { case 2: break; default: return;break; case 6: case prop.__proto__ setter= (([[1]]).watch).apply: case throw StopIteration;: return;case 3: export __count__;break;  }\n");
tryItOut("let(__count__, __count__) { let __noSuchMethod__, prop =  /x/g ;");
tryItOut("/*infloop*/for(let ({ prop: prototype, __count__: __iterator__ }) = constructor; ({ get __parent__(__parent__, __parent__)<x/>, prop setter: eval }); @foo.@*) M:if((this)()) {} else prototype; const __proto__;");
tryItOut("do {L:if((constructor.__count__ setter= Math.sin)) { if (prototype.watch(\"\", (new Function(\"<><x><y/></x></>;\")))) __iterator__;} else {__parent__; }yield; } while(([,,]) && 0);");
tryItOut("gc const <employee id=\"1\"><name>Joe</name><age>20</age></employee>;");
tryItOut("while((true.__defineSetter__(\"__count__\", window.@foo)) && 0){gc()while((<x/>) && 0){ } }");
tryItOut("/*infloop*/for(({ prototype: __proto__, __proto__: __iterator__ }) = (__noSuchMethod__ = *::*); __iterator__ = ({a2:z2}); Exception( '' , window)) throw [z1];");
tryItOut("do {(window); } while(((this.__defineGetter__(\"__iterator__\", function(y) { yield y; {}; yield y; }))) && 0);");
tryItOut("/*for..in*/for(let [__count__, __proto__] = <><x><y/></x></> %= <x><y/></x>.throw(null) in [11,12,13,14].sort) if((uneval(window))) { if (((yield this)) / __count__ =  \"\"  ? this : <x><y/></x> != 0.1) {return; }} else break ;");
tryItOut("/*infloop*/while(-1){(*);const __noSuchMethod__; }if(1.3) { if (*::*) __count__ = <x><y/></x>;} else ");
tryItOut("if(this.zzz.zzz) {prototype;prop; } else  if (undefined) /*infloop*/for(const __parent__; *; <x><y/></x>) {(<><x><y/></x></>);throw window; } else {constructor;constructor = this }");
tryItOut("M:if( /x/ ) /*infloop*/for(var constructor; (this.\f__parent__); [, ] = ({ setter: ({ <y><z/></y>: __iterator__, __proto__: __iterator__ }), __parent__: [] })) if(yield;) { if (*) {gc()return __iterator__; } else const __proto__;} else  if ([(function(y) { yield y; __count__ = [z1,,], __parent__ = <x/>;; yield y; }).call(constructor = <><x><y/</x></>, eval(\"export *;\", *)) for (get in __parent__ .@*:: (typeof __iterator__)) for each (__proto__ in (({__iterator__: (@foo < prop),  set __parent__ prototype (constructor) { return (eval(\"yield function(id) { return id };\", <x/>)) }  }))) for ((prop) in 'fafafa'.replace(/a/g, function(q) { return q; })) for each (__proto__ in <x/>) if (0/0)]) try { for(let y in [5,6,7,8]) {} } catch(__parent__ if yield *::*\n) { with({}) { export *; }  } catch(__iterator__) { try {  } (__iterator__ = yield null) catch(prop) {  } finally { yield 0.1; }  } ");
tryItOut("/*for..in*/L:for(const /*infloop*/for(let ({ __noSuchMethod__: [__proto__(<x><y/></x>), , , ({ __parent__: [] })] }) = <employee id=\"1\"><name>Joe</name><age>20</age></employee>; [(-0)].sort(new Function); ({ set __noSuchMethod__ __parent__ (__parent__) { return <y><z/></y> } ,  set prop constructor (__proto__)033 })) {if((yield *)) {((new Function(\"var delete = 3.141592653589793, function::prop = <x><y/></x>;\"))).call } } in Boolean(false, <x/>)) {return  \"\" ; }");
tryItOut("if(<bbb xmlns=\"@foo.unwatch(\"prop\")\"><!--yy--></bbb>.(*::*.__defineSetter__(\"__iterator__\", Math.sin))) { if (__count__) this; else /*infloop*/M:do {__iterator__ = <x><y/></x>;[1,2,3,4].map } while(<><x><y/></x></>);}");
tryItOut("if(( ''  %= <><x><y/></x></>)) yield; else  if (((4.)())) {yield window;let __noSuchMethod__; } const this;{if(undefined) { if (<x/>) gc() else {return this;<x><y/></x>; }}L:if(*::*) { if (-1)  var  else return <><!--yy--></>;} }");
tryItOut("if((@foo >>>=1e4)) return null; else  if (yield <><x><y/></x></>) {function(q) { return q; } }L:with({__iterator__: undefined})((-1));");
tryItOut("if(<><!--yy--></>) {yield false;Math.pow } else  if (window.propertyIsEnumerable(\"prop\").__noSuchMethod__) {export *;var __proto__, __parent__ = <y><z/></y>; } else gc()");
tryItOut("__proto__ = __parent__;");
tryItOut("const prototype;export __iterator__;");
tryItOut("L:if([15,16,17,18].some(this, [,])) {throw -1; } else  if (new #1=[#1#]()) {throw window; }");
tryItOut("with(__proto__.prop|=(<y><z/></y> |= false)){if((('fafafa'.replace(/a/g, function  __count__ () { let __iterator__, prop; } )) >> - /x/ )) { if (__parent__ = <x><y/></x> >>>=({__noSuchMethod__: 4.,  set constructor(__iterator__) { yield <x><y/></x> }  })) ([1,,]); else {break L; }} }");
tryItOut("constructor, x::prototype");
tryItOut("\nbreak L;\n");
tryItOut("let (__count__) {  /x/  }");
tryItOut("if(prop.constructor getter= ([1]).call) {if(this) {;var constructor = this, constructor = null; } else  if ( /x/ ) {{}; } } else  if (prop = <x/>.yoyo(<x><y/></x>)) {/*infloop*/for(let setter = <y><z/></y>; <x/>; __parent__) {throw 3; } } else {/*for..in*/for(let __noSuchMethod__ in ((({}).__lookupGetter__)(null)))continue M; }");
tryItOut("if(1e81.isPrototypeOf(@foo).__count__ = <y><z/></y>.__defineSetter__(\"__noSuchMethod__\", function () { function  __proto__ (__proto__, constructor) { return <><x><y/></x></> }  } )) {yield <y><z/></y>;return; }");
tryItOut("if(gc()) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("if(__iterator__) if(\n /x/ ) let constructor = <x><y/\n></x>, __iterator__ = *; else  if (#2=[('fafafa'.replace(/a/g, 1e4) .. this || <y><z/></y>.@*)]) {export *; const window;window }");
tryItOut("if((( \"\" )[function::__iterator__ = <x/>])) var prop = this, __parent__; else  if (this.__defineSetter__(\"prop\", Math.pow)) {0.1;export *; }");
tryItOut("/*infloop*/M:for(const ({ __noSuchMethod__: constructor, (Iterator((this ^ <><x><y/></x></>), <x><y/></x>)): ({ __count__: [] }) }) = new  /x/  ? <x><y/></x> : ({a1:1})(<x/> >  \"\" ); ((function () { yield true } )(<><x><y/></x></>)); @foo) {}");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(1e-81.hasOwnProperty(\"__noSuchMethod__\"))continue L;");
tryItOut("/*for..in*/for(({ constructor: ({ constructor: prototype }), __iterator__: ({ __proto__: __parent__, constructor: __proto__ }) }) in (this)() += [1]) with({__proto__: (( /x/ ).__defineSetter__).call((constructor-=<x><y/></x>), )}){let (__iterator__) { if(@foo) export prototype; else {const prototype, __iterator__ = <x><y/></x>;throw let __iterator__;; } }__count__ = false; }");
tryItOut("do {break L;<x><y/></x>;\t } while(([*//h\n]) && 0);");
tryItOut("L:if(<x><y/></x> :: /0/0) {Functionconst prototype = *::*; }\nthrow __iterator__;");
tryItOut("if(((*::* if (__proto__)))) { if (new (true)()) {}} else @");
tryItOut("L: {export constructor; }");
tryItOut("/*for..in*/for(const constructor in (4..yoyo(true))()) while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>) && 0);");
tryItOut("/*infloop*/while(033)");
tryItOut("/*for..in*/for(let __iterator__ = prototype.__noSuchMethod__ in __noSuchMethod__ .@*:: <y><z/></y>) while((true) && 0)const __noSuchMethod__ = <x><y/></x>, __iterator__ = window\n");
tryItOut("while(((yield -3/0 << ((p={}, (p.z = [,])())(( /x/  ? <><x><y/></x></> :  '' ), <x/>)))) && 0)if( /x/g .@foo.unwatch(\"constructor\")) throw __iterator__; else  if (__parent__.__parent__) (1 for (x in [])) else let __proto__ = prop;");
tryItOut("yield 0.1;");
tryItOut("gc()");
tryItOut("/*infloop*/for(constructor = undefined.watch(\"constructor\", function  prototype (__parent__) { return \r<x><y/></x> } ); 1e-81.__iterator__ = <y><z/></y>; <x/>.yoyo(__proto__).__defineSetter__(\"constructor\", function(q) { return q; })) {yield;yield; }");
tryItOut("if((((function ([y]) { })() & ) if ((window.throw(null))))) {if(<><x><y/></x></>) {}\n{}\n } else {{}if(<x/> , <y><z/></y>) {continue ; } else { \"\" ;export __parent__; } }");
tryItOut("with({constructor: ({ constructor: constructor, __parent__: __proto__ }) = ( /* Comment */@foo)}){; }");
tryItOut("(undefined)(null) = __count__;");
tryItOut("/*infloop*/for(__noSuchMethod__; this.__defineGetter__(\"constructor\", ((1 for (x in []))).call); new new Function((null, <x><y/></x>))) if(window) { if (({ __noSuchMethod__: prototype }) = (<x/>)[*]) gc()} else {let __parent__; }");
tryItOut("gc()");
tryItOut("/*infloop*/for([[, [], __proto__], constructor;, , __iterator__, ] = <x><y/></x>.__count__; new (function  constructor ()<>__count__</>)([z1], 0); this.__defineSetter__(\"prop\", ({}).__lookupGetter__)) {continue L; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in eval(\"constructor\", constructor)) {/*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in (function ([y]) { })()) ; }");
tryItOut("const __iterator__;");
tryItOut("continue ;");
