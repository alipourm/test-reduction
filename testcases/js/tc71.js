tryItOut("break M;");
tryItOut("{/*for..in*/for(let __proto__ = undefined in <><x><y/></x></>) {(function ([y]) { }); }gc() }");
tryItOut("try { for(let y in []); } catch(__iterator__) { for(let y in []); } finally { return  /x/g ; } ");
tryItOut("/*for..in*/for(let __parent__ in 'fafafa'.replace(/a/g, [1,2,3,4].slice)) __iterator__ = true;");
tryItOut("/*infloop*/L:while(prototype.prototype = (uneval(<y><z/></y>)) for each (__noSuchMethod__ in __count__) if (this) >> __noSuchMethod__){break Mlet (({ __proto__: <><x><y/></x></>, function::__proto__: ({ constructor: constructor, __proto__: __count__ }) }) = (yield (new Number())), ({ prototype: prototype })) { return 1e+81; } }");
tryItOut("L:while((<x><y/></x>.__defineSetter__(\"__count__, __noSuchMethod__\", <x><y/></x>)) && 0)gc()");
tryItOut("with(void this)break ;");
tryItOut("M:if(((((({ __proto__: prototype, constructor: __count__ }) = [, , __parent__, ]).prototype) for (__noSuchMethod__ in <><x><y/></x></>--) for each (__count__ in ~a)))) {/*for..in*/for(var prop in ((eval)((new ([[1]]).watch(<x><y/></x>))))){L: yield <x><y/></x>; } }\t else with({}) try { {} } catch(prototype) { {} } ");
tryItOut("while((({a1:1})) && 0){ }const setter = 3.141592653589793, __parent__ = false");
tryItOut("M:with((prop = 4.)[({})(<><x><y/></x></>)])with(({}) .@ prop)continue ; const __count__;");
tryItOut("if(<y><z/></y>) { if ([1,,]) (this);} else {<x><y/></x>; }");
tryItOut("with({prototype: #0=[this.__defineGetter__(\"__noSuchMethod__\", ((1 for (x in []))).apply)]}){return 1e-81; }");
tryItOut("throw 1e4;( '' );");
tryItOut("if(null.__defineSetter__(\"__iterator__\", gc)) { if (export __noSuchMethod__) let __iterator__;} else const prop = <><x><y/></x></>; const [11,12,13,14].map == new (1.3 , <x><y/></x>)(-3/0 if ([z1,,]), (!*::*)) + prototype;");
tryItOut("if(<x/>.__lookupSetter__(\"constructor\")) { if (__count__) {export *; } else {yield @foo; }}");
tryItOut("L:if(1e4 ? [z1,,] :  { (<x><y/></x>); }  /= (eval(\"(__proto__ = this)\", 033))) {return (-0); } else  if ((({__proto__ getter: function  prototype (constructor) { return <y><z/></y> }  }))) {return  /x/g ; } else M:if(__iterator__) {yield <><x><y/></x></>;var __proto__; } else  if ([[]]) {yield <x><y/></x>; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; ((this.__iterator__ = false).__defineSetter__(\"__proto__\", function  __count__ () { switch(<x><y/></x>) { default: const __proto__ = <><x><y/></x></>, prototype = <><x><y/></x></>; } } )); function ([y]) { }) {<x><y/></x> /= <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let prototype in ((eval)(this.__defineGetter__(\"prototype\", Math.pow))))M:if(@foo) return; else yield;");
tryItOut("L:with({prototype: (function::constructor.__noSuchMethod__ = <><x><y/></x></>)\n}){const ;return this; }");
tryItOut("__proto__ = prop;");
tryItOut("L:switch(window) { case 5: return  /x/g ; }");
tryItOut("if(<>__proto__</>) { if (false) export *; else throw *::*;}");
tryItOut("/*infloop*/do {/*infloop*/do ; while( ''  .@*:: true); } while(constructor-=1e4);");
tryItOut("\tlet (__parent__ =  /x/ ) { throw *; }");
tryItOut("do {let __parent__ = this;var __iterator__\nthrow [z1,,]; } while((let = __parent__) && 0);");
tryItOut("while((prop) && 0)export *\nyield;throw true;");
tryItOut("let (prop = __iterator__, __noSuchMethod__) { {} }");
tryItOut("L:if(<x/>) {{} } else  if (<><x><y/></x></>) yield; else {export *;return this; } /x/ ;\n/*infloop*/for((prototype) = ({ constructor: __count__ }); __iterator__.{export *; } getter= prop.yoyo(new 'haha'.split()); function (__proto__, prototype) { yield <><x><y/><//h\n/x></> } .__lookupSetter__(\"constructor\")) {M:if(<x><y/></x>) { if (1e-81)  else {(prop); }}const  { yield null }  = __proto__, default: gc() = #3={a:#3#}; }\n");
tryItOut(" /x/ ");
tryItOut("with({__iterator__: ([__iterator__, , , ({ __noSuchMethod__: __proto__, __parent__: prototype })] = ({ prop: ({ prop: __parent__, x::prototype: this }) }))})return  ''  <= @foo;");
tryItOut("L:if(null) constructor;");
tryItOut("export *;");
tryItOut("__parent__ = __proto__;");
tryItOut("gc()\nlet x::constructor;");
tryItOut("L:if(<xxx {__parent__}={({a2:z2})} />) {gc() } else gc()");
tryItOut("if(<><ccc:ddd> </ccc:ddd></>)  else  if ((<{__count__}><ccc:ddd> </ccc:ddd></{__count__}>.(__parent__ = prototype))) {yield;<x><y/></x>; }");
tryItOut("<><x><y/></x></>\n");
tryItOut("__proto__ = this, prop = null;");
tryItOut("L:with(String(<><x><y/></x></>) === null)new Function");
tryItOut("/*infloop*/for(let [({ __parent__: ({ __count__: prototype }) }), ] = [15,16,17,18].map([1,2,3,4].map, [,,z1].yoyo( /x/ )); (this.__defineSetter__(\"prop\", ([1,2,3,4].slice).apply)); *) {var __parent__, prop; }");
tryItOut("switch( /x/ ) { constructor setter: function(q) { return q; } }");
tryItOut("<><x><y/></x></>\nreturn;");
tryItOut("{}");
tryItOut("/*for..in*/for(let __proto__ in this) {continue M;((-0)); }");
tryItOut("/*infloop*/L:for(4.; new Math.sin();  /* Comment */(window % <x><y/></x>)) {let (prop = [1], prototype) { yield; }gc() }\n/*infloop*/for(__noSuchMethod__.(this);; ({yield <><x><y/></x></>;gc() } % (-0)) <= new ((/a/gi).call)( \"\" , [1]); (new <x><y/></x>((uneval(window)),  \"\" ))) {1.3; }");
tryItOut("/*infloop*/while('haha'.split){L:if(<x><y/></x>) { if (<x><y/></x>) {return; } else var __parent__ = false;} }");
tryItOut("/*infloop*/M:for(__count__; @foo.hasOwnProperty(\"prop\"); eval(\"export __iterator__;\", function(id) { return id })) const prop = __proto__;");
tryItOut("/*infloop*/for(this; <>[11,12,13,14].sort</>; (this.__defineSetter__(\"constructor\", __proto__)(yield <x/> % this))) { }");
tryItOut("/*for..in*/for((<y><z/></y>)([1e+81].map((Math.sin).call).throw(new (prop)(true, <><x><y/></x></>))) in eval(\"false\", *).isPrototypeOf(<x><y/></x>)) {gc() }");
tryItOut("if( \"\"  |= <x><y/></x>) { if (constructor ? <x/> :  /x/ ) return;} else {return;; }\r");
tryItOut("let(prop = [[1]]) ((function(){yield +({}).prototype;})());");
tryItOut("/*infloop*/while(__count__ = __count__)throw <><x><y/></x></>;");
tryItOut("const prototype = *\n{\t}");
tryItOut("/*infloop*/do \f while(yield ((function(y) { yield y; ;; yield y; })(<y><z/></y>.isPrototypeOf( \"\" ))));");
tryItOut("L:while((\n@foo) && 0){{} }");
tryItOut("break L;");
tryItOut("/*for..in*/for(const [__parent__, constructor] = undefined() in <x><y/></x>) {/*infloop*/L:do __count__ = true ^= 1e+81 while(({a2:z2})); }");
tryItOut("if(<><x><y/></x></>) { } else {yield;var __count__; }");
tryItOut("/*infloop*/do __proto__ = @foo, __proto__ = __parent__; while(((({}).__lookupGetter__)()));");
tryItOut("/*infloop*/while(<><bbb xmlns:ccc=\"(yield <x><y/></x>.prototype = undefined)\"><ccc:eee></ccc:eee></bbb></>){{} }");
tryItOut("M:if((-0).@*) { if (({ get __count__ __noSuchMethod__ (constructor, __noSuchMethod__) { return null }  }))  else yield #1=[#1#];}");
tryItOut("window\nreturn;\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; __count__033 << #1=({__proto__: <x><y/></x>}); ('fafafa'.replace(/a/g, function  __noSuchMethod__ (__noSuchMethod__)<x><y/></x>))) {/*infloop*/for(1e+81; __iterator__;  /x/g ) {<x><y/></x>; \"\" ; }{} }");
tryItOut("{undefined;( /x/ ); }");
tryItOut("with(null | __proto__)return {};");
tryItOut("let ([], __parent__ = null.hasOwnProperty(\"constructor\")) { /a/gi }");
tryItOut("/*infloop*/for(var __iterator__; <y><z/></y>; 3.141592653589793) {gc()export *; }");
tryItOut("L:if((\f[((1 for (x in []))()) for each (__count__ in <x><y/></x>) if (<y><z/></y>)])) { if ( !== <y><z/></y>.eval(<x/>)) do (<x><y/></x>); while((this) && 0); else if(<x/>) { if ( /x/ ) {export *;return [1]; } else {(({}).hasOwnProperty).apply }}}");
tryItOut("/*for..in*/for(let ({ __proto__: [({ __proto__: [({ __parent__: prop })] }), , , __noSuchMethod__] }) in new <x/>( /x/g ,  /x/ )) if((<x/> .@ this)) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (<><x><y/></x></>).apply) {;return window; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let ({ __proto__: __count__, __parent__: prototype }) in <xxx {prop}={ /x/g } />.(~<><x><y/></x></>)) {if(constructor.__proto__ getter= (new <x><y/></x>).__defineSetter__) {yield;gc() } }");
tryItOut("/*for..in*/L:for(const constructor in function(id) { return id }) {L:do {const constructor, constructor =  '' ; } while((true) && 0); }");
tryItOut("(window);\n\n");
tryItOut("switch(([<><x><y/></x></>].some(({}).hasOwnProperty))) { default: /*for..in*/L:for(const [prototype, __proto__] = new Boolean( \"\"  @  '' ) in ) /*infloop*/for([z1]; window; <><x><y/></x></>) export prototype;break; /*for..in*/L:for(__noSuchMethod__ in __iterator__ = this) export *;/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in __parent__) {return this; }break; case 0: export *;break; case <y><z/></y>: break; case 9: break; case (prop): yield <y><z/></y>;case 5:  }");
tryItOut("with({prop: ({__iterator__: undefined, prop: constructor })}){yield; }");
tryItOut("/*for..in*/for((__proto__) in ((function  __noSuchMethod__ () { yield yield  /x/g  } )(new -0())))");
tryItOut("/*infloop*/do {/*for..in*/for(var constructor = <x><y/></x> instanceof  \"\"  in <x><y/></x>) {\fvar prop, prototype = 1e4; }throw  ''  >>=  /x/ ;export *\n/*infloop*/do [1,2,3,4].slice while(true.propertyIsEnumerable(\"prototype\")); } while(__proto__.constructor getter= __iterator__.prop getter= (prototype = window).watch);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in delete @foo.constructor) (0x99).__defineSetter__");
tryItOut("while((<y><z/></y>) && 0){return  /x/g ;yield; }");
tryItOut("with({}) { constructor = __noSuchMethod__; } ");
tryItOut("while((*::*) && 0)export *;");
tryItOut("{return; }");
tryItOut("/*infloop*/L:while(constructor =  /x/g )continue L;");
tryItOut("/*infloop*/while(continue M;){with({prototype: <><x><y/></x></>\f}){x::__parent__return; }/*for..in*/L:for(const __proto__ = arguments in  '' ) yield; }");
tryItOut("if(*) {const __count__ = (function ([y]) { })(), __noSuchMethod__; }");
tryItOut("if(window) { if (([11,12,13,14].sort)) {{} }} else (*);");
tryItOut("{}");
tryItOut("while(([15,16,17,18].filter(this.__defineGetter__(\"__parent__\", [1,2,3,4].map), ('fafafa'.replace(/a/g, function ((__count__.__parent__)) { yield <x/> } )))) && 0){__count__ }");
tryItOut("/*for..in*/M:for(let @foo['__iterator__'] in ((((1 for (x in []))).apply)(\f([] = __proto__)))){if(this.zzz.zzz) {export constructor; } else  if ((uneval(1.2e3))) export prop; else export __count__; '' ; }");
tryItOut("L: {export prop;let prop; }");
tryItOut("L: yield ({});");
tryItOut("/*infloop*/for(var __iterator__; (this.unwatch(\"prop\")); __parent__ = <><x><y/></x></>( set prop __iterator__ () { return <y><z/></y> } )) {__proto__, window =  '' ;L:if(*::*) {yield; } }");
tryItOut("/*infloop*/for( \"\" .throw(__parent__.__proto__); window; (RegExp())) gc()");
tryItOut("L:switch(( /x/  ^= <><x><y/></x></>)) { default: case 1: /*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in __proto__) {{}throw [1]; }case 5: break L;with(#3={a:#3#})return <><x><y/></x></>;(<y><z/></y>);break;  }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = @foo .. <x><y/></x> in window) var __noSuchMethod__;/*\n*/");
tryItOut("\n( \"\" );\n const __proto__;");
tryItOut("/*for..in*/for(var __noSuchMethod__( { return  \"\"  ? window : this } ) in (constructor.__count__ setter= (function ([y]) { })() ? <x><y/></x> in 1.3 : <><x><y/></x></>[ \"\" ])) /*infloop*/for(var [[, ], , __noSuchMethod__, ({ prototype: ({ __iterator__: __count__, __iterator__: prop }), prototype: prototype })] =  \"\" .prop << __iterator__ = <y><z/></y>; prop; <><ccc:ddd>yyy</ccc:ddd></>) {(<x><y/></x>);break ; }");
tryItOut("let (({ prop: prop, prop: __count__ }), let) { gc() }");
tryItOut("/*infloop*/M:for(var prop; __noSuchMethod__; window) {}");
tryItOut("/*infloop*/for(var __noSuchMethod__; this; 5.0000000000000000000000.*) {{break M;(0/0); } }");
tryItOut("with( '' ){{} }");
tryItOut("if((({ prop: prop }) = [__parent__, , __proto__, ]).@*) { if ((yield <x><y/></x>)) {__iterator__; } else {{throw __proto__;gc() } }}");
tryItOut("L: const __count__ = false, <><x><y/></x></>;");
tryItOut("/*for..in*/for(constructor in ((eval)(null.__defineSetter__(\"__count__\", (1 for (x in []))).propertyIsEnumerable(\"__proto__\")))){(Math.pow).callprop = <><x><y/></x></>; }");
tryItOut("while((<y><z/></y>) && 0)export *;");
tryItOut("if(window <=  /x/g ) { if (this.__defineGetter__(\"__parent__\", gc)) {return; } else {export *; }}");
tryItOut("switch([15,16,17,18].some\f(, 1e-81 |= <><x><y/></x></>.__defineSetter__(\"__iterator__\", (#0=[<x><y/></x>]).call))) { \tcase (function(y) { yield y; /*for..in*/for(var window in 4.) {prop: <><x><y/></x></>; }; yield y; }()\n): <x><y/></x>.prototype = <x><y/></x>;break; default:  }");
tryItOut("let (__proto__ = 4., __noSuchMethod__) { /*infloop*/do {yield <x><y/></x>;gc() } while(undefined); }");
tryItOut("throw .2;");
tryItOut("{throw <><x><y/\r></x></>;\n\n/*infloop*/for(let constructor\r = __parent__.prototype = arguments ===  \"\" ; <y><z/></y>; this.__defineSetter__(\"constructor\", (uneval(<><x><y/></x></>)))) {throw <><x><y/></x><\f/>;export prototype; } }");
tryItOut("L: {L: export constructor;export __noSuchMethod__; }");
tryItOut("with({__parent__: this.__defineSetter__(\"prop\", [11,12,13,14].map >>> (5.0000000000000000000000 ^=  /x/g ))}){}");
tryItOut("L:if(({ constructor: __iterator__, prototype: __iterator__ }) = ((true)[__iterator__])) { if (({__count__: [ '' ],  set __iterator__(__noSuchMethod__)__noSuchMethod__\n })) {(window);\nreturn __noSuchMethod__;\n } else return;}");
tryItOut("if([({ __proto__: __noSuchMethod__ }), prop, , ]) { if ((0/0)(<><x><y/></x></>)|=eval(\"{}\", *::*).propertyIsEnumerable(\"__iterator__\")) {export prototype;if(-1) var prototype = *::*, __noSuchMethod__ =  /x/ ; } else {yield 1.2e3;\n\fyield @foo;\n }}");
tryItOut("M:if(({}[(//h\nthis.__defineSetter__(\"__parent__\", __noSuchMethod__ = 'fafafa'.replace(/a/g, Function)))])) { if (((delete yield; instanceof [__parent__].some((__noSuchMethod__).__defineSetter__))(<{prototype}> </{prototype}><ccc:ddd></ccc:ddd>))) {let (__proto__ = prop, __parent__) { let prototype, __noSuchMethod__; } } else if(export *;) gc() else  if ((p={}, (p.z = (this.throw(true)))())) {}}");
tryItOut("if((~null.watch(\"<!--yy-->\", function(q) { return q; }))) {}{} else  if ( \"\" ) {var __proto__, __parent__ = 1e81;let; } else /*infloop*/for(let __proto__; [z1,,]; <><x><y/></x></>) {{} }");
tryItOut("if(*::*) { if ((#1=({prototype: *(<x><y/></x>, <x><y/></x>)}))) \n/*infloop*/M:while( \"\" )return <x/>;} else {}<x><y/></x>;");
tryItOut("with(eval(\"<><x><y/></x></> ^= prop\", new (null)(constructor)))/*for..in*/for([__proto__, yield] = [] in this) ;");
tryItOut("var __noSuchMethod__ = [z1,,];break ;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in this) {throw eval(\"({a2:z2})\", [[]]); }");
tryItOut("(*::*);with({prop: true})return;");
tryItOut("return [z1,,];");
tryItOut("/*for..in*/for(var [prop, __count__] = window in false) {export __count__; }");
tryItOut("/*infloop*/do /*infloop*/L:for(let ({ __count__: [prototype, __count__, prop, constructor, ], __proto__: __count__ }) = (yield ( /x/ .unwatch(\"prop\"))); .__parent__ = null ? window : 0; eval(\"let constructor = @foo\\nyield;\", prop = *)) {gc() } while(__parent__.constructor.isPrototypeOf((\n<y><z/></y>)));");
tryItOut("L:if({}) {yield #1#; } else {return;(<><x><y/></x></>); }");
tryItOut("for(let y in []);");
tryItOut("yield __noSuchMethod__;");
tryItOut("/*infloop*/M:for(__count__; ((@foo || <x><y/></x>).prototype), (<><x><y/></x></>.__defineGetter__(\"__parent__\", (-1).call)) == (prototype = [1])++; this << @foo) {<> </>if(0 | <><x><y/></x></>.isPrototypeOf(new (*::*)())) {function::__parent__ = __parent__ } else  if ((<x/> % )) /*for..in*/for(prototype in (((new Function(\"#1#\")))(prototype))){export *; } }");
tryItOut("if((this).call(__noSuchMethod__, <x><y/></x>)) { if (eval(\"(__iterator__);\", <><x><y/><x></>)) {{} }} else export *;");
tryItOut("{__count__ = prototype; }");
tryItOut("/*infloop*/for(var ({ __parent__: ({ prop: prop, __count__: prop }), __parent__: ({ __noSuchMethod__: __noSuchMethod__, prototype: ({ __noSuchMethod__: [] }) }) }) = (let (__proto__ = constructor) ({a2:z2}) for each (__noSuchMethod__ in new ((<y><z/></y>).apply)( '' , 5.0000000000000000000000)) for each (constructor in -1) for (__parent__ in 3/0) for each (__iterator__ in <x/>)); (window\n\n).function::__count__; (<x><y/></x>.throw(false).propertyIsEnumerable(\"function::prototype\"))) let __parent__;");
tryItOut("/*for..in*/for([setter: __noSuchMethod__, __iterator__] = <x><y/></x> in undefined) {;; }");
tryItOut("const constructor, prop setter: Math.sin = -3/0;function(q) { return q; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((/a/gi)(*))){{} }");
tryItOut("do /*for..in*/for(const constructor = (constructor = yield  /x/ ) in this)  while((this.__defineSetter__(\"function::prop\", Function)) && 0);");
tryItOut("if(this.__defineSetter__(\"__count__\", ([1,,]).apply)) Math.pow else  if ((true @ 0.1)) yield false;");
tryItOut("return;");
tryItOut("L: yield @foo; const __iterator__;");
tryItOut("/*infloop*/for(*::*; this; __noSuchMethod__.constructor = [z1]) yield <y><z/></y>\n;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = ({}) in  /x/ ) M:if(window) {break L; } else  if (*::*) throw window; else {export *; }");
tryItOut("with(<><> ''  < null</></>)return;");
tryItOut("with(<>(<x><y/></x>)[this]</>)L: ;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("{} const __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("if(try { with({}) return this.zzz.zzz.prototype; } finally { __parent__ = __noSuchMethod__; } ) {with(new (__proto__.__iterator__ = @foo)() > function (prop, __count__))/*for..in*/for(var (__parent__) in ((*)((eval(\"undefined\",  /x/g ))))){__parent__ = [,,z1], __proto__; } }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.__count__ in this.__defineSetter__(\"prototype\", new Function)) {[1,2,3,4].map }");
tryItOut("do break ; while((.2) && 0);");
tryItOut("var set = function ([y]) { }, constructor = S;\n\n");
tryItOut("if(this) throw #3={a:#3#};");
tryItOut("if((yield 1e81)) { if (((__proto__).call((p={}, (p.z = <><x><y/></x></>)()), ))) {} else let __proto__;}");
tryItOut("do {/*infloop*/for(let ({ __parent__: prototype }) = ((undefined ? <x><y/></x> : false)[new 1e+81((__parent__.__proto__ getter= <><x><y/></x></>))]); (); ( '' .@foo)) __iterator__;let constructor, __noSuchMethod__ = <x><y/></x>; } while(( /x/ ) && 0);");
tryItOut("for(let y in []);");
tryItOut("M:if(true) var prop = yield [z1,,];; else  if (<y><z/></y>) {throw <x><y/></x>; } else (0x99);");
tryItOut("if([1,,].watch(\"__count__\", function(y) { yield y; prop, __noSuchMethod__;; yield y; })) {return; } else  if ((({})--)) __iterator__ = <y><z/></y>, __noSuchMethod__ = <x><y/></x>;");
tryItOut("return (<y><z/></y>.watch(\"__count__\", function (__proto__, __parent__)*::*)).valueOf(\"number\");");
tryItOut("((().apply).apply());");
tryItOut("if(prop = 033) {if(<x><y/></x>) yield; else  if (<x><y/></x>) {} }");
tryItOut("try { export __parent__; } finally { let(__proto__ = <x><y/></x>.__defineSetter__(\"prop\", window), __count__) { try { let __iterator__; } catch(constructor if (function(){export prototype;})()) { <x><y/></x>; } catch(__proto__ if  \"\" ) { export prototype; } catch(prop) { break ; } finally { <><x><y/></x></>; }  } ");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(const prototype; yield  /x/g ;\t; ((({a2:z2}))[undefined])(try {  } finally {  }  = window, @foo)) \flet function::__parent__, __iterator__\n");
tryItOut("for(let y in [5,6,7,8]) function (__proto__, prop)constructor const __noSuchMethod__;");
tryItOut("__iterator__");
tryItOut("\n<><x><y/></x></>;");
tryItOut("return;");
tryItOut("do {var __parent__, __count__ = prop; } while((@foo) && 0);");
tryItOut("/*infloop*/for(var function::prop; [[]] % __proto__ = __proto__ instanceof (__noSuchMethod__ = *); (yield  '' .__proto__)) {yield true;__iterator__ = this < ((yield null)).__defineSetter__(\"__noSuchMethod__\", Math.pow) }");
tryItOut("continue L;");
tryItOut("if(__iterator__.__iterator__ setter= eval ^ false != [1,,]) if(('fafafa'.\nreplace(/a/g, 'haha'.split))) {function  __iterator__ ()[]; } else  if (([1.2e3].map((Function).call))) {export __proto__;yield 0x99; } else {const __count__; }");
tryItOut("/*for..in*/for(__proto__ = <y><z/></y> in this.zzz.zzz) /*infloop*/do return 033; while(<x><y/></x>);");
tryItOut("if('haha'.split(false, <y><z/></y>)) {3; } else  if ( \"\" ) {if(#3={a:#3#}) { if (*) {return <><x><y/></x></>;let __iterator__ = <x><y/></x>; }} else ; } else throw  /x/g ;");
tryItOut("if(new Math.sin((-0) >>= window, prototype)) { if ('fafafa'.replace(/a/g, Math.sin)) /*for..in*/L:for(var [each, __noSuchMethod__] = __count__ = constructor in @foo) {prototype; }} else __proto__ = (<x/> + __noSuchMethod__), prototype;");
tryItOut("{throw  \"\" ; }");
tryItOut("if((*.__defineGetter__(\"constructor\", 'haha'.split)) ^ this.__defineSetter__(\"prototype\", (new Function(\"return false;\"))) === [ \"\"  if (this)]) yield -1 else  if ((Boolean(<x/>))) /*infloop*/do {gc()const __proto__, prop = true; } while(false); else {const prop;if((3.141592653589793.@foo).__defineSetter__(\"__iterator__\", *::* .. __iterator__)) ; else  if (((__proto__ = @foo)['constructor'])) ; else if(this) { if (__proto__) {(<x/>);{} }} else {{}throw @foo; } }");
tryItOut("yield eval(\" '' \", *::*);\nM:if( get prop(__noSuchMethod__)0.__iterator__) {yield; } else  if (<><x><y/></x></>) { } else ( '' );\n");
tryItOut("throw __parent__;");
tryItOut("M:while((4.) && 0)throw  '' ;");
tryItOut("{while((function(id) { return id }) && 0){yield;return  \"\" ; }const prototype; }");
tryItOut("M:if(#3={a:#3#}) {__proto__; } else  if (window) {false; }");
tryItOut("{/*for..in*/\ffor(const __iterator__ = *::* in true\n) yield; }");
tryItOut("/*infloop*/for(<x/>; __iterator__; <><x><y/></x></>) {yield  '' ; }");
tryItOut("/*infloop*/for(let ({ __parent__: __count__, prop: ({ __parent__: [, prop, prop], prototype: ({ prop: __proto__ })\f }) }) = ({ __parent__: __proto__ }) = -3/0.__defineGetter__(\"prototype\",  \"\" ) -= <y><z/></y> ? <x><y/></x> : <><x><y/></x></>; ; <x/>.throw(null).__proto__ = (__parent__ = (<x><y/></x> if (<x><y/></x>)))) {{}export constructor; }");
tryItOut("{yield <><x><y/></x></>;gc() } const constructor;");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = [,] > window; this.zzz.zzz; setter) {throw <x/>; }");
tryItOut("/*for..in*/L:for(const [constructor, __parent__] = <x/>.__defineSetter__(\"__noSuchMethod__ = (-1)\", 1e-81) in []) {return 0; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var let (__proto__ = ({})) <><x><y/></x></>.__noSuchMethod__ in __count__ = <x><y/></x>) {L: __noSuchMethod__ = this; }");
tryItOut("if(e.prop) {(<><x><y/></x></>); } else {yield;\n/*for..in*/for(let __proto__ = <x><y/></x> in __noSuchMethod__) {[z1]; }\n }");
tryItOut("new Function");
tryItOut("/*for..in*/for(let prop = <><x><y/></x></>.__iterator__ in undefined) {const __iterator__ = false; }");
tryItOut("/*for..in*/for(\fconst [__proto__, constructor] = (({a2:z2}) >>>=<><x><y/></x></>) in <x><y/></x>) {function (__noSuchMethod__, __count__) { var __parent__; } yield [[1]]; }");
tryItOut("/*for..in*/for(const __count__ = ([,,])() in 4.) {{} }\f");
tryItOut("let (__noSuchMethod__) { [1,2,3,4].map }");
tryItOut("{M:with((<><x><y/></x></> = *::*))throw <><x><y/></x></>;gc() }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/do case 0: export __noSuchMethod__;break; /*infloop*/while(1e81.yoyo(0)){; } while(*::* >= true);");
tryItOut("/*for..in*/for(\tconst [constructor, function::function::constructor] = prototype = constructor = prototype in arguments) export prop;");
tryItOut("/*infloop*/for(const ({ __iterator__: __noSuchMethod__, __iterator__: ({ __count__: ({ __iterator__: prototype, __iterator__: constructor }) }) }) =  '' ; typeof window; (__proto__ = null.valueOf(\"number\"))) -3/0");
tryItOut("export constructor;");
tryItOut("/*for..in*/for(let __parent__ in ((gc)((uneval(((yield 1e81.__noSuchMethod__))))))){/*infloop*/for(<y><z/></y> + [[1]]; (new ( /x/g )(4.)); (<><x><y/></x></> for each (constructor in [,,z1]) for (prototype in {}))) {return; }let(constructor) ((function(){gc()})()); }");
