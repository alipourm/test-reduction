
tryItOut("/*infloop*/do /*for..in*/for(let prop in (*.__noSuchMethod__ = true)) {export *;M:do { } while((<y><z/></y>) && 0); } while(<bbb xmlns:ccc=\"(__noSuchMethod__.prototype)\"><ccc:eee></ccc:eee></bbb>);");
tryItOut("/*infloop*/for(const __count__;  /x/g ; *::*) var __noSuchMethod__;Math.sin");
tryItOut("L: {{yield prop; const __noSuchMethod__; } }");
tryItOut("L: {{return {}; } }");
tryItOut("with({prop: eval(\"<><x><y/></x></>\", this)}){; }");
tryItOut("with(new Function(this, <y><z/></y>)){/a/gibreak ; }");
tryItOut("while((<x/>) && 0){(1e-81); } const __iterator__;");
tryItOut("let (__iterator__ = (function  constructor (__proto__, __parent__) { yield function ([y]) { } } ), __iterator__ = __count__ = __count__) { if((({ __noSuchMethod__: ({ constructor: __noSuchMethod__, prototype: constructor }) }) = prop)) {M:switch<y><z/></y> { default: case ({a2:z2}): case Math.pow: ({}).hasOwnPropertybreak; case 2: (function(q) { return q; }).call } } else  if ((([false if (@foo)])++)) __noSuchMethod__; }");
tryItOut("/*infloop*/M:for(const prototype = <><x><y/></x></>; window; @foo) return;");
tryItOut("with(case 5: break; default: export *;break;  = ( /* Comment */undefined)){; }");
tryItOut("if(__proto__ = __count__.@*) {/*infloop*/while( /x/ )throw <x><y/></x>; } else  if (new export __noSuchMethod__;([1]) , (<><x><y/></x></>\n).__defineGetter__(\"__parent__\", (\t(<!--yy-->).apply).apply)) {__iterator__ = <x><y/></x>, __count__ = function(id) { return id }; } else L:with({__noSuchMethod__: (new [,]()).prop})yield window;");
tryItOut("prop;{;function  __noSuchMethod__ () { return false }  }");
tryItOut("if((<x><y/></x>)[*](-3/0 .@*:: <x><y/></x>, true)) { if (new ((new Function(\" '' ;\")))()) {yield <y><z/></y>;let __iterator__, __parent__ = <x><y/></x>; } else let constructor, prop = <x><y/></x>;}");
tryItOut("do (<><x><y/></x></>); while(((function ([y]) { })()) && 0);");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = <y><z/></y>.eval(@foo).prototype in new constructor = window((constructor = window))) do { while((({prop: <><x><y/></x></> })++) && 0);");
tryItOut("/*infloop*/while(__parent__.prop = new <><><x><y/></x></> .. false</>(( '' .@*.watch(\"function::prototype\", ({}).hasOwnProperty)), (new ((1 for (x in [])))(<><x><y/></x></> if (this))))){{{} } }");
tryItOut("/*for..in*/for(prop = ( \"\" .@*) in prop) {return; }");
tryItOut("if(({({ __proto__: ({ prototype: __count__, __proto__: prop }), __parent__: prop }) getter: function () { (<x><y/></x>); } ,  get constructor() { L: throw undefined; }  })) { } else  if ([,,z1]) {{continue L; } }");
tryItOut("if(__noSuchMethod__) {(__noSuchMethod__);<><x><y/></x></>; } else  if (<y><z/></y>) yield;");
tryItOut("L:if(new Date()) { if (constructor) var __parent__ = 033;} else (<x><y/></x>);");
tryItOut("const function::constructor = <x><y/></x>\n");
tryItOut("/*for..in*/for(var __count__ in (((1 for (x in [])))([*].sort(({}).__lookupGetter__))))(<y><z/></y>)");
tryItOut("if(eval(\"do {throw <><x><y/></x></>; } while(( /* Comment */3/0.__count__ = [15,16,17,18].some('haha'.split, <x/>)) && 0);\", (eval(\";\", window)))) {-0\nwhile((<{__noSuchMethod__}></{__noSuchMethod__}>) && 0)if(prototype = [,]) { if (<><x><y/>\f</x></> === [[1]]) (<x><y/></x>);} else {return; } } else  if (prop.(<><x><y/></x></> .@*:: window)) /*infloop*/M:while(prototype)export *; else /*infloop*/for(const __iterator__; this instanceof undefined; __parent__ = prototype\f * <><bbb xmlns=\"constructor\"><!--yy--></bbb></>) {if(033) prop =  \"\"  else  if (prototype) {yield 0;{} }var null =  /x/g ; }");
tryItOut("let([({ __parent__: window, prop: ({ function::__noSuchMethod__: [__count__, __parent__], function::__count__: ({ __iterator__: __noSuchMethod__, __proto__: __proto__ }) }) }), function::__iterator__, ({ prototype: [[prop, constructor, __iterator__], ({ function::__iterator__: prototype, __count__: prototype })], prop: [] }), ] = ({ prototype: __iterator__ }) = ([0.1 if (1e-81)]), __count__ = new (Math.pow)(prop = window)) ((function(){(#3={a:#3#}) = __parent__;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */prop.prop in ) {__iterator__, prototype; }");
tryItOut("L:while((new (function(y) { yield y; let __proto__, __noSuchMethod__;; yield y; })(<><x><y/></x></>, 1e4)) && 0)export __proto__;");
tryItOut("if((yield -3/0)) { if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) let prototype = <y><z/></y>} else let prop;");
tryItOut("gc()");
tryItOut("L:with([('fafafa'.replace(/a/g, ({}).hasOwnProperty)) for each (prop in __proto__(window)) if ((-1).@foo)].__lookupGetter__(\"__proto__\")){/*for..in*//* nogeckoex bug 349964 */M: for  each(var ({ __noSuchMethod__(<><x><y/></x></>):  for each (__proto__ in (-0)), __proto__: __noSuchMethod__ }) in <><>(function ([y]) { })()</></>) L:with({__noSuchMethod__: new Iterator(@foo, -3/0)}){ }return 1e81; }");
tryItOut("with({constructor:  /* Comment */__noSuchMethod__ = 3/0[ /x/ .isPrototypeOf(<y><z/></y>)].valueOf(\"number\")})if(String(#1#.isPrototypeOf(({a2:z2})/*\n*/).__lookupSetter__(\"constructor\"), .2.hasOwnProperty(\"prototype\").__defineGetter__(\"__count__\", constructor))) (1 for (x in [])) else  if (this.__defineSetter__(\"__parent__\", ({__parent__: <><x><y/></x></> }))) return;");
tryItOut("if(([11,12,13,14].sort >> (eval(\"<y><z/></y>\",  '' ).@*))) if(*::*) {} else  if ( ''  .. constructor) Math.sin else {/*infloop*/for(undefined; [1]; <\nx><y/></x>) yield;{} }");
tryItOut(";");
tryItOut("return;");
tryItOut("let (__count__ = ((yield [] = <x><y/></x>(window))), __noSuchMethod__) { yield 0.1; }");
tryItOut("/*for..in*/for(let __parent__ in ((Math.sin)())){break L; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\f(var ((yield ( \"\" ((-0)))) >> (function (__noSuchMethod__) { yield  /x/g ; } )( /x/ , window)) in (new Error((3.141592653589793.isPrototypeOf(@foo).yoyo\f('fafafa'.replace(/a/g, 'haha'.split)))))) {gc() }");
tryItOut("try { try { function  __iterator__ ()* } finally { (<y><z/></y>); }  } catch(prototype) { with({}) { continue ; }  } ");
tryItOut("/*infloop*/for(const __count__; window; <><x><y/></x></>) export *;");
tryItOut("/*infloop*/M:for(let prototype = #1=[#1#]; undefined; <><x><y/></x></>) return;");
tryItOut("try { for(let y in [5,6,7,8])  } catch(__count__ if prototype = null) { each = __iterator__; } ");
tryItOut("while((<><x><y/></x></>.*) && 0);");
tryItOut("if(Date()) {throw StopIteration; }");
tryItOut("gc()");
tryItOut("if(__noSuchMethod__) prop setter: [1,2,3,4].map else {break M; }");
tryItOut("__noSuchMethod__");
tryItOut("yield constructor\n");
tryItOut("/*for..in*/for(var [prop, prototype] = <><x><y/></x></> in __proto__) this;\nthrow  '' ;\n");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = ({prototype: <x/>}) > setter = function::prototype in  /x/g .@* -= new Boolean(4.)) {export *;(window); }//h\n");
tryItOut("{gc() }");
tryItOut("do __noSuchMethod__ = this while((this) && 0)");
tryItOut("M:with((<x><y/></x>.(*)))gc()");
tryItOut("<y><z/></y>\n const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("try { gc() } catch(__iterator__ if  /x/  instanceof  /x/ ) { __proto__; } catch(__count__ if ( ''  for each (prop in __count__))) { export *; } ");
tryItOut("M:if(set.__parent__ setter= 'haha'.split) { if (({})) return null;} else var function  __noSuchMethod__ (constructor) { yield <><x><y/></x></> } ;");
tryItOut("if((<x><y/></x>)[@foo] %= (this << <x><y/></x>) for (constructor in <y><z/></y>).isPrototypeOf(( '' .__defineGetter__(\"__noSuchMethod__\", eval)).eval(({function::__parent__: -3/0 })))) const prototype; else {M:with({__noSuchMethod__: (window.yoyo(<y><z/></y>))}){let __noSuchMethod__ = -3/0; }/*infloop*/do window; while(export constructor;); }");
tryItOut("switch(this.__defineSetter__(\"prop\", function(y) { yield y; return;; yield y; })) { default: function(y) { yield y; export *;; yield y; }case 0:  }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = __proto__.__proto__ = *::* in *.unwatch(\"prototype\")) {/*for..in*/for(let __iterator__ = __iterator__.__proto__ in (((prop = new (<x/>)()).watch)((<><x><y/></x></> for each (constructor in *))))){/*infloop*/for(constructor; 3/0; [[]]) const __count__, constructor = 1e-81;\f } }");
tryItOut("/*for..in*/M:for(const [getter, function::throw  '' ;] = ({a2:z2}) >>= undefined in null) continue\f ;\n/*infloop*/while(__parent__)return;\n");
tryItOut("with((<x><y/></x> >>= #1#)){export *; }");
tryItOut("/*for..in*/for(let __count__.__proto__ in (*::*.__iterator__)) gc()");
tryItOut("{};");
tryItOut("/*for..in*/for(var [__noSuchMethod__, constructor] = ({*::*.constructor: (false >  /x/g )}) .. false .@ <><x><y/></x></> in 0x99) {; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (5.0000000000000000000000--.throw(1.2e3.__lookupSetter__(\"constructor\"))).*; window.__proto__ = false) {yield <y><z/></y>; }\nif(<x><y/></x>) continue M; else  if (__count__) (__noSuchMethod__);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((delete <x><y/></x>)(\n(new RegExp())))){}");
tryItOut("/*for..in*/for(let __proto__ = (yield __count__.((true.__parent__))) in window) try { gc() } catch(prototype) { return; } finally { const __count__ = @foo; } ");
tryItOut("M:while((__noSuchMethod__.__count__%=(1.3.@*)[this.__defineSetter__(\"prop\", Math.sin)]) && 0){return;if(*[true]) {; } else  if (<x><y/></x>.throw(this)) gc() }");
tryItOut("/*infloop*/do __proto__ while(new Boolean());");
tryItOut("{constructor = <y><z/></y>) {M:do gc() while((null) && 0); } set __proto__() { var __parent__; }   else  if (__parent__ = *::* === prototype%=function::__count__) throw 0x99;<><x><y/></x></>;\ngc()\n else {export constructor;; }/*infloop*/while(this.zzz.zzz.unwatch(\"__iterator__\")){return;export *; } }");
tryItOut("if(__parent__) { if (false.__lookupGetter__(\"prototype\")) gc()} else yield false;");
tryItOut("L:if(*::*) {return  '' ; } else eval");
tryItOut("\n");
tryItOut("L:with({constructor: <><x><y/></x></>}){arguments; }");
tryItOut("/*infloop*/M:do {{} } while((p={}, (p.z = new ( \"\" )())()));");
tryItOut("L: {(<><x><y/></x></>); }");
tryItOut("if((p={}, (p.z = let (__parent__ = <><x><y/></x></>) window)())) { if (<y><z/></y>.prototype = 5.0000000000000000000000 <<= <x/>.__lookupGetter__(\"__noSuchMethod__\")) {return <x><y/></x>;return  '' ; }}\n else {gc() }");
tryItOut("__proto__ = constructor;");
tryItOut("switch(({}).hasOwnProperty(\"__proto__\") > (<y><z/></y>.prototype , this.__defineSetter__(\"function::__parent__\", function  __noSuchMethod__ () { return (-1) } ))) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in  /x/g ) yield <x/>\n\nbreak; case 5: break;  }");
tryItOut("for(let y in []);");
tryItOut("<x><y/></x>;null");
tryItOut("{M:do {gc()return; } while(((({a1:1})\n.isPrototypeOf(#1=function ([y]) { }))) && 0);gc() }");
tryItOut("with(( /x/  ? {} : <><x><y/></x></>.__parent__ = <x/>.constructor))return function::prototype;");
tryItOut("try { true; } catch(__iterator__ if (function(){var __parent__, prototype;})()) { export *; } ");
tryItOut("if((this.__defineSetter__(\"__parent__\", [1,2,3,4].slice))) {<><x><y/></x></>/*infloop*/for(prop; *::*; <x><y/></x>) break M; } else  if (prop =  \"\" ) do {{}var constructor; } while((constructor = undefined) && 0); else {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 1.3) {yield;((/a/gi).apply).apply }");
tryItOut("with({__noSuchMethod__:  '' })continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<><x><y/></x></>.watch(\"__proto__\", function(y) { yield y; ;; yield y; }).*) in [1e+81]) {/*infloop*/while(new Math.sin())continue M;; }");
tryItOut("/*for..in*/for(let __iterator__ = constructor =  /x/  in (<y><z/></y>.valueOf(\"number\"))) {if(window) export *; else {gc() } }");
tryItOut("if( /x/ ) { if (__noSuchMethod__) {}} else export *;");
tryItOut("/*infloop*/while(__count__.__count__ setter= (<><x><y/></x></>).__defineSetter__ >>= (this.__defineGetter__(\"prop\", (new Function(\"export prop;\"))))){{}__iterator__, __proto__; }");
tryItOut("/*infloop*/do {with(\n1.3.valueOf(\"number\"))return;(({__proto__: 1.2e3,  get __iterator__(prototype)<y><z/></y> })); } while(prototype);");
tryItOut("M:if(prototype) if(new (new Function(\"@foo\"))()) { if (new (function ([__count__, , , ], __proto__) { yield __iterator__: prototype } )((<><x><y/></x></>.watch(\"x::__parent__\", (new Function(\"let __parent__, prototype;\")))), false)) const __noSuchMethod__, prototype; else {yield;throw <x/>; }}");
tryItOut("var constructor = [], __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("{gc()yield <y><z/></y>; } const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(var prop in ((function(q) { return q; })(new (with({prop: -1}){export *; })(try { __count__ } catch(__iterator__ if (function(){let(constructor) ((function(){yield  /x/g ;})());})()) { return ([5.0000000000000000000000]); } finally { return ((*::*).call(<><x><y/></x></>, )); } ,  /* Comment */<x/>))))/*infloop*/for(const prototype; *::*; delete)  get yield __iterator__ /*\n*/(__count__) { yield 0/0 } \f");
tryItOut("{let prop = prop;yield [1]; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = ((null)[[z1,,]]) in (4..__lookupGetter__(\"prop\"))) return;");
tryItOut("for(let y in [5,6,7,8]) try { yield prop; } catch(__iterator__) {  for each (prototype in true) } ");
tryItOut("/*infloop*/L:for(let constructor; 1.3; *::*) {prop = <x><y/></x>, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*infloop*/for((({__count__: __parent__ = <><x><y/></x></>.yoyo(([11,12,13,14].filter))})); (__parent__.__noSuchMethod__ getter= [1,2,3,4].map); yield this) gc()");
tryItOut("{}\nexport *;\n");
tryItOut("while((#2=[[,,]]) && 0)throw <x><y/></x>;");
tryItOut("/*infloop*/for((this.zzz.zzz); constructor =  \"\" (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map), <y><z/></y>); constructor.throw(*::*)) {( '' ).watch }\f");
tryItOut("yield [,,]\n({}).hasOwnProperty");
tryItOut("let constructor =  \"\" ;");
tryItOut("/*for..in*/L:for(let ( /x/g )(window) in ([15,16,17,18].map(function (__count__, ({ constructor: __noSuchMethod__ })) { return prop.prop+=__proto__|=<x><y//h\n/></x> } , yield null))) ");
tryItOut("/*for..in*/for(__iterator__ = <><xxx>{constructor}</xxx></> in [15,16,17,18].filter((*).watch,  '' ).throw((new (({}).hasOwnProperty)(__iterator__)))) {/*infloop*/for((__proto__.(<><x><y/></x></>)); <bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb>; (<x><y/></x>)(#1#, [,,]).__iterator__) {/*infloop*/while([z1])return false; } }");
tryItOut("throw StopIteration;");
tryItOut("export *\nlet (constructor = <x/>, prototype = <x><y/></x>) { (<x/>); }");
tryItOut("try { with({}) { return (this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice)); }  } catch(__parent__) { return; } ");
tryItOut("return false\n");
tryItOut("/*infloop*/for(.eval(('fafafa'.replace(/a/g, (function ([y]) { })())).eval(__noSuchMethod__ = )); [15,16,17,18].sort(new Function, (yield (((function ([y]) { })())[1e-81]))); \nnull /= <x/>) throw [*::*]\n{/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in new <x><y/></x>()) {if(5.0000000000000000000000) {export __noSuchMethod__; } } }");
tryItOut("/*infloop*/do {gc() } while(<x/>);");
tryItOut("/*infloop*/prototype: true");
tryItOut(" if (constructor.((Math.pow for (prop in (-0)))))");
tryItOut("/*infloop*/for(var ({ __parent__: prop, __noSuchMethod__: __iterator__ }) = <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (__iterator__.constructor); __proto__ = <x><y/></x> >>= undefined\n &=  /x/ ) /*infloop*/for(let __proto__; undefined; *) <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in *::*) {export *; }");
tryItOut("L:do throw *::*; while((__parent__|=(yield this)) && 0);");
tryItOut("{if(*::* = *::*) { if (((p={}, (p.z = <><x><y/></x></>)()))) {__noSuchMethod__ } else throw *::*;}break ; }");
tryItOut("while((undefined) && 0)\nyield;");
tryItOut("if(new Function(( '' .__defineGetter__(\"__iterator__\", [z1])) <<= (--*),  /x/ ())) return; else  if (this\n.__defineGetter__(\"__iterator__\", (__proto__).__defineSetter__)) {export *; }");
tryItOut("switch( '' ) { case prototype: break; case 4: throw <x><y/></x>; }");
tryItOut("do return; while((prototype = null.@*) && 0);");
tryItOut("/*for..in*/for(var prop in (([1,2,3,4].slice)(('haha'.split).call(1.2e3, <x><y/></x>).throw(@foo.eval( /x/ ))))){switch((*::* && <><x><y/></x></>)) { case (new prop): while((<x/>) && 0)gc()break; case 8: with({prototype: 5.0000000000000000000000}){yield <x/>; }break; case 3: break;  } }");
tryItOut("({ __noSuchMethod__: [__proto__] }) const __noSuchMethod__;");
tryItOut("/*infloop*/while((case <y><z/></y>: break ;break; default: )){if(<x/>) { if ('fafafa'.replace(/a/g, /a/gi)) /*infloop*/for(prototype; 1e+81; <y><z/></y>) {__proto__;return <y><z/></y>; } else if(false.throw(<x><y/></x>)) {throw this;continue L; } else  if (__proto__ = <><x><y/></x></>) {var prototype, prototype = this; }} }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = @foo in  /x/ ) return (new Array((-0)));");
tryItOut("while((let (prototype = __parent__.__proto__ = delete, constructor) ) && 0){__parent__switch(<><x><y/__parent__ ></x></> ? this : prop) { case 9:  } }");
tryItOut("/*infloop*/while([<x><y/></x>].filter(function(q) { return q; })){yield; }");
tryItOut("M:if((eval(\"yield 4.\", <y><z/></y>.valueOf(\"number\") /= __count__ = constructor)))  /x/  else  if (@foo) if(__parent__.__noSuchMethod__) { if (({ __count__: __noSuchMethod__ }), [__iterator__, ].__iterator__ = ++<x><y/></x>) yield [[1]];} else {const __count__; } else {({ __iterator__: ({ __noSuchMethod__: ({ __count__: [], __parent__: ({ prop: [] }) }) }), __proto__: ({ __proto__: ({ __count__: ({ __noSuchMethod__: ({ constructor: each }) }), __proto__: constructor }) }) }) }");
tryItOut("{//h\nthrow <x><y/></x>;gc() }");
tryItOut("__iterator__ = function::prop;");
tryItOut("Math.pow const __count__;");
tryItOut("while(((@foo >=  \"\"  << (let (constructor = {}, prototype =  \"\" ) constructor | [<y><z/></y> for (__noSuchMethod__ in this)]))) && 0){if(null) var __count__, __proto__; else  if \n(*) export *; else {export *;let constructor, __parent__; } }");
tryItOut("this.zzz.zzz;");
tryItOut("{L: ;\t }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <><x><y/></x></>) {export *;throw <x><y/></x>; }");
tryItOut("let ([, , prototype, , ], __parent__ = (<xxx {__parent__}={ /x/g } />.((<><x><y/></x></>.__iterator__)))) { /*for..in*/for(const __noSuchMethod__ in <x><y/></x>) {export *;gc() } }");
tryItOut("{L: {yield  /x/g ; }gc() }");
tryItOut("/*infloop*/M:for(({ setter: __proto__ }) = new Exception(); (<x/>); @foo ? constructor : undefined) {with({__parent__: <><x><y/></x></>}){__iterator__, prop;export __noSuchMethod__; } }");
tryItOut("return;");
tryItOut("let (prototype) { throw  '' ; }");
tryItOut("while((<bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>.(__proto__ = [])) && 0)yield;");
tryItOut("yield <x><y/></x>;");
tryItOut("if(eval(\"[11,12,13,14].some\", ())) { if (false.unwatch(\"__noSuchMethod__\")) {/*for..in*/for(\\ in __proto__ /=  /x/ ) /*infloop*/while([z1,,]){const __proto__ = true;var __iterator__; } } else ('haha'.split).apply}");
tryItOut("let(__count__) { throw __count__;");
tryItOut("M:if(<bbb xmlns=\"(__count__.(*::*))[<><x><y/></x></> ? <x/> : __iterator__]\"></bbb>) (__count__);");
tryItOut("/*infloop*/while(__iterator__ & 1e81){/a/gi }");
tryItOut("/*infloop*/for(*::* -= *::*; (new (<x/>)()); ([this])) /*infloop*/for((-0).__defineSetter__(\"__proto__\", /a/gi); (prop); (new (function ([y]) { })())) {throw <><x><y/></x></>;throw <><x><y/></x></>; }");
tryItOut("with({}) return window >>= prop\n");
tryItOut("M:if(-3/0) {throw <x><y/></x>;yield @foo; } else  if (<x><y/></x>) yield; else var __parent__;");
tryItOut("(true)\n");
tryItOut("{break ;case eval(\"[11,12,13,14].map >>= (false.valueOf(\\\"number\\\"))\", __count__ = prop):  }");
tryItOut("switch(\n[1,,]) { default:  }");
tryItOut("L:with({__proto__: 3/0})");
tryItOut("/*for..in*/for(__parent__ in ((Math.sin)(<x><y/></x>))){null;/*\n*/__proto__ = true, constructor = <x><y/></x>; }");
tryItOut("with({setter: *}){yield <><x><y/></x></>;yield [1]; }");
tryItOut("/*for..in*/for(var __count__ = window ^ (this.__defineSetter__(\"__count__\", /a/gi).__defineGetter__(\"function::__iterator__, __proto__ = prototype = false;\", new Function)) in let prototype) {((1 for (x in []))).apply }");
tryItOut("for(let y in []);");
tryItOut("switch((yield (yield constructor%=false))) { default: break;  }");
tryItOut("if((__noSuchMethod__ = (eval(\"yield <><x><y/></x></>;\", ('fafafa'.replace(/a/g, (*::*).__defineSetter__\f)))))) while((prop) && 0)let __noSuchMethod__; else  if ((false.yoyo(<x><y/></x>)).@*) continue ;");
tryItOut(";\nreturn;\n");
tryItOut("switch( '' ) { default: case ([<x><y/></x>]): break; /*infloop*/for(const [__proto__, ] = (-1)(true, __iterator__); <y><z/></y> !== <x><y/></x>;  >>> @foo) /*for..in*/for(const [constructor, __parent__] = <x><y/></x> in 0) {__count__ = -1; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in 1e-81 >> true) yield *::*");
tryItOut("L: __count__\n");
tryItOut("break L;/*for..in*/for(const prop = *::* in undefined) {const constructor; }");
tryItOut("L:while((let (({ __parent__: ({ new Number(): __noSuchMethod__ }) }) = ({__iterator__: (-0)})) (\nundefined >  ''  ? (#0=[<x/>]) : (-<x><y/></x>))) && 0){throw [[]]; }");
tryItOut("switch(this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice)) { case 7: break; /*infloop*/L:for(const __noSuchMethod__ = <><x><y/></x></> -=  \"\" .watch(\"each\", (this.hasOwnProperty(\"prop\")).__defineSetter__); (({}).hasOwnProperty).call( '' , ) <= (1e-81.propertyIsEnumerable(\"__iterator__\")); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {gc{} }break;  }");
tryItOut("M:with({constructor: yield <x/> = <x><y/></x>})let(prototype) ((function(){export *;})())\n");
tryItOut("/*infloop*/while(3.141592653589793){return;return; }");
tryItOut("/*for..in*/L:for(let (__noSuchMethod__) in this) { }\t const prototype;");
tryItOut("(function ([y]) { })\nwith({set: __noSuchMethod__}){throw window; }");
tryItOut("if(this) return;");
tryItOut("if(Date(({constructor getter: (*).__defineSetter__, constructor: null }), (eval(\"prototype\", ({a2:z2}) &=  \"\" )))) /*for..in*/L:for((__iterator__) in ((( '' ).apply)( \"\" ))){{} } else  if (__iterator__.(*)) {switch( /* Comment */<x><y/></x>) { ({ x::__parent__: (new Function(\"L: ;\")), __noSuchMethod__: __noSuchMethod__ }) }/*for..in*/for(var [__count__, prototype] = (<x><y/></x>)(Error(*::*)) in prototype) {(4.); }\f } else while(((('haha'.split)())) && 0){throw  '' ;if(null) {export *;yield __count__;; } else (undefined); }");
tryItOut("yield; const prop;");
tryItOut("\n");
tryItOut("while((*) && 0){return this; }");
tryItOut("return (yield <x><y/></x>);");
tryItOut("{/*infloop*/for(const constructor; <x/>; <x><y/></x>) return  /x/g ;export * }");
tryItOut("");
tryItOut("L:switch((Math.sin).@*) { case <x><y/></x>.throw(__count__): default: constructor, __proto__ = __iterator__break; case __proto__.prop = [1,,]: case this -  \"\" : /*infloop*/do {let __noSuchMethod__, prop; } while( /x/ );break; yield;break;  }return __parent__;");
tryItOut("with(__iterator__)\f{default: /*for..in*/M:for(const [__proto__, __proto__] = constructor in <x/>) return <><x><y/></x></>;export *; }");
tryItOut("if(prototype.__noSuchMethod__) gc() else (<x/>);");
tryItOut("with({prop: __proto__});//h\n");
tryItOut("L: break ;");
tryItOut("__noSuchMethod__ = __iterator__");
tryItOut("if(<x/>) {export *; set constructor()[[1]] }");
tryItOut("/*infloop*/M:for(let __count__ = -=; *; __count__ && {}) {/*infloop*/do yield <x><y/></x>; while(3.141592653589793);switch(([] = prop)) { default: break;  } }");
tryItOut("throw StopIteration;");
tryItOut("let __noSuchMethod__ =  /x/g , __proto__ = [,]\n");
tryItOut("/*infloop*/for(var prototype = this.__defineSetter__(\"prototype\", (1 for (x in []))); [,,]; (({a1:1}).propertyIsEnumerable(\"prototype\"))) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /x/g  - <x/>) ;");
tryItOut("do {yield <><x><y/></x></> } while((((<><x><y/></x></>\n) @ <x/> >> @foo)[prototype = ([<x><y/></x>])]) && 0);");
tryItOut("M:while(((window ? * : <x><y/></x>) >= ((1e81)[constructor])) && 0)L:do {/*for..in*/L:for(let function::setter = @foo in <x><y/></x>) {return;break ; }/*for..in*/for(var __parent__ = function::constructor = * in *) <x><y/></x>; } while(((new (__iterator__.constructor = eval(\"yield;\", <><x><y/></x></>))((<y><z/></y>--), ))) && 0);");
tryItOut("if(({ __noSuchMethod__: [__iterator__], __noSuchMethod__: ({ prop: __noSuchMethod__ }) }) = ((<><x><y/>\t</x></>).call(null, <><x><y/></x></>).__lookupGetter__(\"__noSuchMethod__\"))) {L:with((prop = eval(\"<><x><y/></x></>\", .2))){with(this ? <><x><y/></x></> : <x><y/></x>)this; } } else  if (typeof let (__proto__ = (this.__defineGetter__(\"__parent__\", <x><y/></x>)) != this.zzz.zzz, __count__ = (#3={a:#3#})[<><x><y/></x></>]) (<><x><y/></x></> .. *::*).__noSuchMethod__ = Boolean()) while((@foo) && 0)");
tryItOut("break ; const __parent__;");
tryItOut("let __parent__ = return <y><z/></y>;; const __count__;");
tryItOut("while(((({ set prototype __noSuchMethod__ (function::each, __noSuchMethod__)__proto__ = * }))) && 0)throw constructor;");
tryItOut("yield 1.3;");
