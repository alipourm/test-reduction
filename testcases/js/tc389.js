tryItOut("do \ngc()\n while(() && 0);");
tryItOut("if(window) ; else  if (__count__) (-1);");
tryItOut("export *;");
tryItOut("/*infloop*/for(let prop; <x/>; <x/>)  this ");
tryItOut("if((void <x><y/></x>.__count__)) { if ((function ([y]) { })() ^ 0) {export prop;break L; } else {{} }}");
tryItOut("/*infloop*/for((delete (#1#)(1.2e3)).__defineGetter__(\"__proto__\", (((--*::*)).__defineSetter__).apply);  /x/g .eval(<><x><y/></x></>); this.__defineGetter__(\"function::__noSuchMethod__\", Math.sin)) {let (prop, constructor) { var constructor = <x/>; } }");
tryItOut("return window;");
tryItOut("while((__count__ = *::*) && 0){(<><x><y/></x></>); }");
tryItOut("\fwhile((window.__lookupSetter__(\"__parent__\")) && 0){return; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(undefined = <><xxx>{__count__}</xxx></>; <>(throw undefined)</>; __iterator__) let __noSuchMethod__ = 0, prototype = window;");
tryItOut("{}\nwindow;\n");
tryItOut("{yield <y><z/></y>yield  \"\" ; }");
tryItOut("with({}) ( /x/ );");
tryItOut("M:if(window) if((__proto__.prototype)) /*for..in*/for(let __proto__ in #1=[#1#]) {(<><x><y/></x></>);export prop; } else {export *;gc() } else  if ('fafafa'.replace(/a/g, <><x><y/></x></>)) /*for..in*/M:for([prototype, __count__] = function(id) { return id } in ) {continue ; }/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x>) gc()");
tryItOut("export __iterator__\n");
tryItOut("/*for..in*/for(let [__count__, constructor] = ({ prop: ({ __noSuchMethod__: __proto__, constructor: __iterator__ }) }) = ({ __iterator__: ({ __proto__: __noSuchMethod__ }) }) in ({__proto__: this[.2]})) {gc() }");
tryItOut("*::*;");
tryItOut("M:do export *; while(((({__noSuchMethod__: (yield <><x><y/></x></>), __proto__: <x><y/></x> != <><x><y/></x></> }))) && 0);");
tryItOut("/*infloop*/M:for([z1]; <y><z/></y>; <y><z/></y>) {throw export * }");
tryItOut("yield <y><z/></y>");
tryItOut("with({__proto__: (Math.sin).call((({}).eval(<x><y/>\r</x>)), )})let prototype, constructor;");
tryItOut("M:if((__iterator__ = (eval(\"with(window)yield;\", (this.__defineGetter__(\"__count__\", ([1,2,3,4].map).apply)))) <= ((this for each (__parent__ in <x><y/></x>)))).yoyo((uneval(__count__ ?  \"\"  : @foo)))) { if (([(p={}, (p.z = (__count__ = <x><y/></x>))())])) {{continue ;gc() } } else {}}");
tryItOut("Math.sin().valueOf(\"number\")");
tryItOut("M:do {break ;return; } while((prop%=<x/>) && 0);");
tryItOut("/*infloop*/L:do /*infloop*/for([, __iterator__, ] = 1.3 ? <x><y/></x> : *::*; prototype = null; window) {{}throw  '' ; } while([ /* Comment */(*.__iterator__)].map(<><x><y/></x></>));");
tryItOut("if((__parent__.__iterator__ = ()) * new ) { if ((new  ''  > <><x><y/></x></> instanceof function(id) { return id }.__defineSetter__(\"__parent__\", 1e4)(*.@* @ ((eval).apply).call([z1,,], <x/>, <x/>)))) var prop, prototype = this; else ;}");
tryItOut("{export *;let __parent__, __noSuchMethod__; }");
tryItOut("L:switch((#1=({}).hasOwnProperty)) { default: if((uneval(<x><y/\f></x>/*\n*/))) { if (\n<x><y/></x>) ((-1)); else {{} }}\nbreak;  }");
tryItOut("do return <x/>; while((({__noSuchMethod__: __noSuchMethod__, __proto__: 3 })) && 0);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((<x><y/></x> , __proto__).apply)([(( /x/ )(this) = *)(<><><!--yy--></></>)]))){(1 for (x in []))/*infloop*/for(null; *; window) {return <><x><y/></x></>; }return; }");
tryItOut("with({}) yield __iterator__.constructor = <x><y/></x>;");
tryItOut("if((__noSuchMethod__ = ({__count__: true}))) { if (((p={}, (p.z = (<x><y/></x>.([[]])))()) , new [15,16,17,18].map((new Function(\"return;\")), <x><y/></x>).valueOf(\"number\"))) {/*infloop*/for(var __iterator__; [<x><y/></x> for each (prototype in *::*)]; new ((<x/>).__defineSetter__)((function ([y]) { })(), <><x><y/></x><///h\n>)) {gc()prop =  /x/g ; } }} else {{} }");
tryItOut("if(\tString()) {/*infloop*/M:while(*::*){return <><x><y/></x></>;const __iterator__ = <><x><y/></x></>, __count__ =  \"\" ; } } else {let __parent__, __noSuchMethod__ = this;if(<><x><\fy/></x></>) {export *;break L; } else {throw prop;return <><x><y/></x></>; } }");
tryItOut("/*infloop*/for(const function::prop = (__iterator__ , \r[[]].hasOwnProperty(\"__iterator__\")); new <><x><y/></x></>(); prop.(#1=[#1#])) {return; }");
tryItOut("/*infloop*/for(__iterator__ =  '' (__parent__); ((uneval(*)).valueOf(\"number\"));  /x/  !== <x><y/></x>) {gc }");
tryItOut("L:with({__parent__: [__count__]}){if( '' ) break L\nif((__noSuchMethod__.constructor =  \"\" )) {export __parent__; } }");
tryItOut("throw StopIteration;");
tryItOut("throw function(id) { return id };");
tryItOut("L:if(* for (prototype in this)) { if (<y><z/></y>\n) {yield; } else throw window;}");
tryItOut("{/*infloop*/for(let __noSuchMethod__ =  /x/g .propertyIsEnumerable(\"__noSuchMethod__\").@foo; ({__parent__: * }); constructor(([,,z1])(), window)) {}L: (*); }");
tryItOut("(<><x><y/></x></>);M:do {do {continue M; } while((window >>= (-1)) && 0);/*for..in*/for(const __count__ in ((function(y) { yield y; {}; yield y; })(true))){return; } } while((-1e81) && 0);");
tryItOut("/*for..in*/L:for(let __iterator__ = 3/0++ in this) export __noSuchMethod__;");
tryItOut("prop = __count__;");
tryItOut("L: {throw <x/>; }");
tryItOut("M:switch(<y><z/></y>) { case (yield prototype.(<x><y/></x>) & prop): case 4: M:if([15,16,17,18].filter(function(q) { return q; }, true)) { }break; case [15,16,17,18].some(Function, <x><y/></x>).watch(\"__noSuchMethod__\", (window).watch): const __iterator__;(<><x><y/></x></>); }\n\n");
tryItOut("do break ; while((<><x><y/></x></>) && 0);");
tryItOut("L:if(@foo , *) { if (new ( /x/g )()) {export __parent__; } else function(q) { return q; }}");
tryItOut("L: M:while((<x><y/></x>) && 0)return;");
tryItOut("if(undefined) __proto__; else  if (this) {gc() }//h\n else (undefined);");
tryItOut("with((p={}, (p.z = <x/>)()) >>= #1=1e81)export *;");
tryItOut("M:with({constructor: __iterator__})break ;");
tryItOut("yield;");
tryItOut("/*infloop*/for(const __proto__ = *::*; ({ constructor: __iterator__ }) = __count__ =  /x/ ; [15,16,17,18].sort(({}).__lookupGetter__, (constructor = false))) {export *;{(<><x><y/></x></>);export __count__; } }");
tryItOut("return;");
tryItOut("let ([] = [__count__, constructor, __count__] = ({ __proto__: prop }), ({ function::__iterator__: ({ __noSuchMethod__: prop }) })) { /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __count__\t) {} }");
tryItOut("{export __proto__; }");
tryItOut("M:if((<x/> ^ <><x><y/></x></>)) { if (((({ __parent__: __parent__ }) = __count__ = <y><z/></y>) %= (__parent__ = <y><z/></y>.propertyIsEnumerable(\"prop\")))) export __proto__; else {return <x/>; }}");
tryItOut("do {const __parent__;return <y><z/></y> } while((__count__) && 0);");
tryItOut("\fL:switch((__noSuchMethod__).__defineSetter__) { case new *(<y><z/></y>):  }");
tryItOut("throw ({ get __proto__ __noSuchMethod__ () { yield __noSuchMethod__ }  })['__parent__'];");
tryItOut("/*for..in*/M:for(const prop in (uneval(<x><y/></x>))) {if(__parent__) {throw window;yield; } else {export __iterator__; }/*infloop*/for(let constructor; @foo; <><x><y/></x></>) {Function(<x><y/></x>); } }");
tryItOut("if(({a2:z2})) break M\nreturn <x><y/></x>;");
tryItOut("prop = prop;");
tryItOut("return;");
tryItOut("M:if(__noSuchMethod__ = (new this(constructor)).propertyIsEnumerable(\"__count__\")) {switch((uneval(3))) { default: export *;break; case 3:  }M:if(undefined) { if (0/0) {return;yield; } else return;} } else  if (\n__noSuchMethod__) {function (prototype) { 1e+81; }  }");
tryItOut("if((({__proto__: [1,2,3,4].slice}))) {return;<x/>; } else  if (__parent__+=__noSuchMethod__.(<y><z/></y>)) {export *;export prototype; } else {if(<><x><y/></x></>) <x/>; else  if (<><x><y/></x></>) {var __count__;(@foo); } }");
tryItOut("/*infloop*/for([,,].unwatch(\"__count__\"); this.__defineSetter__(\"prototype\", (Math.pow).call); this &&  '' ) export __count__;");
tryItOut("{gc() const prop;__noSuchMethod__ = *::*, prop = <><x><y/></x></>; }");
tryItOut("yield; const 'fafafa'.replace(/a/g, gc);");
tryItOut("[1,2,3,4].slice");
tryItOut("if((({ prop: __proto__ }) = function (__parent__)<ccc:ddd>yyy</ccc:ddd>(@foo == ({a1:1})))) return  \"\" ;");
tryItOut("/*infloop*/for(delete null; this.__defineSetter__(\"__iterator__\", Function); __noSuchMethod__.(<><x><y/></x></>.__noSuchMethod__ = <><x><y/></x></> @ )) {return <><x><y/></x></>; }");
tryItOut("{return -0; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__iterator__) in this.__defineGetter__(\"prototype\", function(q) { return q; })) M:with(undefined){\tbreak M; }");
tryItOut("with(this.watch(\"__count__\", Math.sin))__iterator__ =  /x/g ;");
tryItOut("{;{} }");
tryItOut("yield;let (prototype) { yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in true) {return; }");
tryItOut("while((true) && 0){throw window; }");
tryItOut("switch(<y><z/></y>[@foo]) { default: break; case constructor = __noSuchMethod__ < __parent__ = undefined: if(<y><z/></y>) {(<y><z/></y>);gc() }break;  }");
tryItOut("with([15,16,17,18].filter(x::constructor, [eval(\"__count__\", (-1))]))yield;\nreturn;\n");
tryItOut("({ __iterator__: __iterator__ })");
tryItOut("{gc(){} }");
tryItOut("L:if(constructor.prototype setter= function (__parent__, ;) /x/g ) { if ( /x/ .__lookupGetter__(\"__proto__\")) {(constructor); }} else {return; }");
tryItOut("function  __count__ (__noSuchMethod__) { yield <y><z/></y> } ");
tryItOut("/*infloop*/do if([undefined] .@x:: (\n[,,])) { if (( /x/ .__defineGetter__(\"__parent__\", function (__count__, __count__)<y><z/></y>)).yoyo(*)) {export __proto__; } else throw <x><y/></x>;} while(( { return function(id) { return id } + *::* } (@foo)));");
tryItOut("do {break L; } while(((<x><y/></x>).call(<><x><y/></x></>, (yield  /x/g ))) && 0);");
tryItOut("/*for..in*/L:for(const prop.__count__ in ((<x><y/></x>)(this.__defineGetter__(\"__parent__\", Function))))continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (-<><x><y/></x></>.prop)(<y><z/></y>) in <x><y/></x> ?  /x/g  :  '' ) {return <>0/0</>.(__parent__ = <><x><y/></x></>); }");
tryItOut("if( \"\" ) {continue \f; } else  if ( \"\" ) null");
tryItOut("/*for..in*/for(const [__count__, __count__] = [11,12,13,14].filter in <x><y/></x>) {__noSuchMethod__ }");
tryItOut("if((({__noSuchMethod__: (eval(\"prop.__noSuchMethod__ getter= this\",  '' ))}))) /*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in window) export *;");
tryItOut("default: let (function::__iterator__ = (-1)) { __noSuchMethod__; }case 6: case __iterator__++: while((<x/>.__defineGetter__(\"__noSuchMethod__\", Math.pow)) && 0)break ;case __proto__.__iterator__ = let __count__;: break; ");
tryItOut("if((__noSuchMethod__.prop)) {; } else  if (__parent__.(<><x><y/></x></>)) {return  /x/ ;const __parent__; }");
tryItOut("");
tryItOut("/*for..in*/M:for(let __count__ = <x/> in  /x/ ) __iterator__");
tryItOut("if(null) <!--yy--> else  if (null) return <x><y/></x>;");
tryItOut("/*infloop*/while([(new [1,2,3,4].slice( /x/ ))]){const prototype, __proto__ = <><x><y/></x></>;\t }");
tryItOut("{if(((<x/> ? this : constructor).@*)) {return *::*;export __parent__; } else ; }");
tryItOut(" { prop\n } ");
tryItOut("\fif((this.__defineSetter__(\"__parent__\", Math.pow))) { if ( \"\" ) {{} } else {break ;__iterator__ }}");
tryItOut("export __noSuchMethod__\n");
tryItOut("/*for..in*/for(var [__proto__, prototype] =  ^= (this.__proto__ = <x><y/></x>) .. 4. in #1=({prototype: <x/>})) /*infloop*/L:for(const constructor = this.zzz.zzz; this.__defineSetter__(\"__iterator__\", (4.).watch); (__noSuchMethod__.__parent__)) (null);");
tryItOut("constructor = constructor;");
tryItOut("let (({ __iterator__: __parent__ }), __noSuchMethod__ = (this.__defineGetter__(\"constructor\", Function))) { with({constructor: @foo}){(undefined); } }");
tryItOut("/*infloop*/while((p={}, (p.z = ([<x><y/></x>].map(function  prop (__count__) { let constructor; } )))()))/*infloop*/M:for((new (<><x><y/></x></>)(null, <><x><y/></x></>)); true ==  '' .@foo; (eval(\"<y><z/></y>\", @foo))) yield *;\r");
tryItOut("/*for..in*/for(__noSuchMethod__ = (( /x/g )[function ([y]) { }] in (yield  \"\" )) in eval(\"*;\",  /x/ )) {const __proto__, constructor = [1];let (__iterator__ = 0) { export __parent__; } }");
tryItOut("if(yield (__count__ = <x><y/></x>.unwatch(\"__iterator__\")) < window instanceof @foo) L: let __parent__, __count__ = 0.1;");
tryItOut("/*infloop*/do for(let y in []); while((constructor.isPrototypeOf((prop = <><x><y/></x></>))));");
tryItOut("do <x><y/></x>; while((( /x/ )([,], [z1,,])) && 0);");
tryItOut("/*infloop*/M:while((yield 0))/*infloop*/for(const __count__; (yield false); this.__defineSetter__(\"constructor\", ({}).__lookupGetter__)) {}");
tryItOut("throw constructor;");
tryItOut("L: {yield @foo;((this);); }");
tryItOut("/*for..in*/for(let [__count__, constructor] = new \r({a2:z2})( /x/ ) in ( default: Function{__parent__: *::*})) {__parent__ }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(yield.prototype in (('fafafa'.replace(/a/g, Math.sin))(__parent__ = (this if (<x><y/></x>)) , (this.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>))))){<y><z/></y>; }");
tryItOut("gc()");
tryItOut("do function(y) { yield y; continue M;; yield y; } while(((constructor = (p={}, (p.z = true)()))) && 0);");
tryItOut("if(this.hasOwnProperty(\"__iterator__\")) { if (3.141592653589793 >> undefined) ; else __iterator__}");
tryItOut("{}\n__parent__if(new 0/0())  else  if (<x><y/></x> .@ constructor) {return;Function } else continue ;");
tryItOut("let (constructor = @foo) { __parent__, constructor; }\n");
tryItOut("/*for..in*/for(var (this)() in *.watch(\"__iterator__\", <><x><y\t/></x></>)) function ()*::*");
tryItOut("{let (prop, prototype = <y><z/></y>) { yield; } }");
tryItOut("/*for..in*/for(__parent__ = (p={}, (p.z = false)()) in undefined) return;");
tryItOut("/*for..in*/for(let __count__(__proto__ = <y><z/></y>) in (constructor = <><x><y/></x></>)((false instanceof __parent__))) {with({prop: *.__lookupSetter__(\"__count__\")}){throw  /x/ \n }<>__count__</>; }");
tryItOut("{var <x><y/></x>, __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(const prototype; *::* .@*:: __parent__;  /x/ ) {continue L;yield @foo; }");
tryItOut("if(<><x><y/></x></>) { if (<y><z/></y>) var x::__count__ = <y><z/></y>;} else export *;\n{}\n");
tryItOut("if(undefined) { if ( '' ) export *; else return <x/>;}");
tryItOut(" /x/g ;");
tryItOut("M:with((this.__defineGetter__(\"__parent__\", [1]))){export prototype;yield; }");
tryItOut("yield @foo const constructor;");
tryItOut("yield  /x/g .@foo < 1e81;");
tryItOut("yield;\nthrow StopIteration;\n");
tryItOut("/*infloop*/M:for(let prop; (export *.propertyIsEnumerable(\"prop\")); [z1]) {L:do  while((this.__defineSetter__(\"prop\",  /x/ )) && 0);export *; }");
tryItOut("let (function::constructor, prototype) { return; }");
tryItOut("var __iterator__ const __parent__;");
tryItOut("/*infloop*/for(__noSuchMethod__ = <y><z/></y>; function(id) { return id }; <x/>) export __noSuchMethod__;");
tryItOut("/*infloop*/for(--__count__; (Boolean()); new (__parent__)()) {L: {gc() }const __proto__, __proto__ = prototype: *::*; }");
tryItOut("switch((this.zzz.zzz)) { default: <><x><y/></x></>;break;  }");
tryItOut("if(__count__ = <><x><y/></x></>) { if (*) {export __count__;let __iterator__ = 0.1; }} else {yield;yield window; }");
tryItOut("let (__noSuchMethod__, __parent__ = __parent__) { /*infloop*/for(3/0; [,,]; __proto__) {let __iterator__;gc() } }");
tryItOut("if(('fafafa'.replace(/a/g, __count__))) { if ((constructor)) export __parent__;} else {@foo, prototype = [];\nfunction(q) { return q; }\n }");
tryItOut("export __noSuchMethod__;var prop, __count__ = [1];");
tryItOut("export *");
tryItOut("L:if(prop getter: ({}).hasOwnProperty)  else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) const __proto__ = #1#, __parent__ = [z1,,];");
tryItOut("M:if(((__count__)-=(yield (new ((window for each (__proto__ in this)))(<>true</>))))) let (function::__iterator__) { /*infloop*/M:do return  '' ; while(this.__defineSetter__(\"prototype\",  /x/g )); }");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", (-1).__defineSetter__)) prop else return;");
tryItOut("/*for..in*/for(var prototype = this.zzz.zzz in (eval(\"var __proto__, __iterator__ = prop;\", __proto__ = [#3={a:#3#}].\fsort(new Function)))) if((prop[<y><z/></y>])) { if ([<y><z/></y>.propertyIsEnumerable(\"prototype\")].filter(@foo)) {{}var prototype; } else break M;}");
tryItOut("/*infloop*/M\f:do var prototype, __count__; while(#2=[ /x/ ]);");
tryItOut("if(({prototype: (__noSuchMethod__ = *::*), __proto__:  \"\" .yoyo( /x/ ) }) /= [1,,]) /*for..in*/M:for(let [prototype, __proto__] = new (new Function)(<x/>, this) in __noSuchMethod__) export prototype;\f");
tryItOut("export *");
tryItOut("export *");
tryItOut("/*infloop*/do {yield;/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in <x/>) {throw @foo; } } while('fafafa'.replace(/a/g, new Function));");
tryItOut("L: {}");
tryItOut("this.zzz.zzz;");
tryItOut("L:while((<x><y/></x>.__parent__ = let (constructor = [z1])  /x/ ) && 0)/*for..in*/for(const __parent__ = ((<><x><y/></x></>)).eval((constructor in (-0))) in <><x><y/></x></> .. null.__noSuchMethod__ = eval(\"<x/>\", *::*) in __noSuchMethod__) L: __parent__");
tryItOut("if(prototype = ( ''  >>>= /x/ )) { if (/*\n*/(3/0.watch(\"setter\", [1,2,3,4].map) >>> __proto__)[(([<y><z/></y> for (constructor in <x/>)])(((yield *)),  \"\" ))]) {/*for..in*/for(let [prototype, constructor] = (undefined <<= 1e-81.__defineGetter__(\"__parent__\", ({a2:z2}))) in ({})) {{}<x><y/></x>; } }} else {;\t const __proto__;{} }");
tryItOut("let (__proto__ = prototype) { yield; }\n__count__ = @foo;\n");
tryItOut("while((( { return (~__proto__) } .__defineGetter__(\"__iterator__\", @foo)) :: __parent____noSuchMethod__ = __proto__) && 0){throw 3/0; }");
tryItOut("do {M:with({prop: true >>= ({a2:z2})}){{}let __iterator__ = false, prototype = null; } } while((this.__defineSetter__(\"__count__\", (({}).hasOwnProperty).call)) && 0);");
tryItOut("if(this.zzz.zzz) ");
tryItOut("(constructor);");
tryItOut("with(window if (#1#)){export *;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in (new <x/>(true, <x/>))) {with({yield: __noSuchMethod__}){ }continue ; }\nwith((p={}, (p.z = <><x><y/></x></>)()))if(__noSuchMethod__ =  /x/g ) { if (yield <y><z/></y>) const __iterator__; else throw ({a2:z2});}\n");
tryItOut("L: {/*infloop*/while(0/0)yield; }");
tryItOut("export *;\nif((( '' )(__iterator__, prop))) {; } else  if ((this)[<x><y/></x>]) {window; }\n");
tryItOut("/*for..in*/for(let (function::__count__) in ((function  set ()(+<><x><y/></x></>(3/0, <y><z/></y>)))(__noSuchMethod__.__iterator__ = +__iterator__)))");
tryItOut(";if(eval(\"yield <x><y/></x>;\", <x><y/\t></x>)) { if ((p={}, (p.z = 1.2e3)())) return;} else const __parent__;");
tryItOut("if(0x99) {Math.pow } else  if (this) {(prop).__defineSetter__ }");
tryItOut("(((__count__ = *::*\r += [,])).__defineSetter__).apply");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for \t each(this.zzz.zzz in <{constructor}> </{constructor}>) {break ;export __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(prototype in ((Math.sin)(__parent__-=<><x><y/></x></> ? [,,z1] : 0x99))){yield;var __parent__ = this, __count__ = true; }");
tryItOut("throw </>; const prototype;");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in <y><z/></y>) gc()");
tryItOut("let (({ __iterator__: ({ __parent__: [, , ], __proto__: [({ prop: constructor }), ] }), __iterator__: ({ constructor: ({ constructor: __parent__, prop: __parent__ }), (__parent__.__iterator__ = ({constructor: <x><y/></x> })): \f__noSuchMethod__ }) }) = 0x99 for (prototype in <><x><y/></x></>), __proto__ = false ? constructor = undefined : let (constructor) [[1]]) { {{}yield <><x><y/></x></>; }\n }");
tryItOut("M:if(__count__) L:with(__iterator__.__iterator__+=(this === *)){return __iterator__;__noSuchMethod__ = <><x><y/></x></> } else  if (((gc)())) yield <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("if(({__proto__ getter: gc })) {continue M;gc() }");
tryItOut("/*infloop*/while(<x/>)__parent__ = <><x><y/></x></>; const __count__;");
tryItOut("do  while(((new (({prototype: __count__, __noSuchMethod__ setter: eval }))())) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x/>.throw(prop)) *;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __count__ in (((<x/>).__defineSetter__)(prototype)))");
tryItOut("with(<y><z/></y>){return;/*infloop*/for(var constructor; [,,z1]; prop) {return;return; } }");
tryItOut("L: {this;{} }");
tryItOut("return;");
tryItOut("/*infloop*/for(var constructor; [[1]]; __count__-=<y><z/></y>) {throw #3={a:#3#}; }");
tryItOut("__noSuchMethod__ = x::constructor;");
tryItOut("{}");
tryItOut("let (__iterator__, __iterator__) { if(@foo) {const __iterator__; } }");
tryItOut("let (function::__noSuchMethod__) { const __count__ =  \"\" ; }");
tryItOut("/*infloop*/while(constructor%=(function ([y]) { })())M:if(new #2=[<><x><y/></x></> >>>=<><x><y/></x></>])  else  if (([,,].__lookupGetter__(\"__parent__\"))) {__iterator__ = *::*; }");
tryItOut("if([]) {continue ;<><x><y/></x></>; } else  if (([11,12,13,14].filter)) continue ; else {yield; }");
tryItOut("(constructor);");
tryItOut("/*infloop*/L:for(constructor;  /* Comment */(this)[<x/>]; (yield __proto__.__count__ getter= window.__iterator__ = @foo)) L:if(this.__defineSetter__(\"__parent__\", gc)) { if ((undefined.__lookupSetter__(\"__proto__\"))) {export *; } else {export *;gc() }}");
tryItOut("/*for..in*/for(var prototype = \n\f( /x/g  @ *) in ('fafafa'.replace(/a/g, 0/0))) L:if(3) { if (<x/>) {<><x><y/></x></> } else const prop = 1.3;}");
tryItOut("with({}) __noSuchMethod__ = constructor;");
