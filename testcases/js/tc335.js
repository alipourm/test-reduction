tryItOut("let (prototype = [z1,,].propertyIsEnumerable(\"__noSuchMethod__\"), __proto__) { __noSuchMethod__.__lookupSetter__(\"prop\"), <y><z/></y> }");
tryItOut("/*infloop*/for(var ({ __count__: prototype });  '' .yoyo(constructor); true % true) {let prop, __iterator__;gc() }");
tryItOut("/*infloop*/while(#1#){throw <><x><y/></x></>;((<y><z/></y>)); }");
tryItOut("/*for..in*/for(default:  in @foo) {let __noSuchMethod__;@foo; }");
tryItOut("{let __parent__,  = <x/>; }");
tryItOut("break ; const let;");
tryItOut("/*infloop*/L:for(var __proto__; this.zzz.zzz; prop.__iterator__) {}");
tryItOut("L:while((window) && 0){return <>I</>;; }");
tryItOut("switch(Function >= <><x><y/></x></>) { default: break; case function(id) { return id }: while(((new window())) && 0)constructor, __iterator__ = true;break; case (__parent__ = undefined):  }");
tryItOut("L:with(__iterator__);");
tryItOut("/*for..in*/for(var __parent__ in ((<!--yy-->)(#1=<y><z/></y>)))/*for..in*/for(let __parent__ = __iterator__ in <x><y/></x>) {{}constructor =  \"\" , __iterator__; }");
tryItOut("/*for..in*/for(let [constructor, prototype] = *.@* in ([1,,] ? undefined : null)) prototype, prototype = false;");
tryItOut("if(eval(\"this.__defineGetter__(\\\"window\\\", (1 for (x in []))\\t)\", ( /x/g [<><x><y/></x></>]))) { if (<x><y/></x> ? undefined : <x><y/></x>) export prop;} else  { yield ({<x><y/></x>['constructor']: +prop, constructor setter: function(y) { yield y; const __count__, __noSuchMethod__ =  /x/ ;; yield y; } }) } \n");
tryItOut("M:if(3/0) { if ((new Iterator(<x/>, __proto__))) yield;} else ;");
tryItOut("if(({ constructor: prop, prototype: constructor }) = (<x/>)[<> </>].eval(prototype.constructor =  /x/g  *=  \"\" \n.yoyo(prop+=3/0))) {return ( /x/g ); } else  if ((__noSuchMethod__.prop getter= function(q) { return q; })) {(({__noSuchMethod__:  /x/g }).eval( \"\" )); }");
tryItOut("M:if(null) function(y) { yield y; let __proto__ = @foo, constructor = <x/>;; yield y; } else  if (('fafafa'.replace(/a/g, function () { yield <><x><y/></x></> } ))(0x99.hasOwnProperty(\"__count__\")))  '' ");
tryItOut("function::-- = prop;");
tryItOut("return <><x><y/></x></>");
tryItOut("for(let y in []);");
tryItOut("if((-1)) {\tbreak ;return <x><y/></x>; } else  if (new ([[1]])())  else __count__, __parent__; const __noSuchMethod__;");
tryItOut("switch(prototype = <><x><y/></x></>.watch(\"__iterator__\", __parent__) .@x:: ((__count__.propertyIsEnumerable(\"prototype\") for each ([__proto__, , , , __noSuchMethod__] in (#1=__count__ = __count__))))) { default: break; switch([15,16,17,18].sort(prototype, *::*)) { case (([,].__defineGetter__(\"__noSuchMethod__\", (<><x><y/></x></>).watch/*\n*/)))(({ __count__: __iterator__, __iterator__: __proto__ }) = <x/>.unwatch(\"__count__\"), window\n): <x><y/><\f/x>yyybreak; break; default:  }break; break; case new ((function  __count__ () { return  '' ; } ).apply)(eval(\"yield;\", (false.__count__ =  \"\" )), 0.1): /*for..in*//* nogeckoex bug 349964 */ for  each(prop(1e-81) in  '' ) { }break; break; case 3: ; }");
tryItOut("M:while((false) && 0)let __noSuchMethod__, __proto__;\nexport *;\n");
tryItOut("/*infloop*/M:do export prop;export *; while(new (0/0)() % 'fafafa'.replace(/a/g, <><x><y/></x></>));");
tryItOut("/*for..in*/for(let [constructor, prototype] = [[1]] in \n1e-81 -= let (__count__) undefined) do __proto__.constructor while((undefined) && 0);");
tryItOut("/*for..in*/for(__noSuchMethod__ = undefined >= function (__proto__, prop) { yield <><x><y/></x></> }  in *) <><x><y/></x></>\n");
tryItOut("with({__parent__: (-1 |= <><x><y/></x></>)})null");
tryItOut("{( \"\" ).call }with(@foo()){<><x><y/></x></>; }");
tryItOut("/*infloop*/for(<x/>;  \"\" ;  /x/g ) return <><x><y/></x></>;");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: prop, __iterator__: __count__ }) = (uneval( /x/ ));  if ( '' ); prototype.__lookupSetter__(\"yield\") !== eval(\"var __count__, __noSuchMethod__;\", __iterator__) += <x><y/></x>.__proto__) return [];");
tryItOut("{yield  \"\" ; }\n/*for..in*/for([__parent__, __parent__] = <y><z/></y> in <y><z/></y>) {var prototype = <><x><y/></x></>; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in __count__) {break L; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("if(((false)()) ? __count__ = (yield *) : <x><y/></x>.isPrototypeOf( /x/ )) {M:with({__parent__: 1.2e3})throw 1e81; }if(this.__defineSetter__(\"__count__\", (false).__defineSetter__)) /*for..in*/for(let __proto__(<><x><y/></x></>) in ((function () { throw __noSuchMethod__; } )((new @foo(<y><z/></y>))))){throw __parent__; }");
tryItOut("if((yield <><x><y/></x></>)[<y><z/></y>.yoyo(__iterator__)]) { if (!arguments) __iterator__ else let __proto__, (0);;}");
tryItOut("if((new (__proto__.__noSuchMethod__ = __iterator__)().throw((__parent__ = __parent__)(<><x><y/></x></>.isPrototypeOf(#1#), 1.2e3)))) {continue ;{}break M; } else  if ([[1]].__lookupSetter__(\"constructor\") ^= (yield window).valueOf(\"number\")) try { throw __iterator__; } catch(__count__ if (function(){__iterator__ = constructor;})()) { return window; } finally { this.zzz.zzz; } ");
tryItOut("let(constructor = #0=(@foo).call(3.141592653589793, <x/>, <x/>)) ((function(){this.zzz.zzz;})());");
tryItOut("this.zzz.zzz;");
tryItOut("do {}__iterator__, constructor; while((yield (<bbb xmlns:ccc=\"this ? <>prototype, __parent__</> : <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>.(([1,2,3,4].slice).call(prototype <= __count__, [11,12,13,14].sort,  \"\" )))//h\n) && 0);");
tryItOut("if(5.0000000000000000000000) { }");
tryItOut("if(constructor =  \"\"  .@*:: (__iterator__.__iterator__)) { if (((Function).call(prop = [[1]], eval(\"<><x><y/></x></>\", <><x><y/></x></>)))) gc()} else ;");
tryItOut("/*infloop*/for(function ([y]) { }; __parent__; <x><y/></x>) const __iterator__ = ({});");
tryItOut("while((constructor.(window)) && 0){yield this; }");
tryItOut("{}");
tryItOut("with({}) { with({}) { throw StopIteration; }  } ");
tryItOut("{/*for..in*/for(var [__proto__, __proto__] = <><x><y/></x></> in <y><z/></y>) {}with({}) eval }");
tryItOut("/*infloop*/for(-false; (this if (*::*)); [ \"\" ].sort(({}).hasOwnProperty)) {yield; }");
tryItOut("if((({__parent__: 1e4 & @foo}))) {} else {var prototype = <y><z/></y>;export __parent__; }");
tryItOut("if(- /x/g .__iterator__ = #1=[#1#]) throw  /x/ ; else  if (@foo) /*infloop*/do yield true; while((({ __parent__: prototype, function::constructor: prototype })\t = new (gc)(-1))); else with({__count__: <><x><y/></x></>}){export __iterator__; }");
tryItOut("L:with(<x/>)export constructor;");
tryItOut("L: {return; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__.__proto__ in ((((eval(\"return;\", <x><y/></x>) if (3))))(<x><y/></x>.__lookupGetter__(\"__parent__\").__noSuchMethod__ = __count__|=(uneval(__noSuchMethod__ = this))))){/*for..in*/for(let __parent__ = <x><y/></x> in {}) export __count__;/*infloop*/do var __proto__, __parent__ = <><x><y/></x></>; while((p={}, (p.z =  '' )())); }");
tryItOut("this.zzz.zzz\nwith((({prop setter: [,] })).__parent__ = <x><y/></x>.__proto__)if(prototype) {({}).hasOwnProperty } else  if (<><x><y/></x></>) {yield;return; } else return *;");
tryItOut("/*infloop*/do L:with({__parent__: ~[,,z1]}){<x><y/></x>; } while([15,16,17,18].sort(Math.pow, <x><y/></x>));");
tryItOut("do export constructor; const __parent__; while(((this.__defineGetter__(\"__parent__\", *::*.__count__))) && 0);");
tryItOut("with({__iterator__: ((yield [z1]))}){return *::*; }");
tryItOut("if(!<x><y/></x>) return 3/0; else  if ((\n(true.__noSuchMethod__))) {(1 for (x in [])) } else @foo;");
tryItOut("M:if(this.__defineGetter__(\"__iterator__\", 'haha'.split).prototype) { if ((1e81.constructor = <x><y/></x>)) {/*for..in*/for(var __iterator__ in *::*) {var __count__; }export  '' ; } else {export *;if(this) {yield;throw this; } }}");
tryItOut("if(this.valueOf(\"number\") ^= (let(<><x><y/></x></>)%=@foo)++) let __iterator__;/*infloop*/\tM:for(@foo; <><x><y/></x></>; <><x><y/></x></>) var __parent__, prop = true;");
tryItOut("M:if(Error(__parent__, 'fafafa'.replace(/a/g, (new Function(\"{break ; }\"))))) {const __count__, __iterator__ = <x><y/></x>;return; } else  if (([,]\n).call(__count__ = <x/>, (__proto__) = __count__ = __noSuchMethod__)) {switch(\fwindow) { case 7: ;break;  }let __count__ = <><x><y/></x></>, __count__ = <x><y/></x>; }");
tryItOut("with([prop = ({a1:1}) << \t(<x><y/></x>.(<y><z/></y>)) for (\f__noSuchMethod__ in try { let __proto__ = function ([y]) { }; } catch(constructor if 1.2e3) { yield <y><z/></y>; } catch(__noSuchMethod__) { return; } finally { return null; } ) for (__iterator__ in __parent__) if ( /x/ )])if((<><x><y/></x></>.__lookupSetter__(\"constructor\"))) { if (1e81 <= <x><y/></x>) <x/>} else {export constructor;let __proto__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(__proto__ = ({ __proto__: prop, constructor: __iterator__ }); eval(\"var prop = <y><z/></y>;\", <><x><//h\ny/></x></>); typeof this) const __proto__, prop;");
tryItOut("/*infloop*/for(((constructor).throw([11,12,13,14].filter).@foo.hasOwnProperty(\"__parent__\")); <><x><y/></x></>[<x><y/></x>](); prop = false) { }");
tryItOut("L:while((({__parent__: 033, __iterator__: window , 0 })) && 0){__iterator__;{}{} }");
tryItOut("/*infloop*/for((({__iterator__ = __proto__; })); __iterator__.({ __proto__: ({ constructor: ({ __iterator__: __proto__ }) }), prototype: ({ __proto__: [__iterator__, __noSuchMethod__, , ] }) }).watch(\"constructor\", 'haha'.split); 1.2e3 &= <><x><y/\t></x></> .@ null >  \"\" ) {{return __count__;with({\fprototype: <y><z/></y>.valueOf(\"number\")})/*infloop*/for(prop; true; <x><y/></x>) let constructor, __count__; }L:if(window) {let prototype, constructor; } else  if (<y><z/></y>) yield; else function (prop)<><x><y/></x></>{} }");
tryItOut("/*infloop*/while((yield prop))while((this.__defineGetter__(\"__proto__\", 'haha'.split)) && 0){{}gc() }");
tryItOut("L:if(constructor.(window.unwatch(\"<x><y/></x>\"))) { if ([constructor, ({ prop: __proto__, constructor: __iterator__ }), []] = this.__noSuchMethod__ = __noSuchMethod__) {{continue L; } }} else {}\nif((__parent__ = prototype)) \n");
tryItOut("/*for..in*/for(const constructor = (Number()) in true) {yield;export *; }");
tryItOut("constructor, function::function::__proto__\nthrow StopIteration;");
tryItOut("if((((__parent__.throw(3/0)) for (prop in ({})) for each (__parent__ in throw <x><y/></x>;)))) { } else  if (__noSuchMethod__.__count__.__defineGetter__(\"__count__\", [1,2,3,4].slice)) {export *;; }");
tryItOut("/*infloop*/while(().*)if(undefined) export prop; else {gc(){} }");
tryItOut("M:with({prototype: [(({ __proto__: __iterator__ }) = * >>>=*::*)].filter(function(q) { return q; })})for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("throw __noSuchMethod__;");
tryItOut("__count__ = 5.0000000000000000000000, __noSuchMethod__ = [[1]]; const __iterator__;");
tryItOut("with({__count__: constructor.__noSuchMethod__ = ({__count__: window})}){export *; }");
tryItOut("with((1e+81\n)){;yield true; }");
tryItOut("/*infloop*/L:while((({x::__parent__: let (prototype = <><x><y/></x></>, prop)  \"\"  })))L:switch(this.\tthrow(*::*)) { default: break;  }\n");
tryItOut("/*for..in*/for(let __count__ = x::__parent__.hasOwnProperty(\"prototype\") in ({ get __iterator__ __parent__ (prop.__parent__)__noSuchMethod__.__iterator__ })) throw <><x><y/></x></>;");
tryItOut("if(--(!window) ? ((uneval(<y><z/></y>))) : this.__defineGetter__(\"__noSuchMethod__\", gc)) { if ((__count__ =  /x/ )) /*for..in*/L:for(var __count__ in (\f(gc)(true)))throw 1.2e3; else }");
tryItOut("/*infloop*/for(var __iterator__; this; @foo) {gc()('haha'.split).apply }");
tryItOut("if(new (({}).__lookupGetter__)(yield;, 1e-81)) {export __noSuchMethod__; } else  if (gc().watch(\"__count__\", __count__ = (-0))) export __iterator__; else {__count__; }");
tryItOut("M:(/while((this \"\"  .@x:: this ) && 0){; }");
tryItOut("with({}) (\f#3={a:#3#});");
tryItOut("L: { }");
tryItOut("yield;");
tryItOut("with({__parent__: *::* / null})return 3;");
tryItOut("if(((<y><z/></y>)())) {let __iterator__; } else  if (((p={}, (p.z = [1,,])())))  else {continue ;{} }");
tryItOut("with({__iterator__: <><x><y/></x></>})__parent__ = @foo;");
tryItOut("let __proto__;");
tryItOut("if((prototype.__count__ = typeof window .@x:: (yield <x><y/></x>))) { if ( /x/g ) {export *;\n;\n } else {yield;\twhile((try { __iterator__ = ({a1:1}); } catch(__iterator__ if *) { {} } catch(__iterator__ if prop) { gc() } finally { export constructor; } ) && 0)let prop, __proto__ = <x><y/></x>; }}");
tryItOut("{yield; }");
tryItOut("L:\nif(new (new Function(\"return <x><y/></x>;\"))()) ((-1));");
tryItOut("let __proto__;return null;");
tryItOut("/*infloop*/for(const prototype; ({__iterator__: prototype.__iterator__}); *--) __parent__");
tryItOut("/*for..in*/for(var (0)(<><x><y/></x></>) in ((((new Function(\"( /x/g );\"))).apply)(function::__iterator__ = __iterator__)))continue ;");
tryItOut("if((<><xxx {constructor}={<y><z/></y>.watch(\"__proto__\", new Function)} />yyyyyy</>.((uneval([,,z1] %= @foo))))) \n/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in constructor) {throw null;<y><z/></y>; }");
tryItOut("if((__count__ = __iterator__.__defineSetter__(\"constructor\", (1 for (x in []))))) {return false; }");
tryItOut("{with(<ccc:ddd>yyy</ccc:ddd>)yield undefined; }");
tryItOut("if(\t3/0) { if ( /x/g ) yield;} else {(<x/>); }");
tryItOut("<y><z/></y>\n/*for..in*/for(__count__ in __proto__) ");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*infloop*/L:while((new ([1,2,3,4].map)(([,].__iterator__ = -0)))){do continue ; while((<x/>) && 0);let __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("Exception(({ set constructor()<><x><y/></x></> }),  /x/ );");
tryItOut("/*for..in*/for(const ({ prototype: ({ __count__: ({ prototype: prop, prototype: prop }), __noSuchMethod__: ({ __iterator__: prop }) }) }) in ((({ get prototype(prototype) { return 1e4 } , __count__: #3={a:#3#} })) || <><x><y/></x></>)) {do {return (-1); } while(( /x/ ) && 0);eval\nbreak L; }");
tryItOut("with({}) { break M; } ");
tryItOut("return #1=[#1#];\nreturn @foo;\n");
tryItOut("throw StopIteration;");
tryItOut("yield;");
tryItOut("gc()");
tryItOut("L: ");
tryItOut("L:if((__proto__.prop = false)) { if ((prop = <x/>)) if(false) {{}gc() } else  if (#1#) {continue L; } else yield;} else {var __count__ = <x><y/></x>, constructor = window; }");
tryItOut("/*infloop*/do if(<y><z/></y>) prototype else  if (null) {{}export *; } else {export *; } while('fafafa'.replace(/a/g, __noSuchMethod__))\n");
tryItOut("/*infloop*/M:while((@foo).watch.yoyo(this.__defineSetter__(\"constructor\", (1 for (x in []))))){{}\n-3/0; }");
tryItOut("M:if((null.__lookupGetter__(\"__iterator__\")++)) {/*infloop*/do prototype; while(0.1);gc() } else  if (([prop = __count__.prop = 0.1 in ' /x/ \t].map(gc))) {export constructor; }");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", (prop ? prototype : true)))) {export prop;var __count__; } else  if (eval(\"( /x/ .__lookupSetter__(\\\"__proto__\\\"))\", prop = [z1,,])) return;\f");
tryItOut("with(try { {} } catch(__iterator__) { var __noSuchMethod__ = , prototype; } ) { {} } ");
tryItOut("L: {return;with( '' ){{} } }");
tryItOut("\rM:if(<x><y/></x>.prototype) { if (~({a1:1}).__lookupSetter__(\"__proto__\").__iterator__) {}\f else window;}");
tryItOut("{/*for..in*/L:for(let __count__ = @foo in *.yoyo(3/0)) {/*infloop*/do continue ; while((-1)); }for(let y in [5,6,7,8]) yield (__parent__[ /x/g ]); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in delete  @ prop.(__noSuchMethod__)) {if(prototype.__count__ setter= eval / this >= ({__noSuchMethod__: ((<\fx><y/></x>)),  get __iterator__(__proto__, __count__) { return (this.zzz.zzz) }  })) { if (<><> </></>) {export __proto__;export *; }} else /*infloop*/do {yield; } while(<x/>); }\f");
tryItOut("L:if(\nnew ((@foo)())((this.__defineGetter__(\"__count__\", (gc).apply)), [,])) { if (true | <><x><y/></x></>) {var __noSuchMethod__, prop;continue L; }} else {break ; }");
tryItOut("switch((<x><y/></x>)) { default: /*infloop*/for(const [, prop, ({ __noSuchMethod__: prop })] = yield undefined.isPrototypeOf((--null)); this.zzz.zzz; this.__defineGetter__(\"constructor\", gc)) {/*infloop*/M:do N while(*::*); }case #2=3: M:while((undefined) && 0){ /x/ ; }break; case false: return  \"\" ;L: {return window; }case 7: M:with({constructor:  /x/ \n}){export *; }case 3: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\r for  each(let (__count__) in new <x/>()) {gc()\nyield (__iterator__ = prototype).valueOf(\"number\"); }");
tryItOut("/*for..in*/for(var constructor in ((({}).__lookupGetter__)(new ( /x/ )(@foo) ? prototype.(<><x><y/></x></>).watch(\"__iterator__\", function(q) { return q; }) : (eval).call(this.__defineGetter__(\"__parent__\", [1,2,3,4].slice), (let (function::__noSuchMethod__ = -1) (function ([y]) { })() &= window)))));");
tryItOut("L:with(__iterator__)var __noSuchMethod__ = 1.2e3, __parent__ =  /x/g ;");
tryItOut("/*for..in*/L:for(\nconstructor.__noSuchMethod__ in (((yield <y><z/></y>).__defineSetter__)(yield @foo)))yield 3.141592653589793;");
tryItOut("if(eval(\"export *;\", <x><y/></x>)) { if ((function(q) { return q; }).call) switch(<x><y/></x>) { case Function(new ('haha'.split)(*,  '' )): yield; } else {L:do yield; while((-1) && 0);/*infloop*/L:for(let {}; ((prototype%=window)[\f__noSuchMethod__.__noSuchMethod__ =  /x/ ]); ([__noSuchMethod__])) export __noSuchMethod__; }}");
tryItOut("/*for..in*/for(let constructor = (--function ([y]) { }--).valueOf(\"number\") in *::* ? (__count__.unwatch(\"__proto__\")) : ('fafafa'.replace(/a/g, function  let (__proto__) { function::__iterator__; } ))) {yield (undefined.*);/*infloop*/L:for(var ({ constructor\f: ({ __parent__\t: __proto__, prop: ({ __iterator__: __iterator__, prototype: ({ prop: __parent__, __iterator__: __proto__ }) }) }) }) = ({}).__lookupGetter__--; <><zzz>#1=\t[#2=<x><y/></x>]</zzz></>; <><xxx>{prop}</xxx></>) {{}/*infloop*/while(default: break; )function (__parent__, __parent__) { yield; }  } }");
tryItOut("/*for..in*/for(var 3.141592653589793\n['prototype'] in ((gc)('fafafa'.replace(/a/g, ({}).__lookupGetter__))))yield 4.;");
tryItOut("/*infloop*/M:while((window['prototype'] = <x><y/></x>.unwatch(\"__count__\")))do {with({constructor: __iterator__})export __iterator__;; } while((prototype.(<x><y/></x>)) && 0);");
tryItOut("while(((-0) .@ <y><z/></y>.throw(new (Math.sin)(\n<x><y/></x>))) && 0){yield constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (<><x><y/></x></>\n)) ;");
tryItOut("switch(4.) { default: throw __noSuchMethod__;break;  }");
tryItOut(";if(constructor = ({})) { if (__proto__) yield -3/0; else export __count__;} const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__count__ in !#1=[#1#]) {export *;gc() }");
tryItOut("/*infloop*/M:while(true.constructor = constructor = .2)let prop = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var function::constructor = \t<x><y/></x> in yyy) {const prototype = true; }");
tryItOut("if(__proto__ = __noSuchMethod__.(this)) {(<y><z/></y>); } else  if (yield *) L:do throw constructor; while((([11,12,13,14].some)) && 0); else {let __iterator__ = <>x><y/></x__noSuchMethod__ ></>; }");
tryItOut("/*infloop*/do {gc() } while(yield [,,]);");
tryItOut("return");
tryItOut("let (__iterator__ = this) { /a/gi\n }");
tryItOut("return;");
tryItOut("([1,2,3,4].slice).apply");
tryItOut("{const __noSuchMethod__ = prop, __proto__; }");
tryItOut("if(new ((<x><y/></x>).__defineSetter__)()) {{}yield; } else  if ((function ([y]) { })().isPrototypeOf([,,]) * (<y><z/></y>.throw(<x><y/></x>))) (window); else while((<x><y/></x>) && 0){yield; }");
tryItOut("if(function  __parent__ (__iterator__, __noSuchMethod__) { yield <><x><y//*\n*/></x></> }  = ({__noSuchMethod__: *,  set __noSuchMethod__(__count__)[1] })) {{export *;(<><x><y/></x></>); } } else  if ([( /x/g  ? false : true)]) {break L;var prop = <><x><y/></x><\f/>, __count__; } else L: {(new Function(\"\")) }");
tryItOut("/*infloop*/for(let __count__; (uneval(eval(\"return;\",  /x/ ).__lookupSetter__(\"__count__\"))); (new ((<xxx>{__parent__}</xxx> =  '' .__parent__ /= ( /x/g  ? @foo : __iterator__)))(typeof ({__iterator__: this, __iterator__ setter: ('haha'.split).call }), typeof ( '' .__defineSetter__(\"__proto__\", ({}).hasOwnProperty)) % ({:  \"\" })) ? <><> /x/g </></> : (true.__defineGetter__(\"__parent__\", 'haha'.split).@*.yoyo(undefined << <x><y/></x>)))) {/*infloop*/for(var ({ __proto__: __count__, x::prototype: prop }) = [15,16,17,18].map(function(q) { return q; }, false); new <><x><y/></x><\f/>; eval(\" \\\"\\\" \", true)) {throw __noSuchMethod__;continue M; } }");
tryItOut("/*infloop*/for(const ({ __proto__: __iterator__, __parent__: ({ setter: ({ __proto__: prototype, constructor: __count__ }), prototype: prop }) }) = ([__count__.constructor = <><x><y/></x></>].sort(function(y) { yield y; <y><z/></y>;; yield y; })); (<y><z/></y> ?  /x/g  : <y><z/></y>) .@ ((<>/*\n*/<x><y/></x></> if (<x><y/></x>))); <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(this instanceof  '' )) {gc() }");
tryItOut("L:while((([1] < <y><z/></y>)) && 0){break M;/*infloop*/M:for(let prototype; <x/>; undefined) gc() }");
tryItOut("{__proto__ = 033;throw \f<><x><y/></x></>; }");
tryItOut("/*infloop*/for(var ({ prototype: /*infloop*/for(let __proto__ = [15,16,17,18].map((function (__iterator__, prop)@foo).call, <><x><y/></x></>); ( '' )[ /x/g ]; (<><x><y/></x><\f/>.__defineSetter__(\"__parent__\", gc))) {throw <><x><y/></x></>; } }) = [<x/>].map(gc); 0.1; [ /x/g ].some(({}).hasOwnProperty)) {break M;throw {}; }");
tryItOut("let (function::__parent__, default: case yield new <><x><y/></x></>(-0, <x/>): break; break; case (eval(\"[15,16,17,18].filter(<><x><y/></x></>, <y><z/></y>)\", <y><z/></y> ? window : this)): if(__count__) {throw <x><y/></x>;(<><x><y/></x></>); } else  if (function(id) { return id }) {let __count__, prop =  /x/ ;{} }break; break; ) { yield; }");
tryItOut("/*infloop*/L:for((get = ([1] ^= *::*)); new String(\n, <><x><y/></x></> += #1#);  /x/ ) ");
tryItOut("throw prop;");
tryItOut("if(eval(\"<x><y/></x>\", 0/0)) { if (<><>prop+=__parent__</></>) /*for..in*/for(let __iterator__ in ((Math.pow)(<><x><y/></x></>))){{} }} else {export *; }");
tryItOut("/*for..in*/L:for(let constructor in (((-0))( /x/g .isPrototypeOf(prototype)))){return <y><z/></y>; }");
tryItOut("{var constructor = *; }");
tryItOut("L:switch(<y><z/></y> ^ prop > ( /x/g  - <y><z/></y>)) { case ({ __iterator__: __proto__, __count__: __proto__ }), ({ __parent__: constructor, \fconstructor: __proto__ }): (*::*);\nconst __noSuchMethod__ = <><x><y/></x><\f/>, prototype = null;\nbreak; default: break; case <y><z/></y> === window: case null: {}break;  }");
tryItOut("/*for..in*/M:for(let prototype = (~this) in <x><y/></x> != this) {if(let (__proto__, __iterator__ = *) false) { if (<x><y/></x>.unwatch(\"prop\")) {}} else {} }");
tryItOut("let(__parent__) { return ({ __iterator__: [, ] }) = ({ __noSuchMethod__: [, __noSuchMethod__], prototype: [\r__noSuchMethod__, __noSuchMethod__, , __proto__] });");
tryItOut("(-3/0);");
tryItOut("yield <><x><y/></x></>;try { with({}) { yield; }  } catch(constructor if (function(){constructor, __count__;})()) { let(function::__iterator__ = <>\t<x><y/></x></>, prop = <y><z/></y>) { gc } finally { let(__proto__, prop) { var __count__; }  const prop;");
tryItOut("let(constructor = ( /* Comment */ /x/g ), __proto__) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(let __iterator__;  /x/g  < 1e81.hasOwnProperty(\"__proto__ setter: (( '' )[__parent__]).__defineSetter__\") | (uneval(__parent__)); <x><y/></x>.__count__ = this\t.__defineGetter__(\"prototype\", *::*)) {yield (function ([y]) { })();; }");
tryItOut("do {export *; } while(('fafafa'.replace(/a/g, (Exception())/*\n*/)) && 0);");
tryItOut("/*infloop*/L:for((window.@foo); constructor = <x><y/></x>; (1e+81.watch(\"__noSuchMethod__\", [1,2,3,4].map))) var __count__ = <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("break L");
tryItOut("for(let y in []);");
tryItOut("M:do if((eval(\"break ;\", <><x><y/></x></>))) { } else  if () {__count__ = @foovar prototype; } else {{}#3={a:#3#}; } while((((uneval(<x><y/></x>)))) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = this in *::*) {<><x><y/></x></>; }");
tryItOut("for(let y in []);");
tryItOut("if(Math.sin(eval(), (\nundefined))) return __count__ =  \"\" \n{}");
tryItOut("if(([1]\n)) { if (yield eval(\"<><x><y/></x></>\", <x><y/></x>)) return\nyield; else {const constructor; }}");
tryItOut("for(let y in []);");
tryItOut("{({}).hasOwnPropertyreturn 1e+81; }");
tryItOut("continue \n*::*;");
tryItOut("/*for..in*/L:for(const [prop, prototype] = ('haha'.split).call(__parent__ = <x><y/></x> .@x:: ({a1:1}), (undefined)([], this)) in this.__defineSetter__(\"__count__\", function  prototype () { ; } )) {export prop;[1,2,3,4].map }");
tryItOut("/*infloop*/for(({ prop: [__count__.__parent__] }) = 5.0000000000000000000000; (#0=[(uneval(this))]); \n<></>) return ({constructor getter: function(q) { return q; }, __iterator__: (new Math.pow(<><x><y/></x></>.isPrototypeOf(*::*), __iterator__)) });");
tryItOut("/*for..in*/L:for(let [prototype, __parent__] = __count__.prop setter= (({}).__lookupGetter__)./*apply try { return arguments; } finally { __count__ = *, __count__ = this; }   in new (<><x><y/></x></>)(0/0)) {<x><y/></x>var __iterator__ =  /x/ ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x/>) {const __iterator__, __iterator__ = <><x><y/></x></>;export __proto__; }");
tryItOut("/*for..in*/for(var [__count__, __count__] = <x><y/></x>.__defineGetter__(\"prototype\", Math.sin) in [z1,,]) {let (constructor, __count__) { return; } }\n");
tryItOut("while((<><xxx>{__count__}</xxx></>) && 0){if((this.__defineSetter__(\"__iterator__\", function (__proto__, __parent__) { return window } ))) {gc() } else {let prop;let __proto__; } }");
tryItOut("while((prop.__proto__ = (this.eval(<x/>))) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in [__iterator__.prop = *].map(new Function)) {{}yield; } }");
tryItOut("{{} }");
tryItOut("return;{gc()return window; }");
tryItOut("{}\n");
tryItOut("if(( \"\" .__noSuchMethod__)) export *; else  if (( < #1=({prototype: function(id) { return id }}))) yield;");
tryItOut("/*for..in*/for(let  /* Comment */0.1\r = this :: <x><y/></x>.(<x><y/></x>)['constructor'] in (__iterator__ = <y><z/></y>)) {gc()yield <y><z/></y>; }");
tryItOut(" for each (__parent__ in false)");
tryItOut("/*for..in*/for(__noSuchMethod__ = (( \"\" .isPrototypeOf(window)) if (<y><z/></y>)) in <y><z/></y>) yield\n/*infloop*/L:for(__parent__; (Iterator(<x><y/></x>)); ({ get prop __parent__ (return *::*;) { yield this } , __iterator__ getter: function () { return (-0) }  })) ");
tryItOut("while((false) && 0){return; }");
tryItOut("/*for..in*/for(var prop in (-0([z1,,]))) {(null);/*infloop*/for(<x><y/></x>; window; <y><z/></y>) (*::*); }/*for..in*/L:for([prototype, constructor] =  /x/g  in __count__.prop =  /x/g ) return;");
tryItOut("return;");
tryItOut("if(*::*\n) {yield #1=[#1#]; } else  if (<x/>.yoyo(<><x><y/></x></>)) {; } else throw window\n");
tryItOut("M:switch(function(id) { return id }) { default: break; break; case <{prop}><!--yy--><\t/{prop}>:  }");
tryItOut("");
tryItOut("throw <><x><y/></x></>;/*for..in*/for(let [__proto__, __parent__] = 1e4 in <y><z/></y>) \rexport __parent__;");
tryItOut("<><bbb xmlns=\"new (function  __parent__ (, __proto__) { (<x><y/></x>).call } )() ? \n(<><x><y/></x></>) : window\"><ccc:ddd>yyy</ccc:ddd></bbb></>");
tryItOut("if(this) {}");
tryItOut("/*for..in*/for(\fprop['__iterator__'] in 3) function () { yield __count__ } ");
