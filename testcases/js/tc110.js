tryItOut("const __proto__ = constructor;M:switch((-1)) { default: case 1: export prop;case 6: throw -3/0;break; case 7: {}break; case arguments: case 3: return;break; (<x><y/></x>);case null: break; export *;break; case 2: yield;break; case 9: break; export *;break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let (__iterator__, __parent__) <><x><y/></x></><><x><y/></x></>; __noSuchMethod__(1e81) = constructor = <x/>\f; yyy\f -= <><x><y/></x></>.prototype =  '' ) {/*for..in*/L:for(var __count__ in [,,z1]) throw *::*; }");
tryItOut("/*for..in*/for(var prop = ((uneval(<x/>)) for each (constructor in ( /x/g .propertyIsEnumerable(\"prototype\")))) in (yield undefined.__lookupSetter__(\"constructor\"))) if(__noSuchMethod__ = <><x><y/\t></x></>.prototype) {/*infloop*/for(const __iterator__ = *;  /x/ ; <><x><y/></x></>) export __parent__;M:if(__count__) { } else  if (undefined) {(__noSuchMethod__);export *; } }");
tryItOut("with({__iterator__: *::* = window})with(prop)var prop =  '' , constructor = @foo;");
tryItOut("yield function(id) { return id };");
tryItOut("throw __proto__;");
tryItOut("{return <><x><y/></x></>\n/*for..in*/for(const [__proto__, prototype] =  /x/  in window) try { ({ __noSuchMethod__: ({ constructor: constructor, prototype: prop }) }), __parent__; } catch(__proto__ if undefined) {  } catch(prop if (function(){export *;})()) { ; }  }");
tryItOut("throw <x/>;");
tryItOut("eval");
tryItOut("switch( /x/ .__defineSetter__(\"function::__noSuchMethod__\", undefined)) { default:  }");
tryItOut("/*for..in*/L:for(var __iterator__ = export * in __proto__ =  \"\" ) /*infloop*/for(const __iterator__; [] < * % (<><x><y/></x></>)(t, @foo);  /* Comment */*::*) {\r }");
tryItOut("constructor = __iterator__;");
tryItOut("try { with({}) { this.zzz.zzz; }  } catch(__count__ if let (__noSuchMethod__, __parent__ = [1,2,3,4].map) ((<y><z/></y>)[<><x><y/></x></>] :: ([[15,16,17,18].some(function(y) { yield y; (this);; yield y; }, 1e81)]))) { with({}) { try { this.zzz.zzz; } catch(__noSuchMethod__) {  for each (__noSuchMethod__ in <x><y/></x>) for each (prop in <><x><y/></x></>) for (__iterator__ in @foo) = prototype; }  }  } catch(__noSuchMethod__ if (* , window if ((-1)))) { let(__noSuchMethod__, constructor) { this.zzz.zzz; } catch(__iterator__) { gc() } ");
tryItOut("");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(const [, ] = ( /x/ ++); [0].filter((prop = <x><y/></x>/*\n*/)); Date() / yyy) throw StopIteration;var constructor = this, __iterator__;");
tryItOut("while((((p={}, (p.z = *::* *= <x><y/></x>)())).valueOf(\"number\")) && 0){constructorlet (__count__ = 3, __parent__) { export *; } }");
tryItOut("if(yield  /x/g  .@x:: <><x><y/></x></>) {{}{} } else  if ( '' ) if([15,16,17,18].sort(Math.pow,  '' )) @foo; else  if ( set __parent__ x::__noSuchMethod__ (__count__) { return new (-1)(*::*, <x/>) } ) {gc() } else var __noSuchMethod__ = *::*, __count__; else {prototype, __parent__ }");
tryItOut("function  __proto__ (__iterator__) { yield <><x></><x></> } \nwith({}) { throw x::prop; } ");
tryItOut("/*infloop*/while(((p={}, (p.z =  \"\" )()))){; }");
tryItOut("with(new (1e4)(window) instanceof __proto__){yield; }");
tryItOut("/*for..in*/for(var __count__ in ((gc)(true.@foo))){const __count__, __parent__ = __count__; }");
tryItOut("/*infloop*/for(\f({ (\t{ prop: __noSuchMethod__, __iterator__: __count__ }): __noSuchMethod__ }) = (let __iterator__ = __count__); new Exception(<><x><y/></x></>); <x/>)  /x/g ;");
tryItOut("if( /* Comment */__noSuchMethod__.prop) { if (<!--yy-->) } else {M:if(0x99) return; else  if ((<x><y/></x>.(<x><y/></x>).watch(\"__parent__\", [1,2,3,4].slice))) {throw 0x99;gc() } }");
tryItOut("if(this.zzz.zzz) { if (new Date(window, -1)) continue ;} else return *::*;");
tryItOut("/*for..in*/for(var \f[undefined] in constructor+=*) {{} }");
tryItOut("/*for..in*/M:for(const constructor = prototype in prop) {/*for..in*/for(__noSuchMethod__ in false) {__iterator__ } }");
tryItOut("/*infloop*/for(eval(\"#1#\", @foo) / (1e81.__defineSetter__(\"constructor\", Math.sin)); (new Function());  '' .__noSuchMethod__) {const constructor; }");
tryItOut("if(eval(\"__count__\", <x><y/></x>)) let prototype = *, __proto__ = ({a1:1}); else  if (()) export prototype; else {var __proto__ =  /x/g ;yield <><x><y/></x></>; }");
tryItOut("with({constructor: __count__}){null;export __count__; }");
tryItOut("M:while((<x><y/></x>) && 0){(<x><y/></x>);yield; }");
tryItOut("/*infloop*/M:do {return; } while(@foo)");
tryItOut("if((__noSuchMethod__ = [z1,,])) { if (()) {{}return; } else {export *; }}");
tryItOut("if((__proto__|=prototype ^= (new (([1,2,3,4].map).apply)(window)))) break ; else  if (prop) yield;");
tryItOut("/*for..in*/L:for(constructor in (p={}, (p.z = ((prototype).watch).call(<x><y/></x>, <><x><y/></x></>, <x/>))())) export __noSuchMethod__;");
tryItOut("do <><x><y/></x></>; const __proto__; while((Iterator()) && 0);");
tryItOut("var constructor; const __proto__");
tryItOut("/*for..in*/for(var __proto__ = prototype = this in 4.) const __parent__ = -1, __iterator__;");
tryItOut("for(let y in []);");
tryItOut("export __proto__\n");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = function (__noSuchMethod__, __noSuchMethod__)<x><y/></x> in window) if([z1,,]) {const prop;return; }");
tryItOut("do {<x><y/></x>; } while((([ /x/g ] .@x:: new  /x/g )) && 0)\f;");
tryItOut("/*infloop*/for(var __count__; __count__ = <x><y/></x>; (({ prototype: [], prototype: __proto__ }) = [15,16,17,18].filter((1 for (x in [])), [z1]).__lookupGetter__(\"constructor\").__defineGetter__(\"constructor\", gc))) with(new ({})(<><x><y/></x></>)++)__parent__ = (-1), prototype = -3/0;");
tryItOut("{<x/>\nbreak L; }");
tryItOut("/*infloop*/M:for(var prop; *; false) {return prop;; }");
tryItOut("{}/*infloop*/for(var __count__; window; this) break M;");
tryItOut("/*infloop*/do 1.3; while(<>\t<x><y/></x></>);");
tryItOut("if(__proto__ = <y><z/></y> >>> (({__count__: __iterator__ }))) {__noSuchMethod__;var constructor, __count__; } else {return  /x/g ; }");
tryItOut("/*infloop*/for(const __proto__(<y><z/></y>) = let (constructor = prototype = <y><z/></y>, __iterator__ = this) eval(\"undefined\", __parent__); ((function  constructor () { yield var __parent__ = __proto__; } ).call( '' , 1e81, __proto__)); (++ /x/ \r)((*::*.__defineGetter__(\"__proto__\", [1,2,3,4].slice)), __iterator__)) {yield;<x/>; }");
tryItOut("with({prop: undefined--})break L;");
tryItOut("/*for..in*/M:for(let __parent__ in *) {}");
tryItOut("/*for..in*/for(const <x><y/></x>['__proto__'] in  /x/ ) let __noSuchMethod__;");
tryItOut("/*infloop*/while((<><x><y/></x></> &= window.__count__ = <x><y/></x>)){L: {do {yield [,,z1];{} } while((window) && 0); }export __iterator__; }");
tryItOut("for(let y in [5,6,7,8]) throw prototype;");
tryItOut("with({__proto__: *.prop.__lookupGetter__(\"constructor\")}){throw __count__; const __count__; }");
tryItOut("let (prop = this) { export *; }");
tryItOut("\n");
tryItOut("if(\nfalse) gc else  if (5.0000000000000000000000.__defineSetter__(\"constructor\", <x/>)) {3.141592653589793;return; }");
tryItOut("L:if(new Function(this)) { if (<y><z/></y>) gc()} else return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((+5.0000000000000000000000.@*).__defineSetter__)((__count__ = +({constructor: {} }))))){L:while((((true .@ 1.3)())) && 0)export prototype;\t }");
tryItOut("/*infloop*/do {gc()yield; } while(<x>\t<y/></x>.(__iterator__));");
tryItOut("while(([,,]) && 0){undefined;throw prop; }");
tryItOut("if((constructor = *::*)) { if (({})) {} else {return ({a1:1}); }}");
tryItOut("do {(prop).__defineSetter__ } while((((function (__parent__, __noSuchMethod__)<x><y/></x>)(<x><y/></x>,  '' ))) && 0);");
tryItOut("/*infloop*/do /*infloop*/M:do {; } while(([,,z1] &= __noSuchMethod__.__proto__ = (p={}, (p.z = @foo)()))); while(1e4.function::__count__);");
tryItOut("with({prototype: }){{}constructor }");
tryItOut("do /*infloop*/for(let __noSuchMethod__; __parent__ @ <><x><y/></x></>; __parent__) {break L;throw  \"\" ; }/*infloop*/do throw <><x><y/></x></>; while(-0 /=  '' ); while((-[[1]] &= 1.2e3) && 0)/*\n*/;");
tryItOut("/*infloop*/do {export *;gc() } while(constructor);");
tryItOut("if(__count__ = <y><z/></y>.unwatch(\"__noSuchMethod__\")) { if (<><xxx {__count__}={delete <x><y/></x>.__parent__} /></>) {if(__noSuchMethod__.__proto__ getter= let (prototype, __proto__ = []) true) {break ; } }} else \t{/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) null; }");
tryItOut("let __proto__;");
tryItOut("{export prop; } const constructor;");
tryItOut("/*for..in*/for(const [prop, prototype] = ([(Array(this.zzz.zzz, [11,12,13,14].map))]) in (new .2( /x/g ) > (<xxx {__iterator__}={ /x/g } />.((<><x><y/></x></>(window, __iterator__)))))) M:if(__noSuchMethod__) (-0)");
tryItOut("1.2e3\n");
tryItOut("for(let y in [5,6,7,8]) with({}) __proto__, __parent__ = <y><z/></y>.__parent__ = __proto__;");
tryItOut("([])(new function(q) { return q; }(this)) = prop;");
tryItOut("/*for..in*/M:for(let <y><z/></y> in ((function  __count__ (__iterator__, __proto__) { return (this.__defineSetter__(\"prop\", new Function)) } )(([constructor = <y><z/></y>].map('haha'.split))))){const constructor, __count__;__count__ }");
tryItOut("__proto__ = __parent__;");
tryItOut("{{} }");
tryItOut("try { (prototype); } finally { export __noSuchMethod__; } ");
tryItOut("let(constructor =  \"\" ) { for(let y in []);");
tryItOut("/*infloop*/for(__noSuchMethod__; set.*; 033(*::* = __count__, getter)) {with({__count__: null}){return @foo; }L:do gc() while((yield [,,]) && 0); }");
tryItOut("L:with(new ((1 for (x in [])))(<x><y/></x>))yield this;");
tryItOut("{if((void (__count__ ?  \"\"  : *::*))) { if (((({}).__lookupGetter__)( /x/g ))) {; }} else {}return;\n(<x><y/></x>);\n }");
tryItOut("/*infloop*/M:for(var prototype = prototype; (<y><z/></y> !== yield;); function::prototype.__noSuchMethod__) {/*for..in*/for(const __proto__ = <><x><y/></x></> in <><x><y/></x></>) {(false); } }");
tryItOut("{}\n");
tryItOut("/*infloop*/while(this)L: { /x/g ; }");
tryItOut("{if(__noSuchMethod__ = new <x><y/></x>(<x><y/></x>)) {yield; } else /*infloop*/for(__count__ = [,,]; @foo; 0.1) {return this; } }");
tryItOut("switch((Math.pow)) { default: break;  }");
tryItOut("if(*::* ? * : <x><y/></x> << <y><z/></y>.@foo) { if (prototype = yield) {let __proto__ = <x><y/></x>; }} else {do constructor, __iterator__; while(( '' ) && 0); }");
tryItOut("let (__iterator__ = 0.1 / <y><z/></y>, prototype) { const __noSuchMethod__; }");
tryItOut("if(<x/>) {export *;__noSuchMethod__ = [[]]; } else  if (__parent__) <><x><y/></x></>;");
tryItOut("/*for..in*/for(let prop in []) (<x/>);");
tryItOut("/*infloop*/while(\n__count__){Math.sin{} }\n");
tryItOut("function(q) { return q; }\nM:switch(prop) { case  /x/g : export *;<x><y/></x>;break;  }\n");
tryItOut("/*for..in*/for(var __proto__ in ((window)(function::let)))throw [,,];");
tryItOut("const __count__ = <x><y/></x>");
tryItOut("/*for..in*/for(let  \"\" ['prototype'] in false) { }");
tryItOut("{/*for..in*/for(const __iterator__ in [1]) {throw @foo;export *; }/*infloop*/do __iterator__: __iterator__ = <x><y/></x> while(033); }");
tryItOut("/*for..in*/L:for(const __proto__ in eval(\"let __parent__, __noSuchMethod__;\", <><x><y/></x></>.__parent__).__defineSetter__(\"__count__\", (<x><y/></x>).apply)) function::__parent__, __parent__ = prop;");
tryItOut("L:with((__noSuchMethod__ = <y><z/></y>)){yield *; }\nlet (prop, __parent__) { L: export *; }");
tryItOut("var __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in ((uneval(&)))) {;with({__iterator__: *::*}){Functionyield; } }");
tryItOut("{; }");
tryItOut("let (__parent__ = prop.__iterator__ setter= 'haha'.split.__lookupGetter__(\"__iterator__\")) { __proto__ = *::*; }\nreturn *;");
tryItOut("let(__iterator__) { for(let y in [5,6,7,8]) with({}) { throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in false) case this: gc()yield <><x><y/></x></>;break; default: break; yield;break; case undefined: break; case <><x><y/></x></>: prototype = *, __proto__;break; return;break; case 2: break; ");
tryItOut("with({__proto__: [<x/>].some(((-1)).__defineSetter__)}){export __proto__/*\n*/; }");
tryItOut("/*for..in*/for(prop = <><x><y/></x></> in <y><z/></y>) {{}let __proto__ =  \"\" , __parent__ =  /x/g ; }");
tryItOut("M:with({__noSuchMethod__: *::*}){const __iterator__, __iterator__;export __noSuchMethod__; }gc()");
tryItOut("if(((p={}, (p.z = @foo)()))) {throw prop; } else ;/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in 0.1) { }");
tryItOut("if(<>\f[,,z1] .@x:: constructor</>) { if (gc()) return <x><y/></x>;\nnew Function\n} else {/*infloop*/for(var constructor; this.prototype; ( \"\"  * null)) export prop; }\n");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*infloop*/while(this)return window;");
tryItOut("/*for..in*/for(constructor in 4..@foo.__defineSetter__(\"constructor\", function(y) { yield y; *;; yield y; })) M:with({prop: [prop, prop, ] = __parent__}){return;/*infloop*/for(<x/>; prop; <x><y/></x>) {(null); } }");
tryItOut("while((#1=[#1#].__count__) && 0)const __parent__;");
tryItOut("/*infloop*/for(var prototype = <x/>;  '' ; <x/>) gc() const constructor;");
tryItOut("if(<y><z/></y>) window, @foo else  if (<x/>) return;");
tryItOut("/*for..in*/for([constructor, prototype] = [11,12,13,14].map in ([15,16,17,18].map(function(q) { return q; }, <x><y/></x>))) {/*infloop*/do {(<><x><y/></x></>);(__iterator__);\r } while(<x><y/></x>)(({}).__lookupGetter__).applyreturn 3/0; }");
tryItOut("if(<y><z/></y>.@foo = new (* ^ <x><y/></x>)()) { if (<x/>\n.__lookupGetter__(\"constructor\").yoyo(~ \"\" .valueOf(\"number\"))) for(let y in [5,6,7,8]) ( /x/g ); else throw @foo;}");
tryItOut("/*for..in*/for(let yield in [z1,,]) {yield <y><z/></y>;yield arguments; }");
tryItOut("L:while((__parent__.constructor) && 0)if(this) break L;");
tryItOut("let (prop = (new (Date(function(id) { return id })).call()), __count__) { /*for..in*/for(var __iterator__ in <x><y/></x>) let prototype = <><x><y/></x></>\n }");
tryItOut("if([15,16,17,18].some(/a/gi, <><x><y/></x></>)) { if ((__proto__.constructor = window == prototype = [,])) { }} else /*for..in*//* nogeckoex bug 349964 */ for  each((prototype)(@foo()\n) in [15,16,17,18].sort((<x><y/></x>).__defineSetter__,  \"\" )) {yield;; }");
tryItOut("L:switch(__noSuchMethod__ = <y><z/></y>) { default: let prototype = <x><y/></x>; }");
tryItOut("/*infloop*/for(undefined; *::*; <y><z/></y>) {{} }");
tryItOut("/*infloop*/for(<><x><y/></x></>; function(id) { return id }; return null;) {const constructor; }");
tryItOut("M:if(*.propertyIsEnumerable(\"__count__\")) {yield; } else  if ((({null: *::*.yoyo(<><x><y/></x></>\f)}))) continue ; else {<y><z/></y>;return; }");
tryItOut("/*infloop*/for(; --null; (__parent__.propertyIsEnumerable(\"prototype\").eval(( '' \n)).__parent__)) let prop = <y><z/></y>, __noSuchMethod__ = <y><z/></y>;");
tryItOut("");
tryItOut("if(<x><y/></x>) yield <><x><y/></x></>; else  if ((<x><y/></x> +=  /x/g )) yield;");
tryItOut("/*infloop*/while(yield false){return  \"\" ; }");
tryItOut("M:switch(undefined :: *) { default: break;  }");
tryItOut("this.zzz.zzz;");
tryItOut("M:do {{} } while((<x><y/></x>) && 0); const __noSuchMethod__;");
tryItOut("{/*for..in*/for(const __count__ = __iterator__ in <><x><y/></x></>) const __parent__ = 4., prop = <x><y/></x>; }");
tryItOut("/*infloop*/M:while(__noSuchMethod__ = ({__parent__: *::*})[<xxx>{__proto__}</xxx>.( /x/ )])(false);");
tryItOut("L:if((yield )) { if (typeof let (__noSuchMethod__ =  \"\" , constructor) *.@*) {(false);/*infloop*/L:while(<><x><y/></x></>){;{} } }\t else if(#0=[[,,]]) export *; else  if (<x/>) {throw undefined;{} } else <!--yy-->}");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in prototype = 4.) (<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [prop]['constructor'] in (__iterator__.__defineGetter__(\"yield\", ({}).hasOwnProperty))) export constructor;");
tryItOut("return;");
tryItOut("/*infloop*/M:while(constructor = prototype.propertyIsEnumerable(\"__iterator__\")){throw  '' ;\nyield <y><z/></y>;\n }");
tryItOut("/*infloop*/for(<x/>.__lookupSetter__(\"__parent__\"); ({a2:z2}) ? {} : prototype\t; ({__parent__: *::* }).@foo) \n{return  /x/ \f;return window; }\nexport __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const \t(/a/gi) .. let (prop = ({}), function::__count__\t) {}['__proto__'] in -0) { } const typeof <x><y/></x>['prop'];");
tryItOut("/*infloop*/L:for(const __iterator__ = @foo;  /x/ ; this) gc()");
tryItOut("let (<bbb xmlns:ccc=\"this.__defineGetter__(\"__iterator__\", function(q) { return q; })\"><ccc:eee></ccc:eee></bbb>) { yield; }");
tryItOut("[1,2,3,4].slicethrow <y><z/></y>;");
tryItOut("M:if(RangeError((({ get __proto__ prop (constructor) '' , constructor: [z1] })), 'haha'.split)) { if (this.zzz.zzz) <x><y/></x>;} else __parent__ = <><x><y/></x></>;");
tryItOut("L: export delete\n(<><x><y/></x></>);return;");
tryItOut("do {yield; } while((prop) && 0);");
tryItOut("/*infloop*/for(var ({ __proto__: [], __iterator__: \t[prototype, , []] }) = prototype%=function::__count__ = undefined; (({__count__: //h\n[[]](<x><y/></x>, false) })); (@foo.yoyo(<x/>))) -3/0;");
tryItOut("/*infloop*/for( /* Comment */this;  /x/g  = <x><y/></x>; (#1= '' .__count__ = function ([y]) { })) ;");
tryItOut("/*for..in*/for(var prop in (((1 for (x in [])))(<y><z/></y>)))let export *;;");
tryItOut("throw <y><z/></y>;");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("{let __iterator__, prototype;let(__noSuchMethod__) ((function(){var prototype =  /x/ , __iterator__ = window;})()); }");
tryItOut("for(let y in []);");
tryItOut("with({__noSuchMethod__: eval(\"return __noSuchMethod__;\", (constructor = __count__))}){__noSuchMethod__ = <x><y/></x>, __count__ = this; }");
tryItOut("/*for..in*/for(let __count__ in (('haha'.split)(true))){break L;/*for..in*/for(let [__proto__, __noSuchMethod__] = -1.__defineGetter__(\" \", function (__count__, __proto__)<x><y/></x>) in this) __parent__ = #1=[#1#]; }");
tryItOut("L: {yield;if(this.__defineSetter__(\"__noSuchMethod__\", __count__)) {{}if(window) let function::__parent__ = this; } else return; }");
tryItOut("try { yield ({__noSuchMethod__: <x><y/></x> = window }); } finally { with({}) { with({}) { set = __iterator__; }  }  } ");
tryItOut("/*for..in*/for(const __iterator__ in ((<><x><y/></x></>)(__noSuchMethod__ = window)))export __parent__;");
tryItOut("{export __proto__;with(function  __noSuchMethod__ (constructor) { return  ''  } \t){yield <><x><y/></x></>;([z1]); } }");
tryItOut("{;for(let y in []); }");
tryItOut("/*infloop*/M:for(var __noSuchMethod__;  /* Comment */(yield (<><x><y/></x></>.__defineSetter__(\"__parent__\", 'haha'.split)))(); yield (new this)) {let (prop) { <x><y/></x>; } }");
tryItOut("L: yield\ngc()");
tryItOut("if(<x/>.constructor =  /x/ ) { if (Function(__parent__ = window, window++)) return this;} else {(gc).applyyield window; }");
tryItOut("with({prototype: <><!--yy--></>}){const prop, prototype;<x/> }");
tryItOut("this.zzz.zzz;");
tryItOut("{if(__noSuchMethod__.constructor getter= gc) return <x><y/></x>; else  if (\n@foo) function (constructor)033(prototype, <x/>)try { [1,2,3,4].slice } catch(__iterator__) { <><x><y/></x></>; }  }");
tryItOut("L:if(__iterator__ = constructor([,,z1])) {if(this) {gc()(@foo).__defineSetter__ } else (1e81); } else  if (__count__ =  \"\" ) {if([11,12,13,14].filter) {gc() } else  }");
tryItOut("with({constructor: (this.@*.eval(({prototype: null, __count__ getter: function(q) { return q; } })))})M:do {yield;(<><x><y/></x></>); } while((true) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__.__iterator__ in <x><y/></x>) this;");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = (new Function(\"throw <y><z/></y>;\")) in __iterator__ = <><x><y/></x></>.(<x><y/></x>())) gc()");
tryItOut("/*infloop*/do {__parent__ =  /x/ ; } while(<x/>);return  '' ;");
tryItOut("/*for..in*/L:for(var [__parent__, __noSuchMethod__] = ((this.__defineGetter__(\"function::prototype\", new Function)).unwatch(\"__proto__\")) in this < __parent__ != __count__ = __count__) {var prop = undefined; const __parent__;export *; }");
tryItOut("/*for..in*/for(var __iterator__ = __parent__.__count__ = prototype = \t<x><y/></x> in window in arguments) /*infloop*/for(let [, ]//h\n = new (function(y) { yield y; const __count__;; yield y; })(<x><y/></x>, 033); ((uneval(<><x><y/></x></>))); ([__count__].sort(__count__))) {constructor;/*for..in*//* nogeckoex bug 349964 */ for  each(\fconst return <x><y/></x>; in <x/>)  }");
tryItOut("/*for..in*/for(let prototype in (( /x/g )( ''  > @foo.yoyo(undefined))))L: {  }");
tryItOut("if(null()) (undefined); else {<><x><\ty/></x></>;return  '' ; }");
tryItOut("throw @foo;");
tryItOut("/*for..in*/for(let prop = <>\t<x><y/></x></>[@foo] in <{prop}>yyy</{prop}>) {const __iterator__, __proto__;let(constructor = <x><y/></x>) { yield @foo; }");
tryItOut("with({}) { function::__iterator__ = constructor; } ");
tryItOut("/*for..in*/for(let prototype in <><x><y/></x></>.\tisPrototypeOf(this)) {function (__noSuchMethod__, prototype) { yield *::* } \treturn; }");
tryItOut("let(__count__, constructor = <x><y/></x> * false) { for(let y in [5,6,7,8]) return;");
tryItOut("L:if(setter.valueOf(\"number\").valueOf(\"number\")) yield <><x><y/></x></>\nvar <x><y/></x>; else  if (( /* Comment */(uneval( /x/ )))) {__iterator__ = null, <x><y/></x>;continue M; }");
tryItOut("L: return; const __parent__;");
tryItOut("gc const prototype;");
tryItOut("");
tryItOut("if(('fafafa'.replace(/a/g, *::*))) { if (((-0) + 1e4)) let __iterator__ = 3;} else {; }");
tryItOut("if(false != <x><y/></x>) return constructor; else  if (0x99.__iterator__) {export *;export __parent__; } else __iterator__ = window;");
tryItOut("__count__ = prototype;");
tryItOut("const __count__;");
tryItOut("{if(*::*) { if (false) yield  /x/g ; else yield;}let __parent__, prototype; }");
tryItOut("L:if((uneval(this))) continue ; else function  __proto__ (constructor, getter) { yield 3.141592653589793 } ");
tryItOut("return constructor @ #1=[#1#].watch(\"prototype\", let (prop) [1].__defineGetter__(\"__parent__\", (({}).__lookupGetter__).call))[(\n@foo)];");
tryItOut("do return <y><z/></y>; while(((__noSuchMethod__ = [15,16,17,18].sort([1,2,3,4].map, .2) ? (yield  \"\" ) : (((new Function(\"{}\"))).apply(null)))) && 0);");
tryItOut("/*infloop*/L:do (<><x><y/></x></>); while(( ''  ? null : true - (__iterator__ = -3/0)) * true(new Object()));");
tryItOut("/*for..in*/for(let __iterator__ in (yield new Date(prototype))) {export __noSuchMethod__; }");
