tryItOut("if(prototype = ({}) * [[]]) do {let __count__ = __proto__, prop;\n@foo;\nif(__proto__) {return  '' ; } } while((yield this.__defineGetter__(\"prototype\", Math.sin)) && 0);");
tryItOut("L:with((__proto__-=<y><z/></y>))({});");
tryItOut("/*infloop*/for(window.throw(<x/>); __noSuchMethod__.__noSuchMethod__; yield <y><z/></y>) {export *;throw false; }");
tryItOut("let(__noSuchMethod__ = (uneval(* /  /x/ )), __parent__) ((function(){this.zzz.zzz;})());");
tryItOut("let (prototype) {  { yield <><x><y/></x></> }  }");
tryItOut("{/*for..in*/L:for(const constructor in ((({}).__lookupGetter__)(<x><y/></x>)))continue L;<><x><y/></x></> }");
tryItOut("let([, , , ], constructor =  /* Comment */#1#) ((function(){with({}) { for(let y in []); } })());");
tryItOut("/*for..in*/for([__parent__, function::prototype] = window in  \"\" .__parent__ = {throw <x/>;(<><x><y/></x></>); }) {switch(*::*) { default: case 9: break; case this: break; case *: yield <x><y/></x>;case [,,z1]: function  prototype ()<y><z/></y> }export __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in this) {__proto__ = *::*;export __iterator__; }");
tryItOut("return  for (prop in true.throw(true)) if (<x><y/></x>);");
tryItOut("if(({constructor: __iterator__ |= <y><z/></y> })) const __count__, __count__ = @foo; else  if (<x/>) return;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in {}) {}");
tryItOut("(<><x><y/></x></>);\ngc()\n");
tryItOut("__noSuchMethod__, __iterator__ = undefined;");
tryItOut("/*for..in*/for(var [constructor, prop] = -0 <= __noSuchMethod__.prototype =  ''  in function(id) { return id }) let __proto__, __noSuchMethod__;");
tryItOut("/*infloop*/do {export *;with((new (@foo).watch(033, -0))) } while((prop.__noSuchMethod__ setter= (this).watch));");
tryItOut("/*for..in*/for(var prototype in *::*) /*\n*/{export __iterator__; }");
tryItOut("/*for..in*/for(__count__ = [11,12,13,14].map in (({}).__lookupGetter__).call(__count__, )) {/*infloop*/L:do with({__proto__: false.yoyo( /x/g )}){export *;{} } while(( /* Comment */window >= ([[1]] & 1.3)));export *; }");
tryItOut("return;");
tryItOut("if((__proto__.unwatch(\"prototype\"))) L: (<><x><y/></x></>);");
tryItOut("break M; const __count__;");
tryItOut("__count__ = __count__;");
tryItOut("/*infloop*/M:for(__proto__; [15,16,17,18].sort((function () { return let (__noSuchMethod__ = <x><y/></x>, __proto__) 3/0 } \f).apply, 0/0); RangeError((__count__ = *) >>>=(\n /x/ ))) {\r \"\" ;return; }");
tryItOut("(function  __iterator__ () { return <><x><y/></x></> } ).apply");
tryItOut("if(@foo) *; else (<x/>).__defineSetter__");
tryItOut("/*for..in*/for(const __parent__ = typeof null in []) continue ;");
tryItOut("with({__noSuchMethod__: (<x/>.__parent__)})yield;");
tryItOut("if(<><x\f><y/></x></>) {prop; } else  if (this) export constructor; else {continue ; }");
tryItOut("switch(__proto__) { default: while((0/0) && 0){throw <x><y/></x>; }<x><y/></x>; }");
tryItOut("if((\ntrue)) { if (this.__defineSetter__(\"function::__noSuchMethod__\", /a/gi)) {export *; }} else /*infloop*/L:for(let prototype = <x><y/></x>; <x/>; <><x><y/></x></>) ;\nbreak ;\n");
tryItOut("/*for..in*/M:for(let __proto__: <x><y/></x> in (<x><y/></x>.eval(#1=[#1#]))) {return #3={a:#3#};*; }");
tryItOut("/*infloop*/while(<x><y/></x>)export *;");
tryItOut("with({}) try { throw StopIteration; } finally { try { export constructor; } catch(constructor) { function::window = [,,z1],  ''  } finally { export __noSuchMethod__; }  } ");
tryItOut("/*for..in*/for(let ({ constructor: __proto__ }).prop in ((new Function)(<x><y/></x>))){(function ([y]) { })();gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (x::__iterator__) in  /x/g ) {const prototype, __count__ =  /x/ ; }");
tryItOut("if(c.eval(<y><z/></y> ==  /x/g )) yield;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (-1)) yield false;");
tryItOut("if(__parent__.__defineSetter__(\"prop\", eval)) const __noSuchMethod__; else  if (\t[@foo for each (__iterator__ in @foo)]) gc()");
tryItOut("let(__proto__) { /*infloop*/for(const __parent__ = <x/>;  /x/ ; constructor) {export __parent__; }");
tryItOut("M:if(__proto__ = (constructor)) { if (constructor =  /x/g [ \"\" ]) continue ;} else {throw <x><y/></x>;\nthrow ({a1:1});\n }");
tryItOut("while(((-0).hasOwnProperty(\"constructor\")) && 0){{}yield; }");
tryItOut("let(++<x><y/></x> += window + __count__ getter: /a/gi, (yield ([z1].__proto__))) { throw __noSuchMethod__;");
tryItOut("/*infloop*/while((({__count__ setter: ({}).hasOwnProperty, __proto__: 5.0000000000000000000000 })))return;");
tryItOut("M:with(gc())M:switch('fafafa'.replace(/a/g, function(q) { return q; })) { default: return;break;  }");
tryItOut("if(__noSuchMethod__.prototype = this) { if (__parent__.hasOwnProperty(\"prop\")) (window);} else {yield; }");
tryItOut("if((<><x><y/></x></>)[this]) {\nthrow  /x/ ; } else  if ((this.zzz.zzz)) ;");
tryItOut("do {export __iterator__; } while(((constructor = <y><z/></y>)) && 0);");
tryItOut("/*infloop*/for(var __count__; false; [15,16,17,18].map(gc,  /x/ )\f) {return <x/>\nlet (__count__ = <><x><y/></x></>) { return;return undefined; } }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var constructor in ((<x><y/></x>)( '' ))){export __noSuchMethod__; }");
tryItOut("if(<x/>) export *; else  if (prop =  '' ) {return <y><z/></y>;({a2:z2}); } else {<x><y/></x>;; }");
tryItOut("M:switch(delete new (new Function)((__proto__.__noSuchMethod__))) { case 3: break; case 0: break; /*for..in*/for(var (constructor) in <><x><y/></x></>) {; }break; if(<x/> ? [,,] : *::* .. true) { if (this.zzz.zzz) ; else throw [,,];}break; case 4: return;if(<x><y/></x>.( \"\" ).__lookupGetter__(\"__count__\")) { if (__proto__ = @foo) {@fooexport *; } else yield <><x><y/></x></>;}\nyield;var constructor, __parent__ = <><x><y/></x></>; const constructor;case ((((yield *::*)).eval((@foo ? __proto__ : @foo)))[[11,12,13,14].some]) ? eval(\"/*infloop*/for(([15,16,17,18].sort((<x><y/></x>).watch, <><x><y/>\\f</x></>)); false *= 3; constructor[*]) {;(*); }\", new *) : *.throw( /x/ ): case ((undefined.__iterator__ = <x><y/></x>).yoyo(<x><y/></x>.(<><x><y/></x></>))): default: break; yield;break; case 1: const __parent__, __noSuchMethod__ = <y><z/></y>;break; case 2: break;  }");
tryItOut("{this.zzz.zzz; }");
tryItOut("L: {L:with({__count__: <><x><y/></x></>}){}(false); }");
tryItOut("/*for..in*/L:for(let __count__.prototype setter= function  prototype () { yield  /x/g  }  in ((({prop: <><x><y/></x></>, __noSuchMethod__ setter: (new Function(\"let __proto__, constructor;\")) }))++)) /*infloop*/for([ /x/  for (__proto__ in undefined)];  /x/g .valueOf(\"number\"); (({}).__lookupGetter__())\n) {}");
tryItOut("return (true.propertyIsEnumerable(\"__iterator__\")) + this.prop = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <x><y/></x>) {continue ; }");
tryItOut("/*for..in*/for(let prop in ((function(q) { return q; })(((4.)[*] for each (constructor in @foo) for each (__parent__ in  /x/g )))))yield __proto__;\nreturn;\n");
tryItOut("for(let y in [5,6,7,8]) try { export *; } finally { __iterator__; } ");
tryItOut("if(__count__ = [z1,,]) {;if( /x/ ) { if ( /x/g ) ( '' ); else throw __iterator__;}\n }");
tryItOut("__iterator__ = prototype;");
tryItOut("/*infloop*/while(033.__defineSetter__(\"prototype\", [1,2,3,4].map))return null;");
tryItOut("{/*infloop*/while(<><x><y/></x></>)function ([y]) { }; }");
tryItOut("switch(__parent__ = ({})) { default: case (function (__noSuchMethod__) { yield (function ([y]) { })() } ([window for each (__proto__ in *::*)])): case 2: break;  }\n");
tryItOut("let __parent__ = this\n;");
tryItOut("L: {({}).__lookupGetter__(function (__count__, prop) { yield <x><y/></x> } ).call }");
tryItOut("for(let y in []);");
tryItOut("switch(let (__count__ = (__count__), constructor) delete null\t) { case *::*.yoyo((<y><z/></y>[<><x><y/></x></>])): with({__parent__: *})\nyield 1e-81;\nbreak; return <x><y/></x>;break; L:with({__count__: prototype.__parent__ = 0.1})return;break; case 9:  }");
tryItOut("var constructor\ngc()");
tryItOut("let (prop = 0/0 >> <x/>, __proto__ = <y><z/></y>) { constructor; }");
tryItOut("if(this /= <x/>.propertyIsEnumerable(\"__noSuchMethod__\").__defineGetter__(\"prop\", function  __parent__ (prototype) { return prototype = (true.__lookupGetter__(\"__noSuchMethod__\")) } )) { if (<bbb xmlns:ccc=\"()\"><ccc:eee></ccc:eee></bbb> .@ <x><y/></x>.(<x><y/></x>)) {;var __proto__; }} else let (constructor, constructor = [,,]) { switch([,]) { case 3: break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in (.2.__lookupGetter__(\"__count__\"))) yield  \"\" ;");
tryItOut("L:if([,]) {return function(id) { return id }; } else  if (<x><y/></x>) {\t*;__noSuchMethod__ = <x><y/></x>, constructor; }");
tryItOut("switch(__proto__ = ( /* Comment */var __noSuchMethod__ = <><x><y/></x></>)) { case *--.throw([15,16,17,18].filter(Function, *)): if(*) ; else  if (constructor = <y><z/></y>) {return __proto__; }break; default: [__iterator__, __parent__, __count__, , ], prototype;break;  }");
tryItOut("export __iterator__\n\n/*for..in*/for(let [({__count__ getter: gc, \t__iterator__ getter: ({}).__lookupGetter__ }), __iterator__] = ('fafafa'.replace(/a/g, [[]])).prototype(<x/>) in <><x><y/></x></>) gc()");
tryItOut("/*infloop*/while(__proto__)/*for..in*/for(var prototype = (<x><y/></x>\n) in window) {let __iterator__, prop;{} }\f");
tryItOut("/*infloop*/M:for(let __proto__; ([[1]].__lookupGetter__(\"__proto__\")); 1e4.*) {return false;yield; }");
tryItOut("with({}) { throw __iterator__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __parent__) {return; }");
tryItOut("/*for..in*/for(prototype in ((function  __noSuchMethod__ \t() { export *; } )(())))let prototype = <><x><y/></x></>;");
tryItOut("while((__proto__ *= case (prop if (@foo)): break; case 1: ;break; ) && 0)<x/>;");
tryItOut("(__count__);let __parent__, prop; const function::prop\r;");
tryItOut("M:if((new Function)()) { if (undefined) {let (__proto__ = [], __noSuchMethod__ = <x><//h\ny/></x>) { yield <x/>\n }throw <><x><y/></x></>;\f } else {yield;*::* }}");
tryItOut("export prototype;");
tryItOut("(1e4);");
tryItOut("let prop, <x/>,  /x/g  = __noSuchMethod__;\n1e81;\n");
tryItOut("/*for..in*/for(var __count__ in <y><z/></y>) export *;");
tryItOut("M:with({__parent__: __noSuchMethod__ = __noSuchMethod__}){if( \"\" ) {var __count__, prototype = <x><y/></x>;const __noSuchMethod__ = __iterator__, __parent__; } else  if (1e4) yield window; else return; const __count__;let(prop, __iterator__) { for(let y in [5,6,7,8]) yield; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(prototype = \n([null].some(/a/gi))[new RangeError()] in this.__defineGetter__(\"prototype\", <x><y/></x>)) {do yield; while((function(id) { return id }) && 0); }");
tryItOut("/*infloop*/for(const __iterator__; <bbb xmlns=\"eval(\"String()\", (p={}, (p.z = undefined += (<><x><y/></x></> if (0x99)))()))\"></bbb> .. ({a2:z2}).__iterator__; <><ccc:ddd><ccc:ddd><bbb xmlns:ccc=\"(prop if (<x/>))\"><ccc:eee></ccc:eee></bbb><ccc:ddd><!--yy-->\f</ccc:ddd></ccc:ddd></ccc:ddd></>) /*infloop*/do {/*for..in*/for(let [__count__, __proto__] = __count__ in @foo) export *; } while(<x><y/></x>());");
tryItOut("/*infloop*/M:while(<><x><y/></\fx></>.unwatch(\"prototype\")){{} }");
tryItOut("L: {/*for..in*/for(prototype in 1e81) {gc() }return; const __noSuchMethod__; }");
tryItOut("__iterator__ = constructor;");
tryItOut("while((null) && 0)\f{yield 3/0; }");
tryItOut("yield <y><z/></y>M:if(( /* Comment */({__parent__: }))) { if (([,] ? window : __parent__.watch(\"__proto__\", function (prototype) { gc() } ) << Boolean(!<><x><y/></x></>, false))) {throw <x><y/></x>; } else {return; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 *///h\n for  each(new (*)().__parent__ in ((uneval(window)))) {return <><x><y/></x></>; }");
tryItOut("with({__parent__: <x/>}){; }");
tryItOut("/*for..in*/[, , ({ __proto__: ({ __proto__: __parent__ }) }), ]");
tryItOut("for(let y in [5,6,7,8]) yield __parent__;");
tryItOut("if(({ get __noSuchMethod__(({ \tconstructor: [[__parent__, ({ constructor: prototype }), [, , ], , ], __parent__, __count__ = [[]];, __parent__, ], prop: x::__iterator__ }), __iterator__) { yield ((yield ({ set prop __parent__ (constructor, prototype)__count__ }))) } ,  set __noSuchMethod__() { yield ((<><x><y/></x></>).call((<y><z/></y>)[-0], (<y><z/></y> % [,,z1]), false)) }  })) throw prop; else {{}/*infloop*/M:do {(true); } while(<x><y/></x>); }");
tryItOut("return;");
tryItOut("const __proto__ =  /x/g \n");
tryItOut("/*infloop*/for((-(__count__ = new (this)( /x/ ))); new ((eval).apply)(export *, ); (uneval(__count__ = (constructor = <x><y/></x>)))) with({}) ");
tryItOut("/*for..in*/for(const __count__.__count__ in  \"\" ) {function(q) { return q; }throw <y><z/></y>; }");
tryItOut("with(__count__ >> #3={a:#3#})yield;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (((yield __noSuchMethod__)) === *::*) in false) {var prop = <x><y/></x>, constructor = <y><z/></y>; }");
tryItOut("break M;");
tryItOut("__count__, __count__ = true;");
tryItOut("for(let y in []);");
tryItOut("with({}) with({}) this.zzz.zzz;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ({a1:1})) export constructor;");
tryItOut("with({}) for(let y in [5,6,7,8]) export constructor;");
tryItOut("/*for..in*/for(var __parent__ in (((1 for (x in [])))([11,12,13,14].map.__lookupGetter__(\"__parent__\").unwatch(\"*\")))){with({__noSuchMethod__: ((constructor = *.__lookupGetter__(\"constructor\")) ? eval(\"<x><y/></x>\", @foo.__proto__ = __noSuchMethod__) : (1 for (x in [])) for each (constructor in this.__lookupGetter__(\"__iterator__\")))})var __count__ =  '' ; }");
tryItOut("do {export prop;return; } while(([]) && 0);");
tryItOut("/*infloop*/for((new new (<><x><y/></x></>)()( /x/ .__defineSetter__(\"prop\", <><x><y/></x></>), <x><y/></\fx>)); __count__ = <x><y/></x>; <x/>) return;");
tryItOut("/*for..in*/for(const [prototype, ({ __proto__: __noSuchMethod__ }), constructor] = ({__noSuchMethod__: *::*}) in constructor) ;");
tryItOut("with(*){if(0/0) { if (1.2e3) __parent__ = *::*;} else {__proto__; } }");
tryItOut("if( { export constructor; } ) { if ((new (function () { yield; } )())) {gc }} else function  prop (function::prototype)1.2e3");
tryItOut("{var __parent__ = constructor;L: {gc() } }");
tryItOut("L: (<><x><y/></x></>).__defineSetter__");
tryItOut("M:if( /x/ ) { if (<><x><y/></x></>) {(eval).call } else {export prototype; }}");
tryItOut("throw __iterator__ =  '' ;\nreturn;\n/*\n*/");
tryItOut("L: {if(<x><y/></x>.watch(\"__proto__\", <x/>)) gc() else  if ([z1,,] >>>=__iterator__)  else {export *; } }");
tryItOut("/*for..in*/for(const prototype = ({constructor: let (__proto__ = [], prototype) this}) > export * in window) {return;/*for..in*/for(const prop.__iterator__ in (((new Function(\"export __proto__;\")))((({__count__:  \"\"  }))))){prop } }");
tryItOut("while((__parent__) && 0);");
tryItOut("switch((true |= *::*) :: #1#) { case 3: case this <<=  /x/g : if(*) export *; else [[1]];case ((uneval(<y><z/></y>))): return;default: prototype }");
tryItOut("/*for..in*/L:for(var prototype in ((Function)( /* Comment */window))){continue L;__parent__ = __noSuchMethod__, prop =  \"\" ; }");
tryItOut("{if(\n__parent__) return true; else  if ((({ constructor: prototype, constructor: __count__ }) = (null)(<><x><y/></x></>, <x><y/></x>))) (undefined); }");
tryItOut("{(false);{} }");
tryItOut("let (prop) { /*for..in*/for(prop in __parent__) {export *; } }");
tryItOut("/*for..in*/L:for(var __proto__ = prop.(([((undefined)(__count__))].__lookupSetter__(\"__iterator__\"))) /= 'haha'.split(({__iterator__: undefined, __proto__: <><x><y/></x></> }), (uneval(arguments))) in \n*::*) {/*for..in*/for(let prop =  /x/  in __iterator__) {gc()\texport prop; } }");
tryItOut("/*infloop*/for(let prop;  /x/ ; (function  __parent__ () { gc() } )((__parent__ = this))) let prop = __noSuchMethod__ = <><\tx><y/></x></>, __parent__ = 033.eval(false);");
tryItOut("L:do {if(<><x><y/></x></>) {return < :><x><y/></\tx><;throw null; } else  if ( \"\" ) <x/> } while((([new function (__proto__) { return <><x><y/></x></> } () for each (__parent__ in function(id) { return id }) if (*)])) && 0);");
tryItOut("while(([,]) && 0)yield;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("return;");
tryItOut("switch(new (void <><x><y/></x></>)()) { default: break;  }");
tryItOut("/*for..in*/for(var prop in ((undefined.valueOf(\"number\"))(this.__defineSetter__(\"function::__count__\", function  constructor () { yield <x><y/></x> } ).throw((<x><y/></x> ||  \"\" \f)))))var __noSuchMethod__ = (-0), __proto__ = -0");
tryItOut("with(__parent__ = */*\n*/)switch(<x><y/></x>) { case 9: new Function }");
tryItOut("/*infloop*/for(__parent__; __parent__.__defineSetter__(\"constructor\", (1 for (x in []))); <x><y/></x>.(false)) {break M;return; }");
tryItOut("M:if(<y><z/></y>) yield 033;");
tryItOut("if(@foo) { if (null) return;} else {;yield 3/0; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const  ''  in @foo) let __count__ = true, __proto__;return;");
tryItOut("L: {if(__count__) { if (<y><z/></y>) <><x><y/></x></>; else {gc()break L; }} }");
tryItOut("return (prop = __parent__.prototype = *);");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(const (__iterator__) in __iterator__) {yield <><x><y/></x></>;__iterator__, constructor; } }");
tryItOut("L:  for each (function::__count__ in eval(\"(-1)\", <y><z/></y>)) for each (prop in <x><y/></x>) for (__iterator__ in @foo) if (<x><y/></x>)");
tryItOut("with({}) { __count__ = __iterator__; } ");
tryItOut("M:if(eval(\"1e+81\", #3={a:#3#})) export function::__count__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].slice)(<><x><y/></x></>))){return; }");
tryItOut("/*infloop*/do {export __count__; } while(@foo);");
tryItOut("if(((export __count__)[(uneval((new function  __count__ (__iterator__, __noSuchMethod__) { (<><x><y/></x></>); } (<><x><y/></x></>))))])) {with({__noSuchMethod__: ({prop: *})}){return true;export setter; }\f(*); } else  if (__iterator__)  else constructor, prop;");
tryItOut("with((0x99(this)\n))<x/>;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = (*::*.eval(false)) in 3) {var prop; }");
tryItOut("@foo;");
tryItOut("L: {let (constructor = <x/>, __proto__) { throw constructor; } }");
tryItOut("/*infloop*/L:do {/*infloop*/for(prototype = [[1]]; <x><y/></x>; <x><y/></x>) {export *;<x><y/></x> }/*for..in*/for(let prototype in ((<><x><y/></x></>)(({constructor:  /x/g , constructor getter: function (__count__) { yield this }  }))))__iterator__; } while(( \"\" .isPrototypeOf(__proto__)) & null.throw((({constructor: [,,z1].__defineGetter__\t(\"__count__\", 'haha'.split),  get prototype() { return <x><y\f/></x> }  }))[ for each (constructor in null)[<x><y/></x>]]));");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = (<x><y/></x>)() in true) 3/0;;");
tryItOut("var __count__ = __count__;");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("gc()\narguments;\n");
tryItOut("1e-81;");
tryItOut("return;");
tryItOut("L:while((3/0) && 0){const prop;3; }");
tryItOut("return <y><z/></y>; const __proto__;");
tryItOut("L:if((uneval(this)) < (eval(\"undefined\", <x><y/></x>)).__count__) if(true.__iterator__ = prototype) { if (true\n) {export __noSuchMethod__; }} else if(window) {} else {gc() } else {var constructor = .2, __noSuchMethod__ = undefined;/*infloop*/do {{} } while((this.__defineGetter__(\"prop\", ({})))); }");
tryItOut("this;");
tryItOut("/*infloop*/for(var constructor; (p={}, (p.z = (function(y) { yield y; __parent__ = window;; yield y; }).call((new ((yield (function ([y]) { })()))((null.isPrototypeOf(033)))), window(<x/>)))()); (eval(\"__count__\", <x>\n<y/></x>))) {M:if(true) { if ([1]) ;} else {export __count__;var __count__, __proto__; } }");
tryItOut("with({__parent__: ({__parent__: this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice), __proto__:  ''  >= arguments })})/*for..in*/for(let constructor in new *::*) \fwhile((window.unwatch(\"__noSuchMethod__\")) && 0){let __iterator__ = <><x><y/></x></>;return; }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("let(({ __proto__: __proto__, constructor: ({ __iterator__: [, ({ __count__: ({ __parent__: __iterator__, __count__: prototype }) }), *] }) }) = ((new Function(\"var prop = prop;\"))).call(this.__defineGetter__(\"prop\", function(y) { yield y; throw <x/>;; yield y; }),  '' )) ((function(){constructor.__count__ = __parent__;})());");
tryItOut("return ((<x><y/></x>)()).isPrototypeOf(arguments && *);");
tryItOut("yield let prototype = [1,,], constructor = null; !=  \"\" ;");
tryItOut("/*for..in*/for(const [__count__, constructor] = ({}).__lookupGetter__(#1=[#1#]) in prop) return *::*;\n<y><z/></y>;\n");
tryItOut("switch( /x/ .__parent__ = 1e81) { constructor, prototype = *::* }");
tryItOut("if(('fafafa'.replace(/a/g, Math.pow).isPrototypeOf(<x/>) for each (__proto__ in window) if (0.1))) {let window; } else  if ((uneval([, , __noSuchMethod__, , prop] = null <<= <y><z/></y>))) {(#1#);var __iterator__, __proto__; }");
tryItOut("L:  export *\f;{return  '' ;/*infloop*/for(const __noSuchMethod__; __proto__ = false; this.__defineSetter__(\"__count__\", Function)) yield; }\t");
tryItOut("with({}) { prop = __count__; } ");
tryItOut("L:with((this.zzz.zzz)){/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>) {gc()yield window; }yield this; }");
tryItOut("{let ([1] = ([15,16,17,18].some((function(q) { return q; }).apply, [z1,,].__defineGetter__(\"__proto__\", *)))) { /*for..in*/for(let prop in  /x/ ) {yield; } } }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = __proto__ = constructor; __parent__\n; (prop = <><x><y/></x></>)) {undefined;__parent__, __noSuchMethod__ }");
tryItOut("with(<x/> >> <><x><y/></x></>){(<><x><y/></x></>); }");
tryItOut("with({}) { export *; } ");
tryItOut("if(__iterator__.__parent__) { if ( /x/g  * *) __proto__ = window, __iterator__; else {throw [[1]]; }}");
tryItOut("with({prop: (<x><y/></x>)(function::__parent__).__parent__ = [<y><z/></y>]})if(function::__parent__ = <x><y/></x>)  else /a/gi");
tryItOut("M:with(<><xxx>{__proto__}</xxx></>)<x/>;");
tryItOut("do {if(false) {return; } else  if (<x><y/></x>) ; else return;var __proto__ =  /x/ , __parent__; } while((<x><y/></x>.__lookupGetter__(\"prototype\")) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(let __count__ in  '' ) ");
tryItOut("L:if( ) { if (({/*\n*/__proto__:  \"\" })) if(<x><y/></x>) { if (<x/>) let __count__ = __proto__; else {;//h\n }}} else {gc() }");
tryItOut("if(__proto__ = constructor) __parent__ = <><x><y/></x></>, prop; else  if (\nthis) {yield; }");
tryItOut("/*for..in*/for(__parent__ = (-0) ?  ''  : <><x><y/></x></> in <x/>) {yield *::*; }");
tryItOut("/*infloop*/while( ''  && 5.0000000000000000000000)gc()");
tryItOut("/*infloop*/while(null)continue M;");
tryItOut("break M;");
tryItOut("/*for..in*/__noSuchMethod__");
tryItOut("/*infloop*/L:for(const ({ __count__: __iterator__, prototype: ({ __noSuchMethod__: ({ function::__iterator__: __iterator__ }), __proto__: [, prop, __proto__, prop, ] }) }) = prop.prototype = window.__count__ = __proto__ &= <>\t<x><y/></x></>; __count__ = <y><z/></y>\t for each (prop in [,,]) for (__iterator__ in this); {}[this]) {var __proto__, (-1) = __iterator__; }");
