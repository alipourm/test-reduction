tryItOut("/*infloop*/L:for(<><{getter}> </{getter}></>.__lookupGetter__(\"__iterator__\"); ([[,,]]); ({<x/> <=  /x/g  })) /*for..in*/M:for(__count__ = ({\t__count__: <><x><y/></x></>}) in 1e-81) var constructor =  '' , constructor;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (eval(\";\", this)) in (({__proto__ getter: function (__noSuchMethod__) { return; } ,  get prototype constructor (__parent__)(-0) }))) /*infloop*/for(const __iterator__; 3.unwatch(\"prototype\"); <x/>.__lookupSetter__(\"__proto__\")) {(<><x><y/></x></>);{} }");
tryItOut("break ; const prototype;");
tryItOut("/*infloop*/while((Math.sin).call(((*::*)[<><x><y/></x></>]), ))prototype = window;");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", (0).__defineSetter__)) {export *; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  /x/g ) {<><x><y/></x></>; } }");
tryItOut("/*infloop*/L:for(var __count__ = -1; <y><z/></y>; null) {let __parent__, __iterator__ = *;yield; }");
tryItOut("<!--yy-->");
tryItOut("export __noSuchMethod__;\nundefined\nyield;\n");
tryItOut("L:while(((__count__.__proto__ = (<><x><y/></x></>.eval(undefined)).throw( = (~'fafafa'.replace(/a/g, (new Function(\"yield undefined;\"))))))) && 0){/*for..in*/:for((<><x><y/></x></>)((-0)) in __parent__) {{;export prop; } }var __iterator__ =  \"\" , constructor = <x/>; }");
tryItOut(";");
tryItOut("constructor = .2, __proto__ = true;");
tryItOut("/*for..in*/for(__iterator__ = ((__iterator__ = RegExp(<x><y/></x>)) :: \tprop = <x><y/></x>) in *.__iterator__) return;");
tryItOut("L: {(false);* }");
tryItOut("return Number(new (gc)(<><x><y/></x></>));");
tryItOut("M:if((__proto__.prototype)) ;");
tryItOut("let (prop = (.__parent__)) { ; }");
tryItOut("{/*infloop*/for(0x99; __noSuchMethod__.constructor setter= function (__parent__) { yield null } ; ({prototype setter: function () { return <x><y/></x> } , __parent__:  /x/  })) {if(typeof __parent__) throw this; else  if (new String()) {yield;yield __parent__; } }yield  /x/g ; }");
tryItOut("yield <x><y/></x>");
tryItOut("/*for..in*/M:for(var eval(\"export __proto__;\", 0x99).__noSuchMethod__ in constructor = .2) export *;");
tryItOut("/*infloop*/do let (constructor = this, <x><y/></x> = (-0)) { break ; } while((#1=[(#1=[({getter getter: Math.sin, prop: #1# })])]));");
tryItOut("if(undefined) try { break L; } finally { return *; }  else export *;");
tryItOut("{('fafafa'.replace(/a/g, this));with(*)export constructor; }");
tryItOut("if(('fafafa'.replace(/a/g, ((new Function(\"let __parent__ = <x><y/></x>;\"))).call))) <x><y/></x>; else  if (<><xxx {prototype}={[z1]} /></>) return;");
tryItOut("{if(this.__defineGetter__(\"constructor\", (false).watch)) { if (window) {<><x><y/></x></>; }} else {export __count__;[1,2,3,4].map } }");
tryItOut("M:do __parent__; while((\n[,]) && 0);");
tryItOut("/*for..in*/M:for(const [__proto__, __parent__] = Error(new window([])[(String( /x/ , <x/>))], yield this).__lookupSetter__(\"__noSuchMethod__\") in (yield prototype = <x><y/></x>)) {yield; }\n");
tryItOut("if('fafafa'.replace(/a/g, gc).__lookupSetter__(\"prop\")) break ;");
tryItOut("let(__iterator__ = (const __proto__, __iterator__; for (__count__ in  /x/g ) || (({a1:1})).call(1e-81, 5.0000000000000000000000, 3.141592653589793)), \f({ constructor: prop, __noSuchMethod__: ({ __iterator__: prototype }) }) = (.*)) ((function(){try { prototype = undefined, __proto__ = this; } catch(__parent__) { yield prototype = this; } finally { let(__noSuchMethod__ = <x><y/></x>) { return window; } })());");
tryItOut("if((<x/>)) { if (*) continue \nbreak ; else {return; }}");
tryItOut("M:while((true) && 0){__count__, __count__ = <y><z/></y>; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((new this.zzz.zzz())) ; else  if ((<x><y/></x> > <x/>) |= __proto__.eval(3)) {return 1e+81;/*infloop*/M:for(__count__|=<x><y/></*\n*//x>; function(id) { return id }.prototype = constructor; *::* === this) {gc()export prop; } }");
tryItOut("for(let y in []);");
tryItOut("if( \n) continue ; else  if (1e+81) { }");
tryItOut("/*infloop*/while(\n(window))var prototype, __parent__ = <y><z/></y>;");
tryItOut("/*infloop*/for(const __count__; (<bbb xmlns:ccc=\"( \"\"  / 3) %= true\"><ccc:eee></ccc:eee></bbb>.(!<><x><y/></x></>)); new Error(window)) /*infloop*/do {throw __proto__; } while(*::*);");
tryItOut("gc()\n/*infloop*/while(prototype = constructor %= [15,16,17,18].map(Math.pow, 0x99)){M:if(__noSuchMethod__.__noSuchMethod__ = <x><y/></x> .@x:: window.propertyIsEnumerable(\"__parent__\")) { if (get|=new (*::* in @foo)(let __iterator__ =  \"\" , prototype)) {const __parent__ = prop; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in window) export __iterator__;let __count__ = window, __iterator__; }} }");
tryItOut("while((([1,2,3,4].slice).call(new /a/gi(), )) && 0){(this);{} }");
tryItOut("if(void  '' \n) {(__parent__.constructor getter= __iterator__);{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(( /x/ .hasOwnProperty(\"__proto__\"))(@foo.__parent__ = <><x><y/></x></> === *) in (prop + <><x><y/></x></>)) prop = try { return; } catch(prop if 1.3) { yield  \"\" ; } , [__iterator__, , ] = new Boolean(window);");
tryItOut("default: if((yield <><zzz>#3={a:#3#}</zzz></>)) { if (__parent__ = -0) {const prototype;\tfalse\r; } else /*infloop*/M:do {M:if(<x><y/></x>) [1,2,3,4].map else {return;__count__ = __noSuchMethod__, __count__ = <><x><y/></x></>; } } while({}.propertyIsEnumerable(\"__parent__\"));}case (eval(\"/*infloop*/M:for(var function::prop; <y><z/></y> >>>=<><x><y/></x></>; prototype.__proto__) {/*infloop*/for(<x><y/></x>; *::*; 5.0000000000000000000000)  }\", (({ __parent__: [] }) = (this)[ '' ]((gc()), prop)))): export __proto__;case  /x/ : ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in false) return ({a1:1});");
tryItOut("/*infloop*/for(let __proto__ = ({__parent__: (<x/> & 1.3) .@*:: prototype = @foo, __iterator__ getter: gc }); ( \"\" .throw(yield ({ get constructor(__count__) { return (constructor = this) } , __noSuchMethod__: <x><y/></x>.__count__ }) ^= __noSuchMethod__ = <x><y/></x>)); (function(y) { yield y; {}; yield y; })(<><x><y/></x></>.prototype =  \"\" , .2)) /*infloop*/M:for(<><xxx {__count__ setter: ((p={}, (p.z = __iterator__)()))}={3.141592653589793} /></>; <><x><y/></x></>.@foo; gc() += <x/>.throw(__count__ = __parent__)) {continue M; }");
tryItOut("return\n");
tryItOut("/*infloop*/while(((__proto__)[this] ^= (window).call(<xxx {default: return;}={@foo} />, ))){return }");
tryItOut("{with({}) throw __count__;export *;\nreturn undefined;\n }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/for(<><x><y/></x></>.@foo; ((uneval(__proto__))); <y><z/></y> for (constructor in null)) /*infloop*/L:while( \"\" ){export *; }");
tryItOut("/*infloop*/while((uneval(<x><y/></x>.constructor\t = 0.1))++)/a/gi");
tryItOut("return <x><y/></x>;");
tryItOut("M:if(({__iterator__: <><x><y/></x></>})) { if ((eval(\"{}\", <x><y/></x>.unwatch(\"constructor\")))) \f{__noSuchMethod__, __parent__ = <><x><y/></x></>;{} } else {gc() }}");
tryItOut("/*infloop*/M\r:do {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <x><y/></x>) {(<y><z/></y>);yield; }gc() } while(__noSuchMethod__ = *::*.__lookupSetter__(\"prop\"))");
tryItOut("return <xxx>{__count__}</xxx>;");
tryItOut("with({({ __parent__: __count__, __noSuchMethod__: [({ constructor: [, __proto__, __count__, [, ({ __noSuchMethod__: [], __parent__: ({ prototype: prop }) }), ({ __parent__: __noSuchMethod__, __iterator__: __count__ }), , __count__]] }), ] }): this})export *;");
tryItOut("/*for..in*/M:for([__iterator__, __count__] = ().valueOf(\"number\") in this.__defineGetter__(\"prototype\", (<x><y/></x>).__defineSetter__)) ;");
tryItOut("if(*) {var constructor = <x/>;(<y><z/></y>); }\r else  if (null) export __proto__; else {Function }");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("switch(<x><y/></x>) { case 1: export __proto__;break;  }");
tryItOut("let (__count__ = function::prop = null) { /*infloop*/L:do if((({prop: true}))) { if (window)  else {throw window; }} while(this.__defineSetter__(\"__proto__\", [1,2,3,4].slice) in ([15,16,17,18].filter([1,2,3,4].map, 0/0))); }");
tryItOut("/*for..in*/for(let __iterator__ = {} in prop) {{} } const __count__;");
tryItOut("/*infloop*/for(var prototype = (__proto__ = [z1,,]\n); get.__parent__ setter= function ()__proto__; new (*::*)(<y><z/></y>, 3)) {continue L;switch(undefined) { default: break; case false: break; let prototype, prop =  \"\" ;break;  } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:for(const function::__count__ = __proto__.__iterator__; __count__: <><x><y/></x></>.unwatch(\"prop\"); window) export __proto__;");
tryItOut("/*for..in*/M:for(__proto__ in ((({}).__lookupGetter__)(<y><z/></y>)))gc()");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in ) let __iterator__ = (this.__defineSetter__(\"prop\", gc)), __parent__ = window;");
tryItOut("/*infloop*/for(__iterator__; window; (function(y) { yield y; ;; yield y; }((eval(\"prop\", null))(), <{__iterator__}></{__iterator__}>))) {with({constructor: @foo *= #3={a:#3#}})export *; }");
tryItOut("const __iterator__;/*for..in*/for(const __parent__ = (RegExp()) in <y><z/></y>) {<><x><y/></x></>;; }");
tryItOut("let(__parent__ = <><zzz>[1,,]</zzz></>) ((function(){for(let y in [5,6,7,8]) return;})());");
tryItOut("constructor, setter;");
tryItOut("return new String();");
tryItOut("/*for..in*/for(__count__ in <y><z/></y>) <y><z/></y>;");
tryItOut("/*for..in*/for([prototype, constructor] = ({}) in this) Function");
tryItOut("L:with(((p={}, (p.z = __noSuchMethod__ = *::* .@*:: ++constructor)()))()){{{}while((default: case 4: break; break; ) && 0) /x/g  } }");
tryItOut("this.zzz.zzz;");
tryItOut("return prop = function(id) { return id };");
tryItOut("while(((prop)) && 0)<><ccc:ddd>(prop)</ccc:ddd></>");
tryItOut("L:if('haha'.split) throw  '' ; else  if (((false)[[,,z1]])) {throw <x><y/></x>;yield <>\t<x><y/></x></>; } else export *;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(var ((p={}, (p.z = y></x>)())) = ([] = (<><x><y/></x></>)(*::*, function::__noSuchMethod__) :: __count__) in this) (033);");
tryItOut("/*infloop*/L:for(let ({ prop: this }) = (.throw((p={}, (p.z = <>(<x>)<y/><</>)()))); ((window |= <x><y/></x> >= __noSuchMethod__-=*::*).yoyo(*::* >>= @foo ? __noSuchMethod__.__proto__ = * : (#1=({__iterator__: __parent__})))); (new (null)(#3={a:#3#}, <x><y/></x>))) (<y><z/></y>);\nthrow prop;\n");
tryItOut("with({}) { L:while((({a1:1})) && 0)let __proto__, prop = __count__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in *) ");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("5.0000000000000000000000\n");
tryItOut("0.1;\n;\n");
tryItOut("let (__iterator__, ({ prop: ({ __parent__: ({ prop: [__iterator__] }) }), __count__: prop })) { if([[,]].some(true)) {let __noSuchMethod__;export constructor; } else  if (__iterator__ = 1.2e3\n) {gc()/*for..in*/for(const [__parent__, __count__] = false in false) throw undefined; } else /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x><y/></x>) \tnew Function }");
tryItOut("throw <><x><y/></x><///h\n>;return;");
tryItOut("/*infloop*/do __proto__ while((([[]] * [[]]).__count__)); const __iterator__;");
tryItOut("/*infloop*/M:for( /x/ ; (1e-81 = get); new null(this,  /x/g )) {}");
tryItOut("");
tryItOut("if(<y><z/></y>) yield; else  if (0x99)  else {yield 4.;{} }");
tryItOut("var __iterator__");
tryItOut("throw <x/>;");
tryItOut("with(this.__defineSetter__(\"[__count__, get, prototype, ]\", ({}).hasOwnProperty).watch(\"__count__\", new Function)){*; }\n__iterator__ = window;");
tryItOut("export constructor;");
tryItOut("let (prop = <><x><y/></x></>.@*) { throw {}; }");
tryItOut("if(this) yield <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in <><x><y/></x></>) {(<x><y/></x>); }");
tryItOut("do const __count__ =  /x/g , constructor = -3/0; while((prototype) && 0);");
tryItOut("");
tryItOut("/*for..in*/for(const constructor in ((((function  __iterator__ () { return (@foo.(\t__parent__)) } ).call).call)(<y><z/></y>.constructor)))prop.function::prototype getter= function  prop () { yield window } , __count__.__noSuchMethod__ getter= (*).__defineSetter__");
tryItOut("{return;/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 1e81) yield <x/>; }");
tryItOut("[1,2,3,4].slice\nM:while((<><x><y/></x></> >>>=@foo) && 0)(<y><z/></y>);\n");
tryItOut("return;\nyield (function ([y]) { })();\n");
tryItOut("return undefined .@ <x><y/></x>;");
tryItOut("yield ({ __noSuchMethod__: prop(Error(0x99, @foo)) }) = ({prop: __proto__})--;");
tryItOut("with({}) { let(prop = null, prop = <x><y/></x>) { *; } ");
tryItOut("/*infloop*/M:do {export *;constructor = __iterator__; } while([11,12,13,14].filter);");
tryItOut("/*for..in*/for(var __count__ = 0.1.eval(<x><y/></x>) in <xxx {__parent__}={prop = -0} />.((@foo.__defineGetter__(\"__iterator__\", *)))) {let __iterator__ = <><x><y/></x></>;const __iterator__ = *, constructor;\n\n }");
tryItOut("if(<//h\n><x><y/></x></>) { if (0.1) {export *; }} else {break\f ;return; }if((function ([y]) { })()) const __iterator__; else  if (((uneval(__noSuchMethod__)))) {export *;export *; }");
tryItOut("export constructor;");
tryItOut("/*infloop*/M:for(({ __proto__: __parent__ }) = __noSuchMethod__.(((uneval(@foo)))); __iterator__ = [,] @ @foo.eval( '' ); new (Function)((<x><y/></x>.(@foo)))) {continue ; }/*infloop*/for(<><x><y/></x></>; <y><z/></y>;  '' ) gc()");
tryItOut("let(__parent__, __iterator__) ((function(){export *;})())");
tryItOut("while(((eval(\"const __proto__, prototype\\n\", #1=[#1#])).__defineSetter__(\"__iterator__\", (<y><z/></y>).__defineSetter__)) && 0)gc()");
tryItOut("{var __count__, prototype = <x><y/></x>; }");
tryItOut("yield (__parent__ = ({a2:z2}));with(window)export prop");
tryItOut("(<><x><y/></x></>)\n\ngc() const __iterator__;");
tryItOut("var <x><y/></x>;");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in -3/0) export __proto__;__noSuchMethod__ = <x><y/></x>; } while((prototype, prototype.valueOf(\"number\").yoyo((([11,12,13,14].sort)('fafafa'.replace(/a/g, function (__parent__, __parent__) { yield <x><y/></x> } ), prop = __noSuchMethod__)))));");
tryItOut("/*for..in*/for(let getter = <zzz><x><y/></x></zzz> in window) {<{__parent__}>yyy</{__parent__}> }\n<x><y/></x>\n( '' );");
tryItOut("{while((__noSuchMethod__) && 0){const __count__;; }/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in *) (<y><z/></y>).__defineSetter__ }");
tryItOut("let ([, __parent__, __noSuchMethod__]) { {return 1e+81;let __noSuchMethod__ =  '' , __count__; }\nfalse;\n }");
tryItOut("prototype.(let (__proto__) eval(\"<x><y/></x>;\", <y><z/></y>))");
tryItOut(";\nif(-3/0) {{}__parent__ = this; }\n");
tryItOut("let (({ __proto__: ({ __parent__: ({ __parent__: __parent__, __proto__: __count__ })\t, __count__: ({ __count__: prop }) }) }), prop = 'fafafa'.replace(/a/g, ({}).hasOwnProperty)) { return; }");
tryItOut("let (__count__, __count__ = __proto__.constructor = (5.0000000000000000000000.yoyo(default: export *;return;case this: continue ;return <><x><y/></x></>;case 3: yield [z1];case 7: throw undefined;)).watch(\"prototype\", 1e-81 | <y><z/></y>)) { const [, __proto__] = 4. % <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var ({ prototype: __noSuchMethod__ }) = @foo.yoyo(*::*); (__noSuchMethod__ = constructor); ()) {return; }");
tryItOut("/*\n*/while(((eval(\"((__count__()).watch(\\\"__noSuchMethod__\\\", new Function))\", (@foo.unwatch(\"prototype\"))))) && 0)constructor");
tryItOut("L: {return constructor;yield; }const __proto__ =  \"\" ;");
tryItOut("do { ''  != *::*; } while((undefined) && 0);");
tryItOut("if(('fafafa'.replace(/a/g, Math.sin)) &= * += <y><z/></y>) if( \"\" ) {throw window;return; } else  if (-0) {return @foo; } else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) const __iterator__, __parent__ = [];");
tryItOut("prototype = __iterator__;");
tryItOut("if(<x><y/></x>/*\n*/ >>= __count__) { }");
tryItOut("M:switch(<y><z/></y>) { default: break; {export prop;__noSuchMethod__, __iterator__;\n<x/>\n }case 4: case 1: __iterator__ = false;case __count__ = __proto__.__parent__ = (undefined >>> <><x><y/></x></>).throw((prop = <x><y/></x>)): export prototype\nbreak (this.__defineSetter__(\"__proto__\", Math.pow).watch(\"prototype\", (new Function(\"let let __iterator__, prop = {};, prototype;\")))), *::* *= this M;case (yield [z1,,].eval( \"\" )): {}break; break; case 3: {throw <><x><y/></x></>; }break;  }");
tryItOut("throw constructor;");
tryItOut("L:switch(undefined && (1 for (x in []))) { case 3: [1,2,3,4].slicecase *::* %= <x><y/></x> / true\n /= -1: var __proto__ = prop; const @foo;\n }");
tryItOut("/*infloop*/while(<><x><y/></x></>)continue M\n");
tryItOut("/*infloop*/do yield undefined; while(-1);");
tryItOut("if((__noSuchMethod__.(-1).__lookupSetter__(\"__parent__\"))) return; else var __count__, __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype(#1=[#1#].__parent__ = __proto__ <= (uneval(0))) in ({__parent__ setter: gc, prototype: <x/> }).watch(\"__noSuchMethod__\", function  prop (__proto__, __iterator__)-3/0)) export *;");
tryItOut(";");
tryItOut("/*for..in*/for(const [prop, prototype]\t =  /x/  in \t<x><y/></x>) {var prototype =  /x/g ;(-0); }");
tryItOut("export __iterator__;");
tryItOut("{{} }");
tryItOut("let (prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each(let set in (-0)) let [,,]; }");
tryItOut("/*infloop*/do /*infloop*/M:while(undefined){return <x><y/></x>;gc() } while(@foo);");
tryItOut("throw this;");
tryItOut("/*infloop*/M:for(__count__; <><x><y/></x></>; 4.) export *;\nfunction::__iterator__ = __iterator__, __proto__;\n");
tryItOut("let (prototype = undefined, __noSuchMethod__) {  }");
tryItOut("if(#3={a:#3#}) yield  '' ;");
tryItOut("{yield ; }");
tryItOut("if((033)(*::*) ? yield ({}) : (p={}, (p.z = <><x><y/></x></>)()))  else  if (new (new Function(\";\"))()) const __iterator__ = window, __noSuchMethod__; else {__count__; }");
tryItOut("/*infloop*/M:for(eval(\"const __iterator__ = @foo, __count__;\", this.__defineSetter__(\"constructor\", \n[z1,,], <x><y/></x>\n)); (@foo)[this.__defineSetter__(\"function::__iterator__\", ( '' )[ \"\" ])]; #0=({constructor: (<x><y/></x>.unwatch(\"__iterator__\"))})) \f{Functionreturn 3; }");
tryItOut("/*for..in*/for(({ __iterator__: ({ yield: ({ __iterator__: ({ [1,2,3,4].slice: __parent__ }) }) }), prototype: [] }) in (<><x><y/></x></> | <y><z/></y> if ( /x/ ))) {throw <x><y/></x>;if(((uneval([11,12,13,14].filter)))) { if (<x><y/></x>.*) {let __count__; }} else gc() }");
tryItOut("return prototype;");
tryItOut("continue L\nwith(#1=[#1#].__lookupSetter__(\"__noSuchMethod__\"))throw <y><z/></y>;");
tryItOut("return (__noSuchMethod__-- for each (({ constructor: __iterator__ }) in null) for each (__parent__ in <x/>) if (<><x><y/></x></>));");
tryItOut("L: {}");
tryItOut("L: {{return <x><y/></x(/>; }(this); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M\f: for  each(const prop in (prop = constructor instanceof this .@ window)) {w/*infloop*/\fdo { } while((<><x><y/></x></>)()); }");
tryItOut("if(({__iterator__: #0=({prototype: false}), __count__: 0/0.__lookupGetter__(\"constructor\") })) { if (prop = __noSuchMethod__) (null); else {{} }}");
tryItOut("L:switch(prototype = [1.2e3].some((1 for (x in []))).__lookupSetter__(\"__parent__\")) { default:  }");
tryItOut("if(__parent__) {return prototype; } else {{} }");
tryItOut("/*infloop*/for(-(constructor >>>=<><y/></x>); 5.0000000000000000000000; true\f) {/*infloop*/M:for([] = <><x><y/><\t/x></>; [__parent__]; 0.1) var prototype; }");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] = (constructor.prop getter= function  __proto__ (prototype, each) { (0.1); } ) >>> prop =  /x/g  ? <><x><y/></x></> : null in this.__defineSetter__(\"__iterator__\", ('haha'.split).call)) /*infloop*/while(__noSuchMethod__){return; }");
tryItOut("/*infloop*/for(var __count__ =  '' ; 1e-81; false) {const __iterator__, __noSuchMethod__; }");
tryItOut("M:if((eval(\"prop\", ({__parent__: *::*, prop: (Array(__parent__, <x/>)) })))) { if ((({a1:1}).isPrototypeOf(<x><y/></x>))) {{}{} } else {return <><x><y/></x></>;gc() }}");
tryItOut("M:if(*) yield  /x/ ; else {var __noSuchMethod__; }\n");
tryItOut("switch((p={}, (p.z = function(id) { return id }\n)())) { case 3: M:if(\n*::*) { if (({__count__: this })) {}} else [[]];case 7: let(constructor) { prototype =  \"\" , constructor = [z1];break; break; let __iterator__ = true;case <x/>: {if(arguments) { if (<y><z/></y>) {{} }} else var __noSuchMethod__ = <><x><y/></x></>;return 1e-81; }break; with(*::*){yield function ([y]) { };yield; }*::*, <x/>break; break;  }");
tryItOut("/*infloop*/for(let __count__; constructor; prop) gc()");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in  '' ) const constructor = <x/>, __noSuchMethod__ = <y><z/></y>;");
tryItOut("/*infloop*/for(constructor; this.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>); ((<><x><y/></x></>).watch)) {break L; }");
tryItOut("/*infloop*/M:for(__parent__; (prototype.prototype getter= (new Function(\"Function\"))); Date(@foo).isPrototypeOf((__count__.eval(*::*)))) {let (__parent__ = <x/>) { /*infloop*/for( \"\" ; 1e-81; this) gc() } }");
tryItOut("/*for..in*/for(var function::constructor in ((function () { yield this } )(eval(\"new ((new Function(\\\"( '' [<y><z/></y>]), @foo\\\")))()\", (undefined).watch)))){yield;return <y><z/></y>; }");
tryItOut("/*for..in*/for(var constructor in ((__noSuchMethod__)( instanceof ))){yield <><x><y/></x></>; }return 3\n");
tryItOut("M:if(( /x/g .watch(\"__noSuchMethod__\", gc).__lookupSetter__(\"__noSuchMethod__\"))) return; else yield\n");
tryItOut("let (__iterator__ = 5.0000000000000000000000) { throw [,]; }");
tryItOut("/*infloop*/for(__count__.prototype = *::* ? 4. : null.isPrototypeOf((<x><y/></x> >>=  \"\" )); __count__.__count__; null) yield undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in ({__count__:  for (*::* | <><x><y/></x></> in <x/>)})) break ;");
tryItOut("return 5.0000000000000000000000;");
tryItOut("return;");
tryItOut("/*for..in*/for(var prototype = undefined.__lookupGetter__(\"__noSuchMethod__\") in __iterator__) ");
tryItOut("/*for..in*/for(prop = ({}) in (1.3.@*).__defineGetter__(\"prop\", (*).watch)) yield false;");
tryItOut("/*for..in*/for(__proto__.prop in (((new Function(\"[,,];\")))(yield --prop)))let __proto__;");
tryItOut("with({}) let constructor = <x/>;");
tryItOut("L: {let constructor;return <y><z/></y>; }");
tryItOut("/*for..in*/for(const __iterator__ = (__proto__.__iterator__ = undefined) ?  ''  >= <><x>< { return <><x><y/></x></> for (__noSuchMethod__ in -1) } y/></x>false.__lookupGetter__(\"prop\") </> : false in this) {Function\nreturn <><x><y/></x></>; }");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(let [prototype, __noSuchMethod__] = __noSuchMethod__.@foo == <x><y/></x>.watch(\"constructor\", Math.pow).propertyIsEnumerable(\"prototype\") in ((p={}, (p.z = prop)()).__iterator__)) <y><z/></y>;");
tryItOut("L: __proto__: (<x><y/></x> :: <><x><y/></x></>)(<y><z/></y>, *::*)");
tryItOut("/*infloop*/do {export prototype; } while(<><x><y/></x></> >>> [[1]] !=  /x/ );");
tryItOut("if(prototype.prototype getter= function  __iterator__ () { yield <y><z/></y> } [(<y><z/></y>.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>))]) { if (prop.constructor.hasOwnProperty(\"__count__\")) {throw <x><y/></x>; }} else gc()");
tryItOut("if((new (-1) & <x/>())) { if (__noSuchMethod__ = (3.yoyo(eval(\"[[1]]\",  '' ))).unwatch(\"__proto__\")) {/*for..in*/for(__noSuchMethod__ in  '' ) <x/>;(<><x><y/></x></>); } else {; }}");
tryItOut("if(__noSuchMethod__ = <y><z/></y>.eval((<x><y/></x> %= <><x><y/></x></>))) if(<x><y/></x>) { if (3) {export *; } else {return <x><y/></x>;new Function }} else  if \t(prototype) \n");
tryItOut("with(prototype-= /x/g ){throw <x/>; }");
tryItOut("if(([z1].throw(*))) { if (__parent__ = 1e+81) export *;} else {var prop, __iterator__ = __parent__; }");
tryItOut("with(()){}");
