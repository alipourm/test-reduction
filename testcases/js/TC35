
tryItOut("L:do {/*for..in*/for(var prop in ((function(q) { return q; })(this))){yield this;throw __proto__; } } while(((continue L)) && 0);");
tryItOut("if((({__count__: this.__defineGetter__(\"delete\", function (x::prototype, prop) { yield <x><y/></x> } )}))) { if (this >> 1e81) if(__parent__) ; else  if ( /x/ ) {;return __parent__; }} else {L: {yield;(<x/>); } }");
tryItOut("/*infloop*/while(((1 for (x in [])))(({ __parent__: __parent__, __iterator__: __noSuchMethod__ }) = [prop, prototype, , , ].watch(\"prop\", (new Function(\";\")))))with({}) { (1e+81); } ");
tryItOut("(constructor).__defineSetter__");
tryItOut("do {yield\ngc() } while((Math.sin) && 0);");
tryItOut("(this);");
tryItOut("if(( '' .eval(@foo))) (<><x><y/></x></>); else  if (<x/>.yoyo((function ([y]) { })())) var constructor = false, constructor;/*infloop*/for(this; window; [1]) (false);");
tryItOut("/*for..in*/M:for([constructor, __noSuchMethod__] = ((-1) ,  '' ) in window) __iterator__ = <y><z/></y>, __proto__;");
tryItOut("with({__parent__: __count__.constructor setter= (prop = 0/0).call})/*infloop*/M:for(const __proto__;  /x/g ; [,]) { \"\" ; }");
tryItOut("let (prop, prop(<x><y/></x>)) { {export __parent__;this; } }");
tryItOut(" \"\" \n");
tryItOut("L:if(__parent__++) \t{export __parent__; }");
tryItOut("if((yield (this.@*))) throw true != <x><y/></x>; else  if ((@foo.__iterator__)) {/*for..in*/for(var [__proto__, get] = (1.2e3 ? <y><z/></y> : window) in <><x><y/></x></>) export *;let __noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for([__parent__, __noSuchMethod__] = (({default: (*::*);break;  })) in (Math.sin)(<><x><y/></x></>[__proto__]\t)) {/*infloop*/for(var __parent__; <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", function (__parent__, prop) { yield <><x><y/></x></> } ); <x><y/></x>.*) {let __count__ = false, prototype;yield; } }");
tryItOut("<>(typeof try { var __iterator__; } catch(__iterator__) { return; } finally { ( \"\" ); } .eval(eval(\"throw 4.;\", <y><z/></y>)))</>");
tryItOut("/*infloop*/M:while(<><x><y/></x></>--.__proto__){while((__proto__) && 0)let __proto__;export __parent__; }");
tryItOut("break ;");
tryItOut("{/*infloop*/M:for(__noSuchMethod__;  /x/ ; {}) throw  /x/ ; }");
tryItOut("if(window) { } else  if (<y><z/></y>) {continue M; }");
tryItOut("/*infloop*/M:for(const __count__; -0.__count__.watch(\"__noSuchMethod__\", /a/gi); (__noSuchMethod__ = @foo)) (*::*);");
tryItOut("/*infloop*/while(<y><z/></y>.throw( /x/ )\t){gc() }");
tryItOut("{{}export prototype; }");
tryItOut("if(this.zzz.zzz) { if (<y><z/></y> :: true) gc() else {({}).hasOwnProperty/*infloop*/for(var __count__;  \"\" ; #1#) {gc()return; } }}");
tryItOut("/*for..in*/for(var prototype in (((new Function).call)((new RegExp(window, <><x><y/>\f</x></>))))){break ;{} }");
tryItOut("if(__parent__ = @foo) {return; } else  if ((eval)(<y><z/></y>, <x/>) === ( \"\" )( \"\" )) yield; else gc()");
tryItOut("/*for..in*/L:for(var constructor: [@foo] >>>=<><x><y/></x></> in ((gc)(<><x><y/></x></> %= {})))/*for..in*/M:for(var [__count__, __count__] = -0 in this) {yield <x><y/></x>;{} }");
tryItOut("__proto__, prototype = -0; const \tfunction::constructor;");
tryItOut("/*infloop*/while(){export *;function(q) { return q; } }");
tryItOut("gc()\n");
tryItOut("do with({}) { const __proto__ = *; }  while((* & window += eval(\"M:if(*) {export *;return; } else \\t(1.2e3);\", __iterator__, function::__parent__ = __iterator__ = <y><z/></y>)) && 0);");
tryItOut("if( /x/ ) {} else  if ((getter)[prototype]) {export prop; }");
tryItOut("__iterator__ = __parent__;");
tryItOut("/*for..in*/for(const (prop) in ((*::*)( /x/ ))){return 5.0000000000000000000000;let __proto__, Math.sin; }");
tryItOut("/*infloop*/for(const __count__; Number(__proto__, <x><y/></x>); <x><y/></x>\n + undefined) {(new Function).applyreturn; }");
tryItOut("");
tryItOut("throw prop;");
tryItOut("constructor/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in [, [__parent__, prototype, __proto__], ({ prototype: delete }), ({ prop: __iterator__ }), ] = this.__defineSetter__(\"prop\", <y><z/></y>)) {const __noSuchMethod__, __iterator__ = window;M:switch((p={}, (p.z = __count__ = false)())) { case  /x/g \n: break; case (<x><y/></x>.__defineGetter__(\"prop\", ({}).hasOwnProperty)): L: {{} }break;  } }");
tryItOut("yield ((({}).hasOwnProperty).call);");
tryItOut("return <x><y/></x>;export prop;");
tryItOut("/*infloop*/do return; while(null);");
tryItOut("let (__noSuchMethod__ = (eval(\"undefined\", <x><y/></x>)), __noSuchMethod__ = (@foo.@*--)) { <><x><y/></x></>; }");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/for(const __noSuchMethod__; (this = __parent__ ? this.zzz.zzz : 1e81); new {}) \t/*infloop*/for(var __count__; [1]; (-0)) ;if(window >  /x/ ) { if (([033])) let constructor, __proto__; else ((-0));}");
tryItOut("*::*\n");
tryItOut("/*for..in*/for(const [each.__count__, prototype] = (<x/>.yoyo(( ''  *= <x><y/></x>))) in ((<><x><y/></x></>)(__iterator__))) {{let __noSuchMethod__; }export * }");
tryItOut("try { for(let y in [5,6,7,8])  /x/g ; } finally { let(prop, constructor = *) ((function(){;})()); } ");
tryItOut("if(true) <y><z/></y> else  if (window || <y><z/></y>) {__iterator__, constructor; } else {}");
tryItOut(" { break L; } ;");
tryItOut("M:if((__parent__.__noSuchMethod__ = ({ case (new 0(window, null)).__parent__: case __parent__.__iterator__ setter= 0/0: return;case window.propertyIsEnumerable(\"constructor\") >>> (<><x><y/></x></>)(<><x><y/></x></>, <><x><y/></x></>): default: break; case 9: : __proto__, prototype: function(id) { return id } }) = ((\n{__iterator__: function::__count__.__count__})))) { if ([1,2,3,4].map()) {switch(constructor =  /x/ ) { default: <><x><y/></x></>;break;  }__parent__; }} else Exception()\n");
tryItOut("/*infloop*/while(null)yield;");
tryItOut("switch(<zzz><><>[]</></></zzz>) { default: break; return; }");
tryItOut("/*infloop*/for(const __parent__; ({__count__ setter: function (__proto__)prototype }).__proto__ = constructor = <><x><y/></x></>; __proto__ = <y><z/></y>) throw <x><y/></x>.(<><x><y/></x></>);");
tryItOut("M:if(__iterator__ = __parent__) return (-0); else {continue L;(*).watch }");
tryItOut("with({__count__: \r<x><y/></x>})<><x><y/></x></>;\n{}\n");
tryItOut("with(((yield <x/>))--);");
tryItOut("with({}) /*for..in*/for(const x::prop in ((window)(<><x><y/></x></>))){yield;__noSuchMethod__; }");
tryItOut("/*infloop*/for(var prototype; window; true) {yield;yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in ([new *() for ({}.__parent__ in <x><y/></x>) for (prototype in  /x/g )]).(__noSuchMethod__ ^= new ((.2).__defineSetter__) @foo[true]((\fthis.\t__defineSetter__(\"prop\", (1 for (x in [])))), <><x><y/></x></>))) /*infloop*/for(__iterator__.(<x><y/></x>); (this) || this;  \"\" ) {(<x><y/></x>);window; }");
tryItOut("/*for..in*/for(const prop in window) ;");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [, ] in prototype(<x>\r<y/></x>, <y><z/></y>)--) {throw (<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")); }");
tryItOut("with(eval(\"return null;\",  \"\" ))/*infloop*/while(*::*){{var __proto__, __proto__ = <><x><y/></x></>;; }{} }");
tryItOut("/*infloop*/M:while((gc)(*::*))");
tryItOut("{M:if(0) { if (<><x><y/></x></>) {let __iterator__ = <><x><y/></x></>; } else }(<y><z/></y>)\n } const __proto__;");
tryItOut("do {M:if((function ([y]) { })()) export __count__; else  if (<x/>) {return <x><y/></x>; }gc() } while(((eval(\"(function(y) { yield y; yield;; yield y; })() < gc()\", this.eval(([*::*].map((*::*).__defineSetter__))).unwatch(\"prototype\")))) && 0);");
tryItOut("with(this.__defineGetter__(\"__iterator__\", function (constructor) { return ([1,2,3,4].map((__iterator__.x::prototype.*), (prop.prop = constructor) ? <>try { return {}; } finally { let prop =  '' , __count__; } </> ? undefined : <><x><y/></x></> : (this.__defineSetter__(\"window\", <y><z/></y>)))) } )){with({}) { ; } return <x><y/></x>\n; }");
tryItOut("throw StopIteration;");
tryItOut("(__parent__);\nconst __proto__;\n");
tryItOut("const __noSuchMethod__;");
tryItOut("<x><y/></x>");
tryItOut("let(prototype = yield  /x/g , [] = <x><y/></x> &= prototype = z) { throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [__count__, get['__proto__'], , ({ __noSuchMethod__: (({ __iterator__: ({ constructor: __proto__ }) }), prop: ({ __iterator__: prototype }) }), ] in (/a/gi).call(<x/>, )) {throw this; }");
tryItOut("L:do return <y><z/></y>; while((3.141592653589793) && 0)\nyield");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = eval(\"k\", (constructor.valueOf(\"number\"))) in (__parent__ = prototype %  /x/g .throw([,,]))) {export *;( '' ); }\nlet constructor =  { yield [1] } , prop = <><x><y/></x></>;");
tryItOut("switch('fafafa'.replace(/a/g, function  __iterator__ () { continue M; } )) { default: returnbreak;  }");
tryItOut("if(*.__proto__) {export __parent__;yield; } else  if ((break )) ");
tryItOut("if(this || ({ __noSuchMethod__: __iterator__ }) = (this)()) (<x/>); else  if (#0=[(function ([y]) { }.eval(1e+81))])  else {}");
tryItOut("/*infloop*/for(const __proto__; 3.141592653589793 @  /x/ ; .2) {/*infloop*/for(__iterator__; <y><z/></y>; 033) break ; } const __parent__\n;");
tryItOut("let ([__iterator__, [, , [, [], , , ], , ]] = prop = *.constructor) { /*infloop*/for(new function(q) { return q; }(); *::*; [( '' \n)].sort(<><x><y/></x></>[<><x><y/></x></>])) {function(y) { yield y; {}; yield y; }(-0).isPrototypeOf(null); } }");
tryItOut("");
tryItOut("/*infloop*/while(__iterator__.eval((yield *::*)))/*infloop*/for(-0.__lookupSetter__(\"constructor\"); ( /x/ .__defineGetter__(\"__parent__\", (1 for (x in []))) ,  '' [false]); @foo'.throw() yield;");
tryItOut("M:if(<><x><y/></x></> && 0/0) {return this;<y><z/></y>.hasOwnProperty(\"constructor\"), * } else  if (([]\n))  else {return;throw (this.__defineSetter__(\"__parent__\", Function));continue M;\n/*for..in*/for(let __proto__.__count__ in ((gc)(~[[]])))\n }");
tryItOut("L: {*;(__proto__); }");
tryItOut("gc()\ngc()\n");
tryItOut("throw window;");
tryItOut("L: export __proto__;");
tryItOut("/*infloop*/for(prop; this.__defineSetter__(\"__iterator__\", Math.pow); (__count__ = <y><z/></y>)) {gc() }");
tryItOut("{if(eval(\"undefined *= __proto__\", 1e+81.__count__ = #3={a:#3#})) <x/>; else  if (<y><z/></y> in (-1)) {throw *; } }");
tryItOut("{ /x/g ; }");
tryItOut("L: {}");
tryItOut("let (__proto__ = this.__defineGetter__(\"__proto__\", (1 for (x in []))), prototype) { return; }\n");
tryItOut("if((* << <><x><y/></x></>)) { if (\f0) {prototype; }} else {{} }");
tryItOut("/*infloop*/for(@foo; (function ([y]) { })();  \"\" ) {}");
tryItOut("/*infloop*/do {break ;export *; } while(<x/>);");
tryItOut("yield <y><z/></y>;");
tryItOut("/*for..in*/for([__proto__, getter] = 1e+81\n in 1e81) continue ;");
tryItOut("export *;\nreturn;\n");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in #0=[false]) ");
tryItOut("while((- \"\" ) && 0){({}).hasOwnProperty }");
tryItOut("if(<x/>) { if (<x><y/></x>) {let __count__, __count__ = <><x><y/></x></>; } else {yield <><x><y/></x></>;__noSuchMethod__ =  /x/ , __count__; }}\n__noSuchMethod__ = <x><y/></x>");
tryItOut("for(let y in []);");
tryItOut("if((this.__lookupSetter__(\"__iterator__\"))) yield 3.141592653589793; else {;yield *::*; }\n(1.2e3).__defineSetter__");
tryItOut("L:if((prop.__proto__)()) {const prototype;/*for..in*/for(let __noSuchMethod__ = ({prop: (__count__-=[[1]]), __count__ getter: /a/gi }) in (0/0 if (<><x><y/></x></>))) yield; } else {let([] = [[]]) ((function(){throw StopIteration;})());\fif((@foo.@foo)) const __iterator__ = <x/>; else \n }");
tryItOut("if(/*\n*/__parent__.(<><x><y/></x></>) ::  ''  | *::*) {yield *; } else  if ((__proto__.__lookupSetter__(\"__iterator__\"\t))) {var <x><y/></x>, __parent__ = __iterator__; }");
tryItOut("switch(([15,16,17,18].some([1,2,3,4].slice,  /x/ .__defineGetter__(\"__count__\", Math.sin)).eval(([[]]\n) % <x/>))) { case *::*.yoyo(null): {}break; default: ( /x/g )\nbreak; case let (__iterator__ = <x/> %= <y><z/></y>) 'fafafa'.replace(/a/g, ({}).__lookupGetter__): <x><y/></x>++; }");
tryItOut("/*infloop*/for(*::* / window; ({__parent__: __parent__});  /x/ .unwatch(\"__noSuchMethod__\")) if(prototype = *::*, __iterator__;) { if (true) continue L;} else let constructor = <x><y/></x>, prototype = <x><y/></x>;");
tryItOut("return (constructor = 0.1);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.__iterator__ in new Array(*::*--)) {/*for..in*/for(var __noSuchMethod__(<x><y/></x>) in prototype) __count__{const prototype = <x><y/></x>;export *; } }");
tryItOut("{if(yield <y><z/></y>) {break M; } else  if (<>break L;</>.throw(<><x><y/></x></>)) __noSuchMethod__ = 3.141592653589793; else {gc() }/*infloop*/do {throw <x><y/></x>;export *; } while( '' ); }");
tryItOut("L:while((new String(window, *::*)) && 0)yield;");
tryItOut("while(( /x/g ) && 0)");
tryItOut("default: {}break; window.constructor\nbreak; case 0: case prototype = @foo.@*: break; break; ");
tryItOut("/*for..in*/M:for(var constructor in ({a1:1})) yield __parent__;");
tryItOut("throw StopIteration;");
tryItOut("if(~(({}).__lookupGetter__)) {const __count__, __proto__;/*for..in*/for([__proto__, __proto__] = (p={}, (p.z = -3/0)()) in null) 1.3 } else  if (((uneval(({ __noSuchMethod__: prop }) = ( ''  !== null))))) {L: {throw <x><y/></x>; }(true).watch }");
tryItOut("let (prototype) { {Math.pow__noSuchMethod__; } }");
tryItOut("/*for..in*/for(var __proto__ = ({prop: __noSuchMethod__,  get __count__()1e81 }) in  /x/g ) {continue ; }");
tryItOut("with([z1].@*){/*for..in*/for(const __parent__ in window) {export __count__;function  __iterator__ () { yield *::* }  }__iterator__ = <x><y/></x>; }");
tryItOut("yield @foo;");
tryItOut("L: {continue M;({}).hasOwnProperty }");
tryItOut("L: return this;");
tryItOut("/*for..in*/L:for(const __iterator__ = 0.1 in @foo) {yield undefined; }");
tryItOut("if((new function  constructor (prototype, __count__) { ; } ((true .@ null.eval(false.hasOwnProperty(\"__proto__\")))))) for(let y in [5,6,7,8]) const __proto__, __proto__;");
tryItOut("L: {throw StopIteration\n }");
tryItOut("/*for..in*/M:for(const this++ in (__parent__\t =  \"\" )) export *;");
tryItOut("if((uneval(1.3 << true))) L: {const constructor = ({a1:1}); }");
tryItOut("{'haha'.splitthrow StopIteration; }");
tryItOut("{}");
tryItOut("/*infloop*/L:while([# for each (__iterator__ in *::*)\t]){/*for..in*/for(const [prop, __noSuchMethod__] = * in <><x><y/></x></>) ; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in (((__noSuchMethod__.__parent__ = __parent__.([z1,,])).watch)(prototype.__noSuchMethod__ setter= null.* * (*::*.__lookupSetter__(\" { yield <x><y/><\\f/x> } \").x::__proto__)))){/*infloop*/for(var constructor = true; this; *) const constructor = <><x><y/></x></>, __parent__ = this; }");
tryItOut("if(--(({__iterator__ getter: Math.sin }))) var __proto__, set; else  if (Object()) return; else return;");
tryItOut("if(\n{J }) { if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {export *;break ; }} else {;return; }");
tryItOut("{let prototype, __noSuchMethod__;export *; }");
tryItOut("/*for..in*/for(var [prop, __parent__] = true in *) {prop }");
tryItOut("with((__parent__.__noSuchMethod__ setter= /a/gi) in (<y><z/></y>.eval(true))){{}(undefined); }");
tryItOut("do __iterator__ = default: /*infloop*/for(const ({ __parent__: ({ __noSuchMethod__: [__count__] }) }) = new (/a/gi)(<x><y/></x>)\r; yield <x><y/></x>; <y><z/></y>.unwatch(\"__noSuchMethod__\")) if(<x><y/></x>) {const __iterator__;const __iterator__ = __parent__, __count__ = <y><z/></y>; }break; break; case 9: break; do {yield false;export __count__; } while((<x><y/></x>) && 0);if(<><x><y/></x></>) {prop, function::prop;(({a1:1})); } else  if ( '' ) {new Function } else break; case 5: case ((Math.sin)(@foo, constructor) , __noSuchMethod__ = <><x><y/></x></>): break;  && ((true).apply(<x/>,  '' )), ({ __parent__: ({ __parent__: prototype }) }) = <x/>++ while((this.__defineSetter__(\"__noSuchMethod__\", eval)) && 0);");
tryItOut("break M;\nconst __count__, __proto__;\n");
tryItOut("{/*infloop*/while(null){(window);function(y) { yield y; {}; yield y; } } }");
tryItOut("L:if( /x/ --) {return; }");
tryItOut("/*infloop*/for(const <y><z/></y>, <><x><y/></x></> = [z1,,].__lookupGetter__(\"__parent__\"); <x><y/></x>.valueOf(\"number\"); yield @foo) yield;");
tryItOut("/*infloop*/for(const __iterator__ = #1=__count__;  /x/g ; let (x::__iterator__ = @foo, getter = undefined) undefined && this.__defineSetter__(\"__noSuchMethod__\", ([1,2,3,4].map).apply)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *) export __proto__; }");
tryItOut("do {{} } while(([11,12,13,14].map) && 0);");
tryItOut("with({}) { __parent__ = constructor; } ");
tryItOut("");
tryItOut("continue ;\nthrow 1e4;\n");
tryItOut("export *;\n/*infloop*/while(window())yield <x/>;\n");
tryItOut("/*infloop*/L:for(<y><z/></y>; *::* % new Error(__parent__); ((@foo((function ([y]) { })())//h\n.constructor if (<><x><y/></x></>)))) {3/0; }");
tryItOut("let(__count__) ((function(){try { (3); } catch(constructor) { prop; } })());");
tryItOut("let(__proto__, prop = <y><z/></y> && (this)[1e+81]) { with({}) { __noSuchMethod__ = __iterator__; } ");
tryItOut("prototype = ({}), __parent__ = <x><y/></x>;return <y><z/></y>");
tryItOut("/*for..in*/for(const __parent__.__iterator__ in 1.2e3) {<x><y/></x>; }");
tryItOut("L: {(3); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __noSuchMethod__: __parent__ }) in <><x><y/></x></>.@foo) {/*infloop*/do {yield;constructor = <x/>; } while(((this for (__count__ in [)))); }");
tryItOut("throw prototype;");
tryItOut("if(<><x><y/></x></>.eval(<><x><y/></x></>) :: new ('haha'.split)( { return [,,z1] } , .2)) if(__proto__) export *; else  if (<x><y/></x>) {;; } else function::__iterator__ = (prop.constructor getter= (new Function(\"\"))), ({ __iterator__: __count__, __proto__: __noSuchMethod__ }) = new (<><x><y/></x></>)();");
tryItOut("with({}) { /*for..in*/for(let __count__ in ((Function)(<y><z/></y>))){const prop;false; } } ");
tryItOut("let(prop = <y><z/></y>) ((function(){})()); const __count__;");
tryItOut("/*infloop*/L:for([({ constructor: __noSuchMethod__ }), ({ __count__: ({ prop: ({ __proto__: __parent__ }), __noSuchMethod__: ({ constructor: [], constructor: __count__ }) }), constructor: [({ __parent__: ({ __iterator__: [] }), __proto__: ({ __parent__: ({ __noSuchMethod__: __parent__ }), constructor: [, prototype, , ] }) })] })] = this ? [[1]] : 0.1; (#2=[new Date(<y><z/></y>) % (--<y><z/></y>) ? (window += function ([y]) { }) : __iterator__ = (1 for (x in []))( \"\" , <y><z/></y>)]); (uneval(let (__proto__, __proto__) <x><y/></x>))) /*for..in*/for(let [__parent__, __iterator__] = (window ? <x><y/></x> :  '' ) in false) {__iterator__ = {}; }");
tryItOut("if(__noSuchMethod__) {return; }");
tryItOut("/*infloop*/while(<><x><y/></x></>)throw 1.3;");
tryItOut("let(prototype = (let (__noSuchMethod__, prototype) <><x><y/></x></>), __parent__) ((function(){throw __iterator__;})());");
tryItOut("if(<x><y/></x>) {yield false; }");
tryItOut("let prop = [z1];");
tryItOut("throw __parent__;");
tryItOut("return <y><z/></y>;");
tryItOut("if((yield (window ===  '' ))) {export *; } else  if ((-({a2:z2}))) {throw __parent__; }");
tryItOut("switch(<x/>) { case <><x><y/></x></>: break;  }");
tryItOut("__count__ = __count__;/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in __noSuchMethod__) if(__parent__.throw( '' )) { if ((this.__defineSetter__(\"__count__\", Math.sin))) export *; else try { continue ; } finally { (<x><y/></x>); } } while({});");
tryItOut("/*for..in*/for(let prototype.prop in ((new Function)((void <x/>)))){(<x><y/></x>); }");
tryItOut("/*infloop*/while((((<y><z/></y>)(*, constructor).__defineGetter__(\"constructor\", function (){})).__defineSetter__(\"prop\", new ((new Function(\"gc()\")))())))gc()return;return *;");
tryItOut("/*for..in*/M:for(const prop =  \"\"  in <><x><y/></x></>) return;");
tryItOut("if((<x><y/></x>.(<x><y/></x>).__defineSetter__(\"constructor\", Function))) {with({prop: new (window)(this)})let __parent__, __iterator__;break L; }");
tryItOut("with(0/0 -= __iterator__){function  __noSuchMethod__ (prototype, constructor) { return \t* }  }");
tryItOut("/*infloop*/for( \"\" ;  \"\" ; {}) {(null);*::*; }");
tryItOut("/*for..in*/L:for(var __parent__ in __iterator__) var constructor =  /x/ ;");
tryItOut("while(((<><>*</></>).call((uneval( '' )), prop) += -1) && 0){yield [,,z1];const __parent__, __count__; const __iterator__; }");
tryItOut("/*infloop*/for(* >  /x/g ; true in <><x><y/></x></>; *::*) return;");
tryItOut("{prototype; const __noSuchMethod__;\t }");
tryItOut("with({}) with({}) for(let y in []);");
tryItOut("do if(__count__) { if (window) {break ; }} else \n{break L;const __count__ = @foo; } while((-1.__defineSetter__(\"constructor\", #1=[#1#])) && 0);");
tryItOut("with({}) { yield <//h\n><x><y/></x>//h\n</> -= @foo.hasOwnProperty(\"__iterator__\"); } ");
tryItOut("M:switch((__noSuchMethod__.prototype = this)) { default: break; case <><x><y/></x></>.eval(<x><y/></x>): break; break; break; (<x><y/></x>);;break;  }");
tryItOut("M:while(() && 0){continue M;gc() }");
tryItOut("/*infloop*/while(this.__defineSetter__(\"constructor\",  /x/ )){__parent__ = prop, __count__;yield; }");
tryItOut("with((this.__defineSetter__(\"__count__\", function  __parent__ (__proto__) { yield 1.2e3 } )))gc()");
tryItOut("L: return;");
tryItOut("M:if(({prop: <><x><y/></x></>}) %= __parent__.constructor = this.zzz.zzz) switch( /x/ ) { default: (<><x><y/></x></>);break;  }");
tryItOut("/*infloop*/for(__parent__; <>__iterator__ = prop</>; (new (<x/>.unwatch(\"__parent__\"))())) /*for..in*/M:for\t(let [function::__iterator__, constructor] = window in <x><y/></x>) { /x/ ; }");
tryItOut("throw __parent__;");
tryItOut("{[[1]]let (prop, __iterator__) { (true); } }");
tryItOut("");
tryItOut("gc() const __proto__;");
tryItOut("if(<x><y/></x>.hasOwnProperty(\"prototype\").eval(this ^= window)) if([,,]) {export *; } else {break M; } else {switch(<x/>) { case this: break; case 8: var prototype = prop;break; break; default: break; break; case 8: return <><x><y/></x></>;case *: case <><x><y/></x></>: (<x><y/></x>).watchgc()break; {}break; case *: break; case <x><y/></x>: return; } }");
tryItOut("export *\n");
tryItOut("if( /x/g ) {({}).hasOwnProperty([1,,]); } else  if (<><x><y/></x></>) return <x/>; else let __count__ = __proto__, constructor;");
tryItOut("{return (<x><y/></x>.((-1)));/*for..in*/M:for(let (this.__defineSetter__(\"constructor\", function  x::constructor (__proto__) { yield 3 } ))(([<x><y/></x>.(function ([y]) { })].sort(function (__noSuchMethod__, prototype) { yield false } ))) in __count__ = <x/>) let prototype = <><x><y/></x></>; }");
tryItOut("try { yield __iterator__ = window >>>=(true.yoyo(<x><y/></x>)).throw(constructor); } catch(__noSuchMethod__) { return; } ");
tryItOut("let (__noSuchMethod__, ({ __count__: ({ constructor: __noSuchMethod__ }), __parent__: [] })) { /*infloop*/while(/*\n*/undefined){var __parent__; \"\" ; } }");
tryItOut("__parent__ = prop;");
