tryItOut("if((Function)(Error())) {break ;prototype, prototype =  /x/ ; } else  if (__count__) __parent__ = (__count__ = (<><x><y/></x></>)) else {L: gc() }");
tryItOut("yield;__proto__ = <y><z/></y>;");
tryItOut("throw constructor;");
tryItOut("if(eval(\"'fafafa'.replace(/a/g, [1,2,3,4].map)\", (uneval(*.unwatch(\"constructor\").__lookupSetter__(\"__count__\"))))) with({prototype: 'fafafa'.replace(/a/g, function(q) { return q; }).\tisPrototypeOf(<><x><y/></x></>)})(3.141592653589793 * 1.3); else  if (+<x><y/></x> .@ __parent__ = .2) const __proto__; else const __noSuchMethod__ = -1;");
tryItOut("L:with(@foo){/*infloop*/L:for(false; __parent__; null) ({}).hasOwnProperty }");
tryItOut("/*infloop*/L:do /*for..in*/for(var __count__ in ((\ffunction  constructor (__proto__, __parent__) {  } )(@foo))){continue L; } while(new (prototype =  /x/g )(eval(\"(\\n__count__)\", ++ /x/g )));");
tryItOut("let (__proto__ =  \"\" , constructor) { export __count__; }");
tryItOut("while((window) && 0){var  { constructor; }  = true;(<x><y/></x>); }");
tryItOut("M:if(({__parent__: window,  get __noSuchMethod__(__count__) { return  /x/  }  })) { if (((yield function(id) { return id }))) { '' ; } else with(<x><y/></x>){export *;return <x><y/></x>; }}");
tryItOut("gc()\nvar __iterator__;");
tryItOut("");
tryItOut("export prop\n/*infloop*/for(let ({ __iterator__: constructor }) = window; <y><z/></y> >>>=4.; constructor = @foo) gc()");
tryItOut("with({prop: (true != *::*)}){Math.sinyield; }");
tryItOut("yield *::*.* | @foo.yoyo(__parent__);");
tryItOut("with(<x><y/></x>){let constructor = *::*, prototype = *::*;return <y><z/></y>; }");
tryItOut("{with({__iterator__: false}){prop;gc() }/*infloop*/L:while((()(this, <><x><y/></x></>)) == this)let (__parent__ = <x/>) { (({a2:z2})); } }");
tryItOut("let __iterator__, __count__ = true");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {{}const __proto__; } while(this);");
tryItOut("with((new <><x><y/></x></>())){__count__, prop = <x><y/></x>; }");
tryItOut("const __parent__ = <x><y/></x>, constructor = __count__;\ngc()\n");
tryItOut("const __parent__;");
tryItOut("L:if( /* Comment */null >= <x><y/></x>) return; else while((({ get prop(__count__)constructor.propertyIsEnumerable(\"constructor\") })) && 0)");
tryItOut("M:if('fafafa'.replace(/a/g, function  __proto__ () { (function(y) { yield y; {}; yield y; }).apply } )) { if ('fafafa'.replace(/a/g, Math.sin).(<y><z/></y>.@foo)) {{}return <y><z/></y>; } else {/*infloop*/do function(y) { yield y; export *;; yield y; } while(undefined);<x><y/></x>; }}");
tryItOut("with(\f(* - <><x><y/></x></> ? __noSuchMethod__ = __iterator__ : (this.__defineSetter__(\"prop\", ( /x/ ).watch)).@foo)){let constructor = undefined\n }");
tryItOut("let (prop) { __noSuchMethod__ = false, prototype = *::*; }");
tryItOut("/*for..in*/for(constructor in ((Math.pow)(([2 .@x:: false *= 1e+81]))))const __parent__ = function ([y]) { };");
tryItOut("L: return;");
tryItOut("if(prop @ *::*) { if (([] = 033)) {gc()for(let y in []); } else {L: gc() }}");
tryItOut("throw StopIteration;");
tryItOut("M:if((<x><y/></x>)[ /x/g ]\t) {gc()yield; } else  if ((window.watch(\"__parent__\", ( '' ).watch))) throw __parent__;");
tryItOut(".2;");
tryItOut("/*for..in*/M:for(let __proto__ in ((function(q) { return q; })(Math.sin.isPrototypeOf( /x/  / <><x><y/></x></>['constructor'])))){gc()let __proto__, constructor;export __iterator__; }");
tryItOut("M:if(<><x><y/></x></>) function::prototype else {__noSuchMethod__gc() }");
tryItOut("if(function(y) { yield y; throw <x><y/></x>;; yield y; }) {yield; }");
tryItOut("__iterator__(prototype) = __proto__;");
tryItOut("throw window.isPrototypeOf( /x/g ).__parent__;");
tryItOut("while(( for (__noSuchMethod__ in window)) && 0){yield; }<x><y/></x>;");
tryItOut("export __parent__\nreturn;");
tryItOut("/*for..in*/for(__parent__ in ({})) {{}export __count__; }");
tryItOut("/*infloop*/for(let [({ prototype: ({ __iterator__: prototype, __count__: ({ prop: ({ __noSuchMethod__: prop, __noSuchMethod__: constructor }), __count__: ({ __iterator__: __noSuchMethod__, prop: prototype }) }) }) }), , \f] = (Date(<x><y/></x>, this)); eval(\"/*infloop*/while(false){return ((1e-81)).watch(\\\"__proto__\\\", Math.sin);\\rcontinue L; }\", ((uneval(<><x><y/></x></>)))); (4. | constructor)) {yield; }");
tryItOut("/*infloop*/do ( /x/ ); while(window ? (__iterator__.prototype setter= <x/>.isPrototypeOf((#__proto__ =[<><x><y/></x></>]))) : new String());");
tryItOut("{}throw <x><y/></x>;");
tryItOut("try { for(let y in [5,6,7,8]) throw <x><y/></x>; } finally { prop = __parent__; } ");
tryItOut("with(this * [ '' ]){__iterator__L:if(<x><y/></x>) { if (<<x><y/></x></>prop ) export *; else {continue ; }} }");
tryItOut("yield [z1]");
tryItOut("/*infloop*/while((__iterator__ = <><x><y/></x></> == __proto__ ,  '' ))let constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype = undefined['constructor'] in (<x><y/></x> !== undefined)) while((__noSuchMethod__ = \f '' .yoyo(this)) && 0){break L; }");
tryItOut("if(yield <x><y/></x> >> <><x><y/></x></>) ((__parent__+=[])); else  if ( ''  = #1#) let(constructor = window, __count__ = <><x><y/></x></>) ((function(){;})()); else return __parent__;");
tryItOut("if(<x/>) {return \f<x><y/></x>; } else {X }");
tryItOut("while((<><x><y/></x></>) && 0){break ;yield <><x><y/></x></>; }\nlet __parent__, prototype;\n");
tryItOut("let (__proto__) { return <x/>; }");
tryItOut("(this);\n;\n");
tryItOut("L:if((__parent__.__proto__)) @foo; else  if (__iterator__.prototype) {([[1]]);continue L; } else ;");
tryItOut("/*infloop*/M:for(this; undefined; @foo) { }");
tryItOut("L: {export __count__; }");
tryItOut("/*infloop*/while((prop = prop)){throw get; }");
tryItOut("/*for..in*/for(constructor = __parent__ in *::*) if(__iterator__ + <x><y/></x>) { if ((.2 ^ __parent__)) <y><z/></y>} else { } const __noSuchMethod__;");
tryItOut("<xxx>{prop}</xxx> ");
tryItOut("/*infloop*/for(__parent__ = <><x><y/></x></>; Function; (yield (*::*)[<x><\fy/></x>])) {(0.1).__defineSetter__var  /x/ ; }");
tryItOut("/*for..in*/M:for(const __count__ = <bbb xmlns=\"*\"><ccc:ddd><!--yy--></ccc:ddd></bbb> in 0/0) return 1.2e3;");
tryItOut("let(__proto__ = -1) ((function(){return;})());");
tryItOut("/*infloop*/L:for(function::__count__ = ({__noSuchMethod__: ~#1#.__lookupGetter__(\"__iterator__\")}); this.__defineGetter__(\"__iterator__\", /a/gi); *) /*for..in*/M:for(const new prop.__noSuchMethod__(prop, ([function(id) { return id } if (constructor)])) in ((function(y) { yield y; <x><y/></x>;; yield y; })(4.)))prop;");
tryItOut("L: {gc()return; }");
tryItOut(";");
tryItOut("L:while((((uneval(new  \"\" ())))) && 0)return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__.constructor in constructor) (true);");
tryItOut("/*infloop*/L:do const prop, __noSuchMethod__; while(({ get __proto__(prototype) { return .2; } , this: this }));");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*/for(var __proto__ in __parent__%=1e81) yield -3/0;if([1]) {gc() } else /*\n*/ if (prop) {gc() } else export __noSuchMethod__; }");
tryItOut("/*infloop*/for(constructor = [,,z1]; window;  /x/g ) return;");
tryItOut("M:while((\nget-=*) && 0){throw <y><z/></y>; }");
tryItOut("return;");
tryItOut("if(({ get __iterator__() { yield ( /x/g .prototype = prop) }  })) __noSuchMethod__ = 1e-81, __noSuchMethod__ = this; else  if (({ prop: __noSuchMethod__ })) {export __parent__;(window); }");
tryItOut("{1e-81; }");
tryItOut("((new RangeError(false, (function ([y]) { })())) % __parent__ = [,,z1])\f;\n\n");
tryItOut("M:do {L: __count__ = this; } while((window) && 0);");
tryItOut("(<x><y/></x>)\t;");
tryItOut("\n");
tryItOut("{/*for..in*/for(var [each, function::prop] = (*::* <<=  ''  <<= true).watch(\"__parent__\", function(y) { yield y; true; yield y; }) in ((/a/gi).call( \"\" , [1,,]))) return <x>//h\n<y/></x>;/*infloop*/for(var __count__; let (__count__ = [[1]]) __noSuchMethod__%=<><x><y/></x></>; ('fafafa'.replace(/a/g, (*::*).apply) for each (__noSuchMethod__ in __proto__))) {prop; } }");
tryItOut("if((-1) for each (__proto__ in 0x99)) { if (@foo.valueOf(\"number\")) {export *; }} else {export *;if( /x/ ) { if (__count__) 1e4} else {} }");
tryItOut("export __iterator__;\n\n");
tryItOut("let(__count__) { throw StopIteration;");
tryItOut("return true");
tryItOut("return function::__count__\n/*infloop*/for(var ({ setter: constructor, x::__parent__: ({ __parent__: [__parent__, __noSuchMethod__, , __noSuchMethod__, ] }) }) = ; !__count__; 3 < RegExp()) export __iterator__;");
tryItOut("L:switch([15,16,17,18].map((new Function(\";\")), new <x><y/></x>(<y><z/></y>) >>> __parent__.__proto__ setter= ((new Function(\"yield __noSuchMethod__;\"))).apply)) { default: /*infloop*/for([15,16,17,18].some(/a/gi,  \"\" ); [1]--; __noSuchMethod__\n) yield\n/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = undefined in undefined) ;break;  }");
tryItOut("/*for..in*/for(var prop in .2) ");
tryItOut("if(this.__defineSetter__(\"__proto__\", new Function)) { if (('fafafa'.replace(/a/g, Math.sin))) {}\tyield  '' ;} else {const prototype = (-0), __proto__\nyield; }");
tryItOut("with({}) with({}) let(prop = ( '' .prop), __parent__ = 1e-81) ((function(){let(prototype) { __parent__.__parent__ = __iterator__;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in (uneval(__noSuchMethod__.prototype setter= (function () { return  /x/  } ).call))) {/*for..in*/L:for(const prop((p={}, (p.z =  \"\" )())) in ((function  __iterator__ () { yield (<x><y/></x>.yoyo(this)) } )(((yield -undefined.__lookupSetter__(\"__iterator__\")))))){try { export __iterator__; } catch(({ __parent__: constructor }), __proto__) { yield <><x><y/></x></>; }  }\nif(*::*) break L; else  if (__proto__) {export prop; } else {export *;export __count__; }\n }");
tryItOut("/*infloop*/for(const __count__; \f(); *) ([,,]);");
tryItOut("while((!false) && 0)const __parent__ = @foo, __count__;");
tryItOut("(3/0);\n{}\n");
tryItOut("do {(Function).callreturn <x/>; } while((__parent__.isPrototypeOf(4.)) && 0);");
tryItOut("return <><x><y/></x></>\nswitch(<x><y/></x>) { case 1e+81: break; throw undefined; }");
tryItOut("yield __proto__ = (new (new Function(\"let __count__;\"))(<><x><y/></x></> >>= constructor));");
tryItOut("{return;const __noSuchMethod__, __iterator__; }/*infloop*/for(var __proto__ = <><x><y/></x></>; <><x><y/></x></>; false) ;");
tryItOut("if(.2) {let constructor;var __parent__, __count__ = __noSuchMethod__; } else var prototype = <x/>\ngc()");
tryItOut("with({__count__: ~(this.zzz.zzz)})let __parent__ = *::*, __proto__ = @foo\nconst constructor;");
tryItOut("/*infloop*/do this; while(__proto__ = (1e+81 /= [[1]]));");
tryItOut("<><x><y/></x></>; const delete;");
tryItOut("L: (1e4);");
tryItOut("/*infloop*/for( /x/ .isPrototypeOf(window); \f\nwindow; <x><y/></x> ^= __count__) {export *;yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __noSuchMethod__: constructor }), __proto__: constructor }) = ({a1:1}).__defineSetter__(\"__iterator__\", new Function); new (this)(arguments); <><ccc:ddd> </ccc:ddd></>) {({}).__lookupGetter__function () { yield undefined }  }");
tryItOut("return;");
tryItOut("do export __iterator__; while((*::*) && 0);");
tryItOut("export *;");
tryItOut("if(null) { if (@foo) const __proto__ = this, get = <><x><y/></x></>; else __iterator__ = prop;}\nyield constructor;\n");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { with({}) new  '' ; } ");
tryItOut("{with({__count__: __iterator__ & #1=[#1#]}){gc() }let __parent__ =  \"\" , __parent__ = []; }");
tryItOut("{switch((<y><z/></y> *=  '' .__lookupGetter__(\"__proto__\") / __iterator__ = 3.141592653589793)) { case constructor.valueOf(\"number\"): (@foo); } }");
tryItOut("M:if((function(y) { yield y; break L;; yield y; }).call(window, null, 4.).eval(__iterator__ = <x><y/></x>).propertyIsEnumerable(\"prototype\")) yield; else break ");
tryItOut("let [], ({ __proto__: __parent__, __noSuchMethod__: prototype });");
tryItOut("do {/*for..in*/for(const constructor in (((<y><z/></y>).watch)( \"\" )))(<y><z/></y>); } while((<><x><y/></x></> <<= \t<><x><y/></x></> >> ({__proto__ setter: ({}).__lookupGetter__, prop: [z1] ? <x><y/></x> : [1,,] })) && 0);");
tryItOut("let (__count__ = <><x><y/></x></>) { __proto__; } const constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <><x><y/></x></>) \t");
tryItOut("{}");
tryItOut("(<><x><y/></x></>); const x::prop;");
tryItOut("while(((Exception())) && 0){switch(true) { case <><x><y/></x></>: /*for..in*/for(let [prop, prop] = function(id) { return id } in <x/>) prototype = <>\f<x><y/></x></>, __iterator__;break;  }return; }");
tryItOut("{if(1.2e3) {let constructor = [1];return; } else prop }");
tryItOut("{}\n");
tryItOut("if(eval(\"yield;\", <><x><y/></x></>.prop = <><x><y/></x></>)) {continue M; }");
tryItOut("/*for..in*/for(const __parent__ = 3.141592653589793 in function(id) { return id }) {3/0; }");
tryItOut("/*infloop*/for(var __count__ = *; <x/>.valueOf(\"number\"); (<x><y/></x> && this)) {with(<x><y/></x>){var constructor =  /x/g , __noSuchMethod__ = <x/>; } }");
tryItOut("this.zzz.zzz;/*for..in*/M:for([prop, __proto__] = 0 in  /x/ ) yield *::*;");
tryItOut("L:if(let (__iterator__) @foo(arguments, <x><y/></x>) instanceof #0=({prototype: arguments})) { if (((\n* for (<y><z/></y>.__parent__ in <><x><y/></x></>) for (prototype in true)).__defineGetter__(\"prop\", __count__))) {/*infloop*/for(4..(RangeError(<><x><y/></x></>)); __iterator__; __proto__) return;let(__proto__, constructor, constructor = this) { (arguments).__defineSetter__ } else {; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in \fnew [<x><y/></x>].map(function  get (__iterator__) { yield 0/0 } )(( /x/g  & __parent__))) {[1,2,3,4].slice\n__parent__; }");
tryItOut("M:with({ for (__iterator__((<x><y/></x> @ undefined)) in <><x><y/></x></>): constructor = prop})var __count__ = @foo, prop;");
tryItOut("let (prototype, __iterator__ = ((yield __count__)).__defineGetter__(\"prop\", eval)) { with({__noSuchMethod__: <x/>})do return; while((this) && 0)\nswitch(<x><y/></x>.propertyIsEnumerable(\"prop\")) { default: break; break ; const prototype;continue M;break;  } }");
tryItOut("/*infloop*/do {with(window){yield true; }/*infloop*/L:for(const constructor; (#3={a:#3#}.@*); true === window)  } while(<><x><y/></x></>.__lookupSetter__(\"prototype\"));");
tryItOut("if(__noSuchMethod__) let __iterator__ = *; else  if (this.__defineGetter__(\"__parent__\", (<><x><y/></x></>.throw(<><x><y/></x></>)).watch)) let __parent__, __parent__;");
tryItOut("if(window) <><x><y/></x></>; else  if ( '' ) throw prop;");
tryItOut("with({}) { yield (__proto__).watch(\"__count__\", ({}).hasOwnProperty) &= ('fafafa'.replace(/a/g, function  __noSuchMethod__ () { yield #1=[#1#] } ).*); } ");
tryItOut("if(this) { if (undefined) __count__} else var __iterator__, constructor =  /x/g ;");
tryItOut("/*infloop*/for(var prototype; this.propertyIsEnumerable(\"prototype\"); (eval).call(<x/>, (function ([y]) { })(), arguments).prototype) yield;");
tryItOut("throw __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<x><y/></x>)(null) in <'x><y/></x>) {yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var [] in *::*) ;");
tryItOut("/*for..in*/for(const setter = (new ([11,12,13,14].sort ? prototype.__parent__ = <x/> : <x/>.constructor)()) in __count__--) {export *;return;(<x/>); }");
tryItOut("{/*infloop*/M:do constructor; while( \"\" );M:do throw <x><y/></x>; while(( /x/g ) && 0); }");
tryItOut("L:while(((__noSuchMethod__-= '' )) && 0)");
tryItOut("/*infloop*/while(true)yield\nprop;");
tryItOut("/*for..in*/for(let [].function::function::constructor in ((((window for each (prop in prototype))))((constructor = this.__lookupGetter__(\"__noSuchMethod__\")))))/*infloop*/for(var __proto__;  /x/g ; <x/>) __noSuchMethod__ =  \"\" ;");
tryItOut("/*infloop*/for(new Function; (-0) + ({a1:1}); [[[]] for each (__proto__ in 3.141592653589793)]) {let (__count__) { export __count__; }; }");
tryItOut("switch(<x><y/></x>) { default: let prototype, constructor = <><x><y/></x></>;break; break; case <x><y/></x>: return;break; break;  }");
tryItOut("\tbreak \n");
tryItOut("L: /*for..in*/for(let __parent__ = this && eval(\"<><x><y/></x></>\",  /x/g ) in  if (prop)) {if(<y><z/></y>) yield; }");
tryItOut("/*infloop*/L:for(const prop; (1e4)(); ({ __proto__: __iterator__ }) = ((this)[false].isPrototypeOf((constructor)))) /*infloop*/for(let [__proto__, , ] = (Error()).eval((\t[15,16,17,18].filter(<x><y/></x>, <><x><y/></x></>) * undefined())); <y><z/></y>() ? prototype : (true\n); ({prop: #1=[((__noSuchMethod__ = true)++)]})) {{} }");
tryItOut("do {do {yield <><x><y/></x></>; } while((<><x><y/></x></>) && 0); } while((prototype = [11,12,13,14].some) && 0);/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in  /* Comment */<x/>) {return prop; }");
tryItOut("if(new (<><x><y/></x></>)(undefined)) { if (<x><y/></x> - <><x><y/></x></>) gc() else (<x/>).watch}");
tryItOut("while((!'fafafa'.replace(/a/g, eval)) && 0){let(({ constructor: constructor }) = [this], __proto__ =  \"\" .__defineSetter__(\"__count__\", function  __proto__ (__parent__) /x/g )) { window;yield; }");
tryItOut("for(let y in [5,6,7,8]) with({}) return;");
tryItOut("yield (eval(\"__noSuchMethod__\", <><x><y/></x></>));");
tryItOut("{yield <x/>; }");
tryItOut("/*infloop*/L:do  while(([(({__count__ setter: function(q) { return q; } }))]));");
tryItOut("if(this.__defineGetter__(\"__proto__\", /a/gi)) { if (__proto__ = <><x><y/></x></> % ((__parent__ = #3={a:#3#}) for (__parent__ in 1.3) for each (prototype\f in <x><y/></x>))) /*for..in*/M:for(let <y><z/></y>.x::__parent__ in  /x/g ) {return prototype;export *; } else {|const <y><z/></y>; }}");
tryItOut("L:while((({__proto__ getter: function(y) { yield y; {}; yield y; } })((yield <><\tx><y/></x></>))) && 0){; }\n{++__proto__ | @foo(__parent__ = __iterator__, constructor = constructor); }");
tryItOut("/*for..in*/for(let __parent__ = [(function ([y]) { })(#1=[#1#], true)].some(function (__iterator__, __iterator__) { yield 1.3 } ) in <y><z/></y>) L: return <x><y/></x>;");
tryItOut("/*for..in*/for(__count__ in  '' ) {((new Function(\"yield;\"))).apply__parent__; }");
tryItOut("/*infloop*/for(let [constructor, ({ prop: prototype }), ({ (-1): __parent__,  \"\" : prop })] = [z1]; <x><y/></x> | 1e4.watch(\"prop\", function  __proto__ ()<x><y/><\t/x>); (1.3 >= this.constructor = <x><y/></x> .. __proto__)) {var __noSuchMethod__ = null, prop;__iterator__; }");
tryItOut("with(new (__parent__ = window)\n())export __iterator__;");
tryItOut("L:if(this) {yield <><x><y/></x></>;var prototype; }");
tryItOut("{return [,,z1];yield  /x/ ; }");
tryItOut("/*for..in*/for(var __count__ = eval(\"<><x><y/></x></>\", false) in (new Function)) {/a/gi }");
tryItOut("({ __iterator__: __parent__, __count__: __iterator__ }) = <><x><y/></x></>, prototype");
tryItOut(" /x/g ['prototype'] = constructor;");
tryItOut("continue L;");
tryItOut("/*for..in*/L:for(const [__parent__, __proto__] = 3/0 in <x/>) return <x><y/></x>;");
tryItOut("gc()");
tryItOut("M:if(#0=<x><y/></x>.__parent__) { if (prop = prototype) {{export *;\fexport __iterator__; }/*infloop*/for(__proto__ = <y><z/></y>;  /x/g ; null) {__noSuchMethod__ = {}, constructor; } }//h\n else gc()}");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map) || prototype = <><x><y/></x></>) ; else  if (this) function(y) { yield y; function(q) { return q; }; yield y; } else {yield <x><y/></x>;constructor = prototype; }");
tryItOut("throw StopIteration;");
tryItOut("<x/>\n");
tryItOut("if(*) {export constructor;/*infloop*/L:while(#1=[#1#])export *; } else  if (* ? <x><y/></x> :  \"\" ) {/*infloop*/do return __proto__; while(this\n.__noSuchMethod__); }");
tryItOut("for(let y in [5,6,7,8]) try { __count__ = constructor; } catch(__iterator__) { for(let y in [5,6,7,8]) throw StopIteration; } finally { __noSuchMethod__ = __noSuchMethod__; } ");
tryItOut("/*for..in*/for(let __count__ = prototype =  \"\"  in window) {if( '' ) {} else  if (<x><y/></x>) export constructor; }");
tryItOut("{yield; }");
tryItOut("/*for..in*/\tfor(var __iterator__ in (([1,2,3,4].slice)(<>[15,16,17,18].some(Function,  /x/g  ^= <y><z/></y>)</>)))/*infloop*/do {return false;return; } while((<x><y\t/></x>.__count__ = false));");
tryItOut("do yield ({a1:1}); while((({__noSuchMethod__: __parent__ })) && 0);");
tryItOut("/*for..in*/for([, ({ __parent__: ({ prop: ({ __noSuchMethod__: __proto__ }) }), __count__: ({ __iterator__: prop, __proto__: [] }) })] = () in prop = (__iterator__++ ^ __parent__+=<x><y/></x>)) {/*infloop*/while(-0){(<y><z/></y>); }with({<><x><y/></x></>: <y><z/></y>}) }");
tryItOut("return #1#;\n/*for..in*/for(var [undefined].filter(function (prop, prop) { {} } ) = eval(\"{}\", __iterator__ = 3/0) in \n*.eval(<><x><y/></x></>[this\r])) { }\n");
tryItOut("let (({ (1 for (x in [])): ({ __proto__: ({ \f__iterator__: ({ prop: ({ constructor:  }), prototype: __proto__ }), __noSuchMethod__: ({ prop: [__proto__, [constructor], ], prop: __parent__ }) }), prop: ({ __parent__: ({ __iterator__: constructor, constructor: __proto__ }) }) }) }) = @foo, constructor) { {throw *::* }\t }");
tryItOut("if((<x><y/></x>++)) { if ([__count__, ] /= prop[prototype for each (__parent__ in )]) {const __noSuchMethod__; }} else (undefined);");
tryItOut("if(*.watch(\"__parent__\", <x/>)) { if (null >>= window) {var __count__ =  '' , __noSuchMethod__ = arguments; } else {gc()(0.1); }//h\n}");
tryItOut("__iterator__ = prototype;");
tryItOut("if((__proto__ = --(uneval(this)))) { if ((({ set __parent__ __parent__ (__count__, prop) { return (@foo.propertyIsEnumerable(\"prototype\")) } , __count__ setter: (new Function(\"\")) }))) {if(__proto__) {return <y><z/></y>; } else  if (<x><y/></x>) (({a2:z2}));\f }} else {yield *::*;return window; }");
tryItOut("/*infloop*/M:do {break ; } while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("{yield; }");
tryItOut("{}");
tryItOut("if(delete ((prototype = <x><y/></x>))[prototype.__noSuchMethod__ setter= <y><z/></y>]) return <x><y/></x>; else {constructor, constructor;export *; }");
tryItOut("{throw <><x><y/></x></>;continue L; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in ((function () { yield; } )((new function(y) { yield y; return;; yield y; }()))))/*infloop*/L:for(const prototype = (new this(<><x><y/></x></>)); <><x><y/></x></>; <x><y/></x>) {continue ; }");
tryItOut("let(__proto__, constructor = [1e+81]) ((function(){return 1e4\t instanceof __iterator__.__count__ getter= eval;})());");
tryItOut("if((([11,12,13,14].map) ? if(<>\ttry { return; } catch(__count__) { yield @foo; } finally { {} } </>) { if (__parent__) yield *::*;} else {function  __noSuchMethod__ (__noSuchMethod__) { yield [z1,,] }  } : __iterator__ = <y><z/></y>.unwatch(\"__parent__\"))) throw StopIteration;");
tryItOut("if(false.eval((undefined.hasOwnProperty(\"__noSuchMethod__\")))) {yield;{} }");
tryItOut("/*for..in*/for(var [constructor, __proto__] = __parent__ in  \"\" ) {yield; }");
tryItOut("if(({ __proto__: prototype }) = (constructor = 1.2e3)) {/*infloop*/while(<x><y/></x>)break M;export prop; } else  if (@foo.__lookupSetter__(\"__parent__\")) {<x><y/></x>;yield; }");
tryItOut("prototype = this;\n/*infloop*/for(prop = <x/>; <><x><y/></x></>; null) yield prototype;\n");
tryItOut("continue L\n");
