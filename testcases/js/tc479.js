tryItOut("/*for..in*/for(const constructor = <x><y/></x>.( else ) in <x><y/></x>) /a/gi");
tryItOut("M:do {let prototype = 1e+81;{} } while(( \"\" ) && 0);");
tryItOut("/*for..in*/for(prototype in function::__parent__) /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><x><y/></x></>) {const __parent__; }");
tryItOut("let([constructor, [], [, ({ __proto__: ({ __noSuchMethod__: prototype, prototype: __noSuchMethod__ }) })], __noSuchMethod__, ], ({ __count__: ({ __iterator__: ({}).hasOwnProperty, prop: ({ prop: __iterator__ }) }) }) = __count__) ((function(){let(({ __proto__: ({ __parent__: [], prop: ({ __iterator__: __parent__ }) }) }), ({ __count__: ({ __iterator__: __proto__ }), constructor: [] }) = <>prototype</\t>(<x><y/></x>, window) >>= __noSuchMethod__) { let(constructor) ((function(){throw setter;})());})());");
tryItOut("if((__parent__ >> __count__)) const __parent__; else (<><x><y/></x></>)\nwhile(((__parent__).__defineSetter__) && 0)var constructor = [z1,,], constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in [[]]) {yield; }");
tryItOut("/*infloop*/M:for(let ({ __iterator__: ({ __parent__: ({ constructor: ({ __noSuchMethod__: __iterator__ }), __noSuchMethod__: __count__ }) }) }) = <x/>.__iterator__.prototype; this.__defineSetter__(\"prototype\", ([15,16,17,18].some(({}).__lookupGetter__, (eval).call(*, 1e4)))); ((__iterator__ = __proto__.__parent__ setter= (new Function(\"return;\"))[yield <x\t><y/></x>]).__defineSetter__)(/a/gi(), __iterator__.valueOf(\"number\"))) {if(yield <><x><y/></x></>.unwatch(\"__noSuchMethod__\")) { if ((function  __proto__ (__noSuchMethod__) { yield true } ).call(<x><y/></x>, )) @foo;} else function(q) { return q; }(<x><y/></x>); }");
tryItOut("/*for..in*/M:for(var __count__ in  /x/g ) switch(null) { case 4:  }");
tryItOut("/*for..in*/for(delete = 3/0[.2] in break M;) function(q) { return q; }");
tryItOut("L:if(new ('fafafa'.replace(/a/g, Math.pow))(false.__parent__, [*::*].some(1.2e3))) { if (__proto__.__defineSetter__(\"__proto__\", [1,2,3,4].map)) yield; else throw __noSuchMethod__;} const __iterator__;");
tryItOut("yield false;");
tryItOut("/*for..in*/for(var __iterator__ in ((({}).hasOwnProperty)(*::*))){return;break ; }");
tryItOut("M:if(({constructor getter: __proto__, __proto__:  \"\"  })) gc()");
tryItOut("[] = __proto__;");
tryItOut("L: {break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in  '' .__parent__) \f;let __proto__ =  '' , constructor = <x><y/></x>;");
tryItOut("do export __iterator__; while((__iterator__ = this.@foo) && 0);");
tryItOut("switch(__noSuchMethod__, __parent__) { case 5: {__iterator__; }break; return;break; /*for..in*/for([__proto__, constructor] = prop in *) {; } }");
tryItOut("(1.3);");
tryItOut("with({prop: ()()}){/*infloop*/for(<><x><y/></x></>.hasOwnProperty(\"__iterator__\") % <x><y/></x>; constructor.__noSuchMethod__ getter= true; <><x><y/></x></> >>> this) {return <x><y/></x>; } }");
tryItOut("if(__count__) { if (\t0[<x><y/></x>]) {return 1e81;{} }} else {export __count__;; }");
tryItOut("/*infloop*/for(const \f<><><><x><y/></x></></></> = #0=({prop: [,,z1]}); let (__proto__, __iterator__) <x><y/\t></x> = <><\fx><y/></x></> <<= ~false; (prototype(1e81)+=<y><z/></y>.yoyo(<y><z/></y>))) yield;\ncontinue ;\n");
tryItOut("/*infloop*/M:while(<><xxx {__count__}={yield __noSuchMethod__.__proto__ = [true if ([,])]} /></\f>)return 0x99 .. 4.;");
tryItOut("let (getter, prototype) { switch([z1,,].hasOwnProperty(\"__proto__\")) { case 8: break; default: break; gc()break; case  \"\" : break; yield;break;  } }");
tryItOut("L:if(__noSuchMethod__) {<x><y/></x>;; }");
tryItOut("L:with(__iterator__)prototype = <><x><y/></x></>\n{}");
tryItOut("/*infloop*/for(/*\n*/true.__defineGetter__(\"constructor\", (default: case true: ({a2:z2});).call); (default: prop, prop = <><x><y/></x></>;.unwatch(\"__count__\")); __proto__.<x><y/></x> = 033 >  /x/ ) throw *::*;");
tryItOut("if(new (({ '' : <x><y/></x>, constructor: -3/0 }))(__noSuchMethod__ = 1e+81, prototype)) ; else  if (([1,,].__defineSetter__(\"__noSuchMethod__\", function (__noSuchMethod__)@foo) < * ^ (++__proto__ / function ([y]) { }))) /*infloop*/for(const prop = window; <><x><y/></x></>; __parent__) let __parent__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <>(__parent__) = ((<><x><y/></x></>)(true) = __proto__ = <x><y/></x>)</> in (__iterator__ = constructor.__proto__ = #1=[#1#])) {with(eval(\"gc()\", (~1e81))){let __count__, __proto__;export *; } }");
tryItOut("switch((function(q) { return q; })) { case : const __iterator__, __noSuchMethod__\nbreak; default: (({a1:1}));let __proto__ =  \"\" ;return;break; prototype;break; case  '' :  }");
tryItOut("L: {with(<><x><y/></x></>){({}).__lookupGetter__{} } }");
tryItOut("{gc()(@foo); }");
tryItOut("{{}break ; }");
tryItOut("Math.pow");
tryItOut("/*infloop*/for(false; (<x/> ? <><x><y/></x></> : 3); ([15,16,17,18].some(Math.pow, <x><y/></x>))) {const __proto__ = <y><z/></y>; }");
tryItOut("/*infloop*/L:while(@foo)__count__ = this;");
tryItOut("yield function::__parent__;");
tryItOut("__parent__.__proto__\n/*infloop*/for(let [[, __parent__, ], prototype, __count__, ({  for each (constructor in *::*): prop })] = prototype.__iterator__; (<><x><y/></x></>)(); this.__defineSetter__(\"__proto__\", function  prototype (__parent__)\t { return <x><y/></x> } )[(prototype.__parent__ = <x><y/></x>)]) let __noSuchMethod__ = #3={a:#3#}, prop = <y><z/></y>;");
tryItOut("L: const prop = false, __proto__ = [,,];");
tryItOut("/*for..in*/for(let __count__ = window in @foo) gc()if((this != 1.3 > * >>> constructor)) return  /x/ \n else {yield 3/0; }");
tryItOut("/*infloop*/do {M:if(this.zzz.zzz) {try { yield 1.2e3; } catch(__parent__) { let __proto__ = <x/>; } finally { export prop; }  } else  if ((this.zzz.zzz)) {throw  '' ;export __noSuchMethod__; }do {L: yield; } while(([( /x/g (@foo) ? false : constructor = -3/0) if (033)]) && 0); } while(prototype.__noSuchMethod__);");
tryItOut("L: {if(0x99) {{}yield this; } else  if (@foo) yield window; else {eval } }");
tryItOut("");
tryItOut("/*for..in*/for(var <x><y/></x> in __parent__.__iterator__) {do {if(prototype ? <y><z/></y> :  \"\" \r) 0x99 else  if ((-1)) export *; else L:with(\tprop ? <x/> : __noSuchMethod__){[,];export *; } } while((<x/>) && 0); }");
tryItOut("M:switch(<x><y/></x>) { default: break; const __noSuchMethod__ = window;return 0x99;case this: yield window;case 7: let __proto__;break; yield (function ([y]) { })();case 6: break; break; case [z1]: constructor = <><x><y/></x></>, constructor;break; export __noSuchMethod__;break;  }");
tryItOut("/*for..in*/for(__proto__ = __parent__.(<x><y/></x>) in <y><z/></y>) /*infloop*/for(__iterator__ = ({}); *::*;  \"\" ) {var __parent__; }");
tryItOut("/*infloop*/while(((String()(<x/>, null[, , constructor, ] ), [,,]))\f !== undefined)){let (constructor = __count__ = this, __count__ = <x/>.__proto__ = *::*) { gc() } }");
tryItOut("/*infloop*/while((prototype = prototype)[<x><y/></x>]){return  /x/ ; }");
tryItOut("while(({}) && 0){return false; }");
tryItOut("/*infloop*/L:while((__iterator__%=[1]))/*infloop*/for(var __count__ = eval(\"true\", (function ([y]) { })()); void @foo; window) {export *; }");
tryItOut("with({prop: ({ get __proto__(constructor) { ; }  })}){var __count__; }");
tryItOut("if(({__iterator__: 1e81 })) {return yield;;yield; } else {function (__noSuchMethod__, prototype) { yield @foo }  }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if() { if ((this.__defineGetter__(\"prop\", function (prop, prop) { yield true } ))[]) return;\nwith({__count__: @foo}){{}Function }\n} else {/*for..in*/L:for(let constructor in this) (<><x><y/></x></>); }");
tryItOut("{return <y><z/></y>;return  /x/g ; }");
tryItOut("let (__iterator__, __proto__) { /*for..in*/M:for(var prototype in ((function(q) { return q; })(<x><y/></x>)))__iterator__ = this, prototype; }");
tryItOut("__proto__.__iterator__ = \f__iterator__;");
tryItOut("if(this) {; }");
tryItOut(" /x/g ");
tryItOut("/*for..in*/M:for(let prop in <x><y/></x>) return *;");
tryItOut("L: export *\n");
tryItOut("(try { return this; } catch(__iterator__ if <><x><y/></x></>) { __proto__ } catch(__iterator__) {  } finally { function (x::__parent__) { yield  /x/g  }  } );\n;\n");
tryItOut("/*infloop*/L:for((<><x><y/></x></>.__lookupSetter__(\"__iterator__\").__proto__); (new ((new Function).apply)()); window.eval(<><x><y/></x></>)) {const prop; }");
tryItOut("{continue M; }\n");
tryItOut("while((prototype = 0x99.__proto__) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x/>) const __parent__;");
tryItOut("if(((p={}, (p.z = this)())) , *::*.__defineSetter__(\"__iterator__\", @foo)) {return window;yield; }");
tryItOut("/*for..in*/for(__count__ in (undefined.prototype =  \"\" )) {yield set;/*infloop*/for(let __parent__ = (undefined.prop); function(q) { return q; }(); let (get) *\t) yield [,,z1]; }");
tryItOut("let(__proto__, prototype = -1) ((function(){return 4.;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((__count__) in 3.141592653589793) {{}let prototype = window; }");
tryItOut("if(yield <y><z/></y>) let constructor; else  if ((window.throw({}).__count__ = (<x/> !== this))) ");
tryItOut("/*infloop*/while(constructor.valueOf(\"number\")){{export yield <><x><y/></x></>;; }with({__noSuchMethod__: <><><x><y/></x></></>}){/*infloop*/L:for(var default: case this: case 5: export constructor;break; break; case  \"\" : yield;break; case 0: (<><x><y/></x></>);case prototype: break; return;break; case 4: case 6: break;  = __proto__; 1.3; 1e-81) {gc()return; } } }");
tryItOut("yield *::*; const prop;");
tryItOut("; const constructor;");
tryItOut("{/*infloop*/while(true); }");
tryItOut("switch(<><x><y/></x></> % <x><y/></x>.unwatch(\"__proto__\").__defineSetter__(\"prototype\", Math.sin)((5.0000000000000000000000.prototype , ([ ''  if (<x><y/></x>)])))) { default: case 4: break; case (typeof prop.(true).throw(<x><y/></x> === window)): break; case [prototype] = ({__proto__ setter: ((Math.sin).apply).apply }): /*for..in*/for(let [11,12,13,14].map['prototype'] in *) {yield;yield <x><y/></x>; }case ([, __noSuchMethod__, ] = ): break; {gc()* }break; /*for..in*/for(const __noSuchMethod__([15,16,17,18].some('haha'.split, <y><z/></y>)): constructor:  { const __parent__ = *, __noSuchMethod__; } .__lookupSetter__(\"constructor\") in <y><z/></y>) {throw this; }case 9: export *;break; gc() }");
tryItOut("if( '' ) {this } else  if (<><x><y/></x></>) {__parent__ = function ([y]) { }, delete; }");
tryItOut("if(new Boolean(prop)) {/*infloop*/L:for(( /* Comment */ \"\" )\t; 1e81 >>>=prototype = false; +<x><y/></x>) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <><x><y/></x></>) { } }/*infloop*/for({break M; }; true.__defineGetter__(\"__proto__\", ( '' ).watch) << __count__%= /x/ ; <x/> .@ <x/>) {throw true;gc() } } else {;with(((prototype) = -1))return #1=[#1#]; }");
tryItOut("{with({prototype: new Function & (<x/>.isPrototypeOf(true))}){}export __iterator__; }");
tryItOut("{(*::*); }");
tryItOut("do let (__proto__) {  } while((__count__ = constructor) && 0);");
tryItOut("L: do {yield; } while(( /x/ ) && 0)\nreturn;");
tryItOut("/*infloop*/M:for(var constructor; (delete ([undefined].filter((0/0).watch))); new (*::*)()) {return <x/>;{export *; } }");
tryItOut("{return; }");
tryItOut("if(0x99) {throw @foo;*::* } else  if (<y><z/></y>) ;");
tryItOut("if(null) { if (this) return;} else \f");
tryItOut("L:switch(+<y><z/></y>) { default: break; case 5: L:if(({ __proto__: constructor }) = false) export prop; else  if ((Iterator((\r({}).hasOwnProperty(@foo, (function ([y]) { })())\r), <x/>) >>>=__count__.__lookupGetter__(\"<x><y/></x>\"))) (<><x><y/></x></>);/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in  /x/ ) {throw  /x/ ; }break; break;  }");
tryItOut("M:do {while((<x/>.__proto__ = <y><z/></y>) && 0)return [1,,]; } while(((__noSuchMethod__ if (eval(\"window\",  /x/ )))) && 0);");
tryItOut("if(true) let __count__ = undefined, __parent__; else {{}/*infloop*/for(let __count__; this; ) {const __noSuchMethod__; } }");
tryItOut("if((let (prop = false, prototype) *.__lookupGetter__(\"__count__\"))()) { if (((prototype = <><x><y/></x></>) ? new Function(__proto__ = <><x><y/></x></> &= (\f[window]), [11,12,13,14].map) : yield __iterator__ = ({}) >= (([z1] .@x:: function(id) { return id }) ? __parent__ ^ window : this\t.__defineGetter__(\"__iterator__\", function(q) { return q; })))) {/*infloop*/L\t:do {( '' );export constructor; } while( \"\" .__noSuchMethod__);{yield; } } else 1e-81;\ngc()\n}");
tryItOut("{\twith({prop: __count__}){__proto__ } }");
tryItOut("if(false) { if (<x/>) gc()} else {prototype = <x><y/></x>, __parent__; }");
tryItOut("let(({ __parent__: prop, constructor: constructor }), __parent__ = (prototype)) ((function(){/*infloop*/for(({ constructor: __count__, __proto__: __proto__ }) = function::__iterator__ = __noSuchMethod__\f; (<><x><y/\f></x></> !== *::*); ((<><x><y/></x></> if (.2)))) { }})());");
tryItOut("if((__iterator__.__defineGetter__(\"__proto__\", new Function))) function  __iterator__ (__proto__) { export *; }  else  if (this.zzz.zzz) [1,2,3,4].slice else {{} }");
tryItOut("/*infloop*/do export prop; while(__count__);");
tryItOut("{L: export *\n; }");
tryItOut("/*infloop*/for(('haha'.split)() != ((<x><y/></x> & arguments .. window >>> false)); [[]]; true\f < __parent__.__lookupGetter__(\"constructor\")) yield <><x><y/></x></>;");
tryItOut("/*for..in*/M:for(const prototype = (<><x><y\r/\t></x></>.__lookupGetter__(\"prop\")) in <y><z/></y>) prototype = ({a1:1}), prop;");
tryItOut("(__iterator__)\n");
tryItOut("if((033 | <x><y/></x>.throw(__parent__ = this))) {M:with(<><x><y/></x></>){<x><y/></x>; } } else {return; }");
tryItOut("/*for..in*/for(const *::* in (((new Function(\"const __parent__, __proto__ = [1];\")))(throw <x><y/></x>;))){yield; }");
tryItOut("switch(*::*) { default: L: {L: return <x><y/></x>; }break; /*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in window) case 1: yield typeof false;break; while((@foo :: (#0=[ \"\" ])) && 0)gc() }");
tryItOut("if(__noSuchMethod__) { if ( { return ({ __iterator__: ({ __count__:  /x/g , __parent__: ({ <x><y/></x>: ({ __parent__: __noSuchMethod__, __parent__: __proto__ }) }) }) }) = <y><z/></y>\r } ) /*infloop*/L:do {gc()yield; } while(new Boolean(prototype)); else yield;}");
tryItOut("{function (__count__, __parent__) { yield <><x><y/></x>\f</> } (<><x><y/></x></>); } const __count__;");
tryItOut("/*infloop*/M:for(const __iterator__ = ({__count__: (__count__ &= 1e81) }); 1e+81; let (__proto__) [[]]) return;");
tryItOut("L:with({__count__: <xxx {prototype}={(this.__defineGetter__(\"__count__\", [1,2,3,4].map))((p={}, (p.z = __proto__ = function ([y]) { })()),  \"\" .__defineGetter__(\"__noSuchMethod__\", Math.sin))} />})([,])");
tryItOut("/*infloop*/do {continue L; } while(!*);");
tryItOut("/*for..in*/for(\tlet [__iterator__, __count__] = (<x><y/></x> ? #3={a:#3#} : <y><z/></y>) in <y><z/></y>) let __parent__;");
tryItOut("switch(false @ *::*) { default:  }");
tryItOut("/*for..in*/for(var prototype in (((1 for (x in [])))( ''  %= (constructor))))export __noSuchMethod__\n");
tryItOut("if( '' ) { if ((<y><z/></y> = arguments).watch(\"__count__\",  /x/g )) {export __proto__; } else /*infloop*/while(null)//h\n{export prop;throw  \"\" ; }}");
tryItOut("with({}) return new *::*(<x><y/></x>, window);");
tryItOut(" import ");
tryItOut("/*infloop*/do {switch([]) { case <y><z/></y>: export __proto__;break;  }yield *; } while(\n<bbb xmlns=\"<x><y/></x>\"></bbb>);");
tryItOut("throw __noSuchMethod__;");
tryItOut("L:with((undefined <= [[]]))const constructor = this;");
tryItOut("if((new gc(__proto__))) {constructor\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in *) {yield -0; } }");
tryItOut(" \"\" ");
tryItOut("{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (function ([y]) { })()) {M:with([z1])export *; }");
tryItOut("do {__parent__ } while((0/0) && 0);");
tryItOut("throw __proto__;");
tryItOut("L:if((prototype = constructor)) { if (undefined >= 0.1) {throw  '' ;{} } else ( \"\" );}");
tryItOut("with({}) { throw <x/>; } ");
tryItOut("while((void <y><z/></y>) && 0){; }");
tryItOut("{ }");
tryItOut("/*for..in*/for(var (__parent__) in (('haha'.split)((({ get __iterator__ constructor (__iterator__) { yield undefined } , constructor: (-1) })).__lookupGetter__(\"__count__\"))\f))break ;");
tryItOut("/*infloop*/L:for(let function::prop = undefined; __count__;  /x/g ) {prototype }\n/*for..in*/M:for(constructor in (((__count__).watch)(@foo.unwatch(\"__count__\"))))const __iterator__ = <><x><y/></x></>, prop;");
tryItOut("if( /x/g ) {(<x><y/></x>); } else {gc() }");
tryItOut("/*for..in*/for(prototype in <x><y/></x>) var __parent__\n/*for..in*/L:for(__parent__ in ((window)(<y><z/></y>)))return;");
tryItOut("/*for..in*/for(var __count__ = #0=[__proto__ = ({ __iterator__: function::prototype }).eval(*::*[<x><y/></x>])] in  ) /*for..in*/for(const (window)(\n '' ) in (((let (__proto__, __noSuchMethod__) *::*))(\n<x/> ? prop = 1e81 : __parent__.__iterator__ setter= function  __count__ () { yield __parent__ } ))){{throw null; } }");
tryItOut("if(this.zzz.zzz) let __proto__ = <x><y/></x>; else  if (Exception()) export *\n(false); else {; }");
tryItOut("if(<y><z/></y>) { if (<><x><y/></x></>.@*) { } else let ;}");
tryItOut("/*for..in*/for(var [prop, __parent__] = yield (prop.__parent__ setter= __iterator__.(<><x><y/></x></>) &= [15,16,17,18].sort(function (constructor) { yield [1,,] } \t, <x><y/>\f</x>)) in ({ __parent__: ({ __proto__: __parent__ }) }) = (__noSuchMethod__.__count__)) {\fthis.zzz.zzz; }");
tryItOut("yield \f<><x><y/></x></>.propertyIsEnumerable(\"prototype\") += (({}).__lookupGetter__).call((@foo.@*), <y><z/></y> ? <x><y/></x> : <x><y/></x>, [,,z1]);");
tryItOut("prop: __parent__ = .2");
tryItOut("if(__parent__ = (yield window.throw( /x/g ))\n) { if (<y><z/></y>.yoyo(([<x><y/></x>]))) {gc } else if([,,] |= [z1]) { if (((p={}, (p.z = 1e81)()).__lookupSetter__(\"constructor\"))) let prototype = undefined;} else { }}");
tryItOut("{throw 5.0000000000000000000000;const __proto__ = {}; }");
tryItOut("yield;\n[1,2,3,4].map\n");
tryItOut("/*for..in*/constructorfor(var [constructor, __noSuchMethod__] = <x><y/></x> in <x/>) <x><y/></x>;");
tryItOut("while(( *= (new (<x/>.function::constructor))) && 0){throw undefined\n\t[,,]; }");
tryItOut("while((__proto__ = <y><z/></y>) && 0)yield __proto__;");
tryItOut("{if(({a1:1})) { if (undefined) gc() else export prototype;}yield [z1]; }");
tryItOut("let(__iterator__ = true, __iterator__) { export __noSuchMethod__;");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = prototype getter: <x/> =  \"\"  in this) {[1,2,3,4].map }");
tryItOut("let (prop, prop = 3) { let __parent__ = 3.141592653589793, __parent__; }");
tryItOut("if( \"\" ) { if (<><x><y/></x></>) {return; } else {__parent__ = __parent__, @foo = 5.0000000000000000000000; }}");
tryItOut("/*infloop*/L:for(var prototype = (.2\t for each (prop in (function ([y]) { })()--) if (<><x><y/></x></>));  '' ; prototype = [,,z1]) do {<!--yy--> } while((*::*.@*) && 0);");
tryItOut("__proto__: (({ prototype: prototype, ([15,16,17,18].map(eval, this)): [prop, ({ constructor: prototype, __parent__: [] }), , , constructor] }) = (prop = -1) >>>=true.__lookupGetter__(\"__noSuchMethod__\").constructor.yoyo(<> </>))");
tryItOut("break M;");
tryItOut("M:if(((null).__defineSetter__).call(new (/a/gi)(<y><z/></y>,  /x/ ), )) { if ((__count__ = __iterator__)) if([11,12,13,14].map) {const prop, __proto__ = <><x><y/></x></>;return; } else  if (((__noSuchMethod__ = false).@*.__noSuchMethod__ = ((uneval(<><x><y/></x></>))))) {if(#1=[#1#]) { if (<x><y/></x>) ;} else {'haha'.splitlet __iterator__ = .2; }export __parent__; } else {L:if(@foo) {__proto__ = <><x><y/></x></>;{} } else  if (([false for each (__parent__ in @foo)])) {/*infloop*/M:do yield {}; while(1e-81); } else {gc() for (__parent__.prop in null) if (<x><y/></x>) } }}");
tryItOut("let(prototype, __noSuchMethod__) ((function(){{}})());");
tryItOut("switch((\n( /x/g ))) { default: case eval(\"throw  '' ;\", <><x><y/></x></>): yield <x><y/></x>; }");
tryItOut("if(new Boolean( /x/ )) {/*for..in*/for(const <x/>.__count__ in <y><z/></y> ? window : #3={a:#3#}) {(@foo);/*for..in*/L:for(let [__proto__, prototype] = this in prototype) export prop; } } else  if (((-({ __proto__: prototype }) = prototype.([z1])) || ((({a2:z2}))(prop, <><x><y/></x></>)))) with(constructor: (this.zzz.zzz)){throw <x/>; }\nyield *;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let ({ prop: ({ prototype: [__iterator__, ], constructor: [__proto__.constructor, , , ({ prop: ({ __noSuchMethod__: prototype }) }), ] }), prototype: ({ constructor: [__proto__], __parent__: ({ prop: __noSuchMethod__, __proto__: __count__ }) }) }) = (this.__lookupSetter__(\"__parent__\")); ({ prop: case __proto__: break; ;break; case 8: yield 0/0;break; yield <y><z/></y>;break; yield this;break;  })(*.constructor); (yield (__noSuchMethod__ & {}))) ;");
tryItOut("/*infloop*/\rfor([({ __noSuchMethod__: [] }), [({ __parent__: prototype, __iterator__: __proto__ }),  for (/*\n*/__parent__ in __iterator__) for (__iterator__ in this), ], , ({ __count__: __iterator__, prop: constructor }), ] = <><x><y/></x></>.__proto__ = <x/>; <><x><y/></x></>()[(function ([y]) { })() , 3 .@ this.zzz.zzz]; yield  '' [this]) yield;");
tryItOut("if((<y><z/></y>.@*)) var constructor, prop; else {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in #3={a:#3#}) yield true;");
tryItOut("if(constructor) gc() else (3/0)\n<x><y/></x>;");
tryItOut("L:do {{} } while(( ''  &= <><x><y/></x></>) && 0);");
tryItOut("with((eval(\"yield <x><y/></x>;\",  \"\" ))){throw <><x><y/></x></>;gc() }");
tryItOut("if(window) { if (({})) yield <x/>;} else {const __proto__;throw <x><y/></x>; }");
tryItOut("try { return -1; } finally { prototype; } ");
tryItOut("let __proto__\ngc() const prototype = this.__defineSetter__(\"prop\", function(y) { yield y; const constructor, __parent__;; yield y; });");
tryItOut("/*for..in*/L:for(let __parent__ in true) ");
tryItOut("L: {const \tconstructor = [,,]\n(null); }");
tryItOut("do /*infloop*/do break ; while(var __count__ = [[1]], __parent__); while((0.unwatch(\"constructor\").hasOwnProperty(\"__noSuchMethod__\")) && 0);");
tryItOut("L:while(((((Math.sin).call).call(*::*, *))) && 0)return ({__proto__, prototype: prototype });");
tryItOut("/*for..in*/for(const prop = eval(\";\",  /x/ ) in ((1 for (x in []))()(([( /* Comment */this) for ((__proto__) in this)]), #1=[#1#][*]))) for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if((eval(\" \\\"\\\" \", <x/>) for each (prototype in constructor: <x><y/></x>) for (<x><y/></x> in this) for (prop in constructor))) if(<x><y/></x>) { if (<x/>) {{}var __count__, function::constructor = <x/>; }} else yield; const __noSuchMethod__; else  if (this.zzz.zzz) {if((uneval((({}).hasOwnProperty)()))) {yield @foo; } } else {M:with({__iterator__:  \"\" }){__count__; }if((new window(null))\n) ; else  if ((yield (yield prop))) {} else let prototype = prototype, @foo; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in new ( /x/g )() / ({a2:z2})) \tL:with({__proto__: window.isPrototypeOf(constructor)})const __count__ = <><x><y/></x></>, constructor = 1e81; }");
tryItOut("with({prop: 1e81.__defineSetter__(\"prop\", ({constructor: <x><y/></x>}))  })if(window) { if ([[]]) yield __iterator__;} else {yield; }");
tryItOut("gc()\nexport *;");
tryItOut("if((({prop: (--[z1,,]), __parent__: (yield (*::*).call([z1], *)) })).__noSuchMethod__) { if (~((<x/>) + this)) {prop =  /x/g ; }\nreturn;\n else {export constructor; }}");
tryItOut("if(x::__count__ = function::__count__;) {__proto__if([[1]]) const __count__; else export __proto__\n } else  if ((__iterator__ = ({__count__ getter: ([15,16,17,18].map(new Function, *)).__defineSetter__, x::constructor: <x><y/></x>.watch(\"__iterator__\", function (prototype, __parent__) '' ) }))) export *;");
tryItOut("with({__proto__: this.__defineGetter__(\"prop\", (1 for (x in [])))}){function () { yield <x><y/></x> } return *::*; }");
tryItOut("throw StopIteration;");
tryItOut("(__count__)\nvar \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each(const constructor.__parent__ in <x><y/></x>.constructor) {}");
tryItOut("with(null.*)export *;");
tryItOut("/*infloop*/L:while(<><x><y/></x></> >>> \f*){; }");
tryItOut("/*infloop*/M:while((new (<><x><y/></x></>)(constructor, <x/>).constructor)){const __iterator__ = function ([y]) { }; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in prop.prototype setter= Function) if((-0)) yield; else  if (<x><y/></x>) prop = .2");
tryItOut("/*infloop*/for(null; #1=[#1#] &= this.__defineSetter__(\"prototype\", function (__parent__) { yield ({a2:z2}) } ); !<y><z/></y>) {gc()break ; }");
tryItOut("if(eval(\"throw null;\", true)) yield; else  if (prototype = @foo) <><x><y/></x></>; else {let __count__, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("/*infloop*/for(<x><y/></x>.@*; (#2=<><x><y/></x></>.propertyIsEnumerable(\"prototype\")); constructor) {return;break M; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var [__proto__, __count__] = __noSuchMethod__ = (Function)(*::*, window) in (#0=({prop: .2}))) export *;");
tryItOut("let([({ __parent__: constructor, prototype: [] }), [, ], ({ __noSuchMethod__: ({ constructor: ({ __count__: __count__, __parent__: __proto__ }), prototype: [constructor, getter, , , ] }), __iterator__: ({ __noSuchMethod__: __parent__ }) }), ] = ((033 for each (__parent__ in ({a1:1}))) !== ((({}).__lookupGetter__).call( '' , )).propertyIsEnumerable(\"__iterator__\"))) { try { throw @foo; } finally { this.zzz.zzz; } ");
tryItOut("with({}) return (__parent__ if (<x/>));");
tryItOut("for(let y in [5,6,7,8]) with({}) { return; } ");
tryItOut("if() { if (({ prop: ({ __count__: __parent__ }) }) = \n*::* >>= *) {yield;<x><y/></x> } else yield  '' ;}");
tryItOut("return\n");
tryItOut("yield this;\nthrow <><x><y/></x></>;\n");
tryItOut("{var __count__, constructor = *;var prototype = <y><z/></y>; }");
tryItOut("/*infloop*/for(const __parent__; <x><y/></x>; <><x><y/></x></>) __parent__;");
tryItOut("[1,2,3,4].slice\nyield <x/>;");
tryItOut("{/*infloop*/for(var ({ __parent__: ({ __noSuchMethod__: __count__, __proto__: constructor }) }) = [this if (true)].hasOwnProperty(\"__iterator__\"); ( /x/ .valueOf(\"number\")); this.zzz.zzz) this }");
tryItOut("/*infloop*/L:for(var constructor; constructor = (this.__defineSetter__(\"__parent__\", function (prototype, __noSuchMethod__) { throw __iterator__; } )); \nnew (Math.sin)()) {((-1));var __count__; }");
tryItOut("return @foo\n");
