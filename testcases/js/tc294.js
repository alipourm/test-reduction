tryItOut("let(prop = let, __parent__ = window) ((function(){(<x><y/></x>);})());");
tryItOut("/*for..in*/for(var __iterator__ in (( /* Comment */(function::__parent__.__proto__ = prototype))(\n__noSuchMethod__ = [11,12,13,14].some))){while(( /x/ .__lookupGetter__(\"__noSuchMethod__\")) && 0)break M;{ } }");
tryItOut("throw *;");
tryItOut("/*for..in*/for(__proto__ in ((Math.pow)(*.yoyo(1e81) &= (*::*())))){throw #3={a:#3#}; const __parent__;; }");
tryItOut("/*for..in*/for(__parent__ = constructor.(<><bbb xmlns=\"__parent__.__iterator__\"><> /x/ </> </bbb></>) in undefined) ( \"\" ); const prop;");
tryItOut("with({__iterator__: __iterator__ = __count__ ^=  '' })export __noSuchMethod__;");
tryItOut("L: {export *\n<x><y/></x>;/*for..in*/for(var constructor = (eval(\"yield;\", 3.141592653589793)) in ({a2:z2})) {var __parent__ = <y><z/></y>, __count__ = window; }\t }");
tryItOut("switch(@foo) { case <x><y/></x>: yield this;default: return <><x><y/></x></>;break; case 7: break; throw  '' ;export prop; }\nvar constructor = window, prototype;");
tryItOut("yield  \"\" ;");
tryItOut("if((*[<y><z/></y>]) ? <x/> : prototype = <><x><y/></x></>) { if (~[[11,12,13,14].sort].map(function  __count__ () { return <><x><y/></x></> } )) if(*--) let __iterator__ = __iterator__, __proto__ = <x><y/></x>; else  if (((yield <x><y/></x>))) export __proto__;} else {3; }");
tryItOut("/*for..in*/L:for(yyy in ((function(q) { return q; })(null)))undefined;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("with({__count__: window ? undefined : 3.141592653589793}){export __parent__; }");
tryItOut("/*infloop*/do export __parent__\n while((1 for (x in [])));");
tryItOut("{}");
tryItOut("/*infloop*/for(var __noSuchMethod__; (({ __noSuchMethod__: __proto__ }) /= __parent__.function::__noSuchMethod__); ((({}).hasOwnProperty).call(, eval(\"if(<><x><y/></x></>) let prop; else  if (*::*) const prototype;\", ([<y><z/></y>].filter(function () { const constructor; } )))))) do if((<x><y/></x>.__lookupSetter__(\"__proto__\"))) { if (prototype.unwatch(\"__parent__\")) break ; else yield constructor;}\f while((__proto__%=<><x><y/></x></>) && 0);");
tryItOut("{__parent__; { return  /x/g  }  }");
tryItOut("M:with({__noSuchMethod__: this << <x><y/></x> ? <><x><y/></x></> : <><x><y/></x></>.__lookupGetter__(\"prototype\")})return;");
tryItOut("{}");
tryItOut("if(5.0000000000000000000000) {yield;{} }\n__proto__.__count__ = ({ prototype: __proto__, __parent__: ({ __parent__: __parent__ }) });");
tryItOut("do /*for..in*/for(const [__noSuchMethod__, __iterator__] = void 5.0000000000000000000000 in @foo) {return;__proto__, __parent__; }[1,2,3,4].slice\n while(((5.0000000000000000000000.throw(#1=[#1#]).isPrototypeOf(( /* Comment */new prop())))) && 0);");
tryItOut("L: with({__noSuchMethod__: <x/>}){const , prop;let prototype, prop = *; }");
tryItOut("return <><x><y/></x></> >>= window.prop = __noSuchMethod__ = #1# & ('fafafa'.replace(/a/g, Math.sin));");
tryItOut("yield ({__count__: <y><z/></y>.hasOwnProperty(\"prototype\"), __parent__ setter: gc }).__iterator__;");
tryItOut("export prop\nbreak L; const __iterator__;");
tryItOut("/*for..in*/L:for(var <x><y/></x>.constructor in 0.1) {yield *;yield this; }\f");
tryItOut("let (__noSuchMethod__ = (*::* *= #3={a:#3#}) = this) { {export __parent__; } }");
tryItOut("L:while((function(id) { return id } & [,]) && 0){(({a2:z2}));{} }");
tryItOut("/*infloop*/M:do {return; } while(window.__noSuchMethod__ = *);\nM:with({__iterator__: 1e+81.yoyo(<y><z/></y>)})//h\n\n");
tryItOut("M:switch(yield (__count__+=@foo)) { default: break; break; case <x><y/></x>(<y><z/></y>, window): break; case 2: /*for..in*/for(var __iterator__ in (([z1,,])(<><x><y/></x></>))){export *;yield; }break; case 2: M:with(*)export __noSuchMethod__break;  }");
tryItOut("/*for..in*/M:for([__proto__, __iterator__] = null in this.throw(false)) /*infloop*/for(([15,16,17,18].map(eval, 1e4)); <><x><y/></x></>--; ~<x><y/></x>) export *;");
tryItOut("if((__proto__.__proto__ setter= ((({}).__lookupGetter__).call).call)) {/*infloop*/while( /x/g ){throw <y><z/></y>; }export *; } else {throw 3; }");
tryItOut("if([,,]\n) {let (prototype) {  } } else  if (constructor = [([1,,].valueOf(\"number\"))].filter(<><x><y/></x></>)) {{yield <x><y/></x>;{} }throw <y><z/></y>; }");
tryItOut("return <x/>;arguments @ <><x><y/></x></>;");
tryItOut("throw __noSuchMethod__;\nnew Function\n");
tryItOut("L: /*for..in*/L:for(__proto__ = (((new Function(\"var __iterator__ = <x><y/></x>, prop = *::*;\")))( /x/ )) in undefined) {var <ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd> = <x><y/></x>, __iterator__ = 3;gc() } const __parent__;");
tryItOut("throw getter;");
tryItOut("/*for..in*/for(let __iterator__ in null) return;");
tryItOut("/*for..in*/for(__proto__ =  ''  in [,,]) {yield; } const constructor;");
tryItOut("/*for..in*/M:for(let new RegExp(__iterator__) in ( /* Comment */[z1,,])) let __parent__ = -1, export *;;");
tryItOut("yield [15,16,17,18].map(<x/>, (Math.sin)((function ([y]) { })(),  '' )) - ~window.__lookupSetter__(\"__iterator__\")\f;");
tryItOut("/*infloop*/for(({ __parent__: ({ prototype: __noSuchMethod__, __iterator__: prototype }), __proto__: ({ prototype: __parent__, <x/>: ({ __noSuchMethod__: __parent__ }) }) }) = new (window)( /x/ ); constructor.constructor setter= (Math.pow).apply; __parent__) {yield [1]; }");
tryItOut("L: {var __parent__ = <x/>.@foo, __parent__;do {return;/*infloop*/while(<x><y/></x>){const constructor;__iterator__, __parent__; } } while((!(this.__defineGetter__(\"prop\", function  delete () { return [z1] } ))) && 0);/*\n*/ }");
tryItOut("with({prop: ( '' .*).prop =  \"\" .*})with(((yield [,,]) !== 0/0.__defineGetter__(\"__count__\", gc)))undefined;");
tryItOut("/*infloop*/for([,,z1]; <y><z/></y>;  '' ) let __count__ = <y><z/></y>;");
tryItOut("with({prototype: ([11,12,13,14].sort)}){return;return; }");
tryItOut("/*infloop*/for(({ __noSuchMethod__: [__noSuchMethod__, __parent__, , ({ __noSuchMethod__: __iterator__, constructor: prototype })] }) = new gc((<y><z/></y>.__parent__) instanceof *[ \"\" ], yyy.unwatch(\"<><x><y/></x></>\")); (p={}, (p.z = this)()); (((uneval(<x><y/></x>)))).call([1,,], (null))) {gc()/*for..in*/for\n(prototype = {} in <><x><y/></x></>) {throw true; } }");
tryItOut("let __parent__ = <x><y/></x>, __parent__");
tryItOut("L:if(false) { if (new <x/>([])) {let __count__ = window, delete = [1];let prop = window, __count__ = <x/>; }} else {throw <x/>;yield; }");
tryItOut(";{prototype = 3.141592653589793, __count__; }\n");
tryItOut("if( /x/g ) {/a/gi } else  if (<><x><y/></x></>) {return; } else {const __parent__, prototype;; }");
tryItOut("if( /x/g ) default: break;  else yield;");
tryItOut("/*infloop*/do (__iterator__); while(new Error()); const constructor;");
tryItOut("let constructor, __noSuchMethod__ = <><x><y/></x></>\ngc()");
tryItOut("/*infloop*/M:while((undefined <<= <x><y/></x>) ? (prototype = __proto__) : __count__ = undefined)/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <><x><y/></x></>) {return;; }");
tryItOut("let(__noSuchMethod__, prototype = <x/>) ((function(){try {  } catch(__count__ if 1.2e3) { let prop, constructor; } catch(__noSuchMethod__) { continue M; } finally { export constructor; } })());");
tryItOut("switch(null) { case 6: {} }");
tryItOut("switch(this.zzz.zzz) { default: case ((__proto__) = (__parent__ = window instanceof gc())): M:with(__noSuchMethod__ = @foo){yield <x/>; } }");
tryItOut("with([1].yoyo(__count__)).2;");
tryItOut("({}).hasOwnProperty const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in  /* Comment */window) {export __parent__;var prototype = [,,z1]; }");
tryItOut("with({__proto__: <x><y/></x> .@ <x><y/></x>}){export __noSuchMethod__; }");
tryItOut("{}\r\n;");
tryItOut("/*infloop*/for(let __iterator__; prop+=window >>>=[11,12,13,14].sort; (__noSuchMethod__ = new (<y><z/></y>)(<><x><y/></x></>, window))) __iterator__");
tryItOut("{}");
tryItOut("/*infloop*/for(var prototype; (<y><z/></y>.__defineGetter__(\"prototype\", Math.pow)).@*; <><xxx>{(prop)}</xxx></>) let __iterator__;");
tryItOut("{/*for..in*/for(var [__noSuchMethod__, prop] = <x/> in [,,]) prototype setter: (1 for (x in [])) }");
tryItOut("L: {/*infloop*/do {let __count__;yield; } while([z1,,]); }");
tryItOut("if(window['constructor']) { if ((yield false & null)) {/*infloop*/for(__parent__; (-1); 1e-81 :: <x><y/></x>) ; }} else {/*infloop*/M:while(yield  /x/ ); }");
tryItOut("{yield;export each; }");
tryItOut("/*for..in*/for(let ({ prototype: __noSuchMethod__ }) in ((new Function)((({ __proto__: __parent__ }) = ({ prototype: prop, constructor: __parent__ }))))){gc()\n }");
tryItOut("{export function::prop;break ; }");
tryItOut("if((*([1,,], <x/>))) {if(1.2e3.__defineGetter__(\"__parent__\", function(q) { return q; })) ([,,z1]);; }");
tryItOut("continue M;");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = *::*, __noSuchMethod__) ((function(){{}})());let __noSuchMethod__, prototype = <x><y/></x>;");
tryItOut("({ prototype: ({ __count__: prop }), set: [__iterator__, prop, , ] }) = constructor;");
tryItOut("if(let (__proto__ = (undefined > <><x><y/></x></>), __proto__) new []) {const __iterator__ = (function ([y]) { })();/*infloop*/do export *; while(<><x><y/></x></>); } else  if (<y><z/></y>.prototype = [,,]) return;");
tryItOut("with({}) for(let y in [5,6,7,8]) yield <><x><y/></x></>;");
tryItOut("do __iterator__ = true.eval(<x><y/></x>), i; while((window) && 0);");
tryItOut("/*infloop*/for(var __parent__;  /* Comment */<>yyy</>;  /* Comment */[1][this.__defineGetter__(\"__count__\", function(y) { yield y; export prototype;; yield y; })]) if(({ set prop(constructor, prototype) { ; } , prop: (<x/>)[<x><y/></x>] })) (1 for (x in [])) else export *;");
tryItOut("return");
tryItOut("L:if((({constructor: (<x/> %= -0)}).__iterator__ = [11,12,13,14].map)) { if ([,,].yoyo(( /x/ .__defineGetter__(\"__count__\", (1 for (x in []))) ? prototype.throw( \"\" ) : [false].map(new Function)).yoyo(return))) {if( /x/  ^  '' ) {function(y) { yield y; export __iterator__;; yield y; }{} } else {export *;yield <y><z/></y>; }export __iterator__; } else /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  /x/g ) {(<><x><y/></x></>);(<x><y/></x>); }}");
tryItOut("__count__ = __iterator__;");
tryItOut("if(new (new ( \"\" )(this))([15,16,17,18].map(<><x><y/></x></>, this)).yoyo([<x><y/></x>])) /*infloop*/for(var [({ __iterator__: __noSuchMethod__ }), ({ __iterator__: __proto__, function::prototype: prototype }), prototype] = __noSuchMethod__; false; (*::*.isPrototypeOf(<x><y/></x>))) {yield;if(this) {;return; } } else  if (this) {switch(new RangeError()) { default: /*infloop*/do {\fbreak ; } while(<x/>);break; break;  } } else {/*infloop*/for((uneval( /x/ )); this.zzz.zzz; this.__defineGetter__(\"__proto__\", function (__proto__) { return this } )) {throw <><x><y/></x></>; } }");
tryItOut("this.zzz.zzz;");
tryItOut("return \tyield this;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("if(yield  '' ) {var prop, __noSuchMethod__;<x><y/></x> } else {/*for..in*/for(const prop in <y><z/></y>) return @foo; }");
tryItOut("/*infloop*/M:while(this.__defineGetter__(\"__iterator__\", /a/gi))yield; const __noSuchMethod__;");
tryItOut("L: {/*infloop*/for(let __proto__; <><x><y/></x></>; this) yield;const __noSuchMethod__ = window, __noSuchMethod__ = prototype; }");
tryItOut("{return; }");
tryItOut("/*infloop*/for(var __count__; ({a2:z2}).__lookupGetter__(\"__iterator__\"); ([,])[new ( /x/ ).__defineSetter__(*, 1e81)]) {/*infloop*/while(__count__){gc() } }\r");
tryItOut("yield true;\nvar __iterator__ = <><x><y/></x></>, __count__;\n");
tryItOut("/*for..in*/L:for(const (constructor) in ((@foo)(<x>\t<y/></x> / <x><y/*\n*//></x>)))export *;\r");
tryItOut("{}");
tryItOut("if(3/0 @ undefined) export __iterator__; else  if (this) let prop, __iterator__\t; else (window);");
tryItOut("do throw this; while((window >>= prop /= (* .@*:: true << [] @ <x><y/></x>)) && 0);");
tryItOut("while((([15,16,17,18].map((/a/gi).apply, true)).valueOf(\"number\")) && 0){ }");
tryItOut("/*infloop*/for(let [ { {} } , ({ __iterator__: [] }), ({ __proto__: __proto__, __parent__: ({ prop: [, prop, ], prototype: [] }) })] = (<x/>.__count__.constructor); !<x><y/></x>.propertyIsEnumerable(\"__count__\"); (new (#1#)(<><x><y/></x></>))) {;gc() }");
tryItOut("let(prop = <x/>.throw(<x><y/></x>), __iterator__) { for(let y in []);");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ in <y><z/></y>) ");
tryItOut("/*for..in*/for(let constructor % \f<>yyy</>['prototype'] in (((1 for (x in [])))(new Math.sin()))){\twith({prototype: [z1,,]})yield; }");
tryItOut("/*for..in*/for(var constructor in ((({ __iterator__: prop }) = (this ? __count__ : <x><y/></x>))(Math.sin( \"\" , 033).__lookupGetter__(\"prop\")))){return;yield *; }");
tryItOut("let(prototype) { let(__iterator__ = *::*, prop = false) { prototype, __proto__;");
tryItOut("switch(prop = 0.1) { case 3: <><xxx>{prop}</xxx></>;while((__iterator__) && 0){return @foo; } }\n");
tryItOut("let (prop, prototype) { (<x><y/></x>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <x><y/></x> ? <x><y/></x> :  /x/ ) {{}function ()1e4 }");
tryItOut("if(({ __count__: __parent__ }) = [, , __noSuchMethod__, ]) \fprop; else  if (this.__defineSetter__(\"__iterator__\", Math.sin)) {<x><y/></x>;new Function }");
tryItOut("if((<x/> >>> <x><y/></x> >> false)) { if (null) L: {}} else {return  /* Comment */<><x><y/></x></>; }");
tryItOut("try { try { throw  '' ; } finally { prop =  ''  }  } catch(constructor) { with({}) try { yield false; } catch(__proto__) { [z1,,]; }  } ");
tryItOut("/*for..in*/for(var __proto__ = prop in  '' ) ; const __iterator__;");
tryItOut("{{} }");
tryItOut("yield;\nconst prototype = <>function(q) { return q; }</>; const __noSuchMethod__;\n");
tryItOut("if(yield (eval(\"* +  /x/g \", prop))) while(( /x/g ) && 0)export *; else  if (__proto__) const __iterator__; else {export o;__count__ = __proto__\n{}\n }");
tryItOut("L:switch( '' ) { default: break;  }");
tryItOut("prop;\n[,,z1];\n");
tryItOut("for(let y in [5,6,7,8]) __iterator__.prop = __proto__;");
tryItOut("do __count__; while((false , true) && 0);");
tryItOut("return;");
tryItOut("/*infloop*/for(let  = __count__ ||  /x/g ; #1#.__lookupSetter__(\"delete\"); (this.__defineGetter__(\"__parent__\", (<x><y/></x>).__defineSetter__))) {var __parent__; }");
tryItOut("if(this) gc() else  if (<><x><y/></x></>) (new Function(\"export *;\"))");
tryItOut("L:do {/*infloop*/while([(eval(\"(@foo);\", (#3={a:#3#})))])with({}) {} } while((({__count__ setter: Math.sin, prototype setter: function () { return [<><x><y/></x></>] } \n })) && 0);");
tryItOut("[1,2,3,4].slice\n<><x><y/></x></>;");
tryItOut("with({prop: __parent__.eval(<y><z/></y>)}){\t/a/gi\nexport *; }");
tryItOut("let (prop = <><x><y/></x></>++) { var prop = (-1); }");
tryItOut("/*for..in*/L:for(let __proto__ = (({__iterator__: <x><y/></x>}).yoyo(()(this)) ? (*)[*::*] : <y><z/></y>.prop = function ([y]) { }) in  \"\" .isPrototypeOf(1e4)) ( /x/ ).apply");
tryItOut("while((prototype) && 0)( /x/ ).__defineSetter__");
tryItOut("continue ;");
tryItOut("/*for..in*/M:for([__parent__, function::( if (<><x><y/></x></>))] = (p={}, (p.z = *)()).watch(\"constructor\", Math.sin) in (yield (<y><z/></y>.valueOf(\"number\"))) ? [,,] : typeof __parent__) {let(prototype) { yield \t*; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var [function::__proto__, __proto__] = ((uneval((3/0 ? <x><y/></x> : .watch(\"__noSuchMethod__\", 'haha'.split))))) in ~__count__ = ({})) with({__iterator__: (new gc((({}).__lookupGetter__(\"__noSuchMethod__\")), prop))}){var __proto__; }");
tryItOut("__parent__, prototype = window\n/*infloop*/for(const __iterator__; ({constructor setter: <y><z/></y>, __proto__: default: break; break; case default: break; case 1: prototype;: const prop =  \"\" , prototype = (-0); = false }); [new (window)(true)].filter(Math.pow)) {; }");
tryItOut("yield #1# > \t3.141592653589793;");
tryItOut("/*infloop*/for(<x><y/></x>.__lookupGetter__(\"__iterator__\"); yield *::*; \f(__proto__ =  \"\" , __iterator__).call(<x><y/></x>, <x><y/></x>).__parent__) {/*infloop*/for(__iterator__; true; null) __proto__ = <x><y/></x>, __parent__ = window; }");
tryItOut("gc()");
tryItOut("with({}) { with({}) return this; } ");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("switch(__iterator__) { default: case window: break; (1 for (x in [])) }");
tryItOut("gc()");
tryItOut("(false)\n");
tryItOut("for(let y in [5,6,7,8]) try { gc() } catch(prototype) { with({}) {  }  } finally { window['prototype'] = __iterator__; } ");
tryItOut("do M:while((<><x>\n<y/></x></>.__defineSetter__(\"constructor\", /*\n*/function (constructor, prototype) { return window } )) && 0)var prototype; while((0x99) && 0)");
tryItOut("throw [[1]];\n(__parent__);\n");
tryItOut("throw __proto__;");
tryItOut("return;");
tryItOut("if((#0=({constructor:  \"\" }))) { if ((let (constructor, prop) window.constructor)) {L:if(undefined) { if (<><x><y/></x></>) return __noSuchMethod__;} else (constructor); } else var __proto__, __parent__;}");
tryItOut(" get constructor(__parent__, __count__) { yield ([get, , let, , [prop, __parent__, prototype]] = null.prop.eval(<y><z/></y>.__iterator__)) } ");
tryItOut("for(let y in []);");
tryItOut("export *");
tryItOut("if(__count__ = {}) {return; } else  if (__count__.__parent__ getter= Math.pow) const __count__;");
tryItOut("return this;");
tryItOut("let (constructor = #0=({__count__: false})) { 'haha'.split }");
tryItOut("/*infloop*/while(Math.pow(new RangeError())){throw <><x><y/></x></>; }");
tryItOut("if(<><xxx {prototype}={} /></>) break M; else yield  /x/g ;");
tryItOut("with({}) { throw __iterator__; } ");
tryItOut("if( \"\"  ? <><x><y/></x></> : undefined) { if (__proto__ = <x/>) getter = 0, __noSuchMethod__ = <x><y/></x>;} else /*infloop*/while(#1=[#1#])({}).hasOwnProperty");
tryItOut("yield ((yield  /x/g ) for (constructor in function(id) { return id }) for each (prototype in *::*));");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(var [__proto__, __parent__] = ([__count__] = <><x><y/></x></> <<= @foo) in <x><y/></x>) gc()");
tryItOut("/*infloop*/for(prop = <y><z/></y> += __proto__ ? ({ __noSuchMethod__: prop, constructor: __count__ }) = [z1] : 3/0; null.__lookupGetter__(\"__noSuchMethod__\").isPrototypeOf((prop = function::__parent__).valueOf(\"number\")); prototype = @foo) {gc()({ __noSuchMethod__: __noSuchMethod__ }) = 'fafafa'.replace(/a/g, [1,2,3,4].map); }");
tryItOut("/*for..in*/for(var [constructor, __count__] = (this.__defineGetter__(\"prototype\", <x><y/></x>)) in null + #1=[#1#]) return  '' ;");
tryItOut("return;");
tryItOut("if(<x><y/></x>.__defineSetter__(\"prototype\", [1,2,3,4].slice)) {continue M; } else  if ((-1)) __noSuchMethod__; else for(let y in []);");
tryItOut("gc()");
tryItOut("with({prop: #1#}){/*infloop*/for(const [<ccc:ddd><!--yy--></ccc:ddd>, , ] = __count__.prop = *; ;; [#3={a:#3#}]) return; }");
tryItOut("if(<><x><y/></x></>) { if (-0) {return;constructor, prototype = *; } else {const __iterator__ = <y><z/></y>;throw 0; }}");
tryItOut("if( /* Comment */-0) { if ((<x><y/></x>.propertyIsEnumerable(\"__parent__\"))) {var constructor; } else {__parent__, {const __noSuchMethod__;const constructor, __iterator__ = prototype; };export __parent__; }}");
tryItOut("__proto__: <><></></>");
tryItOut("with(__proto__.isPrototypeOf(__proto__)){(*).apply }");
tryItOut("return <><x><y/></x></>\n\ncontinue ;\n");
tryItOut("__proto__ = __parent__;");
tryItOut("try { let(__noSuchMethod__ = this, __proto__) { (this).watch } finally { throw \fconstructor; } ");
tryItOut("break ;\nexport *;\n");
tryItOut("if(<><x><y/></x></>.__defineGetter__(\"prototype\", [1,2,3,4].slice)) { if ((function ([y]) { })(<><x><y/></x></>, false) , window) {return constructor;export *; } else yield;}");
tryItOut("/*infloop*/for((this.__defineGetter__(\"__parent__\", (1 for (x in []))))['__proto__'](prototype); this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split); (prop = [<><x><y/></x></>].filter('haha'.split).__defineGetter__(\"prototype\", eval))) {L: export *; }");
tryItOut("let (prototype, [, , , ({ __noSuchMethod__: __count__, prototype: constructor })] = (5.0000000000000000000000 <= this)) { gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let  in (([11,12,13,14].filter).__defineSetter__).call(({__parent__: true.valueOf(\"number\") }).__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))), [15,16,17,18].map(({}).__lookupGetter__, <><x><y/></x></>) | ))  '' ;__iterator__, __parent__ = <x><y/></x>;");
tryItOut("yield; const prototype;");
tryItOut("if((<><x><y/></x></>)[@foo]) {\freturn  /x/g ;M:if(*) {export __iterator__;return window; } else {break ; }{(<><x><y/></x></>); } } else  if ( typeof  = ) /*for..in*/L:for(prop = ~*::* * __proto__ in  '' .hasOwnProperty(\"__iterator__\")) {if(*::*) yield; }");
tryItOut("M:with({__noSuchMethod__: \t<><x><//h\ny/></x></>.unwatch(\"__iterator__\")})throw false;");
tryItOut("/*infloop*/for(var __count__; [delete new (1 for (x in []))(<><x><y/></x></>)].some((1 for (x in []))); new [Iterator() for (__proto__ in let (__count__ = prototype) null.prototype)](\n__iterator__ = <><x><y/></x></> != new new Function(@foo, <x/>), (__noSuchMethod__.(-3/0)))) if(__proto__.__iterator__) /*for..in*/for(var [__count__, x::__proto__] = <><x><y/></x></> in  '' ) {var __iterator__, __count__;({}); } else  if (this.__defineGetter__(\"__proto__\", function \f prop (__iterator__, function::__noSuchMethod__) { return <><x><y/></x></> } )) export __noSuchMethod__;");
tryItOut("/*infloop*/for(prototype = prototype.__count__; __iterator__-=1.3 ? <x/> >>> *::* : 1e+81 , <><x><y/></x></>; new Number(( /x/  >= *::*),  \"\" )) {yield; }");
tryItOut("yield __count__.__iterator__;\t");
tryItOut("(1e81)");
tryItOut("with((((*::*)(1.3)) = (1 for (x in []))))throw this;");
tryItOut("/*for..in*/for(var __noSuchMethod__.__iterator__ in ((function ()<><x><y/></x></>)(<><x><y/></x></> ^ <x><y/></x>))){let __noSuchMethod__ = window, __iterator__ = 3/0\f; }\n/*infloop*/for(let __noSuchMethod__; function::__count__; this) {const __iterator__, __iterator__ = <x><y/></x>;prototype = <x><y/></x>; }");
tryItOut("if((<x/> ? false : @foo)) { if (prop = true)  /x/ } else return <x><y/></x>;");
tryItOut("<><x><y/></x></>;/*infloop*/for(const constructor; null; <><x><y/></x></>) export each;");
tryItOut("break L;\nyield <x/>;\n");
tryItOut("M:if(*::*) {{} }");
tryItOut("{}");
tryItOut("{export *; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = this.__defineGetter__(\"try { try { return window; } finally { /a/gi }  } catch(prototype) { for(let y in [5,6,7,8]) throw __noSuchMethod__; } finally { let(__noSuchMethod__ = __parent__ = __iterator__) { with({}) { __count__ = true, __proto__ = @foo; }  } \", ([1,2,3,4].slice).call) in <><x><y/></x></> | true) {yield;if( /x/ ) {prototype(__noSuchMethod__); } else  if (null) throw <><x><y/></x></>; }");
tryItOut("let (function::__iterator__ = (uneval(<x/>)), __proto__ = window) { const __count__ = <y><z/></y>; }");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = eval(\"@foo\", __count__) in this) {export prototype;{} }");
tryItOut("yield");
tryItOut("if(([,].@*) :: <x/>) while(((prototype = prop)) && 0){export *;return; } else  if ((<><x><y/></x></>.propertyIsEnumerable(\"constructor\"))) {continue ;__iterator__ = @foo, prototype = <x><y/></x>; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; [[1]]; \n({__proto__: <><x><y/></x></>})) (<x><y/></x>\f);");
tryItOut("/*infloop*/for(window; prototype.__noSuchMethod__ = <x><y/></x>; 0x99 >>> null.hasOwnProperty(\"__noSuchMethod__\")) ;");
tryItOut("throw StopIteration;");
