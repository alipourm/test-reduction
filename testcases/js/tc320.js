tryItOut("L: {this;let get = true, __proto__ =  /x/ ; }");
tryItOut("if(<><xxx {__count__}={(constructor = window) <<= <><x><y/></x></>.watch(\"prototype\", (<y><z/></y>).watch) - <x/>} /></>) {let (__noSuchMethod__, __noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __parent__) prop; }/*for..in*/M:for(__noSuchMethod__ = <x><y/></x> in *) yield null; } else  if (__noSuchMethod__ = window.__lookupGetter__(\"__noSuchMethod__\")\f) throw prototype; else {if((this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__))) { if (__iterator__) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <y><z/></y>) {;yield *::*; } }} else gc() }");
tryItOut("/*infloop*/\tfor(const delete; * << *::*; let = 0.1) {yield @foo;var constructor = <><x><y/></x></>, constructor; }");
tryItOut("undefined");
tryItOut("{/*infloop*/while((__count__ = 'fafafa'.replace(/a/g, function  prototype (prototype) { return  /x/g  } )))yield prototype; }");
tryItOut("/*infloop*/M:for(const [function::prop, , prototype, __proto__, ] = this.__defineSetter__(\"constructor\", Function); <><x><y/></x></>.isPrototypeOf(<y><z/></y>); [1,2,3,4].map) break M;");
tryItOut("/*infloop*/M:for([[__count__, ], [__iterator__], ({ __count__: ({ __proto__: __proto__, prop: ({ __parent__: __count__ }) }), __iterator__: ({ __iterator__: x::__iterator__, __parent__: ({ __count__: prototype }) }) }), ({ constructor: ({ yield: __noSuchMethod__, constructor: [] }) })] = ((prototype.isPrototypeOf(<><x><y/></x></>)))(); delete @foo; ([[]].throw(__parent__))) {return;return prop; }");
tryItOut("if(( /* Comment */x::__proto__.__iterator__ = <y><z/></y>)) {{gc() } }");
tryItOut("__proto__ = __parent__;");
tryItOut("({a1:1}).constructor = __noSuchMethod__;");
tryItOut("/*for..in*/for(var constructor = ++<x/> in this.zzz.zzz) {; }");
tryItOut("if(((p={}, (p.z = @foo)()))) {; } else  if (*::*) yield constructor;\nthrow  '' ;\n else {/*infloop*/for(({ __count__: prop, __count__\t: __noSuchMethod__ }) = undefined\n; constructor = *::*; @foo) {prop; } }");
tryItOut("/*for..in*/for(var __proto__ = [,,z1].valueOf(\"number\")++ in [] = ({ __iterator__: ({ constructor: __proto__, __count__: prop }), prop: [ }) < //h\n[<><x><y/></x></>].valueOf(\"number\")) if(arguments) export 3/0; else  if (this) (<x><y/></x>); const __proto__;throw <x><y/></x>;");
tryItOut("return (uneval((<x/> && this)));");
tryItOut("{const []; }");
tryItOut("with({<><><!--yy--></></>: __proto__ = [[]]}){get,  get __proto__()prototype; }");
tryItOut("let __count__, __proto__;");
tryItOut("while((prop) && 0)const constructor = 0/0;");
tryItOut("M:if(*) {yield;var __iterator__; } else  if (<x><y/></x>) {<y><z/></y>; }");
tryItOut("if(window) {yield; } else  if (({a2:z2})) {function (__count__) { yield ({a2:z2}) }  }");
tryItOut("with((undefined.__lookupGetter__(\"prototype\").watch(\"prototype\", Math.pow))){for(let y in []);if((<x/>.__lookupSetter__(\"prototype\"))) export *; else  if (__iterator__.(((-1)).__defineSetter__)) {export *; } }");
tryItOut("if((eval(\"yield arguments;\",  /* Comment */this) ^ __parent__)) export *; else {false.prop = function::__proto__;yield; }");
tryItOut("/*infloop*/for(__parent__; (yield undefined); (<><x><y/></x></>.throw(<x/>))) break M;");
tryItOut("for(let y in [5,6,7,8]) with({__count__: __parent__ = null}){return *; }");
tryItOut("/*for..in*/for(var [__parent__, __count__] = false in <><x><y/></x></>) {; }");
tryItOut(";");
tryItOut("M:with({__noSuchMethod__: <x><y/></x>})return __proto__;");
tryItOut("{continue \n }");
tryItOut("/*for..in*/for(constructor in ([({a2:z2})].map([1]))\f) gc()");
tryItOut("switch(__noSuchMethod__) { case 5: break; /*infloop*/for(let __proto__; *::*; <x/>) {{} }break; default: break; case 3: L: {L:while(({}) && 0){; } }break; case 0: continue M;\nreturn <x><y/></x>;\n const prop;break; case 6: break; case 3: let(__count__ = *, __parent__ = ({a1:1})) ((function(){export *;})());break; case typeof (3.141592653589793.watch(\"prototype\",  /x/ )): return;break; case 9: if(false.propertyIsEnumerable(\"prop\")) { if ((prop.(prop))) (/a/gi).call} else {[1,2,3,4].map }break; break;  }");
tryItOut("if([arguments for (prop in true) if (<x><y/></x>)].unwatch(\"constructor\")) __noSuchMethod__ = (-1), __proto__;");
tryItOut("if(__iterator__ = __proto__ = constructor.__iterator__ = 1e-81 + (__noSuchMethod__ = function ([y]) { })) /*infloop*/while(<x><y/></x>){; } else  if (prop = __noSuchMethod__) {this;var <x><y/></x>, constructor, __count__ = __parent__ }");
tryItOut("while((\t-delete = <x/> >>>= /x/g ) && 0){var __proto__ = -1, __proto__;break L\nconst x::__parent__ = <x/>, prototype = <y><z/></y> }");
tryItOut("while((({a2:z2})) && 0){; }");
tryItOut("/*infloop*/L:for(const __count__; (prop%=<y><z/></y> >>= -0); this.__defineSetter__(\"prototype\", function (__proto__, __noSuchMethod__)-1) :: (__count__ =  \"\" ).__lookupGetter__(\"__parent__\")) {export *;with({__proto__:  '' })export __count__; }");
tryItOut("for(let y in [5,6,7,8]) let(constructor = ([15,16,17,18].sort(Math.pow, {}))) ((function(){with({}) { throw StopIteration; } })());");
tryItOut("while(((Exception(__proto__ = 1e4, <y><z/></y> & <x/>))) && 0){throw [11,12,13,14].filter;/*infloop*/for(let ({ __iterator__: __proto__ }) = return prop.@foo; (0x99.watch(\"__noSuchMethod__\", [1,2,3,4].slice))[<><x><y/></x></>];  /* Comment */window) {;export __iterator__; } }");
tryItOut("if([] = ({ __iterator__: __noSuchMethod__ })) { if ((({__iterator__: <x/>,  get __noSuchMethod__ prop (prop, __proto__) { yield [,,z1]; }  }))[<x><y/></x>.(*::*)]) {yield;while((this) && 0)export *; }} else __iterator__ = this, __iterator__ = null;\n(*);\n");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __noSuchMethod__: __count__ }), __proto__: [, constructor, __noSuchMethod__, prototype, prototype] }) = (__proto__ = 1e+81); * != [,,]; this.__defineGetter__(\"__proto__\", [1,2,3,4].map)) (<x><y/>\r</x>);");
tryItOut("/*infloop*/M:do M:if([1,2,3,4].map) { if (x::function::x::__count__.__noSuchMethod__ = (let (prop, prototype = prototype)  \"\" )) {{} } else {throw @foo; }} while(__proto__.__lookupSetter__(\"prototype\"))\n{/*infloop*/for(null.__defineSetter__(\"__iterator__\", function  __noSuchMethod__ () { yield  ''  } ); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (0/0++)) function(q) { return q; }/*infloop*/for(let __iterator__ = __proto__; yyy; 5.0000000000000000000000) (1 for (x in [])) }");
tryItOut("for(let y in [5,6,7,8]) let(constructor =  /x/g , __noSuchMethod__) ((function(){(*);})());");
tryItOut("/*infloop*/for(__iterator__ = <\t><x><y/></x></>; prototype; *::*) (0/0);");
tryItOut("/*for..in*/for(var [prototype, constructor] = function  prop (__noSuchMethod__, __noSuchMethod__)true(true, ([<><x><y/></x></> if (<x><y/></x>)])) in __count__.constructor = (\"prop\", <x><y/></x>({}).hasOwnProperty)) {/*infloop*/do {return;__iterator__, __noSuchMethod__ = 0x99; } while(const constructor = -0); }");
tryItOut("/*infloop*/L:for(const prototype\f; ((__parent__ = <><x><y/></x></> & <y><z/></y>).valueOf(\"number\")); (yield 033).valueOf(\"number\")) /*for..in*/for(const prop in ((function  prototype (__iterator__) { return __count__ } )(<x><y/></x>))){}\nL:if([11,12,13,14].sort) {let __count__, __count__; } else  if (__noSuchMethod__ = true.__defineSetter__(\"__count__\", @foo)\f) {let __proto__ = null, __proto__ =  '' ; }");
tryItOut("/*for..in*/for(let __iterator__ in ([].sort((Function).call))) {var function::prototype = <x><y/></x>, __iterator__;try { with({}) { for(let y in [5,6,7,8]) <x><y/></x> }  } catch(__parent__) { constructor.__proto__ = __iterator__; }  }");
tryItOut("with({__parent__: (((function (__proto__) { yield __noSuchMethod__ } ).call)() && ((yield prop)[]))}){return;while((<x><y/></x>.@*) && 0)\t{export *;return; } }");
tryItOut("return true");
tryItOut("with({__count__: 3.141592653589793}){const __proto__; }");
tryItOut("{return; }");
tryItOut("if((p={}, (p.z = __noSuchMethod__ =  /x/ )())) { if (__count__.__noSuchMethod__ = <x><y/></x>.eval(0.1)) export function::prototype; else return this.__lookupGetter__(\"__parent__\");}");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = <><x><y/></x></> in 1e81) {const __count__ = <x><y/></x>;yield <x><y/></x>; }");
tryItOut("if((({constructor setter: yyy, __noSuchMethod__: (uneval(this)) }))) { if (window) {;<x><y/></x>; } else (1e-81);}");
tryItOut("M:while(((<x><y/></x>.(this))) && 0)gc()");
tryItOut("L:if(({*: ( ''  - @foo) })) {__count__, __noSuchMethod__;<x><y/></x> &= *::*:  /x/  } else  if (new ((1e-81)([z1,,], __iterator__))(((yield (<><x><y/></x></>)())))) {while((@foo) && 0){(__iterator__);<y><z/></y> }var __proto__; }");
tryItOut("/*infloop*/for(const [, [[], prop, ({ \t__count__: __iterator__, prop: __parent__ }), , ({ __iterator__: __iterator__ })], ({ __count__: __iterator__ }), [({ prop: x::__count__ }), ({ prototype: prop }), prototype]] = <{__parent__}><employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy</{__parent__}>.((__count__.function::__count__)); (#1=({prop:  \"\" })); __parent__.__iterator__ setter= Math.pow) /*infloop*/while(window){<><x><y/></x></>; }");
tryItOut("/*infloop*/M:while(({ __noSuchMethod__: prop }) = prop);");
tryItOut("if(__count__ = true) {export *; } else  if ((prop++)) /*infloop*/M:do {gc() } while(); else {}");
tryItOut("/*for..in*/L:for(const __count__ = this.@foo in undefined) {; }");
tryItOut("M:while(( /x/g ) && 0){(1.3); }\nif([]) {prop, __parent__; }\n");
tryItOut("{} const __iterator__;");
tryItOut("try { for(let y in [5,6,7,8]) throw <><x><y/></x></>; } finally { for(let y in [5,6,7,8]) throw <x><y/></x>; } ");
tryItOut("<zzz>window</zzz>");
tryItOut("\tif(<><x><y/></x></> === *((yield new (*)(<x>\f<y/></x>)), (* .@ <x><y/></x>))) {yield; } else  if (this) export *;");
tryItOut("/*infloop*/for(var __iterator__ = __count__ = constructor; undefined .. <y><z/></y>; (<x><y/></x>\r.__lookupSetter__(\"__iterator__\"))) let __parent__ = window, __iterator__ =  /x/ ;");
tryItOut("if(yield <y><z/></y>) {yield;export *; } else  if (*) yield; else {yield  /x/g ; }");
tryItOut("/*infloop*/for(let [({ __proto__: [({ __count__: __iterator__, __count__: ({ __count__: [, ], prop: prop }) }), , (<x><y/></x>)(null), , []], //h\n__noSuchMethod__: prototype }), , [], ] = new ( import )([false for (__noSuchMethod__ in window)]); \f<y><z/></y>;  \"\"  /= window.@* |= __noSuchMethod__ &= window) /*for..in*/for(let (prototype) in <x/>) {(-1);export *; }");
tryItOut("");
tryItOut("L:with(prop.__iterator__ setter= [1,2,3,4].map)M:if( \"\" ) constructor, __parent__ = window; else  if (<x/>) {export *;default: constructor;try { {} } catch(__noSuchMethod__) { gc() } finally {  }  } else throw  /x/g ;");
tryItOut("/*infloop*/L:for(var __iterator__; (let (__iterator__ = function ([y]) { }) [[1]]).__defineGetter__(\"prop\", [1,2,3,4].slice); ((Math.pow).apply).call(1e-81 .@ false > @foo + [1].__lookupSetter__(\"getter\"), this.__defineGetter__(\"prop\", function  prototype (prototype, __iterator__) { return <><x><y/></x></> } ))) {prop = constructor, __proto__;continue M; }");
tryItOut("L:if(Math.sin(<y><z/></y>, ~<x/>)) { if (window) {yield;L:do {export *;constructor = 3.141592653589793; } while((<x><y/></x>) && 0); } else { \"\" ; }}");
tryItOut("/*infloop*/while(<x/> == <y><z/></y>)gc()");
tryItOut("break L;");
tryItOut("return <y><z/></y>;");
tryItOut("");
tryItOut("/*for..in*/for(prop = (new (gc)()) in <x><y/></x>) {}");
tryItOut("yield prop");
tryItOut("switch(((__count__.(<><x><y/></x></>) for (__proto__ in <><x><y/></x></>) if ([1,,]))) & (\nprototype.constructor = try { {} } catch(__iterator__) { gc() } )) { case <x/> |= <><x><y/></x>/*\n*/</>: do {const __proto__ = 1e81, each = []; } while(((__count__) = (null if (@foo))) && 0);break; default: break;  }");
tryItOut("/*infloop*/while(window.valueOf(\"number\")\f)/*infloop*/for(yield #3={a:#3#}; <x><y/></x>.(*); this) (__proto__);");
tryItOut("/*infloop*/for(let \tprop; function::__noSuchMethod__.__parent__ = <><x><y/></x></>.__defineGetter__(\"__parent__\", ({}).__lookupGetter__);  '' ) {yield  \"\" ; }");
tryItOut("/*for..in*/for(constructor in constructor = *) {/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <><x><y/></x></>) undefined;return; }");
tryItOut("yield Number(<x><y/></x>);");
tryItOut("if(__noSuchMethod__.__iterator__ = (#2=-0)) export *; else  if (prop = <><x><y/></x></>) prop = </*\n*/><x><y/></x></>; else continue \nthrow (true.yoyo(1e4));");
tryItOut("/*for..in*/for(var new __count__\t(this, <><x><y/></x></>) in (uneval(0/0.watch(\"constructor\", Function)))) //h\n{M:switch(prototype = 0x99) { case 3: default: /*for..in*/for(const [__parent__, prop] = @foo in window) {(null);; }break;  }const __iterator__ =  /x/ , __iterator__ =  '' ; }");
tryItOut("yield *;");
tryItOut("while((#1=[#1#]) && 0)if( \"\" ) {(prop); } else  if (undefined) gc() else break M;");
tryItOut("/*infloop*/while(((p={}, (p.z = 4.)())))(__iterator__);");
tryItOut("<\f><x><y/></x></>;");
tryItOut("throw  /x/g ;");
tryItOut("prototype = #1#;if(*::*.__lookupGetter__(\"__iterator__\")) {Math.pow } else  if ((1e4 ? true :  \"\" )) function  __proto__ ()__count__");
tryItOut("let prototype = true;");
tryItOut("return;");
tryItOut("if(__parent__ = (this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map))) {var prototype; } else  if (constructor = <y><z/></y> <= 1.3) 1e4 else {var __noSuchMethod__; }");
tryItOut("/*infloop*/for({}; .2; window) {{} }");
tryItOut("/*infloop*/for(const __iterator__; (arguments)(<x/>, 0.1); this.zzz.zzz) case <x><y/></x>: ");
tryItOut("return;\n\n");
tryItOut("do {return;return <x><y/></x>; } while((window -= -0) && 0);");
tryItOut("while((this) && 0){{} }");
tryItOut("{/*infloop*/L:for(( /x/ )[<><x><y/></x></>][__noSuchMethod__ = __iterator__].@*; #2=[<><\rx><y/></x></>.__iterator__\t]; \nthis) {export *;break M; } }");
tryItOut("if((this.zzz.zzz)) { if ((<><x><y/></x></> -= __proto__)) {} else /*infloop*/M:do {*::*; } while(__proto__ = <><x><y/></x></>);}");
tryItOut("/*infloop*/while(false.propertyIsEnumerable(\"prototype\"))return window;");
tryItOut("yield\n<x><y/></x>;");
tryItOut("(<x><y/></x>);");
tryItOut("L:if(('haha'.split).call((new function (prop) { yield <x><y/></x> } (())), true.isPrototypeOf(<><x><y/></x></>), __parent__ |= <x><y/></x>)) let prop =  /x/ ; else  if ((({__count__: <x><y/></x> })[(({ __iterator__: __parent__, constructor: constructor }) = constructor)])) {let __parent__;/*for..in*/for(let [prop, __proto__] = <>new String((__noSuchMethod__ = <x><y/></x>))</> in <x><y/></x>) yield; } else {{} }");
tryItOut("__count__ = __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>) {gc() } else  if ((window.throw(@foo))) {throw __iterator__;__iterator__ =  /x/g , getter =  import ; }");
tryItOut("M:if(this.__defineSetter__(\"__parent__\", gc)) const delete; else {/*\n*/__proto__ = __parent__; }");
tryItOut("if(function::__count__) { if (this) Math.sin else {gc()continue M; }}");
tryItOut("return __iterator__.prop setter= new Function;");
tryItOut("return;");
tryItOut("with({}) gc()");
tryItOut("if((this.__defineSetter__(\"__iterator__\", (arguments).watch))--) { if (@foo) /*infloop*/for(var __noSuchMethod__; 0/0--; null ^ <><x><y/></x></>) {const __parent__, prop = get;const __parent__ = <x><y/></x>; }} else throw window;");
tryItOut("L: (<><x\f><y/></x></>);");
tryItOut("/*for..in*/for(var __iterator__ in <x><y/></x>) return <><x><y/></x></>;");
tryItOut("yield __noSuchMethod__ = [1,,]\nL: {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in false) do {yield; } while(( /x/ ) && 0)");
tryItOut("Math.sin");
tryItOut("/*infloop*/for(let __proto__; ([<><x><y/></x></>].map(/a/gi)); *\n) {{} }");
tryItOut("while((true) && 0)if(this.__defineSetter__(\"__count__\", Function)) return; else  if (new Error((this[*::*]), __iterator__)) {(<y><z/></y>);return; } else {return <x><y/></x>;const __count__ = window, prop =  { return null } ; }");
tryItOut("__proto__;");
tryItOut("if(<><xxx>{prototype}</xxx></>/*\n*/) {throw <x/>;return null; } else  if (((*::*).watch instanceof <x><y/></x>)) \f{throw @foo; }");
tryItOut("{yield;/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in ) {return <><x><y/></x></>;throw __count__; } }");
tryItOut("L:do export prop\f;\n\n while((( \"\" .__defineSetter__(\"__parent__\", function(q) { return q; }))) && 0);");
tryItOut("switch(<><x><y/></x></>.throw(([0.1.__defineGetter__(\"constructor\", Math.sin) if ( /x/ )]))) { case 5: break; case 0: break;  }");
tryItOut("(<x/>)");
tryItOut("switch([[]]) { default: case 7: return true;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in *::*) break ;");
tryItOut("/*for..in*/L:for(var __iterator__ = <x><y/></x> in []) {export __iterator__; }");
tryItOut("/*infloop*/M:do return <x/>; while(((undefined.__lookupSetter__(\"prop\"))).watch);");
tryItOut("with({__proto__:  ''  *= window}){return;constructor; }");
tryItOut("/*for..in*/for(let (([1,2,3,4].slice).call(window, <><x><y/></x></>)) in ((__iterator__ /= <><x><y/></x></>)((<><x><y/></x></>\t.valueOf(\"number\"))))){/*infloop*/while(<x><y/></x>){return window; }; }");
tryItOut("if(((__parent__) ? __proto__.__parent__ = 3 : \n-1 for (__proto__ in function(id) { return id } === true) if (window))) { if (yield ({yyy:  \"\"  &= <y><z/></y>, constructor:  /* Comment */<><x><y/></x></> }) -= <><bbb xmlns=\"3\"><!--yy--></bbb></>) ( && __count__ @ <y><z/></y>);} else var prop = new #1#();");
tryItOut("for(let y in []);");
tryItOut("M:if(<><bbb xmlns=\"<x/> += prop\"><!--yy--></bbb>\f</>) { if ((new (<x><y/></x> > false)())) const __proto__ = <x><y/></x>;} else yield <><\rx><y/></x></>; const __noSuchMethod__;");
tryItOut("yield");
tryItOut("if(({}).hasOwnProperty) yield;");
tryItOut("with({constructor:  /x/ .__lookupSetter__(\"constructor\")})(<><x><y/></x></>);");
tryItOut("/*for..in*/L:for(const [__parent__, __parent__] = *::* /= false\f in this) export *;");
tryItOut("with({prop: })let __proto__ = null;");
tryItOut("L: export *;");
tryItOut("function(q) { return q; } const __noSuchMethod__;");
tryItOut("/*infloop*/L:for(let __iterator__; __proto__ = true :: (__parent__ = (-0)); <x><y/></x> >= <><xxx {constructor}={this.zzz.zzz} /></>) /*for..in*/for([constructor, ({ __iterator__: ({ __proto__: __count__ }), constructor: [] })] = (__count__ * false).unwatch(\"prop\") in prop = prop) yield .2;");
tryItOut("switch((<><x><y/></x></> && <><x><y/></x></>)) { case 0: break;  }");
tryItOut("do *; while(() && 0);");
tryItOut("/*for..in*/L:for(__proto__ in (((new Function(\"continue L;\")))\t(true ? constructor : window)))*::*");
tryItOut("with({}) constructor: ");
tryItOut("export prop\n");
tryItOut("L:if( \"\" ) { if (*::*.isPrototypeOf(<x><y/></x>).yoyo(((new Function(\"return @foo;\"))).call)) export *; else {break ; }}");
tryItOut("with({__proto__: 033}){prototype }");
tryItOut("/*for..in*/for(window['__noSuchMethod__'] in ((function(q) { return q; })(*::*\n)))return <x><y/></x>;");
tryItOut("/*infloop*/do {const prototype = window;return <x><y/></x>; } while( /x/ );");
tryItOut("for(let y in []);");
tryItOut("while(( '' ) && 0){;return  \"\" ;");
tryItOut("/*for..in*/for(__count__ = @foo in [[1]]) prop");
tryItOut("yield;yield;");
tryItOut("if((/a/gi).call((let (__parent__ = <x><y/></x>, __noSuchMethod__ = window) #1#.__parent__), (new (1 for (x in []))(@foo)))) let prop =  \"\" ; else  if (((uneval((({prop: }))))) .@ (<zzz><><x><y/></x></> <= 4.</zzz>.(undefined()))\f) {export *; } else {let function::constructor = #1=[#1#]; }");
tryItOut("/*infloop*/while([,,z1][<x/>]){throw *::*;gc() } const __count__;throw (function ([y]) { })();");
tryItOut("if(false) var __count__ = this, __iterator__; else  if ((let (__iterator__, __count__ = -1) <><x><y/></x></>)) __noSuchMethod__,  = -0;");
tryItOut("while(((let (constructor, prototype) prop++)) && 0){L: return window;/*infloop*/for(let set = [15,16,17,18].map(new Function, this\n); (null ? <x/> : __parent__); [<x><y/></x>])  '' ; }");
tryItOut("if((undefined ? <><x><y/></x></> : #1#))  { return ({__parent__: prototype & this .@ <x><y/></x>}) }  else null;");
tryItOut("if((yield __count__)) return undefined; else  if ((new <><x><y/></x></>())) {if(<><x><y/></x></>) {return;const __proto__, export constructor;; } else  if (0/0) return *; }");
tryItOut("if(__parent__ = ('fafafa'.replace'(//g, ))) {{throw __iterator__; }Function } else yield function(id) { return id };");
tryItOut("yield 1e4;");
tryItOut("/*infloop*/for(var constructor =  \"\" ; new ((function (__parent__, prototype) { yield <x/> } ).apply)((this.throw(<<x><y/></x></>)++)).hasOwnProperty(\"__parent__\"); -0.* >>>=__parent__ = 0x99) {{}L:if(0x99) { if (<x/>) return; else var __noSuchMethod__;} }");
tryItOut("L: yield  /x/ ;");
tryItOut("/*for..in*/L:for(var (x::prototype = <x><y/></x>)((prop = <x><y/></x>)) in  /x/ ) {let (__iterator__ = this) { return; } }");
tryItOut("return <bbb xmlns:ccc=\"(\n<><x><y/></x></>[[1,2,3,4].map()])\"><ccc:eee></ccc:eee></bbb>;");
tryItOut("/*for..in*/for(let constructor = this ? null : (void 1.3) in new *::*()) yield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in this.__defineGetter__(\"__parent__\", ({prop: [,,z1] }))) {with({}) { throw prop; }  }");
tryItOut("let(__noSuchMethod__ = <bbb xmlns:ccc=//h\n\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>, __proto__) ((function(){while(((function ([y]) { }.throw( /x/g ))) && 0) \"\" ;})());");
tryItOut("if(<x><y/></x>) { if (\t<x/>) {export prototype; }} else {var __count__ = ({a1:1}), __proto__;yield [,]; }");
tryItOut("with(((__iterator__.propertyIsEnumerable(\"__count__\"))[[<><x><y/></x></>].some((<x/>).__defineSetter__)])){export constructor;{}\n }");
tryItOut("/*infloop*/while(this ? <><x><y/></x></> : 3.141592653589793.unwatch(\"__count__\")){continue ;var __noSuchMethod__; }");
tryItOut("/*infloop*/do let ((\f{ prototype: constructor }), prop = __parent__) { export __parent__; } while(\n5.0000000000000000000000);");
tryItOut("L:while(((delete __count__).propertyIsEnumerable(\"prototype\")) && 0){if(*) {var prototype, __iterator__;return function ([y]) { }; } }");
tryItOut("/*for..in*/for(const [__iterator__, prototype] = new ([<><x><y/></x></>].filter(<x/>))(prototype, 1e81) in <y><z/></y>) export prototype;");
tryItOut("if((null\n)) {L:do {yield; } while((<x/>) && 0); } else  if ((({a1:1}).* @ eval(\"<y><z/></y>\", <y><z/></y>))) {yield;return; } else gc()");
tryItOut("return");
tryItOut("this.zzz.zzz;");
tryItOut("if(((yield <><x><y/></x></>))) { if (<x><y/></x>.__defineGetter__(\"__parent__\", ('haha'.split).apply)) let prototype = false, __noSuchMethod__ = __iterator__; else {(<><x><y/></x></>); }}");
tryItOut("<y><z/></y>");
tryItOut("L:switch(((-1).valueOf(\"number\")).hasOwnProperty(\"constructor\")) { default: if('fafafa'.replace(/a/g, function(y) { yield y; ; yield y; })) continue ; else const prop = [z1,,];break; break; break; case 6: case 7:  }");
tryItOut("M:while(('fafafa'.replace(/a/g, .2)) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in constructor) ");
tryItOut("for(let y in []);");
tryItOut("do /*for..in*/for(__count__ = <><x><y/></x></> in 1e+81) {const prop, __count__ = *::*; } while(((new (this)(__proto__, <y><z/></y>))) && 0);");
tryItOut("if((window.__count__)) { if (function  __noSuchMethod__ (prop)5.0000000000000000000000['__parent__']) const prototype = <><x><y/></x></>, prop = <x><y/></x>; else {const __noSuchMethod__, prototype = <y><z/></y>; }}");
tryItOut("with( \"\" )(#3={a:#3#});");
tryItOut("while((this.zzz.zzz) && 0){with({__noSuchMethod__: prototype.__defineSetter__(\"prototype\", Function)})yield;{if(undefined) { /x/g  } else  if (true) {yield;var __iterator__, __parent__; } else { } } }");
tryItOut("if(<bbb xmlns=\"new false(<><x><y/></x></>)\"><!--yy--></bbb>.(prop = arguments)) { if ([]) {} else new Function}");
tryItOut("gc()\n");
tryItOut("/*infloop*/for(prototype; @foo; <y><z/></y>) const __count__ = *::*;");
tryItOut("/*infloop*/M:for(<x><y/></x> * <><x><y/></x></>; (constructor = @foo); (*::*.*)) export *\n/*for..in*//* nogeckoex bug 349964 */L: for  each(let @foo in undefined.unwatch(\"__proto__\").__iterator__ in __parent__ = <x><y/></x>.__noSuchMethod__ = __iterator__.__count__) yield;");
tryItOut("with({__noSuchMethod__:  /* Comment */<><x><y/></x></>}){gc() }");
tryItOut("switch((eval(\"Function(this.__defineGetter__(\\\"constructor\\\", gc), <y><z/></y>)\", ( /x/g  >>= <x\f><y/></x\t>)).__lookupGetter__(\"prop\"))) { default: break; break; break; try { this; } finally { for(let y in []); } throw __count__;case 4: continue L;break;  }");
tryItOut("if(__noSuchMethod__[[1,,]]) { if (this.zzz.zzz) {yield; }} else export prototype;");
tryItOut("M:do const __parent__; while(((<y><z/></y> for each (__parent__ in  /x/ ))) && 0)\nvar constructor = [1], prototype;");
tryItOut("L: {yield; }");
tryItOut("let (__proto__) { /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this) break ; }");
tryItOut("yield (uneval(__parent__ = window));");
tryItOut("/*infloop*/while([z1].__defineGetter__(\"__noSuchMethod__\", eval)){(<><x><y/></x></>); }");
