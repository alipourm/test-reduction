tryItOut("M:with(this - <><x><y/></x></>){(1 for (x in [])) }");
tryItOut("/*for..in*/constructor = @foo.@*for(let prototype = <x><y/></x> in ({a1:1})) {; }");
tryItOut("\nL:while(( /x/ ) && 0){ finally  }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) {export __iterator__;arguments; }");
tryItOut("L: /*infloop*/L:for(prototype; <><x><y/></x></>; <x><y/></x>) {export *; }");
tryItOut("(__parent__);");
tryItOut("L: throw __iterator__;");
tryItOut("*;");
tryItOut("if((let (__proto__) (yield <x><y/></x>.__iterator__ = ([])))) {((4.).__defineSetter__).call\n(<><x><y/></x></>);{} } else  if (undefined) {L:while((let (prototype = <><x><y/></x></>) ({set: null, __noSuchMethod__:  /x/  })) && 0)(<><x><y/></x></>);let (__proto__ = this.zzz.zzz, __iterator__ = __noSuchMethod__) { if(__count__ = <x><y/></x>) {constructor; } } }");
tryItOut("while((false) && 0)(<x><y/></x>);");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, __parent__] = (({__parent__: new (*::*)([,,z1], 1e+81) })).propertyIsEnumerable(\"prototype\") && (__count__.prototype) in  /x/g ++) __iterator__--.@foo");
tryItOut("var __noSuchMethod__;");
tryItOut("M:with({constructor: eval(\"continue M;\", (Math.sin))}) for (--.__iterator__ in <y><z/></y>) for each (prop in  /x/g )");
tryItOut("let ([({ prop: [, ], prototype: ({ (((#3={a:#3#}.valueOf(\"number\")).__defineSetter__).call(({a2:z2}) ..  /x/ , (__noSuchMethod__ = *), (__noSuchMethod__ instanceof  \"\" ))): prototype, prototype: ({ __noSuchMethod__: [, , , , ], @foo: ({ prototype: prop, __proto__: constructor }) }) }) }),  /x/ , prototype, ]) { return\ngc() }");
tryItOut(" const __noSuchMethod__;");
tryItOut(" /x/g \n");
tryItOut("L: gc()");
tryItOut("do {/*infloop*/do {var __count__, __proto__;yield <x><y/></x>\n__count__ } while(this.__defineSetter__(\"__parent__\", function  __noSuchMethod__ (prototype, constructor) { return (function(id) { return id }.__count__) } ));yield; } while((1e+81.valueOf(\"number\")) && 0);");
tryItOut("M:if(<x/> ^= ({} = eval(\"yield;\", <x\f><y/></x>))) {yield  /x/ ;export *; } else  if (<xxx>{__count__}</xxx>) return;");
tryItOut("/*for..in*/for([__parent__, constructor] = null in prop) <x/>;");
tryItOut("/*infloop*/M:for(let __parent__ = ;  /x/ ; (export *.__lookupSetter__(\"prototype\"))) {gc()/*for..in*/for(let __count__ = true in __parent__) return constructor; } const __count__;");
tryItOut("L:if((prop.constructor setter= Math.sin && <employee id=\"1\"><name>Joe</name><age>20</age></employee>.yoyo((*)(window).__noSuchMethod__--))) {export *; } else  if ((({}).hasOwnProperty).call(<x/>, <><x><y/></x></>, []).@foo) let __iterator__ = #3={a:#3#}, __parent__;");
tryItOut("switch(('fafafa'.replace(/a/g, function(q) { return q; }))) { case 8: (undefined); }");
tryItOut("/*infloop*/L:while(constructor){if(prop = false) { if (window |= null) *;} else ;export __count__; }");
tryItOut("yield  \"\" ;");
tryItOut("let (prop = <><>*</></>, prop) { /*infloop*/while([,,z1](__parent__, window)){yield; } }");
tryItOut("( /x/ );");
tryItOut("switch((__proto__.eval(undefined)) -= Iterator(<><x><y/></x></>, -0) * ) { case  { yield ( ''  %= [z1,,]) } : prototype = __proto__; }");
tryItOut("while(([15,16,17,18].map((yield *).watch, <y><z/></y> <<  '' )) && 0)yield <x/>;");
tryItOut("while((eval(\"[constructor if (<><x><y/></x></>)]\", __count__.throw( /x/ ))) && 0){return  \"\" ;; }");
tryItOut("/*infloop*/for(const __parent__; (yield (typeof window)); ( ''  ? __noSuchMethod__ = window : this)) {gc()let __count__ = <><x><y/></x></>; }");
tryItOut("switch(void <y><z/></y>\n) { default: break; case 2: /*infloop*/do L:if(<x><y/></x>) { if (undefined) yield *::*; else ;} while(*.@*); }");
tryItOut("/*infloop*/M:do {continue ;null, x::__count__ = undefined; } while( /x/g );");
tryItOut(";\n;\n");
tryItOut("return <><x><y/></x></>;");
tryItOut("if(((undefined)(<x><y/></x>) = (constructor = *::*))) /*for..in*/for(const __parent__ in prototype) export *; else  if (new <xxx>{__iterator__}</xxx>) {propreturn;\nreturn <x><y/></x>;\n }");
tryItOut("/*for..in*/L:for(__iterator__ = ( /x/ .unwatch(\"__count__\")) in __parent__) __parent__ = <><x><y/></x></>;");
tryItOut("L: {yield;{} }");
tryItOut("/*for..in*/for(let __iterator__ in ((this ? <><x><y/></x></> : <x><y/></x>))) export *;");
tryItOut("let(__count__, delete) ((function(){{}})()); const __count__;");
tryItOut("with({}) { export *; } ");
tryItOut("throw StopIteration;");
tryItOut("L:if() { if ((window).watch) {/*for..in*/L:for(var __iterator__ in  '' ) <x><y/></x>__parent__ = false; } else {var prop;/*for..in*/L:for(prop in 5.0000000000000000000000) ; }}");
tryItOut("let(({ prop: __iterator__, __parent__: ({ __noSuchMethod__: prototype }) }) = eval(\"__parent__, __proto__;\", eval(\"throw window;\", (<><x><y/></x></> <<  \"\" ))), __count__) ((function(){constructor = __noSuchMethod__;})());");
tryItOut("\tprop =  '' ");
tryItOut("do __parent__ while(((window.yoyo({}))) && 0);");
tryItOut("let(__iterator__ = throw false, constructor) { throw StopIteration;");
tryItOut("{throw window;if(( /x/ .__lookupGetter__(\"__count__\")) - ())  }");
tryItOut("yield 0x99; const __proto__;");
tryItOut("if((p={}, (p.z = (*.__noSuchMethod__ = <x><y/></x>))())) {__iterator__ = prop;/*for..in*/for(const __parent__ in function(id) { return id }.__lookupGetter__(\"constructor\")) {do (5.0000000000000000000000).__defineSetter__ while((<><x><y/></x></>) && 0);let __count__ = <><x><y/></x></>; } }");
tryItOut("/*infloop*/L:for(var ({ delete: {{}const __parent__ = , __proto__ = window; }, __parent__: (__noSuchMethod__) }) = <>false</>; (({}).watch(\"__iterator__\", [1,2,3,4].slice)) >>= (__noSuchMethod__ = <><x><y/></x></>); (prop.(<x><y/></x>)) <<=  = undefined < <x/>) {yield; }");
tryItOut("let (({ __iterator__: prop, __parent__: ({ __proto__: [({ __count__: \n__count__, setter: __parent__ }), __count__], prototype: prop }) })) { if((this.__defineSetter__(\"__proto__\", function () { with(<x><y/></x>){<x><y/></x>; } } \f))) {const constructor = true, __proto__ = window;export *; } else  if (Math.sin .@ prop = #1#) {{}; } else /*for..in*/for(let __count__ in ((Math.pow)(<y><z/></y>))); }");
tryItOut("let(prototype = __iterator__.__iterator__.*, prototype) ((function(){let(prototype = (uneval(this))--) ((function(){prototype.__iterator__ = [1] = getter;})());})());");
tryItOut("/*infloop*/for(const prop; ((--false).eval(__parent__ = 033)) .. this.zzz.zzz; ((function  constructor () { continue L; } )([z1,,] % @foo)).__lookupGetter__(\"constructor\")) M:if([]) {{let constructor, x::; } } else  if ((__proto__.__count__ = ({__proto__ getter: Function, __parent__: -3/0 }))) {return;return (function ([y]) { })(); } else {/*for..in*//* nogeckoex bug 349964 */ for  each(prop in  /x/g ) {{} } }");
tryItOut("/*for..in*/for(let __iterator__ in ((function(q) { return q; })(<x><y/></x>.([,,z1]).watch(\"__iterator__\", 'haha'.split).propertyIsEnumerable(\"__iterator__\")))){export *; }");
tryItOut("switch(*) { case 3: L: {function () { const prototype; }  }break; {}case (<><x><y/></x></>.eval( /x/g )): {} }");
tryItOut("L: Math.sin");
tryItOut("export *\n");
tryItOut("if([11,12,13,14].sort) { if (#1=[#1#] < prototype) {gc()yield this; }} else yield <><x><y/></x></>;");
tryItOut("if(1.2e3) { if (__noSuchMethod__) {(undefined);; } else {var __parent__ = (function ([y]) { })(); }}");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in null) {(new Function(\"(1 for (x in []))\")) } }");
tryItOut("try { return (([<><x><y/></x></>].filter(<x><y/></x>) instanceof <x><y/></x>.throw(<x><y/></x>)) ? this() : [<><x><y/></x></>].filter([1,2,3,4].slice) / undefined.__lookupSetter__(\"prototype\")); } finally { try { let(__proto__ = (this.__defineGetter__(\"prop\", <{prop}> </{prop}>)), ({ __count__: ({ __parent__: __parent__, prototype: prototype }), prototype: [__proto__, , __proto__] }) = function ([y]) { }) { if(<x><y/></x>) return; else  if (__parent__) {export constructor;return; } } finally { throw StopIteration; }  } ");
tryItOut("with( '' .*){/*for..in*/for(const __count__ in ((function  prop (prototype)[z1])(constructor))){export *; } }");
tryItOut("/*infloop*/do {if(((true)[true])) { if (prototype.__count__ setter= gc) while((new (({}).__lookupGetter__)(window)) && 0){yield null; }} else /*for..in*/for(const __proto__ in (('haha'.split)(<><x><y/></x></>))){export *; }yield yield this.zzz.zzz; } while(new (({a1:1}))(undefined, \t<><x><y/></x></>) !== *.valueOf(\"number\"));");
tryItOut("L: (0/0).call");
tryItOut("do /*infloop*/for(const prototype; \n /x/g ;  /* Comment */<x><y/></x>) return ({a1:1}); while((<y><z/></y>) && 0);");
tryItOut("{const prototype, constructor = *::*; }");
tryItOut("(<><x><y/></x></> %= <x><y/></x>)\n");
tryItOut("( /* Comment */window) = __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ prototype: ({ __proto__: __parent__ }) }) =  /* Comment */<!--yy-->; ({__noSuchMethod__: false }); ~*::*) __noSuchMethod__");
tryItOut("gc()");
tryItOut("throw  /x/ ;");
tryItOut("/*for..in*/for([constructor, __count__] =  /x/  &= window.__lookupSetter__(\"prototype\") ? -1.__lookupSetter__(\"prop\") : window.__lookupSetter__(\"__noSuchMethod__\") in this.throw(prop)) {L:with({prop: <><x><y/></x></>})return <x/>;return <x/>; }");
tryItOut("gc()([,,]);\n( \"\" );\n");
tryItOut("{export *;throw (-0).hasOwnProperty(\"prop\"); }");
tryItOut("/*infloop*/while(false.__defineGetter__(\"__count__\", [1,2,3,4].map)){let __proto__ = x::__parent__, __count__ = <y><z/></y>; }");
tryItOut("M:if(__parent__.__proto__ getter= 5.0000000000000000000000.__count__ = arguments.eval(__noSuchMethod__ = 1e4)\t) {return <x><y\r/></x>; } else  if ([[, __iterator__, each, ], __count__] = prototype|=__iterator__ = true) continue L; else { { yield 0/0 }  }\n");
tryItOut("if((__count__.prototype = <><x><y/></x></>)) yield; else  if (x::constructor.__parent__ getter= (window).apply) {break ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (window.__proto__) in constructor = <><x><y/></x></>.__lookupSetter__(\"prototype\")) {/*for..in*/for(var __parent__ in <x><y/></x> >>= <x/>) {export *; } }");
tryItOut("/*infloop*/for((<x><y/></x>.__lookupSetter__(\"constructor\")); (true.__iterator__); let (__parent__ = this) null) var __parent__ =  '' ;");
tryItOut("");
tryItOut("/*for..in*/L:for(const gc()\nthrow {}; in true.yoyo(prototype)) /*for..in*/for(var setter(__noSuchMethod__) in window) {{}\f{} }");
tryItOut("yield;");
tryItOut("L:if(({__proto__: <{prop}> </{prop}>.eval(({__noSuchMethod__: #3={a:#3#} })), constructor: %=prototype\n })) {{(prototype); } } else {return\n[1,2,3,4].slice }");
tryItOut("return;");
tryItOut("/*for..in*/for(const __iterator__ in (('haha'.split)((p={}, (p.z = -1)()))))/*infloop*/while(new (({ __parent__: prototype }) = )()){switch(Math.sin.watch(\"__parent__\", Math.sin)) { default: case prop = '1e4:  } }");
tryItOut("/*for..in*/for(const constructor in 0x99) let null;");
tryItOut("/*infloop*/for(*.propertyIsEnumerable(\"\"); [(\n1e4)].map(function (__proto__, constructor) { yield 0.1 } ) | __iterator__ = <y><z/></y>; this.zzz.zzz) {;(function ([y]) { }); }");
tryItOut("return;");
tryItOut("yield");
tryItOut("switch(__parent__ = <y><z/></y>) { default: __iterator__;break; case new (Math.pow)(null, true): break;  }");
tryItOut("yield 4.;");
tryItOut("/*infloop*/for(var ({ constructor: [] }) = delete.__noSuchMethod__ = (({__proto__: <><x><y/></x></> })); (\n<y><z/></y>); *::* .@ (({prop: (function ([y]) { })(), __iterator__: <x><y/></x> }))) \n");
tryItOut("if((prop = *::*.eval(null))) { if (<bbb xmlns:ccc=\"null\"><ccc:eee></ccc:eee></bbb>) /*for..in*/M:for(var __proto__ in (([1,2,3,4].slice)(@foo)))gc() else (*::*);}");
tryItOut("M:do {yield;( \"\" ); } while(((__parent__.isPrototypeOf(5.0000000000000000000000 .@*:: <x/>)).__lookupSetter__(\"__iterator__\")) && 0);");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*infloop*/L:for(var constructor = [<x><y/></x>]; null--; yield let: __count__ =  /x/g ) let __parent__ = throw <x><y/></x>;, __count__ = <x/>;");
tryItOut("if((~(-0.isPrototypeOf(@foo)))) { if ((function (__parent__, prop) { yield window } ).call(-0, )) {export __proto__; } else export *;}");
tryItOut("if(true.propertyIsEnumerable(\"prop\")) yield  '' ; else let __count__, __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/L:for([window\n<!--yy-->]; (<x><y/></x>[*::*])[<x\f><y/></x>.(__parent__)]; (__noSuchMethod__ / ((uneval( /* Comment */this)) if (function ([y]) { })))) {if([z1]) { if (window) {{}continue ; }} else {return;gc() } }");
tryItOut("if(true.throw(5.0000000000000000000000)) yield (constructor = 1e+81); else  if (({ __parent__: [__parent__, __proto__, , , ], __count__: ({ prototype: __proto__ }) }) = ({}).__lookupGetter__( \"\" , <x/>).__defineSetter__(\"__iterator__\", -1)) {with({__parent__: ( /x/g )[(-1)]}){[1,2,3,4].map(undefined); } } else {({ prop: __count__ }); }");
tryItOut("/*for..in*/for(__noSuchMethod__ in <><x><y/></x></>) yield @foo;");
tryItOut("/*for..in*/for(var __parent__ in ((gc)(<{prop}><ccc:ddd><!--yy--></ccc:ddd></{prop}>))){with(this.__defineSetter__(\"prop\",  /x/g )){__count__;\nreturn <><x><y/></x></>; } }");
tryItOut("/*for..in*/for([__count__, __proto__] = (<x><y/></x>.@foo) @ eval(\"yield <x><y/></x>;\", window) in new Error()) {let __parent__; }");
tryItOut("let (__count__, prop = new (default: (4.);;break; )()) { {yield false;break L; } }");
tryItOut("/*for..in*/M:\rfor(const [__iterator__, __parent__] = __iterator__ =  /x/g  in 0/0)  /x/ ;");
tryItOut("/*infloop*/for(undefined; __parent__; ({})) ;");
tryItOut("with(yield <x><y/></x>){continue M; }");
tryItOut("yield new (<x><y/></x>[[,,z1]])((<x><y/></\fx>.eval(1e81)).@*);");
tryItOut("if(__noSuchMethod__ = ((({}) <<= 1e-81)())) { if (({__count__: [11,12,13,14].some })) {var prototype, prop;throw [z1]\n }} else return this;");
tryItOut("M:do {export *; } while((([constructor]) ? * : __noSuchMethod__ = [,,z1]) && 0);");
tryItOut("{gc() }");
tryItOut("if(*) { if (0.1) {yield; }} else const prototype = <x/>, __proto__;");
tryItOut("/*for..in*/L:for(const [__parent__, __parent__] = (<xxx>{prototype}</xxx> * (({__count__: this }))) in (3.141592653589793.throw( /x/ ))) {return (<x/>.@*);/*for..in*/L:for(var __iterator__ = prototype in __iterator__) {; } }");
tryItOut("/*for..in*/M:for(var __proto__ in *) yield;");
tryItOut("if(true) {const prototype;var __iterator__; }");
tryItOut("L: break L;");
tryItOut("if(this) switch(<x><y/></x>.valueOf(\"number\")) { case let (constructor = false, prototype) (function::prototype.__defineGetter__(\"__iterator__\", (new Function(\"let __iterator__ = window, __count__;\")))): break; case window: default: break;  }\n/*for..in*/for([prototype, prop] = ([({a2:z2}) if (.2)]) in (prototype.__noSuchMethod__ = Object(prototype, function ([y]) { }))) break ;");
tryItOut("if((\n((undefined for (let in <x><y/></x>))))) {yield; } else {return; }");
tryItOut("if(-(__parent__+=<><x><y/></x></>)) export *;");
tryItOut("if((({prototype: \n*::*.__lookupGetter__(\"prototype\") }))) {L: let __parent__ = 033\n(<><x><y/></x></>);__proto__\n }");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, [1,2,3,4].slice)){let prototype = undefined, __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(var prototype in <x/>) {const prototype = false, set = <x><y/></x>; }");
tryItOut("/*infloop*/for(const prototype; [null]; [].hasOwnProperty(\"__count__\").@*) {break ;throw *::*; }");
tryItOut("while((prototype.constructor = <x/>.hasOwnProperty(\"prototype\") &= __noSuchMethod__ = 033.prop = (constructor)|=prototype <= this.__lookupGetter__(\"prototype\")) && 0)/*infloop*/for(@foo.unwatch(\"__proto__\"); RegExp(); typeof __proto__) continue M;");
tryItOut("/*infloop*/M:for( '' ; <x><y/></x>; *::*) {gc() }");
tryItOut("yield; const __iterator__");
tryItOut("if([,,] <<= <x><y/></x>) gc() else  if ('fafafa'.replace(/a/g, (prototype-=null))) /*infloop*/L:for(null; ({}); *) return __parent__;");
tryItOut("/*infloop*/do {if(true) {return undefined;break M; } else {return prop;const prototype, __proto__; } } while(__noSuchMethod__ = constructor);");
tryItOut("; const __count__");
tryItOut("export __proto__;");
tryItOut("throw __iterator__;");
tryItOut("{/*infloop*/for(var __proto__; __proto__.constructor; new (function (__proto__) { constructor, prop; } )(033, __proto__)) let __count__; }");
tryItOut("export *;");
tryItOut("if(__count__) { if (((<y><z/></y> >>> .2) ? + ''  : __noSuchMethod__.(<x/>))) {throw <x><y/\t></x>;; } else  const prototype;}");
tryItOut("/*for..in*/for(const prototype = {} in null) null;");
tryItOut("switch() { case (([1,2,3,4].slice).call(((this)[*::*]), (new 033(<x/>[<x><y/></x>], .2)).*, <x><y/></x>.__defineGetter__(\"__proto__\", (1 for (x in []))))): break; case 4: break;  }");
tryItOut("if(@foo | __iterator__+= if (__iterator__).prop) { if ( /x/ ) __proto__ =  /x/ , __iterator__;const __iterator__;} else {;throw false; }");
tryItOut("L:if([function::__count__(<y><z/></y>), , ] = constructor) { if (([[1]]).watch(([<x><y/></x>.'some(Function))).eval(([--<y><z/></y>].map(/a/gi)))) if(<y><z/></y> ? @foo : -3/0.eval([15,16,17,18].map(function (__noSuchMethod__) { return <x><y/></x> } , null))) {if(<x><y/></x>.__defineSetter__(\"prototype\",  /x/ )) gc() else  if (<x><y/></x>[0/0]) return <x/>; else {export __iterator__;let prototype = this; }const __iterator__ = this; } else return;}");
tryItOut("{export __noSuchMethod__;/*for..in*/for(__noSuchMethod__ in (([1,2,3,4].slice)(null))){return; } }");
tryItOut("/*infloop*/do {with({constructor: (<x><y/></x>.__lookupSetter__(\"__parent__\").yoyo((<x/> if (<x><y/></x>))))})__parent__: @fooconst __count__, __parent__; } while((p={}, (p.z = (<x/> <= window))()));");
tryItOut("L:if(<x/>--) {yield <x/>;break ; } else  if () {\f{} } else return;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ function::getter: __proto__ }) }) = \fRegExp((({ constructor: __parent__ }) = constructor)).unwatch(\"__proto__\"); <><x><y/></x><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></>.eval([15,16,17,18].sort(Function, <>(p={}, (p.z = <x><y/></x>)())</>)); <x/>) {L:switch(constructor.set getter= (*::*).__defineSetter__) { case 3: continue ;break; (new Function).applybreak; /*infloop*/while(\t*::*){;return; }break; break; case <y><z/></y> <<= <><x><y/></x></>: /*for..in*/for(var  set __proto__ prototype (prototype, __proto__) { yield this }  =  /x/  in 033) {yield window;; } }with(({a1:1}).hasOwnProperty(\"__iterator__\")){export *; } }");
tryItOut("\t([1,2,3,4].slice).call const __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) yield <y><z/></y> ? -0 : (-0);");
tryItOut("/*for..in*/for(const [__parent__, __noSuchMethod__] = ((true[<><x><y/></x></>]) / __count__ = <><x><y/></x></>) in null) with({prototype: 1e4})yield;");
tryItOut("; const __noSuchMethod__;");
tryItOut("if(this) export __parent__; else  if ( /x/g ) continue M;");
tryItOut("with(<x\f><y/></x>.(window) :: __proto__ =  /x/g )return window;");
tryItOut("return;");
tryItOut("with(prop = (-1)){<x><y/></x>\t }");
tryItOut("if(__proto__.constructor = 0) (arguments);\t");
tryItOut("/*infloop*/while([1,,] > *::*){; }");
tryItOut("/*for..in*/for(let prototype.__count__ in 1e+81) (1 for (x in []))\n/*infloop*/do {export __iterator__;export *; } while((__iterator__.unwatch(\"__proto__\")));\nthrow 0/0;\n");
tryItOut("with(({__iterator__: (uneval(constructor))})){Function }");
tryItOut("if(1e+81) {return; }");
tryItOut("/*for..in*/for(let [constructor, prototype] = [__iterator__].filter(function(y) { yield y; return;; yield y; }) in (this.isPrototypeOf(1e81))) with(function::__noSuchMethod__ = @foo)yield;");
tryItOut("with({__iterator__: yield;function ()window(( /x/g .throw(undefined)), <y><z/></y>)})\t");
tryItOut("/*infloop*/for(var ({ prop: prototype, __count__: prop }) =  /* Comment */<><x><y/></x></>; [,,z1].__noSuchMethod__ =  /x/g ; <x><y/></x>.unwatch(\"__count__\")) {const prototype, function::prop = ({a1:1});throw constructor; }");
tryItOut("do {__parent__;__proto__: ({a1:1}) } while(((uneval(function(y) { yield y; export *;; yield y; }()))) && 0);");
tryItOut("return\n{}\nreturn;");
tryItOut("let (yield prop = *::*;, __proto__ = <xxx>{__noSuchMethod__}</xxx>.((constructor for (prototype in <y><z/></y>)))) { if(.eval([<x><y/></x\f>].map((function  x::__count__ (__iterator__) {  @fooreturn; } ).apply))) {if(#1=__proto__) {<><x><y/></x><>;*::*, get = ({a1:1}) } } else {export *; } }");
tryItOut(";/*for..in*//* nogeckoex bug 349964 */ for  each(((<x><y/></x>)(<x><y/></x>)) in {}) {<><x><y/></x></>; }");
tryItOut("switch(({a1:1})) { default: break;  }");
tryItOut("__proto__, __count__\nwhile((<x><y/></x>) && 0){throw  \"\" ; }");
tryItOut("{(<x//h\n><y/></x>);; }");
tryItOut("/*infloop*/M:do {yield undefined;export *; } while();");
tryItOut("M:do {with({function::prototype: ((yield [[]]))}){([1,,]);yield  '' ; }{} } while((constructor = (null.hasOwnProperty(\"__proto__\"))) && 0);");
tryItOut("if(this) {let constructor =  /x/ ;while((<x/>) && 0){return window; } } else  if (__parent__ = <y><z/></y>[<x/> === <x/>]) /*infloop*/for(const prop = @foo; *; 1.3) {__noSuchMethod__export *; } else if(({})) {[1,2,3,4].slice } else  if (__count__) {(function ([y]) { });; } else __parent__ = __iterator__, __noSuchMethod__ = 3.141592653589793;");
tryItOut("/*infloop*/L:while([1,2,3,4].map ? 4. : ((function(q) { return q; }).call((function ([y]) { })(),  '' , __noSuchMethod__) for //h\neach (__proto__ in ({a1:1}))).__defineSetter__(\"__iterator__\", function(q) { return q; })){L: {return <y><z/></y>;const __proto__ = ({a1:1}); }with({prototype: *})gc() }");
tryItOut("/*infloop*/do {let (({ __proto__: __parent__ }) = window.valueOf(\"number\"), prop) { ( /x/ ); } } while(({__proto__: this.__defineSetter__(\"prototype\", [1,2,3,4].slice), __count__: ({ __noSuchMethod__: __noSuchMethod__ }) = (this.__defineSetter__(\"__count__\", ((false).__defineSetter__).call)) }));");
tryItOut("return;\n[,];\n");
tryItOut("if((;.__proto__ = __proto__|=window)) {export *;if(prop) <><x><y/></x></>; else  if (*::*) gc() }");
tryItOut("yield this.eval(@foo) << ~<x><y/></x>;");
tryItOut("if((prototype) = prototype -=  '' ) eval(\"/*for..in*/\\rfor([prop, __parent__] = (__proto__.(__proto__.prop = [])) in <x><y/></x>) {{gc } }\", (__count__.prototype = this)) else return <x><y/></x>;");
tryItOut("/*for..in*/for(false.prop = __iterator__ = <x><y/></x> in function ([y]) { }.__lookupGetter__(\"__proto__\")) with({}) { yield prototype; } ");
tryItOut("L:if(<x><y/></x>.([,])) { if ((yield window)) { }} else Math.pow");
tryItOut("/*for..in*/M:for(const prop = @foo in <x/>) { }\f");
tryItOut("/*infloop*/for(let constructor = undefined; (prop :: <><x><y/></x></>); __noSuchMethod__: 0()) export *;");
tryItOut("if((0x99.valueOf(\"number\"))) { if (({})().hasOwnProperty(\"__noSuchMethod__\")) (<x/>); else yield setter;}");
tryItOut("if(<y><z/></y>) {undefined;(window); } else  if (*) {yield <y><z/></y>; }");
tryItOut("{}({}).hasOwnProperty");
tryItOut("while(((( /x/  *= (([.2].filter((new Function(\"return *;\")))).__defineSetter__(\"__parent__\", [1,2,3,4].map))) >> (__iterator__.([11,12,13,14].sort)).yoyo(yield -1(yield this, 0)))) && 0)const constructor, __proto__ = *;\n<><x><y/></x></>;\n\n");
tryItOut("(prototype = <y><z/></y>, __proto__)\n");
tryItOut("yield 0x99;");
tryItOut("");
tryItOut("with(<><xxx {__proto__}={( /* Comment */<><x><y/></x></>) << *::*[__proto__]} /></>)M:with({__proto__:  /x/ }){{} }");
tryItOut("do export *; while((<y><z/></y>) && 0);");
tryItOut("L:if(prop = *) { if ( /x/  ? <y><z/></y> : *) L: {if(__noSuchMethod__) { if (this) let x::__iterator__;} else yield; }} else /*infloop*/M:for(let prop; *; window) {export *; }");
tryItOut("/*for..in*/for(const __proto__ in ((Function)(<x><y/></x>.watch(\"prototype\", eval)))){if(((({}).__lookupGetter__((3/0))) += ({a1:1}))) { if (<zzz>({__proto__: <y><z/></y>})</zzz>) {prototype; } else export prototype;} }");
tryItOut("M:while((new ([1,2,3,4].slice)((*::* ? <x><y/></x> : false), <x><y/></x>) ? new [1,2,3,4].map(yield new 4.) : <><zzz>(<x><y/></x>)[1e-81]</zzz></>) && 0){/*infloop*/do {throw  /x/ ;export prop; } while(<x/>.__iterator__);gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <y><z/></y>) function  __noSuchMethod__ (prop, prototype)<x><y/></x>{(undefined);throw <x/>; }");
tryItOut("do {const constructor, constructor;M:if(__noSuchMethod__) { if (this) <x><y/></x>; else {export __iterator__;break M; }} } while(((<><x><y/></x></> = <x><y/></x>)) && 0);");
tryItOut("M:if(__count__ = window .@*:: <y><z/></y> >>>=<x><y/></x>) { if ([+window].map((1 for (x in [])))) {return @foo; }} else return;");
tryItOut("if(({ __count__: ({ constructor: __parent__, __proto__: __noSuchMethod__ }) }) = eval(\"if(__parent__) { if ( '' ) {function(q) { return q; } } else {{}throw <x><y/></x>; }}\", <x><y/></x>.yoyo(1e4))) /*infloop*/for(const ({ prop: __proto__, __noSuchMethod__: constructor }) = undefined; __parent__ = 0; <><x><y/></x></> && <x/>) return ({a2:z2}); else  if (Iterator(__parent__)) {/*infloop*/M:do ; while([<x/>]); } else {while((*) && 0)function::__parent__ = .2\nyield ({a2:z2}); }");
tryItOut("{return 3.141592653589793\n;let (prototype = *.watch(\"__iterator__\", window), __noSuchMethod__) { let __parent__, __count__; } }");
tryItOut("{(\f__noSuchMethod__); }");
tryItOut("yield;");
tryItOut("/*for..in*/for(const [__count__, __count__] = (new -1.propertyIsEnumerable(\"__proto__\")) in <><x><y/></x></>) throw @foo;");
tryItOut("while((((Math.pow).call(__count__, prototype = <y><z/></y> <  \"\" ))) && 0){/*infloop*/for(constructor = return;; ({}); ({ set __count__() { yield <><x><y/></x></> }  })) {throw #1#; } }");
