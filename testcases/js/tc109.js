tryItOut("/*infloop*/for(var ({ __proto__: constructor, constructor: __count__ }) = (<x><y/></x>)[<><x><y/></x></>]; __parent__ = null; <x/> @ <x/>) {0/0; }{ }");
tryItOut("/*infloop*/L:for(((yield __proto__\n)); __noSuchMethod__.constructor <= *; (__count__ & <x><y/></x> .@x::  /x/ )) ");
tryItOut("let prop = constructor;");
tryItOut("M:with(({ __proto__: [], constructor: ({ __parent__: ({ __noSuchMethod__: __iterator__ }), __count__: __count__ }) }) = set)if((\n0.1)) break L; else {return __proto__;let ; }");
tryItOut("{{gccontinue M; }throw -1; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; <><x><y/></x></>; <y><z/></y>) <y><z/></y>");
tryItOut("L:do {export *; } while(((function(y) { yield y; yield;; yield y; }).call( '' , window, [z1,,])) && 0);");
tryItOut("if(true) return; else  if (<x><y/></x> >>  /x/g ) export *;");
tryItOut("if(<x><y/></x>) {break M;var __proto__ = <><x><y/></x></>; } else  if (delete true) gc");
tryItOut("/*for..in*/for(const __iterator__ = * in <x><y/></x>) gc()");
tryItOut("[1,2,3,4].map const __count__;");
tryItOut("\nM:if(([function(id) { return id }])) {var __parent__ = <x/>, prop =  /x/g ; }");
tryItOut("/*for..in*/for(var (<><x><y/></x></>.watch(\"constructor\", [1,2,3,4].map))(__proto__) in ((((prototype.prop = 1e+81)).watch)((--1e81))))case 8: {}let __noSuchMethod__, constructor = function (__parent__, __proto__)<><x><y/></x></>;{export *;throw constructor; }break; default: case (function(q) { return q; })() >= [window].some(({}).hasOwnProperty): {}case 3: if(__noSuchMethod__ / prop[[*::* for (__iterator__ in [1,,])]].valueOf(\"number\")) {return; } else  if (try { let(({ __noSuchMethod__: [], __noSuchMethod__: __noSuchMethod__.prototype }) = ('fafafa'.replace(/a/g, ( /x/ ).watch)), __count__ = -0 ? null : #1=[#1#]) { this.zzz.zzz; } finally { with({}) return (__proto__ = [z1,,]); } ) Math.sinL:with({__count__: <>*::*.*</>}){yield; }case __noSuchMethod__.__iterator__ = +1e4: break; ");
tryItOut("with(-1)__parent__, __noSuchMethod__;");
tryItOut("with()throw window;");
tryItOut("if(({a2:z2})) {export *; } else yield\nthis.zzz.zzz;");
tryItOut("L: let __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("while((1.2e3) && 0)/*infloop*/for(const ; this |= ({a1:1}); #2=undefined) B");
tryItOut("/*for..in*/L:for(let prop in ((function(q) { return q; })(( /x/g  ? null : __parent__))))const window = false;");
tryItOut("/*infloop*/L:for((*)(<><x><y/></x></>) /= #1#; (void (yield __parent__)); <><bbb xmlns=\"arguments.throw(constructor)\"><!--yy\t--></bbb></> >>= prop) prototype: ((<x><y/></x>.@*) for (__iterator__(undefined) in undefined) for (__count__ in @foo))");
tryItOut("if([15,16,17,18].some(/a/gi, prop = prototype)) if(*::*) break M; else  if ((-1)) export *; else  if (0/0) {if(3.141592653589793\n) {{} } }");
tryItOut("yield");
tryItOut("while((switch( '' ) { case 6: <><x><y/></x></>;break;  }) && 0)*::*;");
tryItOut("{/*infloop*/for(const __proto__ = true;  '' ; <x><y/></x>) {'haha'.split }continue ; }");
tryItOut("if(__proto__ = ({})) {export *; }");
tryItOut("return __count__;");
tryItOut("{return;const prop = false; }");
tryItOut("let(constructor) { with({}) for(let y in [5,6,7,8])  if (function(id) { return id })");
tryItOut("let (__count__ = ({ get 1e81(constructor)(try { gc() } catch(__noSuchMethod__) { (new Function(\"throw @foo;\")) } ) })) { function  prototype () { yield @foo }  }/*infloop*/do gc() while(([,,].unwatch(\"prototype\")));");
tryItOut("let ((this.throw(undefined))(((p={}, (p.z = true)()))), constructor = (#1=[#1#] &= window ? (yield [,,z1]) : 4.)) { yield constructor; }");
tryItOut("if((@foo.__defineGetter__(\"prop\", /a/gi))) { if ((<x><y/></x>--)) <x><y/></x>; else yield <y><z/></y>;}");
tryItOut("/*for..in*/for(let __noSuchMethod__.prop in (((Math.pow).call)(3))){/*infloop*/do {yield; } while(((new Function(\";\")))(__iterator__.__count__)) }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; function::__noSuchMethod__.*;  ) {yield  '' ;export __count__; }");
tryItOut("{}");
tryItOut("/*infloop*/for((@foo.watch(\"constructor\", 1e-81)); this.__defineGetter__(\"x::__count__\", ({}).hasOwnProperty); <><xxx {constructor}={<bbb xmlns:ccc=\"#2=({__noSuchMethod__: <><x><y/></x></>\f})\"><ccc:eee></ccc:eee></bbb>} /></>) with({}) { for(let y in [5,6,7,8]) export *; } ");
tryItOut("{} const prototype;");
tryItOut("let __noSuchMethod__ = Object(<y><z/></y>, false), prop = @foo");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(({ new (@foo(<x/>,  /x/g ))( /* Comment */<x><y/></x>, <><x><y/></x></>): ({ __proto__: [, , ({ __noSuchMethod__: __noSuchMethod__, <><x><y/></x></>.__parent__: [, , __iterator__, __noSuchMethod__, __proto__] }), ({ prototype: __count__, __iterator__: __parent__ }), ] }), __count__: [[], , , __noSuchMethod__] }) in [__iterator__].filter('haha'.split)) {{}*::*; }");
tryItOut("/*infloop*/do yield; while((*::* |= *));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) export *;");
tryItOut("{if(new function(q) { return q; }(<x/> /= <x/>)) {yield <y><z/></y>;continue ; } else gc()throw 3; }");
tryItOut("M:if({export *; }) (<y><z/></y>); else {yield; }");
tryItOut("if() return [];__count__; else export prototype;");
tryItOut("/*for..in*/L:for([__noSuchMethod__, x::prototype] = delete null in window % #1#) <y><z/></y>;");
tryItOut("let (__count__ = ((eval)(__proto__).watch(\"__noSuchMethod__\", function (__noSuchMethod__, __count__) { return; } )), constructor) { __count__ = ({*::*: constructor}), __count__ = <y><z/></y>; }");
tryItOut("if(undefined.propertyIsEnumerable(\"__count__\")) ; else <y><z/></y>");
tryItOut("if(prop = <><x><y/></x></>) { if (<x><y/></x>.throw(<><x><y/></x></>)) {yield *::*;export __iterator__; } else {throw 1.2e3;break M; }}");
tryItOut("return;\nL:switch(constructor) { default: var __iterator__ =  \"\" ;case @foo: case 2: case <x><y/></x>: const __proto__ =  /x/ ;break; case 0: break;  }\n");
tryItOut("{const ({ __proto__: prop, constructor: __noSuchMethod__ }); }");
tryItOut("if(yield <><x><y/></x></>) \nthrow -1; else  if ([([1].yoyo(this))].map([1,2,3,4].map)) {yield; } else return;");
tryItOut("{}{}");
tryItOut("/*for..in*/for(var [__parent__, prototype] = [15,16,17,18].sort(eval, (__count__ = .2)) in this.zzz.zzz) {; }");
tryItOut("let([, , , prototype] = (this /= this)) { throw __parent__;");
tryItOut("let(setter, __parent__) { for(let y in [5,6,7,8]) constructor = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <y><z/></y>) throw 0x99;");
tryItOut("switch((this.__defineGetter__(\"prop\", function (__count__) { export *; } ))) { case __proto__.__count__ getter= Math.pow: continue ;case 1: break; default: const prop;case 9:  }");
tryItOut("/*for..in*/L:for(let __proto__ in <><x><y/></x></>) {yield; }");
tryItOut("if((--window.* == (new RegExp()))\t) {export *; }");
tryItOut("{if(-3/0) { if (window) yield <x><y/></x>; else {export __proto__; }}\ngc() }var __iterator__ = <><x><y/></x></>, <><x>\f<y/\f></x></> = *::*;");
tryItOut("yield;");
tryItOut("constructor\n\tL:do  while((<y><z/></y> >= prop) && 0);\n");
tryItOut("M:if(([true])) {yield <y><z/></y>;yield; } else  if \t([11,12,13,14].filter) {}");
tryItOut("/*infloop*/L:do {/*infloop*/do {yield __count__;__noSuchMethod__ } while(__proto__);__count__ = ({a1:1}), __noSuchMethod__ =  \"\"  } while((( ''  for each (__count__ in  /x/g )))[window.throw(<y><z/></y>)]);");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/M:for(var prototype; __proto__; arguments) {throw this;var default: {} = <y><z/></y>, constructor; }");
tryItOut("{/*infloop*/for(<x><y/></x>.__proto__ = 1.2e3; (<><x><y/></x></>.valueOf(\"number\")); ( \"\"  ? window : <x><y/></x>)) return;return; }");
tryItOut("/*infloop*/do yield; while((window ? ({a1:1}) : <y><z/></y>.propertyIsEnumerable(\"__iterator__\"))((uneval(each)), <x><y/></x> <<= function ([y]) { }));");
tryItOut("/*infloop*/for(({ prototype: ({ __proto__: __proto__ }), ({ function::__iterator__: prototype }): [constructor, ] }) = 0x99; prototype.(__iterator__); new Number(*, @foo)) {yield *;return <x/>; }");
tryItOut("function(q) { return q; }");
tryItOut("if(([15,16,17,18].filter('haha'.split, this))) {yield; } else  if ([ \"\" ]) __proto__");
tryItOut("/*infloop*/for(__proto__ = yield #2=[undefined].eval(false).watch(\"__proto__\", [1,2,3,4].slice); eval(\"( '' .prop =  /x/ )\", (prototype = <><x><y/></x></>)); eval(\" /x/g \",  /x/g )) {}");
tryItOut("let (constructor = []--) { prototype = <x><y/></x>; }");
tryItOut("/*infloop*/for(__count__; __proto__; function(id) { return id }.@foo.__lookupSetter__(\"__iterator__\")) /*infloop*/for(let __noSuchMethod__; 1e4; \t-3/0) break ;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].slice)(({__iterator__: ((({__iterator__ setter: gc }) for each (constructor in window) for (prototype in  /x/ ))), __noSuchMethod__: (<><x><y/></x></>)[this] })))){(null);const prototype = window; }");
tryItOut("if(<x><y/></x> ? window : function::__proto__) { if (let ([false.__proto__ , , (\r{ __count__: ({ __iterator__: ({ __count__: __proto__, __iterator__: __proto__ }) }), __parent__: [, , ] }), [, , __noSuchMethod__], ] = ( '' .__proto__), __iterator__) <><!--yy--></>) {let __count__ = 3;with({__proto__: prototype = 0/0})var __parent__ = [z1,,]; } else /*for..in*/L:for(const __proto__ in #1=[this]) {yield (-1);(<><x><y/></x></>); }}");
tryItOut("/*infloop*/while(gc()[ \"\" ] .@x:: new <x><y/></x>(<x/>))<>yyy</>");
tryItOut("/*infloop*/for(const __noSuchMethod__; <y><z/></y>; ( /x/ .hasOwnProperty(\"constructor\")) ?  : [<><x><y/></x></>].sort(function(q) { return q; })) /*for..in*/L:for([__count__, __iterator__] = ({}) in <x/>) export __count__;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/do export __iterator__; while()\nL: /*for..in*/;for\t(var __iterator__ = <x><y/></x> in <x><y/></x>) yield 0/0\n{}");
tryItOut("if(<x><y/></x>) {(<x/>);{} } else  if (1e+81) {yield;export *; } else <><x><y/></x></>");
tryItOut("/*for..in*/M:for(let prop = (eval(\"return;\", (new window))) in prop = __noSuchMethod__) {do yield; while((prop.([1])) && 0);yield __proto__; }");
tryItOut("if((<x><y/></x>.eval(prop)).constructor = prop = <><x><y/></x></>) yield <y><z/></y>;");
tryItOut("/*for..in*/for(__iterator__ in __parent__) {}");
tryItOut("/*for..in*/for(var __parent__ = new (({}).hasOwnProperty)() in @foo) {yield <><x><y/></x></>; }\t");
tryItOut("{yield  '' ;return this; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(let  = <x><y/></x>.(*) | (__noSuchMethod__-=window);  /x/g  / window for each (prop in 0.1) if (3.141592653589793); undefined.valueOf(\"number\") %= (this.__defineGetter__(\"prop\", (function  __count__ () { const __noSuchMethod__ =  '' ; } ).call))) {;constructor; }");
tryItOut("with(<><x><y/></x></>){yield <x/>; }");
tryItOut("try { let(__parent__, __iterator__) { let(__parent__, __parent__ = ({})) { __iterator__ = prop; } catch(__iterator__ if (function(){let(__parent__, __iterator__) { return this;})()) { return; } catch(constructor if 1.3 .@*:: <x><y/></x>.__lookupSetter__(\"prop\")) { ( /x/ ); } ");
tryItOut("if(this.zzz.zzz .@ (p={}, (p.z = prototype)()).hasOwnProperty(\"prop\").eval(*)) switch(this) { default:  } else  if (((\n<x><y/></x>) ^ [,,])) var prop = @foo, prop; else do export __count__; while((<x/>) && 0);\t");
tryItOut(" { yield (__parent__ = <x/> && this.__defineGetter__(\"constructor\", [1,2,3,4].map)) } ");
tryItOut("/*infloop*/M:do <x><y/></x>; while(prop);");
tryItOut("/*infloop*/while(function(q) { return q; }){/*infloop*/do { } while(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(var (constructor.__noSuchMethod__)( /x/g ) in window.__defineGetter__(\"prototype\", Math.sin)) function(y) { yield y; ; yield y; }\n{}");
tryItOut("/*infloop*/do {with((<x><y/></x> @ @foo)){{export prototype; } } } while(((Math.sin).call(<><x><y/></x></>, )).__proto__ = (constructor =  \"\" ));");
tryItOut("/*for..in*/L:for(let [__iterator__, __noSuchMethod__] = (<><x><y/></x></>)[<x/>] &= ([z1].__lookupGetter__(\"constructor\").eval(prop-=<x><y/></x>.(#1=[#1#]))) in  '' ) {/*infloop*/M:for(const ({ __count__: ({ __parent__: __iterator__ }), __count__: ({ __parent__: __proto__ }) }) = prop; ((<><x><y/></x></> <<= <><x><y/></x></>.isPrototypeOf((prototype.prototype = true))).eval((<x/>)(__parent__ =  \"\" ))); (this.__defineSetter__(\"__iterator__\", (__proto__.throw(null))))) export __count__;({}).hasOwnProperty }");
tryItOut("{/*infloop*/do {/*infloop*/for(undefined; <><x><y/></x></>; <x><y/></x>) throw __proto__; } while(<y><z/></y>); }");
tryItOut("switch( /* Comment */__proto__ = ((\n__proto__)())) { default: let (__parent__) { yield prototype; } }");
tryItOut("return;");
tryItOut("if( \"\" ) {0/0yield [z1]; }");
tryItOut("/*infloop*/while(({constructor: *})){(__proto__); }");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/for((); *::*.__parent__.yoyo(( '' .__lookupGetter__(\"prop\"))); <x><y/></x> @ __proto__ .. [,,z1]) {yield 033;{} }");
tryItOut("/*infloop*/for(__count__; <x/>.__iterator__ = <><xxx>{__parent__}</xxx></>; new ([1,2,3,4].map)(({ __iterator__: __iterator__, prototype: __proto__ }))) with(__noSuchMethod__.__lookupSetter__(\"x::constructor\")){M:while((true) && 0){{}yield __noSuchMethod__; } }");
tryItOut("if(__proto__ = ({ __proto__: ({ constructor: prop }) })) {yield window;{}constructor  else {const prototype = __noSuchMethod__;return *::*; }");
tryItOut("(undefined);");
tryItOut("/*infloop*/L:for(__iterator__; ({ get __noSuchMethod__(__proto__, prop) { yield  }  }); __iterator__(#0=({__count__: this})) = new RegExp()((({ set prop prototype (constructor, __iterator__) { return *::* }  })), #1#)) {if(3) {gc()__parent__; } }");
tryItOut("return <x><y/></x>;");
tryItOut("switch((prototype = __noSuchMethod__.(this) ? (function ([y]) { })() : <x><y/></x> = __count__.__count__)) { case ({ prototype: __parent__ }) = undefined: break; break ;break; break;  }");
tryItOut("if(eval(\"<y><z/></y>.yoyo((({__parent__:  /x/  }))).__lookupSetter__(\\\"constructor\\\")\", function::__parent__ = <>1e81</>)) if(new ([1,2,3,4].map)(<x><y/></x>)) {export __noSuchMethod__;return; } else  if (( /x/g .__lookupGetter__(\"__iterator__\"))) {const __iterator__ = <x><y/></x>, __parent__;/*\n*/ } else {; }");
tryItOut("/*infloop*/for(prop; ( \"\" \n); 4..isPrototypeOf(__count__)) {#1#; }");
tryItOut("/*for..in*/for(let ()(constructor.()) in ((function  ({ __parent__: ({ __noSuchMethod__: __iterator__\n }) }) (({ __iterator__: __proto__ }))[[]])(*)))/*infloop*/L:for(var ({ constructor: /*\n*/__iterator__, __count__: __proto__ }) = (prototype = __iterator__); true :: 1e4; (<y><z/></y>\n)) throw  /x/ ;");
tryItOut("/*infloop*/M:while(function(id) { return id }){return @foo; }");
tryItOut("export *;do {return <><x><y/></x></>;export __parent__; } while(([]) && 0);");
tryItOut("switch([<x><y/></x> if (<><x><y/></x></>)] = <x/> % #1#) { case []: break; yield function ([y]) { } ? <><x><y/></x></> : 1e-81;__proto__ = 1e4, __count__ = this;break; case 4: break; case 6: /*infloop*/for(let __count__;  ''  .@ <x><y/></x>; (uneval(window))) <x/>.valueOf(\"number\")break; default: break; {}throw false;case (yield  /x/g  == <x/>): case (delete <x><y/></x>): default: break; break;  }");
tryItOut("/*infloop*/for(this.zzz.zzz; ({  { return window } : __iterator__, __proto__: constructor }) = this.\f__defineGetter__(\"__iterator__\", ({}).hasOwnProperty); null) {continue ;return;\f }");
tryItOut("/*for..in*/for(let __iterator__ = [[1,,]].some(Function) in 3) continue L;");
tryItOut("/*infloop*/M:while(this.__defineSetter__(\"prototype\", (<><x><y/></x></>).__defineSetter__)){/*infloop*/for(var prototype; <x><y/></x>; null) {gc() } }");
tryItOut("this.zzz.zzz;");
tryItOut("var break ;;with({}) throw StopIteration\n");
tryItOut("/*infloop*/for(let prototype; __count__.(<x><y/></x>).__defineSetter__(\"__count__\", [1,2,3,4].slice).__proto__; yield new [1,2,3,4].slice( /x/ )) throw <y><z/></y>;");
tryItOut("if(new (constructor = __parent__)()) return <y><z/></y>\n__count__ = __proto__;");
tryItOut("L: {/*infloop*/L:for(let ({ prop: [[, ({ __proto__: ({ constructor: __count__ }) }), ], ] }) = prop.__iterator__ getter= (new Function(\"/*for..in*/for(var __parent__ in ((/a/gi)(this)))yield;\"));  /* Comment */true; __count__ = __noSuchMethod__) {try { throw <x/>; } catch(__parent__) { continue ; }  } }");
tryItOut("");
tryItOut("with({}) { if( /x/ [__count__].constructor @ (window.__defineSetter__(\"prototype\", ({}).__lookupGetter__))) { if ((((yield true == this)).constructor)) {let __proto__;return <x/>; } else __iterator__} } ");
tryItOut("throw <x/>;");
tryItOut("{yield <y><z/></y>; }");
tryItOut("yield __iterator__.__iterator__;");
tryItOut("/*for..in*/for(__proto__ in (((1 for (x in [])))((\n__proto__ =  /x/ .throw(((* for (prop in <x><y/></x>)))\n)))))arguments");
tryItOut("/*for..in*/for(var __iterator__ in ((new Function)(function(y) { yield y; (1.2e3);; yield y; }))){ }");
tryItOut("/*infloop*/for(let __parent__ = __iterator__; *::*; @foo) { }");
tryItOut("let prop = let, __iterator__ = @foo\n/*infloop*/for(var __iterator__ = eval(\"export *;\", 3/0); new (<x><y/></x>)(); new <><x><y/></x></>(null)) \t{export __parent__; }");
tryItOut("/*for..in*/for(let ({ __iterator__: ({ __noSuchMethod__: prototype }), __noSuchMethod__: prop }) in ((new [,](3))( /x/g ))){__noSuchMethod__ = [z1], prototype;yield <y><z/></y>\n; }");
tryItOut("let(__count__ = *::*) { yield;");
tryItOut("L: {switch([]) { case <x><y/></x>: break; break;  } }");
tryItOut("/*infloop*/M:for(__noSuchMethod__.__iterator__ = window >>= [,,]; (<x><y/></x>.(<><x><y/></x></>)); (new ()(((p={}, (p.z =  /x/g .*)()))))) yield function ([y]) { };");
tryItOut("/*infloop*/for(__noSuchMethod__.__count__ = false; new String(window.__proto__ = ([(\nprototype) if (__noSuchMethod__)])); <x><y/></x>t @ ((<y><z/></y> for each (prototype in this)))) ;");
tryItOut("for(let y in []);");
tryItOut("(new Function(\"throw __count__;\"))\nvar __proto__ = <x/>, __iterator__;");
tryItOut("if(delete (new <><x><y/></x></>(<x/>, this)) /= [[]] ^ __parent__) {{return; } const prop;{} const prototype; } else {gc()prop, __count__ = @foo; }");
tryItOut("let(prop, [({ __noSuchMethod__: __count__ }), [prototype, __parent__, prototype, __iterator__], __count__, , ] = false) { let(({ __proto__: ({ __parent__: constructor }), prop: ({ __count__: prototype, prototype: __proto__ }) }) = 'fafafa'.replace(/a/g, []), __parent__ = prop) { try { let <x><y/></x>; } catch(prototype) { false; } finally { yield <y><z/></y>; } ");
tryItOut("if( for (0.1.prototype in <x><y/></x>) for (prop in prop).__lookupSetter__(\"__count__\")) <><x><y/></x></>; else return;");
tryItOut("with({__parent__: __count__ = <x/>(prototype.constructor = undefined,  /x/g )}){(<x/>) }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (({true:  /x/ }) , __proto__ =  \"\" ); constructor(@foo.prop = this) = function ([y]) { }.valueOf(\"number\"); <x/> >>= -1) (new Function(\"return;\"))");
tryItOut("switch(#1=[#1#]) { default: break; evalbreak; export *;return;case null: export __count__;case 7: return __proto__;case __parent__:  }");
tryItOut("with({}) yield this.__defineSetter__(\"__iterator__\", Function);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in @foo) {function  constructor (__iterator__, __proto__) { return 0x99 }  }");
tryItOut("{return window; }switch(false.eval(<x><y/></x>)) { default: break;  }");
tryItOut("/*infloop*/for(const prop;  /x/ .__lookupGetter__(\"__noSuchMethod__\"); ({}).hasOwnProperty()) {return <><x><y/></x></>;gc() }");
tryItOut("do {L:if( /x/g ) Math.pow else  if ( /x/ ) {{} } } while((new Boolean()) && 0);");
tryItOut("/*for..in*/for(let prop = (new Exception(<x><y/></x>) != prop\n).__parent__ ? @foo : ((constructor.isPrototypeOf(true))[null]) in (<>yyy</> - (Math.sin))) {/*infloop*/M:do export *; while(this.__defineSetter__(\"constructor\", [1,2,3,4].map)); }");
tryItOut("L: {let prop, __iterator__; const __noSuchMethod__; }");
tryItOut("let (__proto__) { /*infloop*/L:for(window; (yield undefined); <y><z/></y> ||  /x/g ) {let __count__, prototype = -0;yield [z1]; }\n }");
tryItOut("/*for..in*/for(constructor in (('haha'.split)(<><x><y/></x></>))){export prototype; }");
tryItOut("with(<x><y/></x>)yield;");
tryItOut("if(*::*) { if (((yield new Function))) (false); else return;}");
tryItOut("do {M:while(((({ prop: ({ __proto__: ({ __parent__: __iterator__ }) }) }) = <x><y/></x>.(false))) && 0){{} }return Date([,],  '' ); } while((constructor.prototype setter= Function) && 0);");
tryItOut("if(this) { if (prop = <x><y/></x>) {/*for..in*/for(const prototype in ((function  prototype (__iterator__) { return 3.141592653589793 } )( '' [<x/>]))){constructor, __parent__ = <><x><y/></x></>;continue M; }gc() } else {if(<x/>.__defineSetter__(\"__noSuchMethod__\", (#3={a:#3#}).__defineSetter__)) { if (<x><y/></x>.(<><x><y/></x></>)) {export *;export __iterator__; } else {var constructor;__proto__; }}var __count__; }}");
tryItOut("for(let y in []);");
tryItOut("__iterator__ = prop;");
tryItOut("let(__count__ = Array((false)()), constructor) ((function(){for(let y in [5,6,7,8]) with({}) { return new (void __noSuchMethod__)(); } })());");
tryItOut("{export prop; }");
tryItOut("while((false) && 0)(<><x><y/></x></>);");
tryItOut("{{; }gc() }");
tryItOut("L: {return this; }");
tryItOut("let(constructor = <><x><y/></x></>, __count__) ((function(){__iterator__ = @foo})());");
tryItOut("let (__count__) { let prop; }");
tryItOut("__iterator__ = prototype;");
tryItOut("M:if([,,z1]) { if (prototype = 0x99) let __parent__ = this, constructor = ({}); else {; }}");
tryItOut("export *");
tryItOut("yield this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(([11,12,13,14].map)(__proto__ = window) in  '' ()) {M:if((<y><z/></y>.throw( /x/g ))) { if (4..unwatch(\"__noSuchMethod__\")) yield #3={a:#3#}; else {export __noSuchMethod__; }} }");
tryItOut("/*infloop*/do return; while((eval(\"return;\", <y><z/></y> >>>=*)).watch(\"constructor\", [1,2,3,4].map));");
tryItOut("__proto__ = __iterator__;");
tryItOut("with({}) { return;\nvar __proto__ = 0;\n } ");
tryItOut("switch((uneval(function::prototype.__iterator__ = window))) { default: export constructor;case <><x><y/></x></>.constructor = \n<><x><y/></x></>: throw @foo;break;  }");
tryItOut("/*for..in*/for(const [1] in ((gc)(this.__defineSetter__(\"prop\", [z1])))){;eval }");
tryItOut("/*for..in*/L:for(let [constructor, __parent__] = yield.valueOf(\"number\") in undefined) {return  /x/g ;var __proto__ = [,,z1], prop = #1=[#1#]; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in  '' ) yield;");
tryItOut("{const constructor; }");
tryItOut("L: { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <x><y/></x>) { }");
tryItOut("M:if() return;");
tryItOut("M:switch(<y><z/></y>) { default: case (window *= *::*): (({__parent__: <x><y/></x> }));case (this.__defineSetter__(\"__proto__\", __parent__)): gc()case 2: prop, constructor;break;  }");
tryItOut("{return;throw null; }");
tryItOut("export *;");
tryItOut("*;");
tryItOut("gc()\n");
tryItOut("if(<xxx>{__parent__}</xxx>) let (__iterator__, constructor) { x::prototype = <><x><y/></x></>; } else  if ((new function(y) { yield y; gc(); yield y; }())()) yield");
tryItOut("if(\n /x/ ) {L:switch(true) { default: var __noSuchMethod__ = <x><y/></x>;break; break; __iterator__;case __count__: case 2: break; case <><x><y/></x></>: break; break;  }gc() } else {({}).__lookupGetter__(<x/>); }/*infloop*/L:for([,]; <xxx {prototype}={<x><y/></x>} /><>this</>yyy; ((1 for (x in []))).call(this, this, this)) {let (__count__, __noSuchMethod__) { /*for..in*/for(var __iterator__ in <y><z/></y>) {export *; } }yield null; }");
tryItOut("with({__noSuchMethod__: window.@foo for (prop in (x::constructor +  /x/g ))}){export *;gc()return; }");
tryItOut("/*for..in*/for(const <y><z/></y>.prototype in this) { }");
tryItOut("return\n");
tryItOut("/*infloop*/for(let constructor; prototype; <y><z/></y>) yield");
tryItOut("let(([,])() = window.@foo +=  get __proto__ __noSuchMethod__ (__iterator__)this, constructor = (function  __count__ (prop, prop) { yield prototype = -1 } )(({__iterator__: 1.3 }))) { return (__parent__.(undefined));");
tryItOut("try { try { (<x><y/></x>); } finally {  }  } finally { Math.pow } \nL:if((__count__.__parent__)) return __iterator__; else {gc() }");
tryItOut("{1e-81; }");
tryItOut("with((constructor if (<><x><y/></x></>))){}");
tryItOut("/*infloop*/do M:with({prop: [ /x/  = this.__defineGetter__(\"prototype\", function(q) { return q; })]}){/*infloop*/do ; while(<><x><y/\n></x></>);/*infloop*/for(prop = <x><y/></x>; (*::*)[false]; ((-1) .@ <x><y/></x>)) var prototype; } while((true.throw(((uneval(__count__))))));");
