
tryItOut("/*infloop*/L:while(((uneval(Math.pow((__count__ = *), this))))){{/*for..in*/for(const __noSuchMethod__ in <y><z/></y>) {gc(); } } }");
tryItOut("/*for..in*/for(var __count__ = 'fafafa'.replace(/a/g, /a/gi) in *::*) {with((function ([y]) { })()) }");
tryItOut("/*for..in*/M:for(let __proto__ = (![1]) in let (prototype) false) ");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/while([<><x><y/></x></>].prototype){return (({__parent__:  })); }");
tryItOut("throw {};");
tryItOut("if(<y><z/></y>) export __iterator__; else  if (3.141592653589793) gc() else {thislet __iterator__ = [[]]; }");
tryItOut("if(prop.__parent__) { if (__parent__ = <y><z/></y> in typeof [] .. * < <x><y/></x>) /*for..in*/for(var __parent__.prototype in ((<x><y/></x>)((yield *::*))))return; else export *;}");
tryItOut("if([15,16,17,18].some((yield (\n({prop: __count__, prop: <x><y/></x> }))), #2=({a2:z2}))) gc() else  if (-#1#.unwatchprop (\"__proto__\").@*) {/*for..in*/for(const __iterator__ in (((Function).apply)(delete window)))return @foo; }");
tryItOut("/*for..in*/M:for(const [prop, __proto__] = ({ prop: setter }) = this in new Math.sin()) /*for..in*/L:for(const (__iterator__) in ((eval)((<x><y/></x>)())))yield;");
tryItOut("if((new ({}).__lookupGetter__(let (__count__) null,  \"\" ))--) L:do export *; while((window) && 0); else let prop, __count__");
tryItOut("do L:if(constructor = \n5.0000000000000000000000) { } else  if () const __count__, constructor; while((false.__defineGetter__(\"prototype\", gc)) && 0);");
tryItOut("/*infloop*/for(Math.pow; [11,12,13,14].filter; <{__proto__}> </{__proto__}>) /*for..in*/for(let constructor = this in  \"\" ) eval");
tryItOut("yield <x><y/></x> + *::*;");
tryItOut("for(let y in []);");
tryItOut("L:do let set while((new function (prototype) { return new <x><y/></x>() } ()) && 0)\t;");
tryItOut("for(let y in [5,6,7,8]) return -0 >>= [,,z1];");
tryItOut("/*infloop*/for(let prototype; __noSuchMethod__.(this.__defineSetter__(\"prop\", (new Function(\"export *;\")))); [] = (constructor = constructor)) ;");
tryItOut("{{switch( /x/ ) { default: break; case __proto__: break; try { ; } finally {  }  }export __noSuchMethod__; } }");
tryItOut("const __parent__;");
tryItOut("switch(prototype) { default: case 4: switch(window) { default: export __iterator__; }break; __count__ = window, __noSuchMethod__ = [1,,]; }");
tryItOut("/*infloop*/while(([((p={}, (p.z = constructor)())) for (prop in undefined) for each (__iterator__ in <><x><y/></x></>)]))return @foo;");
tryItOut("{with(__count__ = prop ? <y><z/></y> : *)/*infloop*/M:do {yield;continue L; } while(1.3); }");
tryItOut("if([[]] | 0x99) {throw undefined;<x/> }");
tryItOut("__count__ = __count__\nwhile((yield false.__lookupSetter__(\"__proto__\")) && 0)break \ndefault: evalbreak; case <x><y/></x>: const prop = prototype, __count__ = 1e4;break; case 9: break; break; case 2: function(q) { return q; }{}");
tryItOut("gcreturn 5.0000000000000000000000");
tryItOut("with({}) throw StopIteration;");
tryItOut("do {yield; } while((let (prop) (* ? [z1] : (false.constructor))) && 0);");
tryItOut("{for(let y in []); }");
tryItOut("/*for..in*/for(let prototype = __proto__ = ({ __noSuchMethod__: __proto__, __count__: prop }) in (eval(\"while((<><x><y/></x></>) && 0){export *; }\", *::*) << [<><x><y/></x></>].filter(({}).__lookupGetter__))) {{/*infloop*/M:while(prototype|=window)yield; }return; }");
tryItOut("__parent__ = function::prop;");
tryItOut("vswitch(new (this)(<y><z/></y>)) { case (constructor | [,,z1]) = (<x><y/></x> <  if (window)): /*for..in*/for(__parent__ in ((new Function)(0/0)))break M;break; break; case 4: break;  }");
tryItOut("if((yield *::* >= __iterator__)) {return;return; } else {}");
tryItOut("do {let (prop, prototype) { yield; } } while(([15,16,17,18].sort(__noSuchMethod__, @foo)) && 0);\nyield ((new Function(\"return;\"))(<x/>++, prop));\n");
tryItOut("export *\nyield [[]];");
tryItOut("/*for..in*/for(([,,])(1e81) in  '' ) {(<x><y/></x>); }");
tryItOut("export function::__iterator__");
tryItOut("while((<x/>.__lookupSetter__\f(\"__count__\")) && 0)");
tryItOut("/*infloop*/for(let ({ __count__: [({ __iterator__: ({ __noSuchMethod__: constructor }), prop: [constructor, , __proto__,  { var constructor =  /x/g ; } ] }), , ({ __parent__: constructor })] }) = <><x><y/></x></> .@x:: 3.141592653589793; __count__.((typeof <y><z/></y>)); prototype % void  /x/g .__defineGetter__(\"prop\", false)) {}");
tryItOut("/*infloop*/for(var \fprototype; (<y><z/></y> if ([,])); false) {<x><y/></x>\nreturn; }\n[,,z1];\n");
tryItOut("let (__noSuchMethod__ = eval(\"5.0000000000000000000000\", [,,]), each = <><x><y/></x></>) { return __count__; }");
tryItOut("({ __proto__: ({ function::__parent__: ({ __noSuchMethod__: ({ __parent__: [({ __noSuchMethod__: [] })] }) }) }) })");
tryItOut("let(function::prototype) ((function(){return;})());");
tryItOut("do export __parent__; while(('fafafa'.replace(/a/g, ('haha'.split).apply)) && 0);");
tryItOut("for(let y in [5,6,7,8]) with({}) { with({}) { (new Function(\"break L;\")) }  } ");
tryItOut("M:with(false(null, <x><y/></x>)){(@foo); }");
tryItOut("throw StopIteration;");
tryItOut("M:with(yield (function::__parent__ = @foo && [1,,])){/*infloop*/do  while(@foo);return ({prop: this}); }");
tryItOut("/*infloop*/M:for(var __proto__; ({ prototype: __iterator__ }) = __iterator__ = constructor; <x><y/></x>.(<x/>).valueOf(\"number\") ? \n[15,16,17,18].sort(function  __iterator__ (prototype) { return <x/> } , <x/>) : #1# % (function ([y]) { })()) ");
tryItOut("(<x><y/></x>);\n/*infloop*/for(prototype; undefined;  \"\" ) {var prototype, __count__ =  '' ;Math.sin }\n");
tryItOut("if(1e-81) {gc() }");
tryItOut("let (__parent__ = <x/>, __proto__ = <x><y/></x>) { (function(id) { return id }); }");
tryItOut("with(window)null;");
tryItOut("if((yield <x/>)) var prototype = window; else  if (eval(\"[z1]\", <x><y/></x>)) let function::__noSuchMethod__; else const __noSuchMethod__ =  \"\" , constructor = <x/>;");
tryItOut("try { var prop = __proto__; } finally { export *; } ");
tryItOut("L:if(<x/>) {const prototype;/*infloop*/for(const ({ prop: __iterator__ }) = ( ''  .. <><x><y/></x></>); undefined.__lookupSetter__(\"__count__\"); 3.hasOwnProperty(\"__proto__\")) /*infloop*/for(var __parent__ = [z1]; 1e4; <x><y/></x>) {var __noSuchMethod__ = window, __iterator__ =  /x/g ; } } else  if (this.__defineSetter__(\"__count__\", (new Function(\"/*for..in*/M:for(let [__parent__, __count__] = (new __count__ = <><x><y/></x></>, __noSuchMethod__ = <><x><y/></x></>;(*::*, *)) in window) return __iterator__;\")))) {gc()if(constructor)  } else {throw <><x><y/></x></>; }");
tryItOut("{with({__proto__: prototype}){Function(<><x><y/></x></>); } }");
tryItOut("for(let y in [5,6,7,8]) prototype = __iterator__;");
tryItOut("L:do {{let __iterator__ = function ([y]) { };return; }var __iterator__ =  /x/g , __count__; } while((false) && 0);");
tryItOut("{/*for..in*/L:for(var prototype\n in (([1,2,3,4].map)((0.@*.unwatch(\"__iterator__\")))))const prop = <><x><y/></x></>; }");
tryItOut("let (prototype, __noSuchMethod__ = (__noSuchMethod__.prop = <x><y/></x>.throw(<x>\t<y/></x>yyy))) { gc() }");
tryItOut("L: {}\n");
tryItOut("with({__noSuchMethod__: <zzz>(0/0 < prop.__iterator__ = this)</zzz>}){export *; }");
tryItOut("__iterator__, prototype = this;");
tryItOut("switch(void window) { default: break; gc()break; case 3: break; case 0: case \tprototype =  '' : throw  '' ; const __proto__;break; case 9: break; case 0: break; case 3:  }");
tryItOut("return;");
tryItOut("if( /x/g  |= ( /* Comment */<x><y/></x>).yoyo((this\f)(__iterator__))) { if ((new String())) {yield true; }} else {;([1,,]\t); }");
tryItOut("L: {with({__noSuchMethod__: prototype > <y><z/></y>}){gc } }");
tryItOut("with({}) { with({}) { yield; }  } ");
tryItOut("for(let y in []);");
tryItOut("export *;\nreturn;\n");
tryItOut("/*infloop*/for(const constructor; constructor.__parent__; __noSuchMethod__.__proto__ = __noSuchMethod__-=window) /*for..in*/for(var [__count__, __noSuchMethod__] = Boolean() in [[1]]) {continue L;yield <x><y/></x>; }");
tryItOut("{eval/*infloop*/while(<\f><x><y/></x></>)export constructor; }");
tryItOut("/*infloop*/while(prototype = 3\n){do do {continue M; } while((*) && 0); while((([1,,])().constructor) && 0);/*infloop*/for(const [({ prototype: prototype, __noSuchMethod__: __noSuchMethod__ })] = ([<y><z/></y>]); (1.2e3).call( /x/ , undefined); ([15,16,17,18].sort(<><x><y/></x></>, function ([y]) { }) if (<x><y/></x>))) {gc(){} } }");
tryItOut("L: {Function\n{}\n\n }");
tryItOut("/*infloop*/do {return; const constructor;({}).__lookupGetter__ } while(eval(\"'haha'.split\", ({a2:z2})));");
tryItOut("if((Math.pow(false,  /x/g ))) { if (eval(\"(new (this)(<><x><y/></x></>, 1e-81))\", const __noSuchMethod__ =  '' , __noSuchMethod__ = <x/>)) {; } else {/*infloop*/for(const ({ __parent__: constructor, __iterator__: __parent__ }) = __count__.__iterator__;  '' \n; new (Math.pow)(<x><y/></x>)) {export *;let __iterator__; }for(let y in []); }}");
tryItOut("M:if(((__noSuchMethod__ = constructor = <><x><y/></x></> %= (p={}, (p.z = this)()))())) { if ((window)() :: <><x><y/></x></> == window) /*infloop*/L:do var __proto__ = 0x99, __iterator__ = window; while(0.1); else {prop; }}");
tryItOut("/*for..in*/for(let prop = new [[1]]--((prop > <x><y/></x>)) in eval(\"M:if(<x><y/></x>) { if (.2) continue L;} else {const prototype = ({}), __proto__; }\\f\", __proto__ = arguments)) return (__noSuchMethod__ <<  /x/ );");
tryItOut("/*infloop*/for(const __iterator__; <x/> .@ <x><y/></x>; ([[]])[3/0]) {/*for..in*/for(let prop in <x/>) return #1#; }");
tryItOut("return ([11,12,13,14].some);");
tryItOut("if(new #3={a:#3#}()) {{} } else function ()[[]]\n");
tryItOut("if(__count__.__proto__ = true) { if (@foo % <x><y/></x>) {<x><y/></x>;(<><x><y/></x></>); } else {yield; }}");
tryItOut("with({prop: (false << *.isPrototypeOf(this))})M:do export *; while((__count__) && 0);");
tryItOut("yield;");
tryItOut("if(-3/0) if(#2=[(#2=[window])]) /*infloop*/while(<y><z/></y>)throw undefined;");
tryItOut("export __iterator__;");
tryItOut("return get\n");
tryItOut("let([({ __iterator__: [constructor, prototype, __count__, ], __count__: __parent__ }), [__parent__, [], ({ __parent__: __noSuchMethod__ }), prototype, ], ({ prototype: __count__ }), function::constructor['__proto__'], ]) { try { throw __count__; } catch(( ({ __iterator__: ({ prototype: __iterator__ }) })(window) if (function(){0/0 = __noSuchMethod__;})()) { return; } catch(__noSuchMethod__) { throw prop; }  const __count__;");
tryItOut("do {let (null['prop'] = (uneval(undefined))) { this }/*for..in*/\tfor(var __noSuchMethod__ = @foo in <y><z/></y>) {throw [z1,,]; } } while(((constructor.__proto__)) && 0);");
tryItOut("/*infloop*/for((window.propertyIsEnumerable(\"constructor\")).hasOwnProperty(\"__iterator__\"); \nprototype; (({}).__lookupGetter__)) {{} }");
tryItOut("return;");
tryItOut("L:switch(null) { case 8:  }");
tryItOut("{{yield; } }");
tryItOut("\nexport *\f;\n");
tryItOut("/*infloop*/for(let __count__;  = [,]; <y><z/></y> @ <x><y/></x>) throw ({prototype: * + window}) >>> true ^ ({a1:1}) instanceof <><x><y/></x></>.__defineGetter__(\"prop\", (1 for (x in [])));");
tryItOut("L:if(<x><y/></x>.prototype = <x><y/></x>)  set constructor(__noSuchMethod__, __count__)*::* = [] else  if (<><zzz>(Function(*::*)).__noSuchMethod__</zzz></>) switch(null) { case 5: default: yield;break; case 7: /*infloop*/do {break ; } while((uneval(<x><y/></x>)));break; case (/a/gi): break; case 2: case (eval(\" /x/ \", <y><z/></y>)): null;break;  { throw 1.2e3; } break; case ({constructor: null}):  }");
tryItOut("{(false); }");
tryItOut("return prototype\n");
tryItOut("L: {let (prototype) { let prop = arguments; } }");
tryItOut("L:while((<y><z/></y>) && 0)gc()");
tryItOut("return __count__\n/*infloop*/while((({\t__parent__: <x/>, __proto__: <y><z/></y> }))){yield; }");
tryItOut("L: {__proto__, __proto__ = true }");
tryItOut("/*for..in*/for([__noSuchMethod__, let] = <><x><y/></x></> in window.isPrototypeOf(<x/>) in  /* Comment */((uneval(new (*)(#1#, <><x><y/></x></>))))) {/*for..in*/for(constructor in (((eval(\"false\", <><x><y/></x></>)).apply)(eval(\"<><x><y/></x></>\", __proto__)))){(<><x><y/></x>\f</>);gc() } }");
tryItOut("/*infloop*/while(var constructor =  '' , __proto__ = *::*)if(<x><y/></x>) { if (null.unwatch(\"prop\")) {gc()__noSuchMethod__ } else return <x/>;}");
tryItOut("{let __iterator__ = 0/0, constructor }\n");
tryItOut("let (__count__, __count__) { with\t({__proto__: <><x><y/></x></>}){yield; } }");
tryItOut("this.zzz.zzz;");
tryItOut("switch(@foo) { case 0: break;  }");
tryItOut("for(let y in [5,6,7,8]) throw *::*;");
tryItOut("if(({x::prototype: (({}).hasOwnProperty)(*::*, __parent__), prototype getter: [1,2,3,4].map })) {const __parent__; } else  if (this .@ 1.2e3) {yield [1];continue L; } else continue M;");
tryItOut("<y><z/></y>");
tryItOut("yield\ngc()");
tryItOut(";\n");
tryItOut("__iterator__ = __proto__;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("if(yield <><x><y/></x></> ? <x><y/></x>.__lookupSetter__(\"(*::*).watch\") : void __parent__.__defineGetter__(\"__iterator__\", \tfunction (prop) { return; } )) continue L; else  if (<><xxx>{prop}</xxx></>) {let (__count__ = window) { ; } }");
tryItOut("/*infloop*/for(__iterator__; <x><y/></x>; *) { }");
tryItOut("/*infloop*/for((new Date((new (( /x/g )(<><x><y/></x></>, *))()))); (yield ;)(); ) {export __iterator__;var constructor; }");
tryItOut("L:if(<x><y/></x>) const constructor = -3/0, __count__ = <x><y/></x>; else  if ([z1]) {const __noSuchMethod__ = window, __iterator__; }");
tryItOut("/*infloop*/for(@foo.propertyIsEnumerable(\"constructor\") = (p={}, (p.z = default: \tbreak; )()).eval([5.0000000000000000000000 for (prop in __count__)]); __parent__-=(__noSuchMethod__ = <x><y/></x>.()); new (Function)(<y><z/></y>, prototype).propertyIsEnumerable(\"prototype\")) {__noSuchMethod__ }");
tryItOut("L:if( for (__proto__ in this) for each (__count__ in  \"\" )) yield; else (@foo);");
tryItOut("{yield;throw <><x><y/></x></>;\n<><x><y/></x></>;\n }");
tryItOut("/*infloop*/for(<><x><y/></x></>; this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"eval\"))); __proto__ = true) continue Lif(each, __count__ < prototype) /*\n*/{(<x><y/></x>);\n } else  if (([undefined for (constructor in true)])) {__count__, __iterator__ = window;break M; } else {{}yield <x><y/></x>; }");
tryItOut("if(\f__parent__ >>> arguments) { if (*) {var __proto__;throw <x><y/></x\t>; }} else {(<x/>);return __iterator__; }");
tryItOut("with({prototype: __count__ ? #1# : ({__noSuchMethod__: __proto__ = null})})yield;");
tryItOut("{/*for..in*/M:for(var (let (__iterator__ = <y><z/></y>, __parent__ = <x><y/></x>)  '' )['__noSuchMethod__'] in ((function  __noSuchMethod__ (({ prop: __parent__ }))prop = __iterator__)((__iterator__)))){const __noSuchMethod__ = function ([y]) { };__parent__ = @foo; } }");
tryItOut("M:with({constructor: true != <>(<>/*\n*/<x><y/></x></>);</> | @foo})let __noSuchMethod__ = window;");
tryItOut("{var ; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (((({}).__lookupGetter__).call(<x><y/></x>, )) ? -__iterator__ : \t(function (getter)<x><y/></x>).call(*::*,  /x/ )) %= __proto__ = <x><y/></x> in  /* Comment */undefined) /*for..in*/for(const prop = @foo in 4.) {export prototype;__parent__, __noSuchMethod__ =  /x/ ; }");
tryItOut("({}).hasOwnProperty");
tryItOut("/*infloop*/do {const <x/> = [[1]];throw ({a2:z2}); } while();");
tryItOut("continue ");
tryItOut("/*infloop*/L:while(new ((new Function(\"yield;\")))(null)[(uneval(<><x><y/></x></>))] ? (({ set __proto__()false })) : eval(\"export prototype;\", <x/>)){L:if(1.2e3) {export __noSuchMethod__;throw <x><y/></x>; } else  if (<x><y/></x>) {; } }");
tryItOut("prototype");
tryItOut("var constructor = window, constructor = true");
tryItOut("/*for..in*/for(prototype in ((Math.pow)( \"\" ))\f)let __proto__ = 1e+81;");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("__proto__.__noSuchMethod__");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("switch(((uneval(<x/>)))) { case 1:  }\n");
tryItOut("for(let y in [5,6,7,8]) undefined;");
tryItOut("while(((eval(\"\\n\", #3={a:#3#}.valueOf(\"number\").__defineSetter__(\"__noSuchMethod__\", function  __iterator__ (__proto__, __iterator__) { return  \"\"  } ) <<= __noSuchMethod__.isPrototypeOf(<x><y/></x>)))) && 0);");
tryItOut("/*infloop*/__parent__, function::constructorfor(const prototype = @foo; return 1e+81;; <y><z/></y>) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let ((eval(\"<x><y/></x>\", true).eval(( '' ))).eval((/a/gi)(\f /* Comment */<x/>))) in undefined) return;");
tryItOut("switch(1e+81 , <x/>) { default: (<x/>); }");
tryItOut("let (({ prop: ({ __noSuchMethod__: prop }) }) = ({__noSuchMethod__: <x/> })) { while(((window(<y><z/></y>))) && 0)return <x><y/></x>\n/*for..in*/M:for(var __noSuchMethod__ = this in  /x/g ) {__proto__ = this } }\t");
tryItOut("L: M:do  while(((this.zzz.zzz)) && 0);");
tryItOut("if(let.propertyIsEnumerable(\"__count__\")) {/*infloop*/for(let __noSuchMethod__ = [1,,]; <x><y/></x>; <x/>) return @foo; } else  if (this.zzz.zzz) return  '' ;");
tryItOut("");
tryItOut("if((((new __parent__ =  /x/  - (new <x><y/></x>)  (((uneval(this.__count__)))(), new (*::*(<x><y/></x>, this).propertyIsEnumerable(\"__iterator__\"))())\t).__defineSetter__).call).apply) {with({}) try { __iterator__/*\n*/; } finally { export *; } L:if(constructor) { if ([,]) {break ; } else } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (uneval(<x><y/></x>)).constructor in let (__parent__ = window) <><x><y/></x></>.*) {export *;export *; }");
tryItOut("while((new (function(q) { return q; })(<x/>)) && 0){prototype;__proto__ }");
tryItOut("do /*for..in*/M:for(let [__parent__, prototype] = (-1) >= #3={a:#3#} , --(prototype.__proto__ setter= -3/0), prototype.<y><z/></y> getter= Math.pow in <><x><y/></x></> ? this : window) /*for..in*/M:for(prop in (([1,2,3,4].slice)(*::*)))(<><x><y/></x></>); while((constructor = this.constructor) && 0);");
tryItOut("switch(new Function()) { default: /*for..in*/for(const __noSuchMethod__ in (\nthis)) export *;/*for..in*/L:for(const prototype in ((Math.pow)((null for each (prototype in 1e+81))))){break ; } }");
tryItOut("yield\n[1]");
tryItOut("/*for..in*/for(var __parent__.__noSuchMethod__ = __iterator__ in (([({a1:1})].filter(('haha'.split).call).yoyo((let (prop =  /x/g ) <x><y/></x>)))[eval(\"if( /x/g ) {yield  /x/ ; } else  if (function ([y]) { }) gc() else prototype = @foo, __iterator__ = 0.1;\", (__noSuchMethod__ = *::*))])) throw <x><y/></x>;");
tryItOut("__proto__ const __count__;");
tryItOut("switch( /x/g ) { default: ({}).hasOwnPropertybreak; break; case 5: break ;case ({__parent__: {}}): break;  }");
tryItOut("if((<>1e81 ? arguments : <x><y/></x></>.((return true))))  /x/ , __iterator__; else {yield; }");
tryItOut("with(prop.__parent__ = ((eval(\"-0\", *))(((1 for (x in []))).call(__count__, <><x><y/></x></>,  \"\" ), <x/>)).@foo){throw StopIteration; }");
tryItOut("L:if(window) __parent__ else  if ((((__parent__).__defineSetter__).call)) {; } else ");
tryItOut("while(((uneval(this.__defineSetter__(\"__count__\", 'haha'.split)))) && 0){(function ([y]) { });Math.sin }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in *::*) {export *; } }");
tryItOut("function::__count__;");
tryItOut("if((eval(\"\", new (([z1,,].__defineGetter__(\"prop\", (({a1:1})).watch)).__defineSetter__)(__noSuchMethod__.prototype =  /x/g )))) {{} } else  if (1.3.__defineSetter__(\"__count__\", Function)) L:with({__parent__:  \"\" }){export *;return  \"\" ; }");
tryItOut("L:with(this ^ [,]){{<><x><y/></x></>; } }");
tryItOut("/*for..in*/for(let (__iterator__) in (((1 for (x in [])))(window.eval(window)))){*::*;if(window) {return this;return; } else  if (false) throw  /x/g ;const constructor = true; }");
tryItOut("constructor = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) <x><y/></x>;");
tryItOut("with([11,12,13,14].filter)gc()");
tryItOut("let (@foo) { /*for..in*/for(var __parent__ = new [@foo].filter(Function)(({ set __count__ __parent__ ()(window.__defineSetter__(\"prop\", window)), __iterator__ setter: gc })) in (this.__defineSetter__(\"__count__\", function () { return <><x><y/></x></> } ))) {;return; } }");
tryItOut("/*infloop*/for(var let; *.__lookupGetter__(\"__parent__\");  '' .yoyo(*) ? *::*\n : this.__defineSetter__(\"__count__\", Math.pow) ? <><x><y/></x></>.hasOwnProperty(\"prototype\").prototype : __parent__ = (function ([y]) { })()) {let __parent__ = <x/>; }");
tryItOut("M:if(prop) { if (((function  __noSuchMethod__ (__iterator__)0/0).call(5.0000000000000000000000, [,,z1], window))) {__noSuchMethod__ = <><x><y/></x></>; }} else {gc()let __parent__ = undefined, delete; }");
tryItOut("this.zzz.zzz;");
tryItOut("L: {yield;yield prop; }\n/*for..in*/for(let constructor = __noSuchMethod__.(([[1,2,3,4].slice])) in 033) while((function ([y]) { }) && 0)yield @foo;\n");
tryItOut("if(typeof __noSuchMethod__ = <y><z/></y>) const __parent__; else return;");
tryItOut("M:do if(({__noSuchMethod__: constructor.constructor setter= new Function[], __count__ getter: <><x><y/></x></>.__lookupSetter__(\"let\") })) { if ((__parent__ = __count__ = 1e81)[try { let(prop = this) ((function(){yield <><x></></x></>;})()); } catch(delete) { throw set; } finally { let(__noSuchMethod__) { {} } ]) {} else {export constructor; }} while((( /x/  == this)) && 0);");
tryItOut("with({__proto__: (eval(\"__proto__, __proto__;\", prop))})gc()");
tryItOut("this.zzz.zzz;");
tryItOut("if((<><x><y/></x></> % * |= function ()this(3/0,  /x/g ))) let __parent__ = 0.1; else {throw window; }");
tryItOut("while(((prototype) = yield <><x><y/></x></>) && 0){yield [1]; const constructor;prop.hasOwnProperty(\"__parent__\"); }");
tryItOut("/*for..in*/for(__count__ = (prop = undefined <<= (gc).call|=<x/>.hasOwnProperty(\"__proto__\")) in  /x/ ) {{}yield  /x/g ; } const __proto__;");
tryItOut("/*for..in*/for(var __count__ = (new (window)(<x><y/></x\t>, <x/>) += ((__iterator__ >= <x/>))) in new (undefined)(*)()) {/*infloop*/for(const __parent__; new (<y><z/></y>)(); -1 ? [[1]] : <x><y/></x>) L:switch(.2) { case -0: break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function(y) { yield y; let __noSuchMethod__;; yield y; } in ('fafafa'.replace(/a/g, Math.sin) for (prototype in <><x><y/></x></>/*\n*/))) const constructor;");
tryItOut("continue L;");
tryItOut("/*for..in*/for(let __proto__ = __parent__ in __noSuchMethod__ = window.valueOf(\"number\")) {/*for..in*/for(prototype in ((\ffunction  prototype (__iterator__) { return *::* } )(delete [1,,]))){return <><x><y/></x></>;[z1,,]; } }");
tryItOut("do /*for..in*/for((prop) in <><x><y/></x></>) {break L; } while((prototype) && 0);");
tryItOut("/*infloop*/M:while(5.0000000000000000000000)while((*.__defineGetter__(\"constructor\", function  __count__ () { var __count__ = @foo, __count__; } )) && 0){{}(this); }");
tryItOut("if(new RegExp(0.1, prototype)) {export prototype; } else if(this) break ; else  if ( /x/ ) var prototype, constructor = __parent__;");
tryItOut("/*infloop*/M:while([1.2e3])export __proto__;");
tryItOut("if(this.__defineGetter__(\"__iterator__\", (1 for (x in [])))) throw <><x><y/></x></>; else  if (eval(\"(<y><z/></y>--)\", (yield undefined))++) {(<x><y/></x>);{} } else __count__ = <y><z/></y>;");
tryItOut("throw null;");
tryItOut("/*infloop*/for(__noSuchMethod__; (Iterator(.2, this)); (<x/>.prop = ({a1:1}))) return;");
tryItOut("/*infloop*/for(let prop = ((({}).__lookupGetter__).call(__proto__. \"\"  setter= (1 for (x in [])), ([[1]].valueOf(\"number\"))));  /x/g ; function ([y]) { }) {if(({ __parent__: __parent__ }) = <><x><y/></x></>) { if (<x><y/></x>.(#1#)) {<><x><y/></x></> } else {}}{yield;gc() } }");
tryItOut("if(this.__defineSetter__(\"__parent__\", (new Function(\"\")))) ; else  if (Function) break L;");
tryItOut("if(*) throw /*\n*/<><x><y/></x></>; else  if (constructor = this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)\t) {return;with(export prototype;){throw <><x><y/></x></>; } }");
tryItOut("\n(window);\n");
tryItOut("/*infloop*/L:do {throw <y><z/></y>;\n } while(__iterator__);");
