tryItOut("throw prop\n");
tryItOut("switch((yield <><x><y/></x></>.eval(window))) { case 9: M:if(__count__)  else  if (<><bbb xmlns:ccc=\"[z1,,]\"><ccc:eee></ccc:eee></bbb></>)  else var constructor, constructor;while((({__count__: *::* })) && 0)return */*for..in*/for(const setter in (((1 for (x in [])))(this)))return;break; case @foo: if( /x/g .unwatch(\"__noSuchMethod__\")) return; else  if (((<><x><y/></x></> for (__count__ in @foo)).throw(constructor))) {yield;var __proto__ = <x><y/></x>, __parent__ = prop; }break; if((x::prop.<><bbb xmlns:ccc=\"((new Function(\"{}\"))).call(null)\"><ccc:eee></ccc:eee></bbb></>)) const __proto__; else {throw <><x><y/></x></>; }break; case 2: with({__iterator__: \n \"\" })break; break; break; for(let y in [5,6,7,8]) (this).applybreak; case 1: continue ;default:  }");
tryItOut("do {throw __iterator__;{} } while(( /* Comment */<><x><y/></x></>) && 0);");
tryItOut("do {L:if((constructor =  /x/ )) { if (typeof  '' ) {const prop;([]); } else {; }}/*infloop*/M:for(this.__lookupGetter__(\"getter\"); Exception( /x/g , __proto__); yield null) {return <><x><y/></x></>; \"\" ; } } while(((this.zzz.zzz).__parent__ = ( if (__count__ = [,,].__lookupGetter__(\"__proto__\"))).__lookupSetter__(\"__proto__\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in this) {break M; }");
tryItOut("M:if((({ /*x::__iterator__: ({ prototype: __count__ }) }) = this)) export *; else  if (<x><y/></x>\n) do {let __count__; } while((this) && 0);");
tryItOut("if(<x/>) { if (({__parent__: this.zzz.zzz.prototype, prototype getter: (1 for (x in [])) })) {throw StopIteration; } else {}}");
tryItOut("if(new [1,2,3,4].map(<><x><y/></x></>.valueOf(\"number\"))) {gc()return; } else {}");
tryItOut("/*infloop*/for(let [, ] = (new Exception(__count__)); prototype.(<x/>); (__proto__.__parent__ setter= new Function) ^= prop.hasOwnProperty(\"__count__\") *= [@foo]) continue L;");
tryItOut("/*for..in*/M:for(const constructor in ((this.__defineSetter__(\"__parent__\", (1 for (x in []))))(this)))yield;");
tryItOut("/*for..in*/for(__iterator__[<><x><y/></x></>].__parent__ in (((__proto__).watch)( /x/g .@*[(new (({a1:1}))())]))){gc()return; }");
tryItOut("{if((eval(\"0.1.__count__\", false.@*))) {yield *; } else  if (<><x><y/></x></> += <x/>) ;{} }\n");
tryItOut("/*infloop*/for(<><x><y/></x></>.__noSuchMethod__ = (__count__(<x/>)); 5.0000000000000000000000; new (( '' )(window, null))) const __iterator__, __parent__\n/*for..in*/for(let prop in false) yield;");
tryItOut("/*for..in*/for(var __count__ = [15,16,17,18].filter((<y><z/></y>).apply, 1e4) in *) {export *; }");
tryItOut("if((({function::prototype: prototype += 4., __noSuchMethod__: eval(\"const constructor = <x><y/></x>, __count__;\", __count__) })) .. __iterator__ = eval(\"yield;\", @foo)) return; else {prop = __parent__; }");
tryItOut("if((<xxx>{__proto__}</xxx> >>>=-0)) L:if((1e-81 ? <x><y/></x> : <><x><y/></x></>)) {const __parent__;gc() } else  if (window) __parent__ = <><x><y/></x></> else ");
tryItOut("with(__count__.__parent__ =  /x/g  , ){/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in this) let __count__ = #3={a:#3#}, __parent__; }\n");
tryItOut("yield <><x><y/></x></>;\n<x><y/></x>;\n");
tryItOut("for(let y in []);");
tryItOut("let (prototype = __proto__) { let constructor = *, prop; }");
tryItOut("with({prop: this.__defineSetter__(\"prototype\", function (__noSuchMethod__, x::prop) { yield <y><z/></y> } )}){function (__count__, __proto__) { __parent__, __parent__ = 1.3; } /*infloop*/for(yield arguments;; this; <><x><y/></x></>) constructor: prop }");
tryItOut("gc()");
tryItOut("with({prop: ( + <><x><y/></x></>)})/*for..in*/for(let (prop) in (('haha'.split)(( '' .valueOf(\"number\")))))with(<x/>)break M;");
tryItOut("/*infloop*/while((function (__parent__)<x><y/></x>(__proto__, <x><y/></x>)))return <x/>;");
tryItOut("let(({ __iterator__: prototype, prop: ({ x::x::prop: [[__noSuchMethod__], [, ({ __count__: __proto__, constructor: __count__ }), __proto__, ], , ] }) }) = (function  __parent__ (__count__, __iterator__) '' () === new RegExp(<x><y/></x>)).propertyIsEnumerable(\"function::__proto__\")) ((function(){throw StopIteration;})());");
tryItOut("export __proto__;let __count__, __parent__;");
tryItOut("if((__count__ + __count__ @ <y><z/></y> /= 1.3.__count__)) <><x><y/></x></>; else  if ([new function (__iterator__)<y><z/></y>(4., __proto__) if (__parent__)]) with(<x><y/></x>){prop = const prop;; }");
tryItOut("with({__parent__: (\nfalse) ^= __iterator__|=1.3 <=  \"\" })/*infloop*/for(__iterator__; ({a2:z2}).constructor for (prop in window) for each (__iterator__ in this); (0/0)(continue ;)) (<><x><y/></x></>);");
tryItOut("L:if(arguments) { if (function ([y]) { }) continue L; else {const constructor, __count__;yield false; }}");
tryItOut("/*infloop*/for(let __iterator__ = (__proto__ = @foo).propertyIsEnumerable(\"__parent__\"); prop =  \"\"  > __iterator__.(<x/>); ((__iterator__.prop = window).prototype = new (null)()) ^= .__iterator__ = <x><y/></x>.( '' )) {do 0.1; while((<y><z/></y>) && 0);/*for..in*/for(__noSuchMethod__ in ((function  __count__ () { (<><x><y/></x></>); } )((<x/>.eval(*)))))return; }");
tryItOut("if(eval(\"[]\", function::prototype)\t) {var __noSuchMethod__, __noSuchMethod__;export *; } else {window }");
tryItOut("for(let y in [5,6,7,8]) with({}) return (__count__);");
tryItOut("__parent__ = <y><z/></y>\nreturn\nreturn <x/>;");
tryItOut("yield;\ngc()\n");
tryItOut("/*infloop*/L:do return <x><y/></x>; while(<><x><y/></x></>);");
tryItOut("\twhile((((__proto__|=1e4.__defineSetter__(\"__count__\", <x><y/></x>)).@foo for each (prototype in \n /x/g  :: <x><y/></x>))) && 0){L:if(function(id) { return id }) {([,,]); } else  if (@foo) const __proto__ = <x/>, prop = @foo; else throw  /x/g ;export *; const prop; }");
tryItOut("with({__proto__: prototype.(<><x><y/></x></>)});\nreturn <x><y/></x>;\n");
tryItOut("if() { if (<x><y/></x>.throw( '' )) var prototype = __noSuchMethod__, __count__;let constructor, prototype = <x><y/></x>; else {let prop; }}");
tryItOut("return <y><z/></y>\n");
tryItOut("do return; while((__parent__) && 0);");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, function  __proto__ (({ __noSuchMethod__: __parent__, prop: prop })) { yield prototype =  /x/g  } ); (window.{throw __proto__; } = new (<y><z/></y>).call(__iterator__, __parent__)).isPrototypeOf((<y><z/></y> |= 0).propertyIsEnumerable(\"constructor\")); <><{prototype}><!--yy--></{prototype}></>.prototype.valueOf(\"number\")) export __noSuchMethod__;");
tryItOut("/*for..in*/for(__count__ in (((Math.sin).call)(constructor)))/*for..in*/for(prototype = null in ({a1:1})) {return;; }");
tryItOut("return ([]) = (#1=<y><z/></y>);");
tryItOut("L: var __parent__, prototype;");
tryItOut("{let (__proto__) { throw __iterator__; }; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(let constructor; (yield __proto__ =  '' ); void @foo) gc()");
tryItOut("L:if(window) {prototype; } else { }");
tryItOut("(@foo);\nreturn this;\n");
tryItOut("continue ;");
tryItOut("while((eval(\"new Array(<y><z/></y>)\", 1.3.constructor)) && 0){<x><y/></x>{} }");
tryItOut("if(<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")) return; else  if (((null for each (prototype in each))) % <x/>.unwatch(\"__parent__\")) {return true;switch(__count__ = true) { case 4: (true);break;  } } else ");
tryItOut("/*for..in*/for(var prop.__count__ in (((x::constructor( '' )))((<x/> ? <x/> : \rprop)))){{{} }//h\n }");
tryItOut("if(1e4) { if (null) {yield;__noSuchMethod__ = <y><z/></y> } else export *;}");
tryItOut("let (__parent__ = *) { /*infloop*/L:for(eval(\"(yield  /x/g )\", new Object( \"\" , this)).prop = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; constructor.__iterator__; \n(*)[<><x><y/></x></>]) [1,,]; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(({__count__: 4. >>>=<y><z/></y> });  \"\" \n; (constructor <= (\n1e-81))) /*for..in*/for(const __iterator__ = function ([y]) { } in  /x/ ) return window;");
tryItOut("{;\nyield\n\n }");
tryItOut("/*infloop*/do {yield ({a2:z2}); } while(({a1:1}));");
tryItOut("with({constructor: <y><z/></y>.@foo.__defineGetter__(\"@foo.constructor\", eval) ? [<x><y/></x>].filter(/a/gi) : (this for each (constructor in <x/>))})if(4.) { if (<><x><y/></x></>) {throw <>__count__</>;yield <x><y/></x>; }} else {(<x><y/\f></x>); }/*for..in*/for(var [__parent__, __proto__] = <y><z/></y> in @foo) (<y><z/></y>);");
tryItOut("if(((p={}, (p.z = __proto__)()))) { if (new 'fafafa'.replace(/a/g, Math.sin)()) ;} else let (__parent__ = .2) { /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x/>) gc() }__parent__ ");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (new Boolean()) in __parent__) {export __parent__; }");
tryItOut("let (__parent__, prototype = constructor) { /*for..in*/L:for(let ({}).__lookupGetter__ in (-1)) export *; }");
tryItOut("if( /x/g ) {if(@foo) { if (*) {gc() }} else {<y><z/></y>; } } else  if (\nthis.constructor = <x><y/></x>) {/*infloop*/while(undefined)(this); }");
tryItOut("export *;");
tryItOut("/*for..in*/L:for(prop = <x><y/></x> in 0.1)  const __noSuchMethod__;");
tryItOut("/*for..in*/for(var prototype in ((gc)(((yield <y><z/></y>).hasOwnProperty(\"__count__\"))))){case 8: default: gc()case 5: do return; while((1e81) && 0); }");
tryItOut("throw prototype;");
tryItOut("{/*for..in*/M:for(const constructor in ((eval)((__count__ = __iterator__))))var __proto__ = <><x><y/></x></>, constructor; }");
tryItOut("throw this\n");
tryItOut("/*infloop*/for(__proto__.__iterator__ = eval(\"{}\", (__count__ = 4.)); prototype.__proto__; eval(\"if(this) return; else \",  /* Comment */<x><y/></x>)) export *;");
tryItOut("gc()\nreturn <x><y/></x>;\n");
tryItOut("do return; while((__noSuchMethod__.__proto__ = (-1)) && 0);");
tryItOut("{export __iterator__;{M:if( /x/g ) {; } else {export __parent__; }return;\n0.1;\n } }");
tryItOut("L:with([<x><y/></x>].sort(function  function::__parent__ (constructor)\tfunction ([y]) { }))( '' );");
tryItOut("if(<><x><y/></x></>) {} else  if (<y><z/></y>) {throw  /x/g ;yield let; }");
tryItOut("M:if(this.__defineGetter__(\"prototype\", (<x/>).call)) {while((0.1) && 0){return window; } }\n/*infloop*/while(this)gc() else  if ((window)(null.watch(\"__noSuchMethod__\", Math.pow), this).yoyo(this)) {constructor } else /*infloop*/for(prototype = constructor = (this >>>=[]--); prop =  \"\" ; eval(\"<><x><y/></x></>\", <y><z/></y>) >>= (__iterator__ -= true < @foo)) {export \n__parent__;gc() }");
tryItOut("L: /*for..in*/for(prototype.__parent__ in window) {throw true; }");
tryItOut("var __proto__;\n\f1e4;\n");
tryItOut("/*for..in*/for(let [__count__, prop] = this.__defineGetter__(\"prototype\", @foo) | (uneval(<x><y/></x>)) in __parent__) L:if((function (prop, __noSuchMethod__) { return window; } (false))) { if ( /* Comment */<y><z/></y>) {var __proto__ = this, __parent__ = prop;export prototype; }} else throw //h\n<x><y/></x>;");
tryItOut("M:while((<x><y/></x> |=  \"\" ) && 0)-1; const constructor;");
tryItOut("L:with({function::__proto__: __parent__}){}");
tryItOut("/*for..in*/for(var [__count__, __parent__] = delete case 5:  = [,,] in  /* Comment */(__proto__)((<x><y/></x> |= this))) return;");
tryItOut("/*infloop*/for(const __iterator__ = (<x/> >= [,,].isPrototypeOf(<x/>)); prop; __count__.__count__ setter= /a/gi > (new (Function)())['__count__']+=(((__count__.constructor = <x/>) for each (__count__ in <x><y/></x>) for each (__parent__ in  /x/g )\t).watch(\"__noSuchMethod__\", gc))) {if(undefined) { if (*) export __noSuchMethod__;} else {//h\nconst prop; } }");
tryItOut("(__parent__);\nyield;\n\nL: (undefined).watch\n");
tryItOut("export *;");
tryItOut("M:with(__count__.prop = #0=__iterator__.__defineGetter__(\"__count__\", [1,2,3,4].map))yield  /x/ \nyield;");
tryItOut("M:if(arguments) yield; else  if ([]) let constructor =  '' , let; else export function::__noSuchMethod__;");
tryItOut("/*for..in*/for(let constructor = prop%=(function(y) { yield y; prototype = <y><z/></y>;; yield y; }((-0) + null)) in <x><y/></x>) L: function () { yield 0/0 } ");
tryItOut("do {switch(window) { case 9: return 0x99; }export __noSuchMethod__; } while(((yield (<x><y/></x>.__iterator__ = *::*)).propertyIsEnumerable(\"__noSuchMethod__\")) && 0);");
tryItOut("/*infloop*/for(var (( /x/g  !==  /x/g ))[yield @foo]; prototype = <><x><y/></x></>.eval(constructor); __proto__ = []) ;");
tryItOut("with(__count__.prop getter= eval) const constructor;");
tryItOut("if(*::*) {yield;let constructor; } else  if (([11,12,13,14].map)) {yield; } else let __count__, constructor;");
tryItOut("L:if(#1=[#1#].throw(yield __count__ = #3={a:#3#})) {/*infloop*/for(__iterator__; eval(\"-3/0\", this); (window.propertyIsEnumerable(\"__iterator__\"))) {const \r__count__ = false, prop = <><x><y/></x></>;continue M; }M:switch(<><x><y/></x></>) { default:  } const __noSuchMethod__; }");
tryItOut("\n/*infloop*/do return window; while(--<x><y/></x>);");
tryItOut("{L:if(<><x><y/></x></>)  /x/  else {(<><x><y/></x></>).__defineSetter__gc() }/*infloop*/for(__iterator__; eval(\"gc()\", window).hasOwnProperty(\"__noSuchMethod__\").@*; __count__ = __parent__)  set __iterator__ __count__ (__iterator__, __count__) { return try { throw #1#; } catch(__iterator__ if this) { let(prototype = __count__.__proto__) ((function(){__proto__ = prop;})()); } catch(__count__ if !__noSuchMethod__ .. /a/gi) { with({}) { let(__parent__, constructor) { yield null }  } catch(__iterator__ if <><xxx {constructor}={(<x><y/></x>.( '' ))} /*\n*//></>) { throw StopIteration; } catch(prototype if (function(){return;})()) { return ((-1).__defineSetter__(\"constructor\", function  __count__ (null) { (1 for (x in [])) } )); } catch(prop if (function(){try { *; } catch(__count__) { gc() } finally { let prototype, constructor = [1,,]; } })()) { with({}) { return; }  } catch(function::prop if  { yield __proto__ <<= [[1]] } ) { with({}) { this.zzz.zzz; }  }  }  }");
tryItOut("while(([11,12,13,14].sort) && 0){/*for..in*/for(let <x><y/></x>.__noSuchMethod__ in window) {L: { return __proto__ ^= (prop.*) } if(true) { if (<x><y/></x>) gc() else const __proto__, __count__;} } }");
tryItOut("<><x><y\f/></x></>;\nreturn  \"\" ;\n");
tryItOut("for(let y in [5,6,7,8]) throw constructor;");
tryItOut("L: {; }");
tryItOut("/*for..in*/for(var prop = <><xxx {__count__}={true.throw(<y><z/></y>)} /></> in ({__iterator__ getter: function () { return  /x/g  }  })) {__proto__ = <y><z/></y>, __count__ = 3/0;export *; }");
tryItOut("with({}) yield this.__defineGetter__(\"constructor\", (((<x><y/></x>))).watch);");
tryItOut("if() {} else throw this;");
tryItOut("return .2;");
tryItOut("if(__noSuchMethod__ = *::*.@foo) {continue L; } else  if (window) yield;");
tryItOut("return;");
tryItOut("if(Function([15,16,17,18].some((<><x><y/></x></>).call, [,,] !=  /x/g ))) { if ((p={}, (p.z = [,,z1])()).__noSuchMethod__ =  /x/  if ( /x/g )) {let prop = __proto__;0/0; } else yield;}");
tryItOut("/*infloop*/for(var *.__parent__ = this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; var __parent__ = [,];; yield y; }); ({ __proto__: ({ __iterator__: constructor, prototype: __iterator__ }) }) = <x/>, constructor = *.yoyo(<><x><y/></x></>); @foo) constructor = 0x99, __parent__;");
tryItOut("export *; const constructor;");
tryItOut("__count__\nyield\n");
tryItOut("gc()");
tryItOut("with([15,16,17,18].filter(eval, #3={a:#3#})){export __iterator__; }");
tryItOut("/*for..in*/for(const ({ __noSuchMethod__: __noSuchMethod__ }) in <><x><y/></x></>) {;function(y) { yield y; break ;; yield y; } }");
tryItOut("return;");
tryItOut("/*infloop*/M:while(0 |= __proto__ || (this.zzz.zzz)){/*for..in*/for(const __parent__ = *::* in *::*) {gc() }{} }");
tryItOut("/*infloop*/for(4.[3].valueOf(\"number\"); (let (__noSuchMethod__ = (prototype = <><x><y/></x></>).valueOf(\"number\"), [prop] = ([<><x><y/></x></>].some(@foo))) (yield window));  /* Comment */'fafafa'.replace(/a/g, ().apply)) {/a/giexport constructor; }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in  /x/ ) var __iterator__ = window, prop; }");
tryItOut("/*infloop*/do /*infloop*/while((-@foo))(true).watch while((__noSuchMethod__.prototype = [1,2,3,4].map :: (this[this]) .. 0.1.__iterator__))\nreturn");
tryItOut("L:if(__proto__ |= 3.141592653589793 % this.__defineSetter__(\"__noSuchMethod__\", (new Function).call)) { if (function::function::__count__ =  /x/g ) let (__count__ = <><x><y/></x></>) { gc() } else /*for..in*/for(delete = true in <x><y/></x>) return;}");
tryItOut("{export *; }");
tryItOut("{M:switch(( ''  << ((<><x><y/></x></>)(<x/>, [[]])))) { default: M:do {*; } while((<><x><y/></x></>) && 0);break;  } }");
tryItOut("M:if(([, __iterator__] = (this.zzz.zzz))) { if (new ((1 for (x in [])))((\fthis.__defineGetter__(\"__proto__\", (1 for (x in [])))) for each (constructor in 5.0000000000000000000000) for (__proto__ in (function ([y]) { })()) if (<x><y/></x>), (({__iterator__ setter: function () { yield; } , __parent__: prototype = *::* })))) ; else export __noSuchMethod__;}");
tryItOut("/*infloop*/for(var __count__; (null = <x/>); #1#) { }");
tryItOut("return  /* Comment */__count__.__iterator__ = <><x><y/></x></> != (-0); const __iterator__ = (typeof this);");
tryItOut("if(<><x><y/></x></>.valueOf(\"number\")) (__parent__); else  if ((@foo.__proto__)) {continue ; } else gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in *::* += -1) {while(((arguments.watch(\"prototype\",  \"\" )).__lookupSetter__(\"__count__\")) && 0){gc() } }");
tryItOut("/*infloop*/do {if(null) { if (1e-81) {__proto__; /x/ ; }} else {{} }return; } while(([[({ __iterator__: __count__ })], , , , ] = ({ __proto__: ({ constructor: ({ constructor: __proto__, __noSuchMethod__: prototype }) }) })));");
tryItOut("if(new (({}).__lookupGetter__)(new __proto__(1e+81, __proto__))) prototype.__noSuchMethod__ else  if (((<x><y/></x>yyy - <y><z/></y>).prop)) {; }");
tryItOut("M:if((<bbb xmlns:ccc=\" /x/ .propertyIsEnumerable(\"__count__\")\"><ccc:eee></ccc:eee></bbb>.(<><xxx>{__count__}</xxx></>))) {/*for..in*/for(var __iterator__ in (((1 for (x in [])))(<x><y/></x>))){export *; } } else  if ( \"\" ) {yield function(id) { return id };let __count__, __noSuchMethod__; } else export *;const prototype = <x><y/></x>;");
tryItOut("while((([1,2,3,4].map).call( \"\" , ).yoyo(<x><y/></x> != false)) && 0)\tfunction ([y]) { }");
tryItOut("if(((#3={a:#3#}))) /*infloop*/while(this)\f{(__parent__);return [z1]; } else  if (Boolean( \"\"  >>= true)) /*for..in*/L:for(const __iterator__ in [[]]) {throw 0/0; }");
tryItOut("switch(__count__) { case 0: break; export prototype;break; case (export __proto__): return [];break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.constructor in -1 != {break L;export prototype; }) {with(<y><z/></y>){<x><y/></x>export *; } }");
tryItOut("{if(try {  } catch(__count__ if <x><y/></x>) { let __iterator__; } catch(prop) { function(y) { yield y; return;; yield y; } } finally { return  /x/g ; } ) { if (*) break L;} else return; }");
tryItOut("if(__count__ = prototype.__noSuchMethod__) { if (0x99) {/*infloop*/while(*::*){gc()export __proto__; } }} else {(<x/>).__defineSetter__/*infloop*/for(const __parent__ = #1=[#1#]; [z1]; __count__) {export __proto__; } }");
tryItOut("/*infloop*/do export prop; while(prototype.__iterator__);\nwith({prop: (<x><y/></x>)()})break M;\n");
tryItOut("(arguments)");
tryItOut("if((<>try { export constructor; } catch(__noSuchMethod__) { gc() } </> != (yield <x><y/></x>))\t) { if (null ?  /x/g  : this <  /* Comment */(-0)) /*infloop*/for(var constructor = ( '' (prototype\n, 1e4)); <y><z/></y> , <><x><y/></x></>;  '' ) L:if(*) gc() else  if (<x><y/></x>) {__noSuchMethod__ = 1e+81; } else do yield; while((<x><y/></x>) && 0);}");
tryItOut("M:do  while((__noSuchMethod__.(this.__defineSetter__(\"constructor\", (this).watch))) && 0);");
tryItOut("return;");
tryItOut("if((undefined.yoyo({@foo;{} }))) throw  \"\" ; else {(*::*); }");
tryItOut("if((prop.__proto__ = (yield this)) |= (prop-=({__proto__:  \"\"  }))) with({}) { return 1e81; }  else {export *; }");
tryItOut("try { for(let y in [5,6,7,8]) let([__count__, ] = <x><y/></x>, __proto__ = ({})) { let(prototype, prototype) ((function(){continue ;})()); } catch(prop) { throw __noSuchMethod__; } finally { throw prop; } ");
tryItOut("switch(L: ;) { default: break;  }");
tryItOut("if((#2=Date().hasOwnProperty(\"__iterator__\"))[[__iterator__ ? <y><z/></y> : window].sort((<><x><y/></x></>).watch)]) { if (RangeError(__noSuchMethod__.__iterator__ = (__proto__ = __iterator__))) /*for..in*/for(const __count__ = window.propertyIsEnumerable(\"prop\") in #3={a:#3#}) L:while(( \"\" ) && 0)(-0);} else if(__noSuchMethod__) { if (((__count__ = @foo) /  \"\"  , *::*)) {}} else (-1);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__count__ in <y><z/></y>) {/*for..in*/M:for(var ({ prop: constructor }) in (({__parent__: <><x><y/></x></>}))) {(*::*);\nlet constructor = [z1,,], prop = undefined;\nyield;\n__proto__, __count__ = true;\n } }");
tryItOut("Function");
tryItOut("__noSuchMethod__ = prototype, __proto__ = 3.141592653589793\n");
tryItOut("if((this.__defineGetter__(\"prototype\", [1,2,3,4].slice))) { } else  if (1e4.isPrototypeOf(<x><y/></x>)) {__noSuchMethod__ = true;return *; } else {export __proto__;null; }");
tryItOut("/*for..in*/for([prototype, prototype] = constructor ? null : undefined %= (yield this :: null) in (constructor = <x><y/></x>)) let (__iterator__ = (-1), prop) { ( /x/ ); }");
tryItOut("{ {export prop;gc() }if(<y><z/></y>) {var __iterator__, __iterator__;let __proto__, __proto__ = true; } else  if (<y><z/></y>) return <><x><y/></x></>; else {export  { yield <x/> } ;{} } }");
tryItOut("/*for..in*/for(const prototype, __count__ in ((3.141592653589793)(( '' .valueOf(\"number\"))))){;yield; }");
tryItOut("/*infloop*/while(__count__ = undefined){{}return; }[]");
tryItOut("__proto__;");
tryItOut("let (__proto__ = (uneval( \"\" )), __parent__) { {return; } }");
tryItOut("let __iterator__;");
tryItOut("L: {let (prop = this) {  } }");
tryItOut("do {yield; } while((Function) && 0);");
tryItOut("M:if([11,12,13,14].filter for (__parent__ in <><x>default: return;break; case __proto__ = __noSuchMethod__: break; [1,2,3,4].map <y/</x</>) for each ( in <x><y/><///h\nx>)) { } else {return;\treturn false }");
tryItOut("return __parent__\n");
tryItOut("[");
tryItOut("{let prop = constructor; }");
tryItOut("break L;");
tryItOut("let (__proto__ = ( '' .eval(window)) ? (Exception()) : window .@x:: undefined) { yield; }");
tryItOut("__proto__ = <x><y/></x>;\nyield <><x><y/></x></>;\n");
tryItOut("{{} }\n/*infloop*/for(window;  /* Comment */window; eval(\"]\", 033)) throw  \"\" ;");
tryItOut("{return; }");
tryItOut("do  \"\"  while((__parent__.__defineSetter__(\"__noSuchMethod__\", Function)) && 0);");
tryItOut("if(((yield (<x><y/></x>))).propertyIsEnumerable(\"prop\")) { if ((eval(\"throw @foo;\",  /x/ ))) {/*infloop*/for(<x><y/></x>;  /x/g ; 3) var __proto__ = <>{}</>;<><x><y/></x></>; } else {/*infloop*/M:do const __iterator__ = <><x><y/></x></>, __proto__ = #1#; while(__parent__); }}");
tryItOut("/*infloop*/do this while(<x><y/></x>.eval(@foo));");
tryItOut("/*infloop*/for(var [__count__] = <x><y/></x> ? __parent__ : *::*; null = 1e4.prop = (\n*::*); new function (constructor)false(__iterator__)) {gc() }");
tryItOut("{yield; }");
tryItOut("__parent__ = <x/>, prototype; \"\" [this]");
tryItOut("switch((<x/>)) { default: \tif(__iterator__) let constructor, __count__;break; break; break; case true -= null:  }");
tryItOut("L:if(prototype = <x><y/></x>) { if (true) let __count__, __noSuchMethod__;} else export __iterator__;");
tryItOut("/*infloop*/do {;yield; } while( /x/g );");
tryItOut("with(prop = prop.__noSuchMethod__ =  '' )gc()");
tryItOut("if([11,12,13,14].sort >>>=*::* %= <x/>.unwatch(\"__parent__\")) switch( /x/ ) { case 8: return <><x><y/></x></>;break;  } else  if ( /x/g ) var constructor = window, prototype;");
tryItOut("/*for..in*/for(__count__ in (((<><x><y/></x></>).__defineSetter__)(0.1))){export __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("if(true) { if (<x><y/></x>) {throw function ([y]) { }; } else let __parent__;}/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in  /x/ ) return; const function::__noSuchMethod__;");
tryItOut("if(__proto__\f.__lookupSetter__(\"prop\")) {{} } else {export *;export __proto__; }");
tryItOut("/*for..in*/for(var with({}) { {} }  in ((((eval(\"__parent__|=*\", __count__.prop = (true |= <><x><y/></x></>)))).watch)((let (__noSuchMethod__, __iterator__) constructor.__proto__)))){return <><x><y/></x></>; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:while((window.__proto__ = <y><z/></y>))gc() const __iterator__;");
tryItOut("/*for..in*/for(prototype in (([1,2,3,4].map)(<>(<y><z/></y> &= \r({a1:1}))</>))){return <x><y/></x>; }");
tryItOut("export __count__;");
tryItOut("try { with({}) { ; }  } catch(__noSuchMethod__ if (new ((window).watch)(<x><y/></x>, <><x><y/></x></>)).__defineGetter__(\"prop\", ([1,2,3,4].map).apply)) { yield; } ");
tryItOut("throw prop;");
tryItOut("gc()");
tryItOut("/*infloop*/M:for( /x/g ; 0x99;  '' ) {return;; }");
tryItOut("let(prototype, ({ constructor: ({ function::constructor: let, prototype: prop }) }) = (~true)) ((function(){yield  /* Comment */(let (function::__parent__ = false, constructor = <y><z/></y>) 3);})());");
tryItOut("/*infloop*/for(true; <y><z/></y>; this) throw @foo;");
tryItOut("L:if(-3/0) {(*::*);throw this; } else  if ((-0)) {export __proto__; } else continue ;");
tryItOut("let (__iterator__) { const __iterator__ = *; }");
tryItOut("let __proto__ = <x/>;");
tryItOut("/*for..in*/for(var [__parent__, prototype] = <><x><y/></x></> in {}) {const constructor = , __noSuchMethod__;<><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __iterator__ = 1.2e3 in (new (Function)(#3={a:#3#}))) yield;");
tryItOut("/*for..in*/for([__count__, prototype] = ((this.__defineSetter__(\"__proto__\", Math.pow)) .@ [15,16,17,18].sort(function(y) { yield y; var __proto__;; yield y; }, ({}))) !== <><x><y/></x></> >> <y><z/></y> in ((({}).__lookupGetter__)(, window).yoyo((yield -0)))) {if((({__count__ getter: 'haha'.split }))) {continue M; } else {let __proto__; } { continue ; }  }");
tryItOut("{Math.powthrow <x><y/></x>; }");
