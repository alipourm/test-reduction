
tryItOut("{yield <y><z/></y>;do return; while(( /x/ ) && 0); }");
tryItOut("switch(0/0) { case null[<x><y/></x>] & <x><y/></x>: break;  }");
tryItOut("__parent__.__count__ = prototype;");
tryItOut("switch((0x99.__parent__ = 3/0 ^= prototype.prototype = <></> * new ((true).__defineSetter__)() in __parent__.prop getter= prototype)) { default: break; case 0: export prop;break; break; return 1.3;\n\ncase @foo: case [eval(\"gc()\", [11,12,13,14].sort)].filter(({}).__lookupGetter__): break; case this.zzz.zzz: ;case <x><y/></x>.__defineGetter__(\"__parent__\", eval): yield  /x/g ;break;  }");
tryItOut("M:if((__noSuchMethod__ !== *::*)) arguments; else  if (void <x><y/></x>.@*) {return; } else {export __proto__; }");
tryItOut("do {return [,];return <><x><y/></x></>; } while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/for(var __count__; this.__defineSetter__(\"__iterator__\", function(y) { yield y; export prop;; yield y; }); new <y><z/></y>()) {let __parent__;gc() }");
tryItOut("/*infloop*/for(let __iterator__; prototype; (true.*)) L:if(false) {export *; } else {}");
tryItOut("if(*::*) ; else {var __count__, prop; }");
tryItOut("(<x><y/></x>\f);\nconst __count__ =  \"\" , __noSuchMethod__;\n");
tryItOut("/*infloop*/for(prototype = undefined; <x><y/></x>; <><x><y/></x></>) {continue ;{} }");
tryItOut("if(eval(\"__proto__ = [[1]]\", )) ;");
tryItOut("/*for..in*/for(var __parent__.prototype in ((Math.pow)((new *)))){false; }\n/*for..in*/for([prop, __iterator__] = [15,16,17,18].filter(function(y) { yield y; yield;; yield y; }, <>yyy</>) in (window.isPrototypeOf(({a2:z2})))) export *;");
tryItOut("with(function(id) { return id } + false){\texport *; const prop;export *; }");
tryItOut("do prop; while((@foo) && 0)\nexport *;");
tryItOut("\n");
tryItOut("if(<><bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb></>) { if ([11,12,13,14].some.propertyIsEnumerable(\"prop\")) 033} else export function::prototype;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("for(let y in []);");
tryItOut("L:if(constructor.__noSuchMethod__ getter= Function) L: export __noSuchMethod__; else  if (eval(\"<x><y/></x>\", <><x><y/></x></>)(window)) while((([[]].some( \"\" ))) && 0)([1,,]);");
tryItOut("this.zzz.zzz;");
tryItOut("try { @foo; } finally { return (__count__ = #1=[#1#]).*; } ");
tryItOut("switch(prop%=(({__count__: <x><y/></x> }))) { case [z1,,] *= <xxx>{prop}</xxx>: break; case ((p={}, (p.z = (-0)[[1]])())): break; gc() }");
tryItOut("L: prototype");
tryItOut("L:if(undefined) yield; else  if (((<y><z/></y>)(__count__))) throw  /x/ ; else ;");
tryItOut("__iterator__ = __iterator__;");
tryItOut("(window)\n");
tryItOut("{/*infloop*/L:for(~(window.__parent__ = (new 1e81(undefined))); <!--yy-->.(\fconstructor = (5.0000000000000000000000)); *) {var function::prototype; }\t }");
tryItOut("L:if([*::*].some(__iterator__, prototype = window)) {let __proto__ = *::*, 1e4 = #1=[#1#]; } else  if (function(id) { return id }) {var __noSuchMethod__ = false; }");
tryItOut("/*infloop*/L:do {return; } while(new ((({a1:1})).__defineSetter__)());\n/*infloop*/while(<x><y/></x> .@x:: [,,]){__count__, prop = 0;let __iterator__ = *; }\n");
tryItOut("{return; }");
tryItOut("/*infloop*/for(let [\f] = ([*::* .@*:: 0]); (1.3.@*)[<x/>.valueOf(\"number\")]; 0.constructor) {M:while((<x><y/></x>) && 0)return <x/>; }");
tryItOut("while(((@foo+=(@foo for (-1['__parent__'] in <>/*\n*/<x><y/></x></>) for (__parent__ in #1=[#1#])))) && 0)let (__parent__, prop) { L: {} }");
tryItOut("/*infloop*/do /*for..in*/for(var __noSuchMethod__ = __count__.constructor = (__parent__ / prop) in window) export __noSuchMethod__; while((([__parent__, constructor, ] = prop = __proto__) >>= <y><z/></y>--));");
tryItOut("if(typeof ({}).hasOwnProperty((eval() if ( '' )), prototype = __iterator__)) {yield;return;; }");
tryItOut("while((__proto__.prototype = window) && 0)return;");
tryItOut("/*infloop*/L:do {export __count__;break ; } while(let (__parent__ = undefined, prop = this) Math.pow(this,  \"\" ));");
tryItOut("/*infloop*/while( \"\" )M:if( '' ) { if (<><x><y/></x></> ? arguments :  \"\" ) {gc()this }} else {<x><y/></x>; }");
tryItOut("if((new (function(y) { yield y; export *;; yield y; })(([*::*].filter(function  prototype (prototype, __parent__)window))))) {(<x/>);return; } else {return false;export prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <>\t<x><y/></x></>) {continue ;new Function }");
tryItOut("L\t: return <x><y/></x>;");
tryItOut("{yield;/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in function(id) { return id }) {(@foo);gc() } }");
tryItOut("/*infloop*/do var __noSuchMethod__ = ({a1:1}); while(<></>);");
tryItOut("/*infloop*/while((this ^ __iterator__.__iterator__)){}\nL: {}");
tryItOut("{L:if(<x/>) {const __proto__, __noSuchMethod__ = ({a2:z2}); } }");
tryItOut("/*infloop*/for(__noSuchMethod__ = (<x/> > <><x><y/></x></>.*).@foo; [z1] ? true : <y><z/></y>; (({ constructor: function::constructor }) = (<><x><y/></x></>.unwatch(\"__count__\")))) {export __count__; }");
tryItOut("M:if((new (false)())) { if ([11,12,13,14].\tsort) {{} const __parent__; } else }");
tryItOut("yield <ccc:ddd><bbb xmlns=\"__iterator__ .@ this\"></bbb></ccc:ddd>.__lookupSetter__(\"__proto__\");");
tryItOut("switch(1.2e3) { case (<x><y/></x>\n): break; case (__proto__ = __parent__): break;  }\n");
tryItOut("export *");
tryItOut("/*infloop*/while((constructor.prototype = (p={}, (p.z = (-1))())))let ([]) { export __proto__; }\nbreak \n");
tryItOut("if((this.zzz.zzz)) {__iterator__, __parent__;; } else {; }\n");
tryItOut("L: {;if(<><x><y/></x></>) continue L; else  if ( \"\" \t) {} else [1]; }");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] = \t4. >>= true in __count__ = *) {var try { __noSuchMethod__ = *; } finally { yield 1.3; }  =  '' , __parent__ = true;const __noSuchMethod__; }");
tryItOut("__count__.__iterator__ = __noSuchMethod__;");
tryItOut("<!--yy--> const __count__;if(this.valueOf(\"number\")) {export __proto__; } else  if (([]).__defineSetter__([,], window)) let __noSuchMethod__; else {yield <><x><y/></x></>; }");
tryItOut("with({__parent__: *::*}){{gc() }export *; }");
tryItOut("return prop.prop = 4.;");
tryItOut("with(__iterator__){switch(#3={a:#3#}) { default: return @foo; } }");
tryItOut("return;");
tryItOut("/*for..in*/L:for(let __parent__ = [z1] in ({ get prop() { return  /x/  }  }) ^= ('fafafa'.replace(/a/g, new Function)) === __iterator__) {/*infloop*/L:for(const __noSuchMethod__ = window; {}; <x><y/></x>) {yield  /x/g ; }this; }");
tryItOut("return;");
tryItOut("if(({prop:  \"\" })) { if (<x/>) {window;{yield  /x/g ; } } else {new Function }}");
tryItOut("(this)");
tryItOut("if( \"\" ) {return; } else  if ((({ __count__: prototype }))) {if(0) {(null); } }");
tryItOut("let(__iterator__) ((function(){export *;})());");
tryItOut("if(<x/>) {L:if(((function  __iterator__ (get, __count__) { return <x/> } )(true))) { if (([<x/>].some(this).yoyo(( /x/g .hasOwnProperty(\"__noSuchMethod__\"))))) {export constructor; }} else {; } } else  if (__noSuchMethod__.__proto__ &= constructor = <x><y/></x>) /*infloop*/do export *; while((-0));");
tryItOut("if(<><x><y/></x></> = <><x><y/></x></>) { if ((<y><z/></y> :: this.__defineGetter__(\"__noSuchMethod__\", *::*))) M:if(constructor) { if ((window %=  '' )) {export *;; }\t else var constructor;} else {if(prop.isPrototypeOf((<x><y/></x>.(*::*)))) {M:if(constructor) {return; } else  if (<x><y/></x>) {(undefined);(<x><y/></x>); } else null; } else {{}continue M; }gc() }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in \n0/0) {export *;switch((new eval())) { default: break; case 3: /*infloop*/do const __parent__; while(<><x><y/></x></>); const __noSuchMethod__;break; {prop;export prop; }break;  } }");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = (this.isPrototypeOf(<><x><y/></x></>)) in (__proto__.__noSuchMethod__ setter= function(y) { yield y; ; yield y; })) {return;break L; }");
tryItOut("M:while((<y><z/></y>) && 0)if(new RegExp(<y><z/></y>)) ( '' ); else {throw <x/>;return; }");
tryItOut("M:while((<xxx>{__proto__}</xxx>) && 0)");
tryItOut("if(<{__proto__}><x><y/></x><x><y/></x><ccc:ddd></ccc:ddd></{__proto__}>.( '' )) export __noSuchMethod__; else  if (* @ <x><y/></x>) gc()");
tryItOut("M:if(@foo) { if (\nDate()) {export __count__yield *; } else M:while((<><x><y/></x></>) && 0)const __noSuchMethod__, prototype;}");
tryItOut("{(function () { const __proto__; } ).call }");
tryItOut("/*infloop*/for(false.isPrototypeOf(null); __iterator__ ? *::* : @foo; ((1 for (x in []))).call( '' , )) {/*for..in*/for(let prop\f in ((function  delete (__noSuchMethod__)<><x><y/></x></>)(*::*.throw(#1=[#1#])))){throw <x/>; } }");
tryItOut("with(prop.(1e-81))L: __noSuchMethod__, each;");
tryItOut("({ __iterator__: prop, prop: __noSuchMethod__ })");
tryItOut("var __count__ = <x/>;\n1.3;\n");
tryItOut("for(let y in [5,6,7,8]) true = __proto__;");
tryItOut("if(*::*) {} else ");
tryItOut("{return undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in window) export *;");
tryItOut("for(let y in [5,6,7,8]) /a/gi");
tryItOut("yield; const __count__;");
tryItOut("({}).__lookupGetter__");
tryItOut("/*infloop*/do gc() while((uneval(null)));");
tryItOut("<x><y/></x>.throw(prop)return *; const __count__;");
tryItOut("/*infloop*/while(0x99){yield <x/>; }\n");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; ({ __count__: __parent__, prop: constructor }) = __iterator__ = *::*; try { for(let y in [5,6,7,8]) this.zzz.zzz; } finally { return; } ) function  __proto__ (prototype, __iterator__) { /*infloop*/for(*; arguments; ({a2:z2})) {;var __count__, prototype = window; } } ");
tryItOut("with(((#1=[__parent__]) ? [1,,].__noSuchMethod__ : prop = <x/>))M:switch(.2) { default: gc()case [,,]: return;break; constructor;break; throw [,,];break; break;  }");
tryItOut("L:if(((eval)((<><x><y/></x></>)[*] ? -({prop: <><x><y/></x></>,  set prop __proto__ () { var __noSuchMethod__; }  }) : ([#1#])))) { if (__proto__) /*infloop*/for(const __iterator__; [[1]].propertyIsEnumerable(\"constructor\") instanceof (({__proto__: *::* })); new (gc)(<x/>,  '' )) ; else {/*infloop*/for(var prop; (@foo.isPrototypeOf(<y><z/></y>)) =  /x/g --; __count__.__proto__ =  /* Comment */<x><y/></x>) {if(@foo) {const prop = <><x><y/></x></>, __iterator__ = __noSuchMethod__; } else  if (<x><y/></x>) {export *; } else {(undefined);{} } } }}");
tryItOut("default: export *;/*for..in*/L:for(const prop in ((function(q) { return q; })((( '' )[<x><y/></x>])))){yield <><x><y/></x></>; }break; case (.2 ? prop : 1.3) >> __iterator__.__iterator__ = <y><z/></y>: yield <y><z/></y>");
tryItOut("__iterator__");
tryItOut("with(( = 3.hasOwnProperty(\"__noSuchMethod__\"))){let(constructor) { throw StopIteration;/*for..in*/L:for(__parent__ in ((function (let __noSuchMethod__, __iterator__;, constructor) { return <x/> } )(((yield false)))))break ; }");
tryItOut("M:if(@foo) /*infloop*/while(*::*) else let ([] = eval) { (<x/>); }");
tryItOut("/*infloop*/do {__proto__ = window;while((<><x><y/></x></>) && 0)gc() } while((window >= *::*));");
tryItOut("{/*for..in*/for(prototype.__count__ = (yield true) in [prototype, __parent__, , __noSuchMethod__, constructor] = (1e-81 %= *)) {return; }\f }");
tryItOut("{{}yield; }");
tryItOut("/*infloop*/M:while(eval(\"* == window.@foo + new (window)(<><x><y/></x></>, prototype)\", null[1e4])){/*infloop*/for(const __count__; typeof prop.__iterator__ = (<x><y/></x>.throw(<x><y/></x>)); new (({}).hasOwnProperty)(([z1] for each (prop in <x><y/></x>)))) {__noSuchMethod__with(null)const __noSuchMethod__ = this;let __count__, __parent__ = null; } }");
tryItOut("/*for..in*/for(var __iterator__ in <x><y/></x>[__count__] .. @foo) /*infloop*/do export *; while((~<x><y/></x>));");
tryItOut("/*for..in*/for(setter in *::*) {if(__iterator__'((({__noSuchMethod__: eval(\"\",  /x/g )})))) { if (__count__ = this <=  /* Comment */(<x><y/></x>--)) { } else /*infloop*/for(*; 0; this) yield;}/*infloop*/for(const __count__ = .2; __noSuchMethod__; [z1,,]) var __iterator__; }");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>.watch(\"function::__parent__\", (1 for (x in []))).unwatch(\"__iterator__\"); (<x><y/></x>.valueOf(\"number\")); \n( /x/g \n)) return window;");
tryItOut("/*infloop*/while((!false)){return;function  prototype (__parent__) { return .2 }  }");
tryItOut("{}\n\n");
tryItOut("/*infloop*/do {/*infloop*/do {yield;gc() } while(prototype); } while(true);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in __iterator__) {constructor }");
tryItOut("let (__iterator__) { __noSuchMethod__ = 1e+81; }");
tryItOut("/*infloop*/for(var constructor;  = 1.3.hasOwnProperty(\"constructor\"); (((let (({ prototype: ({ prototype: __parent__ }) }), __iterator__) ({ prop: [], constructor: [constructor, , constructor, , prototype] }) = this.__defineSetter__(\"__count__\", (new Function(\"let function::prototype = this;\"))))).__defineSetter__)()) M:if((yield [ /x/ ].prototype)) { if ((uneval(<><x><y/></x></>))) {( \"\" ); } else let constructor = <><x><y/></x></>;}");
tryItOut("export function::__parent__;\nyield;\n");
tryItOut("L:while((new (({}).hasOwnProperty).apply()) && 0)yield;");
tryItOut("if(--( \"\"  for each (__count__ in undefined)) .. <y><z/></y>.__defineSetter__(\"__noSuchMethod__\", ((Function).apply).call/*\n*/)) __iterator__ = 1e+81; else  if (new [1,2,3,4].map(1.3, __count__)[[<><x><y/></x></>]]) true\n else {/*infloop*/for(const constructor; (\n<><x><y/></x></>.valueOf(\"number\")) & <y><z/></y> || <>__iterator__ = <y><z/></y></>; window) {var prop = <><x><y/></x></>;export prop; } }");
tryItOut("{export *;false; }\n\n");
tryItOut("while(([]) && 0)/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in false) {(1e4); }");
tryItOut("/*infloop*/L:for(prop; eval(\"yield;\", <x><y/></x>); (p={}, (p.z = 0)())) var constructor = <y><z/></y>, __parent__ = undefined;");
tryItOut("L: const function::__parent__ = true, prop = true;");
tryItOut("if(1e-81.__noSuchMethod__) {{}; } else  if (this) ");
tryItOut("/*infloop*/do {/*infloop*/L:do if((window++.unwatch(\"__parent__\"))['__noSuchMethod__']) { if ([__proto__].some((new Function(\"break M;\")))) /*for..in*/for(const [__parent__, __iterator__] = 1e-81 in __iterator__) yield <x/>; else {}\nreturn;} while(constructor.prototype%=~true); } while(<bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb>.(([11,12,13,14].some) |= ( ''  %  /x/ )));");
tryItOut("return <x/>;\n{}\n");
tryItOut("/*infloop*/for(__iterator__; null; null) {}");
tryItOut("if(__proto__) \n;\r");
tryItOut("/*for..in*/for(constructor in 1e81) return; const __parent__;");
tryItOut("/*for..in*/for(__parent__ = (<x><y/></x> .@x:: undefined) in <><x><y/></x></>) yield;");
tryItOut("yield <>\f<x><y/>\t</x></>\n\n{}");
tryItOut("/*infloop*/L:while(new (this.__defineGetter__(\"__parent__\", function (__proto__) { yield <x><y/></x> } ))(String(((({a2:z2}).unwatch(\"prototype\")).valueOf(\"number\"))), __proto__.__noSuchMethod__ getter= true))throw <><x><y/></x></>;");
tryItOut("with({prop: .2}){; }");
tryItOut("if(<x><y/></x>) { if (prototype) yield; else #1#;}\t");
tryItOut("case 9: break; case 8: return <x/>;break; default: break; case (__parent__.prop = prop): break; return;break; return <x/>\nvar __parent__, __parent__ = __proto__;({ __iterator__: prototype, __iterator__: __proto__ }) = ( /x/g .valueOf(\"number\")) const __proto__\nexport *;");
tryItOut("/*for..in*/for([prop, prototype] = new (function (__count__\f)*::*)(false, <x><y/></x>) != eval(\"((uneval(@foo)))\", ([<x><y/></x> for each (prop in  /x/ )])) in 1e4.__defineSetter__(\"constructor\", Math.pow) .@ ((false).watch).call(<x><y/></x>, )) {gc()yield; }");
tryItOut("if(<x/>) { if (( /* Comment */(new ('haha'.split)()))) gc() else {return false; }}");
tryItOut("if([11,12,13,14].filter) const __noSuchMethod__ =  '' , __count__ = <x><y/></x>; else  if ( /* Comment */@foo) while((<><><x><y/></x> </></>) && 0){; }");
tryItOut("with((uneval(new __iterator__(__iterator__ = __iterator__, <y><z/></y>))))let __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(__count__ in ((this.zzz.zzz)(window)))/*for..in*/for(var prototype in *::*) {export *;break M; }");
tryItOut("with(({ __noSuchMethod__: [] }) = (-3/0)[null])return <><x><y/></x><\t/>;");
tryItOut("/*infloop*/for(var __iterator__ =  \"\" ; (<x><y/></x>.eval( \"\" )); __parent__ | <x><y/></x>) ({a2:z2})");
tryItOut("return (@foo)[<x><y/></x>];");
tryItOut("let (__noSuchMethod__ = (<y><z/></y>)()) { __iterator__; }");
tryItOut(";");
tryItOut("if(*::*) { } else  if (__count__ = (this.zzz.zzz)) /*for..in*/M:for(var [__proto__, constructor] = <x><y/></x> in <><x><y/></x></>) *::*; else {export *; }");
tryItOut("with(#2=({constructor: function () { return <x><y/></x> } })){throw <x><y/></x>; }");
tryItOut("yield ((gc).call(__count__.constructor = 033 % @foo, [new (Math.pow)(window)]) ? (each|= '' ) : new ((prop))(1e4\n));");
tryItOut("let (__noSuchMethod__, __proto__ = <><x><y/></x></>) { L:if(null) {;export constructor; } else  if ([1,,]) gc() }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) {const __iterator__; }");
tryItOut("yield; const __proto__\n");
tryItOut("/*infloop*/for(<x/> >>>  /x/g ; ([1,2,3,4].slice)([[1]], <x><y/></x>);  /x/  if (*)) ;");
tryItOut("(false);");
tryItOut("let(prop, __count__ = __iterator__.__iterator__) ((function(){for(let y in []);})());");
tryItOut("return;");
tryItOut("/*infloop*/while(eval(\"*\", #3={a:#3#}))throw <x><y/></x>;return;");
tryItOut("/*for..in*/M:for([__iterator__, *] = ((uneval(#2=__noSuchMethod__))) in ({__noSuchMethod__ getter: <y><z/></y> }).function::__parent__) gc()");
tryItOut("if((Number())) throw this; else {throw <y><z/></y>; }");
tryItOut("if( '' ) [1,2,3,4].slice else  if (<x><y/></x>) {yield  \"\" ;export __proto__; }");
tryItOut("L: ");
tryItOut("if(()) let __iterator__ = 0x99, __parent__; else  if (this.__defineSetter__(\"__count__\", ( /x/g ).apply)) {let (prototype =  \"\" , __noSuchMethod__ = window) { {} }false; } else {yield;/*for..in*/for(const __iterator__ = ( \"\" [__noSuchMethod__]) in <><x><y/></x></>) yield <><x><y/></x></>; }");
tryItOut("M:if((function(id) { return id })()) {export __noSuchMethod__; } else  if (undefined) {{} } else {(false); }");
tryItOut("let (__proto__ = @foo, constructor = <x><y/></x>) { return @foo; }");
tryItOut("/*for..in*/for([__iterator__, __count__] = eval(\"(new (('haha'.split).call)(<x><y/></x>))\", function  __parent__ (prototype) { 'haha'.split } ) in <x><y/></x>[true]) yield;");
tryItOut("do /*for..in*/for(let __proto__ in ((__noSuchMethod__)(prop)))export *; while((new (({}).__lookupGetter__).call()) && 0);");
tryItOut("/*for..in*/for(var __iterator__ = __proto__.prop = __count__ in <x><y/></x>) {export *; } const __iterator__;");
tryItOut("let (prop) { [[1]] setter: (1 for (x in [])) }");
tryItOut("export *;\nyield [[1]];\n");
tryItOut("L: {{}return; }");
tryItOut("M:if((({__count__: __parent__ = <x/>; }))) L: {yield window;export prop; } else  if (({__parent__: //h\n[1,,], prototype getter: /a/gi })) {if(*::*) { if (<><x><y/></x></>) {export *;(<x><y/></x>); } else {const prop = *, __iterator__; }} } else {if(#1#) {export __noSuchMethod__; } }");
tryItOut("L:if(true) {throw *::*;(<><x><y/></x></>); } else  if ( /x/ ) (new Function(\" /x/ ;\\f\")) else {let constructor, prototype = <y><z/></y>; }");
tryItOut("export *;yield;");
tryItOut("let (prototype = __parent__%=__proto__, constructor = false) { gc() }");
tryItOut("throw -1\n");
tryItOut("(__count__);");
tryItOut("{}");
tryItOut("/*infloop*/L:for(<><xxx {constructor}=//h\n{() + [z1] ?  \"\" .throw(<x>\t<y/></x>) : null >> <y><z/></y>} /></>; (let (constructor = <xxx>{prototype}</xxx>.(window)) (<><x><y/></x></>())); ([yield+=<><x><y/></x></>].some\n(( /x/ ).watch))) with(({__count__: 0/0}).propertyIsEnumerable(\"prop\")){if(({a1:1})) { if ([,,]) {(__parent__);throw __parent__; }} else continue L; }");
tryItOut("/*infloop*/for(__count__ = this.__defineSetter__(\"__count__\", [1,2,3,4].map); eval(\"constructor\", #1#); window = null) export *;");
tryItOut("/*infloop*/while(__proto__[window])yield ({a2:z2});");
tryItOut("if((Math.pow(let (__parent__) Date(), (__parent__.__parent__)))) { if ((__iterator__)) {export let;return (uneval((<y><z/></y>.valueOf(\n\"number\")))); }} else {if(({ __proto__: ({ prototype: __iterator__ }) }) = new RangeError()) {L:if(<x><y/></x> += 3/0)  else  if (( /x/g  , false))  }throw -1; }");
tryItOut("try { __noSuchMethod__ setter: ([1]).__defineSetter__ } finally { const this;; } ");
tryItOut("throw StopIteration\n\n");
tryItOut("/*infloop*/for(var __parent__; @foo.__defineSetter__(\"__iterator__\", [1,2,3,4].map); ((prototype)(<x><y/></x>))) {return constructor; }");
tryItOut("if((__proto__ = <x><y/></x>.(true))) {gc() const __count__;let [] = (<y><z/></y> <<=  /x/ ); } else  if ([((p={}, (p.z = <x/>)())) >> +prop]) /*infloop*/M:for(__iterator__; ({__noSuchMethod__: (yield @foo)}); true.__defineSetter__(\"__proto__\", 'haha'.split)) {if(<x/>\f) { if (#1=[#1#]) {} else export *;} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in \t(<><x><y/></x></> >>= __proto__)) ");
tryItOut("with(*::*)prop, constructor;");
tryItOut("{}\nconst __count__ = *;");
tryItOut("/*for..in*/for(var [__count__, prop] = <x><y/></x> in \t@foo) {yield <x><y/></x>; }");
tryItOut("/*infloop*/do yield __count__; while([z1]);/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor( '' ) in *::*) var __count__ = *::*;");
tryItOut("throw *;");
tryItOut("/*infloop*/for((((((__proto__.__proto__ =  /x/g ))[(-0) || __parent__]) %= new window([1,2,3,4].slice(this))) ? (((p={}, (p.z = <y><z/></y>.watch(\"function::prototype\", function () { return  /x/g  } ))())).propertyIsEnumerable(\"constructor\")) : #3={a:#3#}); ; constructor = @foo.hasOwnProperty(\"__proto__\")) {/*infloop*/do __iterator__; while(*);const __proto__ = <y><z/></y>, __noSuchMethod__ = prop; }");
tryItOut("M:with((null % constructor >= (new (\t<><x><y/></x></>)(false)).eval(<y><z/></y>.propertyIsEnumerable(\"__count__\"))))\f{\n\t }");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for(let ( \"\" )( \"\" ) in ((function(y) { yield y; yield;; yield y; })(({prop setter: Math.pow, prop: __iterator__ })))){*; }\nlet constructor =  /x/g ;\n");
tryItOut("{if([11,12,13,14].filter) { if ((__count__.__parent__ getter= gc)) {this; } else } }");
tryItOut("M:if(((p={}, (p.z = [] = (true.yoyo(4.)))()))) {}\nexport constructor;");
tryItOut("M:if(constructor.__iterator__ getter= [1,2,3,4].map) { if (<x><y/></x>) {continue L; }} else return;");
tryItOut("if(( /x/ .propertyIsEnumerable(\"prop\"))) export __noSuchMethod__;");
tryItOut("/*infloop*/for(var prop; +__parent__; <x><y/></x>.(<x/>)) throw function ([y]) { };");
tryItOut("if(export *;) continue L;\t");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = window.__defineGetter__(\"prop\", (<x><y/></x>).watch) in *::*) yield;");
tryItOut("yield;");
tryItOut("if(new *(__parent__ = prop = eval(\"true\",  \"\" ))) { if (let (constructor = <><x><y/></x\f></>) @foo.@*.isPrototypeOf(new <><x><y/></x></>)) {constructor = <x/>;__parent__ = __count__ } else {{} }}");
tryItOut("/*infloop*/M:while(-1.watch(\"__iterator__\", prototype))yield;");
tryItOut("/*infloop*/for\f(({__count__ getter: [1,2,3,4].slice }); this.zzz.zzz; +(-1)) throw *;");
tryItOut("/*for..in*/M:for(const (prop) in ((function  __iterator__ (__count__, __noSuchMethod__) { return <x><y/></x> } )(__iterator__ =  \"\" )))<><x><y/></x></>;;");
