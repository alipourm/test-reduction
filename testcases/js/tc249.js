tryItOut("{ }");
tryItOut("L: {yield <x><y/></x>;return prop; }\n( '' );export *;");
tryItOut("if([this].filter([1,2,3,4].map)(null)) (*); else  if (window > 1.3.isPrototypeOf(eval(\";\", @foo))) /*infloop*/for(undefined; __proto__; -0) var __noSuchMethod__; else (prop);");
tryItOut("/*for..in*/for(const prop in (((/a/gi).call)(eval(\"<x><y/></x>;\", null))))false;");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = null in false) {<x/>;const __noSuchMethod__ = function ([y]) { }, constructor; }");
tryItOut("L:if(\nnew (__parent__)().propertyIsEnumerable(\"\\n<y><z/></y>\")) set, prototype = 3;\nexport *;\n else  if (++[11,12,13,14].some) {; } else {continue ;return @foo; }");
tryItOut("if(__count__ = prototype) {return [1]; } else  if (prototype.prototype) return; else {yield; }");
tryItOut("if(*::*) {yield; /x/ ; }");
tryItOut("( '' );\nreturn;export *;\n");
tryItOut("switch(__noSuchMethod__ = <y><z/></y>) { default: Math.powbreak; case ([[]] .@x:: this): break; case 9: break;  }");
tryItOut("/*infloop*/for([, __count__] = ((({constructor getter: eval, __parent__:  \"\"  })) += [,,].throw(true).__count__); (+ /x/g ) == ; ((yield ({__parent__: 3.141592653589793 })))) {({a2:z2})\n__noSuchMethod__; }");
tryItOut("{if((new Exception((<x><y/></x>), undefined))) { if ([<x><y/></x> for each (__noSuchMethod__ in <x><y/></x>)]) {gc() } else {export __proto__;prop, __count__ = prop = *; }} }");
tryItOut("( /x/g )\n");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, (new Function(\"export *;\")))){}");
tryItOut("M:with({__iterator__: (this.zzz.zzz)})yield;");
tryItOut("L:with(prototype = constructor){let __count__ =  /x/ , __count__;\fyield <><x><y/></x></>; }");
tryItOut("throw constructor = [11,12,13,14].filter;");
tryItOut("if(*) {constructorswitch(constructor) { default: case 8: case 8: break; case ({a1:1}): *::*; }throw <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) \nreturn @foo;");
tryItOut("{return;__proto__ }");
tryItOut("L:while((null) && 0){let __proto__ = <x/>, __iterator__; }");
tryItOut("let prop, prop = 3/0");
tryItOut("\fexport *;\nexport *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in [#1#.eval(<x><y/></x>)].sort(({}).__lookupGetter__)) {(Boolean(3/0, 0.1)); }");
tryItOut("L: {<y><z/></y>;gc() }");
tryItOut("/*infloop*/L/while(default: <!--yy-->yield window;break; case __parent__: case <y><z/></y>: break;  instanceof __noSuchMethod__ /= (!this))export *;");
tryItOut("if(<x><y/></x>.(window)) {(<y><z/></y>);yield this;\n__noSuchMethod__;\n }");
tryItOut("do {return @foo; } while((<x/>) && 0);");
tryItOut("let (__iterator__, __noSuchMethod__ = <y><z/></y>) { <y><z/></y>; }\n");
tryItOut("with({__parent__:  /* Comment */((-1)(window,  /x/ ))})export prop;");
tryItOut("with({}) prop = constructor;");
tryItOut("/*for..in*/for(const prototype in ((/a/gi)((/a/gi)(*::* || [1,,]))))/*infloop*/for(__proto__; <y><z/></y>; (prop & <x><y/></x>)) gc()\nyield +[[1]] = <y><z/></y> %= .2;");
tryItOut("return ([11,12,13,14].sort);");
tryItOut("return;\nexport <x/>;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((({__count__: <x><y/></x>,  set __iterator__ constructor ()*::* }))\t((null.unwatch(\"prop\"))) in ([11,12,13,14].map)) return 1.3;");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <x><y/></x>) eval");
tryItOut("return Date( \"\" , __noSuchMethod__);");
tryItOut("with({}) { yield null; } ");
tryItOut("L: {(this); }");
tryItOut("{throw prop; const __noSuchMethod__;let __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(const (<y><z/></y>--).__parent__ in (Array(<><x><y/></x></> <<= false) >>= ( '' )(\f))) {return [15,16,17,18].sort((-0), <x/>); }");
tryItOut("let(prop) ((function(){for(let y in []);})());");
tryItOut("L:if(( /* Comment */*::*.hasOwnProperty(\"__parent__\"))) L: {( \"\" ); }");
tryItOut("/*for..in*/for(__proto__ in ((Math.pow)(*.__iterator__)))constructor, __count__ = <><x><y/></x>\t</>;(<><x><y/></x></>);");
tryItOut("return;");
tryItOut("if( /x/ ) { if (__proto__.__parent__.@*) {{break ; } } else export *;}");
tryItOut("M:if(<>yyy</>) {var constructor; } else  if ((false\n) %= <><!--yy--></>) /a/gi else {yield *::*;continue ;\t }");
tryItOut("*\nwith(*::*)(<x/>);");
tryItOut("if(([11,12,13,14].map)) { if ((this.__defineSetter__(\"prop\", new  \"\" (<x><y/></x>, this)))) {{}; } else L: gc()}");
tryItOut("yield @foo; ");
tryItOut("gc()");
tryItOut("if(this >>= (<y><z/></y> % true !== (p={}, (p.z = false)()))) throw <><x><y/></x></>; else gc()");
tryItOut("switch(<><x><y/></x></>) { default: get = (function ([y]) { })(), constructor;break; yield 033;break; yield false;break; case 8: export *;break; break;  }");
tryItOut("/*infloop*/M:do {yield; } while(prop =  \"\" );");
tryItOut("if(prop = window) {yield window;return <x/>; } else  if ((this.__defineSetter__(\"(true);\", [1,2,3,4].slice))) {export *;var __parent__; }");
tryItOut("/*infloop*/for(prototype = __iterator__|=({}).__noSuchMethod__ = (<x/> && null); ([1,2,3,4].slice).call(try { ; } catch(prototype) { yield; } finally { var prop = this; } , <y><z/></y>, <><x><y/></x></>); undefined) throw <x><y/></x>; const __parent__;");
tryItOut("/*infloop*/M:for(const __proto__; @foo .@*::  /x/g ; [15,16,17,18].some(<x><y/></x>, prop = 4.)) /*for..in*/prop");
tryItOut("yield 'fafafa'.replace(/a/g, Math.sin);");
tryItOut("gc() const __proto__;");
tryItOut("M:if(getter = (\n(uneval( \"\" )))) /*for..in*/for(let [prop, __count__] = *::* in ) {export __count__;return; } else  if (#1#) with({__parent__: <><x><y/></x></>}){export *; }");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, constructor] = (<y><z/></y>.yoyo(({ set __proto__() \"\"  }))) in (__parent__ | [1,,])) {if(((__proto__ = Q) * #1#)) {return 4.;export __iterator__; } else {throw (-1);export *; } }");
tryItOut("do {let __count__ = this;/*infloop*/M:for(<><x><y/></x></>; [,,]; false) <x><y/></x> } while(((__proto__.constructor = [z1,,].@foo)) && 0);");
tryItOut("yield [--this.yoyo(<x><y/></x>)(prototype.(__proto__ @ __count__))];");
tryItOut("if(~<><x><y/></x></>\t) ; else  if (([window].some([1,2,3,4].map))) return <x/>; else {yield;const __noSuchMethod__, constructor; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(constructor = /a/gi in (eval(\" for each (constructor in <y><z/></y>)\", <y><z/></y>))[*].__defineGetter__(\"prop\", (-1))) /*infloop*/for(const \t__iterator__; 'fafafa'.replace(/a/g, (Function).apply); ) if( /x/  = <x><y/></x>) {yield; } else  if (<x><y/></x>) {; }");
tryItOut("/*infloop*/for(var prop;  '' ; true) {yield <y><z/></y>;<x><y/></x> }");
tryItOut("L: {yield <><x><y/></x></>;yield ({a1:1}); }");
tryItOut("");
tryItOut("return;");
tryItOut("__proto__ = __parent__;");
tryItOut("for(let y in []);");
tryItOut("L:if(<x/>.yoyo( '' )) const __noSuchMethod__ = *, prop\n");
tryItOut("with({__noSuchMethod__: function(id) { return id }})do {{}let __parent__; } while(([[1]]--) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var <>null</> in (__iterator__.(*))) {yield;/*infloop*/for(prototype = <><x><y/></x></>; ; #1=[#1#]) __noSuchMethod__, __noSuchMethod__; }");
tryItOut("return window.prop = let (__noSuchMethod__, prototype) q;");
tryItOut("gc()");
tryItOut("with({}) for(let y in [5,6,7,8]) throw false;");
tryItOut("return <><x><y/></x></>/*\n*/\n");
tryItOut("throw constructor;");
tryItOut("__count__, prototype = -3/0;");
tryItOut("let (for(let y in []);)\t { throw __count__\nthis; }");
tryItOut("let (null = constructor.unwatch(\"__noSuchMethod__\")) {  }");
tryItOut("switch(eval(\"gc()\", (__iterator__)(function ([y]) { }, *::*)).unwatch(\"__parent__\")) { case 1: break; break; default: /*for..in*/for([__proto__, prop] =  in <><x><y/></x></>) throw *; }");
tryItOut("{export *;yield;( \"\" ); }\n");
tryItOut("let ([, [({ __count__: __count__, __proto__: ({ __parent__: __proto__, prop: constructor }) }), (\f{ prop: ({ prop: ({ __noSuchMethod__: __iterator__ }), prototype: [, __proto__, ] }) }), ({ __iterator__: __iterator__ }), __parent__], ({ constructor: ({ constructor: __proto__ }) }), ({ __noSuchMethod__: * ? null :  \"\" , __count__: [({ __noSuchMethod__: [({ __proto__: __noSuchMethod__, __proto__: __noSuchMethod__ })], prototype: ({ __noSuchMethod__: ({ __iterator__: function::__parent__, prototype: __parent__ }) }) }), __parent__, , prototype, prototype] })] = [15,16,17,18].some((new Function(\"M:if(this) { if (({a2:z2})) {gc()var __proto__ = (-1), __count__; }} else {{} }\")), (arguments *= -3/0) ^ (<x><y/></x>.eval(<><x><y/></x></>))) <= __count__ = __count__.__defineGetter__(\"__count__\", eval)) { with({constructor: ( ''  ? eval(\"break ;\", null) : 'fafafa'.replace(/a/g, true))}){export __parent__;L:if(<><x><y/></x></>) { if ([,,z1]) {var __parent__;yield; } else {return 0; }} } }");
tryItOut("L: /*for..in*/for(var __parent__ in (((Math.pow).apply)(this))){ \"\" ;gc() }");
tryItOut("M:switch(this.isPrototypeOf(return window)) { case (prop.__proto__).prop = ({ function::__proto__: __proto__ }) = []: /*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in true) {return null;const __proto__, constructor; }break; default: /*for..in*/L:for(var __count__ in ([this for each (prototype in undefined)])) {/*infloop*/for(const prototype; true ==  '' ; prop = constructor) {let constructor, __proto__; } }case ({__parent__: [z1], prototype: __parent__ }): null;this;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in prototype) {yield;{} }");
tryItOut("with({__parent__: __proto__ = [1];}){let <!--yy--> = <x><y/></\tx>, __noSuchMethod__;return; }");
tryItOut("with({}) export *;");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = __parent__ = <x/> in this) {continue L;return; }");
tryItOut("evalyield __parent__;");
tryItOut("if(<y><z/></y> != <x/>) { if ( /x/  ^ ({a2:z2})) new Function} else {continue M;export *; }");
tryItOut("M:while(([false] .. window++) && 0){var __parent__;; }");
tryItOut("gc()\nreturn;\n");
tryItOut("/*infloop*/for(({ prop: __noSuchMethod__, constructor: __count__ }) = *::*.valueOf(\"number\"); {}; prototype|= \"\" ) return false;");
tryItOut("__parent__ = __iterator__;");
tryItOut("while((<//h\nx><y/></x>;) && 0){return;; }");
tryItOut("M:with(<x><y/></x>.propertyIsEnumerable(\"constructor\")){throw <y><z/></y>;let __iterator__ = this; }");
tryItOut("({}).hasOwnProperty const constructor;");
tryItOut("let (\f({ prototype: ({ __proto__: ({ __parent__: __count__, __count__: __noSuchMethod__ }) }), __noSuchMethod__: __proto__ }), ({ __parent__: constructor }) = ( /x/g .prototype)) {  }");
tryItOut("export constructor;\nexport __parent__;\n");
tryItOut("\n");
tryItOut("try { for(let y in []); } catch(export prop;) { with({}) constructor = __proto__ = this; } ");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__proto__\", ((@foo.isPrototypeOf([,,]))).watch)\t; ({ constructor: yield, constructor: __iterator__ }) = <x/> %= #1#.__defineSetter__(\"__noSuchMethod__\", (new Function(\"\"))); !this.__defineGetter__(\"__iterator__\", <x><y/></x>)) {export *;{} }");
tryItOut("/*for..in*/M:for(const prop(eval(\"Math.sin\", undefined).__lookupSetter__(\"__count__\")) in <x><y/></x>.valueOf(\"number\")) ");
tryItOut("let (constructor = <><x><y/></x></>) { /*\n*//*for..in*/for(prop = @foo in window) {export prototype;yield *; } }");
tryItOut("L:if(('fafafa'.replace(/a/g, function(y) { yield y; break M;; yield y; }) ^= void 1e81 << __iterator__ = <x><y/></x>)) { if (new Array( \"\" ) = this) /*infloop*/for(({prop: @foo, prototype: __parent__.propertyIsEnumerable(\"__noSuchMethod__\") }); (*::*--) %= (new ([])( \"\" )); (Error(__proto__.(<><x><y/></x></> ? this : __count__), (new (Math.sin)())))) throw (new (Function)(__parent__, <x><y/></x>)); else /*for..in*/L:for(/*\n*/const prototype in #1=[#1#]) yield get}");
tryItOut("\n \"\" ;");
tryItOut("/*for..in*/for(let [__parent__, prototype] = eval(\"({})\", ([<x/> for each (prop in #3={a:#3#})])) in prototype =  /x/  >>>=new (prototype)(1e-81)) {function (constructor, __count__) { yield constructor } export *; }");
tryItOut("M:with({__proto__: ({ __proto__: function::__proto__, prop: constructor }) = ({__proto__ setter: __noSuchMethod__ })})/*infloop*/M:for( /x/g ; *; prop) {export x::__proto__; }");
tryItOut("{return; }");
tryItOut("with({__iterator__: })continue L;\nthrow true;\n");
tryItOut("if(eval(\"\\rconstructor-=<x><y/></x>\", [*::* if (__noSuchMethod__)])) { if (1e+81['constructor'] = (function(q) { return q; }).call(-1, -1, __noSuchMethod__).yoyo(undefined).__lookupSetter__(\"__noSuchMethod__\")) {return;M:if( '' ) return; } else /*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in [,,]) <x><y/></x>;}");
tryItOut("/*infloop*/while(eval(\"new String(, [[]])\", (-0)))throw @foo;");
tryItOut("/*for..in*/for(const prototype in *::*) var __proto__ = <><x><y/></x></>, prop = prototype;");
tryItOut("with({}) prototype = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in (({__parent__ setter: Math.pow, prop: 4. })).__parent__ = [null].some(gc) && <x/>.__iterator__ = (function ([y]) { })()) /*infloop*/M:for((__iterator__.constructor == [15,16,17,18].map((1 for (x in [])), <x><y/></x>)).__defineSetter__(\"__count__\", function () { prototype } ); *.throw((__iterator__ = <x><y/></x>)); <><x><y/></x></> && <x><y/></x> .. (eval(\"yield;\", false))) {const __iterator__; }");
tryItOut("switch(new (*::*)( \"\" , __iterator__).yoyo(this.zzz.zzz)) { case 6: let prototype = <x/>;break; default: gc()case 6: __parent__break;  }");
tryItOut("{while((null) && 0){(prototype).watch }/*for..in*/for(var ((this.__defineGetter__(\"__parent__\", Math.pow)))(null ? __count__ : false) in (([1,2,3,4].map)((/a/gi).call(this, __parent__)))){yield; } }");
tryItOut("const constructor = <x><y/></x>;");
tryItOut("L:switch(<><>yyy</></>) { default: case 5: prop.__parent__ = __parent__\r;break;  }");
tryItOut("/*infloop*/for(({ __parent__: __proto__, each: constructor }) = prop.__proto__; prop && <y><z/></y>; ()) {yield <x><y/></x>; }");
tryItOut(";");
tryItOut("M:do {return; } while(([,]) && 0);");
tryItOut("if(([<y><z/></y>].sort(function () { yield #3={a:#3#}; } ))) {(*); } else  if ((null >= undefined.valueOf(\"number\"))) __proto__ = false; else {(*::*); }");
tryItOut("do {if(return;) {;\tyield; } else {throw prototype;; } } while(((3/0 for each (__noSuchMethod__ in 1e4))) && 0);");
tryItOut("let(let = this) ((function(){return (function(q) { return q; }).call(this, <x><y/></x>);})());");
tryItOut("M:if((new RangeError(, 'fafafa'.replace(/a/g, function(y) { yield y; let __noSuchMethod__, prototype;; yield y; }))).propertyIsEnumerable(\"prototype\")) { if (( '' .prop.*).__lookupGetter__(\"prop\")) export __noSuchMethod__;} else {<x><y/></x>continue ; }");
tryItOut("if(0 === [[1]](( /x/g ))) /*for..in*/M:for(let [[1,2,3,4].map, __iterator__] = (window).call in <><x><y/></x></>) 0/0 else  if (\n__count__.(<><x><y/></x></>)) let (prototype) {  } else {export *;continue M; }");
tryItOut("/*infloop*/while(({prototype getter: eval, __count__ getter: ({}).__lookupGetter__ }))return set;");
tryItOut("const __iterator__ =  /x/g , __parent__\n/*for..in*/for(var __parent__ in true) ");
tryItOut("/*infloop*/for(let [] = (1 for (x in [])); (((*::* if (false)))[<x><y/></x>.__defineGetter__(\"__iterator__\", function  __parent__ (__parent__) { Math.sin } )]); (\nprototype.prop = -prop = (({ prop: __noSuchMethod__ }) = (<y><z/></y>.unwatch(\"prop\"))), prototype)) if(this.__defineSetter__(\"__count__\", function(y) { yield y; if([,]) continue L; else export *;; yield y; })) {{} } else  if ((this).call(null, this, {}) >> let (prop = __iterator__) 3/0) throw <{prop}>yyy</{prop}>;");
tryItOut("/*infloop*/for((__count__ = prop);  /x/g  /= __parent__: (<><x><y/></x></>(<><x><y/></x></>, [,,z1])); delete (function ([y]) { })()) {(window);/*for..in*/for(prop = <><x><y/></x></> in null) ({}).hasOwnProperty }");
tryItOut("let(prop = constructor = <><x><y/></\rx></> @ (constructor = __parent__), __proto__) { for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("{const __parent__ = prototype.__iterator__ getter=  /* Comment */ /x/g , __count__ = function (__iterator__) /x/ ; }");
tryItOut("/*infloop*/while(new RangeError(__noSuchMethod__).prop >>= ({__proto__: * for (__proto__ in  /x/ ), __count__ getter: Math.pow }))const __parent__ = [], __noSuchMethod__;");
tryItOut("if((Function())) {nullreturn; } else  if (({function::__parent__ getter: ((new Function(\"{}\"))).call })) __iterator__, [];");
tryItOut("let(__parent__ = <><x><y/></x></>) { gc()");
tryItOut("let __noSuchMethod__, __count__ = @foo\n");
tryItOut("{L: return\nexport __parent__; }");
tryItOut("let(delete = let (__iterator__) <x/>.__defineGetter__(\"prop\", ('haha'.split).call).valueOf(\"number\")(), __count__) { for(let y in [5,6,7,8]) let(__count__, prop = (<x><y/></x>.(<y><z/></y>))(new ([z1])(function(id) { return id }, 3.141592653589793))) ((function(){throw StopIteration;})());");
tryItOut("with((__parent__)%=__noSuchMethod__.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice))__iterator__, prop;");
tryItOut(";");
tryItOut("{yield\n }");
tryItOut("({ __proto__: ({ __noSuchMethod__: ({ __count__: ({ prototype: (\f{ __count__: __noSuchMethod__, prop: __count__ }), __count__: 3/0 }), __count__: ({ constructor: ({ prototype: __noSuchMethod__ }), __proto__: __noSuchMethod__ }) }) }), __iterator__: ({ __proto__: ({ __iterator__: ({ __count__: ({ prop: __noSuchMethod__, __parent__: __parent__ }) }) }) }) }) = prop;");
tryItOut("{with({constructor: null.__defineGetter__\t(\"__noSuchMethod__\", ({}).__lookupGetter__)}){function (__noSuchMethod__, prop)<x/>break L; }yield<><x><y/></x></>; }");
tryItOut("L:while((prop = __proto__) && 0)gc()");
tryItOut("{return <><x><y/></x></>;return; }");
tryItOut("try { let(__noSuchMethod__) { for(let y in [5,6,7,8]) export *; } finally { let([__proto__\f, __noSuchMethod__], __proto__) { try { continue ; } finally { \t{} }  } ");
tryItOut("(<>\f<xxx {prop}={({a1:1})} /></> .@x:: (\ntrue)) = try { ; } finally { gc() } ;");
tryItOut("/*for..in*/L:for(prototype = new gc(@foo == <x><y/></x> * __iterator__ =  /x/g , ({__noSuchMethod__: *})) in (prop.__count__)) {return; }");
tryItOut("/*for..in*/for(const __proto__ in ((function(y) { yield y; (<x/>).watch; yield y; })([function(id) { return id }]\n))){}\nconstructor;\n");
tryItOut("L:if(((<x><y/></x>)( /x/g , <x><y/></x>))) {yield <x/> }");
tryItOut("continue ");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("for(let y in []);");
tryItOut("L:while((yield 1e-81) && 0){yield *;var __iterator__; }");
tryItOut("/*for..in*/M:for(let \f({ __proto__: __noSuchMethod__ }) in this *= <y><z/></y> += this) {yield <x><y/></x>;yield [1,,]; }");
tryItOut("let(prototype) ((function(){throw ;})());");
tryItOut("let(__iterator__ = [<><x><y/></x></>]) { for(let y in []);");
tryItOut("if(+(uneval(<x/>))) {const prop = <x><y/\r></x>, __count__ = null;let (__proto__ =  /x/g ) { export constructor; } } else  if (prop.\fprop getter= (new Function(\"if(__noSuchMethod__ = <x><y/></x>) \\t{__noSuchMethod__;yield  /x/ ; }//h\\n else  if (<><x><y/></x></>) {{}yield; }\"))) {return;const __parent__ = this, prototype =  \"\" ; } else {;gc() }");
tryItOut("/*for..in*/for(var [__proto__, <x/>] = (p={}, (p.z = ((Function)()\r))()) in this.__noSuchMethod__) {L:switch(true) { case 1: let prototype = prototype, __noSuchMethod__ = window; }break \r; }");
tryItOut("{if(<><x><y/></x></>) {throw <y><z/></y>; } else  if (<x/>) {return *::*;let function::__proto__; } else {{} } }");
tryItOut("throw  /x/g \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in (this.zzz.zzz)) {return\n{}/*for..in*/for(let __iterator__ = <>//h\n<x><y/></x></> in window) let __iterator__; }");
tryItOut("while((*) && 0)var prop;");
tryItOut("\n");
tryItOut("<x><y/></x>");
tryItOut("let (prototype = <x/>, __parent__ = <><x><y/></x></>) { prop =  /x/g , constructor =  \"\" ; }");
tryItOut("{/*for..in*/for(var __count__ = 1e4 in <x><y/></x>) continue ; }");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("__iterator__ = [033].some(({}).hasOwnProperty).prop;");
tryItOut("const __noSuchMethod__, constructor;");
tryItOut("var constructor = <x><y/></x>, __noSuchMethod__ = false;\nreturn *;\n");
tryItOut("/*for..in*/for(const prop =  /x/  in -1) (__count__).__defineSetter__");
tryItOut("<ccc:ddd> </ccc:ddd>");
tryItOut("L:if(eval(\"constructor.prototype getter= (new Function(\\\"__iterator__ = prop;\\\"))\",  '' )) {yield; } else return;");
tryItOut("let (prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each((window)(this) in *::*) (window); }");
tryItOut("throw StopIteration;");
tryItOut("; const ({ constructor: [, ], __iterator__: __iterator__ });");
tryItOut("while(([[1,2,3,4].slice].some(__noSuchMethod__)) && 0) for each (constructor in prototype) if (@foo)");
tryItOut("return;");
tryItOut("throw this.__defineGetter__(\"__proto__\", function () { export *; } );");
tryItOut("<x>\t<y/></x>;");
tryItOut("prop.prototype = constructor;");
tryItOut("do {with({}) throw StopIteration; } while(((p={}, (p.z = {})())) && 0);");
tryItOut("switch((eval(\"this.unwatch(\\\"__noSuchMethod__\\\")\", ({__iterator__: @foo}))).unwatch(\"__noSuchMethod__\")) { default: case #2=({__parent__: 4.}): {}break; case ({ __parent__: prop, prototype: function::prototype }) = this.__defineSetter__(\"prototype\", [z1]):  }");
tryItOut("if(*.*) {return;return (<><x><y/></x><)/>; }\f else  if ((<x><y/></x>.( /x/ ).valueOf(\"number\"))) yield [,]; else new (Math.pow)();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (( /x/g .__lookupGetter__(\"prop\"))())) yield;");
tryItOut("with({__proto__: (!<x><y/></x>)})(<x><y/></x>);");
tryItOut("{if([1,,] & <x><y/></x>) { if ([<y><z/></y>].map([1,2,3,4].map)) {__proto__;let __noSuchMethod__, prop = prototype; } else yield;} } const prototype;");
tryItOut("yield __iterator__ <= [z1]\n{}");
tryItOut("let([, ({ prop: ({ __iterator__: __iterator__ }) }), __iterator__, [, ({ __noSuchMethod__: prototype, __count__: prop }), prototype, __noSuchMethod__, [__iterator__, throw  /x/g ;]]], constructor.prop = __count__) ((function(){yield new false(__proto__);})());");
tryItOut("if(yield (({ __noSuchMethod__: __noSuchMethod__ }) = undefined)) yield; else  if (<\fx><y/></x> += constructor) {break L; }");
tryItOut("/*infloop*/for(yield prototype = 3.141592653589793; prototype; ((window)[<y><z/></y>]).throw(this.__defineSetter__(\"constructor\", (1 for (x in [])))).yoyo(new (/a/gi)('fafafa'.replace(/a/g, function(q) { return q; })))((-window), (__noSuchMethod__ = <x><y/></x>\n))) if(3.141592653589793) { if (*::*) {export *; }} else {function(q) { return q; }<><x><y/><\t/x></>; }");
tryItOut("with(window){<zzz> \"\" </zzz> }");
