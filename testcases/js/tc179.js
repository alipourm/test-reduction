tryItOut("throw __count__;");
tryItOut("return;");
tryItOut("{if( '' ) { if (false) (<y><z/></y>);} else {{} } }");
tryItOut("if((false.prototype)) {yield }");
tryItOut("if((({ __noSuchMethod__: [], __noSuchMethod__: __count__ }) = (<x><y/></x> ? (function ([y]) { })() : <y><z/></y>))[1e4]) { if (__count__)return; }");
tryItOut("while((({ set prop(__proto__) { return (({__iterator__ setter: function(q) { return q; }, __parent__: ((__noSuchMethod__ if (<y><z/></y>))) })) } , __parent__: __count__ = 3 })) && 0){return *;throw true; }");
tryItOut("let __noSuchMethod__;");
tryItOut("; const prop;");
tryItOut("M:do {yield; } while((<x/> + \f<><x><y/></x></> !== undefined) && 0);");
tryItOut("if((this.zzz.zzz).__defineSetter__(\"prop\", function ()@foo)) { if (<x/>.prototype = (0)(false)) var __count__; else {/*for..in*/for(let __iterator__['__parent__'] in ((eval)(<x><y/></x> instanceof this))){}throw -3/0; }}");
tryItOut("with({}) continue L;");
tryItOut("while(( /* Comment */(({false: [,]}))) && 0);");
tryItOut("/*infloop*/for(*::*; [ \"\" .__defineSetter__(\"__count__\", window)].some(function\t () { yield <><x><y/></x></> } ); {}.__defineGetter__(\"prototype\", 5.0000000000000000000000)) {if(this) {export prototype; } else  if (undefined) {const set, __proto__ = <><x><y/></x></>; } }");
tryItOut("if(true.__defineGetter__(\"constructor\", gc)) /*infloop*/M:while(<><x><y/></x></>){let constructor, prototype = false; }");
tryItOut("L:if((let (__proto__ = [1,2,3,4].slice, __count__ = <x><y/></x>) this.hasOwnProperty(\"__iterator__\")) >= this.zzz.zzz) { if (eval(\" '' ;\", (<x><y/></x>.propertyIsEnumerable(\"__proto__\")))) {export *; } else {export *;(1 for (x in [])) }}");
tryItOut("with({__iterator__: ((__count__ = null) && (#0=[*]))}){continue ;; }");
tryItOut("try { return; } catch(prop if (function(){throw StopIteration;})()) { return; } \n");
tryItOut("{break ;\nreturn *::*;\n }");
tryItOut("/*for..in*/for(const constructor = <y><z/></y>.hasOwnProperty(\"__parent__\") in  \"\" ) {yield <x><y/></x>;; }");
tryItOut("while(('haha'.split) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) return  '' ; }");
tryItOut("__iterator__ = prop;");
tryItOut("this.zzz.zzz;");
tryItOut("with(@foo.prototype && __noSuchMethod__ = <  for (constructor in 0.1) x><y/></x>)return;");
tryItOut("/*infloop*/for(5.0000000000000000000000; (-0); <y><z/></y>) <x/>;");
tryItOut("break M;\n<><x><y/></x></>;\n");
tryItOut("yield function ([y]) { } ? 0/0 : window.unwatch(\"prototype\");");
tryItOut("gc()const get, __parent__ = <x><y/></x>;");
tryItOut("\tif((__proto__)) { if ((__noSuchMethod__+=__noSuchMethod__.@*)) {(<x/>); }} else {; }");
tryItOut("with(constructor.((<x><y/></x>.(false))))");
tryItOut("/*infloop*/L:while(eval(\"prototype = this\", ({ constructor: __parent__ }) = (window.__proto__ = [,])))return prototype.prop;");
tryItOut("const prop, constructor");
tryItOut("/*for..in*/for(let prop = {} in __proto__) {export *; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; ({}.unwatch(\"__proto__\")); constructor) {gc() }");
tryItOut("L:with({constructor: prototype.__proto__.__parent__}){/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] =  ''  in __noSuchMethod__) <x/>; }");
tryItOut("/*for..in*/M:for(let <y><z/></y>\f in ((([1,2,3,4].map).apply)(this.__defineSetter__(\"__iterator__\", eval))))[1,,];");
tryItOut("L:with(3.prototype)const __count__, constructor = 5.0000000000000000000000;");
tryItOut("return;");
tryItOut("L:with({__iterator__: ([(p={}, (p.z = <y><z/></y>)())].some((p={}, (p.z = undefined)()))--)}){__proto__ = [1];; }");
tryItOut(";");
tryItOut("let([({ prototype: __proto__ }), ] = undefined .@x:: gc()) ((function(){with({}) let(__proto__ = (let += <y><z/></y>)) ((function(){for(let y in []);})());})());");
tryItOut("(<x><y/></x>); const constructor;");
tryItOut("return true\n{\f}");
tryItOut("if(try { let(prop, []) { return <x><y/></x>; } finally { with({}) for(let y in [5,6,7,8]) __noSuchMethod__ = __iterator__; } ) { } else /*infloop*/M:do {throw *::*; } while(<><x><y/></x></>);");
tryItOut("var __parent__ = [z1];");
tryItOut("try { return *::*; } catch(prop) { return; } finally { \tthrow  /x/g ; } ");
tryItOut("{export __parent__; }");
tryItOut("if(constructor: (__proto__);) let __count__, __proto__; else {var __iterator__ = 1.3;break ; }");
tryItOut("if(this) { } else false;");
tryItOut("yield <y><z/></y>;");
tryItOut("/*infloop*/for(*::*; (yield constructor); yield this) {{}break ; }");
tryItOut("try { const __count__; } catch(__count__ if (function(){throw null;})()) { {} } catch(__noSuchMethod__) { gc() } ");
tryItOut("/*for..in*/for(constructor in ((({}).__lookupGetter__)(~this)))switch(<><>({ set __parent__(__parent__) { yield <><x><y/></x></> }  })</></>) { case function ([y]) { } ^  /x/g : yield;break;  }");
tryItOut("try { break M; } finally { let __noSuchMethod__ = <><x><y/></x></>; } ");
tryItOut("if(*::*) ;");
tryItOut("L: {(({})); }");
tryItOut("<x/>;");
tryItOut("/*for..in*/M:for(const [constructor, __iterator__] = __parent__ = __proto__ in undefined) break ;");
tryItOut("with({constructor: *::*--.__lookupGetter__(\"constructor\")}){throw false; }");
tryItOut("L: for(let y in [5,6,7,8]) try { break M; } catch(__parent__ if \f(function(){__iterator__, constructor;})()) { throw <><x><y/></x></>; } catch(prop if (function(){return <x/>;})()) { export *; } catch(constructor) { {} } ");
tryItOut("if(<y><z/></y> <<= 1e81) yield  /x/ ; else  if ((*[__proto__])) {yield;continue M; } else <x/>;");
tryItOut("if(__parent__) {export __parent__; } else  if (*::*) {var prop, prop = undefined; } else gc");
tryItOut("for(let y in [5,6,7,8]) export *;/*for..in*/for(let [prototype, __proto__] = <y><z/></y> %= <><x><y/></x></> in <x/>) {break M;<x/>; }");
tryItOut("/*infloop*/do let(constructor = <><x><y/></x></>, __noSuchMethod__ = <x><y/><\f/x>) { throw StopIteration; while((yield ({})));");
tryItOut("do return; while((<y><z/></y>) && 0);  ");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = let () ({})) { throw __count__;");
tryItOut("break M\n{}");
tryItOut("do L: __iterator__, __parent__;continue M; while(([.prototype]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in __proto__[__iterator__]) {constructor; }");
tryItOut("L: {constructor }");
tryItOut("let (__iterator__, __count__ = *::*) { export *; }");
tryItOut("/*for..in*/M:for(let [prop, prop] = prototype in  /x/g ) {trueexport *; }");
tryItOut("new (([1]).watch)(<y><z/></y>, undefined) const constructor;");
tryItOut("return *;");
tryItOut("/*infloop*/for( \"\" ; this; <y><z/></y>) {}");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = __iterator__-=this.constructor in <><!--yy--></>.(__iterator__)) if(@foo) return; else  if ( /x/g ) {export *; } else { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({})['__iterator__'] in  \"\" ) {constructor, __count__ = <x/>;export __proto__; }");
tryItOut("/*infloop*/while([this.unwatch(\"__iterator__\")].sort([1,2,3,4].slice)){ ''  }");
tryItOut("/*infloop*/L:do {/*for..in*/for([constructor, __iterator__] = <><x><y/></x></> in *) yield;export *; } while(__noSuchMethod__--);");
tryItOut("M:if(((__proto__)) = ({ __proto__:  }) = __parent__ = __proto__) { if ((constructor.prop.__lookupGetter__(\"__count__\"))) {with({}) { this.zzz.zzz; }  }} else {/*infloop*/while(new Date( '' , arguments))yield *;gc() }");
tryItOut("function::prototype = prototype;");
tryItOut("/*infloop*/for(<x><y/></x>; <><x><y/></x></>; (function ([y]) { })()) yield window");
tryItOut("if((<x><y/></x>.propertyIsEnumerable(\"__parent__\").eval(__noSuchMethod__\t / false))) __proto__ else  if (__noSuchMethod__) gc");
tryItOut("L: break ;");
tryItOut("with(__iterator__)return;");
tryItOut("with(__parent__ = __iterator__){{}<y><z/></y>, *::* }");
tryItOut("__parent__ = __iterator__;");
tryItOut("let (constructor = __iterator__) { {/*infloop*/do yield constructor; while( '' ); }\t }");
tryItOut("yield window;");
tryItOut("with({}) { with({}) { for(let y in []); }  } ");
tryItOut("");
tryItOut("with({__iterator__: prototype.__noSuchMethod__ = false.@foo})(@foo);");
tryItOut("if(this.__lookupGetter__(\"constructor\")) { if (__count__) {( /x/ ); } else return <x><y/></x>;}");
tryItOut("if((this.zzz.zzz)) yield 1e+81; else { /x/ ;var __count__ = 0/0, prototype = __parent__; }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("if(eval(\"constructor.(__proto__ -= __iterator__)\",  /* Comment */@foo)) { if ((<><!--\fyy--></>.((new (this)((__iterator__ = [1].__defineGetter__(\"__proto__\", (function  constructor (prototype, prototype\t) {  } ).call))))))) case 4: default: case 0: break; case 4:  if (<><x><y/></x></>)break; /*infloop*/for(var __parent__; __noSuchMethod__; prop) __iterator__;export __proto__;break;  else let (__noSuchMethod__) { throw <><x><y/></x></>; }}");
tryItOut("/*infloop*/for(let constructor; 033; ((yield ( '' .prop)).valueOf(\"number\"))) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in <x><y/></x>) return try { export *; } catch(prop if <y><z/></y>) { var constructor = try { ; } catch(__noSuchMethod__ if  /x/g ) { __parent__ = 1.2e3, __proto__ = function ([y]) { }; } catch(__noSuchMethod__ if (function(){<x><y/></x>;})()) { throw 0.1; } catch(function::__count__ if <><x><y/></x></>) {  } catch(prop) { yield <y><z/></y>; } finally { ; } ; } catch(__iterator__) { yield; } ; }");
tryItOut("M:while((function () { return ( /x/g )(*) } ) && 0){yield case <x><y/></x>: break; default: return <y><z/></y>;break; ( /x/ );break; ; }");
tryItOut("([z1,,]).__defineSetter__");
tryItOut("return;");
tryItOut("L: {const __count__ = function::prototype; }");
tryItOut("yield; const prototype;");
tryItOut("/*infloop*/for(__proto__; (prototype.__defineSetter__(\"prop\", [1,2,3,4].slice)); __proto__()) yield;");
tryItOut("if( /x/ ) yield; else {evalreturn; }");
tryItOut("M:with((<x><y/></x>.__defineGetter__(\"delete\", function(q) { return q; }))){yield prototype = undefined; }");
tryItOut("if(window) if(null) { if ({yield; }) gc() else function(y) { yield y; let <y><z/></y> = __noSuchMethod__;; yield y; }} else  if (((__iterator__ = __count__)((true.__iterator__ = @foo)))) continue \nexport __parent__; else {yield;gc() }");
tryItOut("/*for..in*/for(let __proto__ in __iterator__ = 0) ");
tryItOut("yield;");
tryItOut("/*infloop*/M:do  while(yield  /x/g  ? <x/> :  \"\" );");
tryItOut("M:if(<>this</>) let #1=[#1#] = 5.0000000000000000000000; else <><x><y/></x></>;");
tryItOut("/*infloop*/L:for(__parent__.([<x><y/></x>.hasOwnProperty(\"__proto__\") for (constructor in window) for (__count__ in __count__) for each (__iterator__ in prop)]); ({prop: (this.__defineGetter__(\"constructor\", __noSuchMethod__))}); 1e-81) /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in null) /*for..in*/for(var constructor in  '' ) {[,,];; }");
tryItOut("do return; while((<><x><y/></x></>) && 0);");
tryItOut("try { (this)(<><x><y/></x></>) = constructor; } catch(__proto__ if <x><y/></x>.(window)) { return 'fafafa'.replace(/a/g, gc); } catch(prop if (3.141592653589793 /= (new Function(\"continue ;\"))([z1,,], __parent__))) { return; } catch(__iterator__) { return; } ");
tryItOut("if((constructor = [z1,,]) /= __proto__.__count__\n | (uneval(( /x/  >  /x/ )))) <x><y/></x>.isPrototypeOf(<><x><y/></x></>); else  if (@foo) {constructor = <x/>; } else {do ; while((undefined) && 0); }");
tryItOut("let (prototype = (__count__ = (<x/>)())) { break \n }");
tryItOut("while((({prototype: __proto__ })) && 0){yield;; }");
tryItOut(";");
tryItOut("L:if([(null .@*:: __count__ = ({a1:1}), __count__ != window)].\tsome(new Function)) { if (({__count__:  /* Comment */(undefined.valueOf(\"number\").throw((uneval(({a1:1})))))})) {(__noSuchMethod__);L:switch((<x/>.hasOwnProperty\n(\"__count__\"))) { case 0: constructor = <x><y/></x>, prototype = [z1]; const prop; } }} else {throw this; }");
tryItOut("let(__count__ = [gc()].some([1,2,3,4].slice), ({ __proto__: constructor })) { with({}) { __noSuchMethod__ = __iterator__; } ");
tryItOut("");
tryItOut("L:if(#2=[true]) {function(q) { return q; }yield; } else  if (function () { return new (uneval(__parent__))() } ) L:with({__proto__: eval(\"return;\",  '' )}) else {}\nundefined;\r");
tryItOut("let __proto__, get;");
tryItOut("return");
tryItOut("/*infloop*/for(let prop; <x/>; <><x><y/></x></>) {return false;(1e81); }");
tryItOut("");
tryItOut("/*for..in*/for([__parent__, __proto__] = [(try { (new Function).callthrow  /x/g ; } finally { this.zzz.zzz; } //h\n)((typeof <><x><y/></x></>), <><x><y/></x></>.__lookupSetter__(\"prototype\"))].some((#1=//h\n<><x><y/></x></>)[__noSuchMethod__ = prototype]) in __noSuchMethod__) /*\n*/{{}break ; }");
tryItOut("if(<x/>.__defineGetter__(\"__count__\", [1,2,3,4].map)) {var __proto__ = <y><z/></y>; } else export __noSuchMethod__;");
tryItOut("/*infloop*/for(let __proto__; window; <x><y/></x>) gc()");
tryItOut("if((__count__.eval(#3={a:#3#})).__proto__) { if ((({ get __count__() { yield 3.141592653589793; }  }))) { } else {/*for..in*/for(let prototype in <y><z/></y>) {var __iterator__ = <x><y/></x>; }export __noSuchMethod__; }}");
tryItOut("let (prop = (#0=[true]/*\n*/ if (<x><y/></x>)) += __count__, __noSuchMethod__) { /*for..in*/for([__parent__, __count__] = <x><y/></x>.__lookupSetter__(\"constructor\") in 1e+81) M:with(null){((-1)); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  '' ) gc()");
tryItOut("L:switch((this.@*.throw(1.3))) { case 4: return;break; default: break;  }");
tryItOut("with({}) with({}) { let(constructor) ((function(){throw StopIteration;})()); } ");
tryItOut("/*for..in*/for(let __proto__.constructor in [15,16,17,18].some((-->).apply, (uneval(__noSuchMethod__ = {})))) return __count__ = <><x><y/></x></>;");
tryItOut("let ([({ __parent__: ({ __iterator__: __parent__ }), __iterator__: ({ __iterator__: [], __parent__: __count__ }) })]) { let prop; }");
tryItOut("/*for..in*/for(let prototype.constructor in ((function  __iterator__ () { yield <><x><y/></x></> !=  /x/g  } )(new \t1e4(<><x><y/></x>\f</>, < { yield +\f[<x><y/></x>] } <x><y/></x><>))))\n { return yield  \"\"  % [,] } \n");
tryItOut("with(window)");
tryItOut("/*infloop*/for(var __noSuchMethod__; let __parent__, prop;; prototype.(<><x><y/></x></>)) {yield;yield; }");
tryItOut("if(<x/>) {break M; } else {do (*); while((*) && 0); }");
tryItOut("do {export *;if(this.__defineGetter__(\"prop\", false)) { if (<x><y/></x> ? constructor : <><x><y/></x></>) break M; else { }} } while((constructor.__lookupGetter__(\"constructor\")) && 0);");
tryItOut("while(( \"\" .__proto__ = <><x><y/></x></>.eval(__proto__ = <y><z/></y>)) && 0)/*for..in*/for(const __count__ in __proto__) { }");
tryItOut("/*infloop*/for((<x><y/></x>.prop = __proto__); <>*</>.((\nprop));  /x/ ) \t{}\nlet prop = 1e-81, __proto__ = __iterator__;\n");
tryItOut("while(({}) && 0)let (prop, prop = prop) { return true; }");
tryItOut("if((*::*.propertyIsEnumerable(\"__count__\"))) function  prop (__proto__, __iterator__) { return <x/> }  else  if ((true.valueOf(\"number\").throw((var __iterator__ = __parent__, constructor = *)))) {{}; }");
tryItOut("M:if(<y><z/></y>) {({}).hasOwnPropertyreturn ({a1:1}); }");
tryItOut("continue ");
tryItOut("/*for..in*/for(__iterator__ = (<><x><y/></x></>.eval([[1]]) for each (prototype in null) for (__proto__ in ({a2:z2}))) in <x><y/></x>) {break M; }");
tryItOut("{if(#0=[<><x><y/></x></>]) { if ((this.__defineSetter__(\"prototype\", <x><y/></x>))) {gc()return *; } else {}} }");
tryItOut("/*for..in*/M:for(const __iterator__ in ((function  __parent__ (__noSuchMethod__) { yield ([15,16,17,18].some(<x/>, -0)) || prop instanceof this } )((.__iterator__)))){return; }");
tryItOut("/*infloop*/while(__count__.((__count__ =  '' )).hasOwnProperty(\"prop\")){with({each: prototype.__parent__})gc()let(prop = ({__iterator__: *, __parent__: @foo })\n) ((function(){for(let y in []);})()); }");
tryItOut("if(eval(\"<><x><y/></x></>\", prototype = true) ? #0=({prop: new \t(Function)()}) : new (__proto__)(new (new Function(\"{}\"))(<x><y/></x>))) {const __parent__ = <x><y/></x>, __count__ = undefined; }");
tryItOut("if((this.__defineGetter__(\"__parent__\", function(q) { return q; }))) 'haha'.split else  if (let (__parent__ = ({})) var __iterator__ = [[]], __parent__ = __proto__;.@*) return; else {yield;const yield x::<x><y/></x>;; }");
tryItOut("if(eval(\"prototype.((window <= false))\", ((yield <x><y/></x>))).watch(\"__parent__\", __proto__ = <x><y/></x>)) (window); else throw false @ <><x><y/></x></>;");
tryItOut("yield this;");
tryItOut("let prototype = <y><z/></y>, __parent__ = this;");
tryItOut("yield ({a1:1});");
tryItOut("/*infloop*/do continue M; while((__noSuchMethod__.prototype setter= Math.sin)[continue ;.__parent__ instanceof @foo]);");
tryItOut("if(-3/0) var prototype; else {M:switch(((<><x><y/></x></>)(__parent__,  '' ))) { case 9: __noSuchMethod__case __parent__: let constructor = <y><z/></y>;default: let (__iterator__) { return <><x><y/></x></>; } }(function (({ __iterator__: __proto__ })) { return [true for each (__proto__ in @foo)] } ).apply }");
tryItOut("L: {(prop)switch((this.__defineGetter__(\"prop\", [1,2,3,4].map))) { case __parent__ = @foo: {}break;  } }");
tryItOut("M:do /*for..in*/for\n(const (__proto__) in __noSuchMethod__) {/*infloop*/for(var __iterator__; @foo; prop) {;\t; } } while(((__proto__ = *::*(new (null)(<x/>))).__defineSetter__(\"__parent__\", Math.pow)) && 0);");
tryItOut("if(<><x><y/></x></> << undefined) {var constructor = <y><z/></y>; } else  if (@foo ? true : *) return __count__; const __parent__;");
tryItOut("/*infloop*/M:for(__iterator__; <y><z/></y>; ('fafafa'.replace(/a/g, gc))) {if(<x/>)  set __iterator__(prototype)function ([y]) { } else  if (<x><y/></x>) {} }");
tryItOut("if({}) {Math.pow } else {throw <y><z/></y>;yield; }");
tryItOut("if(false) export *; else {throw <y><z/></y>; } const __noSuchMethod__;");
tryItOut("/*for..in*/for(const [__parent__, constructor] = ('fafafa'.replace(/a/g, function(q) { return q; })) in (@foo)[ '' ]) return;");
tryItOut("if((<x><y/></x>.eval([z1,,]) >>= @foo)) let __proto__, __noSuchMethod__; else throw <x><y/></x>;");
tryItOut("/*for..in*/for(var [__proto__, constructor] = (<x><y/></x> / this) ? <x><y/></x> :  \"\" .valueOf(\"number\") in ()) {yield; }");
tryItOut("/*for..in*/M:for(const __iterator__ = (let (prop, __count__ = #1#) <>prototype = (new  \"\" ()), #2=[<><x><y/></x></>]</>).@* in (constructor = 3.141592653589793)) export prototype");
tryItOut("let (({ prop: constructor(new (*)()) })) { prop = __noSuchMethod__; }");
tryItOut("/*infloop*/for(<><x><y/></x></> != window; (({ prototype: __parent__, __noSuchMethod__: each }) = <x/> >> true); null.*) var __count__, __parent__ =  /x/g ;");
tryItOut("/*infloop*/for(let [] = (<x/>.throw(*::*)); false; ((( ''  >= this))()--)) var constructor, __parent__;");
tryItOut("with({__parent__: 0x99.isPrototypeOf((-0))}){ }");
tryItOut("/*for..in*/for(constructor = (#1=[1]).__iterator__ in ((prop.<employee id=\"1\"><name>Joe</name><age>20</age></employee> getter= Math.sin))({})+=()) {yield; }");
tryItOut("/*for..in*/for(let __proto__ = \n__iterator__ in #1#) {([]);if(<y><z/></y>) return; else  if (<x/>) var __noSuchMethod__ = <x><y/></x>; else {{} } }");
tryItOut("/*infloop*/do {{} const export *;; } while(Exception());");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(prop.*; ({}).__lookupGetter__(<><x><y/></x></>); ([,].__count__)) L:if( '' ) {;export __noSuchMethod__; } else  if (<><x><y/></x></>) {(<><x><y/></x></>);var prototype = #1#; } else {gc() }");
tryItOut("yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <y><z/></y> .@*:: 3.141592653589793) {/*for..in*/for(const prop in (('haha'.split)(<><x><y/></x></>))){continue L;(({}).hasOwnProperty).apply } }");
tryItOut("if(__noSuchMethod__) {yield; } else  if (<><x><y/></x></>) export *; else var __noSuchMethod__ = 3/0, prop = window;");
tryItOut("throw prototype;\n/*for..in*/for(let __noSuchMethod__(__iterator__) in prototype) gc()\n");
tryItOut("yield 0.1\n");
tryItOut("__parent__ = __iterator__;");
tryItOut("L:if(*::*) { if ( \"\" ) yield *::*; else return;}");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(constructor = eval(\"yield  \\\"\\\" ;\", (<><x><y/></x></> ? [,,] : <x><y/></x>).__lookupSetter__(\"__count__\")) in ({prop setter: gc, function::constructor: prop })) ");
tryItOut("{break ;L:if(this) {(false);var prototype = 1.2e3, __noSuchMethod__ = *::*; } else ; }");
tryItOut("if(this.zzz.zzz) { if ((eval)(prop+=5.0000000000000000000000, __count__)) {{gc()return; }return; } else (-1);}");
tryItOut("for(let y in [5,6,7,8]) prop = constructor;");
tryItOut("/*infloop*/for(__proto__; this ? __noSuchMethod__ : @foo; [[<x><y/></x> for each (constructor in *::*)]].map('haha'.split)) var __noSuchMethod__ =  /x/ ;");
tryItOut("L: [1,2,3,4].map");
tryItOut("try { return; } catch(prototype if this.__defineSetter__(\"__iterator__\", this)) { undefined; } catch(__parent__) { throw StopIteration; } ");
tryItOut("if((this >>> window)) {switch(@foo.__count__) { case <y><z/></y>[__parent__]: case undefined.valueOf(\"number\"):  }if(prototype) {continue ;var __proto__ = <x/>, prop = true; } else  if (window) return;gc() }");
tryItOut("while((-1) && 0)(<x><y/></x>);");
tryItOut("L:switch(this.zzz.zzz ? <x><y/></x> : <y><z/></y> %= false.@foo) { default: case (new <><x><y/></x></>(3/0, *::*)).__defineSetter__(\"__iterator__\", (new Function(\"Math.sin\"))): case <x/>.propertyIsEnumerable(\"prototype\") > eval(\" \\\"\\\" \", ((__proto__)( '' ))): /*infloop*/while(<x><y/></x> < this)gc() }");
tryItOut("\ncontinue M;");
tryItOut("if(({function::prototype: ((uneval(1.2e3.propertyIsEnumerable(\"__noSuchMethod__\")))) })) /*infloop*/for(<xxx {__proto__}={(<x/>.watch(\"__proto__\", (new Function(\";\")))).hasOwnProperty(\"__count__\")} />; (\nthis);  '' .constructor = constructor([,], [<x/>])) __proto__ else  if (( /x/  .@x:: <y><z/></y> , (<><xxx>{prop}</xxx></>.eval(( /* Comment */ \"\" ))))) {switch(1e+81) { default: #1#; }with(null){yield; } } else {export __noSuchMethod__; }");
tryItOut("do {__noSuchMethod__, __parent__ = <x></></x>;(Object( /x/ )); } while(((prop = <><x><y/></x></>)[<><x><y/></x></>]) && 0);");
tryItOut("/*infloop*/L:for(__proto__ = <y><z/></y>; __parent__; <y><z/></y>) {return *::*;(new Function(\"yield;\")) }");
tryItOut("let(__proto__ = new Function(4.)) { with({}) { ; } ");
