tryItOut("return;break M;");
tryItOut("/*infloop*/L:while([15,16,17,18].filter((uneval(((({}).__lookupGetter__)(<y><z/></y>)) %= *::*)), __iterator__ = __parent__ =  \"\" ))const __count__, prop\nexport __proto__;");
tryItOut("with(<x><y/></x>){yield; }\n/*infloop*/L:while(({__proto__: arguments, __iterator__: undefined })){((-0)); }\nif(__count__ = prop) {const __parent__ = @foo; }\n");
tryItOut("let (prototype = (constructor.prototype), __count__ = (p={}, (p.z = {})())) { yield; }if(5.0000000000000000000000) { if ((__proto__.\fprototype getter= (Number()))) {; }} else yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(const prototype; 0/0; true) return");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/do /*infloop*/L:while((undefined()))gc()\n{return *::*; } while((this.__defineSetter__(\"prototype\", (window).call)));");
tryItOut("/*for..in*/M:for(let constructor = ([,,]\n.eval(++ /x/g  for each (__noSuchMethod__ in <y><z/></y>) for (\f__parent__ in prototype))) in ((this.__defineGetter__(\"__iterator__\", ((1 for (x in []))).call)) @ __iterator__.constructor = <x><y/></x>)) {do {yield this; } while((@foo) && 0)/*\n*/; const __proto__; }");
tryItOut("let (({ __noSuchMethod__: ({ __parent__: ({ __proto__: __count__ }), constructor: constructor }) }), __noSuchMethod__) { /*infloop*/while(<x><y/></x>){;export prototype; } }");
tryItOut("L: export *;throw __parent__;");
tryItOut("/*for..in*/for(let prop in <y><z/></y>) {throw #1=[#1#];const prop = this; }");
tryItOut("let(constructor, __proto__ = <><x><y//*\n*/></x></>) ((function(){gc()})());");
tryItOut("L:if() { if (new function  constructor (__iterator__) { yield (p={}, (p.z = <x><y/></x>)()) } (eval(\"/*infloop*/for(var __iterator__; [1,,]; 1.2e3) {prop.prop }\", 033), <y><z/></y>.valueOf(\"number\")).prototype) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in true) __parent__;} else function(q) { return q; }");
tryItOut("return;");
tryItOut("if((uneval(yield;.propertyIsEnumerable(\"__proto__\")))) { if ((constructor+=<y><z/></y> - #1=({prop:  \"\" }))) {yield window; }} else {continue L; }");
tryItOut("*;");
tryItOut("{if(<><x><y/></x></>) { if (<><x><y/></x></>) yield <y><z/></y>; else {const __iterator__, __count__; }} }");
tryItOut("while((x::__count__) && 0){3.141592653589793with({__count__:  /x/g }){__iterator__, __proto__ = null;gc() } }");
tryItOut("do /*for..in*/for(const prop in ((function (__parent__, prototype\t) { return <x><y/></x> } )((__iterator__)))){<x><y/></x>; } while((undefined) && 0);");
tryItOut("/*infloop*/for(<zzz>undefined >>> __proto__</zzz>; function(id) { return id }\n != ([#1=[#1#]].sort([1,2,3,4].slice)).propertyIsEnumerable(\"__proto__\"); .2.@*) {gc() const __proto__;yield <><x><y/></x></>;<x/>; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in __iterator__) {throw *::*; }");
tryItOut("/*infloop*/for(const prototype;  /* Comment */(__proto__ = prototype); window) return;");
tryItOut("while((constructor = ({ prototype: __proto__ })\n) && 0)/*infloop*/M:do {break ; } while(__proto__);");
tryItOut("/*infloop*/while(<x><y/></x>.constructor)let prototype;");
tryItOut("/*for..in*/for(prototype.prop in (((Math.pow).call)(yield <><x><y/></x></>))){{}if(<><x><y/></x></\t>.unwatch(\"__parent__\")) { if ((({}).__lookupGetter__).call([,], <><x><y/></x></>)) {export *; }} else ; }");
tryItOut("\n");
tryItOut("/*for..in*/for(const [prototype, __proto__] = prototype in <><x><y/></x></>) {{}return; }");
tryItOut("let(prop) ((function(){__proto__ = __proto__;})());");
tryItOut("yield;");
tryItOut("L: {do __iterator__ = null; while(((({constructor: *}))) && 0);yield; }");
tryItOut("/*infloop*/for(<y><z/></y> = (__noSuchMethod__ = undefined).eval(this); <><xxx>{__count__}</xxx></>; eval(\"constructor\", null)) ;");
tryItOut("{}");
tryItOut("L:with(eval(\"<x><y/></x>[window]\", <x><y/></x>.eval(__proto__)))Math.sin\n");
tryItOut("{L: {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) yield; } }");
tryItOut("L:if([,]) {+ } else  if ({}) const __parent__ = @foo;");
tryItOut("/*infloop*/for( /* Comment */prototype;  /* Comment */3/0; window.__iterator__ = set) throw  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in ([<y><z/></y> for (\" in this)])) {let (function::__proto__ = ({ x::__iterator__: __parent__ }) = ({ __parent__: __count__, __count__: __proto__ })) { L:if((({__iterator__: *::*, prototype getter: Function }))) {;throw  /x/g ; } else  if ((({a2:z2}))[eval(\"yield <y><z/></y>;\", __iterator__)]) var __proto__ = [,,z1]; }this.zzz.zzz; }");
tryItOut("( /x/g )\n");
tryItOut("prop = prop\nyield\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>) {__iterator__ = <x/>, __noSuchMethod__; }");
tryItOut("/*infloop*/for(let prop; (eval(\"[1,,]\", [@foo].some(Math.pow)))\t; (({__iterator__: <><x><y/></x></> @ <x><y/></x>, prototype: (__iterator__+=<x/>) }))) ;");
tryItOut("if(([#1# for \teach (__parent__ in function(id) { return id })]).*) {\fgc()return; } else  if (<x><y/></x> in *) return; else M:while((*::*) && 0){yield function(id) { return id }; }");
tryItOut("export *;/*infloop*/M:for(this; @foo; <x/>) {let set = .2, prop; }\n");
tryItOut("switch( \"\" ) { case 2: let (prototype, __iterator__ = 3/0) { L:if((__parent__ = <><x><y/></x></>)) { if ( /x/ .isPrototypeOf(*::*)) {break M;{} }} else yield  \"\" ; }break; default: break; const __count__ = __parent__, prop = @foo; }");
tryItOut("{/*infloop*/for( '' ; <x/>; <x><y/></x>) yield;while((this) && 0){let __iterator__ = <y><z/></y>;let __parent__ = @foo; } }");
tryItOut("for(let y in []);");
tryItOut("{try { (undefined); } catch(__count__ if (function(){(__count__);})()) { ; } catch(__noSuchMethod__ if this) { const __noSuchMethod__ = <y><z/></y>, constructor; } finally {  }  }");
tryItOut("switch((Math.sin)(for(let y in []);, *)) { null }");
tryItOut("/*for..in*/for(const __parent__ in window) {let prototype, __noSuchMethod__; }");
tryItOut("/*for..in*/for(let __iterator__ = <><x><y/></x></> in [[1]]) {}");
tryItOut("/*for..in*/for(const  case  in ((<><x><y/></x></>)(window)))return  /x/ ;");
tryItOut("/*for..in*/L:for(let let = [({ __count__: __proto__ })] = #2=new __proto__(prop, @foo).__lookupGetter__(\"__iterator__\") in [@foo]) { const prototype; }");
tryItOut("");
tryItOut("for(let y in [5,6,7,8]) try { with({}) { return; }  } catch(get) { return; } ");
tryItOut("return;");
tryItOut("if(<><x><y/></x></>) { if (window) return  __parent__: false ; else {yield; }}\n");
tryItOut("if((undefined)[<><x\f><y/></x></>]) export __iterator__; else (1.3);");
tryItOut("/*infloop*/while((new Function(this, *).__proto__))__noSuchMethod__");
tryItOut("/*infloop*/for(<><x><y/></x></>.@foo; (p={}, (p.z = *)()); new  /x/g (1e-81)) {export constructor; }");
tryItOut("M:if((((__count__ = <y><z/></y> for (__iterator__ in this)) , constructor = [z1] in this))) gc() else  if ((function  __proto__ (__noSuchMethod__, prototype) { return 4. } )(*, this)) let __noSuchMethod__, prototype;");
tryItOut("throw __count__;");
tryItOut("M:if([('fafafa'.replace(/a/g, ((<y><z/></y>).apply).call)) ^ (<x/>.__lookupGetter__(\"__noSuchMethod__\"))].some(((1 for (x in []))).apply)) {/*infloop*/for(let __proto__; \n((1e81).call(1e+81.prototype, __iterator__.(<x><y/></x>))); [z1].isPrototypeOf(prototype)) {return; }function(y) { yield y; ;; yield y; } }");
tryItOut("/*infloop*/for({} .. [[]];  \"\" ; /*\n*/(null.*)) {with({prop: [({__noSuchMethod__: @foo, __noSuchMethod__: window })].some(gc)}){if(__proto__) {throw prototype; } else {let __proto__ = window; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__noSuchMethod__ in <y><z/></y>) export *;");
tryItOut("switch((@foo.throw(new (__proto__)()))) { default: {}break; break; case 2: case (Number(<x/>)): {} }");
tryItOut("/*infloop*/for(\x00.__iterator__ = [[1]]; this.__defineSetter__(\"__iterator__\", __noSuchMethod__) .@ ('fafafa'.replace(/a/g, default: case 9: export *;break; )); <xxx>{__noSuchMethod__}</xxx>\f) /*for..in*/for(var __iterator__ in <x><y/></x>) {gc()var __noSuchMethod__ = @foo; }");
tryItOut("with(<y><z/></y> & get)if(<><x><y/></x></>) { if (true) yield; else {throw 1.3;return null; }}");
tryItOut("with({}) { return (-1); } ");
tryItOut("L: {}");
tryItOut("if((new Exception(false, window)).throw(<x><y/></x>.__iterator__)) { if ([[]]) yield [,]; else {(-1); }}");
tryItOut("/*infloop*/do gc() while([<x><y/></x>]); const __count__;");
tryItOut("with({__iterator__: (__proto__) = <x><y/></x> << this.eval(Math.pow.@*)})with(){1e81; }");
tryItOut("/*for..in*/L:for(let __parent__ =  \"\" .__noSuchMethod__ in (((__count__ = __count__.@foo).__defineSetter__)(((Math.sin)(this == [] -= <><x><y/></x></>.@*, (((arguments).call).call([function (V)this()]))))))){let __count__ = __iterator__.__parent__ = prototype, __iterator__ = __parent__;/*infloop*/for(({ __iterator__: constructor, constructor: prop }) = undefined in  '' ; (<x><y/></x>.(*)); (<x><y/></x>)[@foo]) {export *; } }");
tryItOut("with(<x><y/></x>)Math.pow");
tryItOut("( /x/ );if(<x><y/></x>) { if (<y><z/></y>) ;} else {( \"\" );yield <x><y/></x>; }");
tryItOut("\nyield undefined;");
tryItOut("__iterator__ = <x/>, __count__;");
tryItOut("__count__ = constructor;");
tryItOut("function(y) { yield y; __proto__ = -0;; yield y; }");
tryItOut("while((([[z1] for (__proto__ in *::*)]\f)) && 0)const getter;");
tryItOut("{{} }");
tryItOut("return;");
tryItOut("{return (@foo > <><x><y/></x></>());\nconst prototype = [z1,,], __iterator__ =  /x/ ;\nL:if(*::*)  else  if (false) {yield  \"\" ; } else {return;var prototype; } }");
tryItOut("var __iterator__ = [1], prop = <x><y/></x>;");
tryItOut("/*infloop*/L:for([({ __iterator__: ({ __parent__: \r({ constructor: ({ __parent__: __count__ }) }), prototype: [({ __iterator__: __parent__ }), __iterator__, [, __proto__, , ], ] }) }), ] = <bbb xmlns=\"<><x><y/></x></>\"><!--yy--></bbb>.eval((<x/>.__lookupGetter__(\"__proto__\") in (<><x><y/></x></> for each (constructor in  /x/g )))); (this.__defineGetter__(\"constructor\", (new Function(\"break L;\")))); ({ get prop() { return <><ccc:ddd></ccc:ddd></>.(new <y><z/></y>) } , __iterator__: (function ([y]) { })() < prototype })) {gc() }");
tryItOut("L: {const __iterator__ = 0.1;{} }");
tryItOut("yield this.zzz.zzz;");
tryItOut("let(prototype) ((function(){break ;})());");
tryItOut("{;(<x><y/></x>); }");
tryItOut("switch((({__proto__: null, __parent__ getter: function (prototype)<><x><y/></x></> }))) { default: export __proto__; const prototype;break; break;  }");
tryItOut("yield (-3/0);");
tryItOut("L: {}");
tryItOut("while((constructor = constructor.constructor getter= (false).watch) && 0){yield *::*;/*infloop*/M:while({}){{}function(q) { return q; } } }");
tryItOut("throw null;\n\n");
tryItOut("while(((prototype-=__noSuchMethod__.unwatch(\"__proto__\"))) && 0){(*::*);const export *; = [,,z1], __iterator__; }");
tryItOut("/*infloop*/for(var [] = (-0)(#1=[#1#]); __proto__ = undefined; ([window for (__iterator__ in <x/>)])) {gc()yield; }");
tryItOut("{gc(){gcyield <x><y/></x>; } }");
tryItOut("/*infloop*/for(({a1:1}); <x><y/></x>; <><x><y/></x></>) {(1e-81);return; }");
tryItOut("M:while(([{}]) && 0)let constructor, constructor = this;");
tryItOut("if(this) {;export *; } else  if ( /x/g ) {const x::prototype;yield; }");
tryItOut("/*infloop*/do yield; while( '' );");
tryItOut("try { let(__count__ = ((this)[false])) { this.zzz.zzz; } finally { __noSuchMethod__ = __parent__; } \t");
tryItOut("if(new ((gc()))((__count__ = prototype.__defineSetter__(\"prop\", ({}).__lookupGetter__)))) yield  /x/ ; else  if (__iterator__ = (\t{ __noSuchMethod__: ({ __iterator__: ({ __count__: ({ __count__: __iterator__, __noSuchMethod__: __iterator__ }) }), __parent__: set }) })) {{gc() } }");
tryItOut("let (__count__) { <x/>; }");
tryItOut("continue ;\nswitch(@foo) { case 6: break; default: break; case 5: (window);throw []; }\n\nfunction(y) { yield y; break M;; yield y; }");
tryItOut("if((prop.__defineSetter__(\"__proto__\", (<><x><y/></x></>).__defineSetter__))) { if (({__parent__: __proto__ })) {__noSuchMethod__; } else {return *; }}");
tryItOut("/*infloop*/for(const prop; window; ((<y><z/></y>).__defineGetter__(\"__parent__\", function(y) { yield y; /*for..in*/for(let __iterator__ in (( /x/ )((-1)))){<x/>;; }; yield y; }))) var __noSuchMethod__;");
tryItOut("/*infloop*/for(undefined--; (p={}, (p.z = [15,16,17,18].map(__proto__, (function ([y]) { })()))()); #1# @ <><x><y/></x></>) if(<ccc:ddd><x><y/></x></ccc:ddd>.watch(\"__noSuchMethod__\", function(y) { yield y; break ;; yield y; })) eval else  if (<x/>.eval(<><x><y/></x></>)) export prototype;");
tryItOut("L:if(({__parent__: ((uneval( '' ))),  set __noSuchMethod__()(new (eval(\"1e+81\",  /x/ ))()).__lookupGetter__(\"__iterator__\") })) __noSuchMethod__ else  if (window) {if(prototype <= *::*) window; } else L: {gc()with({__parent__: <x><y/></x>})return; }");
tryItOut("/*infloop*/for(new (*::*.__lookupGetter__(\"prop\"))(__proto__ = false); \fwindow--; new Function()) ;");
tryItOut("/*infloop*/for(let __iterator__; function ([y]) { }; 3) Math.sin");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [[], prop, [, prototype], ], constructor: ({ __proto__: ({ prototype: __parent__, __parent__: __count__ }) }) }) = ([11,12,13,14].some); eval(\" \\\"\\\" \", (<x><y/></x>/*\n*/.(-0))); [[1]].isPrototypeOf(function ([y]) { })) return;");
tryItOut("switch(__noSuchMethod__[prototype]) { default:  }\r");
tryItOut("try { let(constructor = *::* | window, __count__) { let(__proto__ = prototype.unwatch(\"__parent__\")) ((function(){for(let y in [5,6,7,8]) {}})()); } catch(__proto__ if ([__proto__ if (3/0)]) += (<x><y/></x> ^ [,,z1].__lookupGetter__(\"__parent__\"))) { {} } catch(__proto__) { /*for..in*/for(const [prop, __count__] = __iterator__.prop setter= function  prototype () { return *::* }  in __proto__) {let prototype, __noSuchMethod__;export __count__; } } ");
tryItOut("with({}) let(__noSuchMethod__, __proto__ = prop) { return;");
tryItOut("/*for..in*/L:for(var __iterator__ in ((function  __parent__ (__noSuchMethod__, get)@foo)(__parent__)))true;");
tryItOut("/*infloop*/for(var __count__(let (__iterator__ = <x><y/></x>) <y><z/></y>); *; 'fafafa'.replace(/a/g, function(q) { return q; })) {let (__proto__, __proto__ = <x><y/></x>) { continue M; }with(({a1:1}) ? 0x99 : null){export __count__;({}).hasOwnProperty } }");
tryItOut("/*for..in*/L:for(let [__proto__, __parent__] = /a/gi in  /x/g ) {throw <x/>;return; }");
tryItOut("if(prop.prop) { if ((p={}, (p.z = -<x><y/></x>)())) {/*infloop*/for(let constructor; this; \t /x/ ) {;var __noSuchMethod__; }L:with(<><x><y/></x></>){{} } }} else {M:if([z1]) {return  '' ; } else  if (@foo) export *; else return;yield; }");
tryItOut("let(prototype = (('fafafa'.replace(/a/g, Math.pow)) || (new (<><x><y/></x></>)()) >>>=[[z1]].map(eval))) { let(__parent__) { /*infloop*/M:for(<x><y/></x>; null; <x><y/></x>) {var __parent__, prop = 1e+81; }");
tryItOut("{return __parent__;with(window)Math.sin }");
tryItOut("L: {( /x/ ); }");
tryItOut("/*infloop*/for( '' ; undefined; ({a1:1})) {const __iterator__, __count__;continue ; }");
tryItOut("/*infloop*/for((<x><y/></x>.__lookupSetter__(\"__parent__\")); #1# ? <y><z/></y> : [[]] << this; let (({ __parent__: ({ __parent__: prototype, prop: [, ] }) }) = <x/>, __noSuchMethod__) false) if(()) { if (constructor = (new <><x><y/></x></>(__iterator__, *::*))) {export *;; } else {}\f}");
tryItOut("/*infloop*/M:for(let constructor; <><x><y/></x></>; <><x><y/></x></>) {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <> </>--.eval(__count__ = {}); 1e81; <x/>) {} const __iterator__;");
tryItOut("if(constructor.__parent__ = <><x><y/></x></>) {{} }");
tryItOut("Math.pow\n /x/g ;\n");
tryItOut("prop;");
tryItOut("prop = prop;");
tryItOut("{export __count__;function () { return <x><y/></x> } \n }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ =  /* Comment */<x><y/></x> < __proto__ , this in __iterator__.__noSuchMethod__ = \n /x/ ) {{}/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in <y><z/></y>) {return; } }");
tryItOut("/*infloop*/for((<x/> % undefined); <><x><y/></x></> ? <x><y/></x> : 0.1; __iterator__) <x/>; const prop;");
tryItOut("yield;");
tryItOut("/*infloop*/M:do {break ;const constructor = <y><z/></y>, function::__proto__ = <x/>; } while((this.__defineGetter__(\"prototype\", (1 for (x in [])))));");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*/for(this.prop in 3/0) {let __proto__ = this, constructor;yield .2; }");
tryItOut("if(*) continue ;");
tryItOut("L: {'haha'.split }");
tryItOut("gc() const constructor;");
tryItOut("if(export __proto__) { if ((this.zzz.zzz)) {/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x/>) const __count__; } while(false <<= #1=[#1#]); }} else (true);");
tryItOut("if(((new Function(\"new Function\"))() / (constructor = __count__))) { if (this) /*infloop*/for(__count__ = *; <y><z/></y>; -0) throw 5.0000000000000000000000;} else yield <><x><y/></x></>;");
tryItOut("while((((<><xxx {__count__}={(*::* ? true : __count__)} /></>).watch)()) && 0){__noSuchMethod__;L: {let __iterator__ = true, __noSuchMethod__; } }");
tryItOut("let (constructor = *::*) { let (__parent__, prototype = <y><z/></y>) { yield  /x/g ; }\nexport __iterator__; }");
tryItOut("/*infloop*/for(\nwindow ? @foo instanceof __parent__ : (<x/> instanceof <y><z/></y>); __iterator__ = yyy; (new eval())) {try { return; } finally { let(__noSuchMethod__) { with({}) {  }  } window >> window, (gc)() }");
tryItOut("M:with({__proto__: (({}) ? [15,16,17,18].filter((1 for (x in [])), window) : <x><y/></x>)})L: {(true); }");
tryItOut("with({}) (prop);");
tryItOut("/*infloop*/for(let __parent__; eval(\"export *\", [11,12,13,14].some); ({a2:z2})((undefined.watch(\"__proto__\", new Function)), (({__proto__ getter: gc, __proto__\f setter: function(y) { yield y; return  /x/g ;; yield y; } })))) {/*for..in*/for(let [__proto__, __iterator__] = (p={}, (p.z = __count__)()) in  '' ) {const __noSuchMethod__ = 0/0;return; } }");
tryItOut("if((__noSuchMethod__) = <y><z/></y>) { if \n(String()) {\fconst prop = this, __proto__ =  \"\" ; } else {throw prototype; }}");
tryItOut("/*infloop*/for(const [({ __noSuchMethod__: [prototype, , prototype, ], prototype: ({ __proto__: constructor }) }), , , , []] = (p={}, (p.z = ({__count__ getter: 'haha'.split, constructor: this }))()); #3={a:#3#}; (this.__defineSetter__(\"__proto__\", eval)) for (__count__. __iterator__ in <x><y/></x>)) do ; while((prototype) && 0);");
tryItOut("try { for(let y in []); } finally { return; } ");
tryItOut("with({}) { for(let y in [5,6,7,8]) let(__proto__ = __noSuchMethod__) ((function(){(<><><y/></></>);})()); } ");
tryItOut("if(__noSuchMethod__ = undefined) { if ((\n[1,,])) {(new (prototype)()); } else return;}");
tryItOut("M:if((window.eval(<x/>) .@ true <<= (( /x/g )())).unwatch(\"__iterator__\")) { if (((({ set yield(__noSuchMethod__, __parent__)__count__,  set prototype(__count__) { yield __iterator__; }  })).@foo) for (__count__ in __iterator__.constructor)) {<><x><y/></x></>;export *; }} else var __iterator__, prototype;");
tryItOut("{/*for..in*/M:for(__noSuchMethod__ in (null)) yield  '' ; }");
tryItOut("return (((new ((__parent__ =  /x/g ))((prop.(RegExp(*))), (eval(\"(__proto__ = window)\", (0).call(<x/>, <><x><y/></x></>))))))(__count__++));L:do while((( \"\" [window])) && 0)(__noSuchMethod__).watch while((({prop: ( /x/ .unwatch(\"function::each\") > prototype = <><x><y/></x></> for each (__iterator__ in __noSuchMethod__)), prop getter: prototype })) && 0);");
tryItOut("L:switch(eval(\"var __proto__ = <x><y/></x>, __noSuchMethod__;\\nL: gc()\\n\", ([1,2,3,4].map).call( /x/g , ))) { default:  const __noSuchMethod__;case ((function(q) { return q; }).call((eval(\"yield;\", return;)), )): case [11,12,13,14].filter: L: {constructor; }break;  }");
tryItOut("__count__ = (-0);\nbreak L;\n");
tryItOut("let(({ prototype: constructor, function::prototype: ({ __iterator__: __proto__, __parent__: __parent__ }) }), ({ prop: constructor, __noSuchMethod__: __noSuchMethod__ })) { break L;");
tryItOut(" const __noSuchMethod__;");
tryItOut("throw <x><y/></x>");
tryItOut("__parent__ = __parent__;");
tryItOut("M:with({__count__: this})let __count__, __count__ = window;");
tryItOut("if( { yield function  __noSuchMethod__ (__iterator__, constructor) { return 4. }  }  = (prop) for (constructor(new (prototype: null)(<x><y/></x>)) in <><x><y/></x></>) for each (constructor in <y><z/></y>) if (this).watch(\"__count__\", (new Function(\"gc\")))) { if ([15,16,17,18].some(Math.sin, <y><z/></y>)) {yield; } else {yyyL: window; }}");
tryItOut("if((yield <y><z/></y>)) { if (<x><y/></x> in __proto__) continue ; else <><x><y/></x></>;}");
tryItOut("/*infloop*/do /*for..in*/L:for(var function::prop in (((1 for (x in [])))(gc())))export __parent__; while\f(new <><x><y/></x></>(4.));");
tryItOut("L:with([this].some(new Function)){var __iterator__ = <x/>, constructor;export __parent__; }");
tryItOut("switch(this.__defineSetter__(\"constructor\", ({}).hasOwnProperty).yoyo(delete undefined &= (this)(this) = )) { case 0: break; default: break; case let (__parent__)  '' : break;  }");
tryItOut("L:if((-1)) {} else return;L: default: {}yield;case 8: case  /x/g : break; case 1.3: break; case __count__: {}");
tryItOut("(<><x><y/><\f/x></>); const constructor;");
tryItOut("/*infloop*/for(var ({ prop: __parent__, __count__: __noSuchMethod__ }) = \n[[]]; null.watch(\"constructor\", function  constructor (__noSuchMethod__) { gc() } ) >> (__noSuchMethod__.(#3={a:#3#})); [,].__defineGetter__(\"function::__parent__\", Math.sin)) {{/*for..in*/for(let __iterator__ in ((new Function)(* = <><x><y/></x></>))){;export *; } }while((let (__iterator__ = @foo, __count__ = <><x><y/></x></>) window) && 0){{}\n{} } }");
tryItOut("{prop, yield;return this; }");
tryItOut("if(eval(\"new  /x/ (true)\", <x><y/></x>)) { if (<x><y/></x>.watch(\"__parent__\", (null).__defineSetter__)) {;//h\nconstructor; }} else export *;");
tryItOut("/*infloop*/for((prop in false); prototype.constructor; (uneval(window))) \r{yield; }");
tryItOut("/*for..in*/for([__parent__, __noSuchMethod__] = prop.(this) in window) /*infloop*/do <><x><y/></x></> while( /x/g );");
tryItOut("throw [1,,];");
tryItOut("let (__count__) { (new Function(\"prototype = <x><y/></x>, __iterator__ = window;\")) }");
tryItOut("/*for..in*/for([prototype, constructor] = constructor = prop in <><x><y/></x></>) yield;");
tryItOut("M:if((function ([y]) { })().__defineGetter__(\"constructor\", <><x><y/></x></>)) { if (undefined) (*); else {export *; const __noSuchMethod__;yield; }}");
tryItOut("L:with({__proto__: (3)()}){export *;/*infloop*/for(const __parent__; ((((new Function(\"yield;\"))).apply).call(<><x><y/></x></>, continue L;, *) .@*:: (null\n)); ([(__proto__ = <><x><y/></x></>)__count__]).__count__ = typeof (++true)) <x><y/></x>; }");
tryItOut("{if(<y><z/></y>) export delete; else export *;var __proto__, __count__; }");
tryItOut("while((function(id) { return id }) && 0){export *;/*infloop*/L:for(var __count__; *.hasOwnProperty(\"__parent__\"); <><x><y/></x></> %= -0) {;return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (__parent__ = <x/>.yoyo(<x><y/></x>))) ");
tryItOut("/*infloop*/\ffor(const __noSuchMethod__; (@foo > window)(\n'fafafa'.replace(/a/g, /a/gi), this.__lookupSetter__(\"constructor\")); (([1,2,3,4].slice)(@foo.__defineGetter__(\"__count__\", eval)))) {function  __parent__ () { yield  /x/  } yield; }");
tryItOut("M:while((({ prop: prop }) = @foo.@*) && 0)export *;");
tryItOut("{/*for..in*/for(__noSuchMethod__ in (((null).call)(this))){__iterator__ =  /x/ ;export __proto__; } }");
tryItOut("throw <x><y/></x>;");
tryItOut("L:if(__iterator__ = <x/> == __parent__ = <><x><y/></x></>) {__iterator__\nlet __count__; }");
tryItOut("with({[[, [[, __count__], ({ prototype: __count__ }), ], ({ __proto__: ({ __parent__: __count__ }), __iterator__: prototype }), ,  '' .hasOwnProperty(\"__count__\")], , ]: ((#1=__proto__ ({yield: <><x><y/></x></>.propertyIsEnumerable(\"__proto__\")})')})var prototype = *::*;");
tryItOut(" for (constructor in function::__parent__)");
tryItOut("/*for..in*/for([15,16,17,18].map(/a/gi, []).prototype in (-1) = false) {with({prototype: <y><z/></y>})return; } const __noSuchMethod__;");
tryItOut("with({constructor: *})return  /x/g ;");
tryItOut("/*for..in*/for(__count__ in ((eval)([,].__defineSetter__(\"prototype\", <y><z/></y>))))L: .2\nL:if(([])(<y><z/></y>)) <y><z/></y>; else {yield [,];gc() }");
tryItOut("if(constructor.__parent__) __count__, __iterator__ = <><x><y/></x></>; else  if ((false.*)()) export *;");
tryItOut("with(#2=[<><bbb xmlns:ccc=\"3.141592653589793\"><ccc:eee></ccc:eee></bbb></>])return;");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/for(const __iterator__ in ((Function)(<x><y/></x>))){throw <><x><y/></x></>;__count__ }");
tryItOut("/*for..in*/L:for(let prop in __count__) {gc()return; }");
tryItOut("/*infloop*/for(let [, __count__, __parent__, <x><y/></x>.prototype, __iterator__] = (<x/> .. <y><z/></y>); \f'fafafa'.replace(/a/g, /a/gi); (<y><z/></y>.__defineGetter__(\"constructor\", <><x><y/></x></>))) {const __iterator__, __proto__ = arguments;\ncontinue L;\n }");
tryItOut("/*infloop*/for(delete <y><z/></y>.__proto__; (-1); this.zzz.zzz) L: yield;");
tryItOut("do {continue L; } while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0);");
