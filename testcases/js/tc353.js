tryItOut("{throw null; }");
tryItOut("let (__count__ = (this.constructor), __noSuchMethod__) { {const __parent__, __iterator__ = function(id) { return id }; } }");
tryItOut("/*infloop*///h\nfor(const  for (prop in ({__iterator__ setter: <x><y/></x> })) = *.__lookupGetter__(\"__iterator__\"); (prop.__noSuchMethod__ = this.__defineGetter__(\"__parent__\", *::*) for each (__noSuchMethod__ in (<><x><y/></x></> >>>=<x/>).watch(\"__parent__\", (<><x><y/></x></>).call)) for each (__proto__ in ((( '' )[true]).yoyo(<y><z/></y>))) for each (constructor in ({function::function::__count__: <y><z/></y> })) for (prop in <x><y/></x>(window)));  /x/g ) if((prop\n)) { if ((this.__defineSetter__(\"__count__\", gc))) L: throw undefined; else return;}");
tryItOut("if((window >> <y><z/></y>).valueOf(\"number\")) gc() else __noSuchMethod__;");
tryItOut("let(__iterator__) { const __parent__ =  '' ;");
tryItOut("{{} }");
tryItOut("{( /x/g );export constructor;\t }");
tryItOut("with((yield prototype).__defineGetter__(\"prototype\", prop))/a/gi");
tryItOut("/*for..in*/for(const (new (new Function)())((yield  '' )) in (('haha'.split)(undefined))){yield }");
tryItOut("Function\nbreak L;\n");
tryItOut("return\n");
tryItOut("/*for..in*/M:for(__parent__ = __iterator__ in yield <><x><y/></x></>.@foo) {yield; }");
tryItOut("return");
tryItOut("if((<x/> == true)) {(__count__); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let #3={a:#3#} ? (eval(\"{}\", ({}))) : (( /x/ ).__defineSetter__).call( '' , ) in new  { yield ({prop: <x><y/></x> }) } (<x><y/></x>, false)) {gc()\nthrow  /x/g ; }");
tryItOut("(true); const __parent__;");
tryItOut("return (function  prop () { yield; } )(({a1:1}));");
tryItOut("return  '' \n;");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/for(var __noSuchMethod__; ({__iterator__: <><x><y/></x></> }); __proto__.__count__ = [__noSuchMethod__].map(function  prop (__noSuchMethod__) { yield; } )) {/*infloop*/do let __count__ = __parent__, prototype; while(*); }");
tryItOut("with({__proto__: __proto__.prop <<= ((({prototype: function(q) { return q; } })))[(4.++) for (__count__ in __iterator__)]})/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (<x><y/></x>)[3.141592653589793]) {L: {Math.sin } }");
tryItOut("with({__parent__: __iterator__(<x/>)}){{}\tconst __parent__, __noSuchMethod__; }");
tryItOut("with({__count__: [this.\n__defineSetter__(\"__noSuchMethod__\", 'haha'.split)].map((1 for (x in [])))}){yield <x/>\n<y><z/></y>; }");
tryItOut("if((({__noSuchMethod__: ({__iterator__: <><x><y/></x></>})}))(true.__lookupGetter__(\"__noSuchMethod__\"))) { if (4. in ({})\n .@*:: this !== false) { }} else /*for..in*/L:for(var __parent__ = __count__ = [,,] in __parent__) { }");
tryItOut("return; const __parent__;with((*.eval(*::*)));");
tryItOut("let (prop, constructor = new (function (__proto__) { return * } )()) { return constructor; }");
tryItOut("M:if((([,,z1] for (__parent__ in *)))) {yield [window != #2=<x/>].filter(typeof <y><z/></y>); }");
tryItOut("/*for..in*/L:for(const  in  /x/g ) {continue ; }");
tryItOut("*::*;");
tryItOut("/*for..in*/for(let (({ get (__noSuchMethod__.prototype getter= <y><z/></y>)() { gc() } ,  get prototype(__proto__) { yield (prop = <><x><y/></x></>) }  }))(__count__ =  '' ) in new <y><z/></y>()) with({}) this.zzz.zzz;");
tryItOut("this");
tryItOut("export __proto__\n");
tryItOut("/*infloop*/while(.){break L; }");
tryItOut("M:with((@foo ? <x/> : <y><z/></y>)){var __noSuchMethod__, __noSuchMethod__ = window;throw  \"\" ; }");
tryItOut("/*for..in*/L:for(__count__ in ) ");
tryItOut("switch(<xxx>{__noSuchMethod__}</xxx>.((function::__count__.prototype))) { case 3: break; /*infloop*/for(this; window; <><x><y/></x></>) {{} }break; case (this.__lookupSetter__(\"constructor\")): continue ;break; break; break; case 7: break; L: /a/gibreak; break; {}break;  }");
tryItOut("if(\n(__count__ = <x><y/></x>.prop)) return; else switch(__proto__ = <x/>) { default: (this); }");
tryItOut("if(__iterator__ = <x/>) {gc()continue L; } else this");
tryItOut("__iterator__;");
tryItOut("/*infloop*/while(__iterator__+=eval(\"({let: function(id) { return id } })\", __iterator__.(__noSuchMethod__)))/*for..in*/M:for(let __iterator__ in ((function (prop, prototype) { return this } )(null))){var __proto__ = __proto__, __proto__ = 3.141592653589793; }");
tryItOut("do M:switch(--eval(\" /x/ \",  /x/g )) { default: break; throw this;break; break; case __parent__ = __noSuchMethod__: /*infloop*/for([,,]; [1]; *::*) {export __parent__; } } while((({prototype: Exception(@foo, @foo),  get prototype __count__ (function::__proto__) { return prop%=*::* }  })) && 0);");
tryItOut("if(__proto__.prototype+=({})) {if((*)(<x/>, <><x><y/></x></>)) { if (__parent__.propertyIsEnumerable(\"__count__\")) return false;} else {export *; } } else  if (<><zzz>window.__defineGetter__(\"constructor\", (<x><y/></x>).__defineSetter__)++</zzz></>) {gc() } else let __count__ = *, __parent__;");
tryItOut("L:if((({ constructor: ({ __count__: __parent__ = null, constructor: __parent__ }), constructor: __parent__.prototype }) = ({ __parent__: ({ prototype: [, ({ __iterator__: __proto__ }), ({ setter: __parent__ }), ({ \n__count__: constructor })], __iterator__: ({ constructor: ({ __iterator__: function::__iterator__, constructor: constructor }), /*\n*/__parent__: [prototype, , __iterator__, , ] }) }), prototype: [[, , [, , , prop, __proto__]], ({ __parent__: __noSuchMethod__, __proto__: [, , constructor, ] }), __parent__, , ] }))) { if (!#0=[try {  } finally { __parent__ = <y><z/></y>; } ].unwatch(\"prop\").isPrototypeOf(void ({__noSuchMethod__: [11,12,13,14].some})) *= __count__ != prototype.(prop) ? ++<x><y/></x> : 4..__lookupSetter__(\"__noSuchMethod__\")) {gc()/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in __proto__) {export prototype; } }} else while((constructor) && 0){yield; }");
tryItOut("/*infloop*/M:for(( /* Comment */window >>= (Exception()))(); (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((<x/>)())); ( '' .watch(\"__count__\", ({}).hasOwnProperty))) {return; }\nconst this;");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = --__count__ in <><x><y/></x></> -= *::*) {continue M; }");
tryItOut("if(new ( /x/g )(this, prop)\n/*) { if (\nconstructor = <x><y/></x>yield; else {; } constructor: (*::*.__lookupSetter__(\"prop\"))");
tryItOut("switch((({prop: [default:  = ({a2:z2})],  set function::__iterator__/*\n*/(__proto__) { yield this }  }))) { default: return @foo;{{}export prototype; }\nyield eval(\"/*infloop*/for(const __noSuchMethod__ = <><x><y/></x></>; ({a1:1}); <><x><y/></x></>) {export *; }\",  \"\"  <= <><x><y/></x></>);\nbreak; case 7: break; break ;break; case (__noSuchMethod__.(constructor = null).throw(String(([[1]] @ <><x><y/></x></>)))): return;/*infloop*/for(__noSuchMethod__.throw(<x><y/></x>); constructor|=function(id) { return id }; prop) <y><z/></y>M:switch(undefined) { default: gc()break;  }case 8: if(new Number()) { if (( /x/g )) yield; else {let __proto__ =  \"\" ; }}break; case null['prototype']: break; case 9: case (let (__proto__, prop) false): yield; }");
tryItOut("if(((*::*).hasOwnProperty(\"(RegExp(try { yield; } finally { return; } , <y><z/></y>)), #1=[#1#].isPrototypeOf(yield <x/>)\"))) { if ((__count__ = (new (__parent__).__defineSetter__(<y><z/></y>, [1,,]))) ? let (__proto__) (__parent__.__count__ getter= constructor) : __count__ = __parent__ = window) {throw <x/>;eval } else {/*for..in*/for(var __iterator__ in  \"\" ) {__iterator__, __noSuchMethod__; } }}");
tryItOut("/*infloop*/for(var __count__; prototype.__count__ getter= gc; (1e+81 if ([[]]))) {; }");
tryItOut("return;");
tryItOut("let (constructor) { let __proto__ = window, __count__ = window; }");
tryItOut("with({}) let(({ __noSuchMethod__: constructor, __noSuchMethod__: __count__ }) = __parent__ ? function(id) { return id } : __noSuchMethod__, __parent__ = window) ((function(){for(let y in [5,6,7,8]) return <x><y/></x>;})());");
tryItOut("let (constructor =  \"\" , __count__) { ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in function(id) { return id }) {return;{} }");
tryItOut("(-3/0);yield false;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(const (undefined)(arguments) in ((eval)([11,12,13,14].map)))do const -1, prop; while(((eval(\"[z1]\", (-1)))) && 0);");
tryItOut("/*for..in*/for(let __proto__ in ((((<employee id=\"1\"><name>Joe</name><age>20</age></employee>).apply).apply)(<y><z/></y> for (__count__ in  \"\" )))){{/*yield;gc() } }");
tryItOut("/*for..in*/for(var (constructor)(undefined) in (('fafafa'.replace(/a/g, (1 for (x in []))))(__proto__ = (((1 for (x in []))).call)(*::*))))/*for..in*/for(const [__parent__, constructor] = <x><y/></x> in 1.3) {const constructor;(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(var constructor; this.yoyo(__count__); (p={}, (p.z = undefined)())) {export prototype;throw (-1); }");
tryItOut("{with({constructor: constructor}){continue M; } }");
tryItOut("/*infloop*/for(<x/>; <x><y/></x>; \t<><x><y/></x></>) yield 1.3;");
tryItOut("/*infloop*/for(let prop; <y><z/></y>; new Error(false, 4.).throw((new ((new Function(\"throw  /x/ ;\")))(3.141592653589793, <x><y/></x>) &= (__iterator__ =  \"\" )))) {export __iterator__;{} }");
tryItOut("export *;");
tryItOut("return  /x/ ;(window/*);");
tryItOut("throw StopIteration;");
tryItOut("with(function::__parent__)[1,2,3,4].map");
tryItOut("{break ; }");
tryItOut("/*for..in*/for(var __iterator__ = (prop.__lookupGetter__(\"__noSuchMethod__\")) in 'haha'.split()) ;");
tryItOut("L: {return ({}); }");
tryItOut("gc()L: {/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in *::*) (*); }");
tryItOut("if(<xxx {function::constructor}={__proto__} />) {let __proto__ = null; } else {;; }");
tryItOut("{var __parent__ =  /x/ , constructor; }");
tryItOut("yield #3={a:#3#}");
tryItOut("/*infloop*/do if((({}).hasOwnProperty)(*::*, false)) {const __count__ = 0/0;yield; } else  if (({ set __noSuchMethod__() { return  /x/  }  }))  while((this)(<><x><y/></x></>\t));");
tryItOut("export *; const __proto__;");
tryItOut("yield\nexport prototype;");
tryItOut("with({__noSuchMethod__: <x><y/></x>.((function ([y]) { })())}){prototype = constructor, prototype = #1#; }");
tryItOut("if(<x/>) { if ((constructor = ((Math.pow).call))) let __iterator__, prototype;} else const __iterator__ = #1=[#1#];");
tryItOut("__proto__ = __count__;");
tryItOut("\n/*infloop*/for(const prototype = <x/>; (<><x><y/></x><)/>; [,,]) function(y) { yield y; return;; yield y; }");
tryItOut("/*infloop*/do {L:do {var __proto__ = @foo, __proto__ = undefined;var prototype = []; } while(([1]) && 0);yield; } while( /x/g .isPrototypeOf(this) *= <x><y/></x>.(<x><y/></x>));");
tryItOut("if(constructor) {(*); } else  if (function::__parent__) { {  } yield *::* .@*:: <x/>; } else /*for..in*/for(var __noSuchMethod__ in ((eval)(1e+81))){<x><\fy/></x>; }");
tryItOut("let(({ constructor: set, constructor: ({ constructor: constructor, prop: __count__ }) }) = [1,2,3,4].slice, __noSuchMethod__ = null) ((function(){throw __iterator__;})());");
tryItOut("L:if((<x><y/></x> != 1e+81)) {gc()throw @foo; } else  if (({ set true(constructor, __parent__)[,,], (<y><z/></y>).watch })) {__iterator__ }");
tryItOut("/*infloop*/for(const prototype; (uneval(__proto__.prop = this)).__lookupGetter__(\"x::constructor\"); eval(\"__proto__ = <><x><y/></x></>, constructor = *;\", *)) break ;");
tryItOut("L:if(<x><y/></x>) {return 1.2e3;var __proto__ = window; }");
tryItOut("/*infloop*/L:while(new __iterator__(this, this))^");
tryItOut("if((<x><y/></x>.( '' ))) { if (__iterator__.__noSuchMethod__ = undefined >> function(id) { return id }) let __iterator__ = prop;\n(__noSuchMethod__).__defineSetter__\n else export true;}");
tryItOut("M:while((<><xxx>{__noSuchMethod__}</xxx></>) && 0)throw [1];");
tryItOut("var __parent__ =  /x/g , prototype = <><x><y/></x></>;yield this; const __parent__;");
tryItOut("if(eval(\"(new Array())\", eval(\"0x99\", <x><y/></x>).prototype = \n[window for (__iterator__ in undefined)])) {} else  if (((<><x><y/></x></> in []\n) ^ ([this]))) {return;/*infloop*/for(const __iterator__ = ({__count__ setter: Math.pow }); __noSuchMethod__--; __iterator__ = <x/>) {export *; } }");
tryItOut("let __parent__ = <x/>;");
tryItOut("{{export prop; }return <y><z/></y>; }");
tryItOut("if(delete ()) /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in 1.2e3) {yield *; } else  if ((__parent__ = <x><y/></x>).__defineSetter__(\"constructor\", (new Function(\"return;\")))) return; else {let __iterator__ = <x/>; }");
tryItOut("if(__count__) \f{(this);export *; }");
tryItOut("/*infloop*/while(Function)prop");
tryItOut("if(this.__defineSetter__(\"__iterator__\", new Function)) {/*infloop*/for(({ __count__: __parent__, __parent__: __parent__ }) = prop = window; __parent__ = <><x><y/></x></>; <x><y/></x><ccc:ddd><!--yy--></ccc:ddd> =  /x/g ) return;/*infloop*/L:for(prop; *::*; prop) {(<x/>);gc() } } else {break ; }");
tryItOut("/*for..in*/for((x::__noSuchMethod__-=undefined\n).prototype in  \"\"  &&  '' ) {\f{}\t }");
tryItOut("with({}) for(let y in []);");
tryItOut("{export *\n;(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(prototype = (yield <x/> != 0/0) in 5.0000000000000000000000) {(<><x><y/></x></>); }");
tryItOut("var __noSuchMethod__");
tryItOut("return;");
tryItOut("<><x><y/></x></>;");
tryItOut("return;");
tryItOut("if([1]) /*\n*/{export *; } else  if (window) yield [z1,,]; else ( '' )\n");
tryItOut("if(3/0) {(<x><y/></x>);yield 1e4; } else  if ( \"\" ) { }");
tryItOut("/*infloop*/for((<x><y/></x>).__defineSetter__(); ({ set __proto__ __parent__ (__count__) { yield __iterator__ = 1e+81 }  }); <><>(-0).prototype</></>) {if([z1]) yield  /x/ ; }");
tryItOut("(prototype);");
tryItOut("while((__parent__) && 0){let __iterator__, constructor = __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(\f(yield *::*.propertyIsEnumerable(\"prop\")); [15,16,17,18].sort(Function, this); (this.zzz.zzz) <<=  /x/g [3.141592653589793]) {/*for..in*/for(const [__iterator__, __parent__] = <x><y/></x> in __count__) gc() }");
tryItOut("with(prop = 0x99){yield __iterator__;; }");
tryItOut("let (__iterator__ = #1=[#1#] !== __count__, prototype = (#1=({__iterator__: @foo}))) { Function }");
tryItOut("do {with(__proto__ = (<><x><y/></x></> < [[1]])){return ;<x><y/></x> } } while(([([[,,z1] - <y><z/></y>].sort(({}).__lookupGetter__)) for \t(().__parent__ in (this.__defineSetter__(\"constructor\", (@foo).watch))) if (__noSuchMethod__++)]) && 0);");
tryItOut("\r");
tryItOut("/*infloop*/for(let prop; <x><y/></x>.__defineGetter__(\"prop\", /a/gi); @foo | ((window))) ;");
tryItOut("/*for..in*/for(const * in __proto__) {break ; }");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("/*for..in*/for(__count__ in (((-1))((yield (uneval(new (null)())))))){yield __proto__++; }");
tryItOut("if((new Function())) continue ;");
tryItOut("var prop = <><x><y/></\nx></>, __proto__;\n\n");
tryItOut("/*for..in*/L:for(const [__iterator__, __parent__] = [1,2,3,4].slice in <y><z/></y>) continue L;");
tryItOut("/*infloop*/do {export __iterator__; } while(.__lookupSetter__(\"__parent__\").watch(\"__noSuchMethod__\", /a/gi));");
tryItOut("let (({ prop: ({ __noSuchMethod__: [({ __proto__: constructor, prop: ({ prototype: __count__ }) }), , , ], prototype: __count__ }), __iterator__.__proto__ = 3: [] }) = void null.yoyo((-1))) { M:if(__iterator__ = [].map(function  __parent__ (prop, prop) { return window } )) { if (this) {{} } else {continue ; }} }");
tryItOut("gc()");
tryItOut("if((yield  '' )) return; else  if ((new 'haha'.split(<y><z/></y>, <><x><y/></x></>).eval(([ /x/g ])))) {(#1#);throw false; } else {{} }");
tryItOut("{/*infloop*/for(__proto__;  /x/g  , <><x><y/></x></>; (this.__defineGetter__(\"__count__\", 0x99))) \tlet __iterator__ = <><x><y/></x></>, prototype = window;function  setter (__iterator__)this }");
tryItOut("/*infloop*/do /*for..in*/for([constructor, constructor] = (~<y><z/></y>) in <x><y/></x>[-0]) {return; } while(1e81.unwatch(\"__parent__\").propertyIsEnumerable(\"constructor\"));");
tryItOut("/*infloop*/while(((<xxx {__iterator__}={(<x><y/></x> ? *::* : [z1,,])} />.(__parent__ = ({}).yoyo(*::*.watch(\"__count__\", function (__parent__) { yield <><x><y/></x></> } ))))\t.__defineSetter__(\"__parent__\", /a/gi))){/*for..in*/for(var __noSuchMethod__ = <x/> in  \"\" ) gc()\n__noSuchMethod__ }");
tryItOut("M:if(__iterator__ = (#0=({__count__: +[]}))) continue L; else  if ((yield 1e-81).@foo) {break ;gc() const prop; } else ");
tryItOut("L:if(<x><y/></x>) { if (<><x><y/></x></>) {;yield []; } else {export *; }}");
tryItOut("L: {while((arguments) && 0)const __proto__ = {};return <x><y/></x>; }");
tryItOut("\n");
tryItOut("{M:with({__parent__: <>throw <><x><y/></x></>;</>.__proto__}){ } }");
tryItOut("__proto__ = __count__;");
tryItOut("with({prop: [11,12,13,14].map}){do /*\n*/;\n__noSuchMethod__;\n while((typeof (Date([z1], <><x><y/></x></>))) && 0);{} }");
tryItOut("M:if([] = (yield __proto__)) {;function (constructor, constructor) { yield __proto__ }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(\tvar __noSuchMethod__ in  /x/ ) {__count__: windowexport __count__; }");
tryItOut("if(*) {return;gc() } else  if (*::*) {yield __iterator__; } else yield;");
tryItOut("return;");
tryItOut("{4.\n }");
tryItOut("window");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*/M:for(var prototype in ((Function)([[]]))){if(undefined ? 1.3 : <x><y/></x>) {const __noSuchMethod__ = 1e4; } else  if (prop = undefined) {; } else {;let __iterator__ =  /x/ , prop; } }");
tryItOut("let (__proto__ = [z1], constructor = <x><y/></x>) { yield; }");
tryItOut("/*for..in*/for(var prop in function  prop (constructor)<x><y/></x>.isPrototypeOf(<x><y/></x>)) {continue \n }");
tryItOut("with({prop: constructor|=({ __count__: function::__parent__ }) = (.2)}){yield undefined;__count__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in prototype) /*infloop*/for(*::*; @foo; window) (*::*);");
tryItOut("prop");
tryItOut("/*for..in*/for(__parent__ = constructor = * in @foo\n) {(constructor); }");
tryItOut("/*for..in*/L:for(let (prop.__proto__) in (('haha'.split)(('fafafa'.replace(/a/g, ({}).hasOwnProperty))))){__iterator__, __proto__let (__noSuchMethod__, x::prototype) {  } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let [] = ({prop: 1e-81.unwatch(\" \\\"\\\" \"), __iterator__: prop < 1.2e3 }); ([] = ({ <x><y/></x>['prop']: <x/>, __count__: ({ __iterator__: __parent__, let: __count__ }) })); prop.__iterator__) /*infloop*/do {throw <><x><y/></x></>; } while(1.3);");
tryItOut("{(1 for (x in []))let prop = this, prototype =  \"\" ; }");
tryItOut("return; const __noSuchMethod__;");
tryItOut("M:switch([11,12,13,14].filter = (({ : __noSuchMethod__, __iterator__: __proto__ }))) { default: break; case  '' : __parent__ = *::*;case 2: M:do var __parent__ = <><x><y/></x></>, __count__; while((window) && 0);break; break; case 6: return;case (null >>>=<><x><y/></x></>): case 6:  }");
tryItOut("prop");
tryItOut("if(<><bbb xmlns:ccc=\".2\"><ccc:eee></ccc:eee></bbb></>) { if (__count__.(arguments)) {return;{} }} else yield undefined;");
tryItOut("L:if((this.__defineGetter__(\"prop\", (this in #1=[#1#])))) let function::prop, __noSuchMethod__/; else  if (([<><x><y/></x></> if ( \"\" )])) {return;{} } else {L:do {{}continue M; } while(((prop.__parent__ getter= 1e4)) && 0); }");
tryItOut("throw [1]; const prototype;");
tryItOut("/*for..in*/M:for(//h\nconst __parent__ = 0 in <><x><y/></x></>) {break ; }");
tryItOut(" \"\" ;");
tryItOut("/*for..in*/for(const (<ccc:ddd><!--yy--></ccc:ddd>)['constructor'] in (((({ constructor: ({ __noSuchMethod__: prop, __proto__: yield }), __noSuchMethod__: [([), , ] }) = ({ constructor: prototype, constructor: prototype }))\f)(__parent__.constructor setter= (<x><y/></x>).call(\f__iterator__ = <x><y/></x>, ( '' .prototype = 1e81), 'haha'.split)))){;L: return; }");
tryItOut("if(__parent__.__defineGetter__(\"__proto__\",  /x/ ).hasOwnProperty(\"prototype\")) {__count__;__count__ = *::*; } else let __noSuchMethod__, __proto__ = __iterator__;");
tryItOut("let __count__ = false;\nexport *;\n");
tryItOut("with(<y><z/></y>){return; }");
tryItOut("with({__iterator__: #1=[#1#]}){;gc() }");
tryItOut("__proto__ = <><x><y/></x></>;\n __proto__ = this.__noSuchMethod__ =  ''  throw null;\n");
tryItOut("/*for..in*/L:for([__iterator__, __count__] = (p={}, (p.z = (function::__noSuchMethod__ for each (__proto__ in  /x/ )))()) in new this({}, <y><z/></y>)) {(function::prop); }");
tryItOut("/*infloop*/M:for((((yield null)) != <>(<x><y/></x>.__defineSetter__(\"__iterator__\", null))</>); <> </>.(({__count__:  \"\" ,  set prototype prototype (__noSuchMethod__)<><x><y/></x></> }) , <x><y/></x>.unwatch(\"__proto__\") % prop = [1,,]); [].unwatch(\"__iterator__\")) {/*for..in*/for([__proto__, constructor] = *::*\n in  /x/g ) {return;break M; } }");
tryItOut("/*infloop*/for(let ({ __iterator__: prop }) = <y><z/></y> .@*:: false; __parent__ = <x><y/></x> ? ~@foo : [15,16,17,18].map(function(y) { yield y; throw 1.2e3;; yield y; }, <y><z/></y>); (-1)) {; } const __noSuchMethod__;");
tryItOut("while((function::prototype = let (__proto__, __iterator__) [[]].valueOf(\"number\")) && 0)break ;");
tryItOut("M:with({__parent__: (({a2:z2})(true))}){break ; }");
tryItOut("M:if(new (<x/>)((-1), <x><y/></x>)) {return  /x/ ; } else [1];");
tryItOut("return <x><y/></x>;");
tryItOut("if( /x/g .isPrototypeOf(null)) {prototype = -0, __proto__;export *;//h\n }");
tryItOut("/*for..in*/for(var __parent__ in (((*).__defineSetter__)(\n@foo))){(#3={a:#3#})\t;__parent__ = true, function::__count__ = __count__; }\n");
tryItOut("(1 for (x in []))\n");
tryItOut("yield (new Error());");
tryItOut("/*infloop*/for(var __parent__; {function  __iterator__ (__parent__, constructor) { yield <y><z/></y> }  }; @foo) gc()");
tryItOut("{\freturn;/*infloop*/while(window){yield  '' ; } }");
tryItOut("with(__iterator__ / .2){L: __iterator__ =  /x/g ; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <x><y/></x>) {(({a1:1})); }");
tryItOut("if((( \"\"  for each (__noSuchMethod__ in <x><y/></x>)))(<x/> +  /x/ , 0x99)) { if (__parent__ , *) yield __parent__\nexport prop;} else {{return  \"\" ;(0x99); }\n; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = [1,2,3,4].slice in #1=[#1#]) <xxx {__parent__}={<x><y/></x>} />");
tryItOut("L:with(constructor = (__noSuchMethod__(false)|=(-1))){if(*) {const prop = *; }/*for..in*/for(__iterator__ in ((((__iterator__ = __parent__)).watch)((<x><y/></x>)))){return <><x><y/></x></>; } }");
tryItOut("if(window.__defineGetter__(\"__count__\", function  __iterator__ () { yield @foo } )) {if(<><x><y/></x></>)  else switch((let (__proto__ = -1) (/a/gi)())) { default: export prop;break; break; case ( /x/  <  '' ): case 5: case 4: throw true; } } else  if () yield; else return;");
tryItOut("if(this)  else  if (0) break M; else {throw  '' ; }");
tryItOut("/*infloop*/L:for(__proto__ = [false]; ((1 for (x in [])))(); (constructor = *::*)) function  __iterator__ (prototype, __noSuchMethod__) { yield; } ");
tryItOut("with(<x><y/></x>){throw @foo; }");
tryItOut("/*infloop*/L:for(var __count__; this; ([(function ([y]) { })().__count__].sort('haha'.split))) if(#2=({__parent__: this})) { if ((<x><y/></x>)[*]) throw <><x><y/></x></>;} else {let prop = window;__count__, __parent__ = -0; }");
tryItOut("let (({ __iterator__: ({ __noSuchMethod__: __noSuchMethod__, prop: prototype }) }) = (new <x/>(<><x><y/></x></>) &= ((new Function(\"return [,,z1];\"))()))) { let (prototype = *::*) { (<x><y/></x>); } }");
tryItOut("try { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) let(__proto__ = (__count__ = prototype), __parent__) { try { (0x99); } catch(__parent__ if (function(){throw null;})()) { ;\t } catch(__noSuchMethod__ if @foo) {  } catch(__proto__) { const __count__ = <x><y/></x>, __parent__; } finally { (function () { return false } ).apply }  } catch(__count__) { let(prop) ((function(){try { window } catch(delete) { __proto__ = 1e4; } })()); } ");
tryItOut("/*infloop*/do {return;/*infloop*/L:for([(<x/> %= [,,z1])].sort(function (prototype, __count__) { return @foo['__count__'] } ).*; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<x><y/></x>.(false)); <><xxx>{prop}</xxx></>) {continue M;yield; } } while(constructor);");
tryItOut("L: {(__parent__); }");
tryItOut("/*for..in*/for(let constructor([[1]]) in [1,2,3,4].map()) {yield;{{} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in  '' ) continue M;");
tryItOut("throw *;yield;");
