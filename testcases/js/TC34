
tryItOut("return;");
tryItOut("switch((((033).apply)().__iterator__ = <bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>)) { case ([prototype & (undefined//h\n++)].some(function(y) { yield y; gc(); yield y; })): <><x><y/></x></>break; default: break; case 1: M:with({prototype: (--1e4.propertyIsEnumerable(\"__parent__\"))}){do {{} } while((<x><y/></x>) && 0);return @foo; }constructor = __count__;break; <><x><y/></x></>;break; (<x><y/></x>);break; /*for..in*/for(var prototype in ((false)(__noSuchMethod__ = arguments))){continue ;yield *::*; }break; break; break; case #1=[#1#] === false: {throw *::*;\t }case __parent__: var __noSuchMethod__ = constructor, __noSuchMethod__;break;  }");
tryItOut("/*for..in*/for(let prototype in (__count__.prototype = @foo) + @foo) M:if([z1]) { if (true) (({}).__lookupGetter__).apply else {export __noSuchMethod__;yield this; }}");
tryItOut("/*infloop*/for(prototype; ((function ([y]) { })() ^ true)(window); ('fafafa'.replace(/a/g, function  __noSuchMethod__ (__noSuchMethod__).2))) if(undefined) { if ((033 ? <x/> :  /x/ )) {break ;return <><x><y/></x></>; }} else {{} }");
tryItOut("L:with({__noSuchMethod__: this}){return *; }");
tryItOut("M:if(eval(\"throw window;\", window)) {{}{({}).hasOwnProperty } }");
tryItOut("if(<y><z/></y> @ this << 5.0000000000000000000000 ^ (<><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>).valueOf\f(\"number\")[(this.__defineSetter__(\"__noSuchMethod__\", \tfunction (__iterator__, constructor) { export prop; } \f))]) {if(<><x><y/></x></>) var __iterator__; } else {if(__count__) return; else  if (1.3) yield; else {yield window; }/*for..in*/for(__noSuchMethod__ in ((function (set, function::__iterator__)this)(<y><z/></y>)))[1,2,3,4].slice }");
tryItOut("{if(({__iterator__ setter: false,  get constructor prototype () { yield <x/> }  })) ; else {undefined }throw <x><y/></x> }if(0) {yield (-1);yield; } else return\nM:if(this) export __parent__;");
tryItOut("if(new (false)\t(<><x><y/></x></>, [])) { if (window) let ;} else { }");
tryItOut("*");
tryItOut("/*for..in*/for(let __parent__.__iterator__ in <x><y/></x>) {continue L; }");
tryItOut("let (__proto__ = (new new Function(__parent__ = undefined, this)), __parent__) { with((prototype = {})){if(*) { if (<x/>) export __parent__; else yield;} } }");
tryItOut("switch(*.prop) { case window.@foo: break;  }");
tryItOut("");
tryItOut("/*infloop*/do yield; while({}.isPrototypeOf(*));");
tryItOut("{\nyield <x><y/></x>;export prototype\n/*infloop*/do true; while(constructor);/*infloop*/do  while(([<x/>].filter([1,2,3,4].slice))); }");
tryItOut("let(constructor = <><x><y/></x></>.__lookupSetter__(\"prop\")) ((function(){return;})());");
tryItOut("{throw 033;yield <x><y/></x>; }");
tryItOut("switch(__iterator__) { default:  }");
tryItOut("M:if(<y><z/></y>.valueOf(\"number\")) throw <x><y/></x>; else  if (<><x><y/></x></> ? <><x><y/></x></> : false) {gc()var __parent__, __parent__; }");
tryItOut("switch((new Iterator(__proto__))) { default: /*for..in*/for(let __noSuchMethod__ in ((0.1)(__iterator__ = )))yield;case (prototype.__noSuchMethod__).hasOwnProperty(\"prop\"): let (__proto__ = <x><y/></x>) { throw <><x><y/></x></>; }break; case (new ( /x/g )())([1e-81].some((__proto__).watch), (true << <><x><y/></x></>)): break; case 7: case 9: break; return;break; break; case <y><z/></y>.yoyo(undefined):  }");
tryItOut("[] = __noSuchMethod__;");
tryItOut("with({}) { let( = (constructor.__parent__ setter= 'haha'.split), (*::* && this)) ((function(){let(__proto__ = __count__ != <x/>, constructor = [,,]) ((function(){this.zzz.zzz;})());})()); } ");
tryItOut("if('fafafa'.replace(/a/g, (1 for (x in [])))) {export *; } else  if (()) {switch(function(id) { return id }) { default: case 9: break; case 2: break; case 2: throw *::*;;break;  } } else {gc() }");
tryItOut("/*infloop*/for(let __iterator__; <><x><y/></x></>; this) {yield [1,,];const __parent__ =  \"\" ; }");
tryItOut("switch(__proto__) { default:  }");
tryItOut("{yield <x/>;; }");
tryItOut("yield undefined");
tryItOut("/*infloop*/for(new *::* in __noSuchMethod__:  set prototype __iterator__ (__proto__) { return @foo; } .yoyo(constructor.(#3={a:#3#})//h\n)((eval(\"<></>/*\",  /x/ )), 1e81); <y><z/></y>; (yield (3.eval([1]).isPrototypeOf(eval(\"continue ;\", function(id) { return id })))) + this.zzz.zzz) gc()");
tryItOut("if(1e+81) { if (<x><y/></x><!--yy-->) yield *::*; else var prop = [z1,,];}");
tryItOut("L: with([__count__, , ] = __proto__%=window){gc()const prototype; }");
tryItOut("if(({a1:1})) gc() else  if (window) return; else {return; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, , __iterator__, ] in ((function (__noSuchMethod__, prop) { yield __parent__.(#3={a:#3#} ^ throw __iterator__;) } )((<y><z/></y>.hasOwnProperty(\"__proto__\")).valueOf(\"number\"))))if(.2) { if (function(id) { return id }) yield;} else __parent__, constructor = (function ([y]) { })();");
tryItOut("if((prop.throw(\f#1#))) { import yield; } else \freturn *::*;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("{/*infloop*/for(let __iterator__; 'fafafa'.replace(/a/g, ((Math.pow).call).apply); __parent__.__parent__ setter= Math.pow) {;M:with({__proto__: 3/0}){export function::constructor;prop; } } }");
tryItOut("/*infloop*/do {continue ; } while(prop.prototype);");
tryItOut("/*infloop*/for(let [({ __iterator__: [prop, ] })\n, ] = ((p={}, (p.z =  /x/ )())); <y><z/></y>(); ({ __count__: __iterator__ }) = ({})) {@foo, <><x><y/></x></> }");
tryItOut("if(prop) prototype else  if (<y><z/></y>) {setter = @foo, prototype = \t<x><y/></x>; }");
tryItOut("return [[1]].throw(false);");
tryItOut("/*infloop*/for([,,]; #1=[#1#] & true / <x><y/></x>; 1e4) {return; }");
tryItOut("L:while((__iterator__) && 0){/*infloop*/L:for(([]); (\n__iterator__ = <x><y/></x>[(++<x><y/></x>)].yoyo((this *= <x/>))); eval(\"__iterator__\", prototype.(false).isPrototypeOf((<><x><y/></x></>.yoyo([1]))))) continue M; }");
tryItOut("/*infloop*/for(constructor = (__noSuchMethod__ = true); case <x><y/></x>: break;  !== <x/>; [z1,,]) return this;");
tryItOut("let (__proto__ = new (var __noSuchMethod__, __noSuchMethod__;).apply(<y><z/></y>, [z1])<ccc:ddd></ccc:ddd>, [__proto__, prop, ({ prototype: [false, ] }), prototype, ({ prop: [({ __iterator__: __proto__ }), [, ({ __proto__: __noSuchMethod__, prototype: __iterator__ })], , , ({ __parent__: [, __noSuchMethod__, prototype], __count__: ({ M:if((*)(<><x><y/></x></>, <x/>)) {{}yield  /x/ ; }: __noSuchMethod__ }) })], __proto__: [] })]) { /*infloop*/for(prop; <y><z/></y>; 1e81) return @foo\nyield (function ([y]) { })(); }");
tryItOut("default: /*infloop*/while(__count__){yield;throw  '' ; }case 7: case 7: {(<x><y/></x>); }break; L:if(__parent__) { if (1e4) /*for..in*/for(var each in ((function  __iterator__ (__count__, __proto__) { yield <><x><y/></x></> <<= {} } )((function(id) { return id }.unwatch(\"__parent__\")))))if(<x/>) (*); else  if (*) {return <x><y/></x>;var prop, __iterator__; }} else {/*infloop*/while(<x/>.__lookupSetter__(\"__iterator__\"))return *;return; }break; case __parent__ = *.__defineSetter__(\"constructor\", ({}).__lookupGetter__): break; case 9: break; case 1: break; case .prototype: yield;case [11,12,13,14].some: break; case 0: case 6: case <xxx>{prop}</xxx>: break; ");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((function (constructor) { return  /x/  } ).apply)(window[function(id) { return id }]))){continue ; }");
tryItOut("try { let(__parent__) { for(let y in [5,6,7,8]) __noSuchMethod__ } finally { let(prop = constructor = @foo, ({ __iterator__: prop }) = prototype.__count__ = this) { this.zzz.zzz; } ");
tryItOut("yield <><{__parent__}><x><y/></x><!--yy--></{__parent__}></>;");
tryItOut("( /* Comment */prop|=this);");
tryItOut("switch(constructor) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in prototype = __iterator__) {throw  /x/ ; }M:switch(/*\n*/(__iterator__ = ([<x><y/></x>]))) { case 2:  }L:while((*::*) && 0)yield;break;  }");
tryItOut("/*for..in*/for(let prototype.prototype in *.valueOf(\"number\")) {yield 0/0;/*infloop*/M:for(let prototype = __iterator__; <x><y/></x>; *::*) -3/0; }");
tryItOut("gc()\nif(<><x><y/></x></>) {export __noSuchMethod__; } else  if (prop) gc()\n");
tryItOut("if(({})) {return;return; }\nyield __count__;");
tryItOut(" const __proto__;");
tryItOut("L:do let __count__ = 5.0000000000000000000000, __iterator__; while((({a1:1}).throw(<><x><y/></x></>)) && 0);");
tryItOut("if(__parent__ = <y><z/></y>) {return; } else {let __proto__; }");
tryItOut("let(({ __parent__: __parent__ })) ((function(){export x::__parent__;})());");
tryItOut("return;");
tryItOut("<x><y/></x\t>;");
tryItOut("M:if(yield <x><\fy/></x> * new Date(1e4)) { if ((p={}, (p.z = <> /x/ </>)())) {\fvar __noSuchMethod__ = <y><z/></y>;__proto__: <x><y/></x> } else {L:switch(.2) { default: __count__;break;  } }}");
tryItOut("switch(-0 .. <y><z/></y>) { default: case 8: case  /* Comment */[[]]: break;  }");
tryItOut("/*infloop*/for(let ({ prop: __parent__, __proto__: __count__ }) = <><x><y/></x></>[3.141592653589793]; (__iterator__ = __noSuchMethod__ @ ('fafafa'.replace(/a/g, gc))); (new Boolean()).unwatch(\"__count__\")) {for(let y in [5,6,7,8]) return __iterator__; }");
tryItOut("if('fafafa'.replace(/a/g, Function)) { if ((p={}, (p.z = ({a2:z2}))())) let constructor = <><x><y/></x></>; else var __parent__;}\nprop\n");
tryItOut("L: ({}).hasOwnProperty");
tryItOut("switch(<><x><y/></x></>) { default: yield;break;  }");
tryItOut("\n '' ;");
tryItOut("{/*infloop*/for(let [, ] = this; (<x><y/></x>.__proto__); [11,12,13,14].sort) {throw <><x><y/></x></>;try { continue ; } catch(__iterator__ if window) { break ; }  } }");
tryItOut("export __noSuchMethod__\n;\f");
tryItOut("/*for..in*/for(var constructor in ((eval)(<xxx {prop}={this.__defineSetter__(\"__parent__\", (prototype).__defineSetter__)} />))){}");
tryItOut("/*infloop*/L:for(1.3 ? null : this .@*:: *::*.unwatch(\"__iterator__\"); ((({}).hasOwnProperty).call(window, [1,2,3,4].slice(<x/>, 1.3))); (<><x><y/></x></>.__lookupSetter__(\"__iterator__\")).__proto__ = (__iterator__ = ({a2:z2}))) throw <x><y/></x>;");
tryItOut("if(<x><y/></x>.__lookupGetter__(\"prop\") >= undefined) {(); } else  if (this.__defineGetter__(\"__parent__\", (new Function(\"if(<y><z/></y>) { if ( /x/g ) {continue M; }} else throw *::*;\")))) {const prop = <x><y/></x>;new Function } else throw constructor;");
tryItOut("throw prototype;");
tryItOut("/*infloop*/for(let ({ prop: ({ prototype: ({ prop: prop, prototype: __iterator__ }) }) }) = constructor = <><x><y/></x></>[(yield true; <<= true)]; [z1].isPrototypeOf(@foo); (3.prototype)) __parent__;\f\n/*for..in*//* nogeckoex bug 349964 */ for  prototype: @foo.@foo(var constructor in true) \n");
tryItOut("M:do /*for..in*/M:for(var __noSuchMethod__ in 1.3) prop setter: Math.pow while(((new Function).call(null, )) && 0);");
tryItOut("L: \n__count__, __count__ = false;");
tryItOut("if(((this)(__proto__,  /x/g ))) {yield  /x/ ;throw try { export *; } catch(constructor if (function(){yield <x><y/></x>;})()) { return; } catch(constructor if __noSuchMethod__) { continue ; } catch(__noSuchMethod__ if *) { {} } catch(__proto__ if this) { export __noSuchMethod__; } catch(__noSuchMethod__) { yield prototype; } ; } else  if (({a1:1})) {continue ; } else {; }");
tryItOut("{M:if((case 2: throw 1e-81;break; default: let (prototype) { return; }break; {}break; export prototype;break; .prototype = this.valueOf(\"number\"))) {} else  if ((((this.zzz.zzz) >>>=(new RegExp({}))).__defineSetter__).call(__count__ = (([, constructor] = (prop.__proto__)) == [z1] , constructor), ({__iterator__: this,  set prop each ()3 })(this--, <><x><y/></x></>))) export __proto__; else var __proto__ = [[1]] }");
tryItOut("/*for..in*/for(const (({ constructor: prototype })) in ((({}).hasOwnProperty)((( /x/ )( '' )))))([[]]);");
tryItOut("let([({ __proto__:  }), ] = (({prototype: __iterator__.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)})).eval(([11,12,13,14].some))) ((function(){let.prop = constructor;})());");
tryItOut("with(function(id) { return id } << -3/0 && new Function()){yield; }");
tryItOut("/*for..in*/for(var constructor in ((/a/gi)((new Function(((p={}, (p.z = 1e-81)())))))))gc()");
tryItOut("/*for..in*/for(var [__proto__, constructor] = (uneval(5.0000000000000000000000)) in #1=[#1#]) {(1.3).__defineSetter__/*infloop*/do return null;\t while(false); }");
tryItOut("/*infloop*/for(({ ({ __proto__: [;], __noSuchMethod__: ({ prototype: ({ __parent__: ({ __noSuchMethod__: ({ prototype: prototype, __iterator__: prototype }) }), prop: [[], ({ __iterator__: x::__iterator__, constructor: __iterator__ }), , , ] }) }) }): ({ __iterator__: ({ __iterator__: ({ __parent__: __noSuchMethod__ }), __parent__: ({ __proto__: constructor }) }), prop: __parent__ }) }) = new (function  prototype () { yield ((*)(<x><y/></x>) = false == __count__.*) } )(( /x/g .__defineSetter__(\"__noSuchMethod__\", function  __iterator__ () { (<y><z/></y>); } ).unwatch(\"__parent__\")), (new (constructor)(__count__, <><x><y/></x></>)).yoyo(*::*)); (function ([y]) { })().throw(<x><y/></x>); (-'fafafa'.replace(/a/g, function  __proto__ (prototype)window))) for(let y in [5,6,7,8]) Math.sin");
tryItOut("if([[]] | ({ __iterator__: constructor }) = function::function::__count__)  else  if (function::__iterator__.__proto__ = [15,16,17,18].map(Math.sin({ __parent__: function::prop, prototype: __noSuchMethod__ }) , __proto__.(__noSuchMethod__ >> ({})))) {throw true; }");
tryItOut("let (__noSuchMethod__ = -0, __count__) { prototype; }");
tryItOut("/*for..in*/L:for((__parent__) in @foo) export *;");
tryItOut("switch('fafafa'.replace(/a/g, ({}).__lookupGetter__)) { default: {return this; }break;  }");
tryItOut("/*for..in*/for(let [__parent__, prop] = (__iterator__.__defineGetter__(\"prop\", [1,2,3,4].slice)) in <{__proto__}></{__proto__}>) L: {return *;return <y><z/></y>; }");
tryItOut("if(({__iterator__ getter: (new Function(\"\\fconst __count__, function::__count__ = *::*;\")) })) { if (<bbb xmlns=\"(([,,].@*)\n)\">yyy</bbb>) throw [window]; else <><x><y/></x></>;}");
tryItOut("var __parent__, __iterator__;\ngc()\n");
tryItOut("L: {yield this;yield <y><z/></y>.__defineGetter__(\"__iterator__\", function  __iterator__ () { yield null } ); }");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*/for(const __iterator__ = * in <x><y/></x>) /*for..in*/for(var __proto__ in *) {__count__, prototype; }");
tryItOut("{ }");
tryItOut("/*infloop*/for(window; <x>\t<y/></x>; <><x><y/></x></>) gc()");
tryItOut("{/*for..in*/for(let [__proto__, __proto__] = null in this) {Math.sin } }");
tryItOut("try { for(let y in []); } catch(__iterator__) { yield new (null)((<><x><y/></x></>);); } ");
tryItOut("with({}) throw StopIteration;");
tryItOut("with((prototype = __iterator__))switch(*::*) { default: break L;break; case 0: export *;break; case 7: var prototype, __iterator__ = @foo;break; case 1: break;  }");
tryItOut("{}prop, prototype;\n{}\n");
tryItOut("__noSuchMethod__");
tryItOut("/*for..in*/L:(const __noSuchMethod__ = * in 1e-81) {{export __parent__;throw <x><y/></x>; } }");
tryItOut("throw this; const __noSuchMethod__;");
tryItOut("/*infloop*/for(var __count__; [[]]; __proto__) ");
tryItOut("{(prototype);/*infloop*/for(var prototype = *::*; undefined; [[]]) *; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (eval(\"([[1]]);\", <x><y/></x>)) in <y><z/></y>) {yield [z1,,];({}).hasOwnProperty }");
tryItOut("if((~[true].filter((/a/gi).apply))) if(<>( '' [ '' ])</>) { if (1e81) {yield #1=[#1#]; }} else {/*for..in*/for(const prop in -1) continue L;yield <y><z/></y>; } else {return; }");
tryItOut("{let __count__ = <x><y/></x>;throw [[]]; }\n\n");
tryItOut("/*infloop*/do gc();; while(new function //h\n __iterator__ (__count__) { ; } (<><x><y/></x></>));");
tryItOut("M:while((prop) && 0)export *");
tryItOut("with(prop = (new __count__(constructor)))const __count__;/*\n*/");
tryItOut("let (__count__, __count__ = ) { yield \fconstructor\n }");
tryItOut("with({}) with({}) let(constructor) ((function(){const __iterator__;})());");
tryItOut("/*for..in*/for(var prototype in ((function(y) { yield y; (<><x><y/></x></>);; yield y; })(<><xxx>{__parent__}</\fxxx></>))){let (__noSuchMethod__.__parent__ = [<x/>].some(({}).hasOwnProperty)) { {yield; } }let constructor; }");
tryItOut("const getter = true;");
tryItOut("let(__count__ = new ((prototype = <y><z/></y>))(\n /x/ .__lookupSetter__(\"__noSuchMethod__\"), <x><y/></x>), prop) ((function(){let(__count__, __iterator__ = let __noSuchMethod__ = true) { with({}) { this.zzz.zzz; } })());");
tryItOut("switch((((__parent__).__defineSetter__).call(3.141592653589793, *::*, false))) { default: {}M:with({constructor: <><x><y/></x></> >= 3/0}){const prop, __parent__ = 3;x::<x><y/></x>; }break; {}case 0: break; /*infloop*/for(var ({ __count__: ({ __iterator__: __count__ }) }) = 1e+81; (([,,z1])(<x><y/></x>)); -3/0) __parent__;break; case 1.2e3:  }");
tryItOut("/*infloop*/L:for(let __parent__; (prop = 3/0); *::*[__count__]) {export *; }");
tryItOut("L:if(window.hasOwnProperty(\"prototype\")) /*infloop*/L:while(false){yield <x/>;break ; } else  if ( /x/g .watch(\"prop\", ({}).hasOwnProperty).hasOwnProperty(\"__iterator__\")) {if(0.1) ({}).hasOwnProperty else  if (prop = (-0)) \f{return <x><y/></x>;( \"\" ); } else ( '' ); } else __proto__");
tryItOut("if(([11,12,13,14].sort).__lookupGetter__(\"constructor\")) { if (eval(\"try { with({}) ; } catch(__noSuchMethod__) { throw StopIteration; } finally { this.zzz.zzz; } \", [1])) {function::__proto__ = 1e81; }} else yield [[1]];");
tryItOut("gc()");
tryItOut("if((eval(\"<x><y/></x>;\", 0.isPrototypeOf(arguments)))) { if (new (Math.sin)()) {yield x::__noSuchMethod__; } else export __noSuchMethod__;}");
tryItOut("{/*for..in*/for(var prop in <><x\t><y/></x></>) gc() }");
tryItOut("if( /* Comment */prototype.__parent__) {M:if(window) {return; } } else  if (__count__ = 0/0.__count__) /*for..in*//* nogeckoex bug 349964 */ for  each(let in <y><z/></y>) {{} }");
tryItOut("/*for..in*/for([__iterator__, __parent__] = ([[11,12,13,14].some])[(this.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>))] in function::__noSuchMethod__.(*::*.@*) == yield @foo) {yield <x><y/></x>;(new Function(\"break ;\")) }");
tryItOut("/*for..in*/for(let __iterator__ in  /* Comment */(this.zzz.zzz)) {\nreturn undefined.*; }");
tryItOut("M:if(new (3.141592653589793)(({constructor: ({prototype setter: ((<><x><y/></x></>).call).call, constructor: ~<><x><y/></x></> })}))) ;");
tryItOut("{{} }");
tryItOut("/*infloop*/for([, ({ prototype: ({ __count__: ({ __iterator__: __parent__, __iterator__: __count__ }) }), __noSuchMethod__: ({ constructor: __proto__ }) }), [, , , ]] = ([, prop] = (*::* << <x/>)); <>false<ccc:ddd>(x::__noSuchMethod__)</ccc:ddd></>.yoyo((yield *)); [,]\n) {let (prototype) { throw 5.0000000000000000000000; } }");
tryItOut("/*for..in*/for(let prototype in ({ __proto__: [], __parent__: constructor })) {yield ({}); }");
tryItOut("this.zzz.zzz; const __proto__;");
tryItOut("/*for..in*/for(let __proto__ in *::*) {false; }");
tryItOut("export __count__;\nvar __proto__, __iterator__ = prop;\n");
tryItOut("/*infloop*/for(const ({ __proto__: prop, __count__: __iterator__ }) = (@foo != [1])[window]; constructor = [11,12,13,14].filter; ((4.)[window])) L:with(eval(\"*::*\",  /x/ ))Math.sin");
tryItOut("/*infloop*/while(<y><z/></y>){/*infloop*/L:for(<x><y/></x>; <x><y/></x>; *) with({}) { let(__iterator__) { continue M; }  }");
tryItOut("/*infloop*/for(eval(\"yield;\", __count__.__noSuchMethod__); (5.0000000000000000000000 % this); (prototype = -1 for each (prototype in __parent__) for each (prototype in this) for each (__count__ in <x><y/></x>))) {gc() }");
tryItOut("L:if(((eval(undefined >>> undefined)).propertyIsEnumerable(\"__parent__\"))) { if ((yield this.zzz.zzz.*)) {} else {__iterator__ = arguments, __noSuchMethod__;{} const prop; }}");
tryItOut("M:with({prop: __count__}){do {yield;constructor, __noSuchMethod__; } while(([(__iterator__.__noSuchMethod__ setter= Math.sin)]) && 0); }");
tryItOut("/*infloop*/for(const prototype = (this.@foo).throw(this.zzz.zzz); (yield @foo)--; <> '' </>.(<><x><y/></x></>.eval(<x><y/></x>))) /*infloop*/M:while(this)export __parent__;");
tryItOut("__proto__; const prop");
tryItOut("let(__iterator__ = <x/>.throw( /x/g )) ((function(){let([] = (<><x><y/></x></>())) { this.zzz.zzz;})());");
tryItOut("this.zzz.zzz;");
tryItOut("let (__proto__) { ((function ([y]) { })()); }");
tryItOut("export *; const __iterator__;");
tryItOut("let ([__noSuchMethod__, __proto__, , ,  /x/ .__proto__]) { if((prop = this)) { if (function ([y]) { } %  /x/ ) \texport *; else {let __noSuchMethod__ = <x/>;(*).watch }} }");
tryItOut("yield;\n'haha'.split\n");
tryItOut("export constructor\n");
tryItOut("{} const __noSuchMethod__;");
tryItOut("(new Function(\"(this);\"))");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = __noSuchMethod__ = (__parent__ :: <><x><y/></x></>) in (uneval(false))) yield __noSuchMethod__;");
tryItOut("do {export *\n } while((((__noSuchMethod__).call(<><x><y/></x></>, 0))) && 0);");
tryItOut("do {/*for..in*/L:for(var constructor in (((new Function(\"let __count__;\")))(({a2:z2})))){{}var prop; }yield window; } while(((((new (prop = [1,,])()))[<><>__parent__</></>])) && 0);");
tryItOut("/*infloop*/L:for(({ __proto__: [] }) = <><xxx>{prototype}</xxx></>; (var prototype = *::*).__defineSetter__(\"constructor = (<><x><y/></x></>\\n), prop\", (<>@foo ^= 1e81</>.(<x><y/></x> ? this : [])).watch); false << (__noSuchMethod__.eval([,,])) * ( /x/g )[ \"\" ]) {/*for..in*/for(var [prop, constructor] = <y><z/></y> in this.zzz.zzz) export *;\t{gc() }\n }");
tryItOut("with({}) { yield; } ");
tryItOut("/*infloop*/do {prototype = <x/>, prop; } while((prop = \twindow\f)( /x/ ).__defineGetter__(\"__proto__\", function(y) { yield y; x::constructor = <><x><y/></x></>;; yield y; }));");
tryItOut("try { this.zzz.zzz; } catch(__parent__) { for(let y in []); } ");
tryItOut("if(__noSuchMethod__|=@foo) { if (__iterator__.__lookupGetter__(\"prototype\")) <><x><y/></x></>;} else {yield  '' ; }");
tryItOut("return;");
tryItOut("L: while((<><x><y/></x></>) && 0)yield;");
tryItOut("L:if(new *(*::*)) return");
tryItOut("/*infloop*/for(__proto__ = <x/> for (prototype in function::__noSuchMethod__); !new (function  prop () { return ({}) } )(); <x/>) {export __count__; }");
tryItOut("M:with({__iterator__: this})__iterator__");
tryItOut("gc()\n{__noSuchMethod__ }");
tryItOut("{export *; }/*infloop*/for(const constructor; undefined; [[]]) prop = <x/>, __proto__ =  /x/ ;\nprototype = this; const __parent__; if (window) \n");
tryItOut("/*infloop*/for(this.__defineSetter__(\"prototype\", ({}).__lookupGetter__); #0=\t({__noSuchMethod__: (__noSuchMethod__ = {})}); ((p={}, (p.z = (@foo <<= [1]))()))) export *;");
tryItOut("/*infloop*/for(({ __iterator__: __parent__, __iterator__: ({ __proto__: constructor }) }) = prop; ((1e4--).valueOf(\"number\")); __noSuchMethod__.__lookupGetter__(\"prototype\")) {__noSuchMethod__, __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(__parent__; @foo !== constructor.valueOf(\"number\"); [] = [eval].sort((1 for (x in [])))) {__count__ = .2;export __iterator__; }");
tryItOut("/*infloop*/for(__parent__; ([11,12,13,14].map %= (__proto__ = eval(\"const __iterator__ = 1e81, prop = window;\", <x><y/></x>)));  /x/ .constructor) ( /x/g );");
tryItOut("(+__count__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in prototype) {return; }");
tryItOut("/*infloop*/for(@foo :: __proto__ = ((1.2e3)(@foo)); (uneval(new Error())); (p={}, (p.z = 0)())) throw <><x><y/></x></>;");
tryItOut("if((this.zzz.zzz ? ((1e+81 for (__parent__ in <y><z/></y>)))(eval(\"<><x><y/></x></>\", {}), false) : prop = 1.3)) {\rconst __parent__, prop;/*for..in*/for\f(const [__iterator__, __noSuchMethod__] =  \"\"  in <><x><y/></x></>) {{} } } else return;");
tryItOut("/*infloop*/while(0 &  \"\" )with(this){return false;yield; }");
tryItOut("/*infloop*/for(let ({ constructor: ({ __iterator__: __proto__, setter: __count__ }) }) = (<y><z/></y> && *::*.valueOf(\"number\")); let (__proto__, __noSuchMethod__ = function(id) { return id }) 0/0;  /x/ .valueOf(\"number\")) yield (-0);");
tryItOut("/*infloop*/while(__proto__ = *.@*){var __proto__ = this, prototype = <x/>; }");
tryItOut("with(__proto__ ?  \"\"  :  /x/ )<><x><y/></x></>;");
tryItOut("/*infloop*/for( /x/ ; (<x><y/></x> ?  /x/  : (function ([y]) { })()).eval((__iterator__ = prop)); <employee id=\"1\"><name>Joe</name><age>20</age></employee>.( /x/g )) {return null; }");
tryItOut("yield  /x/ ;/*infloop*/while(3/0.hasOwnProperty(\"__proto__\")){return *; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {function(q) { return q; }\nreturn window;\n } while((\n*));");
tryItOut("/*infloop*/for(__iterator__; window; *::*) throw __noSuchMethod__;");
tryItOut("if(<x><y/></x>) {export *;throw 1e+81; } else  if (window) var prototype;");
tryItOut("let(__count__) ((function(){let(constructor = __iterator__ = __count__) ((function(){with({}) { this.zzz.zzz; } })());})());");
tryItOut(";");
tryItOut("do {(((p={}, (p.z = <x><y/></x>)())));({}).hasOwnProperty } while(((__noSuchMethod__) >>= this.__parent__) && 0);");
tryItOut("export *; const prop");
tryItOut("/*infloop*/M:for(([1,,] ? <y><z/></y> : <y><z/></y>).__defineGetter__(\"__parent__\", gc) instanceof 1.3 != [1,,]; void (__iterator__ = <x><y/\f></x>.yoyo(<y><z/></y>)); (prop = __iterator__ = <y><z/></y>)) {while((({prototype: __count__ = __parent__, __count__: [3].filter\f((<><x><y/></x></>).__defineSetter__) })) && 0){export set; }([z1]); }");
tryItOut("M:if(<x><y/></x>) {break ;__proto__.__noSuchMethod__ } else  if (false) {<y><z/></y>; } else throw *::*;");
tryItOut("return 'fafafa'.replace(/a/g, Math.sin);");
tryItOut("/*infloop*/for(<x/>; <x><y/></x>; <><x><y/></x></>) {var __count__; }\n{}");
tryItOut("yield new ( /x/ )([[1]].__defineSetter__(\"prop\", ({}).hasOwnProperty), * && [1]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __proto__: __iterator__, __iterator__: prop }) in false) <x/>");
tryItOut("with(<x><y/></x>.(<x><y/></x>))export *;");
tryItOut("['__iterator__'] = prop;");
tryItOut("if(((p={}, (p.z = (-0)\n ? <x><y/></x> : (__proto__ = <y><z/></y>))()))) { if (((new Function(\"with({prop: <x><y/></x>}){gc()yield; }\"))).call(function(id) { return id }().*[(__proto__|=<x/>)], (<><x><y/></x></>.eval(window)) <= new false(<y><z/></y>, <x/>), (__parent__ || <x><y/></x>.eval(<x><y/></x>)))) 3.141592653589793;} else gc()");
tryItOut("gc()");
tryItOut("try { throw false; } finally { (function ([y]) { }); } ");
tryItOut("with({}) for(let y in [5,6,7,8]) (undefined).apply");
tryItOut("033 = __iterator__;");
