tryItOut("yield;");
tryItOut("{/*infloop*/do (window); while(__iterator__); }");
tryItOut("try { return <x><y/></x>; } catch(__parent__ if (function(){yield  /x/g ;})()) { ; } catch(prototype) { (<x><y/><\f/x>); } finally { export constructor; } ");
tryItOut("var prototype = 3.141592653589793;with((__iterator__ = true)){if(this.zzz.zzz) { if (({constructor: this })) {let constructor = false, set = this;Math.pow }} else [1,2,3,4].map }");
tryItOut("let(__parent__, prop) { with({}) with({}) {}");
tryItOut("yield;");
tryItOut("/*infloop*/do {({ __parent__: __proto__, __parent__: ({ __iterator__: __noSuchMethod__, prototype: __count__ }) }) } while(let (__proto__ =  '' .yoyo(@foo), __parent__ = <x/>) (this['__proto__'\f] = constructor ? [z1] : case #1=[#1#]: var __parent__ = <><x><y/></x></>, __count__ = <x/>;break; [1,2,3,4].mapbreak; case <x><y/></x>: export prop;break; case  '' : return @foo;break; break; default: break; case 2: ));");
tryItOut("if((<y><z/></y>.__defineGetter__(\"__proto__\", function (__proto__, constructor)<x><y/></x>))) { if (({a1:1}) !== <><x><y/></x\f></>) /*for..in*/for(var [prototype, __iterator__] = <x><y/></x>.__lookupGetter__(\"prototype\") in @foo) {let let = [,,z1];return <y><z/></y>; }} else break M;");
tryItOut("L:if(__proto__) { if (<y><z/></y>) {let __proto__ = <><x><y/></x></>; } else ((function ([y]) { })());}");
tryItOut("return;");
tryItOut("L:if(+prototype = ({ __count__: __iterator__, prototype: __iterator__ }) = ({ prototype: prototype })) {yield <x><y/></x>; } else {/*infloop*/L:for(const __iterator__ = <x/> ?  /x/  :  /x/ ; false ? __count__ = prototype : (1.3 << <><x><y/></x></>) <= eval(\";\", [<x><y/></x>].map([1,2,3,4].map)); __parent__ = 0/0 >= 5.0000000000000000000000) export prototype; }");
tryItOut("/*for..in*/for(__count__ in ((/a/gi)((((<y><z/></y>)[__iterator__]) ? eval(\"return 3.141592653589793;\", [1,,]) : new (<x><y/></x>)()).throw(0.1)))){if(arguments) export constructor; else throw  '' ; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (__parent__ /= <><x><y/></x></>.eval(<x><y/></x>[constructor])) in __noSuchMethod__ = __proto__) var __count__ = <x><y/></x>, __noSuchMethod__ = <x><y/></x>");
tryItOut("export __parent__\n");
tryItOut("/*for..in*/for(let __parent__ in ([constructor, constructor, ] = 0/0 ? window : <y><z/></y>)) {L:with(<x/>){with(<x><y/></x>){export __noSuchMethod__; } } }");
tryItOut("L:while((<xxx {__iterator__}={(window.propertyIsEnumerable(\"constructor\"))\t} />.((*::*.valueOf(\"number\")) <= delete 4.)) && 0){/*infloop*/while(<><x><y/></x></>){continue M; } }");
tryItOut("return;");
tryItOut("{ { yield __iterator__(1e+81) = new ((__count__).watch)() } /*infloop*/while([11,12,13,14].some)return; }");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *) ");
tryItOut("if((window['prop'] = __iterator__ = ({ __parent__: __iterator__, __noSuchMethod__: prototype }))) { if (([11,12,13,14].some)) gc() else {export prototype; }}");
tryItOut("while(((<zzz><x><y/></x></zzz>.(((-1).__noSuchMethod__)))) && 0){return; }");
tryItOut("/*infloop*/do L:while((undefined) && 0); while((function ([y]) { })());");
tryItOut("if(#2=[]) {(-0); } else  if (prototype.__iterator__ = @foo) (this)\t\n");
tryItOut("if(window) { if (undefined) export __parent__;} else {(function (prototype, __noSuchMethod__) { yield; } ).callreturn; }\nreturn null;\n");
tryItOut("L:do {function(q) { return q; } } while((*::*) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__proto__) in <><x><y/></x></>) gc()\n;\n");
tryItOut("break L;");
tryItOut("/*infloop*/M:for(({ __count__: __noSuchMethod__, __proto__: __count__ }) = <><x><y/></x></> * <x/>; (__noSuchMethod__ = window); (__count__.(@foo))) ");
tryItOut("__parent__ = \t__count__;");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", new Function)) {if(true) {return;export *; } }");
tryItOut("/*infloop*/M:for(yield #0=+* ^ x::__count__; (new Iterator(this)).isPrototypeOf(function ([y]) { }[<><x><y/></x></>]).eval(undefined.watch(\"prototype\", ({}).hasOwnProperty).throw(__count__)); \f5.0000000000000000000000 || __proto__ = (new String(*::*))) {/*for..in*/M:for(const constructor in ((function  prop (__noSuchMethod__) { ; } )((033.@foo.__parent__)))){if(this) { if (true) {prop = <y><z/></y>, constructor; } else yield null;}throw window; }return; }");
tryItOut("if([<x/>].map(((new Function(\"break M;\"))).apply)) { if ((<x><y/></x>.(<x><y/></x>))) {return;__noSuchMethod__; } else {<y><z/></y>;__proto__;\n }}");
tryItOut("/*infloop*/\ndo with({__parent__: [1,,]})throw prop; while(false--.valueOf(\"number\"))\n");
tryItOut("L:if(1e4) {(@foo); }");
tryItOut("while(([[1]]) && 0){with((\n<><x><y/></x></>)){with({prototype: this}){yield #1#; } } }");
tryItOut("/*infloop*/for(const prototype; new (Function)(0x99, __noSuchMethod__); (<x\t><y/></x> <<  /x/ )) {return __iterator__; }");
tryItOut("while((constructor = function(q) { return q; }) && 0)/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in *::*) throw throw {};;");
tryItOut("var __noSuchMethod__;return undefined.unwatch(\"__iterator__\");");
tryItOut("with({set: null})export *;");
tryItOut("while((+(<><x><y/></x></>.unwatch(\"prototype\"))) && 0)yield;");
tryItOut("(undefined); const __noSuchMethod__;");
tryItOut("with({prop: <x/>})yield;");
tryItOut("/*for..in*/for((<y><z/></y> | <x><y/></x>).__count__ in (((({}).__lookupGetter__).call)(((p={}, (p.z = <y><z/></y>++ == #1#)()))))){let prototype, __noSuchMethod__;const __parent__ = this, __proto__ = this; }");
tryItOut("/*infloop*/while((yield @foo)){M:switch((-1)) { default: {} const prototype;case 033: case *::*: break; case <><x><y/></x></>: break; case 6: case function(id) { return id }: continue ;case 0: const <x><y/></x>; }[1,2,3,4].slice }");
tryItOut("/*infloop*/L:for(const prop; (this.__defineSetter__(\"try { (window); } finally { var __count__ = true; } \", [1,2,3,4].map)); null)  '' ");
tryItOut("/*infloop*/M:for(const prototype; ([({ __proto__: __count__, __iterator__: __noSuchMethod__ }) = ([15,16,17,18].sort(({}).hasOwnProperty, prototype)) for (__count__ in yield __count__) for each (__count__ in 1e-81) if ([z1])]); eval(\"yield;\",  \"\" )) {export __noSuchMethod__;export *; }");
tryItOut("(<x><y/></x>);");
tryItOut("do {;(1.2e3); } while(((#3={a:#3#})[undefined]) && 0)\n");
tryItOut("L:if( '' ) { if (function(id) { return id }) {gc() } else ;}");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__noSuchMethod__.__parent__ getter= (__count__).__defineSetter__; (\n0.1.hasOwnProperty(\"__count__\")); <x/>.__lookupGetter__(\"prototype\").throw([,]--)) __count__");
tryItOut("/*for..in*/M:for(var <><x><y/></x></>.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty) in (((new Function(\"<><x><y/></x></>;\")))(eval(\"(__count__);\", <><x><y/></x></>))))");
tryItOut("if((1e-81.@foo)) /*infloop*/for(let __iterator__; window; (-1)) { } else  if (__iterator__.__noSuchMethod__) {} else {gcconst __parent__ = <><x><y/></x></>, ([]).__defineSetter__; }");
tryItOut("/*infloop*/while(++({set: <x><y/></x>.unwatch(\"constructor\") }))if(__proto__.__parent__ = *::*) {yield <x><y/></x>;; } else  if (__count__.( /x/ \n)) break M;");
tryItOut("this.zzz.zzz;");
tryItOut("let (__noSuchMethod__ = [1]) { /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in constructor = <y><z/></y>.__defineSetter__(\"__iterator__\", Math.pow)) (function ([y]) { }); }");
tryItOut("if(@foo) {} else  if (<x><y/></x>) {yield;var prop, constructor = true; }");
tryItOut("let (constructor =  /x/ ) { 033; }");
tryItOut("throw StopIteration;");
tryItOut("let (__count__ = (yield  \"\" )) { /*infloop*/do {break ; } while([z1,,]); }");
tryItOut("");
tryItOut("export *\nexport prototype;");
tryItOut("/*for..in*/L:for(prop in <y><z/></y>) return this;");
tryItOut("/*infloop*/for(var __count__ = __count__|=<x><y/></x> += ().call(*, <><x><y/></x></>, *); <><x><y/></x></>.throw(<x><y/></x>) <<= (new (new Function(\"var __iterator__;\"))()); ((prop for each (__count__ in ({a1:1})))) ? __iterator__ .@ *::* : <x><y/></x>.(<x><y/></x>)) {<x\f><y/></x>;function(y) { yield y; export *;; yield y; } }if(prototype) {return\n } else  if (<><x><y/></x></>.@*.hasOwnProperty(\"__count__\")) {if(constructor) {yield <><x><y/></x></>;var __proto__, constructor; } else  if (({function::prop: -1 })) {export __count__;yield <><x><y/></x></>; }yield  \"\" ; } else export prop;");
tryItOut("/*for..in*/L:for(const prop in ((function  prop (with(eval(\"[z1,,].throw( /x/ )\", (<><x><y/></x></>(null,  \"\" )))){/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <y><z/></y>) {return;*::* } }) { return (prop.__count__) } )((window)(window))))if(#1=[-0\t]) yield; else  if (new *::*()) {gc() }");
tryItOut("L\t: {;export __parent__; }\t");
tryItOut("L:switch((prop).__defineGetter__(\"__iterator__\", Math.sin)) { case ( .((prop = __iterator__))): if((null)(033)) continue M;break; <x/>;default: if(this) { if (<><x><y/></x></>) {; } else {throw <x><y/></x>; }}break; break;  }");
tryItOut("if(true) { if (yield <x><y/></x> if (((yield -3/0)))) export *;} else {export __noSuchMethod__;L: export *; }");
tryItOut("/*infloop*/for(let constructor; ((function () { const __noSuchMethod__; } )()); this.__defineSetter__(\"__parent__\", function  __proto__ (__count__, prop) '' )) {let (__proto__) { ([,,z1]); } }");
tryItOut("/*infloop*/while(arguments.isPrototypeOf(<x><y/></x>));");
tryItOut("break ");
tryItOut("if(__iterator__) ; else  if ((this)[(-1)]) {* } else ");
tryItOut("/*for..in*/for(constructor = <><x><y/></x></> in this) continue ;");
tryItOut("{; }");
tryItOut("/*infloop*/for(const ({ __count__: window, __iterator__: prop }) = yield (__count__ << [z1]) >>> (eval(\"<x><y/></x>\",  /x/ ))[<x><y/></x>.hasOwnProperty(\"__proto__\")]; [<y><z/></y>.__noSuchMethod__].map(({}).__lookupGetter__);  \"\" ) {if(new Number()) {(<x><y/></x>); } else  if (new true) var function::constructor;{{}let (__iterator__, __proto__ = []) { /*for..in*/for(var __proto__ in ((function ()0x99)(<x><y/></x>)))var prop; } } }");
tryItOut("do ; while(((#2=[__parent__]).__lookupSetter__(\"__proto__\")) && 0);");
tryItOut("/*for..in*///h\nfor(var prototype = @foo in [z1]) {throw <x/>; }");
tryItOut("let (__proto__ = (<\f><x><y/></x></>)[<><x><y/></x></>].__count__) { export function::__count__; }");
tryItOut("/*infloop*/M:for(let [, , ({ __iterator__: [({ prototype: prop }), __parent__, prototype, , [__parent__, __parent__]] }), ({ __proto__: ({ constructor: ({ __iterator__: prop, __noSuchMethod__: __parent__ }) }), __parent__: __proto__ })] = __noSuchMethod__++ || (#1=({__count__: undefined})); [11,12,13,14].sort++; Function()) ");
tryItOut("M:while((-3/0.eval(0.1)) && 0)throw <x><y/></x>;");
tryItOut("");
tryItOut("{M:do const __parent__ = this; while(((function ([y]) { })()) && 0); }");
tryItOut("M:if(typeof 3) { if (this.zzz.zzz) {yield [1]; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x><y/></x>) { }with({__iterator__: __proto__: window}){<x/>; } }}");
tryItOut("while((#1#.unwatch(\"constructor\")) && 0){throw  /x/ ; }");
tryItOut("{}yield;");
tryItOut("/*infloop*/L:for(<x><y/\t></x>; ; <x><y/></x>) {yield [z1];let undefined; }");
tryItOut("with(arguments.__lookupGetter__(\"__proto__\")){return; }");
tryItOut("yield; const constructor;");
tryItOut("return *::* *= undefined < (undefined.__count__ = <x><y/></x>).watch(\"constructor\", <x><y/></x>);");
tryItOut("/*for..in*/M:for(const __count__ = (prototype.(this)) *= 'fafafa'.replace(/a/g, ({}).__lookupGetter__) in (return <><x><y/></x></>)) {/*infloop*/for(const [__noSuchMethod__, , [, , constructor, prop, ], ] = (new ({}).__lookupGetter__(eval(\"let __noSuchMethod__;\", [[]]), undefined)); (~null['__count__']); RegExp()) {{}return; } }");
tryItOut("/*infloop*/do {;with({__proto__: <><x><y/></x></>})return  \"\" ; } while((function ([y]) { })().eval(<x><y/></x>));");
tryItOut("L:switch( '' ) { default: break;  }");
tryItOut("/*infloop*/M:while(new ((undefined).__defineSetter__)( /x/ , constructor.prop getter= Math.sin))yield 1e+81;\n");
tryItOut("while(((((__parent__)(<x><y/></x>, {})++).__defineGetter__(\"constructor\", (1 for (x in [])))) >>= ([, ] = [])) && 0){gc()/*infloop*/for(__parent__(); eval(\"#1=[#1#]\",  '' ); (Date((({constructor setter: ({}).hasOwnProperty })), 0/0))) {var prototype;constructor = [], __iterator__ } }");
tryItOut("if(<y><z/></y>) if(window) { if (let) {var __iterator__;; } else {/a/gi }} else  if (throw prop;.prototype) {; } else {(<x><y/></x>);/*for..in*/L:for(let prop in (((1e-81).apply)(<><x><y/></x></>))){(<><x><y/></x></>);<x><y/></x>; } }");
tryItOut("{while((window) && 0) }");
tryItOut("while((undefined) && 0){yield; }");
tryItOut("/*infloop*/do yield; while(-- '' );");
tryItOut("/*infloop*/for(false; ({prototype:  /x/ }).__lookupGetter__(\"__parent__\"); window <= <x><y/></x>) /*for..in*/for(const __proto__ in ((gc)(<y><z/></y>))){break }");
tryItOut("M:if( '' ) { if (<x><y/></x>) { } else {const __iterator__;return; }}");
tryItOut("if(*::* / *::*) {throw this;yield (function ([y]) { })(); } else  if ({}) {{} } else {{} }");
tryItOut("throw <><x><y/>\f</x></>;");
tryItOut("M:switch((function ([y]) { })()) { default: break;  }");
tryItOut("throw  '' ;");
tryItOut("export constructor\nbreak M;");
tryItOut("/*for..in*/for([prop, __parent__] =  \"\"  &&  '' .__noSuchMethod__ = __proto__ = 0/0 in <x><y/></x> %= <x/>) for(let y in []);");
tryItOut("for(let y in []);");
tryItOut("M:if( '' ) { if (window) export *; else *::*;}");
tryItOut("/*for..in*/L:for(let (constructor) in ((function  prototype (__count__, __iterator__) { return function (constructor, constructor) { return prototype } ( /x/g .propertyIsEnumerable(\"__parent__\")) } )('fafafa'.replace(/a/g, (1 for (x in []))).__defineSetter__(\"__proto__\", gc)))){const constructor;try { constructor = *::* } catch((function ([y]) { })() if (function(){constructor, constructor = true;})()) { export *; } finally { __count__ }  }");
tryItOut("/*infloop*/for(false.isPrototypeOf(<y><z/></y>); (__noSuchMethod__ = [,]); eval(\" /x/g \", <x><y/></x>)) __iterator__;");
tryItOut("let __iterator__, __parent__ = <y><z/></y>;");
tryItOut("with( /x/g .__proto__){while((null) && 0)export *;__count__; }");
tryItOut("L: {[1,2,3,4].slicevar __proto__, constructor = <x><y/></x>; }");
tryItOut("const __iterator__;");
tryItOut("/*for..in*/for(var [prototype, __parent__] = 4. in this) __parent__");
tryItOut("switch((<x><y/></x>.(<x><y/></x>))) { case {}: yield __noSuchMethod__;break;  }");
tryItOut("{M:if(__iterator__) { if (@foo) export __iterator__;} else {yield  \"\" ; } }");
tryItOut("/*infloop*/M:do {var function::__noSuchMethod__ = *::*;break L; } while(('haha'.split)(prototype ||  /x/g , +<x/>));\nif((<><x><y/></x></> = -1 /= *::* -= <x/>)) with(<x><y/></x>) else {@foo;constructor }\n");
tryItOut("M:if(<zzz>(this.__defineGetter__(\"__iterator__\", ([1,2,3,4].slice).apply))</zzz>.(__iterator__)) {Function } else L:switch((1e4.__defineGetter__(\"__noSuchMethod__\", Math.pow))) { case 5: yield null; }");
tryItOut("if(__count__.prop = new new Function(__noSuchMethod__ = <x><y/></x>, (this.*))) {__noSuchMethod__ = <x><y/></x>; } else {gc()gc() }");
tryItOut("yield true;");
tryItOut("let (constructor = (({__noSuchMethod__: <y><z/></y>}))) { return; }");
tryItOut("var __parent__ = [1,,]");
tryItOut("{yield;__proto__; }");
tryItOut("if((this.__defineSetter__(\"__proto__\", ({})))) switch( /x/g ) { default: __proto__;break; case 3: /*for..in*/for(const __parent__ in (([1,2,3,4].slice)(*::*)))gc()case 4: case 7: break;  } else  if (<xxx {prototype}={([] = <x><y/></x>)} />) let(constructor) { with({}) __parent__ else with(<x><y/></x>.@foo)yield false;");
tryItOut("/*for..in*/for\f(constructor in (1.3).watch) ([,,z1]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in [z1,,]) {{}break M; }\nyield <><x\t><y/></x></>;");
tryItOut("if([]) {/*infloop*/for(({ __proto__: __iterator__ }) = (prop = <x><y/></x>).@foo; (__iterator__.(((1 for (x in []))).call(<><x><y/></x></>, 1e81, this))); (__iterator__.__proto__ = __noSuchMethod__.prop setter= [1,2,3,4].map)) {export prototype;Math.pow } }");
tryItOut("for(let y in [5,6,7,8]) (*);");
tryItOut("M:if(<><x><y/></x></> &= new ( /x/ )(null, 033).propertyIsEnumerable(\"__iterator__\")) {if(<x><y/></x>.(*)) {return 0; } else  if (1e+81 || *::*) {} }");
tryItOut("");
tryItOut("L:do return new RegExp(*::*.unwatch(\"constructor\")); while((new (<x><y/></x>).watch((#1#.*))) && 0);");
tryItOut("{if(*) return <x/>; else {export __count__; }yield <x><y/></x>; }");
tryItOut("(__noSuchMethod__); const prototype;");
tryItOut("while(((return)) && 0){break L; }");
tryItOut("/*for..in*/for(prop in ((<y><z/></y> >>>=eval(\"<x/>.yoyo(<x/>)\", <> </>))(let (__parent__) window.__iterator__.throw((['fafafa'.replace(/a/g, gc)].some(true))))))if((__count__ = #2=({__proto__: __proto__.throw(yyy)}))) {yield;yield; }");
tryItOut("for(let y in [5,6,7,8]) try { with({}) { throw __noSuchMethod__; }  } catch(prop) { with({}) this.zzz.zzz; } finally { this.zzz.zzz; } ");
tryItOut("let (({ prop: ({ __parent__: yyy, __parent__: ({ __proto__: __noSuchMethod__, __proto__: function ([y]) { } >= __proto__.__noSuchMethod__ }) }) }), __proto__) { prototype, __noSuchMethod__ = <x/>; }");
tryItOut("if( /x/ ) {return;export __proto__; } else  if ((<x/> >= <x><y/></x>)[(yield <><x><y/></x></>)]) {with({__noSuchMethod__: __noSuchMethod__ = ({a1:1})}){const __count__ =  /x/ ;<y><z/></y> } }");
tryItOut("if([15,16,17,18].filter(<x><y/></x>, *::*)) {export *;this; } else  if (prop.constructor) {false; }");
tryItOut("let prop = prototype\n");
tryItOut("with(__iterator__){var __proto__ = @foo;yield; }");
tryItOut("for(let y in []);");
tryItOut("return \n(<><x><y/></x></>).call(this, );");
tryItOut("with(((({ __count__: __parent__ }) = (x::prop))['constructor'] = (void (p={}, (p.z = *::*)())))){export *;(0); }");
tryItOut("L:if(([<x/>].filter((1 for (x in []))))) break ; else  if ((({__parent__: __proto__.constructor =  ''  >> 3.141592653589793.yoyo([z1])}))) yield try { <><x><y/></x></>; } catch(__proto__) { {} } finally { export *; } .__count__ = 0.1; else if(window.throw(((1 for (x in []))(*, <y><z/></y>)))) continue L;");
tryItOut("((eval(\"<><x><y/></x></>\", window)));\f\nMath.sin\n");
tryItOut("throw __proto__;");
tryItOut("{eval__noSuchMethod__ = prop, prop; }");
tryItOut("if(false) {yield; } else export constructor;");
tryItOut("continue ;");
tryItOut("{return (null\n); const prop;export __proto__; }");
tryItOut("/*for..in*/for([__iterator__, prototype] = (eval(\"null;\", window)) in [\tthis for each (__parent__ in 4.)]) {{/*infloop*/for(window; #1=[0.1]; let (constructor = undefined) throw #1#;) {__count__ = false, __count__ = <x><y/></x>;const __parent__; }export *\n } }");
tryItOut("throw Function(window, __proto__)\n");
tryItOut("prototype = setter;");
tryItOut("switch\n(<y><z/></y> % true) { default: break;  }");
tryItOut("while((<><x><y/></x></> + __parent__) && 0)let __proto__, prototype;");
tryItOut("if([({ __noSuchMethod__: __proto__, __iterator__: __iterator__ }) = *::*.* for ((__proto__) in yield) if (new String(this.__defineGetter__(\"prop\", gc)))]) /*infloop*/L:do {if(<><x><y/></x></>) {(this); } else __noSuchMethod__; } while(get);");
tryItOut("/*for..in*/for(const prototype in (('haha'.split)(<x><y/></x> ?  ''  : -1)))return [,];");
tryItOut("L:if((([(prop+=\fthis)(window.__parent__ = <y><z/></y>, this)]) @ (( /x/ )(<x><y/></x>)))) {M:do /*infloop*/for(__proto__ = this; constructor; 1.3) throw [1]; while((function  prototype (__parent__, __proto__)__proto__) && 0);{gc()export __proto__; } }");
tryItOut("/*infloop*/while(<x/>()){throw null; }");
tryItOut("return;");
tryItOut("/*infloop*/for(let __iterator__; __noSuchMethod__ = false; [11,12,13,14].map) ");
tryItOut("/*infloop*/for([__iterator__, __count__, , prototype] = eval; (#0=[[z1].@*]) << (new (function  <><zzz>0\n</zzz></> (__noSuchMethod__, __iterator__) { {} } )(__proto__)); [,,].__lookupGetter__(\"__noSuchMethod__\").__parent__ = [(prop = this).hasOwnProperty(\"constructor\")]) \f{if((<><x><y/></x>yyy</> .@ (*.propertyIsEnumerable(\"__count__\"))\f)) {if(<x><y/></x>) window } else const prop;with((4. = <x><y/></x>))export *; }");
tryItOut("");
tryItOut("let (__proto__) { ; }");
tryItOut("/*for..in*/for(const this['__count__'] in 3) gc()");
tryItOut("<><x><y/></x></>");
tryItOut("throw StopIteration;");
tryItOut("{gc()continue L; }");
tryItOut("if(<x/>((.__count__ = (\n(* ? u : window))))) throw __parent__; else {switch(__parent__) { case <><x><y/></x></>:  } }");
tryItOut("try { let(({ __count__: __proto__ })) ((function(){throw __noSuchMethod__;})()); } catch(prop if [15,16,17,18].some([1,2,3,4].slice, <x><y/></x>)) { return; } catch(function::__parent__ if (\tnew <><x><y/></x></>())\n) { try { throw StopIteration; } catch(constructor) { return ((uneval(new (<y><z/></y>)(false)))); }  } catch(constructor) { let(({ __proto__: __count__, __count__: ({ prop: prototype, let: default: {}const --;break; return;break; break;  }) })) { try { #1#; } finally { return this; }  } ");
tryItOut("return undefined; const constructor;");
tryItOut("{export ;if(({a1:1})) gc() else  if (@foo) {throw ({a1:1}); } else const prop; }(false);");
tryItOut("if(<><xxx {__count__}={window} /></>) {export *;yield <y><z/></y>; } else var prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(__count__; [__proto__, __noSuchMethod__] = this << false; ( /* Comment */({constructor: <><x><y/></x></> }))) export *;");
tryItOut("prototype");
tryItOut("return ({ prop: constructor, __proto__: prototype }) = <x><y/></x>.propertyIsEnumerable(\"__count__\");");
tryItOut("/*for..in*/M:for(([[1]].@foo) in  /x/ ) return <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __parent__ in window) ;");
tryItOut("gc()");
tryItOut("if([11,12,13,14].some) {if(<><x><y/></x></>) throw 0; else  if ( /x/ ) return; else __proto__let prototype = __proto__; } else {with(window.*){__iterator__, __parent__ = this; }yield; }");
tryItOut("/*infloop*/for(({ prototype: __count__, __noSuchMethod__: ({ __count__: prototype }) }) = new <y><z/></y>(); 'fafafa'.replace(/a/g, function(q) { return q; }); constructor-= /x/ (1e4 ^  ''  - true)) {with({prop:  '' })(<><x><y/></x></>);function (__count__, prop) { throw window; }  }");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = [,,] in null) {break L;var prototype = __parent__; }");
tryItOut("/*infloop*/<y><z/></y> while(<><bbb xmlns=\"this instanceof <x>\f<y/></x>\"></bbb></>);");
tryItOut("/*for..in*/default: break; case 3: break; ");
tryItOut("M:with(<y><z/></y>.watch(\"__noSuchMethod__\", ({}).hasOwnProperty)){export __parent__;\ngc()\nvar constructor = <><x><y/></x></>, __count__ =  /x/ ; }");
tryItOut(";");
tryItOut("while((*) && 0)return break L;;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in @foo) {yield; }");
tryItOut("let (__count__) { with({}) gc() }");
tryItOut("function(q) { return q; } const __proto__;");
tryItOut("/*for..in*/for([__iterator__, __count__] = (<bbb xmlns:ccc=\"__parent__ !== <y><z/></y>\"><ccc:eee></ccc:eee></bbb>.(({__count__: .2 ^= <x/>}))) in ((uneval(<y><z/></y>)))) /*for..in*/for(let [function::__count__, __iterator__] = __parent__ = true in <y><z/></y>) {{} }");
tryItOut(" const ([11,12,13,14].map)[this.__defineGetter__(\"__parent__\", gc)];");
tryItOut("if(<y><z/></y>) {const __noSuchMethod__ = window; }");
tryItOut("var __parent__;{<y><z/></y>; }");
tryItOut("if((yield  /x/g .yoyo(undefined))) continue M; else  if (\n<x/>) -3/0\nif(([(prop = x::__iterator__)].some('haha'.split))) { if (<x/>.__count__) {({__proto__: #3={a:#3#}}).prop = __proto__.__parent__ = (function ([y]) { })() }} else {function (__iterator__, __noSuchMethod__) { return <x/> }  }\f");
tryItOut("if(\nlet (prop) ( '' )) { if (<bbb xmlns=\"(window >>> ({a2:z2}))\t(eval(\"false\", prototype),  \"\" )\">yyy</bbb>) return  '' ;} else <x><y/></x>;");
