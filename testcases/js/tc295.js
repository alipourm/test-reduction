tryItOut("M:if(window) 1e+81; const constructor;");
tryItOut("switch(@foo) { default: /*for..in*//* nogeckoex bug 349964 */M: for  each(let prop.__proto__ in <x><y/></x>) {return <><x><y/></x></>; }case #0=<><x><y/></x></>: break;  }\f");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __noSuchMethod__ in (-0)) {export __iterator__; }\n");
tryItOut("/*infloop*/M:while(((<><x><y/></x></> if (<><x><y/></x></>))) ? [,,] || <><x><y/></x></> : __noSuchMethod__ = undefined){prototype = __iterator__;return <><x><y/></x></>; }");
tryItOut("/*infloop*/L:for(let constructor = function(y) { yield y; @foo; yield y; }(); (new ([[1]])(({a1:1}))); ([-1 for (prop in \fprop)])) {const __parent__, __iterator__\nexport constructor; }\f");
tryItOut("var __count__ = <x/>;\n;\n");
tryItOut("try {  } finally { let(prop = <>@foo</>, __proto__ = this) ((function(){let(prop) ((function(){for(let y in [5,6,7,8]) const constructor, __count__ = this;})());})()); } ");
tryItOut("if(this.zzz.zzz) { if ([true = default: /*infloop*/for(constructor;  \"\" ; <x><y/></x>) {export *; }break; case 2: break; case 6: break; break; case [[]]: ;break; case this: break; throw  /x/ ;break; .throw(({__iterator__: constructor =  /x/ , __iterator__: <x><y/></x> }))].sort(((this /= this)).__defineSetter__)) M:\rwhile((<y><z/></y>) && 0){arguments; }} else M:if((<y><z/></y> ^ <x/>)) [] else throw <x/>\n");
tryItOut("{throw <\nx><y/></x>;/*for..in*/for(var __proto__(function(id) { return id }) in []) {L:while((<x><y/></x>) && 0)var __iterator__ = __proto__; } }");
tryItOut("switch(\n__noSuchMethod__) { case 1: with(false){return; }break;  }");
tryItOut("throw prototype");
tryItOut("let (__parent__ = <><x><y/></x></>, constructor) { continue ; }with({}) { prototype = prop; } ");
tryItOut("\n3/0;\n");
tryItOut("(prop) = __proto__;");
tryItOut("/*infloop*/for(const __parent__ = (this.zzz.zzz); *::*.watch(\"__proto__\", function(q) { return q; }); (__count__.__proto__)) {yield -3/0;{} }");
tryItOut("/*for..in*/for(let  /x/ ['prop'] in ((((null).watch).apply)((function(q) { return q; }).call(.2, <y><z/></y>))))var prototype =  /x/g ;");
tryItOut("let(__iterator__) { this.zzz.zzz;");
tryItOut("{yield; }");
tryItOut("return;continue ;");
tryItOut("L:with( '' .isPrototypeOf(*::*).__parent__)M:while((window) && 0){export *; }");
tryItOut("while((@foo) && 0)return window;");
tryItOut("export *\n");
tryItOut("let ((__proto__)(<x><y/></x>), []) { L: L: continue ; }");
tryItOut("/*infloop*/function  prop () { yield true } for([, ({ __parent__: ({ __noSuchMethod__: __iterator__, prop: [[, , , [constructor, __proto__, __proto__, __iterator__], ], , , , ] }) }), [], [({ __iterator__: __count__ }), ]] = <x/>(/; ");
tryItOut("/*infloop*/for((constructor = function ([y]) { } >>> (<><x><y/></x></> .@*:: *::*)); (const constructor = window); #0=#1#()) {if(void <x><y/></x>.*) { if (#0=({__iterator__: __noSuchMethod__}).propertyIsEnumerable(\"yield\")) { }} else [1,2,3,4].map }");
tryItOut("{export prop;return  /x/g ; }");
tryItOut("if(Function(a)) { if (('fafafa'.replace(/a/g, function  __noSuchMethod__ () { yield false } ))) gc()} else {}");
tryItOut("if(<xxx {__count__}={undefined} />) export function::__parent__; else  if () {switch(constructor = window) { default: break; case 5: gc() } }");
tryItOut("/*for..in*/for(const <><x><y/></x></> = \f ''  >>> this in 1e+81) \t{yield;(__iterator__).__defineSetter__ }");
tryItOut("if([,]) {let constructor = constructor, __iterator__;var __parent__ = ({}); } else gc() const constructor;");
tryItOut("gc()");
tryItOut("let __parent__");
tryItOut("let constructor = <y><z/></y>;\n/*for..in*/for(var __noSuchMethod__ in __iterator__) {return [[]]; } const __proto__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__([11,12,13,14].some &= <><x><y/></x></> <= [[]]) in <x><y/></x>++) switch(1e-81) { case 0: if(({a1:1})) {export __noSuchMethod__;var __proto__, __iterator__; } else  if (<y><z/></y>) {prop, __parent__ = <><x><y/></x></>; } else break ;break;  }");
tryItOut("L:if(<x><y/></x>) {{}return; } else break \nif( /x/g ['prototype']+=(yield this)\n) { if (prototype.__parent__ = new ( '' )(prototype, window)) {'haha'.split }} else var __proto__ = window, __proto__ = @foo;");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*for..in*/for(let prop = function(id) { return id } in @foo) { }");
tryItOut("return;");
tryItOut("L:if(prop.(this.valueOf(\"number\"))) { if (({prototype: this.zzz.zzz })) } else {yield .2; }\n/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in (<x><y/></x>.__lookupGetter__(\"prototype\").yoyo((new (prop)(this,  /x/g ))))) L: {}\n");
tryItOut("export *;");
tryItOut("if([1] -= (-3/0.prototype = false)) {break L;yield; } else  if ((<><x><y/></x></>)[0/0] ? [15,16,17,18].filter((1 for (x in [])), [,]) : ([15,16,17,18].filter(<x><y/></x>, <><x><y/></x></>)).__defineSetter__(\"__proto__\", function  __noSuchMethod__ (prop, __count__)({ get __noSuchMethod__ prototype () }))) let prop = -3/0; else {if(1e4) { if ( '' ) {yield;yield; } else <><x><y/></x></>;} }");
tryItOut("{window; }");
tryItOut("M:if((constructor.__parent__ setter= 'haha'.split)) {gc()var __proto__, prop; } else {throw <x/>; } const __iterator__;");
tryItOut("if(__iterator__) default: break;  else  if ((@foo.__defineSetter__(\"__parent__\", Math.sin))) gc()");
tryItOut("{let __count__ =  /x/ , __noSuchMethod__; }");
tryItOut("/*infloop*/do {gc()return; } while(<y><z/></y> ? __noSuchMethod__ : <y><z/></y>);");
tryItOut("if(@foo) {__count__;break ; } else <x><y/></x>;");
tryItOut("/*for..in*/for([__proto__, prototype] = ([11,12,13,14].sort && this >> (<x/>)[<y><z/></y>] ^= constructor >>>=__noSuchMethod__ if ((({__iterator__: <y><z/></y>, constructor: <><x><y/></x></> })).watch(\"__iterator__\", function (function::prop, __proto__) { yield undefined } ))) in prototype.(prop)) switch( /x/g ) { default: /*infloop*/for(var __count__; (({}).hasOwnProperty(true, __count__)); (new (<y><z/></y>)(<><x><y/></x></>, <><x><y/></x></>\f))) {return 0.1;function::__count__: ([15,16,17,18].filter((({})).__defineSetter__,  \"\" ))  }case (<x/>.isPrototypeOf(true) .@ <y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\")): break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let x::__iterator__ in __parent__.propertyIsEnumerable(\"__proto__\")) L:with({constructor: Math.pow}){export *;{} }");
tryItOut("let (__parent__ = break ) {  }");
tryItOut("(__count__ = <><x><y/></x></>).yoyo(null\n)['let'] = <x/>;");
tryItOut("/*infloop*/for(({a1:1}); <x><y/></x>; *) ;");
tryItOut("L:if(<x/>) { if (<><x><y/></\fx></>) function  __noSuchMethod__ (__iterator__) { return <><x><y/></x></> } } else yield  \"\" ;");
tryItOut("with({__proto__: <><x><y/></x></> .. <x/>})while(( '' ) && 0){return; }");
tryItOut("/*infloop*/for(({ prototype: ({ __iterator__: __count__, !: __iterator__ }) }) = undefined + window.__noSuchMethod__; @foo; __proto__.__count__) {if((gc).call(window | (this.zzz.zzz),  /x/g )) return [,]; else {return 0; } }");
tryItOut("__proto__");
tryItOut("var function::prototype;");
tryItOut("\n");
tryItOut("/*for..in*/for(const [prop, __iterator__] = ([({ __noSuchMethod__: constructor }), , ] = ()) in *::* % #1=[#1#]) {var __iterator__ = <x/>, __iterator__; }");
tryItOut("L:if('fafafa'.replace(/a/g, [1,2,3,4].slice)) {yield; } else return this;");
tryItOut("M:with({__noSuchMethod__: __proto__.__noSuchMethod__})/*infloop*/M:while(window){yield (-1); }");
tryItOut("__noSuchMethod__ = ({a1:1}), constructor = .2;\n{ }\nswitch((gc())) { case 6: <><x><y/></x></>break;  }\n");
tryItOut("if([15,16,17,18].filter('haha'.split, false.__lookupSetter__(\"each\"))) {export *\nfunction  prototype (prototype) { return  /x/  }  }");
tryItOut("if(<x><y/></x>) return @foo; else  if (<x><y/></x>) {let __noSuchMethod__ =  \"\" ; }");
tryItOut("let (__parent__ = <><>__proto__</></>, prototype = 1e4(<x/>, 3.141592653589793)) {  }");
tryItOut("switch((\f__iterator__--)++) { case  /* Comment */(window)[#1#].propertyIsEnumerable(\"__parent__\"): L:with({__count__: 0.1}){return;this; }break; let (prop = ({prototype: null,  get x::constructor(__iterator__) { return; }  })) { /*infloop*/while(__parent__ = {})return *::*;//h\n }break; default: if([prop])  else {}break; case <><xxx {__parent__}={[z1,,]} /></>: break; break; const constructor = prop, __noSuchMethod__;{}break; case 3: export *;break; break; case (__proto__.__count__ = ({})): switch( /x/g ) { case 0: const __count__ = window, prototype = <x/>;case null: throw constructor;case 5: break; break; default: function(q) { return q; }break; throw 1.3;break; break; yield <y><z/></y>;break; break; ;break;  }break;  }");
tryItOut("{(<><x><y/></x></>);constructor: (new ((/a/gi).call)()) }");
tryItOut("M:do {yield [z1];switch(<x><y/></x> ? <><x><y/></x></> : <y><z/></y>.throw( \"\" .__lookupSetter__(\"/\"))) { default: yield arguments;case 9: ;break; return;case constructor = constructor: ((-1));break;  } } while((eval(\"yield;\", *)) && 0);");
tryItOut("continue M; const ({ __parent__: prototype });");
tryItOut("switch(<><zzz>null</zzz></>) { default: break; break;  }");
tryItOut("L: {{} }");
tryItOut("M:if(function  prop () { export *; } ) throw <><x><y/></x></>;");
tryItOut("M:if(#1=[#1#]) return __count__; else {const __proto__; }");
tryItOut("L: {; }");
tryItOut("let (__iterator__) { if([__iterator__, prototype, , ] = ({__parent__: this })) {yield (-0);; } else  if ((<x><y/></x> ^ 1e+81)) {{throw <x><y/></x>;prototype = prototype, __parent__ = this; } } }");
tryItOut("if(<y><z/></y>) throw <x><y/></x>; else  if (constructor) ;");
tryItOut("/*infloop*/for(var prototype; [z1]; [1] ? (__proto__.__noSuchMethod__ = undefined) : (this if (undefined)) & (this.__defineSetter__(\"prop\", Function))) return;");
tryItOut("/*for..in*/for(let (~arguments)([window].filter(<x/>).function::prop) in new (<y><z/></y>)(<><x><y/></x></>)) let(prototype = <><x><y/></x></>(3.141592653589793), __parent__ = (-0) >> 1e81) { for(let y in []);");
tryItOut("with({constructor: [(({constructor: <x><y/></x> }))].map([__iterator__])})yield;");
tryItOut("/*for..in*/L:for(__count__ in (((('haha'.split).call(*, )))( /x/ ))){function (__noSuchMethod__) { yield <x><y/></x>; } yield 0/0; }");
tryItOut("/*infloop*/for([*];  /* Comment */-0; RegExp(( /x/g .*))) throw __parent__; const __iterator__;");
tryItOut("if((yield eval(\"delete 0/0\", false.__count__ = this))) {const __iterator__, get = null\n } else  if (((function (__count__, __noSuchMethod__) { return prototype = [] } )((uneval(*::*)))).eval(\t\nwindow.constructor)) {let __parent__ = <><x><y/></x></>, __proto__; } else {const __iterator__, get; const prop;L:if(<y><z/></y>) ({}).hasOwnProperty }");
tryItOut("<x/> != <x><y/></x> = __noSuchMethod__;");
tryItOut("with({}) let __parent__;");
tryItOut("L: {throw .2; }");
tryItOut("if(new String((({ __noSuchMethod__: ({ prop: [] }) }) = ({ prototype: ({ __proto__: ({ __parent__: __count__ }), __parent__: ({ __count__: __count__, __proto__: __parent__ }) }), __iterator__: [] })))) {return;{} } else {yield;var prototype; }");
tryItOut("/*infloop*/M:do {(<y><z/></y>);continue L; } while((<y><z/></y>.__defineGetter__(\"__iterator__\", new Function)))\nconst ({ __proto__: ({ *::*: constructor }), __count__: [__iterator__] }), __noSuchMethod__ = ({__parent__: this });");
tryItOut("/*for..in*/for(__parent__ in (3--)) {__proto__ = this, prototype = @foo; }");
tryItOut("/*infloop*/M:for(var ({ prototype: ({ __noSuchMethod__: ({ __proto__: __iterator__ }) }) }); <><{constructor}>yyy</{constructor}></>; new (__count__.__lookupSetter__(\"default: return *::*;yield;break; \"))(\f(__proto__ = *::*), this)) {do \r{yield [,];yield <><x><y/></x></>; } while((<x><y/></x>) && 0); }");
tryItOut("with({}) yield <x><y/></x>.valueOf(\"number\");");
tryItOut("/*infloop*/M:while( \"\" ){export __parent__; } const __noSuchMethod__;");
tryItOut("if((false(this, <><x><y/></x></>))) throw undefined; else yield window;");
tryItOut("if(<bbb xmlns:ccc=\"new (<y><z/></y>)(@foo)\f\"><ccc:eee>\n</ccc:eee></bbb>) {yield; } else  if (this.__defineGetter__(\"__parent__\", *::*)) 3.141592653589793\nconst __count__; else { }");
tryItOut("/*infloop*/while((arguments.eval(<x/>)\t.prototype = new (Math.pow)(5.0000000000000000000000, null)));");
tryItOut("/*infloop*/for(var ({ constructor: [, , ({ __parent__: __proto__ }), ({ yyy: ({ __count__: ({ prototype: __parent__.prototype }), prototype: [, ({ __parent__: __iterator__ }), ({ __iterator__: __iterator__, __count__: __parent__ }), __proto__(__proto__)] }), prop: [] })] })//h\n = Iterator(); #3={a:#3#}; ([1e+81 + false for each (__count__ in this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) for each (__proto__ in __count__) for (prop(false) in (-0))])) {export *; }");
tryItOut("with((prop = __noSuchMethod__));");
tryItOut("for(let y in []);");
tryItOut("M:switch(<x><y/></x>.__lookupSetter__(\"prop\")) { default: break; ");
tryItOut("with({}) const __noSuchMethod__ =  '' \nL:while((*::*) && 0)export set;");
tryItOut("with({}) let(__iterator__) ((function(){return;})());");
tryItOut("if((#1=[false] .. (<x/>.__noSuchMethod__ = <y><z/></y>)) in (this--)) { if (__parent__.__proto__) {with(prototype)break L;export *; } else {}}");
tryItOut("if(<y><z/></y>) continue M; else  if (*) {export prop; }\n/*for..in*/L:for(let [constructor, __iterator__] = prototype.prop = new RangeError(<x><y/></x>, <x><y/></x>)\n in (constructor for (prop in *))) {export *; }");
tryItOut("while((false) && 0)let __iterator__;");
tryItOut("if(const __iterator__ =  '' , constructor = undefined) export *; else  if (( '' .__iterator__)) yield; else __iterator__ = this;");
tryItOut("{L:switch(true) { case 2: let prop; }/*infloop*/M:do yield <x/>; while(return *::*.valueOf(\"number\")); }");
tryItOut("/*infloop*/for(__parent__; this.__defineGetter__(\"__count__\", new Function); new (033)()) constructor =  /x/g , prop = <x/>;");
tryItOut("yield (<y><z/></y>); const prototype;");
tryItOut("{if(0.1) return <><x><y/></x></>; else yield; const __noSuchMethod__; }");
tryItOut("/*infloop*/for(const __count__; *::*.yoyo(1e81); eval(\"{}\", yield function::function::__iterator__)) {(033 * @foo)(function::__count__.__parent__ = undefined)let (prototype =  \"\" , prop) {  } }");
tryItOut("for(let y in []);");
tryItOut("if(Date(((Math.pow).call), window ? this : 0.1)) {yield;yield ((new Function(\"throw <x><y/></x>;\"))).call(<x><y/></x>); } else  if (false) export *;");
tryItOut("L: let __iterator__ = <x><y/></x>, constructor;");
tryItOut("([,]);");
tryItOut("/*infloop*/L:for(if(this) {<x/>\nlet __iterator__;/*infloop*/for(let __proto__; ((uneval(<x><y/></x>))); (new prop(<x><y/></x>))) {yield; } } else  if (new constructor(3/0.propertyIsEnumerable(\"constructor\"))) ((new Function(\"let prototype = *;\"))).apply else {/*infloop*/M:for(null << __noSuchMethod__; #2=({__parent__: <x><y/></x>.\f( '' )}); new new Function()) export *;with({prototype: __parent__ = undefined}){{}let (__noSuchMethod__ = .2) { return; } } }; (__iterator__) = __count__.__noSuchMethod__ = [,].eval( \"\" ).watch(\"__count__\", (<y><z/></y>).__defineSetter__); ({ __parent__: constructor, __count__: [, , ({ constructor: [] }), ] }) = ++new Boolean()) {while((__noSuchMethod__ <<= <x><y/></x>) && 0){ /x/ ;let  = <x><y/></x>; }(window); }");
tryItOut("{return;export *; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("(@foo);");
tryItOut("/*for..in*/for(const __proto__ in ((/a/gi)(new (((<x><y/></x>.@foo) *= __iterator__))(<y><z/></y>.prop))))/*for..in*/for(__iterator__ in undefined === window) \t/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in [[]]) ; const __count__;");
tryItOut("break ;\n{throw [z1];gc() }\n");
tryItOut("if(([z1,,].valueOf(\"number\")).hasOwnProperty(\"__proto__\").__defineSetter__(\"__count__\", ({}).__lookupGetter__)) {<x/>;export ;throw <x/>; } else  if ([, , ({ __parent__ prop : prototype, __iterator__: [[({ constructor: __iterator__, constructor: function::prop }), prop, , , ({ prop: __iterator__ })], ] })] = <><> </></>) return;\f else {{} }");
tryItOut("L:switch(true) { default:  }");
tryItOut("/*for..in*/for(let __proto__ in <x><y/></x>) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><x><\ty/></x></> in <><x><y/></x></>) {; }");
tryItOut("let __count__ = window, __iterator__ = null");
tryItOut("with({3/0: <><x><y/></x></>//h\n}){{}yield @foo; }");
tryItOut("{var __parent__ = prop;arguments; }");
tryItOut("{return;yield <><x><y/></x></>; }");
tryItOut("L:if(function(id) { return id }(window.isPrototypeOf(constructor), <><x><y/></x></>)) {<x><y/></x>;; } else  if ((void (\fconstructor =  /x/ .__lookupGetter__(\"__iterator__\").yoyo( ''  === *::*)))) {}");
tryItOut("yield window['prop'] = *::* === window;");
tryItOut("/*for..in*/for(const [prototype, prop] = __iterator__.prototype = function::prototype = \nthis in (0 >> <x><y/></x>)) { }");
tryItOut("L:do let (({ __proto__: __count__, __iterator__: delete }) = <x/>.__defineGetter__(\"__count__\", (#1#).__defineSetter__), __count__ = (window - function(id) { return id })) { while((true) && 0) } while((__noSuchMethod__ = .2) && 0);");
tryItOut("/*for..in*/for(var [prop, __parent__] = null in *::* &=  \"\" ) with({prop: function::constructor}){yield *;yield; }");
tryItOut("/*for..in*/L:for(let ((new <x/>()).valueOf(\"number\")) in (--eval(1e-81, 1e81))) {let __iterator__, __count__; }");
tryItOut("yield;");
tryItOut("/*infloop*/for( for each (prop in * :: [z1,,]) for each (prop in window , @foo) for each (__noSuchMethod__ in #3={a:#3#}) for (__count__(<x/>) in <><x><y/></x>/*</>) if (@foo); ((new Function(\"\"))); eval(\"constructor(false) = eval(\\\"return;\\\",  \\\"\\\" )\", ( \"\"  !== \t(-0) === <x><y/></x>))) let (__proto__) { let [] = <x><y/></x>; }");
tryItOut("do L:if(prop) {<x><y/></x>; } else  if ( /x/g )  for (constructor in __count__) while((__noSuchMethod__.propertyIsEnumerable(\"__noSuchMethod__\") === (throw -0)) && 0);");
tryItOut("/*for..in*/for(let new ((<y><z/></y>).watch)( \"\" )['x::__parent__'] in #2=({__iterator__: }) instanceof (gc).call( /x/g , 'fafafa'.replace(/a/g, gc), @foo)) return;");
tryItOut("/*for..in*/for(constructor in (((__count__.(<y><z/></y>)))((<x><y/></x>).apply)))[,,z1]");
tryItOut("gc()");
tryItOut("let (__iterator__, ({ __noSuchMethod__: __count__ }) = *.__lookupSetter__(\"prototype\")) { /*for..in*/M:for(constructor.constructor in (((; .@x:: __parent__))((undefined.propertyIsEnumerable(\"__noSuchMethod__\")))))const constructor = *; }");
tryItOut("if((p={}, (p.z =  /x/ )())) {/*infloop*/for(var __noSuchMethod__; @foo; [,,]) {return; } } else  if (#3={a:#3#}) export *; else yield;");
tryItOut("/*for..in*/for(var __proto__ = ({a2:z2}).__noSuchMethod__ in *.__parent__ = <y><z/></y>) {let (__iterator__) { break L; }/*for..in*/__noSuchMethod__ }");
tryItOut("switch( \"\" ) { case __iterator__.(__count__|=<x><y/></x>): default: /*for..in*/for(let __parent__ in ((( \"\" ).__defineSetter__)(__iterator__.prop))){yield <\tx><y/></x>; }break; break; case @foo.@foo: break; case 8: break;  }");
tryItOut("throw constructor;");
tryItOut("{}");
tryItOut("M:while((yield window < window) && 0){if(((uneval((delete *))))) {return __parent__; }const prototype, __count__ }");
tryItOut("return eval(\"( /x/ );\", {}).@foo;");
tryItOut("var __parent__, __parent__ = [];");
tryItOut("/*for..in*/for(<x><y/></x>[<x/>]['prop'] in __parent__ = <y><z/></y> > @foo) {;let prop = 4.; }");
tryItOut("/*infloop*/while((set.__proto__ getter= ( /x/ ).watch)){const prototype = false\nif(window)  { return <x/> }  else  if (<x><y/></x>) {;; } else {{} }yield constructor; }");
tryItOut("{do {yield; } while((return *;) && 0);if(<y><z/></y>) { if (<bbb xmlns=\"<x><y/></x> ? window : [,,]--\"/*\n*/>yyy</bbb>.([#3={a:#3#} for each (prop in __iterator__)])) /*for..in*//* nogeckoex bug 349964 */L: for  each(var <><x><y/></x></>.eval(<x><y/></x>)['__count__'] in <x/>) __count__, __iterator__ = <x><y/></x>;} else {const __count__, prototype; } }");
tryItOut("with({__parent__: __proto__.__iterator__ = @foo})'haha'.split");
tryItOut("return <><x><y/></x></>;");
tryItOut("L: yield (-1);");
tryItOut("if( \"\" ) (*::*); else export *;");
tryItOut("/*infloop*/do /*for..in*/((/for(const  = (new (([*::* for each (constructor in null)])[1.2e3[__parent__ = <x/>]])(this, <x/> in null)) in ) )/*for..in*/for(const __proto__ in <><x><y/></x></>) {'haha'.split } while((<y><z/></y>)((p={}, (p.z = (function::__noSuchMethod__ = *::*))()), new (({}).hasOwnProperty)(false)));");
tryItOut("return (__count__ = (this.hasOwnProperty(\"__proto__\")));");
tryItOut("let prop, __iterator__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(var new (<x><y/></x>).__defineSetter__(@foo).__parent__ in arguments) return __parent__.__count__ = (({__noSuchMethod__ setter: gc })) *= ;");
tryItOut("if(<><x><y/></x></>) {continue L;yield true; } else  if ( \"\" ) {export *;yield window; } else {continue ;return [1]; }");
tryItOut("/*infloop*/for(const constructor; [ \"\" ].map('haha'.split); __noSuchMethod__.__parent__ = ((prototype for (__noSuchMethod__ in 1.3))) *= ) {<x><y/></x>do {throw @foo; } while(([,,]) && 0); }");
tryItOut("/*infloop*/for(prop = __noSuchMethod__; 5.0000000000000000000000; *) {gc() }");
tryItOut("L: {gc()let prototype = 0/0, prototype = @foo; }");
tryItOut("M:if(\n<x><y/></x>) { if (setter) throw false;} else {gc() }");
tryItOut("/*for..in*/for(prop = prop in __proto__) {try { return; } catch(__count__) {  /x/  }  }");
tryItOut("with({__count__: (prototype)}){yield; }");
tryItOut("/*infloop*/M:for(0.eval(this).__count__; (<><x><y/></x></> & <x/>); <y><z/></y>.((({a1:1}))( /x/ ))) {if([[1]] ? <><x><y/></x></> : @foo\r.__parent__ = (let (constructor, __noSuchMethod__) window)) {(<x><y/></x>); }\t else  if (*::*) {; } else gc()\n\n/*infloop*/for(var __noSuchMethod__; (<x><y/></x>.unwatch(\"constructor\"));  /x/g  in ({a1:1})) default: export __parent__;case 6: break;  }");
tryItOut("eval\nlet __proto__ = null;\n");
tryItOut("/*for..in*/for(__iterator__ in (((new Function).call)((*::*.*))))var __parent__ = prototype;");
tryItOut("L: {M:if(<bbb xmlns:ccc=\"new (const constructor)(0x99)\"><ccc:eee></ccc:eee></bbb>) throw undefined; else gc()return; }");
tryItOut("if(prop) ; else {/*infloop*/for(<><x><y/></x></>\t; <><x><y/></x></>; @foo) {__iterator__ = #1#, prop = <x><y/></x>; } }");
tryItOut("/*infloop*/for(new (+4.)(); (!(return));  < <x><y/></x>.watch(\"prototype\", function  __iterator__ () { yield window; } ).isPrototypeOf(__count__)) {export *;{var __noSuchMethod__, __parent__ = <><x><y/></x></>; } }");
tryItOut("if(({__noSuchMethod__: __count__ || true})) {/*infloop*/for(var prop;  /x/g ; ({a1:1})) {var __parent__ = <><x><y/></x></>, __parent__;gc() }function ([y]) { }; } else  if ((this.zzz.zzz)) {gc(){} }");
tryItOut("yield window[default: break; continue L;break; case 2: break; case  \"\" : [1,2,3,4].map];");
tryItOut("/*infloop*/M:do {{}prototype, __parent__; } while( /x/  ?  : ((function(q) { return q; }).call).call(0 in __parent__, (this++).constructor, <x><y/></x> = \f<x><y/></x>));");
tryItOut("/*infloop*/for((__proto__ = <x/>); (this.__defineGetter__(\"prototype\", function(q) { return q; })); (uneval( /x/g ))) {return prop; }");
tryItOut("yield return;;\nwith({__proto__: <y><z/></y>})const __count__, __count__ = 3;\n");
tryItOut("{function ([y]) { };var __noSuchMethod__; }");
tryItOut("false");
tryItOut("while((*::*) && 0)export __parent__;");
tryItOut("/*infloop*/L:for(const __count__; 1e4; *::*) {export *; }");
tryItOut("{;break ; }");
tryItOut("/*infloop*/L:for(const __iterator__ = new RegExp(); ({ prop: __noSuchMethod__, constructor: prototype }) = (__noSuchMethod__.(<x><y/></x>)); n <<  /x/g .__lookupSetter__(\"prototype\")) if(x::__count__ = window) { if (*::*) gc() else (__iterator__);}");
tryItOut("with({constructor: (eval(\"new (1 for (x in []))()\", function(id) { return id }))})case ++#1#: break; ");
tryItOut("/*for..in*/M:for(let [prototype, __count__] = __noSuchMethod__ = 0.1 in constructor = *::*) {true; }");
tryItOut("let(__parent__ =  /* Comment */({ prototype: prototype }).propertyIsEnumerable(\"__parent__\")) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/for(var ({ function::__proto__: ({ __noSuchMethod__: ({ __iterator__: __proto__ }), __count__: [prototype] }) }) = 'fafafa'.replace(/a/g, function(q) { return q; }); delete = __proto__; (* !== <><x><y/></x></>)) /*infloop*/L:for(( set prototype __count__ (prop, __iterator__)this.zzz.zzz.valueOf(\"number\")); this -= undefined; __count__ = <><x><y/></x></>) throw this;");
tryItOut("break L;");
tryItOut("if((eval(\"([<y><z/></y>])\", *::*).throw(null))) { if ((function ([y]) { })() *  /x/ ) ( \"\" ); else yield;}");
tryItOut("yield; const true;");
tryItOut("{L:if(this) { } else var , constructor = *;while((this.__defineGetter__(\"__noSuchMethod__\", new Function)) && 0){{} } }");
tryItOut("var }\n\nyield ([11,12,13,14].some);");
tryItOut("if(<x/> <= prop.__defineGetter__(\"constructor\", <x/>)) {{}\n{} }");
tryItOut("{}");
tryItOut("const prototype = <><x><y/></x></>, prop;\nreturn;\n");
tryItOut("M:while((\n({a1:1})) && 0){<><x><y/></x></>;(<><x><y/></x></>); }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("export __iterator__;");
tryItOut("{gc()/*infloop*/for(__parent__ = <x/>; 3/0; *::*) throw  \"\" ; }");
