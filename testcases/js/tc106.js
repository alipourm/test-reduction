tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in let (delete = yield = constructor, prop) __proto__(<x><y/></x>)%=3 ? prototype :  \"\" ) {\fvar prop;break M; }");
tryItOut("if(new String()) {{( '' ); } } else  if ([11,12,13,14].sort.hasOwnProperty(\"function::constructor\")) {yield <x/>; } else __parent__, constructor");
tryItOut("for(let y in []);");
tryItOut("let (({ [({ __count__: __proto__, __proto__: __parent__ }), , ({ __iterator__: ({ __parent__: prop }), __parent__: ({ prototype: __count__ }) })]: ({ constructor: ({ prototype: [], __count__: ({ constructor: prototype }) }) }), constructor: __count__ })) { /*for..in*/L:for(let [constructor, __proto__] = window in  /x/g ) {yield <><x><y/></x></>; } }");
tryItOut("for(let y in [5,6,7,8]) with({}) <x/>['__iterator__'] = constructor;");
tryItOut("do /*infloop*/for(const function::__proto__ = <y><z/></y>; <x><y/></x>; __proto__) 3/0; while((with({({ constructor: ({ __iterator__: constructor, __count__: __count__ }), __count__: prop }): [(function ([y]) { })()]}){L: \f{yield #1#;yield; }/*for..in*/for(var prototype in <x><y/></x>) constructor; }) && 0);");
tryItOut("throw __count__;");
tryItOut("M:with({prototype: ({ get __proto__(constructor) { return window.valueOf(\"number\") }  })})constructor = this;\nlet constructor, __parent__;\n");
tryItOut("if(undefined) /*infloop*/for(const __iterator__; \t<><x><y/></x></>; arguments) throw \t[[1]];");
tryItOut("with({}) let(__count__ = prototype = (void prototype), prototype) { return;");
tryItOut("if(__noSuchMethod__) {var __proto__;export *;\nexport prop;\n }");
tryItOut("/*infloop*/while(new Object(<><x><y/></x></>)){yield\nconst prop; }");
tryItOut("do {yield <x><y/></x>;if(<><x><y/></x></>) return <><x><y/></x></>; else {__proto__; } } while((constructor.(((window for each /*\n*/(__iterator__ in <><x><y/></x></>) for each (__count__ in -1) if (arguments))))) && 0);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __iterator__] = <><x><y/></x></> in true) let constructor, prototype;");
tryItOut("with(*::* , <><x><y/></x></>){yield;continue L; }");
tryItOut("if([,,z1] / <y><z/></y>) {gc() } else prototype;");
tryItOut("/*for..in*/for(*::* = new String(<y><z/></y>) in constructor) yield;");
tryItOut("yyy");
tryItOut("/*for..in*/M:for(let prop = <x/> in undefined) let prototype\n");
tryItOut("return  /x/ .__lookupSetter__(\"__proto__\");");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let __parent__; *; <x><y/></x>) {return; }return false;");
tryItOut(" const __proto__;");
tryItOut("throw StopIteration;");
tryItOut("let (__proto__((function ([y]) { })()) = (__parent__ = ({[, , , ]: [11,12,13,14].filter})), constructor) { {export prop; } }");
tryItOut("{(window); }");
tryItOut("/*infloop*/for(*; (function ([y]) { })(); @foo ^  \"\" ) ");
tryItOut("/*infloop*/M:for(constructor; new RangeError([1]); *::*(({}))) {throw false;gc() }\t");
tryItOut("/*infloop*/do let constructor = false, prop = *; while([15,16,17,18].some(3.141592653589793, function::prototype));");
tryItOut("/*for..in*/M:for(const __count__ in (('haha'.split)(/a/gi)));");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __count__] = (return;) in ((<x/>)[__count__]).__noSuchMethod__) {yield; }");
tryItOut("/*for..in*/for(__parent__ =  /x/g  & <y><z/></y> in <><x><y/></x></>) {<y><z/></y> }");
tryItOut("if({} /= window >>>=(void *::*)) constructor else  if (<><{__count__}><!--yy--></{__count__}></>) {return __parent__; } else {with({__noSuchMethod__: <x/>});/*infloop*/M:while(<x><y/>\t</x>){__parent__;[z1,,]; }\f }");
tryItOut("switch((Math.sin())) { default: yield @foo;break; if(__noSuchMethod__) { if (<x><y/></x>) return 1.3;} else {export *; } }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*infloop*/for(let prototype; true; @foo) {this.zzz.zzz; }");
tryItOut("L: with({prop: new __iterator__()})let let = 0, constructor = <x><y/></x>;");
tryItOut("L: /*infloop*/for(let prototype; __iterator__; <><x><y/></x></>) __noSuchMethod__, __noSuchMethod__;/*for..in*/for(var __count__ in true) {break ; }");
tryItOut("if(( /x/  ^= <y><z/></y> += <x/>.__lookupGetter__(\"constructor\"))) {let(__proto__) { throw <><x><y/></x></>; } else  if (__noSuchMethod__.__proto__) {export __iterator__;if(*) false; const __proto__; } else /*for..in*/for(const __proto__ = true in <y><z/></y>) {function (prototype, __parent__) { throw <y><z/></y>; } let prop;\f }");
tryItOut("/*infloop*/L:while(true instanceof window){export __noSuchMethod__;var __iterator__, prop = <><x><y/></x></>; }\n");
tryItOut("M:if((constructor) = [z1] <= <>window</>.((<x><y/></x>.__lookupGetter__(\"prop\")))) { if (3/0) {L:do if({(<><x><y/></x></>); }) { if (<><x><y/></x></>) gc() else __noSuchMethod__ =  /x/g } while(( /x/ ) && 0); }} else export *;");
tryItOut("do {Function } while(((function(q) { return q; })(<><x><y/></x></>, <><x><y/></x></>).__lookupGetter__(\"constructor\")) && 0);");
tryItOut("{export *; }");
tryItOut("\twith(@foo.__count__)gc()");
tryItOut("/*for..in*/for(const prop in <><x>\r<y/></x></>) (({a2:z2}));");
tryItOut("/*infloop*/for(let [((eval(\"[1,,]\", #1# <<= ((yield [1])))))((Function(new Function(<><x><y/></x></>), <x><y/></x>.( /x/ ))))] = 3/0 | (-1); {}(); ()) {/*infloop*/L:while(prototype = __proto__);\r }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in <y><z/></y> == new Iterator()) /*infloop*/for(prop = (yield <x><y/></x>); (({ set delete __proto__ (__noSuchMethod__) { return @foo }  })); Exception(window)) {{} }");
tryItOut("__iterator__");
tryItOut("if([*::*]) {gc() }");
tryItOut("M:with(prototype = __iterator__.prop = new (this)(*))\n{return __noSuchMethod__;__parent__ = prototype; }");
tryItOut("let (prop = (new function /*\n*/ __count__ (constructor) { yield * } () +  ''  != \n(({ set constructor(__count__) { return; }  }))) * <y><z/></y> | <><x><y/></x></>, [, let, ({ __noSuchMethod__: [, ({ __count__: prop }), __iterator__, [[prototype], __count__, [__count__, , prop], ]] }), , ]) { L:if((new let (__proto__, __proto__) new (({a1:1}))(__count__)())) {with({__iterator__: yield @foo}){export *; }{throw this;yield; } } else {if(<><x><y/></x></>) {[1];<x/>; } else  if (Function()) return; } }");
tryItOut("L:while((let return;, prototype = @foo;()) && 0){let constructor; }");
tryItOut("yield\n");
tryItOut("/*infloop*/do {break L; } while((constructor = __noSuchMethod__));");
tryItOut("while(((-1)) && 0){yield; }");
tryItOut("L:do {continue L; } while((((uneval(true)))) && 0);");
tryItOut("/*infloop*/M:while(((<><x><y/></x></>)()).__iterator__ = @foo ^= window){gc()const __noSuchMethod__ = undefined; }");
tryItOut("while((this.zzz.zzz) && 0){gc() }");
tryItOut("{if(<><x><y/></x></>.prop) { if (prototype.__count__ = __parent__) {(<x/>);yield; }} else yield;yield * }");
tryItOut("/*for..in*/M:for(const __count__ = #1=[[<x><y/></x>]] in window) {/*infloop*/do {prop = 1e81, __noSuchMethod__ = true; } while(0x99);prop = <y><z/></y>, constructor; }");
tryItOut("{if(<x><y/></x>) {export __count__;yield 1e4; } else  if (*::*) gc() }");
tryItOut("M:if((<><x><y/></x></>.valueOf(\"number\"))) continue ; else  if (__parent__ = null) var prop = <><x><y/></x></>, __iterator__ = *;");
tryItOut("if(1e4) {yield; } else  if (<x/>) {export __parent__; } else yield  /x/g ;");
tryItOut("with({prop: __parent__.(var __iterator__, __parent__ = *::*)}){/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in (-0)) {(1 for (x in []))(null); }let __proto__ = window; }");
tryItOut("/*infloop*/for((__parent__ = __parent__); <x><y/></x>.throw(null); function ([y]) { } > <y><z/></y>) {switch( /x/g ) { default: break;  } }");
tryItOut("/*infloop*/do __noSuchMethod__+= /x/g ; while( /x/ );");
tryItOut("with((this.__defineSetter__(\"__iterator__\", /a/gi))\n)/*infloop*/for(*::*; [1];  '' ) export __parent__;");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("do {throw *::*;; } while((()) && 0);");
tryItOut("yield;");
tryItOut("if(new /a/gi()) {break ;(new Function(\"return;\")) }");
tryItOut("/*for..in*/for(__parent__ in <x/>) <xxx>{function::__count__}</xxx>\nvar __count__ = window, x::__proto__;");
tryItOut("/*infloop*/for(let prototype; <y><z/></y> === __noSuchMethod__ & @foo;  /x/  instanceof [1,,]) with( /x/ )throw undefined;");
tryItOut("/*infloop*/M:do {export *; } while(window);");
tryItOut("L:if(__parent__.__iterator__ setter= function(y) { yield y; yield;; yield y; }) break ; else  if (<><x><y/></x></>.isPrototypeOf(__parent__)) (1 for (x in [])) else ;");
tryItOut("");
tryItOut("/*infloop*/for(<><x><y/></x></>.isPrototypeOf( /x/g ); this; constructor = constructor.__noSuchMethod__) function(id) { return id };");
tryItOut("/*for..in*/M:for(var prototype in ((uneval([15,16,17,18].some((1 for (x in [])), true))))) {L:if(<y><z/></y>) yield <x><y/></x>; else [1,2,3,4].map }");
tryItOut("{if(\f(*.valueOf(\"number\"))) {[1,2,3,4].map }export __proto__; }");
tryItOut("return");
tryItOut("/*infloop*/for(__parent__.(constructor).__parent__; ( /x/ .valueOf(\"number\")); (new Function)( \"\" .__lookupGetter__(\"constructor\"), 1.3)) return <y><z/></y>;");
tryItOut("while((<><x><y//*\n*/></x></>) && 0)throw *;");
tryItOut("if(__proto__ = (new window(__noSuchMethod__ = <y><z/></y>))) { if (this) {let prop = <><x><y/></x>({ prop: __noSuchMethod__ })>, __iterator__ = <y><z/></y>;break ; const __iterator__; }} else return *;");
tryItOut("{const __noSuchMethod__, __iterator__; }");
tryItOut("/*infloop*/M:do return <x><y/></x>; while(new (<x><y/></x>.(this))());");
tryItOut("__proto__");
tryItOut("if(<><x><y/></x></>) {[1,2,3,4].slice; } else {[1,2,3,4].slicereturn <><x><y/></x></>; }");
tryItOut("while((1e-81 .@x:: constructor @ __parent__ = <x/>) && 0)return this;");
tryItOut("export *;");
tryItOut("let(prop = (-0)) { try { (<><x><y/></x></>); } catch(__count__) { return; } ");
tryItOut("/*infloop*/for((prop.__parent__ getter= ( /* Comment */true).watch); ; ([((constructor.(__parent__)) @ @foo) for (__count__ in (<><x><y/></x></> .@x:: prototype)) if (([1,2,3,4].slice))])) {(constructor); }");
tryItOut("if(((<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", (new Function(\"yield prototype;\")))).watch(\"__parent__\", Math.pow))) {{if(false) { if ( \"\" ) return;} else {const __iterator__, get;return; }\f }M:if(this.__lookupSetter__(\" /x/g \")) { if ((p={}, (p.z = <x><y/></x>)())) {yield; } else {throw prop;<x><y/></x> }} } else  if (<bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb>) let(__iterator__) {  else throw (-1);");
tryItOut("let constructor = <x><y/></x>, __iterator__ = null;");
tryItOut("L:if([1e+81]) {yield; const __count__; }");
tryItOut("if(__proto__) {(this);break ; } else var prototype, __noSuchMethod__ =  '' ;");
tryItOut("L:with({constructor: yield var __parent__; *= <x><y/></x>}){/*for..in*/L://h\nfor(var __count__ = __proto__ in true) {throw <x/>; }var function  __proto__ () { return this }  = this, __iterator__; }");
tryItOut("export prop;");
tryItOut("let ([[], ] = ((0x99)), __count__) { for(let y in []); }");
tryItOut("export *; const __proto__;");
tryItOut("L:if((<><x><y/></x></>.@*.__lookupGetter__(\"__noSuchMethod__\"))) {return;const __noSuchMethod__ = <><x><y/></x></>, prop = __count__; } else  if ([,,z1] ^ #1=[#1#]) {gc()let __proto__ = <><x><y/></x></>; }");
tryItOut("if(prop) { if (4.) export *; else {(prop);(@foo); }}");
tryItOut("L:with(*::*){return; }");
tryItOut("/*for..in*/for(const prop = (<x><y/></x>.function::__proto__)[*.@foo] in  /* Comment */undefined ?  /x/g  : <><x><y/></x></>) {const __noSuchMethod__ = *;L:\fif(function () { return <><x><y/></x></>\t } ) {return; } }");
tryItOut("while((<{function::constructor}>yyy</{function::constructor}>) && 0){if(true) {yield;{} } else {window.unwatch(\"__proto__\")yield <x><y/></x>; }if(<><x><y/></x></>()) {(undefined); } else (<x/>); }");
tryItOut("with(<x><y/\n>\t</x> == <x><y/></x> ? ((p={}, (p.z = <><><y/></></>)())) : (false.__defineGetter__(\"__iterator__\", new Function))){let __proto__, __noSuchMethod__ = 3.141592653589793;var __noSuchMethod__; }");
tryItOut("constructor = __parent__;{( /x/g ); }");
tryItOut("/*infloop*/while( /x/g )");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [15,16,17,18].sort(function (constructor) { return <><x><y/></x></> } , <><x><y/></x></>).__iterator__ in ({})) /a/gi");
tryItOut("constructor, __parent__ = <x/>;\nMath.pow\n");
tryItOut("{}[1,,];");
tryItOut("L: {var __noSuchMethod__, prototype;break ; }");
tryItOut("__parent__ = prop;");
tryItOut("if(((<y><z/></y>)[*])) { if (<x><\ty/></x>) return .2;} else {; }");
tryItOut("return null;if(this.__defineSetter__(\"__parent__\", function (__parent__, constructor)<y><z/></y>).__defineSetter__(\"__iterator__\", -3/0)) { if (prototype.__parent__ * [undefined]) {; }} else export __proto__; const __noSuchMethod__\t;");
tryItOut("if(<><>yyy</></>\f) {yield window; } else {throw  '' ;{__proto__;gc() } }");
tryItOut(";continue M\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in <><x><y/></x></>) {export __parent__; }");
tryItOut("/*infloop*/M:while(__parent__ = __count__.(__parent__ = [[]], __proto__ = window .@x:: undefined)){return (-1); }");
tryItOut("default: ");
tryItOut("throw prop;");
tryItOut("let prototype =  '' , __noSuchMethod__;");
tryItOut("while((<zzz>((uneval(constructor.__parent__ = @foo)))</zzz>) && 0)\n");
tryItOut("{yield constructor; }");
tryItOut("/*infloop*/for((({ set __count__(__parent__) { (window); } , let: constructor.(new ( \"\" )(<x><y/></x>)) })); [15,16,17,18].sort((new Function(\"__proto__ = window;\")), null).__defineGetter__(\" '' \", [1,2,3,4].map).watch(\"prop\", function (__noSuchMethod__, __proto__) { let = <x/>;\t } ); (uneval( /x/  /= [15,16,17,18].filter(-0,  \"\" )))) {yield; }");
tryItOut("__iterator__, prototype;");
tryItOut("while(([15,16,17,18].some([1,2,3,4].slice, 0.1)) && 0)(prop += <y><z/></y>);");
tryItOut("{gc() }");
tryItOut("L: {gc() }");
tryItOut("/*for..in*/for(__count__ in ((function  __parent__ (__count__, prop) { return <employee id=\"1\"><name>Joe</name><age>20</age></employee> } )(*))){/*for..in*/L:for(__count__ in [,,]) {export __parent__;(1.2e3); }continue ; }");
tryItOut("while(((({constructor: __iterator__}))([15,16,17,18].sort(window, <x><y/></x>;))[<x/>]) && 0){break L; }");
tryItOut("{return prop;with({__iterator__: <x><y/></x>})return this; }");
tryItOut("{evalexport __count__; }");
tryItOut(" const prototype;");
tryItOut("if(constructor ? <x/> : true) {yield;function  __count__ () { function(q) { return q; } }  } else  if (<><x><y/></x></> & false) throw .2;");
tryItOut("if(#1=[#1#]) { if (this\n) let __noSuchMethod__ = __count__;} else {}");
tryItOut("let constructor = @foo, __proto__ = window");
tryItOut("L: {yield; }");
tryItOut("if( /x/g  >>> window) {{} } else  if (Iterator()) yield;");
tryItOut("/*for..in*/for(prop in  /x/ ) export *;");
tryItOut("/*for..in*/for(let __count__ in (__parent__ = false)) /*for..in*/ in ((function(id) { return id })(*::* > <y><z/></y>){prop = null;const prototype; }");
tryItOut("yield <x><y/></x> &= <y><z/></y>;/*infloop*/for(const __proto__; prop;  /x/g ) {}");
tryItOut("return window;");
tryItOut("/*infloop*/while(constructor|=prop = <y><z/></y>.eval(this)){/*infloop*/for(var __iterator__; (Number(<><x><y/></x></>)); *) {yield;constructor, __iterator__ = <x/>\nexport __iterator__; }/*infloop*/while(new Function()) }");
tryItOut("/*for..in*/M:for(const [__count__, __noSuchMethod__] = * in __count__) {var __noSuchMethod__ = <x><y/></x>;export getter; }");
tryItOut("/*infloop*/M:for(let true.__lookupSetter__(\"__noSuchMethod__\").constructor = ( /* Comment */*::*.@foo) instanceof <x/>; (yield __iterator__); ((__proto__))) {var constructor = window, __iterator__; }");
tryItOut("gc()");
tryItOut("-0;");
tryItOut("yield\n/*infloop*/L:for(var prototype =  /x/ .__lookupSetter__(\"<><x><y/></x></>\"); __parent__ ? <y><z/></y> : 1.2e3; (this === <y><z/></y>)) {throw <x/>; }");
tryItOut("/*for..in*/for(var __parent__ = {} , undefined in 1.3) function  __parent__ (__proto__, __iterator__)\f { yield <>\r<x><y/></x></> } ");
tryItOut("if(new 'haha'.split()) {/*infloop*/do yield *; while(*); } else continue ;");
tryItOut("let (prototype = __noSuchMethod__%=<y><z/></y>, prototype = .((__count__ for each (__count__ in (function ([y]) { })())))) { if((#1=3/0)) {let __parent__; } else  if ([15,16,17,18].some(((([1,2,3,4].slice).apply).apply).call, <><x><y/></x></>) =  '' .prop) {yield; } else {<><x><y/></x></>yield; } }\nreturn null;\n");
tryItOut("L:while(( /x/  != window) && 0){var __parent__ =  /x/ ; }switch('haha'.split) { default: break; case *::*: return [z1];break; case <x/>: yield;case <y><z/></y>: break; let __parent__, prop = __proto__;var __iterator__ = __parent__, prop = *;var __iterator__ = @foo, constructor;case 8: break;  }");
tryItOut("continue \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in 1e-81) gc()");
tryItOut("/*for..in*/L:for(const [__parent__, prop] = [(false)()].__defineSetter__(\"prop\", gc) in this.zzz.zzz) {L:do  '' ; while((var __noSuchMethod__, __proto__;) && 0); }");
tryItOut("gc()");
tryItOut("__iterator__ = @foo; const __count__;");
tryItOut("(0x99);");
tryItOut("let(__noSuchMethod__ = this.__defineSetter__(\"__parent__\", (( /x/ .@foo)).__defineSetter__)) { for(let y in []);");
tryItOut("{throw <x><y/></x>;var __proto__, __iterator__ = this; }");
tryItOut("{var prop, __iterator__ = <y><z/></y>;with({})var __proto__; }");
tryItOut("export prototype\n");
tryItOut("/*infloop*/L:do {/*infloop*/while( /x/g )continue ;continue L; } while(*::*);");
tryItOut(";if((({ __count__: __iterator__ }) = __parent__)) { if (<><>(function ([y]) { })()</></>) } else {<><x><y/></x></>;let prop = __iterator__; }\n");
tryItOut("/*infloop*/L:while(prop){}");
tryItOut("switch(this) { case 2: break;  }");
tryItOut("if(true) yield 1e-81; else  if (3) {(({})); }__proto__ =  /x/g , __parent__;");
tryItOut("/*infloop*/do ; while(((#1=[[[]]].@foo)[ \"\" .function::prop]));");
tryItOut("/*infloop*/do yield .__lookupGetter__(\"prototype\"); while(false || [,]);");
tryItOut("while(((this.zzz.zzz)) && 0)return  '' ;");
tryItOut(" const __iterator__;");
tryItOut("/*infloop*/for( /x/  + *::*++; __iterator__ = 1e4.@foo; let (__iterator__ = __iterator__ = <y><z/></y>, prototype =  /* Comment */#1#) [[, ], , ] = <x/> >= <x/>.unwatch(\"__iterator__\") *= ((Math.pow).call(*, (++@foo)))) if((this.__defineSetter__(\"__count__\", (((-1)).call).call))) {export __parent__ } else  if (\tnew ((__noSuchMethod__ < <x><y/></x>))(false)) __proto__ = @foo;");
tryItOut("/*for..in*/for([__iterator__, constructor] = __count__.__iterator__ = constructor = this in [15,16,17,18].sort(function(q) { return q; }, @foo === prop)) /*infloop*/while(<xxx>{__noSuchMethod__}</xxx>)export __noSuchMethod__;");
tryItOut("var __iterator__, prototype\n({}).hasOwnProperty");
tryItOut("M:if() { if ( /x/g .__lookupGetter__(\"__proto__\")) {{} } else return;}");
tryItOut("{return @foo; }");
tryItOut("do {} while(((yield __noSuchMethod__)) && 0);");
tryItOut("/*infloop*/for(__parent__%=([,,]).call(<x/>,  /x/g , <x><y/></x>); new (-3/0)(*::*, __proto__); <xxx>{prototype}</xxx>) ;continue ;");
tryItOut("/*for..in*/for(const this.__parent__ in window.eval(arguments)) {if(++__proto__) continue L;\t else  if (({__count__ getter: [1,2,3,4].slice })) (__proto__); else {export constructor;let prop, __noSuchMethod__; }/*for..in*/for(var ({ __iterator__: prototype, __count__: __noSuchMethod__ }) in @foo) export *; }");
tryItOut("/*for..in*/for(const prop = (constructor for each (__noSuchMethod__ in 033) if (this)) in __iterator__ = [[1]]) //h\n{M:if(<x><y/></x> :: true) {default: yield 1e-81;break; case 0: {}break; {}break;  } else throw true; }");
tryItOut("{/*for..in*/for(__count__ in window) return 4.;/*for..in*/for(let __count__ in ((<x/>)(__iterator__))){} } const prototype;");
tryItOut("( /x/  %= __count__).constructor = prototype;");
tryItOut("return ({ __count__: ({ prototype: __noSuchMethod__ }) }) = false.eval(this)[({})];");
tryItOut("/*infloop*/M:for(const constructor; #1=({prop: #1=[#1#]}); <><x><y/></x></> > ({__noSuchMethod__: false, prototype setter: <y><z/></y> })) {;var __noSuchMethod__ = true; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in false.__defineSetter__(\"__parent__\", /a/gi)) with({__count__: prototype}){let __proto__ = -0, __noSuchMethod__;(1e+81); }");
tryItOut("");
tryItOut("/*infloop*/for( /x/ ; *::*; ({})) ;");
tryItOut("gc()");
tryItOut("M:with({__proto__: [15,16,17,18].some(new Function, <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>.(__count__ = constructor))}){let(__iterator__, constructor) ((function(){;})()); }");
tryItOut("with({__iterator__: ({__iterator__: <y><z/></y> }).@foo}/*\n*/)if(prototype) { if (-0) [1,2,3,4].slice} else throw *;");
tryItOut("/*infloop*/do return; while(([({__noSuchMethod__: window})].map((<x><y/></x>).__defineSetter__)));");
tryItOut("L: {continue ; }");
tryItOut("/*for..in*/for(const __parent__.__count__ in (((1 for (x in [])))((.2 & * @ this))))const x::__noSuchMethod__ = <><x><y/></x></>, __proto__;");
tryItOut("/*infloop*/constructor");
tryItOut("let (__count__) { yield function ([y]) { }; }");
tryItOut("M:do {[,,];(<><x><y/></x></>);break M; } while((~function(id) { return id }) && 0);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = ({ __parent__: __parent__ }) = [constructor, __noSuchMethod__, constructor, , __proto__] in <><x><y/></x></>) return;");
tryItOut("with({__proto__: <y><z/></y> != 5})return;__parent__.__parent__ getter: eval");
tryItOut("M:with({__iterator__: (new RegExp())})return *::*;");
tryItOut("return;\nexport __parent__;\n");
