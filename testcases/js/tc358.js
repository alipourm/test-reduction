tryItOut("/*infloop*/for((void __noSuchMethod__ = 1e4); [(this % __iterator__)]; [,]) {window; }");
tryItOut("var prototype = __proto__;\nfor(let y in [5,6,7,8]) let(__parent__, __proto__) ((function(){throw StopIteration;})());\n");
tryItOut("const prop = this;\n{}\n");
tryItOut("let (constructor) { /*infloop*/while(new __count__.(((<><x><y/></x></>)(undefined)))(this.__lookupGetter__(\"__parent__\"), __noSuchMethod__ = 0/0)){; } }");
tryItOut("/*infloop*/do prop = <x/>, prop; while()\nlet (__iterator__ = <x><y/></x> ? <><x><y/></x></> : arguments, ({ __count__: __iterator__, prototype: __count__ })) { /*for..in*/for(const __proto__ in undefined) {(<><x><y/></x></>); } }\nexport prototype;\n");
tryItOut("yield @foo\nthrow [1];");
tryItOut("/*infloop*/do {throw 1e4; } while((return [,,z1])[1e+81]);");
tryItOut("let (prop) { function::__count__, __parent__;export __noSuchMethod__; }");
tryItOut("1e81, __count__");
tryItOut("with((function ([y]) { })())({ constructor: [, , , , ] })");
tryItOut("{}");
tryItOut("/*infloop*/while(false)yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(let constructor in ((({}).hasOwnProperty)(((__iterator__ >> 1e4) > ([ \"\" ])))))export x::__parent__;");
tryItOut("/*for..in*/for(var prop in (((({}).__lookupGetter__).call)(null)))throw *::*;");
tryItOut("throw constructor;");
tryItOut("if(<><x><y/></x></>) {constructor = *, function::__count__ = <x><y/></x>; } else {export constructor;throw __proto__; }");
tryItOut("if(((new (Function)())[prototype = prop])) {yield <x><y/></x>;const __proto__, prop; } else  if (window >>= undefined.valueOf(\"number\")) return; else const __iterator__, __parent__;");
tryItOut("with([constructor] =  /* Comment */(window /= yield)){/*infloop*/M:for(let ({ prop: __count__, prototype: __iterator__ }) = (false).__defineSetter__; <y><z/></y>; ( /x/g )) const constructor;/*infloop*/for( ''  != (*::*\n); Object('fafafa'.replace(/a/g, true), prop); ((__noSuchMethod__ = __parent__ = undefined))[yield window]) L:if(@foo.watch(\"prototype\", function::__iterator__)) { if () throw true; else M:while(( \"\" ) && 0)gc()} }");
tryItOut("throw 0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (try { this.zzz.zzz; } catch(__noSuchMethod__) { __parent__; } ) in <x><y/></x>.(window)) /*for..in*/M:for(const __count__ = __noSuchMethod__ in *::*) export *\n");
tryItOut("gc()");
tryItOut("switch(Array().__defineGetter__(\"__proto__\", function(q) { return q; })) { default: break;  }");
tryItOut("/*infloop*/for(__count__;  ''  || *; @foo.throw(<x><y/></x>).__defineSetter__(\"true\", function  __count__ (__parent__)false)) {*::*; }");
tryItOut("for(let y in []);");
tryItOut("switch(({ constructor: ({ __noSuchMethod__: __proto__, constructor: constructor }), __noSuchMethod__: ({ __proto__: prop, constructor: gc() }) }) = (__parent__ = <x><y/></x>)) { default: break; case ([15,16,17,18].filter\f(( /x/ ).watch, *)) for (prototype.constructor in  \"\" ) for each (__noSuchMethod__ in constructor) for (__count__ in __proto__): /*for..in*/for([prop, __noSuchMethod__] = ('fafafa'.replace(/a/g, Math.sin)) in this[*::*])  /* Comment */<></>.prototypecase __iterator__.__proto__ = (true).call(<bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb>[ '' ], ): case ( '' )((function ([y]) { })()) = ((*)(<x><y/></x>, constructor)): /*infloop*/for(const prototype = new <><x><y/></x></>([z1], window); new (@foo).__defineSetter__(false).isPrototypeOf(((yield @foo))); false) {__iterator__, prop = ({a1:1}); }break; case 2: return;case - /x/  |= <><x><y/></x></>: break;  }");
tryItOut("(<x><y/></x>);\nwith({prop: ( /* Comment */ /x/g )}){ }\n");
tryItOut("/*infloop*/do {gc()let __proto__ = #1=[#1#]; } while(#1=[#1#]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in 3.141592653589793) {const __noSuchMethod__, __iterator__ = window; }");
tryItOut("L: {/*for..in*/for(prototype = window in *) {(window);yield; }(<><x><y/></x></>); }");
tryItOut("if(this.__defineGetter__(\"delete\", ( /x/ .__lookupGetter__(\"__count__\").*).watch)) return 4.; else  if (constructor.__iterator__ =  for (prop in new (eval)()) for each (__noSuchMethod__ in <x><y/></x>) if (*)) constructor = #3={a:#3#};");
tryItOut("prototype = *, prototype =  \"\" ; const constructor;");
tryItOut("do let __noSuchMethod__, prototype = [,]; while((__iterator__.hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("if(true) { if (window) { }} else {function(q) { return q; } } const prop;");
tryItOut("/*for..in*/for(let __count__ in ((({}).__lookupGetter__)(--__count__.@foo))){export __noSuchMethod__; }");
tryItOut("{continue L; }\n\n");
tryItOut("/*infloop*/do export *;\t while(<x/>);");
tryItOut("<x><y/></x>;");
tryItOut("let(__proto__ = this.__defineGetter__(\"__proto__\", /a/gi), __proto__) ((function(){try { <x/>; } catch(__proto__ if (function(){})()) { (4.).watch } catch(__parent__) {  } })());");
tryItOut("switch([15,16,17,18].sort(gc, <{x::__noSuchMethod__}><!--yy--></{x::__noSuchMethod__}>.((null.watch(\"constructor\", ((({}).hasOwnProperty).call).call))))) { default: case (p={}, (p.z = this)()).yoyo(__parent__|=constructor): case eval(\"if(this >>> <><x><y/></x></>) gc() else {let prop; }\", ((prototype.(<><x><y/></x></>)).valueOf(\"number\")).throw(this.zzz.zzz)):  }");
tryItOut("return\nexport *\n");
tryItOut("{/*infloop*/for(const constructor; new (<x><y/></x>)(<x/>); (uneval(<x><y/></x>))) {-1;yield; } }");
tryItOut("/*infloop*/for(var __noSuchMethod__; this.__defineGetter__(\"prop\", function () { return <x/> } ); (yield)) {yield prop;export *; }");
tryItOut("{return; }");
tryItOut("for(let y in [5,6,7,8]) return  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */(({a1:1}) if (#3={a:#3#})).@*");
tryItOut("{}");
tryItOut("with({}) { ; } ");
tryItOut("while((((<><x><y/></x></>).call(this, -1,  \"\" )) >>= let (__noSuchMethod__ = this) (-0)) && 0)yield prop\n");
tryItOut("return;");
tryItOut("switch(<x><y/></x>) { case window: case 7: (<><x><y/></x></>);default: break; break; break; __noSuchMethod__break;  }");
tryItOut("if((new <><x><y/></x></>)) { if (__proto__.__noSuchMethod__) {throw <><x><y/></x></>; }} else {yield;return function(id) { return id };\nyield true;\n }");
tryItOut("/*infloop*/while((({prop: __parent__ })).hasOwnProperty(\"x::prototype\")){let (prop, setter = <x/>) { yield; } }");
tryItOut("with(<x/>)export *;");
tryItOut("for(let y in [5,6,7,8]) __proto__ = prototype;");
tryItOut("__iterator__.prop = constructor;");
tryItOut("return; const constructor;");
tryItOut("/*for..in*/L:for(const __proto__ in <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")) {__noSuchMethod__ = 0x99, prop; }");
tryItOut("L:with({__parent__: {}})");
tryItOut("{let __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("L: let prototype;");
tryItOut("L: /*for..in*/M:for(__count__ = <><x><y/></x></> in <y><z/></y>) {throw <x><y/></x>; }\nM:if(<y><z/></y>.__lookupSetter__(\"__proto__\")) { if (* >>= <x><y/></x>) {[z1];(<x><y/></x>); } else { '' ;const __noSuchMethod__; }}\n\n");
tryItOut("for(let y in []);");
tryItOut("export __parent__\n const constructor;");
tryItOut("/*infloop*/for(constructor = <x\t><y/></x>.eval(this); prop = *::*; (undefined.unwatch(\"__iterator__\"))) {throw __count__; }");
tryItOut("if(@foo instanceof new  /x/g ) { if ([15,16,17,18].some(<y><z/></y>.<x><y/></x>, (constructor.__parent__ setter= ('haha'.split).call).__defineSetter__(\"__noSuchMethod__\", false))) {;'haha'.split\n }} else /*for..in*/for([__noSuchMethod__, __proto__] = \f__noSuchMethod__ in <x><y/></x>) ");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((eval)(<><bbb xmlns:ccc=\"(throw <x><y/></x>)\"><ccc:eee></ccc:eee></bbb></>)))/*infloop*/for(var prop = (window.propertyIsEnumerable(\"function::prop\") &= <><x><y/>\n</x></> %  /x/g ); false--; ((p={}, (p.z = <x/>)())['__count__'] = __noSuchMethod__ == <x><y/></x>.yoyo(false))) ( '' );");
tryItOut("/*infloop*/for(let prototype = <><x><y/></x></>; prop = [,]; (<><x><y/></x></> % this)) { }");
tryItOut("prop = <x><y/\t></x>");
tryItOut("{throw #1=[#1#];/*infloop*/L:for(window;  \"\" ; <x><y/></x>) return; }");
tryItOut("break \f\n{}");
tryItOut("return null\n<><x><y/></x></>;");
tryItOut("/*for..in*/L:for(let __parent__ in (yield <x><y/></x>)) ;");
tryItOut("try { throw StopIteration; } catch(prototype) { __iterator__ = __count__; } finally { {/*for..in*/L:for(constructor in ((Function)(#1#))){throw 3;throw  /x/g ; } }; } ");
tryItOut("/*infloop*/M:for(__proto__; null; (-[15,16,17,18].filter(/a/gi, <x><y/></x>)) *= (eval(\"/*infloop*/do {return;yield; } while(prop);\", (<y><z/></y>.valueOf(\"number\"))))) {/*for..in*/for((false)(<x><y/></x>) in (((1 for (x in [])))(<><x><y/></x></>.unwatch(\"__noSuchMethod__\"))))L:while((*::*) && 0)gc()return <x><y/></x>; }");
tryItOut("L:with({__parent__: (__proto__.prop = __parent__ =  \"\" .__lookupSetter__(\"__proto__\"))}){/*for..in*/M:for(const __iterator__ = <><x><y/></x></> in undefined) {return;yield; }while(((*::*)[null]) && 0){continue M;var __count__; } }");
tryItOut("/*for..in*/for(const prototype in ((function(q) { return q; })(__count__.__noSuchMethod__ setter= function(y) { yield y; throw {};; yield y; }))){yield; }");
tryItOut("for(let y in [5,6,7,8]) throw __count__;");
tryItOut("/*infloop*/for((p={}, (p.z = prototype = \t(<><x><y/></x></> === \f<><x><y/></x></>))()); ((yield <x/>).watch(\"prop\", [1,2,3,4].slice)).\tthrow(((p={}, (p.z = <x><y/></x>)()).__parent__ = <y><z/></y>++)); new (get.(<x><y/></x>))((({a2:z2}) >>> prop)) ? undefined : __count__.__noSuchMethod__ &= ((@foo)[@foo])) if(((this.__defineSetter__(\"__proto__\", Function)).watch(\"prototype\", function  prop (prototype, __proto__)4.))) {; } else  if (new (<><x><y/></x></>[<x/>])((Function(@foo)))) {yield; }");
tryItOut("if((yield this.zzz.zzz)) {;return; } else  if ( \"\" ) switch(<><x><y/\f></x></>) { case 7: yield @foo; }");
tryItOut("if(.throw(break L)) {switch(__proto__.constructor = false += (([1,2,3,4].map).apply)) { default: break; case @foo: throw 3.141592653589793;break;  } }");
tryItOut("if((#2=[<bbb xmlns=\"<x><y/></x> <<=  '' \"> </bbb>])) { if (yield  \"\" ) var constructor; else prop, prototype = <x><y/></x>;}");
tryItOut("return (({constructor:  /x/g .__lookupGetter__(\"__proto__\") }));");
tryItOut("/*infloop*/for(1e-81; ;  /x/g ) var constructor = <y><z/></y>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var constructor = [11,12,13,14].filter in [[1]] *=  /x/ ) const __noSuchMethod__, function::__parent__");
tryItOut("throw undefined;");
tryItOut("if(<x/>.valueOf(\"number\")) { if (3.141592653589793) {continue M; } else export *;}");
tryItOut("M:if(new *::*(<x/>)) {function  constructor (__proto__, prop) { yield  \"\"  } if(<><x\t><y/></x></>) continue L; else  if (@foo) {export *;export *; } }");
tryItOut("export constructor\n/*for..in*/for(let __iterator__ in window) gc()");
tryItOut("while(((uneval(__iterator__))) && 0)");
tryItOut("/*infloop*/M:for(<y><z/></y>; __proto__; window) (*)\n{{} }\n");
tryItOut("__proto__ = constructor;");
tryItOut("M:if([[,] if (@foo)]) { if ((yield  '' )) {(window); } else {return; }}");
tryItOut("throw <y><z/></y>\n\nif([1]) break M; else {throw <><x><y/></x></>; }\n");
tryItOut("/*for..in*/for(var __noSuchMethod__.__proto__ in ((function  __noSuchMethod__ (__proto__) { export *; } )(prop = __iterator__))){yield; }");
tryItOut("[1,2,3,4].map\n/*for..in*/M:for(var __iterator__ in <x/>.__defineGetter__(\"__proto__\", (1 for (x in [])))/*\n*/) {return <x><y/></x>; }");
tryItOut("/*infloop*/do return 0; while((@foo.unwatch(\"__iterator__\")));");
tryItOut("/*infloop*/while(Number(<><x><y/></x></>)){return 1e-81;yield; const __iterator__; }");
tryItOut("yield *;\n/*for..in*/for(__proto__ = [] in @foo) let constructor;\n");
tryItOut("/*infloop*/\tM:for({}; delete #1=({__iterator__: <x/>}); #1=<><xxx>{__count__}</xxx></>) switch((__noSuchMethod__)) { case (-__noSuchMethod__|=*::*): case 6: (undefined);export __iterator__;break;  }");
tryItOut("/*infloop*/while([,,] & this.__noSuchMethod__){( '' );const prop; }");
tryItOut("{__count__ = arguments;export __noSuchMethod__; }");
tryItOut("gc()");
tryItOut("L:if(*) function  prop () { export *; }  else  if (0.1) {[,] }");
tryItOut("let(prototype) { for(let y in []);");
tryItOut("with({}) { let(({ __parent__: ({ __count__: ({ constructor: ({ prototype: __proto__, __proto__: __proto__ }), prototype: __count__ }) }), __proto__: [({ __count__: prototype, __noSuchMethod__: ({ __iterator__: prop }) })] }) = (+*::*)) ((function(){yield <><x><y/></x></>--;})()); } ");
tryItOut("/*infloop*/for(let __parent__; ( __proto__, prop = * true)(((Math.pow)(function::__noSuchMethod__, <x/>))); (p={}, (p.z = [prop\t for each (__parent__ in false)])())) const __noSuchMethod__ = <x><y/></x>, prototype;");
tryItOut("{}\n{gc()const __iterator__ = <><x><y/></x></>, prop = false; }\n");
tryItOut("if([true].sort(function  x::constructor (prototype, __count__) { return <x/> } )) {var __proto__;export __count__; } else  if (<><x><y/></x></>) {gc() } else {#1#; }");
tryItOut("const prop = <><x><y/></x></>, prop = this;");
tryItOut("/*for..in*/for(const [prototype, prototype] = @foo.valueOf(\"number\") in __noSuchMethod__) {yield function(id) { return id }; }");
tryItOut("M:if(((({}).__lookupGetter__)(__iterator__.throw(null)))) { if (<xxx {__count__}={(delete null)} />.((<x><y/></x> || <y><z/></y>)).__parent__) {yield;export *; }} else export __noSuchMethod__;");
tryItOut("");
tryItOut("M:while(((#2= '' )) && 0)(getter);");
tryItOut("/*for..in*/for(each = ([ \"\" ].map(1e+81)) in  /x/ ) (prop); const __proto__;");
tryItOut("/*for..in*/for(let __count__ = [<><{__proto__}><ccc:ddd>yyy</ccc:ddd></{__proto__}></>] in new (<x/>)(<><x><y/></x></>, <y><z/></y>)) {{} }");
tryItOut("if( \"\" (-1, *::*)) { if (<><\fx><y/></x></>) } else return;");
tryItOut("return;");
tryItOut("/*for..in*/M:for(let __parent__ = arguments in <y><z/></y>) {gccontinue M; }");
tryItOut("L: ;");
tryItOut("with({__count__:  /x/g })let __count__ = <x><y/></x>, __noSuchMethod__;");
tryItOut("M:if(new ([1,2,3,4].slice)(window.__lookupGetter__(\"__iterator__\"), <x/>.__proto__ = __noSuchMethod__\f)) { if ( /x/  ^ [[]]) L:if(new new null(( /x/ )[this], ({}))((<><x><y/></xtry { const __iterator__ = window, __proto__; } catch(prop) { export __parent__; } finally { yield <><x><y/></x>\t</>; } ></>.__defineSetter__(\"__proto__\", [1,2,3,4].slice)))) switch(*) { default: break;  } else  if (({ __parent__: ({ prototype: __iterator__, __iterator__: __count__, __proto__ = <x/> }), prototype: [prop, , constructor, prop, prop] }) = [, __iterator__, , [, ]]) } else /*for..in*/for(const __proto__.constructor in ((function(y) { yield y; if(__iterator__ = <><x><y/></x></>) return; else  if (<x/> === this) yield prop;; yield y; })(__noSuchMethod__.__proto__))){L:with(<x><y/></x>){let prop =  /x/g , __count__; } }");
tryItOut("(__parent__) = prototype;");
tryItOut("return;");
tryItOut("L:with({__noSuchMethod__: ++throw {} != <><x><y/></x></>(__noSuchMethod__//h\n).__count__}){yield undefined; }");
tryItOut("/*for..in*/for(let prop.__iterator__ in @foo) {({}).__lookupGetter__let constructor; }");
tryItOut("/*for..in*/for(const __parent__['__noSuchMethod__'] in (('haha'.split)()))<x/>;");
tryItOut("with({}) { return; } ");
tryItOut("while(([, ({ prototype: [[]], prototype: ({ __noSuchMethod__: ({ __parent__: [, [__proto__, , __parent__, , ]], constructor: [, ] }), __proto__: ({ x::__iterator__: __iterator__, constructor: ({ __proto__: ({ constructor: prototype, __parent__: __count__ }), __proto__: each }) }) }) }), ]: <//h\n><//h\nbbb xmlns:ccc=\"({__iterator__: <y><z/></y> :: eval(\"export *;\", <y><z/></y>)})\"><ccc:eee></ccc:eee></bbb></>) && 0){if(<x><y/></x>) (function ([y]) { });/*infloop*/for(([1,2,3,4].map).call(constructor, ); (<x/>)[<x/>]; __iterator__ = <x><y/></x>) {({}).hasOwnProperty } const __count__; }");
tryItOut("__parent__ = prop;");
tryItOut("/*for..in*/for(let prop = (__parent__.prop ? <x><y/></x>.(<x><y/></x>) : 1e4.prototype+=((window)(<y><z/></y>))) in (this.__defineGetter__(\"prop\", <><x><y/></x></>))) ");
tryItOut("/*infloop*/do for(let y in [5,6,7,8]) this.zzz.zzz; while((yield <><{constructor}><ccc:ddd><x><y/></x> </ccc:ddd></{constructor}></>));");
tryItOut("let(({ each: __noSuchMethod__ }), constructor = this |= <><x><y/></x></>) { __proto__ = __parent__;");
tryItOut("(({a2:z2}));break L;");
tryItOut("do M:switch(<x/>) { case <><x><y\t/></x></>: if( /x/g ) { if ({}) {yield constructor; } else let {(false); };}break;  } while(((#1=[window])) && 0);");
tryItOut("if(__proto__: *::*) {} else  if ( \"\" )  else try { throw prop;/*\n*/ } finally { throw [[1]]; } \nL:if(new RangeError(null.@*).valueOf(\"number\")) { if ((prototype = <x/> ^= [11,12,13,14].map)) const __noSuchMethod__, prop = *::*; else (-1);}\n");
tryItOut("if( /x/  ? __proto__.__iterator__ =  /x/  : <y><z/></y>.hasOwnProperty(\"__proto__\")) { if (<x/>) prop: set++} else return;");
tryItOut("{do {; } while((<x/>) && 0); }");
tryItOut("/*infloop*/do @foo; while(\n<x><y/></x>);");
tryItOut("/*infloop*/for(var __count__ = @foo; 5.0000000000000000000000.__defineGetter__(\"__parent__\", function  __noSuchMethod__ ()<x><y/></x>); ~[11,12,13,14].sort) {M:if( /x/ .__count__) {yield [z1];var __count__ =  \"\" , __parent__; } else  if (* ^= <y><z/></y>.throw((<y><z/></y>)[<x/>]))  else {export __proto__; }if((__parent__.throw(*::*) >>= this)) { if (((<x/>).watch(function ([y]) { }, @foo))) {(window); }} else  }");
tryItOut("if((<x><y/></x>.yoyo(null))) { if ((p={}, (p.z = [[]])())) {{} }} else {prop }");
tryItOut("if((this / <y><z/></y>)) yield; else  if (new Function(<>export prop;</>, 1e+81)) gc() else {export *; }");
tryItOut("{throw 1e+81; }");
tryItOut("for(let y in [5,6,7,8]) let(({ __iterator__: [, ({ prop: prototype, __proto__: \n__iterator__ }), ({ __noSuchMethod__: prop }), , ({ prop: __iterator__, __noSuchMethod__: constructor })], __noSuchMethod__: __parent__ }) = (yield new (function () { {} } )(3/0,  '' ))) ((function(){{}})());");
tryItOut("break M;\nnull;\n");
tryItOut("do const __noSuchMethod__; while(((<y><z/></y>\n)) && 0);");
tryItOut("/*infloop*/for(const prop; null; <x/>) break ;");
tryItOut("if(__noSuchMethod__ = (~<x><y/></x>)) { if (+constructor = prop) {gc()<x/>; }} else ;");
tryItOut("do {if(((prototype\r.(({a2:z2}))) >= <y><z/></y>.yoyo(<y><z/></y>)) >> ({ __iterator__: __proto__ }) = eval(\" \\\"\\\" \",  \"\" )) /*infloop*/for(const constructor = function::__noSuchMethod__; ({a1:1}); *) break ; else  if ([__iterator__.__iterator__ = <x><y/></x>].some(0x99)) {(window);window; } else {let __noSuchMethod__ = __iterator__;<y><z/></y>; } }\r while(([1]) && 0);");
tryItOut("L: {Math.sinthrow -3/0; }");
tryItOut("/*infloop*/do {if(this.__defineGetter__(\"constructor\", ({}).hasOwnProperty)) export __parent__;with((<><x><y/></x></>())){const prop;gc() } } while(({__proto__ getter: this,  set __parent__ __iterator__ () { yield __iterator__.\f__iterator__ setter= __parent__ }  }));");
tryItOut("if(<bbb xmlns=\"(__noSuchMethod__)\"><ccc:ddd>yyy</ccc:ddd></bbb>) {try { throw function::__parent__; } catch(prop if (function(){with({}) return false.__proto__;})()) { this.zzz.zzz; } catch(__parent__) { with({}) { return; }  }  } else  if (new (#3={a:#3#})()++) let constructor, prototype;");
tryItOut("prototype(prototype) = set;");
tryItOut("let ([, [, , , , function::prototype]] = <employee id=\"1\"><name>Joe</name><age>20</age></employee>) { throw prop; }");
tryItOut("if([__count__, prop, , constructor, ] = (new function(q) { return q; }(null, <y><z/></y>))) __iterator__; else  if (eval(\"constructor.eval({})\", (window %= null))) {let constructor, __parent__; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(let prototype in function ([__iterator__, constructor], __noSuchMethod__) {  } ()) {(function ([y]) { })();yield <y><z/></y>; }");
tryItOut("L: {/*for..in*/for(const ({ prototype: __parent__ }) in <x><y/></x>.(this)) break \n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var [function (prototype) { const constructor =  /x/g , __proto__; } , ({ prop: __noSuchMethod__ })] in (window.prop)) {return; }");
tryItOut("L:with({__iterator__: <y><z/></y>})yield this;");
tryItOut("if(<x><y/></x> === this) { if (prototype.(null)) {yield;break L; } else return [,,];}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in  \"\" ) {__noSuchMethod__ = 1e4, constructor;export *; }");
tryItOut("L: export *;");
tryItOut("gc()\nexport prop;");
tryItOut("{return 033; }");
tryItOut("<x><y/></x>\n");
tryItOut("/*for..in*/for(var [constructor, prop] = ((yield <><x><y/></x></>)) in <x><y/></x>) export *\n");
tryItOut(" get constructor(prop, prototype) { return __noSuchMethod__.__lookupGetter__(\"prototype\") } \n");
tryItOut("if(<y><z/></y>.__defineSetter__(\"null\", function(q) { return q; })) { if ((<x><y/></x>[1.2e3])) export __noSuchMethod__;} else export __count__;");
tryItOut("\t[1,2,3,4].map\n{}");
tryItOut("if(null.eval(new (prototype)').isPrototypeOf((p={}, (p.z = <><x><y/></\tx></>)()))) {var prop = __parent__;export __count__; }");
tryItOut("return;");
tryItOut("/*infloop*/for((< xmlns:ccc=\"(({}).__lookupGetter__)()\"/*>)<ccc(/eee>ccc(/:</bbb>; this.__defineGetter__(\"__noSuchMethod__\", function::prototype.__lookupSetter__(\"__count__\")) instanceof new (__proto__.__defineGetter__(\"constructor\", Math.sin))( \"\" , ( get __count__() { \freturn  ''  } )[ /x/ ]); __proto__) {with({__noSuchMethod__: let (__parent__ = this, __count__) <x/>})(var __proto__ = <x><y/></x>, prop);\nbreak ; }");
tryItOut("/*for..in*/for(prop in ((gc)( /x/g )))return;\nexport prop;\n");
tryItOut("/*for..in*/for(var <y><z/></y>['prop'] in 'fafafa'.replace(/a/g, <y><z/></y>)) continue L;\n(this);\n");
tryItOut("while(([11,12,13,14].some) && 0)return;");
tryItOut("if(*) (<y><z/></y>);");
tryItOut("while((((Math.pow).call(@foo, <x><y/></x>, prop))) && 0)true\n/*infloop*/for(let [, , ] = 1.3; (__noSuchMethod__.(3.141592653589793 = window)); (({__parent__: undefined })[*.hasOwnProperty(\"prop\")].propertyIsEnumerable(\"constructor\"))) {if(<><x><y/></x></>) { if (true\n) {yield;gc()\r } else { /x/ ; }} }");
tryItOut("L:do {( \"\" );prop = 0.1; } while((0/0) && 0);");
tryItOut("if(yield this.__noSuchMethod__) throw __count__; else L:if([11,12,13,14].map) { if ((undefined.watch(\"constructor\", [1,2,3,4].map))) var __parent__; else prototype, __parent__ = true}");
tryItOut("let (prop = (* >>  '' )) { var prototype = 'fafafa'.replace(/a/g, constructor); }");
tryItOut("let constructor =  \"\" ;");
tryItOut("/*infloop*/for((({__count__: [<><x><y/></x></>prop, __noSuchMethod__;] })); new (constructor.function::__iterator__)((__parent__.(undefined /= *::*)), function () { return @foo } ); ([<><x><y/></x></>])) __noSuchMethod__.valueOf(\"number\");");
tryItOut("__noSuchMethod__ =  \"\" , __proto__;");
tryItOut("if(#3={a:#3#}) { if (window) {throw let <x><y/></x>;;gc() } else prop;}");
tryItOut("<><x><y/></x></>.hasOwnProperty(\"window\")\n");
tryItOut("{(@foo);var __proto__ = true, __count__; }");
tryItOut("switch(false) { case <>\r<x><y/><\r/x></>: break; case 2: return;break;  }");
tryItOut("if((new (<x><y/></x>).__defineSetter__())) {if(new ((({}).hasOwnProperty).call)(0) ? Exception( /x/ ,  \"\" ) : ([@foo)) { if ((<x><y/></x>.watch(\"function::prototype\", ([1,2,3,4].map).call))) {{}return prototype; } else {gc() }}/*infloop*/while(this.__defineGetter__(\"__iterator__\", function  __noSuchMethod__ (prop, __iterator__) { return <><x><y/></x></> } ))throw <x><y/></x>; }");
tryItOut("if(<><x><y/></x></>.*) { if (new (gc)()) {return; } else {/a/gi }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(/*for..in*/L:for((__iterator__) in ((([1,2,3,4].map).apply)(<><xxx {constructor}={__iterator__ = [,,]} /></>)))throw *::*; in (prototype: , prop: __proto__ })window  = *::*) , (+this)) {this.zzz.zzz;{}\f }");
tryItOut("with(<x/>)return  \"\" ");
tryItOut("\fL:if(<x/> === \tconstructor >>>=(new (prototype.__iterator__)())) {/*infloop*/for(let __proto__ = false; [z1];  /x/ ) {} } else  if ( /* Comment */#1# / (3 ? *::* : <y><z/></y>__noSuchMethod__ for (constructor in <><x><y/></x></>))) {yield <><x><y/></x></>; }");
tryItOut("L:if((constructor = <y><z/></y> || null ^= constructor = __noSuchMethod__ = true\n)) return; else  if (([(new this.propertyIsEnumerable(\"__noSuchMethod__\")(-- '' , *)).call(({ prop: __noSuchMethod__ }) = __parent__, ) && (({a2:z2})\n) for (prototype in 0)].sort((1 for (x in [])))))  let ");
tryItOut("if(\n({constructor getter: (1 for (x in [])), let setter: (new (1.2e3)()) })) if(([1,2,3,4].slice.__lookupSetter__(\"prototype\"))) { if ((<y><z/></y>)(-1,  /x/g )[<y><z/></y>.__defineGetter__(\"prototype\", <x><y/></x>)]) continue ; else {yield *::*; }} else  /* Comment */<><x><y/></x></>;");
tryItOut("yield function (prototype) { yield *::* } ;");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("L: ;");
tryItOut("\n\n\nprop, constructor = true;\n");
tryItOut("for(let y in []);");
