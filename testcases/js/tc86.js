tryItOut("with({prototype: ({a1:1})()}){ }");
tryItOut("if(({__count__: window })) yield; else  if ([, prototype, ] =  /* Comment */function(id) { return id }) {yield;function (__parent__)*::* }");
tryItOut("export __proto__");
tryItOut("/*infloop*/while((p={}, (p.z = ({a1:1}))()))const __parent__, __proto__;");
tryItOut("export __iterator__\n");
tryItOut("if(gc().__lookupSetter__(\"__noSuchMethod__\")) {export __count__;(1.2e3); } else {{} }");
tryItOut("throw StopIteration;");
tryItOut("if(((<x><y/></x> .. __iterator__).eval(<y><z/></y> !=  /x/ ))) {0x99;if(this) {return <><x><y/></x></>; }\t }");
tryItOut("/*infloop*/L:for(const prototype; let (__count__, __count__ = 1.2e3) <><x><y/></x></>; ({ get prop prototype ()constructor: this })) {break ; }");
tryItOut("continue \n");
tryItOut("if(<><x><y/></x></>) { if (__noSuchMethod__) {continue L; } else (null);}");
tryItOut("{};");
tryItOut("constructor = *::*, __count__ = *::*");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("let (({ __noSuchMethod__: __proto__ }) = 1e+81 && __parent__, __count__ = <y><z/></y>)\t { ; }");
tryItOut("L:while((#2=({__parent__: 033})) && 0){if(({a1:1})) return window; else var __proto__, __noSuchMethod__;M:if(([1e+81].sort(new Function))) {break M;Math.pow } }");
tryItOut("switch((window ? 033 : *::*).isPrototypeOf((yield undefined))(prototype = <><x><y/></x></>)) { case 9: with({}) for(let y in [5,6,7,8]) new Functionbreak; with({}) prototype = prototype;break; default: with({__proto__: constructor}){break M;yield; } }");
tryItOut("function(q) { return q; } const __proto__;");
tryItOut("\n");
tryItOut("with(window);");
tryItOut("/*for..in*/for(var prototype in ((/a/gi)(new 4.(<x/>, #3={a:#3#})))){break M; }");
tryItOut("/*infloop*/do {continue ;gc() } while([undefined].filter(*));");
tryItOut("(*\n)\n");
tryItOut("return (\tconstructor =  '' );");
tryItOut("/*for..in*/for(let constructor(<></>) in ({a2:z2})) const prop;");
tryItOut("L: ;");
tryItOut("yield __noSuchMethod__ = <><x><y/></x></> ? @foo-- : <><x><y/></x></> ? (-0) : #3={a:#3#};");
tryItOut("switch(arguments) { default: case <><ccc:ddd></ccc:ddd></>: case ({__noSuchMethod__: ({__parent__: ([z1])[#1#], __iterator__ getter: function(y) { yield y; eval; yield y; } }) }): let (__parent__ = ((true , <x><y/></x>).eval(true--))) { do return  '' ; while((1e+81) && 0) }break; break;  }");
tryItOut("function () { function  prototype (prototype, constructor) { return 3/0 }  }  const prototype;");
tryItOut("/*for..in*/L:for(__count__ = [prototype] = ({prop:  \"\"  }) in <y><z/></y>) {yield <x><y/></x>;{}; }");
tryItOut("/*infloop*/for(<>[1,,]</>; (({constructor setter: Math.pow })).watch(\"prop\", [1,2,3,4].map); (prototype setter: )) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  /x/g ) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.__count__ in [[1]]) export *;");
tryItOut("<><bbb xmlns:ccc=\"(__proto__)\"><ccc:eee></ccc:eee></bbb></>;");
tryItOut("yield <x/>\n");
tryItOut("with({}) { <x/>; } \n");
tryItOut("{{yield; } }");
tryItOut("yield this.zzz.zzz\n/*infloop*/L:for(#1#;  \"\" ; *) {let function::constructor = __count__; }");
tryItOut("if(new ((this.__defineSetter__(\"__iterator__\",  \"\" )))(<x><y/></x> >>>  /x/ )([],  ''  * <><x><y/></x></>)) { if (1.3 for each (function::__iterator__ in window) for each (__count__ in  /x/g )) {/*for..in*/for(let __count__ in 3/0) yield;export *; }} else continue ;");
tryItOut("{let prop = prop;throw  /x/g ; }");
tryItOut("with({__parent__: (new (!(window)( /x/g , [,]).__defineGetter__(\"prop\"//h\n, /a/gi))(( '' .eval(@foo))))}){}");
tryItOut("if(@foo.@*.yoyo(function(q) { return q; })) { if ([, , , , ({ __iterator__: [, , , __parent__, ] })]) {let prop, prop;continue L; }} else {yield(<y><z/></y>); }\f");
tryItOut("{/*for..in*/L:for(let constructor in (((1.3).watch)(( /x/ ['constructor']))))/*for..in*//* nogeckoex bug 349964 */ for  each(const (\f__noSuchMethod__) in @foo) ;/*for..in*/for(var constructor in ((({}).__lookupGetter__)([,,])))gc() }");
tryItOut("if((let (__proto__)  /x/g ).hasOwnProperty(\"__iterator__\")) { if (__proto__\f for (__count__ in  /x/g )) {L:with({prototype: <><x><y/></x></>}){(this);{} } } else {/*for..in*/for(prop = window in <x><y/></x>) {throw  '' ; }continue L; }}");
tryItOut("");
tryItOut("");
tryItOut("let (constructor =  /x/g .constructor) { with([, , , __iterator__, ] = prop){(<><x><y/></x></>);var __iterator__ = <><x><y/></x></>, __iterator__ = <><x><y/></x></>; } }");
tryItOut("do {gc() } while((@foo) && 0);");
tryItOut("if(<zzz>(#1=[#1#] >>>=__count__ = __count__)</zzz>) if(null %= this) { if (__parent__|=<y><z/></y>[prop]) {}} else {const function::constructor, __noSuchMethod__; }");
tryItOut("with({__parent__: [1e4 for each (prototype in prototype)]}){let __count__; }");
tryItOut("/*for..in*/L:for([__noSuchMethod__, __proto__] = <><x><y/></x></> in window) throw window;");
tryItOut("throw function::__iterator__;");
tryItOut("with({}) let(__noSuchMethod__, constructor) { throw  /x/ ;");
tryItOut("if(-3/0)  else  if (__count__) ;");
tryItOut("throw 0x99;");
tryItOut("/*infloop*/L:for(({ __count__: __parent__ }) = (new Date()); prototype = prototype; undefined > __iterator__ = (({__proto__: (-1), prop setter: ({}).hasOwnProperty }))) for(let y in [5,6,7,8]) try { {} } catch(__parent__ if (this /  \"\" )) { yield *::*; } finally { constructor } ");
tryItOut("/*infloop*/M:for(<x><y/></x>.(__proto__ = <y><z/></y>); <><x>\f<y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\").prototype = __iterator__.__proto__(Iterator(), *); constructor.__proto__ getter= ([1,2,3,4].slice).apply) with(#0=[ /x/ ])break ;");
tryItOut("if(1e-81) {let __parent__ = <><x><y/></x></>\n<x/> }");
tryItOut("/*infloop*/for(let __iterator__; true; undefined) false;");
tryItOut("]");
tryItOut("L: {{} const __iterator__; } const prototype;");
tryItOut("\nwhile((([] != <y><z/></y>)) && 0)while((*) && 0)let prop = <><x><y/></x></>;\n");
tryItOut("M:if([window.yoyo(<><x><y/></x></>)].sort(function  __noSuchMethod__ () { yield __count__.__count__ getter= 'haha'.split } )) {return  { yield undefined } ;let prototype, __iterator__ = <x><y/></x>; } else  if (<y><z/></y>) {yield <x/>\f; }");
tryItOut("/*for..in*/for(const __iterator__ in ((<><x><y/></x></> , 3.141592653589793\f)([new __noSuchMethod__ for each (__parent__ in @foo) if (__count__)])))if(undefined) {yield;var prop, __proto__; } else  if (<x><y/></x>) ");
tryItOut("if(<x><y/></x>) { if (*) yield [,,];} else {; }\n");
tryItOut("const __parent__\n");
tryItOut("constructor = *;\nprop;\n");
tryItOut("M:if([15,16,17,18].some([1,2,3,4].slice, __noSuchMethod__.__proto__ setter= ({}).hasOwnProperty).throw(yield <><x><y/></x></>)) {}");
tryItOut("/*infloop*/do {with({__noSuchMethod__: (x::__parent__.__parent__ = __proto__.__noSuchMethod__ getter= function  constructor (__parent__, prop) { return __iterator__ } )}){const __proto__ = 4.; } } while(prop = undefined\f.valueOf(\"number\"));");
tryItOut("while(({}) && 0){continue L;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x><y/></x>.__iterator__ = @foo) {yield;export __noSuchMethod__; }");
tryItOut("{}");
tryItOut("/*for..in*/M:for(__count__ in ((function(q) { return q; })(((this/*\n*/.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)).__parent__)))){{throw *::*;return; } }");
tryItOut("do const v; while((<y><z/></y> = window) && 0);");
tryItOut("let (__noSuchMethod__ = null, __proto__) { let __count__ = <x><y/></x>, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*infloop*/for((<x><y/></x> >= <><x><y/></x></>); ({__noSuchMethod__: ( ''  for each (prototype in  /x/ ))}); (<x><y/></x>).__defineSetter__) break L;");
tryItOut("{/*infloop*/M:for(let prototype; (<x><y/></x>.(1.3).constructor); eval(yield <x><y/></x>;)) {Math.pow }__count__ }");
tryItOut("/*for..in*/for(__parent__(<x><y/></x> |=  { export __noSuchMethod__; } ) in new new undefined(this, this)((<x><y/></x>./*()), ({a2:z2}).__iterator__)) /*infloop*/while({(this);let __count__ = true; })(prop);");
tryItOut("M:if(<x/> %=  /x/g ) { if (@foo--) yield; else export *;}");
tryItOut("do {let __parent__ = prototype;const __parent__ = constructor; } while((__proto__.propertyIsEnumerable(\"prop\")) && 0);");
tryItOut("L:if(({__noSuchMethod__ getter: Math.pow }).unwatch(\"__iterator__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in this) { }\t else  if ((__proto__.prop = null ^ #1=[#1#] , true).isPrototypeOf(__noSuchMethod__.prop = <x><y/></x> ? <><x><y/></x></> : 0.1)) case function::__iterator__ = window.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map): break ;{ }break; Math.powbreak; case 0: break; break; ");
tryItOut("yield\nprototype, constructor;");
tryItOut("/*for..in*/for(const prop = ( \"\" --) in <><x><y/></x></>) { }");
tryItOut("{do return; while((this.__defineSetter__(\"__iterator__\", Function)) && 0); }");
tryItOut("switch((p={}, (p.z =  /* Comment */({__proto__: window in __noSuchMethod__}) >>> false.throw(1e81 && *::*))())) { case 2: {throw  \"\" ; }break; case 0: default: break; break; case 2: /*for..in*/for(constructor = (<y><z/></y> .. * ^ (prototype = window)) in  \"\" ) {export 1.2e3; }break; case 6: /*infloop*/do {return <x><y/></x>; } while(<x/>); }");
tryItOut("L: {if(__parent__++) break ; else  if ((delete  /x/g )) {var prop;break L; } }");
tryItOut("return\n");
tryItOut("if(throw 1.2e3 *= <x/>) {if(__count__ = <><x><y/></x></>) { if (((function ([y]) { })().__defineGetter__(\"constructor\", Math.pow))) {{} } else {const constructor; }} } else __iterator__ = (({__noSuchMethod__: null, __noSuchMethod__: <x/> }));");
tryItOut("function (__noSuchMethod__, prop) {  } ");
tryItOut("try { throw <x><y/></x>; } catch(__iterator__) { yield; } ");
tryItOut("{const __count__ = *; }");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] =  set prototype __proto__ (__noSuchMethod__, [z1]) { export *; }  in __iterator__) ");
tryItOut("while(() && 0)(<y><z/></y>);");
tryItOut("L: yield;");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("/*for..in*/for(__count__ = [1] in undefined) {return  /x/ ;(<x/>).watch }");
tryItOut("with(__proto__)/*infloop*/M:for(let constructor = [1,,]; @foo * 0x99; [1,,].throw(<x/>)) {export __noSuchMethod__; }");
tryItOut("if(prop%=(new Function(\"export __noSuchMethod__;\"))) { if (<><xxx {__iterator__}={(__iterator__ = delete)} /></>) {if((<x><y/></x> instanceof  '' )) {return constructor; } else  if (L = function::constructor) prop else {({}).__lookupGetter__const prototype = <x/>; }/*for..in*/for(var __proto__ in <x/>) yield -3/0; } else {gc()let (constructor = new ( \"\" )(4.)) { return; } }}");
tryItOut("do {export prop;<><x><y/></x></> } while((('fafafa'.replace(/a/g, /a/gi))) && 0);");
tryItOut("/*for..in*/L:for(const [[,,], each] = window in <x><y/></x>) break ;");
tryItOut("L:  set prop() { yield new (__noSuchMethod__.__parent__)(({ set __iterator__(__proto__) { yield <x/> }  }), this.__defineGetter__(\"__proto__\", function(q) { return q; })) } ");
tryItOut(";(1.2e3);\nexport *;\n");
tryItOut("/*infloop*/L:do {return; } while(Exception(()));");
tryItOut("with( /x/  &= window)M:if((eval(\" { yield <><x><y/></x></> } \", __count__ = [,]))) {if(<x><y/></x>) {return <y><z/></y>; }return; } else  if (!this.__defineGetter__(\"prototype\", [1,2,3,4].slice)) {throw window; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(((new Function(\"continue ;\")))(<x><y/></x>, window)) { if ((eval).call(true, <><x><y/></x></>, -3/0)) {L: return constructor;{gc() } }} else ");
tryItOut("if((return)) {gc()const prototype = this, prototype; }");
tryItOut("if(yield (__noSuchMethod__.__noSuchMethod__ setter= function (prop) { return false } )) gc()\nreturn <x><y/></x>;\n else  if (((({}).hasOwnProperty)() >>>=this.__defineGetter__(\"__noSuchMethod__\", eval))) {return @foo\n; }");
tryItOut("with({prop: \f(function(y) { yield y; yield;; yield y; })()})export *;");
tryItOut("if((<><x><y/></x></>)) return; else  if ((<x><y/></x>.unwatch(\"prop\"))) {return; } else {throw true; }");
tryItOut("L\t: /*for..in*/for(const __iterator__ = (prop = *::*).__defineSetter__(\"__count__\", [1,2,3,4].map) in <><x><y/></x></>) M:if(<x><y/></x>) return; else {yield;continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in null) {<><x><y/></x></> }");
tryItOut("/*infloop*/for(let ({ constructor: __count__ }) = \t({__noSuchMethod__ getter: function(y) { yield y; export __noSuchMethod__;; yield y; }, constructor setter: eval }); (__count__ = prototype); <x><y/></x> for each (__count__ in  '' )) eval");
tryItOut("gc()/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in __count__) {[z1]; }");
tryItOut("/*infloop*/for(([15,16,17,18].map(function  __count__ () { continue L; } , prototype.prototype getter= ({}).__lookupGetter__)); (<x><y/></x> &= *::*); (prototype.(__count__))) yield;");
tryItOut("{return @foo === window = (this.zzz.zzz);export *; }");
tryItOut("/*for..in*/L:for(__iterator__ in <y><z/></y>) /*infloop*/while(1e81){throw *;; }");
tryItOut("{break L;/*for..in*/for(__count__ in ((gc)((<><x><y/></x></> ^= __count__)))){constructor, __count__ = []; } }");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = (({ prop: ({ prop: <x><y/></x>, __iterator__: __count__ }) }) = prop) in this.__defineSetter__(\"__noSuchMethod__\", <y><z/></y>)) {default: yield }");
tryItOut("yield this\n{var __noSuchMethod__ = arguments;return  '' ; }");
tryItOut("L: {{} }");
tryItOut("if(<><x><y/></x></>) {try { throw <><x><y/></x></>; } catch(__iterator__ if (function(){(window);})()) {  } finally { throw undefined; }  }");
tryItOut("\fcontinue ;");
tryItOut("/*for..in*/for(var __iterator__ = (</*\n*/x><y/></x> .. <x><y/></x>) in prop) return;");
tryItOut("if(Math.sin) {;export __proto__; }");
tryItOut("");
tryItOut("let(prop) ((function(){<>(window.__iterator__)</>(__noSuchMethod__+=<x><y/></x>)yyy})());");
tryItOut("if(new function  __noSuchMethod__ (prototype) { yield this } ()) export *;");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = (__parent__.@*) in constructor = window) { }\nwhile((window.__lookupSetter__(\"prototype\")) && 0){(<><x><y/></x></>).watchbreak L; }");
tryItOut("with({__iterator__: (({ function::prototype: __proto__, prototype: prototype }))}){ }");
tryItOut("{/*infloop*/for( /x/g  >>> true; new [,,]( /x/g ) ^ <x><y/></x>.( \"\" ); ((function ([y]) { })().__count__ = <><x><y/></x></>)) /*for..in*//* nogeckoex bug 349964 */M: for  each(var (prototype) in window) {\tprop, __proto__; } }");
tryItOut("{throw constructor; }");
tryItOut("{export *; }");
tryItOut("if((*)(prop, [1]).__defineGetter__(\"__count__\", (1 for (x in [])))) {yield; } else  if (this.yoyo((let (__parent__ = __count__, constructor) *::*))) __parent__: (<><x><y/></x></>)() else __proto__ getter: 3");
tryItOut("/*for..in*/for(const prototype in window) /*infloop*/L:while(<><x><y/></x></>)var prop = @foo;");
tryItOut("/*infloop*/for(true; [,,z1]; false) const constructor = yield;, prototype;");
tryItOut("L:with({__noSuchMethod__: ([(this.zzz.zzz) if (this.__defineGetter__(\"prop\", function(y) { yield y; ;; yield y; }))])})export __iterator__;");
tryItOut("/*infloop*/for(const ({ __proto__: ({ __noSuchMethod__: ({ constructor: __proto__, __count__: __noSuchMethod__ }) }), prop: \nprototype }) = (new __parent__ = constructor = null() <= *); (~(<x/>).call(*::*, )); String(__parent__)) const __parent__, __iterator__ = <x/>\n");
tryItOut("if(__noSuchMethod__) <x><y/></x> else <!--yy-->");
tryItOut("if( /* Comment */ for (constructor.prop in constructor.prototype = *::*) for each (__count__ in 1e4) for each (__iterator__ in <y><z/></y>) for (__parent__ in prop)) let (__parent__, ({ prototype: __noSuchMethod__ })) { (1 for (x in [])) }");
tryItOut("if(+<x><y/></x>.__defineSetter__(\"__noSuchMethod__\", eval)) { if ( /* Comment */-0.constructor) {return; }} else {; }//h\n\nL:if(__parent__) { if ( \"\" ) gc() else }\nif(__iterator__) {yield;throw <x><y/></x>; } else  if ((new ( '' )())) {} else <><x><y/></x></>;\n");
tryItOut("{(#1#); }");
tryItOut("if((yield (prop).call(this.__defineGetter__(\"__count__\", /a/gi), window))) /*infloop*/for(const prototype;  /x/ ; <><x><y/></x></>) continue ; else  if (new (null)(null, <x><y/></x>)) {throw <x><y/></x>;break M; } else {}");
tryItOut("/*infloop*/for(var __proto__;  /* Comment */true; [,,].__iterator__) /*for..in*//* nogeckoex bug 349964 */ for  each(let $ in (this.__defineGetter__(\"prop\", null))) {/*for..in*/for(let constructor in <x><y/></x>) {{} }/*for..in*/for(prototype in __proto__) const __noSuchMethod__, prop; }");
tryItOut("/*infloop*/for(let [] =  /x/ .__defineSetter__(\"__parent__\", /a/gi); [(function ([y]) { })() if (<y><z/></y>)]; (Math.pow((uneval(<><x><y/></x></>))))) {var __iterator__, __iterator__; }");
tryItOut("L:if({}) {{} } else  if (constructor = gc()) {break L;{} }");
tryItOut("L:while((constructor.(null)\n /= ([15,16,17,18].sort(prop, <x><y/></x>)) <<= <x/>[true] * [15,16,17,18].sort((window).apply, <y><z/></y>)) && 0)if(([11,12,13,14].sort) ? 'fafafa'.replace(/a/g, Math.pow) : (-(<x><y/></x>))) {}continue ; else Math.sin");
tryItOut("/*for..in*/M:for(let __parent__ in ((function(y) { yield y; /*for..in*/for(__noSuchMethod__ in ((({}).hasOwnProperty)([z1,,].__lookupSetter__(\"__noSuchMethod__\"))))let __parent__ = .2;; yield y; })([prop].sort(default: break; {}break; ).__count__ = new  \"\" .@*(<><x><y/></x></>.__defineGetter__(\"constructor\", function(y) { yield y; export constructor;; yield y; })))))<><x><y/></x></>.__iterator__;");
tryItOut("/*for..in*/M:for(const <><x><y/></x></>['yield'] in ((prop)(*)))yield;");
tryItOut("constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__(1e-81) in *)  { yield (<><x><y/></x></>)[undefined] } ");
tryItOut("if(__iterator__ = __iterator__ < <x/> + <y><z/></y>) let prototype; else export __proto__;");
tryItOut("L:if( /x/g .__defineGetter__(\"__parent__\", Math.sin)) { if (*::*.unwatch(\"__iterator__\")) {throw <><x><y/></x></>;export *; }} else {;with({prop: <x><y/></x>}){return; } }");
tryItOut("/*infloop*/M:for(constructor; window; __count__) gc()\n/*infloop*/do yield  /x/ ; while(((window.__defineSetter__(\"__noSuchMethod__\", (null).watch)).unwatch(\"__noSuchMethod__\")))\nif(this) {export *;break ; }\n");
tryItOut("with({}) { yield 1.3.isPrototypeOf( \"\" ); } ");
tryItOut("L: if(.2 != window) { if ([].*) {/*for..in*/for(let __proto__ in ((({}).__lookupGetter__)(<><x><ywith({}) { export __noSuchMethod__; } /></> constructor</>))){;; } } else {/*infloop*/while(__count__){let __noSuchMethod__, __noSuchMethod__ = *::*; } }}");
tryItOut("/*for..in*/for(var constructor in prop.__count__ = *) {return; }");
tryItOut("if(@foo[<x><y/></x>]) { if ([({a1:1})]) {export *;(new Function(\";\")) } else {return; }}");
tryItOut("__count__ = __count__;");
tryItOut("switch(~({a2:z2}).unwatch(\"__count__\")) { default: yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__.__count__ in <><x><y/></x></>) { }");
tryItOut("(<><x><y/></x></>)(*::*) = __iterator__;");
tryItOut("let (__count__, constructor = ((__noSuchMethod__) = *::*.isPrototypeOf(<x><y/></x>))) { L:if(true.constructor = __count__.__defineGetter__(\"function::constructor\", function  prop (__proto__) { return <y><z/></y> } )) {export __iterator__;const __iterator__, __count__ = <x><y/></x>; } else  if (Function() << (yield 3.141592653589793)) {export *; } else {var prototype = <x><y/></x>; } }");
tryItOut("throw StopIteration;");
tryItOut("do export __iterator__; while(((<><x><y/></x></>.__defineSetter__(\"constructor\", [1,2,3,4].slice))) && 0);");
tryItOut("export *;\nif(__iterator__) {1.3 } else (<y><z/></y>).__defineSetter__\n");
tryItOut("{}");
tryItOut("{__parent__; }for(let y in []);");
tryItOut("/*infloop*/for(__noSuchMethod__; this; [11,12,13,14].sort) {var prop; }");
tryItOut("{export *;let __parent__ = <y><z/></y>; }");
tryItOut("throw this;");
tryItOut("{switch(<></>) { case 8: ;break; {__count__; }break; case 8: break; default: break;  }/*for..in*//* nogeckoex bug 349964 */M: for  each(const <y><z/></y>.__noSuchMethod__ in <y><z/></y>) ;return; }");
tryItOut("if(prototype) {var __iterator__ = 1e+81; } else gc()");
tryItOut("while((*.__defineGetter__(\"__parent__\", <y><z/></y>)) && 0){yield false; }");
tryItOut("{if((__count__ =  /x/g )) {yield;var __noSuchMethod__ = <><x><y/></x></>, __count__ = <y><z/></y>; } else  if (4.)  else {gc()export __proto__; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while( ''  ^ __noSuchMethod__.unwatch(\"__proto__\"))/*for..in*/for(let prop in (((<x/>.throw( \"\" )).__defineSetter__)(<y><z/></y> <<= <x><y/></x>))){ '' ;default: export *;break; export *;break; case 2: return ;break; case 9: break ;break; case 0.1: export *;case 033: const __proto__ = true, prop;break;  }");
tryItOut("/*infloop*/while(1e4)let (prototype, __proto__) { ; }");
tryItOut("/*infloop*/for(var ({ __count__: __proto__ }) = let (__proto__, __count__ = *::*) 3.141592653589793; __iterator__.@*; null()) {yield; }\n;\n");
tryItOut("do {const __count__ = <x><y/></x>, prop; } while((<bbb xmlns:ccc=\"prop.__iterator__ = __proto__\"><ccc:eee></ccc:eee></bbb>) && 0);");
tryItOut("if( /x/ ) { if (<><x><y/></x></>) { }} else {(<x/>).watchfunction::prop = <x><y/></x>, __count__; }");
tryItOut("/*infloop*/for(var ({ __iterator__: __iterator__, constructor: [__count__, prop, prop, constructor] }) = false['__noSuchMethod__'] = this.zzz.zzz; this.zzz.zzz; yield function(id) { return id }) L:if(<y><z/></y>) { if ( /x/g ) {{}export *; } else continue ;}");
tryItOut("export *;return  \"\" ;");
tryItOut("break ;");
tryItOut("{var __proto__ = undefined, __iterator__;;\n([,,]);\n }");
tryItOut("throw StopIteration;");
tryItOut("export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((<><x><y/></x></> > @foo))(({}) instanceof <x/>) in ({a2:z2})) if(<x/>) {} else {__iterator__ = [[]];return <x><y/></x>; }");
tryItOut("with(prototype = function(id) { return id })/*infloop*/\twhile(null){yield this; }");
tryItOut("if(((p={}, (p.z =  \"\" )())) for (null in (({a1:1}).throw((uneval(1e-81)))))) __parent__ = prop; else  if ((yield undefined >>>=<x/> |= (__iterator__.constructor = this).yoyo(new String()))) __iterator__, prototype;");
tryItOut("with([prototype, prop, , setter, ] = new __count__(this, *::*).eval((-0)[*]))return;");
tryItOut("/*infloop*/L:while(((new Function))(window &= <x/>)){L: try { return <><x><y/></x></>; } finally { export *; }  }");
tryItOut("/*infloop*/M:do (<x><y/></x>); while(([11,12,13,14].sort));");
tryItOut("if() /*for..in*/for(var __iterator__ in <><x><y/></x></>) {/*for..in*/for(var __proto__ in  \"\" ) {throw  /x/ ; } } else {{} }");
tryItOut("/*infloop*/for(1e4; <><x><y/></x></>; <x><y/></x>) yield;");
tryItOut("/*for..in*/for(let *::*['null['__count__']'] in ((gc)((((new __parent__() >>> (__iterator__)))[<bbb xmlns=\"__iterator__\">yyy</bbb>.(( \"\"  ^ undefined) ^ (<><x><y/></x></>[<x><y/></x>]))]))))const __iterator__ = __parent__, __iterator__;");
tryItOut("L:if((((new gc(false for each (constructor in <><x><y/></x></>)/*\n*/, <x/>)).unwatch(\"prototype\")))((prop ? <x><y/></x> : <x><y/></x>), ({}).__lookupGetter__)) {/*infloop*/for(__count__-=null; #1=[#1#].isPrototypeOf([[]]); (__iterator__ = 0x99)) { /x/ ; }/*for..in*/for(__proto__ in <x><y/></x>) return; } else /*infloop*/do break ; while(<x><y/></x>);");
tryItOut("throw StopIteration;");
tryItOut("if([__proto__ = prop].map(function  __parent__ (__count__) { yield window .@ <x/> } ).*) /*for..in*/for(var __parent__ in ((@foo)(__proto__))){;export __iterator__; } else  if ((RangeError())) /*for..in*/for(var prototype = 0.1 in false) break M;\f");
tryItOut("");
tryItOut("let (__parent__) { throw false; }");
