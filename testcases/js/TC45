
tryItOut("throw StopIteration;");
tryItOut("{{yield;new Function }export <ccc:ddd></ccc:ddd>; }");
tryItOut("((uneval(eval(\"do export *; while((window) && 0);\", <x><y/></x>))))(((uneval(@foo instanceof  '' )))((-0), (yield *::*)), new Object())");
tryItOut("export constructorreturn;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (new Boolean()(((yield false)))); (new ((eval(\"gc()\", <x><y/></x>)))()); (++this)) yield;");
tryItOut("let (__iterator__) { yield []; }");
tryItOut("/*infloop*/for(var ({ constructor: ({ prop:  /x/g , arguments, __parent__: __parent__ }) }) = new (({}))(<><x><y/></x></>); this; *::*.__lookupSetter__(\"__count__\")) let (__proto__) { /*infloop*/L:while(<x><y/></x>)<y><z/></y>; }");
tryItOut("while((<><x><y/></x></>) && 0){const __count__ = 033, constructor; }");
tryItOut("default: /*infloop*/M:do {return; } while(new (1e-81)( /x/g , __parent__));break; break; break; case 2: break; case 7: throw *;");
tryItOut("/*for..in*/L:for(var __iterator__ in (this.__defineSetter__(\"prop\", ({}).__lookupGetter__)).propertyIsEnumerable(\"__proto__\")) {M:if(({prototype: *::* })) {export __count__;export *; } else  if ([1] >>>=<><x><y/></x></>) {break M; }if(prototype) continue ; else <ccc:ddd></ccc:ddd> }");
tryItOut("L:switch(\nnull) { default: case __count__: let constructor;break; case this.zzz.zzz: case @foo.hasOwnProperty(\"__noSuchMethod__\"): const __iterator__, __iterator__;break; case [<><zzz>function ([y]) { }.__lookupSetter__(\"constructor\")</zzz></>].map(function  __parent__ (constructor, __noSuchMethod__)(let prototype, __parent__)): case yield null +  '' .__count__: gc()\nyield false;\nbreak; do export *; while((<!--) && 0);break; case 7: break; export prototype;break;  }");
tryItOut("return this\n");
tryItOut("/*infloop*/M:do {yield; } while(<>function(id) { return id }[[,,]]</>);");
tryItOut("/*infloop*/for(({__parent__: true}); (({ prototype: __proto__ }) =  /x/g .throw(window)); new Array(({__proto__: undefined,  get __proto__(@foo) { ; }  }), ({})) instanceof <{__parent__}><x><y/></x><!--yy--></{__parent__}>.(false.isPrototypeOf(*::*))) L: (false);");
tryItOut("M:if(null) {return;yield; } else  if ( /x/ ) {return; } else {var __count__, __count__;break ; }");
tryItOut("null;");
tryItOut("/*for..in*/for(let __proto__ = (__iterator__) in undefined >>>=this) {L: gc() }");
tryItOut("");
tryItOut("/*infloop*/for( /x/ ; *::*; <><x><y/></x></>) {yield [[1]];yield; }");
tryItOut("if(__noSuchMethod__++) {return; } else  if /*\n*/((1e81 ? __parent__ : window)) yield; else { }");
tryItOut("do {{M:with({__parent__:  /x/ .@foo}\t){gc() }return; }__parent__, prototype; } while((5.0000000000000000000000) && 0);");
tryItOut("/*infloop*/M:do if(((true for each (setter in <x><y/></x>)))) {function () { yield  /x/g  }  } else  if (<x><y/></x>.__defineSetter__(\"prop\", false)) yield; while('fafafa'.replace(/a/g, (#1=[<><x><y/></x></>])));");
tryItOut("__proto__ = window\nreturn  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let <x><y/></x> %= <x/> in (true.isPrototypeOf(<x><y/></x>)).__parent__) /*infloop*/do const prototype = <><x><y/></x></>, __count__; while(__count__ = <><x><y/></x></> - [,]);");
tryItOut("/*for..in*/for(let __parent__ in (((1 for (x in [])))( /x/g ))){gc()yield; }");
tryItOut("with({__proto__: (new ({})())}){export __count__; }");
tryItOut("{continue L;*; }");
tryItOut("if(<><x><y/></x></>.__parent__) {\n } else with(<x><y/></x> | *::*){export __iterator__; }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__iterator__\", function (constructor)\f@foo))/*for..in*/for(var prototype = 1e4 in <y><z/></y>) {export constructor; }");
tryItOut("export prototype;");
tryItOut("L: {yield;{} }");
tryItOut("/*for..in*/\fM:for(let constructor = ({a1:1}).isPrototypeOf(eval(\"switch(1e4) { case *::*: yield = {}, prototype;break; break; case 4: export *; }\", ({ __iterator__: [constructor, , ] }) = __count__)) in <><x><y/></x></>['__proto__']|=((uneval(true)))) /*infloop*/while(new Exception(__proto__))<x><y/></x>");
tryItOut("/*for..in*/for(let constructor = prototype.(@foo) in this.__defineGetter__(\"__count__\", ({}).__lookupGetter__).__count__) {if(<x><y/></x>) ; }");
tryItOut("while(( /x/ ) && 0)continue M;");
tryItOut("/*infloop*/for(__count__; this.zzz.zzz; [15,16,17,18].some(<x><y/></x>.(5.0000000000000000000000), #2=[(__noSuchMethod__ = 4.)]).watch(\"__proto__\", ({}).hasOwnProperty)) M:if(({ get constructor constructor (__iterator__, __proto__) { yield <y><z/></y> }  })) {const prop;return 4.; } else  if ((let (prototype, __count__) 5.0000000000000000000000.prototype)) gc() else {return;continue M; }");
tryItOut("/*for..in*/for(var [prototype, constructor] = <x><y/></x> in <y><z/></y>) yield *::*");
tryItOut("var prop, constructor\n");
tryItOut("<><x><y/></x></>;");
tryItOut("/*for..in*/for(const __parent__ = window.valueOf(\"number\") in <><x><y/></x></>) {(*::*);export *; }");
tryItOut("M:with({__proto__: undefined}){__proto__;yield; }");
tryItOut("return\n");
tryItOut("L: /*for..in*/L:for(let __parent__ in (((1 for (x in [])))(arguments.propertyIsEnumerable(\"__parent__\")))){M:if(window) { if (this) {prototype, prop = window;(__count__);\f } else yield 1e-81;}const __proto__; }");
tryItOut("prototype, __proto__;");
tryItOut("return;");
tryItOut("let(({ __noSuchMethod__: ({ __parent__: prop }) }), __count__ =  '' .hasOwnProperty(\"__parent__\")) { prototype = prop;");
tryItOut("let(__proto__ = constructor.__iterator__ -= __parent__ = <y><z/></y>.unwatch(\"__proto__\"), __noSuchMethod__ = ({})) { yield <{constructor}><>(p={}, (p.z = <x/>)())</>yyy</{constructor}>\n__noSuchMethod__.__noSuchMethod__ = __parent__;");
tryItOut("let(function::__noSuchMethod__ = <y><z/></y>, __parent__) { return (Iterator(__proto__ = <x><y/></x>));");
tryItOut("with({__iterator__: (new (this.__iterator__ = *\n)() >>= \n<><x><y/></x></>)})while((this) && 0){export __iterator__; }");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __proto__] = <y><z/></y> in  /x/g ) {constructor = window, __iterator__; }");
tryItOut("{( \"\" );gc() }");
tryItOut("/*infloop*/for([] = ({ get prototype __count__ (__iterator__, __iterator__) { with({__iterator__:  /x/g })gc() } , __proto__: (let (__iterator__ = <x><y/></x>) 1e+81) }); (this.zzz.zzz) && <><x><y\f/></x></>; function(y) { yield y; export *;; yield y; }) {continue M; }");
tryItOut("<><x><y/></x></>;");
tryItOut("if((5.0000000000000000000000 >>>=(true >>=  \"\" ))) {(function::__proto__); } else  if (({ __parent__: prop }) = <x><y/></x>.throw(<><x><y/></x></>.prop setter= ({}).__lookupGetter__ -= __iterator__ %= <x><y/></x>)) {/*infloop*/do {[] } while(*);yield <x><y/></x>; } else {var __iterator__ = [,,z1]; }");
tryItOut("/*infloop*/M:while(<x><y/></x>.__iterator__){/*infloop*/L:do {__noSuchMethod__ = ({a1:1}); } while(-3/0); }");
tryItOut("<bbb xmlns=\"this.__defineSetter__(\"__noSuchMethod__\", let (prop) true)\"><ccc:ddd> </ccc:ddd></bbb>");
tryItOut("with(<><bbb xmlns=\"~ '' \"></bbb></>)if(@foo) {var prototype =  /x/g ;; } else  if (this) return; else {yield;yield @foo; }");
tryItOut("var prototype = <x><y/></x>, prop = ({a1:1})\nconst prop\n");
tryItOut("gc()\n");
tryItOut("while((<y><z/></y>) && 0){<x><y/></x> }");
tryItOut("{return; }");
tryItOut("M:with({__parent__: *::*})return this.__defineSetter__(\"__count__\", function(y) { yield y; yield  /x/ ;; yield y; });");
tryItOut("with({__proto__: true})if(prop.constructor.__defineSetter__(\"prototype\", (new Function(\"{}\")))) { if ((__parent__.watch(\"__iterator__\", Math.pow)) , <><{__parent__}><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></{__parent__}></>) {let (prototype = <y><z/></y>, __parent__) { var __iterator__ = window; } }} else {/*infloop*/M:for(var __count__\t = *; (-0); false) {return; }\nyield;\n }");
tryItOut("/*infloop*/M:for(var ({ __noSuchMethod__: prototype }) = ({ }); ({__parent__: [false if (0x99)] }); (this.yoyo(__iterator__)) *= prototype = __parent__.(<y><z/></y>) if (0x99)) /*infloop*/M:for(__noSuchMethod__; function::function::__proto__ = *::*; undefined :: *) function::__count__ = <x><y/></x>;");
tryItOut("return (window % <x/> << *::*);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in __noSuchMethod__ ? 1.2e3 : <y><z/></y>) {do {break ; } while((<x><y/></x>[*]\f) && 0); }");
tryItOut("/*infloop*/do {/*for..in*/for(const prototype in ((prop = true)((this.propertyIsEnumerable(\"prototype\"))))){(<x><y/></x>); }export *; } while((this.zzz.zzz)++);");
tryItOut("with({__parent__:  /x/g }){yield <><x><y/></x></>;throw  /x/ ; }");
tryItOut("/*for..in*/for(__iterator__(#3={a:#3#}) in (((@foo).watch)(<><x><y/></x></>)))*;");
tryItOut("/*for..in*/for(let constructor in ((yield __count__%=*::*)(<><bbb xmlns=\"[* for each (function::constructor in  \"\" )]\"><!--yy--></bbb></>)))L:do {return <\fx><y/></x>;L:if(null) {return  /x/ ;gc() } else  if ([z1]) {export __noSuchMethod__;__proto__ = arguments; } } while((<x/>) && 0); const __parent__;");
tryItOut("/*for..in*/for(let __proto__ in ((function(q) { return q; })(window += this)))(<><x><y/></x></>);");
tryItOut("return;");
tryItOut("continue M; const prototype;");
tryItOut("/*infloop*/L:while(*){if((0x99.isPrototypeOf(null)) ? <x/>.throw( '' ) : [z1] ^ <x/>) <bbb xmlns:ccc=\"({ set __count__()1e-81, prototype: constructor })\"><ccc:eee></ccc:eee></bbb> else {return this; } }");
tryItOut("L: {}");
tryItOut("L:with((delete (uneval(__count__))))throw __count__;");
tryItOut("gc()");
tryItOut("with({}) { const __noSuchMethod__; } ");
tryItOut(";");
tryItOut("(__noSuchMethod__);");
tryItOut("var __parent__ = @foo, prop = *::*;\nreturn [15,16,17,18].sort((1 for (x in [])), true);\n");
tryItOut("M:if(@foo) { if (constructor) {'haha'.split(<y><z/></y>).__defineSetter__ }} else ;");
tryItOut("try { let([] = null) { return; } catch(prop) { this.zzz.zzz; } finally { return; } ");
tryItOut("/*infloop*/do { } while(__parent__.prop = 033);");
tryItOut("L: if(window) {throw 033; } else  if (window) return <y><z/></y>;");
tryItOut("/*infloop*/for(((-1)(<><x><y/></x></>, <x/>)); this.zzz.zzz; ((yield <x/>))) gc()");
tryItOut("{;if(@foo) { if (this) yield -1; else } }");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(++@foo) {{} }\n");
tryItOut("do var prop; while((3.141592653589793%=<y><z/></y>) && 0);");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.prototype in  '' ) {{}gc() }{yield;continue L; } } while({});");
tryItOut("let (__noSuchMethod__) { return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let [__parent__, constructor] = prop = window === (-0).watch(\"__iterator__\", new Function) in <><x><y/></x></>) continue M;");
tryItOut("with( \"\" )break M;");
tryItOut("L: {;__noSuchMethod__; }");
tryItOut("yield <><x><y/></x></>");
tryItOut("with(<x><y/></x>)\nlet __noSuchMethod__ = window, constructor = [,,];\n");
tryItOut("if( /x/g ) {return this;{(this); } }");
tryItOut("/*infloop*/M:for(({a2:z2}); null; <y><z/></y>) {break ;( '' ); }");
tryItOut("/*for..in*/for(__iterator__ in ((Function)('haha'.split))){M:if(__count__ = <><x><y/></x><__parent__ =  { return window } />) {return; } else {{}default: const set = window, __noSuchMethod__ = undefined;case <><x><y/></x></>: break; gc()break;  } }");
tryItOut("/*infloop*/L:for((#1#.__lookupGetter__(\"default: gc()case 9: (033);break; case [z1,,]: break; case 5: gc()case <y><z/></y>: case 4: (-1).__defineSetter__\")); null; --this) {(function(id) { return id }); }");
tryItOut("if(this) { if (<x><y/></x>) {(new Function(\";\")) } else yield;}");
tryItOut("if(new undefined) ([1,,]); else  if (<x><y/></x>.(null)) ({}).hasOwnProperty else {return window;yield #1=[#1#]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (this.zzz.zzz)(constructor\n\f) in (<x><y/></x>.throw(#3={a:#3#}))) /*infloop*/L:for(*; (p={}, (p.z = false)()); <><x><y/></x></>) {return <x/>;gc() }");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/do {M:if(({})) {gc()export *; } else  if (constructor) [1,2,3,4].mapreturn; } while(3/0);");
tryItOut("return  /x/  / <x><y/></x>.(this) if ((function ([y]) { })());");
tryItOut("{return @foo; }");
tryItOut("/*infloop*/M:for( /* Comment */\n(uneval(__parent__)); constructor.__lookupSetter__(\"prototype\");  /x/ ) {try { return this.eval( \"\" ); } catch(__count__ if (function(){throw StopIteration;})()) { let(({ __parent__: [constructor, , , , ] }), prototype) { return; } catch(prop) { this.zzz.zzz; } finally { with({}) constructor = __noSuchMethod__; }  }");
tryItOut("\nyield;");
tryItOut("for(let y in []);");
tryItOut("with((this.__iterator__)){let prototype, __parent__; }");
tryItOut("throw arguments");
tryItOut("constructor = __noSuchMethod__\n");
tryItOut("while((prop = <><x><y/></x></>) && 0){ /x/  const __iterator__; }\n/*infloop*/for(const [prop, , __parent__, ] = yield <><x><y/></x></>; (window.__defineGetter__(\"constructor\", eval)); <x><y/></x>) \tprototype;");
tryItOut("with( /x/ ){prototype;var constructor, __count__; }\nyield;");
tryItOut("M:if(let (__iterator__ = this.zzz.zzz, prototype = (yield @foo).__lookupGetter__(\"__iterator__\")) ({__proto__: (4. .@*:: window *= (undefined)(<><x><y/></x></>))})) { if (<><bbb xmlns=\"'fafafa'.replace(/a/g, new Function)\"> </bbb></>.(__parent__ = window)) continue ;} else {/*infloop*/while(prototype)({}).__lookupGetter__ }");
tryItOut("{switch((uneval())) { default:  /x/g ; }/*infloop*/M:do throw this; while((\n0)); }");
tryItOut("/*for..in*/for(var __proto__ = new (__noSuchMethod__).watch(.2, this).propertyIsEnumerable(\"__parent__\") in __noSuchMethod__) {return *; }");
tryItOut("{{} }");
tryItOut("if(<><><!--yy--></></>) {/*infloop*/while((<><x><y/></x></>.__proto__)){var __noSuchMethod__;yield [,]; }return <><x><y/></x></\f> ?  /x/  :  /x/ ; } else {yield  /x/  .. <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = (({ __noSuchMethod__: constructor, __parent__: [] }) = (__noSuchMethod__ = 033 != new [,,z1](3.141592653589793, <x/>))) in prop.prototype) /*infloop*/M:while(*::*){return 1.3; }");
tryItOut("{return prototype; }");
tryItOut("if(<><x><y/></x\t></>) {this;export prototype; } else ");
tryItOut("let (false['__iterator__'] = (eval(\"1e4\", <x><y/></x>)), prototype) { gc() }");
tryItOut("");
tryItOut("if( '' ) {return;export __noSuchMethod__; } else  if (true) gc() else __parent__: __parent__");
tryItOut("for(let y in [5,6,7,8]) <>x<><!--yy--></> <y/>'</x></>; const __iterator__;");
tryItOut("prop = constructor/*\n*/; const __iterator__;");
tryItOut("L:do {const __parent__, __proto__; } while(('fafafa'.replace(/a/g, gc)) && 0);\r");
tryItOut("(#2=[<><x><y/></x></>])");
tryItOut("/*for..in*/for(let [__iterator__, prop] = this in  \"\" ) {let prototype = default: break; let __iterator__ = this;break; ();case __iterator__: yield #3={a:#3#};, __iterator__ = <x><y/></x>;[[]]; }");
tryItOut("/*for..in*/L:for(var __proto__.__proto__ in ((function () { return #0=[4.].__parent__ } )((this.__defineSetter__(\"__noSuchMethod__\", /a/gi)--)))){let ;return <x/>; }");
tryItOut("let(__iterator__ = new (Math.sin)(#2=[ /x/g ])) ((function(){try { for(let y in []); } finally { this.zzz.zzz; } })());");
tryItOut("/*infloop*/for(const __parent__ = ([__noSuchMethod__ = ({})].some((('fafafa'.replace(/a/g, (1 for (x in []))))).watch)); (__parent__.(undefined)); <y><z/></y>.*) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("return arguments;");
tryItOut("do {throw this; } while((new (1 for (x in []))(<x><y/></x>)) && 0);");
tryItOut("/*for..in*/for(const prototype = new (__iterator__)(0/0()) in 'fafafa'.replace(/a/g, function(y) { yield y; (<><x><y/></x></>);; yield y; })) {gc()return; }");
tryItOut("/*\n*/if(<><x><y/></x></>) {var __parent__ = __count__;{} } else  if ([15,16,17,18].some(<x><y/></x>, <x><y/></x>)) yield <y><z/></y>; else {} const prototype; const __parent__;");
tryItOut("with({__parent__: eval(\"prototype setter: 'haha'.split\", prototype)})(<x><y/></x>);");
tryItOut("L:while((({__noSuchMethod__ setter: Math.pow }).hasOwnProperty(\"(__iterator__)(<><x><y/></x\\f></>)\")) && 0)do {export prototype; } while((__parent__) && 0);");
tryItOut("M:if(((yield <x><y/></x>))) while(((<x/> ? window : constructor)) && 0){;<y><z/></y> }");
tryItOut("M:switch(new (delete = (-0);).watch((*::*.__lookupGetter__(\"__count__\")))) { default: {while(( /x/g  && <y><z/></y> ? <y><z/></y> : __parent__) && 0)/*\n*//*for..in*/M:\rfor(const [constructor, try {  } catch(__count__) { yield @foo; } finally { ; } ] = 0.1 in this) __noSuchMethod__throw .2; }case new (new Object(this, prototype))((__iterator__).call(__parent__ = *::*, )): break;  }");
tryItOut("switch( /x/  | [,] , ({prototype setter: (new Function(\"\")),  get function::prototype prop (prototype, __count__) { return __parent__ }  })) { case null: /*infloop*/M:for(let constructor; <><x><y/></x></>; 1.3) {{}let __count__, __noSuchMethod__ = prop; }break; case (({}) in constructor): this;break;  }");
tryItOut("let(__noSuchMethod__ =  '' ) { for(let y in [5,6,7,8]) __iterator__ = constructor;");
tryItOut("\nwhile(( ? [<x/>] : this.zzz.zzz.eval(window + -3/0 /= (033.__defineGetter__(\"__proto__\",  '' )))) && 0)if(@foo) yield; else export *");
tryItOut("with({prototype: (function::__iterator__ = 0 ..  /x/ )})export [,];");
tryItOut("if(*) __count__, __noSuchMethod__ = undefined; else return <x><y/></x>\n");
tryItOut("export prop; const __proto__;");
tryItOut("with({1e-81: <x/>}){(__parent__); }\n");
tryItOut("switch( \"\" ) { default: break; return window; }");
tryItOut("/*infloop*/for(var (window)(__parent__.(*)) = (new Object(__proto__(__iterator__ =  /x/ , let = <x/>)|=true-- ? (__parent__ = this.__defineGetter__(\"prop\"\f, ).@foo) : ([,,z1].watch(\"constructor\", (function ([y]) { })()) ? (__proto__ = __iterator__) : (p={}, (p.z = *::*)())))); (uneval(eval(\"null.__lookupGetter__(\\\"__count__\\\")\", __iterator__))); let (__parent__, constructor = <><x><y/></x></>) (<x><y/></x>.(this))) export __noSuchMethod__\nthrow <x><y/></x>;");
tryItOut("/*infloop*/do  while({}[undefined].unwatch(\"__noSuchMethod__\"));");
tryItOut("/*infloop*/for(var __noSuchMethod__; __count__ = <><x><y/></x></>, <x><y/></x>; *) ;");
tryItOut("let (prop) { while(((constructor)) && 0){export __parent__; } }");
tryItOut("if(null) {this;export *; } else {export __noSuchMethod__;break L; }");
tryItOut("(__count__(arguments))");
tryItOut("do throw (true).__defineSetter__; while((null) && 0);");
tryItOut("switch((((1 for (x in [])))(<><x><y/></x></>))) { default: M:if(this *= __parent__) const __noSuchMethod__, prototype; else  if (++) {; } }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("throw constructor;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((Math.sin)((uneval((__count__.__iterator__) ? #1# : new (Math.pow)()))))){{} }");
tryItOut("return (__proto__ = ({a2:z2}));");
tryItOut("yield 1e+81;");
tryItOut("yield <x><y/></x>;");
tryItOut("$");
tryItOut("/*for..in*/for(var false['__count__'] in  '' ) {this; }");
tryItOut("with(__count__ === this-- ? (<><x><y/></x></> || this.__defineGetter__(\"__noSuchMethod__\",  /x/ )) : <><xxx>{prop}</xxx></>)if(@foo[@foo] *= (({}).__lookupGetter__)()) {let false, __proto__;yield; } else  if (yield <x/>) {/a/gi }");
tryItOut("/*infloop*/for(const [, , constructor, ] = ( ''  <= @foo); ({__iterator__: let (__count__, __count__ = <><x><y/></x></>)  '' ,  get __parent__(prop) { return #1=false }  }).@foo; (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.throw((<x/>\n)))) /*infloop*/for(let __noSuchMethod__; ([[]] .@ <y><z/></y>.__count__ = true.eval([,,z1])); ({})) {throw __iterator__;throw  \"\" ; }");
tryItOut("L: const __iterator__; const __parent__;");
tryItOut("/*infloop*/while((let (__iterator__ = (uneval(<><x><y/></x></>)), __proto__ = window) \t1e81[1e+81].__defineGetter__(\"prototype\", function  constructor (({ __count__: ({ constructor: __proto__, __noSuchMethod__: __proto__ }), __proto__: ({ __count__: __count__ }) }), __iterator__) { continue L; } )))const prototype = __proto__, __parent__;");
tryItOut("/*infloop*/do {return; } while(<><x><y/></x></>);");
tryItOut("constructor = __proto__;");
tryItOut("/*infloop*/M:for(function::__iterator__; .unwatch(\"__noSuchMethod__\"); function (__noSuchMethod__) { (<><x><y/></x></>); } ()) /*infloop*/for(<x><y/></x>; @foo; null) {yield 1e-81; }");
tryItOut("/*for..in*/L:for(let prototype in ) {/*infloop*/do {yield;yield *; } while( '' ); }");
tryItOut("/*infloop*/while(eval(\"(arguments);\", <y><z/></y>)){return this; }L:if(({a2:z2})) {yield; } else break L;");
tryItOut("L:switch(<bbb xmlns=\"((prop( '' .yoyo(this))) = 1e4.*())\"><>(__noSuchMethod__)</><ccc:ddd><{prop}> </{prop}><!--yy--></ccc:ddd></bbb>) { default: /*for..in*/for(const [<x><y/></x>, prop] = __noSuchMethod__ in 033) var prop = window;export __parent__\nreturn;{/*for..in*/for(var __iterator__ = (({}) || *::*) in null) [,,z1]; }break; export __parent__break; case new (Function).call(<x><y/></x>.throw(function(id) { return id }), )(): break; switch(undefined) { case 9: gc()break; case  /x/ : __parent__;gc()break; default: break; return;break; case 6: break; case false: __noSuchMethod__ = constructorbreak; case 7: case 2: break; case 9: let constructor; }break;  }");
tryItOut("let ([, , [({ prop: [[[]], <y><z/></y>, , [__noSuchMethod__, ({ prop: __proto__ }), ({ __parent__: constructor, function::__noSuchMethod__: __proto__ }), __proto__, [, , , , constructor]], (\f{ __count__: [prop] })], __noSuchMethod__: ({ __parent__: __iterator__ }) }), , ], ({ __count__: [, ({ prop: ({ yield: ({ __iterator__: __count__ }) }), prototype: [] }), prototype] }), prop], ~) { let(__noSuchMethod__) ((function(){var __noSuchMethod__, __iterator__ = true;})()); }");
tryItOut("return;");
tryItOut("L:if(*::*) { if (new [1,2,3,4].slice(([new (prop)(false) for (__iterator__ in constructor) if (<x><y/></x>)]))) let __proto__; else /*infloop*/L:for(({ __iterator__: delete, __iterator__: __noSuchMethod__ }) = ({prototype getter: (0x99).watch,  set prototype() { gc() }  }); (({__parent__ setter: __iterator__ })); 4. >>>=*) {yield *::*; }}");
tryItOut("/*infloop*/L:for(var __parent__; true\n; (({ __count__: __proto__ }) = new window())) __noSuchMethod__;");
tryItOut("L: with({function::__proto__: *::*.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)}){yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(({ set prop(__iterator__, prototype) { yield <ccc:ddd>yyy</ccc:ddd> }  }); #0=[([__parent__, , __noSuchMethod__])]; #0=#3={a:#3#}.@foo) {/*infloop*/for\n(*; <x><y/></x>; <x/>) {export __proto__; } }");
tryItOut("let (__count__, constructor = [1,,]) { __proto__: ({prototype: (__iterator__ = __iterator__), __iterator__: __noSuchMethod__ = *::* }) }");
tryItOut("/*infloop*/L:while(@foo)prop;");
tryItOut("/*infloop*/for(typeof __parent__; __proto__.__parent__ getter= function(y) { yield y; prop; yield y; }; this) {yield -3/0\n }");
tryItOut("/*infloop*/constructor: __count__");
tryItOut("/*for..in*/for(var prototype in (((1 for (x in [])))(true))){yield;; }");
tryItOut("/*for..in*/for(prototype in (constructor = return  /x/ )) if(--[].__iterator__) {let __parent__ = <><x><y/></x></>; } else  if (({__count__: __iterator__ })) {const __parent__, __proto__;constructor } else throw <><x><y/></x></>;");
tryItOut("switch(__noSuchMethod__|= '' ) { default: export __iterator__; }");
tryItOut("__parent__ = __iterator__;");
tryItOut("with({__proto__: (new window())})let (prop, prop) { let ; }");
tryItOut("if(this) export *;");
tryItOut("L:if(__iterator__ /= __count__['(this)((-1)\n)']|=(*::*).call(prototype, (<x><y/></x> & 3.141592653589793)).throw(__parent__.valueOf(\"number\"))) throw __count__; else  if (( /* Comment */new false.constructor(let (__count__ = undefined, __count__) true, <x><y/></x>))) {/*for..in*/for(const __count__ = __parent__ in -true) /*infloop*/for([15,16,17,18].sort(function  __iterator__ (prop) { return <x><y/></x> } , __parent__); <><x><y/></x></>.valueOf(\"number\"); eval(\"continue M;\", false)) yield <><x><y/></x></>;with((__parent__)); } else {switch(1e4()) { default: break; case 2: ;break;  }M:do __iterator__ while(('fafafa'.replace(/a/g, Function)) && 0); }");
tryItOut("let (prototype = ({__proto__ getter: ({}).hasOwnProperty, __parent__ setter: false }), __iterator__) { break L; }");
tryItOut("/*infloop*/for(*; this; __iterator__) {{} }");
tryItOut("/*for..in*/M:for([false, prototype] =  '' .@* in 5.0000000000000000000000) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in this) export *\n");
tryItOut("/*infloop*/while(({ prototype: ({ prototype: [, __proto__, constructor, ] }) }) = [({ __iterator__: ({ constructor: __parent__, __count__: __proto__ }) }), __count__, [[__noSuchMethod__, , , function::__proto__, ], ], ])return;");
tryItOut("/*infloop*/for(const \t__noSuchMethod__ = constructor; <xxx {__iterator__}={yield __count__.prop = (prototype = undefined != -3/0 < <x><y/></x>)} />; this.zzz.zzz) const __iterator__ = prototype, __proto__ = this;var __iterator__ = @foo;");
