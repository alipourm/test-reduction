tryItOut("L:if((yield  /x/ .yoyo(<x><y/></x>)))  else  if (((function ()({constructor: (<><x><y/></x></>)() })).call(__parent__, (null ? <><x><y/></x></> : <x><y/></x>) <<= true))) {gc() = *::*;/*for..in*/for(let __iterator__ in 1.3) yield  '' ; } else {yield;throw StopIteration; }");
tryItOut("(window)\n");
tryItOut("switch(new (new let prop = *, __count__ = 3.141592653589793;)()\t) { case new (<y><z/></y>)(<><x><y/></x></>).hasOwnProperty(\"__parent__\").@*: if([, ({ __proto__: prototype })] = ({ __iterator__: ({ prop: x::constructor }), __proto__: __proto__ })) return; else {return; }break;  }");
tryItOut("let(({ __noSuchMethod__: ({ __noSuchMethod__: prototype, __proto__: constructor }), __parent__: __noSuchMethod__ })) { yield prop;");
tryItOut("constructor = #1=[#1#] <= false;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in constructor.constructor getter= function(y) { yield y; var prototype, constructor;; yield y; }) ;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__ = 1e-81) ((function(){return __noSuchMethod__;})());");
tryItOut("L:switch((this.__defineSetter__(\"__parent__\", Function))) { case function::constructor: /*infloop*/for(let __noSuchMethod__ = .2;  \"\" ; [,,]) <x><y/></x>break; break;  }");
tryItOut("/*infloop*/for([__proto__, , , ({ __iterator__: ({ prototype: __iterator__, constructor: __proto__ }) })] = ({ __parent__: ({ prototype: __iterator__ }) }) = this.__defineSetter__(\"__parent__\", 'haha'.split).@*; (__iterator__ >>= <x/>)++; [@foo].filter(function (__count__, prototype) { const __noSuchMethod__, __parent__ = ({a1:1}); } )) {/*for..in*/for(var function::x::__proto__ =  \"\"  in <><x><y/></x></>) {throw true; } }");
tryItOut("/*for..in*/for(__count__ in [[1]]) [1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ((this if (<y><z/></y>)))) {yield <y><z/></y>;/*infloop*/M:while(prototype){gc(){} } }");
tryItOut("M:while((({constructor: __proto__ = __parent__ })) && 0)yield;");
tryItOut("/*infloop*/M:for(let ({ getter: ({ __iterator__: [__count__], __iterator__: ({ __iterator__: constructor }) }), __iterator__: [] }) = __proto__; (\n(#1#(<x><y/></x>))); new function  __noSuchMethod__ (prop, constructor) { return ({a2:z2}) } (__iterator__ = <><x><y/></x></>)) {/*infloop*/L:for(let __iterator__; undefined; <><x><y/>\r</x></>) ; }");
tryItOut("{return 0;if( /x/g --.*) /*infloop*/for( /x/g ; []; ({a1:1})) throw 1e4; else  if ( '' ) __proto__ }");
tryItOut("let __iterator__;");
tryItOut("gc()\nreturn eval(\"<><x><y/></x></>\", <x><y/></x>);");
tryItOut("{({ __count__: __parent__ })return window; }");
tryItOut("/*infloop*/do {{} } while([]);");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] = [11,12,13,14].sort in true) if(return <x><y/></x>;) { if ( /x/ ) {yield false;gc() }} else {}");
tryItOut("M:with({yield <x><y/></x>;yield; } instanceof ({ prototype: ({ x::prototype: prop, __count__: __proto__ }), prop: prop }) = false){}");
tryItOut("L: { }");
tryItOut("/*infloop*/do yield false; while(this);");
tryItOut("return;");
tryItOut("while((this) && 0)__count__;");
tryItOut("gc()");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((__parent__)(<><x><y/></x></>))){gc()yield; }");
tryItOut("{return <x><y/></x> }");
tryItOut("/*infloop*/while(window.eval(true)){}");
tryItOut("L:while((continue L) && 0){const __count__, __noSuchMethod__; }");
tryItOut("let (prop = (function ([y]) { })()) { return; }");
tryItOut("with({}) let(__noSuchMethod__ = null) ((function(){break M;})());");
tryItOut("with({}) { gc() } ");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in ((({}).hasOwnProperty)(eval(\"window\",  '' ))))__iterator__");
tryItOut("L:if(<x/>) { if (prop([,], *::*) .@*:: [[,,z1]].*++) {}\n else {var __iterator__ = prototype;this; }}");
tryItOut("if((__parent__.__defineSetter__(\"constructor\", this).__defineGetter__(\"__proto__\", <y><z/></y>))) with((prop.__parent__)){yield;(*); }");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(new eval(\"export *;\", <x><y/></x>); prop.__iterator__ = <x/> === (<x><y/></x>)[true].watch(\"prototype\", (function ([y]) { }).watch); (prop = this)) {L: {export *; }\n }");
tryItOut("/*infloop*/L:for(const __proto__; (x::constructor = <x/>); !(prop = <><x><y/></x></>).yoyo(<xxx>{__proto__}</xxx>.(yield __proto__))) {return  \"\" ; }");
tryItOut("do export prop; while(((((1 for (x in []))).call(@foo, ))) && 0);");
tryItOut("return  /x/g ;");
tryItOut("M:if(*) { if (@foo) {function  __proto__ (__parent__, __proto__) /x/ return <><x><y/></x></>; }} else var __iterator__ = 0/0, each;");
tryItOut("{/*infloop*/for(var [__proto__]; new (<x><y/></x>)(<x><y/></x>); (new return  /x/ ;())) const __iterator__;yield; }");
tryItOut("if([, , , ] = (__parent__ = __count__)) throw  \"\" ; else  if ([11,12,13,14].some) {return; }");
tryItOut("<x/>");
tryItOut("/*for..in*/for(let [__proto__, x::<xxx {__count__}={((new Function)()).throw((typeof window))} />] = false in  set prototype() { yield __parent__ }  = <y><z/></y>.isPrototypeOf(*::*)) yield;");
tryItOut("M:with(this.__defineGetter__(\"__iterator__\", function  __iterator__ (prototype) { yield constructor } )){return  '' ;return *::*; }");
tryItOut("{let get;((( \"\" ).__defineSetter__).call(undefined, <><x><y/></x></>)); }");
tryItOut("let (__noSuchMethod__ = ([11,12,13,14].filter), __iterator__ = ({ __count__: __count__ }) = __iterator__ = [[]]) { function (__proto__, __noSuchMethod__) { return window }  } const __count__;");
tryItOut("return (-1);");
tryItOut("/*infloop*/M:for(([(<x><y/></x> /= <y><z/></y>)].sort(Math.pow)); this; (({__proto__: [15,16,17,18].filter(<x><y/></x>, (__proto__ = 1e-81))})).__lookupSetter__(\"__parent__\")) {-3/0;while((yield [(-0)].map(({}).hasOwnProperty)) && 0)__parent__; }");
tryItOut("return;");
tryItOut("with({prop: (new (__parent__ =  /x/g .__noSuchMethod__ = *::*)(, __count__.prototype))}){{}; }");
tryItOut("with({__parent__: * != <><x><y/></x></>})return window;");
tryItOut("yield __count__;");
tryItOut("with({__iterator__: ((<><x><y/></x></>)[<x><y/></x>])()[this\t === <x/>/*\n*/.unwatch(\"__noSuchMethod__\")]})");
tryItOut("M:with({__iterator__: prototype = undefined})");
tryItOut("if(eval(\"<x><y/></x>\", <y><z/></y> ^ *::*)) { if (eval(\"5.0000000000000000000000\", prototype)) {yield <x><y/></x>;throw <><x><y/></x></>; } else throw 1e4;}");
tryItOut("switch(({ get prop get (prototype) { yield undefined } , __proto__: <x><y/></x> })) { default: export *;case (({}).hasOwnProperty(*, false)): ; }");
tryItOut("/*infloop*/while( /x/  == ({a2:z2})){__count__yield; }");
tryItOut("{(1.3); }");
tryItOut("/*infloop*/for(let __iterator__ = <y><z/></y> = [, , __noSuchMethod__] instanceof (this.__defineGetter__(\"constructor\", 'haha'.split).@*); (({__parent__ setter: (( /x/g .unwatch(\"constructor\"))(<y><z/></y>.prototype)).__defineSetter__ })); (( /x/g .eval(<x><y/></x>))((__parent__)))) let (__proto__ = true)\f { ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (window)( '' ) in window) export *;");
tryItOut("/*infloop*/do {if(window) {throw <x><y/></x>;(*); } else break ;throw window; } while([15,16,17,18].sort((new Function(\"gc()\")), 'fafafa'.replace(/a/g, (function (__count__) { return true } ).apply)));");
tryItOut("/*for..in*/L:for(const [__proto__, __count__] = (yield __count__ = ({ get __count__ __iterator__ (__iterator__, prototype)<x><y/></x> })) in [[1]].valueOf(\"number\")) /*infloop*/L:for((uneval(1.2e3)); (p={}, (p.z = undefined)()); 'fafafa'.replace(/a/g, function  prop () { yield <y><z/></y>.isPrototypeOf(__iterator__) } )) this;");
tryItOut("do yield <y><z/></y>; while((__proto__%=*) && 0);var x::__proto__ =  '' ;");
tryItOut("/*for..in*/for(__proto__ in (yield eval(\"continue ;\", @foo))) continue ; const __proto__;");
tryItOut("{\freturn;{} }");
tryItOut("if(((uneval((1e81 <<= window))))) { if (4.) do {export *;function  __parent__ (__proto__, __iterator__) { (window); }  } while(( /x/ ) && 0); else return *::*;}");
tryItOut("return\ncontinue M;");
tryItOut("/*for..in*/for(__count__ = __count__(new 0(@foo, -3/0)) in -1) /*infloop*/M:for(({__noSuchMethod__: ((uneval(<y><z/></y>)).__noSuchMethod__), __count__: <y><z/></y>.hasOwnProperty(\"__parent__\") }); __proto__ = \t(uneval(<x><y/></x>)); ((<x><y/></x> / <y><z/></y>) == (this for each (__proto__ in window)))) {(true); }");
tryItOut("const __proto__ = window;");
tryItOut("{; }");
tryItOut("/*infloop*/for(var __proto__;  /* Comment */<x><y/></x>; [<>__noSuchMethod__</>.__iterator__ if (prop)]) /*for..in*/M:for(\rvar [__iterator__, prop] =  /x/  in <y><z/></y>) {*::*;(undefined); }");
tryItOut("/*infloop*/for([prop.prototype getter= function(y) { yield y; yield <x><y/></x>;; yield y; } |= <x><y/></x> < 3.141592653589793]; ([<x><y/></x>.(<>__iterator__: constructor</>)]); <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", -1)) prototype;");
tryItOut("/*infloop*/L:do {/*for..in*/L:for(const __parent__ in ((<><x><y/></x></>)(<x/>))){O }let(__parent__) ((function(){yield;})()); } while(#2=[__parent__ = <><x><y/></x></>]);");
tryItOut("/*infloop*/while( /x/ )yield;");
tryItOut("do {<x/>; } while((<><x><y/></x></>.(null)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 *//*\n*/ for  each(var constructor in <y><z/></y>) {/*for..in*/for(function::prop = <y><z/></y> in undefined) {export *; } }\t");
tryItOut("{export constructor;export *; }");
tryItOut("/*infloop*/for(let __count__; @foo; <y><z/></y>) yield;");
tryItOut("/*for..in*/for(prop in new (gc)()) {throw __count__; }");
tryItOut("with({__count__: __proto__ / <x><y/></x>}){let prop = <!--yy-->, prototype = window; }");
tryItOut("if(#1=[#1#].watch(\"constructor\", function(y) { yield y; export prototype;; yield y; })) #3={a:#3#} const __parent__; else {export *;\n<x><y/></x>;\n }");
tryItOut("__parent__ = __iterator__;");
tryItOut("if((new __proto__(<y><z/></y>).prop)) if(.2) return; else  if (window) let __noSuchMethod__ = <x><y/></x>, prototype =  \"\" ; else  if (({ set prop(@foo, [constructor, prototype, prototype, , ])this.zzz.zzz })) /*for..in*/for(let prop in ((constructor)(({a2:z2}))))__noSuchMethod__");
tryItOut("/*\n*/if(let (constructor = __proto__) constructor(constructor = prop, <><x><y/></x></>)) { if (prop.__defineSetter__(\"let\", 'haha'.split) >>>=(function ([y]) { })()\n) {const __count__, {function::__proto__ } = 1e-81; } else {yield; }}");
tryItOut("if(true , 0.1) {export *; } else  if ( \"\" .unwatch(\"__parent__\")) const x::__parent__, function::prop;");
tryItOut("with(((<x><y/></x>)()))const __proto__;");
tryItOut("let (__iterator__ = [15,16,17,18].some(eval, (<><x><y/></x></'>)[<x><y/></x>]) - (+@foo)) { break M\nyield; }");
tryItOut("let constructor = true, __noSuchMethod__");
tryItOut("do {gc() } while((<x/>) && 0);");
tryItOut("{const constructor;let __iterator__, __parent__; }");
tryItOut("for(let y in []);");
tryItOut("if((({ get prop __proto__ () { return <x><y/></x>.@* } , __iterator__ setter: Math.sin }))) {yield window;export __iterator__; } else while((gc()) && 0){export *; }");
tryItOut("prop, __count__ = <x/>\nbreak ;");
tryItOut("(<x><y/></x>);L:if(this) return 3; else  if (<><x><y/></x></>) [,,];");
tryItOut("__iterator__");
tryItOut("with(new ( for each (__proto__ in <><x><y/></x></>) for (__parent__ in undefined) for (prototype in <y><z/></y>))( /x/ ) for ((<x/>)(true) in false)__parent__: <x/>.*)/*infloop*/L:while(new Object()){}");
tryItOut("for(let y in []);");
tryItOut("if(((1 for (x in []))).call((new ((new Function(\"\"))).call()), (yield ({a1:1}) != 033))) {let __noSuchMethod__;throw null; } else  if (this) {}");
tryItOut("this.zzz.zzz;");
tryItOut("{/*infloop*/do {let __noSuchMethod__ = <x><y/></x>; } while(<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>);switch(constructor) { case 2: case 1e81: __proto__ = <y><z/></y>;break; default: return <x/>;break; case 5: throw <x><y/></x>;break; export *;case 9: continue L;break; var __noSuchMethod__ = null, constructor = __noSuchMethod__;break; case #3={a:#3#}: window;break; case 4: export prototype;case 6: constructor, prop = *\f;break; let \f__proto__, constructor = prop;break; case 1:  } }");
tryItOut("/*for..in*/for(let constructor = (((1 for (x in []))).call(__parent__: <x><y/></x>\r = [1], ( /x/ .throw(*)))) in yield <><x><y/></x></>) {}\n");
tryItOut("/*infloop*/do /*for..in*/for(let __parent__ in (((1 for (x in [])))(@foo))){__iterator__throw <x/>; } while((__noSuchMethod__ = <><x><y/></x></> in constructor));");
tryItOut("{with({__proto__: this.unwatch(\"__count__\")})/*infloop*/for(let __iterator__; arguments; __count__) {constructor } }");
tryItOut("export prototype\n");
tryItOut("/*infloop*/do {throw this; { return *::* }  } while((<x/> for (prototype in <><x><y/></x></>)));");
tryItOut("if(__proto__ = (yield this)) false /x/g  else {{} const __proto__; }");
tryItOut("if(<y><z/></y>) { if ( '' ) (<><x><y/></x></>); else __noSuchMethod__ =  \"\" , __count__ = <y><z/></y>;}");
tryItOut("/*for..in*/for(var \r[prop, __parent__] = (({ prop: [, , __proto__, ] }) = __iterator__) in constructor = []) continue L;");
tryItOut("/*infloop*/for(let ({ prototype: [__count__, , ], __parent__: [] }) = null; new [15,16,17,18].some(this, __parent__.prop = this); <><>\n*.prop</></>) /*for..in*/M:for(const [__parent__, __iterator__] = (__count__ = (new [z1,,](@foo)) ? window[ /x/ ] : prototype ^ null) in ({a1:1})) {M:if([,,]) { if (prototype) {}} else constructor = @foo, __parent__;; }");
tryItOut("gc()(*::*);");
tryItOut("/*for..in*/for(const prop in (function ([y]) { })()) {; }");
tryItOut("L:do {export *;let prop; } while((prop >> new ([window].sort(({}).hasOwnProperty))((yield <><x><y/></x></>), window)) && 0);");
tryItOut("if(this.prop) { if (__proto__) ; else {export __parent__; }} const prototype;");
tryItOut("with({}) prop = prop;");
tryItOut("if(yield  /x/ ;\t) {/*infloop*/while([[1]])return; } else {__count__, prototype;var constructor = __iterator__; }");
tryItOut("throw <x><y/></x>; const __parent__;");
tryItOut("let (prototype = (yield <zzz>[<x><y/></x> if (<><x><y/></x></>)]</zzz>), __count__) { {} }");
tryItOut("this.zzz.zzz;");
tryItOut("3/0;");
tryItOut("if(((constructor.__noSuchMethod__ = prototype))()) {let constructor = <><x><y/></x></>, constructor = 5.0000000000000000000000;#1#; }");
tryItOut("(((this.__defineSetter__(\"prop\", function(q) { return q; })).__count__)).call({}, )");
tryItOut("do <y><z/></y>; while((({__parent__: (__count__.prototype), __iterator__: (this.@foo) })) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in __noSuchMethod__) {const __iterator__; }");
tryItOut("with({}) let([, , __count__], __count__) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = \r<x><y/></x>.__defineSetter__(\"prototype\", function (prototype) { yield  ''  } ).yoyo(let (__parent__ = *::*) <x><y/></x>) in this.zzz.zzz) /*for..in*//* nogeckoex bug 349964 */ for  each(prop in false) var prototype = [z1,,];");
tryItOut("yield;__iterator__;");
tryItOut("/*infloop*/while(new (*::*)() ? (let (prototype, __count__ = <x/>) window) : let (constructor, __parent__) @foo ^= ({constructor setter: Math.pow })){{export *; } }");
tryItOut("if(({prototype getter: ({}).hasOwnProperty, __parent__: (1.2e3)[ \"\" ] })) { if (this) {return; } else gc}");
tryItOut("/*for..in*/for(var [__count__, __proto__] = (*.unwatch(\"__iterator__\")) ^ ([1e4].some((1 for (x in []))))[null] in function(y) { yield y; yield <x><y/></x>;; yield y; } &= [z1,,]) false");
tryItOut("throw arguments;");
tryItOut("let (__parent__) { ; }");
tryItOut("try { break ; } finally { __noSuchMethod__ = __count__; } ");
tryItOut("if(<x/> >>> <x><y/></x>) let __parent__ = this; else  if (constructor = prototype; <= <x><y/></x>) yield; else /*infloop*/L:for(*; <x/>; __parent__) {var prototype;throw <><x><y/></x></>; } const constructor;");
tryItOut("do {; } while((constructor =  /* Comment */) && 0);");
tryItOut("for(let y in []);");
tryItOut("\n<><x><y/></x></>(constructor: *::* = __proto__).__defineSetter__(\"__noSuchMethod__\", (([15,16,17,18].some(Math.sin,  /x/ .hasOwnProperty(\"constructor\")) for (__noSuchMethod__ in null) for each (__proto__ in ((<x><y/></x>).watch)) for (__iterator__ in ({__iterator__: <><x><y/></x></>, prop: [1,,] })))).__defineSetter__)");
tryItOut("if(<x/>( '' ,  /x/g )) { if ((__count__.prototype)) {(<x><y/></x>);prototype }} else {<><x><y/>\t</x>\f</>; }");
tryItOut("let(__iterator__, prototype) ((function(){return __count__;})());");
tryItOut("do {gc()__iterator__, __proto__ = <><x><y/></x></>; } while((({}).unwatch(\"__proto__\")[ /x/g ]) && 0);");
tryItOut("false;\n<x><y/></x>;\n");
tryItOut("{constructor = null, prototype = <><x><y/></x></>;return  /x/ ; }");
tryItOut("let (__parent__ = 0/0.isPrototypeOf(constructor)<!--yy-->, ({ prototype: __count__ }) = __proto__ = (__parent__)() -= ( /x/g )) { while((({__parent__: false})) && 0)const prototype = prototype, __iterator__ = <><x><y/></x></>; }");
tryItOut("while((this) && 0)*;");
tryItOut("if(({ get: [(__iterator__)] }) = <x><\ty/></x>.(false)) { if (((yield new (window)( /x/ ) += this .@*:: @foo)))  else yield;}");
tryItOut("yield __noSuchMethod__;continue ;");
tryItOut("yield try { return; } finally { throw <x><y/></x>; } .@*;");
tryItOut("{const __proto__; }");
tryItOut("/*infloop*/for(<x/>; <><x><y/></x></>; window) {yield; }");
tryItOut("throw  /x/g \n");
tryItOut("/*for..in*/for(let [__count__, __proto__] = <> </> in __iterator__.(<><x><y/></x></>())) {M:while((~* >>= 0) && 0)( '' );/*for..in*//* nogeckoex bug 349964 */ for  each(const ( /x/  ? <y><z/></y> : <x><y/></x>)((({}).__lookupGetter__)) in __noSuchMethod__) {gc()yield; } }");
tryItOut("if((yield )) {(this); }");
tryItOut("/*infloop*/for((uneval(({__noSuchMethod__: \n#3={a:#3#}}))) / (--[[1]]); void <y><z/></y>; ([1,2,3,4].map)(<y><z/></y>, <><x><y/></x></>) <= (window\n)) {break ; }");
tryItOut("try { constructor = __proto__; } catch(let if (function(){yield [15,16,17,18].filter(gc, __proto__.( \"\" ));})()) { for(let y in []); } ");
tryItOut("L:if((new prop = (-1)((constructor)))) {__noSuchMethod__, prop;/*for..in*/for(const [__noSuchMethod__, \f__proto__] =  /* Comment */window in 1e+81) {throw this; } }");
tryItOut("L:if([11,12,13,14].sort) yield <><x><y/></x></>; else  if ((__noSuchMethod__ = __count__)) {{}new Function } else constructor = <><x><y/></x>', prop = <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __proto__ in this) {export *;/*for..in*/for(__proto__ in 3/0) yield *::*; }");
tryItOut("with({prop: (eval(\"(([z1] ? 1.2e3 :  set __parent__(__noSuchMethod__, __noSuchMethod__) { __count__ = <x><y/></x>, __count__ = <><x><y/></x></>; } ) for each (prop in 3) if (constructor)) .@*:: [[1]]\", ([(<><x><y/></x></>(<x/>))].map(true))))}){/*infloop*/for(yield false(({}), false); <x><y/></x> <= __count__ /= __count__; true) return <x/>; }");
tryItOut("with({}) { export __count__; }  const __noSuchMethod__;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("do {{} }null) && 0); __parent__, __count__");
tryItOut("if(__noSuchMethod__) { if (<x><y/></x>() + <><x><y/></x></>) {default:  } else {; }}");
tryItOut("if((({a2:z2}).watch(\"x::function::__noSuchMethod__\", (eval).call)) >> (uneval(prototype)) &= false) export yield; else  if (((new <y><z/></y>(__proto__)).watch(\"constructor\", 'haha'.split))) {undefined;return null; }");
tryItOut("L:while(((Function((true .@x:: (<><x><y/></x></>.yoyo(@foo))), (new (((Math.pow).apply).call)(((<y><z/></y>)()), function(id) { return id }(\f<><x><y/></x></>)))).__defineGetter__(\"prototype\", function(q) { return q; }))) && 0){/*for..in*/for(var prop = * in undefined) \nlet __parent__, __proto__ = window; }");
tryItOut("return [z1];");
tryItOut("L:  __count__throw __parent__;");
tryItOut("if(prop.prototype = __parent__ & this) { if (({}.__parent__)) with({__iterator__: [15,16,17,18].some(eval,  /x/g )}){;(<x><y/></x>); }} else {{} }");
tryItOut("/*infloop*/L:for(let ({ __proto__: ({ __parent__: prototype, __noSuchMethod__: __count__ }) }) =  ? this++ :  ''  = [z1,,]; (this.__defineSetter__(\"prop\", function  prototype (prototype, prototype) { var prop; } )); (-1)) return;");
tryItOut("L: {<x/> }");
tryItOut(" /x/ ; const __noSuchMethod__;");
tryItOut("if(-3/0) {/*for..in*/\fL:for(constructor in -3/0) {{}; } } else  if (delete ({}).hasOwnProperty) { }");
tryItOut("L: \f( \"\" ).__defineSetter__");
tryItOut("{}");
tryItOut("return true; const __noSuchMethod__;");
tryItOut(";");
tryItOut("/*for..in*/for(let prototype = [11,12,13,14].map in new Object(prototype, <x><y/></x>)) {}");
tryItOut("return;");
tryItOut("{/*infloop*/L:for(033; __noSuchMethod__ = <x><y/></x>; undefined.prototype) gc }");
tryItOut("if(Math.pow) return false; else  if (<y><z/></y>.throw(<x/>)) {\nvar prop; } else (<x><y/></x>);");
tryItOut("try { for(let y in []); } catch(__noSuchMethod__) { throw StopIteration; } ");
tryItOut("with(<><x><y/></x></>)gc()");
tryItOut("\rif(__parent__ = <x><y/></x>) /*for..in*/for(let [__iterator__, prototype] = <x><y/></x>.( \"\" ) in ({a2:z2})) yield; else  if (<x><y/></x>.unwatch(\"__iterator__\")) {const __proto__ = window;export __noSuchMethod__; }");
tryItOut("__noSuchMethod__ = window");
tryItOut("continue L;");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = this in ([__iterator__ .. window])) {if(__proto__ = *) export null; else constructor: #1#let constructor =  '' ; }");
tryItOut("\tL: prop");
tryItOut("/*infloop*/while(let (prototype, __noSuchMethod__)  '' )if(__count__) { if (*) ;} else throw  '' ;");
tryItOut("if( /x/ ) { if (window in null) {throw *::*;{} }} else yield;");
tryItOut("while(((new Function(\"const __iterator__ = #1=[#1#];\"))) && 0)continue ;");
tryItOut("/*for..in*/for(var __count__ = __noSuchMethod__ = 0.1 in <><{constructor}></{constructor}></>) var __parent__;");
tryItOut("/*for..in*/for(var __parent__ in ({})) {__count__ = prop, prop;(1e81); }");
tryItOut("export prototype");
tryItOut("/*infloop*/for(var __count__; ((Exception()) for (__count__(<x><\fy/></x>) in  /x/ ) for each (__count__ in <><x><y/></x></>)).isPrototypeOf(([15,16,17,18].some(/a/gi, <x><y/></x>))()); (gc).call(this.__defineSetter__(\"prototype\", (1 for (x in []))), (true).call, ).@foo) {if(false >= <x><y/></x>) {;\n@foo; } else  if (yield 3/0) {export *;; } }");
tryItOut("yield true;");
tryItOut("L:do {export *;Function } while((((function ([y]) { })().propertyIsEnumerable(\"__iterator__\"))) && 0);");
tryItOut("M:if() export __proto__;");
tryItOut("yield;");
tryItOut("L\f:do {gc()( \"\" ); } while((let __proto__) && 0);");
