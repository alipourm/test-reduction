
tryItOut("/*infloop*/for(let prototype = <x><y/></x>.__lookupGetter__(\"__count__\"); (eval(\"<><x><y/></x></>\", <y><z/></y>)\n); (-0)) let (__iterator__, __noSuchMethod__) { return 0x99; }");
tryItOut("/*infloop*/for(const [, ({ __proto__: __iterator__ }), ({ __proto__: constructor, __proto__: __proto__ })] = __iterator__ ? (window = <><x><y/></x></>) : (({__count__: *::*,  set get(prop, setter) { ; }  })); [,,z1].__defineSetter__(\"prop\", function  __count__ (prop) { break ; } ); [{}].sort([1,2,3,4].slice)) {case 2: export __noSuchMethod__;default: case 4: const __noSuchMethod__;break; gc() }");
tryItOut("/*for..in*/M:for(let __iterator__ in null) continue ;");
tryItOut("{<x/>const constructor, __proto__; }");
tryItOut("with({__noSuchMethod__: __iterator__.hasOwnProperty(\"yield\")}){continue ; }");
tryItOut("/*infloop*/while(__proto__)switch(new (Math.sin)()) { default: break; L:with(\n( '' -- %= ((undefined).watch)((prototype+=@foo), false)))export *;break;  }");
tryItOut("throw  '' ;\t\nreturn  /x/g ;\n");
tryItOut("L:if(<x><y/></x> ^ window.isPrototypeOf(*::*.prototype)) { if (<x><y/></x> instanceof <><x><y/></x></> /= (({__proto__: ~*}))) {if((this.zzz.zzz).yoyo(new [11,12,13,14].filter(window, <x/>))) <x><y/></x>; }} else {L: yyyreturn  /x/g ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__.constructor in __proto__.__proto__ = <><x><y/></x></>) switch(*.unwatch(\"__count__\")) { case new ((*::*).__defineSetter__)(<x/>, __iterator__):  }");
tryItOut("/*infloop*/L:do {export *;__count__ = <y><z/></y>, __proto__; } while((yield 0.1)); const prop;");
tryItOut("/*infloop*/while( /* Comment */this.zzz.zzz.@*){L:if( \"\" ) {export *;yield; } else  if ( /x/g ) {yield this;var __count__ = this; } }");
tryItOut("with({}) { ('haha'.split)(<x><y/></x>) } ");
tryItOut("/*infloop*/L:for(1.3.@foo; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; *.yoyo((undefined ^= [z1,,]))) {<x><y/></x>;throw *::*; }");
tryItOut("with({}) __noSuchMethod__ = 1e-81, constructor = this;");
tryItOut("if(<><x><y/></x></>.valueOf(\"number\")) { if (<x><y/></x>.(<y><z/></y>)) return; else yield;}");
tryItOut("L:if(<x/>) {do {return;return null; } while(([__count__].sort(function  prototype () { return @foo } )) && 0); } else /*infloop*/L:for(\t \"\"  >> <x><y/></x>; <y><z/></y>.constructor; #1=[__proto__]) var __noSuchMethod__ = window, constructor;");
tryItOut("if(Array(( \"\" .@foo))) { if (prototype) throw 0/0; else yield __iterator__;}");
tryItOut("return;return;");
tryItOut("while((<x/>[__proto__ = *]) && 0){if(1e4 & __noSuchMethod__) {const constructor =  '' ;yield constructor; } else  if (\n<x/>[#1=({__proto__: __noSuchMethod__})]) {break M; } else {<x><y/></x>;({}).hasOwnProperty } }");
tryItOut("let(__count__ = return, delete) ((function(){try { __proto__ = __count__; } catch(__count__) { return; } finally { for(let y in []); } })());");
tryItOut("/*for..in*/for(var ({ function::constructor: ({ __proto__: __parent__ }) }) in (((prototype.(this)))((<><x><y/></x></> || __iterator__)))){__iterator__if(eval(\"<y><z/></y> :: __count__\", (prop.(<><x><y/></x></>)))) continue  else  if (<x/>) {prototypeexport *; } }");
tryItOut("M:if(([[, ]] = (undefined for (<x><y/></x> in <><x><y/></x></>)).watch(\"prototype\", [1,2,3,4].slice))) { if (yield #1=[#1#]++ ^ (this.zzz.zzz).__noSuchMethod__ = __noSuchMethod__.constructor = 0x99) if(__parent__|=3.141592653589793) gc() else  if (this.__defineSetter__(\"__noSuchMethod__\", (<><x><y/></x></>).__defineSetter__)) prototype = <x><y/></x>, prop; else {function (constructor, __noSuchMethod__) { yield @foo; } ; const __noSuchMethod__; }}");
tryItOut("/*for..in*/for(var __parent__ = @foo in __iterator__%= /x/ ) *");
tryItOut("M:while(((\n([[1]].eval(constructor))((* instanceof *)))) && 0)/*for..in*/for([__iterator__, __parent__] = prop = [[]] in __iterator__) (__count__);");
tryItOut("do {export __count__;window; } while(((this.zzz.zzz)) && 0)\nif( \"\" ) { if (*) {export prop;const prop, __noSuchMethod__ = *; }} else ");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var ({__iterator__ setter: __iterator__ = <x/>, __parent__ getter: __parent__ = <x><y/></x> }) =  \"\"  in __count__ in @foo--) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var (__noSuchMethod__) in <y><z/></y>) export __iterator__;if(__count__) { } else export *; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("let(prototype, ({ __iterator__: [constructor, , prototype, , [__iterator__, constructor, , __proto__, __proto__]], __iterator__: prop }) = [15,16,17,18].map(<><x><y/></x></>.__defineSetter__(\"__parent__\", ({}).hasOwnProperty), false ? null : 1e4.unwatch(\"prototype\"))) { let(__parent__ = [] = <x/> && <><x><y/></x></>, [yield;, , ]) { return;");
tryItOut("L:switch(this--) { case 3: break; if(1e-81) {({}); }break;  }");
tryItOut("if(__noSuchMethod__ = 0/0) { if ((__count__.__parent__ setter= new Function)) {}} else {const __count__ = <><x><y/></x></>; }");
tryItOut("if(this.__defineSetter__(\"__iterator__\", Math.pow)) {gc()\f; } else  if ([__parent__, , , constructor: __noSuchMethod__] = ({}).__lookupGetter__) {return <x><y/></x>; }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = [15,16,17,18].some(let (__noSuchMethod__ = *::*) <x><y/></x>,  /* Comment */<y><z/></y>); case 2: let (prop) { if(#2=({prop: window})) \f{ if (constructor = prototype) {gc() } else {; }} }break; break; do export *; while((eval(\"if(<><x><y/></x></>) {let prototype, __noSuchMethod__ =  /x/ ; } else function (__parent__) { yield prop } \", (<x><y/></x>)[1e4])) && 0);gc()break; yield export __proto__;;break; default: break; .__lookupGetter__(\"__parent__\"); let (__parent__ = @foo ? <y><z/></y> : <x/>, __proto__) __count__ >> (<><x><y/></x><\t/> | [z1])) ");
tryItOut("if(({a1:1}) ? <y><z/></y> : window/*\n*/) { if ((void (-1)) % (constructor.yoyo(({a1:1}))))  else {yield;throw @foo; }}");
tryItOut("/*infloop*/for(const __iterator__;  \"\" ; (((null ? undefined : window).watch).call).call(<x/>.watch(\"prop\", function (__iterator__) { return prop } ), )) export __parent__;");
tryItOut("/*infloop*/M:while(this.__defineGetter__(\"__iterator__\", /a/gi)){{}yield prop; }");
tryItOut("let __count__, __iterator__ = <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("L:with(((<y><z/></y>)(<x/>, <y><z/></y>))){{} }");
tryItOut("with({__iterator__: (1e-81.__count__.propertyIsEnumerable(\"__parent__\"))}){prototype, __proto__\n }");
tryItOut("yield;const __proto__ = #1#, prop;if(let (__count__ = false, prototype) @foo) { if ((yield (-1))) {yield window;(<><x><y/></x></>); } else break M;}");
tryItOut("if(this.__defineSetter__(\"__count__\", Function)) gc() else  if (<><x><y/></x></>.watch(\"getter\", function  prototype () { yield * } )) {export *; }");
tryItOut("if((yield __parent__ =  '' )) {return @foo;export __count__; } else var __parent__ = <x><y/></x>;");
tryItOut("yield <><x><y/></x></>; const constructor;");
tryItOut("do switch('fafafa'.replace(/a/g, <><x><y/></x></>)) { default: if(__count__) throw *::*; else return;case  :  } while((\n \"\" ) && 0);");
tryItOut("if(null) {/*for..in*/for(var [prop, __iterator__] = [] in this) {throw 3.141592653589793; } } else  if (constructor.(null)) {(window); }");
tryItOut("{constructor, __count__ = (-1); }");
tryItOut("with(\nprop instanceof *::*)var prop = ({a2:z2});");
tryItOut("L:switch(yield) { default: {}break;  }");
tryItOut("return [null = <y><z/></y>].some(/a/gi);");
tryItOut("/*infloop*/L:while(eval(\"/*infloop*/for(const ({ __parent__:  }) = <x><y/></x> > this; (this()); __count__.constructor = function(id) { return id }) {export *;throw <><x><y/></x></>; }\", false >= <x/>.hasOwnProperty(\"__proto__\"))){yield; }");
tryItOut("throw __noSuchMethod__\n");
tryItOut("/*infloop*/L:while(<x><y/></x>){<><x><y/></x></>; }");
tryItOut("__count__ = __proto__;");
tryItOut("with(window\n < (yield this))gc()\nconst __parent__;");
tryItOut("if(__proto__ = <><x><y/></x></>) { if (<bbb xmlns=\"( /x/g  ,  '' )\"><ccc:ddd><zzz>.2.isPrototypeOf((([,,])[/window))</zzz><ccc:ddd></ccc\t:ddd></ccc:ddd></bbb>) {<x><y/></x> @ 3/0; } else throw prototype;do {{}export *; } while((@foo) && 0);}");
tryItOut("export *;");
tryItOut("/*infloop*/do //h\nvar __iterator__ = 3; while(true.__parent__);");
tryItOut("return [1]\n");
tryItOut("/*for..in*/for(let [constructor, __count__] = ({constructor: (({prop: (this.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__))}))}) in constructor.__proto__\f) yield  /x/ ;");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __proto__: __noSuchMethod__, __parent__: __proto__ }), __iterator__: [__count__] }) = ++(function ([y]) { })(); ({false: *}); (p={}, (p.z = *.@*)())) {yield;(<x><y/></x>); }");
tryItOut("M:if() {L: {yield <y><z/></y>;export *; }return  '' ; } else {break ; }");
tryItOut("if(constructor) var __noSuchMethod__ = <x/>, __noSuchMethod__ = <x><y/></x>; else  if (<x><y/></x>[ \"\" ]) yield  /x/ ;");
tryItOut("export __count__;");
tryItOut("/*for..in*/for(const function::prototype in ((({}).__lookupGetter__)(<x><y/></x>)))return;");
tryItOut("/*for..in*/for(let [<x/>, __parent__] = prototype = 3/0 in [,,z1]) {return  '' ;var __parent__ = null; }");
tryItOut("{/*infloop*/do export *; while(eval(\"(({prop: @foo }))\", [window])); }");
tryItOut("/*infloop*/for(new gc()['__count__']; (({function::__noSuchMethod__: false }) .@x:: (constructor = <x/>)); prototype.((this)())) {*::*;/*infloop*/for(*; *::*; <><x><y/></x></>) {{} } }");
tryItOut("/*infloop*/for(__iterator__%=.2;  /x/  |=  /x/ ; (new this >>> <x><y/></x>())) __count__, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("/*infloop*/do {gc() const __count__;if(!<x><y\t/></x> ? <x><y/></x> : __proto__) { if (eval(\"(__noSuchMethod__.prototype)\", __iterator__ - __noSuchMethod__)) {export *;if(<x><y/></x>) yield  /x/ ; } else /*for..in*//* nogeckoex bug 349964 */L: for  each(<x/>.constructor in <y><z/></y>) {export *; }} } while(({\f get __proto__(constructor, __noSuchMethod__)yield }).eval([15,16,17,18].map(function (constructor, __proto__) { ; } , eval)));");
tryItOut("return;");
tryItOut("while((0x99[<x><y/></x>]) && 0)var __noSuchMethod__ = <><x><y/></x></>, __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((undefined)([11,12,13,14].sort) in {}) gc()");
tryItOut("{{} }");
tryItOut("for(let y in [5,6,7,8]) let(function::__proto__, prototype = function(id) { return id }) ((function(){__proto__ = __count__;})());");
tryItOut("L: ;");
tryItOut("/*for..in*/M:for(var [__parent__, __proto__] = __count__ = *::* in prop) export *;");
tryItOut("let(({ __parent__: prop, __noSuchMethod__: __parent__ })) { return;");
tryItOut("for(let y in [5,6,7,8]) return window;");
tryItOut("/*infloop*/for(__parent__ = <y><z/></y>; [<y><z/></y>].some(__iterator__ % <x><y/><\t/x>) ? this.__defineGetter__(\"__iterator__\", 'haha'.split) :  /x/ .__noSuchMethod__; ([(constructor <<= this)].filter((1 for (x in []))))) /*infloop*/while((function(y) { yield y; continue ;; yield y; }).call((window << 4.), [,].isPrototypeOf(yield;))){/*for..in*/for(let __noSuchMethod__ in ((/a/gi)(*)))<>yyy</> }");
tryItOut("return null;");
tryItOut("/*infloop*/while(*){\f}");
tryItOut("while((([#3={a:#3#}])) && 0)<><x><y/></x></>;");
tryItOut("if(<><zzz><x><y/></x></zzz></>.hasOwnProperty(\"__iterator__\") ?  : (({__proto__: let }))) {/*for..in*/for(const __noSuchMethod__ in (((function(y) { yield y; gc(); yield y; }).apply)(1e81))){yield;gc() }let({}) ((function(){})()); } else {with((({__noSuchMethod__: <><xxx {__iterator__}={@foo} /></>, __proto__: <x><y/></x> }))){(<x><y/></x>); } }");
tryItOut("with({}) continue \n");
tryItOut("(<y><z/></y>);\nyield [1,,];\n");
tryItOut("{export constructor; }");
tryItOut("/*for..in*/L:for(let constructor.__noSuchMethod__ in [15,16,17,18].filter((1 for (x in [])), <x/>)) switch(<x><y/></x>) { case 8: break;  /x/ ;break;  }\n");
tryItOut("with({}) let(__count__) { let(prop) ((function(){yield __noSuchMethod__ = __iterator__;})());");
tryItOut("if(this.__defineGetter__(\"prototype\", (Math.pow).call)) export prototype; else {(.2); const __count__; }");
tryItOut("if((({ get __parent__ __proto__ () { yield yield (({__parent__: @foo})) }  }) << ([false for (prototype in [z1]) for each (({ __iterator__: prototype }) in <><x><y/></x></>);]))) {{continue L;break ; } }");
tryItOut("yield false;");
tryItOut("L: /*for..in*/M:for(var __count__ in <><x><y/></x></>) {let __parent__; }");
tryItOut("let (__iterator__, __proto__) { return; }");
tryItOut("L: yield *;");
tryItOut("__iterator__ = prop;");
tryItOut("__count__.prototype = __parent__;");
tryItOut("/*for..in*/L:for(let [prototype, __parent__] = (({__noSuchMethod__: *::* != })) in __parent__) {var prototype; }M:if(__parent__) { if ((prop%=1e-81)) {{} }} else return .2;");
tryItOut("L:with({__iterator__: ([,,].__defineSetter__(\"delete\", ([,,]).__defineSetter__))}){/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in [[1]]) {(({a1:1})); } }");
tryItOut("with([new ((new Function(\"\")))( \"\" )].some(new Function)){if(false) { if (__parent__) {export *; } else export *;} }");
tryItOut("/*infloop*/for(let __iterator__ = (__parent__ = this.eval(new 'haha'.split(__parent__))); ({ set __iterator__() { yield __noSuchMethod__ = __noSuchMethod__, <x><y/></x> } , __parent__: <x/>.throw(0/0) }); <zzz>( *= *::*)</zzz>) {return <x/>;gc() }");
tryItOut("yield (prototype = ([@foo]))\n");
tryItOut("M yield (eval(\"return true;\", window)); :with([(yield  /x/ )\n].map(function(q) { return q; }))if( \"\" .watch(\"prototype\", function(y) { yield y; yield;; yield y; })) { if ((new (function(y) { yield y; throw __proto__;; yield y; })(<x><y/></x>, (-1)))) {<x><y/></x>; }} else {return this;throw <><x><y/></x></>; } const prop;");
tryItOut("L:switch(prop.(this) <<= <x><y/></x>.@*) { default:  }");
tryItOut("/*for..in*/{return; }");
tryItOut("/*for..in*/for(var prop =  /x/  .@*:: ({a2:z2}) in *) {(window); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((__proto__)())(function (__proto__, prototype) { return null } ) in __proto__) {export __count__; }");
tryItOut("/*infloop*/for(<><bbb xmlns:ccc=\"[*::*]\"><ccc:eee></ccc:eee></bbb></>;  /x/g  && *; (function(y) { yield y; return;; yield y; })( /x/ ++, <x><y/></x>)) {var prototype = *, __parent__ = prop;/*infloop*/do yield null; while(constructor); }");
tryItOut("/*for..in*/M:for(const prototype = prop-=window in (function ([y]) { })()) {yield <x><y/></x>;break ; }");
tryItOut("break ;\nthrow <><x><y/></\tx></>;\n");
tryItOut("with({prop:  '' }){;yield; }");
tryItOut("return <x/>.unwatch(\"prototype\") :: null.__lookupGetter__(\"__proto__\");");
tryItOut("with({}) { yield ( \"\" )[(this.__defineGetter__(\"__parent__\", ({}).hasOwnProperty))]; } ");
tryItOut("with({}) { {} } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(true in eval(\"return;\", 1e-81) = prop = \t<x><y/></x>.propertyIsEnumerable(\"__count__\")) (.2)\n");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) /*for..in*/for(let prop in ((eval)(function::__parent__))){return  /x/g ;var constructor; }");
tryItOut("if(({}) >= true.propertyIsEnumerable(\"__noSuchMethod__\")) { if (case <y><z/></y>\n: let __parent__ = __parent__ >= <><x><y/></x></>, __iterator__;case (({a1:1}) ? [z1,,] : this\n): /*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; <\r><x><y/></x></>) { }\nthrow *;break; case 5: throw true;break; break; )  else {;yield this; }}\nconst __iterator__ = ({}), constructor = [[]]");
tryItOut("throw <x/>;");
tryItOut("L: {export prop;\n;\n }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = (new true(true)) in (let __noSuchMethod__ = window)) {switch(window) { case 3: break;  } }");
tryItOut("(*::*);/*infloop*/for(prop; this; <x><y/></x>) {__count__ =  /x/g , prop = __count__; }\nif(window.__lookupGetter__(\"__noSuchMethod__\")) (<x/>); else {@fooreturn <><x><y/></x></>; }\n");
tryItOut("{return;/*for..in*/for(let [__iterator__, __iterator__] = (({__noSuchMethod__: <x/> })) in <x/>) {yield undefined; } }");
tryItOut("/*infloop*/for(var constructor = ((1 for (x in []))).call(true, this); @foo == {}; *::*) (<x><y/></x>);");
tryItOut("with({}) { __parent__ = constructor; } ");
tryItOut("M:if((({ get __proto__ prop () { return <y><z/></y> } ,  set __noSuchMethod__ yield (prop) ''  }))) { if ((uneval(<><x><y/></x></>.@*))) {window }} else {;const __iterator__, __proto__; }");
tryItOut("/*infloop*/M:for(({ get __parent__ __count__ (__parent__) { (function(id) { return id }); }  }); (prop.@*) for (__count__(<y><z/></y> , (-0)) in prototype = <y><z/></y>) for each (__parent__ in [,,z1]) for each (__parent__ in window); prototype = undefined.throw(false.throw(<x><y/></x>))) ");
tryItOut("switch(let (__iterator__, __proto__) prototype) { case 4: M:do {{}with({prop: this})constructor, __proto__ } while(( ([window].filter(((new Function(\"export *;\"))).call))((p={}, (p.z = \nconstructor)()))) && 0);break; case constructor( /x/g ) = let (setter, __iterator__) __noSuchMethod__: const function::__count__ = <x/>, __count__ = 1.2e3\n }");
tryItOut("var prototype, __count__ = #1#");
tryItOut("/*infloop*/*::*");
tryItOut("M:while((3) && 0)return;");
tryItOut("/*for..in*/for(__iterator__ =  ''  - <x><y/></x>.hasOwnProperty(\"__count__\") in eval(\"yield;\", window)) {let @foo = (-1), <x><y/></x>, __proto__;/*infloop*/while(let (prototype = <y><z/></y>, constructor) (__noSuchMethod__ = true)){const __count__, __parent__; } }");
tryItOut("{if(null) {return; } else  if ((function ([y]) { })()) prop, __proto__ = null; else /*for..in*/for(let prototype in *) {} }");
tryItOut("L:while((<x/> / undefined) && 0){/*\n*/if(<x/>) { if (__proto__) {function(q) { return q; }return; } else {return;yield; }} }");
tryItOut("for(let y in []);");
tryItOut("do {return;prop, __count__; } while((true) && 0)\n/*infloop*/__noSuchMethod__");
tryItOut("if(.2) { if ([(<\r><x><y/></x></>.watch(\"constructor\", /*\n*/[1,2,3,4].slice).constructor)].some(Math.sin)) yield null;} else throw <><x><y/></x></>;");
tryItOut("/*infloop*/L:do constructor; while(([__parent__.(__noSuchMethod__ = true)].filter(function (constructor, __proto__)#1=[#1#] && <><x><y/></x></>)));");
tryItOut("let (__count__, constructor) { while((-3/0--) && 0)/*infloop*/L:for(let __count__; <x><y/></x>; 1e-81) yield; }");
tryItOut("if(<x><y/></x>) {const prototype; }");
tryItOut("L: {;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __proto__: [, ({ prop: __parent__, __iterator__: __proto__ }), ({ function::constructor: prototype }), ] }) in null) return;");
tryItOut("\n{}\n");
tryItOut("let (constructor = ) { L:if(<><x><y/></x></>) __iterator__ else return; }");
tryItOut("if(({__proto__: 1e4, __count__: * })) ");
tryItOut("let(__parent__, __proto__ = undefined) { (<y><z/></y>);");
tryItOut("/*infloop*/M:do return <x/>;continue ; while(prototype = __proto__ = <x><y/></x>);");
tryItOut("var __proto__\n");
tryItOut("(<x><y/></x>)\n/*for..in*/for(const __iterator__ in String()) {L: {; } }");
tryItOut("/*infloop*/for(3.141592653589793 for each (__proto__ in 033); \n[,,]; export *) {{\f}<x/>; }");
tryItOut("switch(new (prototype = <><x><y/></x></>)(this.__defineSetter__(\"prop\", constructor)).__defineGetter__(\"__count__\", ((uneval(undefined))).watch)) { default: null;break; M:with({constructor: [<x><y/></x>]})continue ;case [,]: throw function(id) { return id }; }");
tryItOut("if(({ __noSuchMethod__: __count__, constructor: constructor }) = ({ __proto__: __parent__, __iterator__: __parent__ })) {({}).hasOwnPropertyconst constructor = window, prop = <x><y/></x> const prop; } else let(prop) ((function(){let __proto__ = <y><z/></y>;})());");
tryItOut("while((3.141592653589793.constructor if ((* ? <x><y/></x> : __iterator__))) && 0)throw <y><z/></y>;");
tryItOut("/*for..in*/M:for(let prototype = [,,z1] in <><x><y/></x></>) yield;");
tryItOut("M:if((this.zzz.zzz.prop)) switch(false) { default: window;break;  } else  if ((__noSuchMethod__ = 0)) with({prop: this})__iterator__; else __iterator__");
tryItOut("with({}) throw StopIteration;");
tryItOut("yield  /x/ ; const prop;");
tryItOut("/*infloop*/for((null.__lookupGetter__(\"constructor\")); [1].__lookupGetter__(\"prototype\"); function(y) { yield y; (this);; yield y; }( /x/g , window)) {M:if(<x><y/></x>) { if (*) {let prop, prototype = true; }} else yield;; }");
tryItOut("L: /*infloop*/do {} while( /x/g );");
tryItOut("L:if(<><x><y/></x></>.__noSuchMethod__.unwatch(\"__proto__\") >= new <x/>) { if ((yield (p={}, (p.z = *)()))) continue M; else yield <x\t><y/></x>;}");
tryItOut("if([11,12,13,14].filter) gc() else  if (<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")) if(constructor.__iterator__ =  '' ) {{} } else throw #3={a:#3#};");
tryItOut("{const prototype = true; }");
tryItOut("with({}) {  } ");
tryItOut("do {export function::__count__; } while((({__noSuchMethod__: __noSuchMethod__ % 0.1 >>> [15,16,17,18].filter([1,2,3,4].map,  /x/ ) })) && 0);");
tryItOut("throw __count__;");
tryItOut("if(<><x><y/></x></>--) {(<x><y/></x>).call } else  if ( \"\"  *= 1e+81) {gc() }/*infloop*/for(__noSuchMethod__ = true in <><x><y/></x></>.unwatch(\"__noSuchMethod__\"); yield <y><z/></y>; __noSuchMethod__ = <x/> && [11,12,13,14].filter) return *::*;");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/do if((__iterator__--))  else {yield __parent__;\tyield; } while(new constructor = *::*((constructor = *::*.__defineSetter__(\"__parent__\", ((this).__defineSetter__).call))));");
tryItOut("L:do {prop = true, constructor = true;(1 for (x in [])) } while((.__parent__) && 0);");
tryItOut("/*for..in*/L:for(let constructor in ((gc)(033)))(3);");
tryItOut("L:while((Array()) && 0){; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = undefined in true) return;");
tryItOut("prototype.__parent__");
tryItOut("/*infloop*/while(( /x/ --));");
tryItOut("L: {M:if(this.zzz.zzz) yield; else  if (([15,16,17,18].some([1,2,3,4].slice,  /x/ ))) const __proto__; else function  prototype (__proto__) { yield <y><z/></y> }  }");
tryItOut("let (__noSuchMethod__ = ('fafafa'.replace(/a/g, 033)).watch(\"constructor\", [1,2,3,4].map), __noSuchMethod__) { return __parent__, get; }");
tryItOut("");
tryItOut("with({}) { gc() } ");
tryItOut("{/*infloop*/while((.2)())continue ; }");
tryItOut("L: __iterator__");
tryItOut("L: return;");
tryItOut("/*infloop*/M:for((__count__ =  \"\" ); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (this.__defineSetter__(\"__parent__\", function(q) { return q; }) -= (__noSuchMethod__ = <></>))) {<x/>\nexport *; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = function::__iterator__.function::__iterator__ getter= (1 for (x in [])).valueOf(\"number\") = ((yield undefined.__parent__)).__defineGetter__(\"__proto__\", ({}).__lookupGetter__) in -3/0 * *::* && <x><y/></x>) {if(this.__defineGetter__(\"delete\", Math.sin)) {return; } else  if (function () {  } .constructor\t =  \"\" )  }({}).__lookupGetter__");
tryItOut("/*infloop*/M:for(let prototype = *::* /= <x/>; [15,16,17,18].sort((*).watch, false); this.zzz.zzz) {L:if(#1=[#1#][(++false)]) { if (false) (window); else /*\n*/{__count__ = <x><y/></x>yield *::*; }} }");
tryItOut(" for (<><x><y/></x></>.__parent__ in function(id) { return id }) for each (__iterator__ in <x><y/></x>) if //h\n(false)");
tryItOut("switch(prototype) { case (({__noSuchMethod__ getter: function(y) { yield y; ; yield y; } }) .@*:: <x><y/></x>.(({}))): var \ffunction::constructor = 0x99;case 6: yield; }");
tryItOut("{continue M;\nvar constructor, prop;\nL:if(__iterator__.__proto__ = 3 getter= constructor) {return <x><y/></x>; } else  if ((p={}, (p.z = true)())) {export *;export __parent__; } else false; }");
tryItOut("if(<y><z/></y> ?  \"\"  : constructor = <><x><y/></x></>) return <>prop</>");
tryItOut("return <x><y/></x>;yield;;");
tryItOut("if([1,,].__defineGetter__(\"__proto__\", (1 for (x in [])))) {{}(*); } else  if (1.3 <<= <y><z/></y>) (@foo); else export constructor\n");
tryItOut("L:if((window << ({}))) {switch( '' ) { default: if(<x><y/></x>) export *; else  if (<x><y/></x>) {yield  /x/g ;return this; } else yield;break;  }<y><z/></y>\n }");
tryItOut("/*for..in*/for([prop, prop\t] = [,,z1]\t.yoyo(<x><y/></x>) in  /x/g ) return;");
tryItOut("L:with({prop: (__parent__ = <x><y/></x>.__lookupGetter__(\"constructor\"))})yield true;");
tryItOut("/*infloop*/for(var __noSuchMethod__; (Function(__noSuchMethod__) === (Function)); <><x><y/></x></> *= __proto__.eval( /x/ )) {prototype = <x/>, __proto__ = window;let break L;, __proto__; }");
tryItOut("{yield; }");
tryItOut("/*infloop*/M:do with(((yield <x><y/></x>).yoyo((p={}, (p.z = <y><z/></y>)())))(new ((this.zzz.zzz))(), ({__parent__: window})))L:if((prototype.prototype &=  \"\" .__defineSetter__(\"prop\", /a/gi))) M:if(this) { if ([1]) gc() else } while(gc());");
tryItOut("break M;\n4.\n");
tryItOut("/*for..in*/L:for(var (__count__)(*::*) in ((({}).hasOwnProperty)((<x/> ? [,,z1] : true).eval((({}).__lookupGetter__.watch(\"__noSuchMethod__\", (1 for (x in [])))))))){yield; }");
tryItOut("for(let y in [5,6,7,8]) throw __parent__;");
