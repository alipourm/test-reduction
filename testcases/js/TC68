
tryItOut("/*infloop*/for(eval(\"__iterator__ = <><x><y/></x></>, prop;\", <><bbb xmlns:ccc=\"constructor\"><ccc:eee></ccc:eee></bbb></>); (this = (({__count__: @foo %= <y><z/></y>,  set __iterator__(__parent__) { return (true >= <x><y/></x>) }  }))); (prototype =  /x/g )[ /x/g ++]) ;");
tryItOut("prototype;");
tryItOut("if((prop =  /x/g  - <y><z/></y>)\n)  else  if (<x><y/></x> .@*:: eval(\"{}\", <y><z/></y>)\f) {/*for..in*/for(let __noSuchMethod__ =  ''  in  '' \t) {{}yield <><x><y/></x></>; } } else {do { } while((window) && 0); }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const new  /x/g (window, *).constructor in function(id) { return id }) {gc() }");
tryItOut("const __count__, __parent__;");
tryItOut("/*infloop*/for(({ __iterator__: [[], <y><z/></y>, ({ prop: let }), __noSuchMethod__] }) = this.zzz.zzz ^= __proto__; eval(\"let prop;\", __proto__.( /x/g )); (prop.( /x/g .yoyo(true))) > ([1,,])()[ /x/ .watch(\"__proto__\", ({}).hasOwnProperty) <<= ((function(y) { yield y; __noSuchMethod__ = __proto__, __parent__ = <y><z/></y>;; yield y; }).call( \"\" ,  /x/g ))]) __noSuchMethod__");
tryItOut("if(__parent__ = <x/> || false) continue ; else  if (this.__defineSetter__(\"__parent__\", [1,2,3,4].map)) {<><x><y/></x></> }\n/*infloop*/while( '' )break M;");
tryItOut("return (yield  \"\" );");
tryItOut("/*infloop*/ { yield delete @foo[gc()] } \n");
tryItOut("return;");
tryItOut("\n");
tryItOut("let constructor = 1e-81;\nconst prototype, __noSuchMethod__ = undefined;\n");
tryItOut("/*infloop*/L:do constructor while(({__noSuchMethod__: []}).yoyo(;.throw(3.141592653589793).watch(\"__parent__\", (new Function(\"var __iterator__;\")))));");
tryItOut(" if ([].filter([1,2,3,4].map(prop)))");
tryItOut("const __parent__ = <x><y/></x>, each;export *;");
tryItOut("/*infloop*/for(var __parent__; this.__defineSetter__(\"__count__\", 3.141592653589793); (([,].__proto__)[3])) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in <><x><y/></x></>) {throw <y><z/></y>;__proto__ = undefined, constructor = <x><y/></x>; } }");
tryItOut("if(new Function(yield).isPrototypeOf(__parent__.__noSuchMethod__ = *::*)) {if((this.__defineGetter__(\"__iterator__\", [1,2,3,4].map))) {}; }");
tryItOut("/*for..in*/for(let prototype in ((function (prototype)__parent__)(__iterator__))){(arguments);let __parent__; }\n");
tryItOut("/*for..in*/for(const \t<x><y/></x>.prototype in false) {while((#3={a:#3#}) && 0)const __proto__;export __count__; }");
tryItOut("with({}) constructor = __parent__;");
tryItOut("let ([, ({ prop: __parent__, function::prototype: function::prototype })] = new (( /* Comment */ /x/ ))(), __noSuchMethod__) { throw undefined; }");
tryItOut("continue M\n");
tryItOut("/*for..in*/for(constructor in (((void <x><y/></x>))(((\\.prototype.watch(\"prop\", -1) ? new ((__noSuchMethod__).__defineSetter__)((new (false).watch()), <><x><y/></x></>) : <><x><y/></x></> %  /x/g )((this % yield <x><y/></x>)))))){while((__noSuchMethod__) && 0){gc() } }\nlet __count__ = prototype, __proto__;");
tryItOut("/*infloop*/do {throw @foo;/*for..in*//* nogeckoex bug 349964 */ for  each(<> if ( \"\" )</>.__count__ in this) {return;break M; } } while(({ prototype: [], prototype: ({ __parent__: [, prototype] }) }) = ([(__parent__ = \f<><x><y/></x></>)].some(Math.sin)));");
tryItOut("/*infloop*/M:for(var prop; (new new Function(1e81 += 1e4).propertyIsEnumerable(\"__count__\")(function ([y]) { }.yoyo(new Number(0.1)),  \"\" .valueOf(\"number\"))); (__proto__ = false)) {/*for..in*/L:for([__count__, __noSuchMethod__] = [[1]] in <x><y/></x>) export prop;if(*(<x/>, #3={a:#3#})) { if (true) var prototype = <><x><y/></x></>; else var __noSuchMethod__ = undefined;} }");
tryItOut("return <><x><y/></x></>;");
tryItOut("let (__noSuchMethod__ = (({__proto__ getter: ({}).hasOwnProperty }))) { /*infloop*/for(var prototype = *::*; <><x><y/></x></>; <y><z/></y>) yield; }");
tryItOut("if(this.__defineSetter__(\"__count__\", eval)) { if ([new [1,2,3,4].slice()].sort(Function))  let \nexport *;\n} else return;");
tryItOut("__parent__;");
tryItOut("/*infloop*/L:while((yield *)){constructor }");
tryItOut("do {constructorexport *; } while((Function() <= new ((new Function(\"return <><x><y/></x></>;\")))(this.zzz.zzz) &= 4..__defineGetter__(\"constructor\", function(q) { return q; })((yield <><x><y/></x></>))) && 0);");
tryItOut("/*infloop*/do {<xxx>{__iterator__}</xxx> } while(void *::*.eval(prototype.(window)));");
tryItOut("/*infloop*/L:for(let __iterator__; <x/>; new ('haha'.split)(#0=({prop: <y><z/></y>}), <><x><y/></x></>) % [new Object(prototype = __count__) if ( /x/ )]) ;");
tryItOut("return [,];");
tryItOut("(1 for (x in []))\nyield;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in [11,12,13,14].filter) {}");
tryItOut("L:if(prop) { if (__noSuchMethod__+=<x><y/></x>) export *; else ((new gc(*)));}");
tryItOut("yield;");
tryItOut("/*infloop*/do ; while((({ get __parent__ constructor (__count__) { yield <x><y/></x> }  })));");
tryItOut("/*for..in*/for(__noSuchMethod__ = this.zzz.zzz.propertyIsEnumerable(\"__proto__\") in new (<x><y/></x>)(<><x><y/></x></>, true).unwatch(\"__noSuchMethod__\")) {\n }");
tryItOut("return;");
tryItOut("with({}) { return; } ");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("M:while((#2=[('fafafa'.replace(/a/g, (function  prototype () { return <x><y/></x> } //h\n).apply))]) && 0){L: {L:with({__count__: __noSuchMethod__ setter: this.zzz.zzz}){ } } }");
tryItOut("{break ; }");
tryItOut("export constructor;\n/*infloop*/M:for(__proto__ = <x/>;  /x/g ; window) {return; }\n");
tryItOut("const prototype;");
tryItOut("/*infloop*/M:for(this.zzz.zzz; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prop .. prop); (({try { var __proto__, prop; } catch(__count__ if (function(){return;})()) { {} } catch(prototype) { yield; } : __proto__})) - 4. :: function(id) { return id }) M:with( /x/ )export prototype;export *\nexport __noSuchMethod__;");
tryItOut("/*infloop*/while(~@foo){constructor;gc() }");
tryItOut("continue \n");
tryItOut("L: {export constructor;let (__noSuchMethod__ = (-0)) { continue ; } }");
tryItOut("let(__parent__, __proto__) { (1 for (x in []))");
tryItOut("L:with({prototype: return})M:if(null) export prototype; else {const prop; }");
tryItOut("with({prop: new gc(*::*)}){gc()L:with({constructor:  /x/ }){ } }");
tryItOut("L: return;");
tryItOut("__iterator__.__parent__ getter= [1,2,3,4].map");
tryItOut("(new  '' (<x/>))(.2) = ({ __proto__: ({ prototype: [, , , constructor, ] }) });");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("3/0;\nexport __count__;\n");
tryItOut("/*for..in*/M:for(var __proto__ = ((this.hasOwnProperty(\"__proto__\")) if ({})) in (yield ((p={}, (p.z =  /x/ )())))) return;function(q) { return q; }");
tryItOut("let(constructor, __noSuchMethod__ = this.__defineGetter__(\"__noSuchMethod__\", function::constructor)) { __iterator__ = __iterator__;");
tryItOut("/*for..in*/ { yield ([,,] / #1=[#1#]) } ");
tryItOut("try { __noSuchMethod__ = constructor; } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(var __proto__ = 5.0000000000000000000000 in true) *::*;");
tryItOut("/*infloop*/for(var constructor; this.isPrototypeOf(this.__defineGetter__(\"__count__\", (new Function(\"yield constructor;\")))).__lookupSetter__(\"prototype\"); (-1)) {if(([15,16,17,18].map( /x/g , <><x><y/></x></>)))  else  if ((<y><z/></y>)(null)) ; else yield  '' ;continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in function::__parent__) export __parent__;");
tryItOut("{; }");
tryItOut("/*infloop*/for([, , __noSuchMethod__, __noSuchMethod__] = #2=[<><x><y/></x></>]; <x/>; <y><z/></y> * null) yield <x><y/></x>;");
tryItOut("/*infloop*/for(var constructor; ('haha'.split()); arguments) {{} }");
tryItOut("let([, , , ]) ((function(){this.zzz.zzz;})());");
tryItOut("if(prop.__defineSetter__(\"constructor\", function () { return <><x><y/></x></> } ) = ([11,12,13,14].some .@ (this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; undefined; yield y; }))).__lookupGetter__(\"__count__\")) { if ([(function(q) { return q; }( \"\" , *::*))].map(function  __proto__ () { return + /x/  } )) {/*infloop*/do  while((new ({}).__lookupGetter__([z1,,]))); }} else {gc()if(((-0) .@ *)) {(<x/>); } else  if ([11,12,13,14].filter >>>=(-1)[undefined]) yield -1; else {<><x><y/></x></>;return [[]]; } }\t");
tryItOut("throw  /x/g ;");
tryItOut("/*\n*/\n/*infloop*/L:for(var __parent__; <y><z/></y>; __count__) {yield null;(<><x><y/></x></>); }\n");
tryItOut("/*infloop*/M\r:for((({__parent__: (function::__parent__.prototype setter\f= ([1,2,3,4].slice).call) for each (constructor in __iterator__) if (@foo) })); this.isPrototypeOf(*); (window.hasOwnProperty(\"__parent__\"))[window ? 1e4 : <y><z/></y>]) {<><x><y/></x></>;export __iterator__;/*for..in*/L:for(const __parent__ in  /x/g ) gc() }");
tryItOut("if(new Iterator(window && <x><y/>//h\n</x>) :: .__defineSetter__(\"__count__\", (0.1).__defineSetter__)) { if (033 != <y><z/></y>) if(<x><y/></x>.hasOwnProperty(\"__count__\")) function  constructor (__parent__)undefined else  if (new Object(<><x><y/></x></>)) {export *;__iterator__ = true; } else {continue ; } else {gc()prototype; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M\f: for  each(let __noSuchMethod__.__count__ in ([prototype].map(gc).__lookupSetter__(\"__parent__\"))) {/*for..in*/L:for(var [\tprop, __parent__] =  \"\"  in  \"\" ) {(1 for (x in [])) } }");
tryItOut("\nreturn *;\n(1 for (x in []))\n");
tryItOut("if( /x/ .__defineSetter__(\"__parent__\", Math.sin) == #1=-3/0) { if ( \"\" .* * __parent__\n) ; else ;}");
tryItOut("constructor");
tryItOut("var x::__iterator__, __proto__ = constructor;");
tryItOut("if([({ get __noSuchMethod__ __iterator__ (constructor, __proto__) { yield  \"\"  }  }) if (((function(q) { return q; }).call( '' , )))]) return __noSuchMethod__; else  if (((__noSuchMethod__ = (p={}, (p.z = @foo)())))(<y><z/></y>)) {<x><y/></x>; }");
tryItOut("if(<><x><y/></x></>.yoyo(0/0)) { if (new ((1 for (x in [])))()) export *; else break ;}");
tryItOut("L:with({__parent__: ([15,16,17,18].filter((new Function(\"{}yield __count__;\")), prop.__iterator__ = arguments))}){{}export __parent__; const prop; }");
tryItOut("{gc()const __count__ = constructor: this, __iterator__; }");
tryItOut("L: {var __proto__ = this; }");
tryItOut("/*for..in*/for(__count__ = [15,16,17,18].some(/a/gi, __iterator__ = null) in (__proto__.__parent__)) throw <><x><y/></x></>;");
tryItOut("switch((p={}, (p.z = true)()) || (window)(null)) { case 4: let __proto__ = *, delete = <y><z/></y>;break; default: export *; }");
tryItOut("/*infloop*/while(1.3 > [1]){}");
tryItOut("do L: {return;gc() } while((this *= (__parent__.__noSuchMethod__) + (prototype =  \"\" )) && 0);");
tryItOut("while((__iterator__ = -1) && 0)/*for..in*/for(var [__noSuchMethod__, getter] = new Object(__noSuchMethod__, <y><z/></y>) in window) {yield; }");
tryItOut("L: var prototype;");
tryItOut("/*for..in*/for('fafafa'.replace(/a/g, gc) in ((( /* Comment */<><x><y/></x></>).apply)(__count__ = window.unwatch(\"__proto__\")))){L:if(function::__proto__) { if (1e+81) export *; else {yield;{} }}function(q) { return q; } }");
tryItOut("M:if(__parent__.constructor = <><x><y/></x></>\n) yield <x/>; else  if ( \"\" (())) {[1,2,3,4].map;\n \"\" \n }");
tryItOut("prototype");
tryItOut("if((<><x><y/></x></>.watch(\"prop\", ({}).__lookupGetter__))) M:if(@foo) { if (__noSuchMethod__) gc()} else __noSuchMethod__ = <x><y/></x>, __iterator__;");
tryItOut("switch('fafafa'.replace(/a/g, new Function)) { default: [[1]];break;  }");
tryItOut("L:switch( '' ) { default: if(\f<x><y/></x>) {return; } else  if (<x/>) {-0;; } else {break M;gc() }export *;break; case (null.throw((p={}, (p.z = <bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb> !== (Error(__noSuchMethod__)))()))): break; __parent__ = @foo;break; case : case __noSuchMethod__ = [prop, ]: yield  /x/g ;break; yield <x/>;break; case 1:  }");
tryItOut("L: {/*for..in*/for(let constructor in (((1 for (x in [])))((uneval(undefined))))) \"\" ; }\n/*infloop*/for(const ({ prop: ({ __iterator__: ({ prop: __noSuchMethod__ }) }) }) = [,,] <<= new (__iterator__.(prototype)); (<x><y/></x>)[5.0000000000000000000000].throw((<><x><y/></x></>.@foo)); void <></>) { \"\" ;var prop = <><x><y/></x></>, __proto__ = @foo; }\n");
tryItOut("return;");
tryItOut(";;");
tryItOut("with({}) return <><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>;");
tryItOut("L:switch((Exception(null.propertyIsEnumerable(\"__count__\")))) { default: \n__noSuchMethod__, prop = false;break;  }");
tryItOut("if(__iterator__ = (let (__iterator__ = undefined, prototype = [1]) <y><z/></y>)) { if (window()) <><x><y/></x></>; else {{gc() } }}");
tryItOut("/*for..in*/for(const __parent__ in [15,16,17,18].map(/a/gi, (this.zzz.zzz))) let(({ __iterator__: [, , , , ] }) = __iterator__ = this >>> , ({ constructor: [, function::__proto__, , __iterator__] })) ((function(){yield <><xxx>{prop}</xxx></>;})());");
tryItOut("switch(undefined) { default: var get = 3/0; }");
tryItOut("/*infloop*/for(let [, prototype] = <y><z/></y> === -0; (this.__defineGetter__(\"__noSuchMethod__\", (this).__defineSetter__)) >>> <bbb xmlns=\"({a1:1})\"><ccc:ddd><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd></bbb>; prototype >= <x><y/></x>) {var #1=[#1#]: <x><y/></x>; }");
tryItOut("__count__ = constructor;");
tryItOut("/*for..in*/for(\f__parent__ in ((Function)(this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }).__iterator__)))if(yield\n) {; }");
tryItOut("M:if(<x><y/></x>) yield <x><y/></x>; else  if (constructor) continue L; else throw .2;");
tryItOut("return;");
tryItOut("L:if() this.zzz.zzz;");
tryItOut("with(undefined ?  : [1,2,3,4].map)if((constructor.(new (({}).hasOwnProperty)(eval(\" \\\"\\\" \", prop), undefined)))) {yield <><x><y/></x></>;<x><y/></x>yyy } else  if (null) {continue ; } else [[1]];");
tryItOut("switch((this.__defineGetter__(\"constructor\", Math.pow))) { case 6: var __parent__ = this; }");
tryItOut("with({}) { 'haha'.split } ");
tryItOut("if(prototype.__count__) throw arguments; else  if (<><x><y/></x></> :: <x><y/></x>) const __proto__ = <x/>, __proto__ = true;");
tryItOut("{/*infloop*/M:do export *; while( /x/g  << <x/>);{}if(1e+81) { if (-0) {continue M;(this); } else return  /x/ ;} }");
tryItOut("/*for..in*/for(constructor in ((function () { return continue M } )([__proto__] = (__count__.__parent__) ^= <xxx>{__iterator__}</xxx>)))/*for..in*/for(var prop in (((__parent__.constructor getter= function  prop () { return 0x99 } ))(5.0000000000000000000000)))continue L;");
tryItOut("return;");
tryItOut("export *;do  while((constructor%=<x><y/></x> < @foo @ *::*) && 0);");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("function(q) { return q; }");
tryItOut("/*for..in*/for(var prop in @foo) const __parent__;");
tryItOut("prop, constructor =  \"\" ;break L;");
tryItOut("{ }");
tryItOut("with({}) { with({}) gc() } ");
tryItOut("//h\nif(*::*) {M:do {;return <x><y/></x>; } while((try { <><x><y/></x></> = __noSuchMethod__; } finally { let(prototype) { this.zzz.zzz; } ) && 0); } else  if (<xxx>{constructor}</xxx>) return ({a2:z2}); else const __noSuchMethod__ = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (constructor) in __noSuchMethod__) {;([1,,]); }");
tryItOut("/*infloop*/do {export *; } while(<><x><y/></x></>);");
tryItOut("/*infloop*/for(var let (constructor) yield null = (#3={a:#3#}.propertyIsEnumerable(\"__iterator__\")) * ; (); [(-1)]) let prop\nM:if((window - function ([y]) { })) {yield this; } else  if ((*.yoyo(new Error(__iterator__)))) ((function ([y]) { })()); else export *;");
tryItOut("let (prop = undefined) {  }");
tryItOut(" { return null; } ");
tryItOut("{const __proto__ = <y><z/></y>, prop;throw undefined; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = true in undefined) {throw null;{} }");
tryItOut("if((3.141592653589793 > [[]]).__defineSetter__(\"function::__parent__\", 'haha'.split)) {/*for..in*/M:for(let [//h\nprototype, __parent__] = (prototype) in false) {var prop = <x><y/></x>, prototype =  /x/ ; } }");
tryItOut("M:if(([__proto__, , , constructor] = \nwindow)) { if ([({ prop: ({ prototype: prototype, __count__: __count__ }), prototype: __count__ })] = prototype.__parent__) {[15,16,17,18].map(/a/gi, <><x><y/></x></>); } else {__count__\f; }}");
tryItOut("if((@foo)[ /x/ .unwatch(\"prop\")]) { if (undefined) {L:\rif(prop) yield; else return;return *; } else {/*infloop*/L:for(let __iterator__; 0.1; __count__) {{}const __proto__; }{} }}");
tryItOut("{}\nthrow x::__count__;");
tryItOut("if(__parent__.__parent__ =  '' .watch(\"function::__iterator__\", Function) :: prototype) /*for..in*/for(__parent__ in (('fafafa'.replace(/a/g, (*::*).watch) >> this.zzz.zzz)((function (prototype) { prop = <x><y/></x>; } ).call.*))){gc() } else  if (({ constructor: __count__, constructor: __iterator__ }) =  '' .*) {((p={}, (p.z = [,,z1])()));prop; const prototype; } else let (prototype, prop = this) { ; }switch(prop) { default: if(false) {var prototype =  /x/g , constructor = prop;/*for..in*/for(prototype = <x/> in @foo) ( /x/ ); }break;  }");
tryItOut("switch('fafafa'.replace(/a/g, #3={a:#3#} :: -3/0)) { default: break; continue L;return __proto__;constructor = prop;break; case 6: case 8: /*for..in*/for(var [__proto__, constructor] = ((<><x><y/></x></>)([])) >>> __proto__ in  /x/ ) 4.;break;  }");
tryItOut("if(__parent__) {(<x><y/></x>); }");
tryItOut("/*infloop*/for(__count__; __proto__; eval(\"(null);\", @foo)) {export *;export *; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = ++undefined in []) {break ; }");
tryItOut("/*infloop*/for(const __count__; (new RangeError()); (-3/0.unwatch(\"__count__\")())) {;/*infloop*/M:while(__proto__.__proto__)M:if([[]]) {return; } else return *::*; }");
tryItOut("while((({__proto__: 'fafafa'.replace(/a/g, Math.pow)})) && 0){if(window) { if (<y><z/></y>) \f{ } else __proto__;} }");
tryItOut("(gc).call");
tryItOut("__count__ = @foo; const __count__;");
tryItOut("/*infloop*/L:while(*::*){{}<x><y/></x>; }");
tryItOut("return @foo;\n{}\n");
tryItOut("/*for..in*/for(var constructor = ( if (<><x><y/></x></>).isPrototypeOf(<y><z/></y>)) in null) {throw <x><y/></x>; }");
tryItOut("let (__iterator__ = 0/0.__noSuchMethod__) { return prop; }");
tryItOut("if((prop = true.unwatch(\"constructor\").propertyIsEnumerable(\"__count__\"))) { if ((__iterator__ = 0x99).__lookupGetter__(\"__noSuchMethod__\")) let (__proto__, prototype) { continue ; }} else return;");
tryItOut("/*infloop*/L:while(@foo(<x/>))export *;");
tryItOut("return prop.__noSuchMethod__;");
tryItOut("if(new (<x/>.__lookupSetter__(\"__iterator__\"))(({__count__: __iterator__ }), (prototype = window))) {{} } else  if ([prototype = false.eval(null).*].map(Math.sin)) __noSuchMethod__ = null.__iterator__; else {/*infloop*/for(let prototype =  /x/ .*.watch(\"__proto__\", ({}).__lookupGetter__); @foo; (__count__ = this)) gc() }");
tryItOut("M:switch((-0)) { default: yield;break; gc()break; case 7: {};break;  }\n");
tryItOut("yield *::*;");
tryItOut("if(constructor) var __parent__; else ");
tryItOut("gc()");
tryItOut("/*infloop*/while(<y><z/></y>)return <><x><y/></x></>;");
tryItOut("M:if(window) { if ((yield !*::*)) let (__noSuchMethod__ = prop = <\tx><y/></x>.throw(<x><y/></x>), prototype) { return false; } else {let (constructor = this, __iterator__ = <><x><y\t/></x></>) { yield  /x/g ; }prototype = __noSuchMethod__; }}");
tryItOut("L: {yield <><x><y/></x></>; }");
tryItOut("let (__count__.prototype) { return constructor; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; (new (function (prototype) { yield undefined } )())--; \") {M:with({__count__: function(id) { return id }.__lookupGetter__(\"prototype\")\n}) '' ;throw __noSuchMethod__; }");
tryItOut("L: if(<x><y/></x>) {*;export prop\t; } else arguments;\fwith({__iterator__: (<x/>)(1e-81) ? __noSuchMethod__ = true : new  \"\" ()}){gc()\n }/*\n*/\nif(eval(\"\", ({}))) { if ((__iterator__ = constructor)) {const prop;var __proto__ = ({}), prototype = 1.3; }} else {__noSuchMethod__;export *; }");
tryItOut("try { yield; } catch(__iterator__ if (function(){with({}) for(let y in []);})()) { throw StopIteration; } ");
tryItOut("L: var __count__, __iterator__ = <x/>;");
tryItOut("/*infloop*/M:for(const __count__ =  /x/g ; true; <><x><y/></x></>) {export __noSuchMethod__;continue L; }\n/");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var 'fafafa'.replace(/a/g, __parent__).({ __proto__: get, __parent__: __count__ })\f in __count__) gc()");
tryItOut("var __proto__ = 1.2e3\nyield <y><z/></y>\n;");
tryItOut("if(new Boolean(new Function(arguments), window)) { if (<x/> &= window) yield (@foo(@foo));} else {var __parent__;/*infloop*/for(var prop = @foo; <y><z/></y>; 033) export prototype; }");
tryItOut("return <><x><y/></x></>;");
tryItOut("with({}) return;");
tryItOut("L: {/*infloop*/for(__parent__; false; <x><y/></x>) continue ;with({__parent__: ((prop)())})constructor = undefined, constructor; }");
tryItOut("continue ;");
tryItOut("/*for..in*/M:for(const prop = eval(\"new (Math.sin)(1.3)\", (0/0).call(#1=[#1#], )) in 5.0000000000000000000000) __iterator__");
tryItOut("if(new Exception(arguments, 1.2e3)) return; else  if (*) {__noSuchMethod__; }\nbreak ;\n");
tryItOut("with(window['__parent__'] = (uneval( '' ))){(function ([y]) { })();if(<y><z/></y>.isPrototypeOf(undefined)) {export *;throw <><x><y/></x></>; } else  if (__noSuchMethod__ =  /x/ ) {gc()var __parent__; } }");
tryItOut("if(<bbb xmlns=\"__count__\"><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></bbb>.(new ( /x/ )(let).propertyIsEnumerable(\"__parent__\"))) {export *; } else  if ((uneval(1e-81 += undefined\t))) {(<x><y/></x>); }");
tryItOut("/*infloop*/for(var __count__ = void window % <!--yy-->; __count__.__proto__; (eval(\"('fafafa'.replace(/a/g, function  __count__ (prototype, __parent__) { return window } ).unwatch(\\\"__iterator__\\\"))\", <x><y/></x>.(\"__parent__\", function () { yield undefined } ))) {/*infloop*/do {gc()let constructor; } while(@foo--);return; }");
tryItOut("M:if([,]) yield\n");
tryItOut("M:with({constructor: __iterator__ = <x><y/></x>}){/*for..in*/for(let x::prop in (function(q) { return q; }).apply()) const prototype;continue M; }");
tryItOut("{if(void this.__defineSetter__(\"__parent__\", function () { return <x><y/></x> } )) {gc() } else {yield <><x><y/></x></>;constructor = <><x><y/></x></>; } }");
tryItOut("/*infloop*/while((\n({a1:1}))()--){if(this) ; else {throw  '' ; }\nvar __count__ = <y><z/></y>; }");
tryItOut("; const \r__proto__;");
tryItOut("/*infloop*/for(let ({ __proto__: __proto__ }) = ({ __count__: constructor }) = @foo .@  /x/g .isPrototypeOf( '' );  '' ; prototype = __count__.valueOf(\"number\")) export constructor;");
tryItOut("/*for..in*/for(let [getter, __iterator__] = (new __count__ = this()) in <x><y/></x>) return <x><y/></x>;return;");
tryItOut("let(({ __parent__: [, , ({ get: ({ prop: [], prototype: ({ __noSuchMethod__: __parent__ }) }), prototype: ({ __parent__: [__count__] }) })] }), __parent__ = (new (new Function(\"yield;\"))(new (({}).__lookupGetter__)(({a2:z2}).throw(\ffalse), <><x><y/></x></>), #1=[#1#].__defineGetter__(\"prototype\", (1 for (x in []))))).@foo) { yield 3.141592653589793.@*();");
tryItOut("let([__iterator__, __proto__] = prop = yield) { try { with({}) return; } finally { throw StopIteration; } ");
tryItOut("/*for..in*/for(const constructor = (this.__defineGetter__(\"(this)(4.)\", function(y) { yield y; M:switch(this) { case 9: {} }; yield y; })) in this) {} const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("M:if(<zzz>[1]++</zzz>) {return; } else  set __noSuchMethod__(__count__, prop)@foo *= *::*");
tryItOut("\twhile((undefinedexport prototype;");
tryItOut("with({prototype:  /x/ });");
tryItOut("with({__proto__: __noSuchMethod__.(eval(\"({}).__lookupGetter__\", this)))});");
tryItOut("yield -0;");
tryItOut("throw __parent__;");
tryItOut("{return;(prop = null//h\n); }");
tryItOut("if((try { let prop; } catch(prop if (function(){yield <><x><y/></x></>;})()) { yield; } catch(prototype) { throw <y><z/></y>; } finally { {} } .hasOwnProperty(\"__parent__\") / (__count__))) { if (__count__.(<><x><y/></x></>\t)) /*infloop*/for(__count__; <><x><y/></x></>; window) break L;\nthrow window;\n} else {prop;/*infloop*/M:for(const constructor; undefined; new (<x><y/></x>)()) {return <x/>;return; } }");
