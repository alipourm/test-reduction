tryItOut("/*infloop*/while(#0=({__noSuchMethod__: true})){[1,2,3,4].map }\n{export __noSuchMethod__;const __iterator__, __proto__; }");
tryItOut("if(<bbb xmlns=\"__count__+=*\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--></bbb>) yield; else {<x/>; }");
tryItOut("/*for..in*/for(var __parent__ =  /x/g  in undefined) {throw <x><y/></x>;;\f }");
tryItOut("let (__count__ = __noSuchMethod__) { continue ; }\n");
tryItOut("/*for..in*/for(var [constructor, __count__] = <x/> in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) switch(<x><y/></x>) { default: case 8: export *;break; case 9: case *::*: break; case 0: throw prop;yield;case *::*: break; yield;break; case __noSuchMethod__: break;  }");
tryItOut("let (({ __iterator__: constructor(*) }) = #0= \"\" --) { L:with({__parent__: @foo})var __proto__; }");
tryItOut("if( /* Comment */undefined) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) throw  enum ; }");
tryItOut("/*infloop*/M:for( { yield (p={}, (p.z = \n<x/>)()).hasOwnProperty(\"__noSuchMethod__\") } ; (__parent__ = <x><y/></x>.(<x><y/></x>))\n; this if (<y><z/></y>)) {yield; } const __proto__;");
tryItOut("return\n");
tryItOut("M:do {with({__count__: constructor})\f{window;( /x/g ); } } while((new ((\nthis).yoyo((yield  '' )))(<><x><y/></x></>\n, <bbb xmlns:ccc=\"(this.__lookupGetter__(\"__parent__\"))\"><ccc:eee></ccc:eee></bbb>.(true))) && 0);");
tryItOut("/*infloop*/M:for(__iterator__%=<x/>; <x/>; return <><x><y/></x></>) export __noSuchMethod__\t;");
tryItOut("with(window){yield <y><z/></y>;let __parent__; }");
tryItOut("/*infloop*/while(prop){ }");
tryItOut("for(let y in [5,6,7,8]) let(prop) { throw <><x><y/></x></>;");
tryItOut("if(\nwindow && @foo) { if (+__count__) ;} else {{}yield; }");
tryItOut("new (((9)).call)( \"\" .eval(<><x><y/></x></> .. 0x99 == {}\n), (eval)())");
tryItOut("if(<x><y/></x>) {<y><z/></y>;return; } else {return;{} }");
tryItOut("if(\fthis.__defineGetter__(\"__parent__\", gc)) {do {const x::__count__, __count__;; } while((window) && 0); } else L: {export constructor; }");
tryItOut("yield false.eval(constructor.(<><x><y/></x></>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (this.__defineSetter__(\"constructor\", new Function))) {let __count__; }");
tryItOut("M:with({constructor: (<><></>\f</> > ( \"\" .prop)) ^ (__parent__.__noSuchMethod__)}){export *;<><x><y/></x></>; }");
tryItOut("yield");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("\tprototype = prototype;");
tryItOut("/*for..in*/for(const __proto__ in ((/a/gi)((undefined ? @foo : *::*)))){4.;yield  \"\" ; }");
tryItOut("let (__parent__) { gc() }");
tryItOut("if(*) {return <x/>;return <><x><y/></x></>; } else  if (/*\n*/__iterator__) {{} }");
tryItOut("/*for..in*/for(__iterator__ in ((function  __noSuchMethod__ (function::__noSuchMethod__, constructor) { yield  \"\"  } )\r(<x><y/></x> instanceof -3/0))){const constructor = <y><z/></y>, prototype;throw -1; }");
tryItOut("L: {if(({__noSuchMethod__:  \"\" })) {break L;/a/gi } } const __iterator__;");
tryItOut("if((*::*.__count__)) function  __iterator__ (prototype) { return  ''  }  else {(<><x><y/></x></>).watchreturn; }");
tryItOut("with({prototype: new  ''  -= null(\t)}){/*infloop*/for(([undefined]); ({}).hasOwnProperty; this.zzz.zzz//h\n) {const __parent__, __proto__ = <x/>; }/*for..in*/for(const [prototype, __proto__] = __iterator__.__noSuchMethod__ |= [15,16,17,18].some(function(y) { yield y; gc(); yield y; }, __parent__) in  \"\" ) /*infloop*/for(const __proto__ = *; <><x><y/></x></>; @foo) return; }");
tryItOut("let (constructor = true) { const __iterator__ =  '' , <x><y/></x>; }");
tryItOut("if(__iterator__ = __parent__.prop getter= function (prototype)prop.__lookupGetter__(\"__count__\")) {export *;throw __parent__; } else  if (((prop = *)[<x><y/></x>])) throw true;");
tryItOut("/*infloop*/while(.2.__defineGetter__(\"prop\", function (__count__, __proto__) { return -0 } )){export *; }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in [[]]) (<><x><y/></x></>);\f while((new undefined(this, <x/>)) && 0);");
tryItOut("/*for..in*/for(function::__iterator__ in (((<x/>.@foo))((( /x/g  , <><x><y/></x></> for each (__iterator__ in <x><y/></x>) for ([__count__, , ] in <x><y/></x>))[__count__ = new RegExp(<y><z/></y>, <x><y/></x>) .@x:: prototype = 1e+81]))))return <zzz>[z1,,]</zzz> in 1e+81;");
tryItOut("/*for..in*/for(this.__defineSetter__(\"constructor\", window).function::__iterator__ in <\fx><y/></x> for each (__noSuchMethod__ in <y><z/></y>)) {let __proto__ =  /x/g ; const __count__; }");
tryItOut("/*for..in*/for(let __proto__ = \t[ '' ] in 0.1) {yield; }");
tryItOut("if((eval(\"export *;\", *))) {return 0/0;break ; } else  if ((*::*)[false]) {throw *::*; } else throw <><x><y/></x></>;");
tryItOut("/*infloop*/while(function::__count__++)if(__parent__ =  /x/g ) ");
tryItOut("switch((@foo)( \"\" )%=\n<x><y/></x> ? .2 : (function () { return __iterator__ } ).call((__proto__ = prototype), )) { case 8:  }");
tryItOut("let(__proto__ = .2) ((function(){(*);})());");
tryItOut("with({constructor: (String(<x><y/></x>) ? [1,2,3,4].map : *[<x><y/></x>] > let (__parent__ = 1.3) 033.<><x><y/></x></>/*\n*/)}){let __count__, __count__ = 3/0;do (function::prototype); while((true) && 0); }");
tryItOut("L: yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in 1.2e3) {; }");
tryItOut("prop, __proto__");
tryItOut("/*infloop*/for(__noSuchMethod__; constructor; #0=[prototype]) export *;");
tryItOut("export function::function::__parent__;");
tryItOut("L: gc()");
tryItOut("/*for..in*/for(var __iterator__ = new Error(__proto__, this) in constructor.__count__ getter= window) {return; }");
tryItOut("/*for..in*/for(var [__parent__, constructor] = <y><z/></y>['__count__'] =  in __iterator__ = (Exception())) {{return window;{} } }");
tryItOut("with((__iterator__ for each (__parent__ in window)))( /x/g )\n");
tryItOut("L:with({prop: (__count__.__iterator__ = <x><y/></x>.throw(__noSuchMethod__)).throw( /* Comment */([<><x><y/></x></>].some([1,2,3,4].map)))}){prototype }");
tryItOut("let (prop =  '' ) { let __parent__, prop; }");
tryItOut("switch((({ prop: ({ __parent__: ({ each: prototype, __proto__: __iterator__ }) }) }) = ({__noSuchMethod__: yield <x/>}))) { case 0: if(new <!--yy-->((__count__), 5.0000000000000000000000)) {gc() } else  if (eval(\"default: \", false)) { } else ; }");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = __iterator__ = *\f in ([15,16,17,18].filter((3/0).__defineSetter__, (yield window)))) var __proto__, prototype = {};");
tryItOut("/*infloop*/for(const __count__ = <y><z/></y>.valueOf(\"number\"); false; yield [11,12,13,14].filter) {if(<x><y/></x>) {{}let prototype = export prototype;, __proto__; }\t else  if (constructor) {(undefined); } }");
tryItOut("while(((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>[yield window])) && 0)throw [,,z1];");
tryItOut("if(@foo.prop = ({})) {export *;return; } else  if ((p={}, (p.z = (this % window))())) L:  else { }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(prop in prop) continue ; }");
tryItOut("if((prop+=<x><y/></x>)) { if (({ __iterator__: ({ __parent__: ({ __iterator__: prop, __proto__: __count__ }), __noSuchMethod__: [prototype, , __iterator__, __parent__] }) }) = window.__lookupSetter__(\"__count__\")) {/*for..in*/L:for(var prototype in undefined) {{} } }} else {function(y) { yield y; yield;; yield y; };switch(constructor = 033) { case 7: default: {export *;return  \"\" ; }(1.3);break;  } }");
tryItOut("/*infloop*/do {__noSuchMethod__ = 0x99; } while(this.__defineSetter__(\"prototype\", new Function));");
tryItOut("[1,2,3,4].map /x/g ;");
tryItOut("/*for..in*/M:for(var __count__ in (((window).apply)(3.141592653589793.@*))){continue M;break ; }");
tryItOut("this.zzz.zzz\nif((function ([y]) { })()) { if (prototype) {yield; }} else yield");
tryItOut("/*for..in*/for(var prop in ((new Function)(\n<x/>)))yield;");
tryItOut("do {yield;break ;M:if(prototype.__iterator__ = <><x><y/></x></>) { if (++@foo) yield constructor; else return;} } while(([new ((-0))().*].filter(function  prototype () ''  ? prototype : prop)) && 0);");
tryItOut("<></>");
tryItOut("/*for..in*/for(const [] = __iterator__ in (((1 for (x in [])))(((Function(__iterator__.unwatch(\"prop\"),  /x/ )).__defineSetter__(\"constructor\", /a/gi)))))return (p={}, (p.z = this)());");
tryItOut("(0/0)('fafafa'.replace(/a/g, (Math.sin).apply))");
tryItOut("throw prop;");
tryItOut("(__count__)");
tryItOut("/*infloop*/for(var [, ] = <x><y/></x>(prototype = <><x><y/></x></>, __iterator__); (this.zzz.zzz); true) {export __parent__;return new function  __iterator__ (__iterator__, __iterator__)<x><y/></x>(<x/>, 033); }");
tryItOut("M:if( /x/g ) ;");
tryItOut("/*infloop*/for(var __count__ = prototype; __parent__; 033) {constructor = true; }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = new Array((__proto__)) in @foo) {(<><x><y/></x></>);gc() }");
tryItOut("{}\n/*infloop*/M:for((<><x><y/></x><\f/> %= this); window.watch(\"prop\", /a/gi); (<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"))) {continue ;let __noSuchMethod__, __iterator__ = window; }");
tryItOut("throw this;");
tryItOut("/*infloop*/while([,,].__parent__ = [15,16,17,18].map(({}).__lookupGetter__, true))if(let (prototype = <x/>, __proto__) *::* % <><x><y/></x></>.__lookupGetter__(\"setter\")) { if (new (<x/>)(4.) for each (constructor in __iterator__) if (<><x>//h\n<y/></x></>)) L:if(undefined) return; else prop else {let __proto__ = @foo, __noSuchMethod__ =  '' ;export *; }}");
tryItOut("L: {export *;throw this; }");
tryItOut("{}\n");
tryItOut("if( '' ) yield; else {with({__iterator__:  '' }){break\f L;(*::*); }export *; }");
tryItOut("const prototype = <x><y/></x>");
tryItOut("with({__iterator__: })");
tryItOut("yield 0;\n[1,2,3,4].map\n");
tryItOut("{/*for..in*/L:for(const constructor in <><x><y/></x></>) (<x/>);L:  }");
tryItOut("if(true ? <><x><y/></x></> : -1) {/*infloop*/for(const prototype; [,,]; *) ; } else ");
tryItOut("if(<x><y/></x>.(prototype)) { if ([ '' .__proto__ = true]) return <y><z/></y>;} else /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in #3={a:#3#}) <><x><y/></x></>;");
tryItOut("do return; while((<y><z/></y>) && 0)\nconstructor = __proto__;");
tryItOut("yield (window)( '' ) =  /x/g  :: null + 1e+81;");
tryItOut("/*infloop*/for(let __proto__\n = ([[]]()); (<x><y/></x>()); (<x/>)) {/*infloop*/for(let function::__noSuchMethod__; *::*; prop)  { /*\n*/return <y><z/></y>; }  }");
tryItOut("/*for..in*/for(let x::__proto__.__iterator__ in (((( /* Comment */([] = window))).__defineSetter__)((null >>= undefined).watch(\"__noSuchMethod__\", function () { return ([<><x><y/></x></>]) } )))){with({}) { __parent__ = __proto__; }  }");
tryItOut("throw StopIteration;");
tryItOut("M:do {switch((p={}, (p.z = __parent__)())) { default: return  /x/ \ncase 7: let __noSuchMethod__ = *;break;  } } while((((window %= 1.3).yoyo(this in null))) && 0);");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = yield in <><>yyy</></>) var __count__ = true, constructor = <><x><y/></x></>\n(5.0000000000000000000000);");
tryItOut("if(((<x/>)(<><x><y/></x></>)%=<><x><y/></x></>)) { if (constructor + true) let prototype = 0/0, prop = __parent__;} else {/*infloop*/do { } while(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(3.141592653589793 ? ([(yyy = null)]) : (true)(<x><y/></x>)%=[] < <><x><y/></x></>; ([])[0/0]; constructor.prototype) {export __count__;return; }");
tryItOut("{/*for..in*/for(const function::__parent__ = (prototype = <x><y/></x>) in window) {yield; }\n/*infloop*/for(let __count__; undefined; ({a1:1})) {return; } }");
tryItOut("{}");
tryItOut("/*infloop*/for(__iterator__; (new <x><y/></x>(@foo)); (/a/gi).call) {break ; }");
tryItOut("let __parent__ = __iterator__;\f<><x><y/></x></>");
tryItOut("/*infloop*/while((#2=({__noSuchMethod__: <x><y/></x>})))(function  __count__ (__proto__) { yield window } ).apply");
tryItOut("/*for..in*/for(var prop = 3/0 += 0 .@x::  \"\"  in <x><y/></x>) {(<><x><y/></x></>);; }");
tryItOut("switch((([11,12,13,14].map).@foo)) { case (uneval(({__proto__: undefined }))) *= prototype.__proto__ setter= ( /x/g ).watch: case 0: ;/*for..in*/for(let function::__proto__.prop in ((Math.sin)(((uneval(new  /x/g )))))){}\n }");
tryItOut("with(__count__ = prototype)if(<x/> ^ <x><y/></x>) {<y><z/></y>;; } else {propexport *; }");
tryItOut("L:if(this) __iterator__, __count__ = <x><y/></x>; else  if (prop) {break ;(<y><z/></y>); }");
tryItOut("if([__proto__.(<y><z/></y>) for each (function::__count__ in __proto__ = <x/>)]) L:while(( /x/ .__proto__.propertyIsEnumerable(\"function::prop\")) && 0)__iterator__;");
tryItOut("{;/*infloop*/M:do throw <x><y/></x>; while(constructor)\nprop = window, getter = 5.0000000000000000000000; }");
tryItOut("let (prop, ({ __noSuchMethod__: __parent__ })) { export *; const __noSuchMethod__; }");
tryItOut("/*for..in*/for(constructor = __proto__ in <x><y/></x>) {export *; }");
tryItOut("if(<x><y/></x>) break ; else __count__;");
tryItOut("for(let y in [5,6,7,8]) throw <><x><y/></x></>;");
tryItOut("return;");
tryItOut("M:if((yield (undefined |= true)) %= new Boolean(({constructor getter: *::*, each: void this }), #1=[,,z1])) export prototype; else {/*infloop*/while(( \"\"  ? this : window))throw  /x/ ; }");
tryItOut("/*for..in*/L:for(let __proto__ =  in (__count__.__noSuchMethod__ = new Function())) {yield;throw window; }");
tryItOut("__noSuchMethod__;");
tryItOut("return;");
tryItOut("/*for..in*/for(let __parent__ in try { prop = __noSuchMethod__; } catch(__parent__ if delete this.zzz.zzz) { function::prototype = prop; } catch(prop if let (prop, constructor) true) { for(let y in []); } catch(prop if (function(){for(let y in []);})()) { return (new <><x><y/></x></>(3)); } catch(prop if <x><y/></x> .@  /x/g ) { return; } finally { return +<y><z/></y>; } ) {if(null) {continue L; }yield false; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (('haha'.split)((new (this)())))){'haha'.split }\n");
tryItOut("if(<><x><y/></x></>) {return; } else  if (prototype) {prototype = <><x><y/></x></>, __parent__ = this; } else {const prototype =  '' , __iterator__ =  /x/ ; }");
tryItOut("M:if(getter = <><x><y/></x></>.__defineSetter__(\"prop\", function(y) { yield y; if(__parent__) #3={a:#3#};; yield y; })) { if (1e-81) ; else {{} }}");
tryItOut("/*infloop*/M:for(({ : __parent__ }) = null; (<x/> && new (<x><y/></x>)().__defineGetter__(\"__count__\", (function (__proto__) { yield <x><y/></x> } ).apply)); [11,12,13,14].sort)  for (__noSuchMethod__ in  /x/ ) if (__count__ && __proto__)");
tryItOut("if(((<><x><y/></x></>\t if (@foo)))(null) && new (Math.pow).apply(*, this)) {<y><z/></y>;\nyield;\n } else {{var __count__;yield prototype; }/*for..in*/for(var [z1,,] in ((function  __count__ (prop)({__parent__: __iterator__ = __proto__ }))((uneval(<x/>))))){throw window;yield @foo; } }");
tryItOut("if((uneval(null))) throw constructor; else ;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in this.__defineGetter__(\"__proto__\", /a/gi)) {return;if(new ({}).__lookupGetter__(prototype = window;, <><x><y/></x></>)) { if (this < @foo / (null * <><x><y/></x><\t/>)[ '' [ '' ]]) gc() else break ;} }");
tryItOut("throw prop;");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __proto__ }) = (uneval(@foo ? 0x99 : {})); ({ __count__: (__parent__) }) = prototype; ((p={}, (p.z = ((Math.sin)(,  \"\" )))()))) {return [1];/*infloop*/while(prop)<x/> }");
tryItOut("/*infloop*/for(__noSuchMethod__; *::*.prop; eval(\"export *;yield <><x><y/></x></>\", <><x><y/></x></>)) {const __parent__ = @foo;__iterator__function  __proto__ (prop, __iterator__) { __parent__; }  }");
tryItOut("{}");
tryItOut("return <><x><y/></x></>;");
tryItOut("L: {}");
tryItOut("continue M;");
tryItOut("/*infloop*/for(var prop = (new @foo()); prototype = []; <><x><y/></x></>.unwatch(\"constructor\")) let (__iterator__) { L: {(<x><y/></x>);{} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in this++) with({constructor: <><x><y/></x></>}){return this; }");
tryItOut("/*infloop*/for(let __parent__ = x::function::prototype = \t<x><y/></x>.@foo; __noSuchMethod__.__iterator__ setter= (new Function(\"window;\")); -1.valueOf(\"number\")) {__noSuchMethod__ = <x/> }");
tryItOut("switch( \"\" ) { case 6: /*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in constructor) {return true; }\ndefault:  /x/ break; break;  }");
tryItOut("/*for..in*/for(const __iterator__ in (('haha'.split)( ''  @ null))){const __parent__;; }");
tryItOut("/*infloop*/for(var ({ prototype/*\n*/: ({ __noSuchMethod__: __parent__ }) }) = __iterator__.__count__; (prop.__proto__); new ((<><x><y/></x></>.constructor))(, __parent__--)) return;");
tryItOut("/*infloop*/for(window;  \"\" ; <x/>) {export __noSuchMethod__;{} }\n(true);");
tryItOut("with(typeof  '' ){__count__ }");
tryItOut("L:if(*) {return <><x><y\n/></x></>;let __count__ = this, __iterator__; } else  if (__parent__) yyy");
tryItOut("/*for..in*/M:for(__iterator__ = (uneval(<><x><y/></x> #1=[#1#] </())) in [z1]) { }");
tryItOut("{( '' );var __noSuchMethod__ = this; }");
tryItOut("let (({ __noSuchMethod__: ({ __count__: ({ __proto__: ({ __iterator__: __noSuchMethod__, prototype: __parent__ }), __iterator__: ({ __iterator__: constructor }) }) }) })) { /*infloop*/L:for(const __parent__; <><x><y/></x></>.eval( /x/ ); delete @foo) {let (__count__, __proto__ = <><x><y/></x></>) { ; }throw true; } }");
tryItOut("/*infloop*/M:for(\tprop = this; <><x><y/></x></>; export __count__;) {}");
tryItOut("let (__proto__ = 1e4) { *\nfunction(q) { return q; } }");
tryItOut("let (prototype) { let (prop) { return; } }");
tryItOut("M:switch((@foo += <><x><y/></x></>)) { case __count__ = <x><y/></x>\n: /*infloop*/M:for(let __count__; (eval(\"window\", <y><z/></y>)); ({__iterator__ setter: function(y) { yield y; export *;; yield y; } })) {yield *; }break;  }");
tryItOut("/*infloop*/for(__proto__; prototype = __count__ .@*:: [z1]; ) let function::prototype, __iterator__;");
tryItOut("L: continue ;");
tryItOut("switch(((new Function(\"*;\"))())) { case 1: /*for..in*/for(__count__ = <x><y/></x> in window) {;(<x/>); }break;  }");
tryItOut("with({constructor: (__proto__ = __parent__)}){;yield; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ((@foo ? \t<><x><y/></x></> : __proto__)./*\n*/prop = (<x><y/></x>[__parent__])); new [1,2,3,4].slice(new Array(<><x><y/></x></>), constructor)) return;");
tryItOut("/*for..in*/L:for(__proto__.__noSuchMethod__ in (( /x/ )(__proto__ = constructor = <x><y/></x> > window.throw(\nprop)())))return *::*;");
tryItOut("/*infloop*/for(/*\n*/var constructor; prop; (() = (new (1e4)()).__proto__)) {/*infloop*/L:for(var constructor; ({a1:1}).valueOf(\"number\"); ([, \f, , prototype, prototype] =  /x/ --)) {yield *; } }");
tryItOut("with((prototype) = this.__defineSetter__(\"constructor\",  /x/ ) /= ([undefined]))break ");
tryItOut("throw StopIteration;");
tryItOut("if(__parent__) { if (__count__.yield getter= (033['__parent__'] = null)) export *; else const __noSuchMethod__, __iterator__; const __iterator__;}");
tryItOut("if(<><x><y/></x></>) { if (this) export prop;} else {}");
tryItOut("L: break M;");
tryItOut("let (__count__) { (<x><y/></x>)\n }");
tryItOut("L:if(([#1=[#1#] for (__count__ in __parent__)])) { if (\nthis >= (({a2:z2}).__noSuchMethod__)) { } else {(<x/>);const __proto__; }}");
tryItOut("this.zzz.zzz;");
tryItOut("if(\r(--<y><z/></y>.__count__ = this.__parent__)) export constructor\f; else  if (<x/>) if((__proto__ = <>function(q) { return q; }</>)) (function ([y]) { }); else  if (__parent__.(window)) return  /x/g ; else \t__parent__: 5.0000000000000000000000");
tryItOut("/*for..in*/for(var __iterator__.prototype getter= (*::*[<y><z/></y>]).__defineSetter__ in (([1,2,3,4].map)(#1#.hasOwnProperty(\"__noSuchMethod__\")(@foo.isPrototypeOf(\f<><x><y/></x></>)--, (__parent__.prototype)).prop))){var __iterator__, constructor\n/*infloop*/<x><y/></x> }");
tryItOut("Function");
tryItOut("({}).__lookupGetter__\ncontinue M;\n");
tryItOut("let (__proto__) { if((<x><y/></x>.(this))) {} else {yield;return window; } }");
tryItOut("with({}) constructor = function::prototype;");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = [<><x><y/></x></> = [[1]]] in new function  __count__ () { break ; } ()) {{export *; } }");
tryItOut("with((<x><y/></x>.eval(<x><y/></x>) ^ ( '' ))){return function(id) { return id }; }");
tryItOut("/*for..in*/L:for(const new ([ /x/ ])(((({}).__lookupGetter__)( \"\" ).@*), eval(\"null\", <><x><y/></x></>)), this.zzz.zzz in __iterator__ =  \"\" ()) M:if(<y><z/></y>) {yield;0/0 } else {return; }");
tryItOut("");
tryItOut("with({prop: this <= *::*}){}");
tryItOut("yield\n");
tryItOut("let ([] = (yield prop), __noSuchMethod__) { \n }");
tryItOut("return;");
tryItOut("throw StopIteration;");
tryItOut("with((prop.__noSuchMethod__ = undefined ? prototype\f%=(function ([y]) { })()[(window = this)] : prototype))let __noSuchMethod__ = function ([y]) { };");
tryItOut("L: {return;throw <><x><y/></x></>; }");
tryItOut("if((({ get __proto__ __proto__ (__iterator__, prop) { yield <x><y/></x> } ,  get __count__ prototype (prop, prototype) { yield 0x99 }  }))) /*infloop*/while(*)return;continue M;");
tryItOut("/*for..in*/for(var [delete, __noSuchMethod__] = ([delete ([11,12,13,14].map)].filter(new Function)) in ) do return *::*; while(( /x/g ) && 0);");
tryItOut("return;");
tryItOut("/*infloop*/for(let __iterator__ = @foo; prototype; <x><y/></x>) {__proto__; }");
tryItOut("constructor, prototype =  \"\" ;");
tryItOut("M:do {/*infloop*/for(const __iterator__ = *; 0; null) {; }let prop; } while((<x><y/></x>.throw(#1#)) && 0);");
tryItOut("if(yield <x><y/></x>) ( \"\" ); else  if ( /* Comment */this) {const prototype; } else setter, prototype;");
tryItOut("{}");
tryItOut("L: ;");
tryItOut("<x><y/></x>['__proto__'] = prop;");
tryItOut("let(__count__) { export constructor;\n");
tryItOut("if(<x><y/></x>(({})){ if () yield <y><z/></y> else  if ((<x/>\n)((-0),  \"\" ))}");
tryItOut("{if(((* == null)[prototype = <x/>])) {} else  if (__noSuchMethod__ !== __proto__) var prototype = <x><y/></x>, prototype; }");
tryItOut("(this)");
tryItOut("prop = __parent__;");
tryItOut("export *;");
tryItOut("if({} & (({}) >>> (delete try { return; } catch(__proto__) { const __proto__ = <x/>; } )[3.141592653589793 in  \"\" ])) L:if(<y><z/></y>) {3; } else  if ([1]) {const __count__ = true, __parent__; } else  if (0x99) /*for..in*/L:for(const (__proto__)(<x><y/></x\f>) in *::*) {yield;throw <x><y/></x>; } else {const __noSuchMethod__ = true, __count__ = this;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in  /x/ ) {const constructor, prototype = <x><y/></x>;\f__proto__, __proto__ = *; }\nlet (constructor = null) { throw <>let __count__, __iterator__ = false;</>; }");
tryItOut("yield window;break L;");
