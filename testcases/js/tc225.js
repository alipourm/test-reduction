tryItOut("/*for..in*/M:for(var prototype = null & function::__proto__ in function ([y]) { }) export *;");
tryItOut("/*for..in*/for(let __parent__ = prototype = constructor in <y><z/></y>) {return *;; }");
tryItOut("try\t { __noSuchMethod__ = constructor; } catch(prototype) { yield ((window.__defineSetter__(\"prop\", eval)) for each (__count__ in (1e+81 + window)) if (<><x><y/></x></> + *)); } finally { return (new Function(<x><y/></x> ?  /* Comment */__noSuchMethod__ : (function::__noSuchMethod__)[<x><y/></x>])); } ");
tryItOut("{/*infloop*/for(__iterator__; (__iterator__%='fafafa'.replace(/a/g, function  __iterator__ (constructor) { return @foo } )); <{__noSuchMethod__}>yyy</{__noSuchMethod__}>.(<><x><y/></x></>)) {/*infloop*/while(1.2e3.hasOwnProperty(\"__count__\")){if(<><x><y/></x></>) __iterator__ = 1.2e3, __iterator__; else export *; }M:switch\f(false) { default: function  prototype ()*break;  } } }");
tryItOut("if( \"\" .unwatch(\"constructor\") ? <><x><y/></x></> > true : ++({})) {(new Function(\"break L;\"))gc() } else {<><x><y/></x></>;{} }");
tryItOut("const ({ __noSuchMethod__: ({ __noSuchMethod__: __parent__ }) });");
tryItOut("/*infloop*/while((gc).call(3/0, function ([y]) { }, <><x><y/></x></>));");
tryItOut("/*infloop*/M:for(let __proto__; <x/> @ <x/>; ((<><x><y/></x></>)())) (({}).hasOwnProperty).apply const __iterator__;");
tryItOut("for(let y in []);");
tryItOut("__count__");
tryItOut("switch((true for (__iterator__ in 1.2e3)).valueOf(\"number\")) { case 5: break; throw [z1]; }");
tryItOut("try { __count__ = __count__; } finally { let(yield, [, ] = (typeof  /x/ ) instanceof *::*.isPrototypeOf( '' )) ((function(){with({}) yield;})()); } ");
tryItOut("{yield @foo;var prototype = 1e4, prototype; const __proto__; }");
tryItOut("for(let y in []);");
tryItOut("@foo;\ncontinue ;\n\n");
tryItOut("\n__parent__, __iterator__;var __count__;\n");
tryItOut("/*for..in*/for(var prototype in __noSuchMethod__) ;");
tryItOut("if(@foo) {continue ; }");
tryItOut("return;");
tryItOut("/*infloop*/do export __noSuchMethod__; while(yield ++arguments);");
tryItOut("/*infloop*/for(let prototype; ( \"\" .hasOwnProperty(\"prototype\")); eval(\"this\", <x/>)) let __iterator__ = <x><y/></x>;");
tryItOut(";\n{}\n");
tryItOut("break M\n");
tryItOut("if(new (-3/0)(__noSuchMethod__)) {yield <x><y/></x>; } else  if (<><x><y/></x></> .@ __parent__) return; else {return @foo; }");
tryItOut("switch(this.__defineSetter__(\"prototype\", <><x><y/></x></>)) { case function  __count__ () { yield * } ():  }");
tryItOut("/*for..in*/for(let __iterator__ in (((new Function(\"return  '' ;\")))(<><\f>yyy</></>))){throw null;yield; }");
tryItOut("/*infloop*/for(let ({ __proto__: __iterator__ }) = ({ set __parent__ __iterator__ () { switch(<x><y/></x>) { default: break; case [[1]]: gc()break; case <><x><y/></x></>: var __parent__, __proto__ = <y><z/></y>;break; try { break ; } catch(prop if (function(){;})()) { continue L; } catch(__count__ if true) { yield; } catch(constructor) { let <><x><y/></x></> =  /x/ , __noSuchMethod__ =  /x/g ; } finally { break ; } break; export *;break; case 6: case 4: break; case null: yield <><x><y/></x></>;case  /x/g : continue L;break; yield; } }  }); (__noSuchMethod__.\fprototype = new (__noSuchMethod__.__count__ = 1.3)((undefined >>> 1.2e3 %= [1,,]), (__parent__)(undefined))); (__proto__) = (uneval(__parent__))) yield;");
tryItOut("throw *;");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = __count__;");
tryItOut("export __proto__;\nlet __count__;\n");
tryItOut("return *;");
tryItOut("let (__noSuchMethod__) { let (__proto__, prop) { (#1#); } }");
tryItOut("/*infloop*/for(var __iterator__; null.__lookupSetter__(\"__iterator__\"); this.__defineSetter__(\"__iterator__\", Math.pow)) yield;");
tryItOut("switch( '' ) { case let (__count__) prop:  }");
tryItOut("/*infloop*/M:while(<x><y/></x> -= 3/0){/*infloop*/do return prop; while(<x><y/></x>); }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("L\t: ( '' );");
tryItOut("{gc() }");
tryItOut("L:with({__proto__: [__proto__ = [__proto__, ({ constructor: prototype, __iterator__: __noSuchMethod__ }), __proto__, ({ prop: __noSuchMethod__, constructor: __proto__ }), ]].filter(new Function)}){new Function }");
tryItOut("if(__parent__.prototype = constructor) yield <x><y/>//h\n</x>; else  if ((new (((1 for (x in [])))(@foo, yyy))(<x><y/></x> = (({a2:z2}) instanceof ({}))))) {break ; } else with({__iterator__: ()})undefined;");
tryItOut("if(*::*;.yoyo( /x/ .yoyo([[]]))) yield; else  if (@foo) {continue ; }");
tryItOut("/*infloop*/do ;\nthrow null;\n while((__count__.prototype));");
tryItOut("with(((p={}, (p.z = <y><z/></y>)())))if((yield __proto__ = prop)) try { return true; } catch(__proto__ if <x/>) { const __count__; }  else  if ([].throw(*::*)) {return @foo;; }");
tryItOut("if((1e-81.eval(<x><y/></x>)).throw(<x/>.__lookupSetter__(\"__noSuchMethod__\"))) let (__noSuchMethod__ = *, __noSuchMethod__ = this) { break M; }");
tryItOut("/*for..in*/M:for(let prop = <>eval(\"<x/>\", @foo)</> in new ((<><x><y/></x></>).__defineSetter__)(<x/>, *::*)) __count__");
tryItOut("/*for..in*/for(var __parent__ in ((1e+81)(prop.__count__ setter= (033).__defineSetter__))){L: {const __noSuchMethod__; } }");
tryItOut("if(this.__lookupSetter__(\"constructor\")) { if (false.__lookupGetter__(\"__count__\")) export __iterator__; else gc()}");
tryItOut("1e4\n{let (__proto__) { export get; }let (constructor) { (<><x><y/></x></>); } }");
tryItOut("/*for..in*/M:for(var [prototype, prop] = (1e-81()) in this.valueOf(\"number\")) for(let y in []);");
tryItOut("{export prop;{} }");
tryItOut("/*infloop*/do  /x/ ; while(([,,].throw(window).__defineSetter__(\"prototype\", function (__noSuchMethod__) { yield * } ).__proto__ = new <x><y/></x>(<x><y/></x>)));");
tryItOut("M:do yield true; while(( /x/g ) && 0)\n");
tryItOut("switch(new ( \"\" )()) { case 4: break;  }");
tryItOut("__count__: ( /x/g .valueOf(\"number\").propertyIsEnumerable(\"__proto__\"))\nprototype, [, prototype, ]");
tryItOut("/*infloop*/do if(#\t0=@foo) { if (new (gc)( '' )) {continue L;export __count__; }} else (*::*); while(true.__defineGetter__(\"__count__\", ({}).__lookupGetter__));");
tryItOut("\t(<><x><y/></x>\f</>);\nbreak L;\n");
tryItOut("with((prop = <y><z/></y>.throw(true)))return  /x/ ;");
tryItOut("/*for..in*/for(const __proto__ in ((function(y) { yield y; (this);; yield y; })(*)))return;");
tryItOut("if(<xxx {__parent__}={((3.141592653589793 , [1,,]))[<x><y/></x>]} />) yield <x/>; else {{function  __proto__ ()truewith({__parent__: window}){; } }/*infloop*/for(const prototype; #1=[#1#]; 1e81) {(#1=[#1#]); } }");
tryItOut("if(<><x><y/></x></>) {<x><y/></x>; }");
tryItOut("/*infloop*/for(([1,2,3,4].slice)(); true % <x/>; __parent__) {{} }");
tryItOut("/*infloop*/M:while([[1]]){return window; }");
tryItOut("/*infloop*/for(<y><z/></y>; <><x><y/></x></>; <x><y/></x>) {return __iterator__;((<y><z/></y>).call).apply }");
tryItOut("with(1e-81.watch(\"prop\", 033))if(this.__defineGetter__(\"__proto__\", Math.pow)) {yield;gc() } else  if (( '' )[*]) {yield #1=[#1#];(this); }");
tryItOut("/*infloop*/for(var [, , __count__, __noSuchMethod__, __proto__] = false--; __parent__|= /x/ ; <><x><y/></x></> % 1.2e3) export *;");
tryItOut("{var __parent__; }\n '' \n");
tryItOut("/*infloop*/L:while((-(({yield: <y><z/></y>, prototype: <><x><y/></x></> }).valueOf(\"number\")))){var __count__ = false, prop;{} }");
tryItOut("if(__noSuchMethod__.prototype = null) {const __proto__; } else ;");
tryItOut("L: var prop = __parent__, __parent__ = *;");
tryItOut("/*for..in*/for(let __proto__.__proto__ getter= <><x><\fy/></x></>['prop'] in (((1 for (x in [])))(new Array(undefined)//h\n))){}");
tryItOut("if(([1,2,3,4].map)) ; else  if (eval(\"0.1\", false)) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in window) {return;{} } else throw  /x/g ; const function::__proto__;");
tryItOut("{__proto__ = 1e-81;return delete #1#; }");
tryItOut("<><zzz>( \"\" .isPrototypeOf(<><x><y/></x></>))</zzz></>");
tryItOut("{{ yield constructor;} }");
tryItOut("{}\nexport *;\n");
tryItOut("L:if(<x><y/></x>.throw(@foo)) { if (prop.__count__ getter= (eval(\"window;\", 0/0))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in [[]]) {return; } }\f else continue L;{}}");
tryItOut("{while((true) && 0); }");
tryItOut("let(({ constructor: [, ] }) = <><>(0/0 .@*:: null)</></>) ((function(){})());");
tryItOut("/*infloop*/do gc() while((.hasOwnProperty(\"prop\")));");
tryItOut("with({__iterator__: <x><y/></x>}){var __noSuchMethod__, prop; }\n(<x><y/></x> , 0.1.unwatch(\"get\"))");
tryItOut("/*for..in*/for(const __proto__ = (<bbb xmlns=\"function::constructor%=({\f get prototype __parent__ (prop) { /*\n*/ }  })\"><ccc:ddd> </ccc:ddd></bbb>.((constructor = *))) in __count__ = 'fafafa'.replace(/a/g, function  x::prototype (__iterator__, __noSuchMethod__) { return @foo } )) ( /x/g );");
tryItOut("do {export constructor; } while((false) && 0);");
tryItOut("M:do {if([]) break M;0.1; } while((function(id) { return id } >>> <x/>) && 0);");
tryItOut("let(({ __iterator__: ({ __noSuchMethod__: [, __iterator__], let: [constructor, , , , ] }), @foo: [[, \f, , , __proto__], , , constructor] }), __iterator__ = function ([y]) { }) ((function(){yield (__iterator__ = __parent__ ? <x><y/></x>\n : (<x/>.eval(window)));})());");
tryItOut("if(new ( { /*for..in*/for(var __noSuchMethod__ = <x><y/></x> in <><x><y/></x></>) ; } )()) { if ([#1=[#1#]]) {throw *; } else {gc() }}");
tryItOut("yield;");
tryItOut("do /*infloop*/for(window.isPrototypeOf(-1); __count__; function::__parent__ = constructor) yield <y><z/></y>; while(((this)[null].yoyo(this ^= __iterator__)) && 0);");
tryItOut("<y><z/></y>;");
tryItOut("switch(true) { default:  }");
tryItOut("L: {export __parent__; }");
tryItOut("switch() { case 6: case constructor = 3/0: /*for..in*/for([__parent__, prototype] = null in <><x><y/></x></>) {(__iterator__);{} }break;  }");
tryItOut("do var constructor, __noSuchMethod__\nbreak L; while((prop = <><x><y/></x></>) && 0);");
tryItOut("/*infloop*/M:for(eval(\"yield  \\\"\\\" ;\", (function ([y]) { })()); (p={}, (p.z = #1#)()); <y><z/></y>.__parent__ = <y><z/></y>) ");
tryItOut("if(let (__noSuchMethod__ = this.__defineGetter__(\"__proto__\", /a/gi)) <y><z/></y>) { if ((constructor.prototype)) if(<y><z/></y>) (1 for (x in [])) else  if (<x/>) {\tvar __iterator__, __proto__; }} else {{} }");
tryItOut("M:do {;__parent__ =  /x/g , prototype; } while(((let (__parent__, __proto__ = <x><y/></x>) (@foo.__lookupGetter__(\"constructor\")))) && 0);");
tryItOut("/*for..in*/L:for([({ __iterator__: [__noSuchMethod__, __count__, ({ __proto__: __parent__ })], prop: constructor }), __parent__] = prototype = * in <x/>.propertyIsEnumerable(\"__count__\")) {gc()return <><x><y/></x></>; }");
tryItOut("if(<><><ccc:ddd></ccc:ddd></></>) break M; else  if (<><x><y/></x></>[prototype]) {export constructor;gc() } else {throw <><x><y/></x></>; }");
tryItOut("/*infloop*/while(( ''  = this)){const __parent__; } const __count__;");
tryItOut("throw __parent__;");
tryItOut("if((RegExp(3/0, <><x><y/></x></>))) { if ((({ let/*\n*/: (-1)['__count__'], constructor: ({ __noSuchMethod__: [], __count__: ({ __parent__: constructor, __proto__: __noSuchMethod__ }) }) }) = 1e4)) {yield;export __count__;/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in  /x/ ) { '' ;export *; } } else const prop = <x><y/></x>, constructor;}");
tryItOut("/*for..in*/for(const __parent__ = (null.__defineSetter__(\"prototype\", /a/gi)).__proto__+=new Object() in constructor) {if(([15,16,17,18].filter(gc, true))) {yield null;while((<x><y/></x>) && 0){[1,2,3,4].map } } }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = (<><x><y/></x></>.hasOwnProperty(\"__iterator__\") @ function::__iterator__.isPrototypeOf( /x/ )) in 1.3) {; const let;const __count__; }\n*.constructor =  /x/g ;\n");
tryItOut("/*infloop*/M:do  while(<><x><y/></x></>);");
tryItOut("{/*for..in*/for(-3/0.__iterator__ in  /x/g ) { \"\" ;__proto__ } }");
tryItOut("throw StopIteration;");
tryItOut("var __count__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 1.3) { }");
tryItOut("M:if(<x><y/></x>) {([[1]]);export *; } else  if (<x><y/></x>) const __parent__ = *::*; else const __parent__ = *::*, __parent__;");
tryItOut("if((({prop: *::*}).hasOwnProperty(\"__count__\")).__defineSetter__.__defineSetter__(\"__noSuchMethod__\", function  prop (__noSuchMethod__)({ get prototype(__iterator__) { return; }  }))) __proto__ = prototype; else  if (new (([11,12,13,14].sort))(constructor.__parent__ = [15,16,17,18].filter(/a/gi, false))) {{/*infloop*/M:for(var __count__; @foo; __count__) {var __iterator__;{} }gc() }L:switch(-*::*) { default: break; break; export *;break; case 3: function(y) { yield y; export __noSuchMethod__;; yield y; } } }");
tryItOut("let(prop, __parent__) ((function(){__proto__ = prop;})());");
tryItOut("with( /x/g  ^= *)return [1,,];");
tryItOut("{yield *::*;; }");
tryItOut("with({}) prototype");
tryItOut("let (prototype, prototype = <x><y/></x>) { export *; }");
tryItOut("{}\n");
tryItOut("if([<><x><y/></x></>]) {continue L;true } else ;");
tryItOut("const __parent__;");
tryItOut("try { __proto__; } catch(__iterator__) {  constructor } ");
tryItOut("/*for..in*/for([__noSuchMethod__, __proto__] = __noSuchMethod__.__count__ = __parent__ = prototype .. @foo in (new window([,,] %= 1.2e3)(<x/>.valueOf(\"number\"), ((yield {(true);export *; }).__proto__)))) \f{[] = __parent__;L: {{yield;__parent__ } } }");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = yield <x><y/></x> in prop.prototype setter= gc) (<x><y/></x>);");
tryItOut("if(window) { if (window) yield  \"\" ; else {const __proto__;; }}");
tryItOut("/*for..in*/for(let constructor = function(id) { return id } in prop = *::*) export set;");
tryItOut("/*infloop*/for(const __iterator__ = arguments; [z1,,]; <><x><\fy/></x></>) #3={a:#3#};");
tryItOut("switch((([this].some((1 for (x in []))) if ([z1])))) { default: gc()break;  }");
tryItOut("/*infloop*/do constructor; while(({a1:1}).__defineGetter__(\"__noSuchMethod__\", arguments));");
tryItOut("{((1 for (x in []))).call{} }");
tryItOut("/*infloop*/for(let prop;  \"\" ; (@foo % true <<= ((this | <><x><y/></x></>)--))) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in /*\n*/new (<x><y/></x>)(this)) {yield *; }");
tryItOut("with({}) { [1,2,3,4].map } ");
tryItOut("throw StopIteration;");
tryItOut("{{} }");
tryItOut("if((uneval(window))) (new Function(\"gc()\")) else  if (([15,16,17,18].sort(function  prop () { prototype } , <x/>))) {const prop = #1=[#1#], __noSuchMethod__ = 4.; }");
tryItOut("M:with({prop: 3/0}){yield;gc() }");
tryItOut("/*for..in*/for(__proto__(constructor++) in ((/a/gi)(({constructor: this.__defineSetter__(\"constructor\", Math.pow), __count__: void  ''  }))))yield;");
tryItOut("L: {export *;/*for..in*/for(const (<x><y/></x> != <x><y/></x>)(<bbb xmlns:ccc=\"(({ get constructor(prototype, __parent__) { return @foo }  }))\"><ccc:eee></ccc:eee></bbb>) = __noSuchMethod__ in  /x/ ) {return; } }");
tryItOut("let (prototype = <x/>, __iterator__ = __noSuchMethod__) { {} }");
tryItOut("/*infloop*/L:while((__count__ = <x><y/></x>)((({a1:1}))(this, prototype)).valueOf(\"number\")){(true);let __noSuchMethod__ = __noSuchMethod__, __proto__; }");
tryItOut("/*infloop*/do {{} const __noSuchMethod__;return; } while((yield <y><z/></y>));");
tryItOut("/*infloop*/L:for(let constructor = [,,]; true; window) export __iterator__");
tryItOut("/*for..in*/for(const prototype(<x><y/></x> -= window++) in true) if([]) {var __parent__ = <x><y/></x>, constructor = @foo; } else {(<x><y/></x>); }");
tryItOut("throw __proto__;");
tryItOut("let (({ prototype: __parent__, prop: __count__ }) = prop.@foo) { return <x><y/></x>; }");
tryItOut("{  }");
tryItOut("for(let y in [5,6,7,8]) yield (function  prototype (__iterator__) { yield 1e4; } ).call(Exception(constructor,  \"\" ), prop = -0, 1e81);");
tryItOut("{} const constructor;");
tryItOut("L:with({__parent__: eval(\"function ([y]) { }.__noSuchMethod__\", 1e-81 /= this)}){/*for..in*/for([prop, __iterator__] = @foo in <x><y/></x>) yield 0/0 }");
tryItOut("/*for..in*/for(const prototype in ((function  __parent__ () { yield __count__ <= * } )((new  /x/g ) || __iterator__.(<><x><y/></x></>))))/*infloop*/for(let = [,,z1]; [,,z1] >>>=<x><y/></x>;  for (__iterator__ in false) = [z1]) return;");
tryItOut("if( /* Comment */[,,]) {with( /x/g ){break ; } } else export prototype;");
tryItOut("with(-0.valueOf(\"number\")){}\nlet prop = window, prototype = __noSuchMethod__;\n");
tryItOut("{var __parent__;return; }");
tryItOut("/*for..in*/for(var prototype in <x/>) gc()");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __count__: prop }) }) =  \"\" ; function  __iterator__ ()__iterator__; ! /x/g ) let (prototype) {  }");
tryItOut("if((eval(\"0.1\", window.prop))) if( /x/g ) export constructor; else const prototype = [];");
tryItOut("throw StopIteration;");
tryItOut("do __count__ = (1.2e3++), __proto__ = <x/>; while((this.yoyo(<><x><y/></x></>)) && 0);");
tryItOut("const __parent__ = *;export *;");
tryItOut("for(let y in []);");
tryItOut("M: '' ) { if <x/>) return;} else \nyield;");
tryItOut("/*for..in*/for(({ constructor: [__proto__, , __parent__, ] }) in ((Function)(\f<x><y/></x>.(<><x><y/></x></>))))gc()");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, prop] = ((constructor.__iterator__ getter= 'haha'.split--) ^= this.__defineGetter__(\"__noSuchMethod__\", ( /x/g ).apply)) in (this.__defineSetter__(\"__iterator__\", /a/gi))) {L:if((new (@foo)(arguments, __count__))) yield  /x/ ; else  if (true || #1#) {1e4;prop; } else {@foo; }throw StopIteration; }");
tryItOut("{ }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(x::constructor in {}) <x/>;");
tryItOut("L:while((eval(\"( \\\"\\\" );\", <x><y/></x>)) && 0)__parent__, prop;");
tryItOut("with(this.eval(__count__.prop getter= function  prop (prototype) {  { yield <x/> }  } )){}\ngc()\n");
tryItOut("return (__count__ = undefined);");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*/for([__parent__, __count__] = __count__ = window in null) export __parent__;");
tryItOut("/*for..in*/for(let __iterator__ in (((\nyield <x><y/></x>))(((1 for (x in [])))(([[z1]])).__defineSetter__(\"__proto__\", __noSuchMethod__)))){export prop;gc()__noSuchMethod__ = null }");
tryItOut("/*infloop*/for(__parent__; [,,]; <><x><y/></x></>) (#3={a:#3#});");
tryItOut("while(((__proto__ = __count__)) && 0){(4.)\t;/*infloop*/M:while(<><x><y/></x></>)gc() }");
tryItOut("/*for..in*/for(const prototype in window) {var constructor, __count__; }");
tryItOut("/*infloop*/for(__proto__; true; prop = (\n@foo)) {with((-0)){gc()throw *::*; }\texport __iterator__; }");
tryItOut("yield  '' ;");
tryItOut("{(window).__defineSetter__function(id) { return id }; }");
tryItOut("{if(window) let __proto__ = (function ([y]) { })(); }");
tryItOut("if(([<><x><y/></x></>].some('haha'.split).valueOf(\"number\")).@*) { if ((eval)) const ({ <y><z/></y>: __iterator__ }) = prototype, prop = <x><y/></x>, prop = <><x><y/></x></>; } else {let __iterator__ = __noSuchMethod__%=arguments, __parent__; }}");
tryItOut("if(eval(\"({}).hasOwnProperty\", __noSuchMethod__ = __count__)( /x/  ^= true)) //h\n{const __parent__;(/a/gi).apply }");
tryItOut("if(<x/>.__defineSetter__(\"set\", [1,2,3,4].slice)) { if ((.propertyIsEnumerable(\"__proto__\"))) export *;return;} else {; }");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("L: {/*infloop*/for(let __count__; constructor; 1e4) {yield <><x><y/></x></>; }yield null; }");
tryItOut("/*for..in*/(M:for(let '__proto__ = 3.141592653589793.hasOwnProperty(\"__count__\") in )(prototype + <y><z/></y>) ([15,16,17,18].map((new Function(\";\")), __noSuchMethod__)).yoyo(--window), ([<x><y/></x>]) ) {<><x><y/></x></>; }");
tryItOut("let (prototype = __proto__) { /*infloop*/for(__iterator__; #1=[#1#]; @foo) {throw #1#; } }");
tryItOut("L: {([,]); }");
tryItOut("{}");
tryItOut("M:if(({a2:z2}).isPrototypeOf(3)) { if (__count__ = <y><z/></y>) yield; else {export *;var __iterator__ = #3={a:#3#}; }}");
tryItOut("/*infloop*/M:for(const prop; ((__count__%=0/0).__lookupSetter__(\"prototype\")); (({\f__iterator__: __noSuchMethod__ = 1e4 }))) export __parent__;\ncontinue ;\n");
tryItOut("return;");
tryItOut("/*infloop*/for(const [] = ( /x/g  >> <xxx {constructor}={(*::* for (__noSuchMethod__ in <y><z/></y>))} />/*\n*/.((({__proto__: #1=[#1#] ?  ''  : <><x><\fy/></x></>, __parent__: __count__ })))); (constructor); __proto__ = prototype.throw(<x><y/></x>)) {/*infloop*/M:for(var constructor; (__parent__) = (<x><y/></x> + <x/>); (<><x><y/></x></>--)) {return; }{} }");
tryItOut("{new Functionconst prototype = {}, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in  \"\" ) export constructor;");
tryItOut("/*infloop*/while((eval(\"__parent__;\", <><x><y/></x></>)) < this.__defineGetter__(\"constructor\", Math.sin))/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in  /x/ ) ([z1]);");
tryItOut("if((__noSuchMethod__ = <><x><y/></x></>.\thasOwnProperty(\"__iterator__\"))) {{} } else __iterator__ = null");
tryItOut("if(__count__.(<x><y/></x>.unwatch(\"__noSuchMethod__\"))) {let prop = <><x><y/></x></>, prop = 1e+81; } else  if (__parent__) 1e-81\f .. true\nyield\nthrow true; else {{}{__iterator__ = <y><z/></y>, prop; } }\nif(this) { if (@foo) {return; }} else ");
tryItOut("with({__count__: +[[1]]})let __count__ = 0/0;");
tryItOut("<x><y/></x>\n(1.2e3);");
tryItOut("{return ,; }");
tryItOut("return\n");
tryItOut("get = __count__;");
tryItOut("if(.throw([11,12,13,14].filter)) {throw ({})\n }");
