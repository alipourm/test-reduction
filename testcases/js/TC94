
tryItOut("do {gc()if( /x/g ) {<zzz>-<y><z/></y></zzz>throw #1=[#1#]; } } while(() && 0);");
tryItOut("L: {yield; }");
tryItOut("/*infloop*/for(<x><y/></x>;  /x/ ;  '' ) {return;export *; }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("/*infloop*/do /*infloop*/for(__proto__; 3.141592653589793; __proto__) {/a/gilet __noSuchMethod__; } while(window ^ (this));");
tryItOut("{/*for..in*/L:for(let  { ; }  in ((new Function)((yield (eval()))))){if([[constructor, constructor, , __iterator__, /*\n*/__parent__], ] = ((uneval(({ <x/>: [prop, __count__, __noSuchMethod__, __iterator__], constructor: [__count__, __proto__, __iterator__, ] }))))) {(*);yield; } else  if (function(id) { return id }) with({__proto__:  \"\" }){yield  \"\" ;\f; } } }");
tryItOut("if((try { [__proto__, , __count__, , ] = __count__; } catch(__proto__ if (function(){try { this.zzz.zzz; } catch(prop if (function(){return function(id) { return id } > false;})()) { throw __count__; } catch(constructor if (function(){let(__parent__ = __iterator__) { gc()})()) { throw StopIteration; } })()) { yield (033.__proto__); } catch(__noSuchMethod__) { default: return; } finally { try { let __count__; } catch(prop) { export *; }  } .(<y><z/></y>))) { if (((yield window) <= <><zzz>(__noSuchMethod__ = <x><y/></x>)</zzz></>)) {export prototype;with({prototype: <><x><y/></x></>})(<><x><y/></x></>); } else constructor;}");
tryItOut("L:switch((__proto__ = )) { default: /*infloop*/do  /x/ ; while(-0);case 5: case 6:  }");
tryItOut("let (__noSuchMethod__ = <x/>, (prop(1.2e3))) { export *; }");
tryItOut("L:switch((Error(new  \"\" (<><x><y/></x></>, <x/>), <x/>))) { default: /*infloop*/do {yield  /x/ ; } while( /x/ );export __parent__; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(prop) { if (<><x><y/></x></>) var __proto__, function::__count__ = function ([y]) { };} else {return <y><z/></y>;yield \ffalse; }");
tryItOut("do return [[]]; while((new -1(constructor, <><x><y/></x></>__parent__ = )) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__.constructor in -0 <<= <><x><y/></x></>) {throw  \"\" ; }");
tryItOut("for(let y in []);");
tryItOut("M:if(<><x>\t<y/></x></>) ; else  if (0.1) yield;");
tryItOut("(__proto__)\nL: continue ;");
tryItOut("/*for..in*/for(let [__proto__, __noSuchMethod__] = __count__ = ( '' .hasOwnProperty(\"prototype\"))\n in yield <y><z/></y>) {/*infloop*/L:do {return <x><y/></x>;(<><x><y/\t></x></\r>); } while(*.__defineGetter__(\"__count__\",  \"\" ));/*\n*/export __parent__; }");
tryItOut("(window)\n");
tryItOut("/*for..in*/M:for([__parent__, try { let __proto__ = #1=[#1#], __noSuchMethod__; } catch(__iterator__) { return; } __parent__ = prototype.__count__ = new [1,2,3,4].map( \"\" ) in @foo) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in <y><z/></y>) return;{} }\n");
tryItOut("{/*infloop*/M:for(<x><y/></x>; (export *); Iterator()) prototype;yield <><x><y/></x></>[@foo.__lookupSetter__(\"constructor\")]; }");
tryItOut("/*infloop*/M:for(let [[, , __count__]] = ({ function::constructor: __noSuchMethod__ }) = true.__defineGetter__(\"constructor\", ({}).hasOwnProperty) < prototype.prototype @ (new Boolean() > new (function(q) { return q; })(__noSuchMethod__, <><x><y/></x></>)); *; <><xxx {prop}={RangeError(<><x><y/></x></>, @foo)} /></>) {yield; }");
tryItOut("with({__iterator__: __noSuchMethod__ .@*::  '' .__proto__})return;");
tryItOut("return");
tryItOut("/*infloop*/for(let __noSuchMethod__; <><x><y/></x></>; null) {throw <x><y/></x>; }");
tryItOut("return return\n/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in new [1,2,3,4].slice(*, __proto__).unwatch(\"prop\")) ");
tryItOut("/*infloop*/for(const __count__ = (({ __count__: __noSuchMethod__, __iterator__: ({ prototype: __count__, constructor: __noSuchMethod__ }) }) = ({ prototype: (false)(false), __parent__: ({ prototype: __parent__ }) }) ^ ([1,2,3,4].slice).call( /* Comment */*((1e+81.isPrototypeOf(<x><y/></x>)), <x/>), (({})))); (this.__defineGetter__(\"prototype\", function (prototype, __count__) { yield this.@* += (<x><y/></x> & [z1,,]) } )); __noSuchMethod__) /*for..in*/for([__count__, __proto__] = ({__count__: function(id) { return id }, __noSuchMethod__ getter: Math.pow }) in __proto__) L:if(#1#) \f{*; } else  if (prototype) {; }");
tryItOut("do {yield false; } while((().call(1.3, [1], @foo)) && 0);");
tryItOut("throw  /x/g yield;");
tryItOut("throw __count__;");
tryItOut("M:if(<><{__parent__}></{__parent__}></>) { if ([[1]] >>= @foo) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in window) {break L; }return; }} else {throw <x><y/></x>;{} }");
tryItOut("with({}) { with({}) { return *; }  } ");
tryItOut("/*for..in*/L:for(var __parent__ in [constructor] = ({ prop: __parent__ })) {gc()gc() }");
tryItOut("constructor = prop;");
tryItOut("export prototype; const __count__;");
tryItOut("yield <x><y/></x>;");
tryItOut("gc()");
tryItOut("/*for..in*/for([constructor, __iterator__] =  /x/ --.* in prop) do var __parent__ = function ([y]) { };\f while((#1=[#1#]) && 0);");
tryItOut("/*infloop*/for(const [, , , , ] = (try {  } catch(__noSuchMethod__ if (({prop setter: (1 for (x in [])) }))) { export *; } catch(__iterator__ if <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) {  } catch(__parent__) {  if (this.__defineSetter__(\"__proto__\", (*).watch) ? this.\fisPrototypeOf(__iterator__) : 1e-81) } finally {  } .*); 3.141592653589793; (([11,12,13,14].some\t))) {let __iterator__, __proto__; }");
tryItOut("L: {break ;(#3={a:#3#}); }");
tryItOut("/*for..in*/L:for(const __iterator__ =  /x/g ['__iterator__'] in ((({}).__lookupGetter__)(((({}).propertyIsEnumerable(\"prototype\")\n))((new Function())))))if(<y><z/></y>) { if ((((+__count__).__defineGetter__(\"constructor\", [1,2,3,4].map)).isPrototypeOf(this.__noSuchMethod__))) {/*for..in*/M:for(let constructor in <x><y/></x>) break M; }} else return <x><y/></x>;");
tryItOut("__noSuchMethod__, function::__noSuchMethod__\n");
tryItOut("/*infloop*/M:for(<><x><y/></x></> .@x:: 1.3; const __noSuchMethod__ = throw <y><z/></y>, __count__; this.__defineSetter__(\"1e4\", null)) {const prop;export *; }");
tryItOut("L: {gc()<><x><y/></x></>;\nwith(window\r)yield <><x><y/></x></>;\n }");
tryItOut(";");
tryItOut(" /x/g ;");
tryItOut("return;\ncontinue ;\n");
tryItOut("{break ;throw true; }");
tryItOut("throw undefined;");
tryItOut("(<><x><y/></x></> <= __parent__ >> ((uneval(-0))))((\n3 >>= 0x99()))");
tryItOut("/*for..in*/M:for(({ __count__: prop, __noSuchMethod__: ({ __count__: ({ __iterator__: ({ prototype: ({ __iterator__: __count__, __noSuchMethod__: __proto__ }), __proto__: ({ __parent__: prop, __count__: __parent__ }) }), __noSuchMethod__: __parent__ }), __parent__: constructor }) }) in ((eval)(0x99)))gc");
tryItOut("{gc()if(undefined)  else  if (true) continue ; }");
tryItOut("let (prop) { let (prop) {  } }");
tryItOut("if([z1]) {export *; } else  if (Error()) {throw @foo;throw 1.3; } else <x><y/></x>;");
tryItOut("let (prototype = ((this.__defineGetter__(\"prototype\", <x><y/></x>)) * (<y><z/></y>.__parent__))) { return; }");
tryItOut("{throw (-0);; }");
tryItOut("M:if(__noSuchMethod__ = <><x><y/></x></>)  else  if ( /x/  >>> 1.3) {return window; }");
tryItOut("/*infloop*/M:do let __proto__ = <x/>; while(0.*);");
tryItOut("throw window;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x><y/></x>\f) throw  /x/ ;\n");
tryItOut("L: {/*infloop*/for(const __parent__ = prop; <x/>; <><x><y/></x></>) {1e+81(true); } }");
tryItOut("/*for..in*/for(var [function::__proto__, __noSuchMethod__] = [this].throw(eval(\"@foo\", *)) in (prop.__proto__ = __parent__) += (window / new Function)) {([1,2,3,4].map).call([z1,,], *, <x><y/></x>) >>> eval(\"<><x/></>\", <><x><y/></x></>); }");
tryItOut("L: false");
tryItOut("if((([1,2,3,4].map).apply).call(true, [z1], true) <= @foo.yoyo(null)) { if (new (<y><z/></y>)()) (<y><z/></y>); else {yield <><x><y/></x></>; }}\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var [prototype, __iterator__] =  '' \n.__defineGetter__(\"prototype\", Function) in *.propertyIsEnumerable(\"__iterator__\")) {{} }");
tryItOut("L: gc()");
tryItOut("if(#2=[//h\n({__noSuchMethod__: <><x><y/></x></>[window]})]) { if (new ([15,16,17,18].sort((function () { return this } ).call, -0))((new (undefined)(__iterator__.__iterator__ = <x><y/></x>)))) {try { return; } finally { case 5: throw <><x><y/></x></>; } export constructor; } else {return; }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((3).__defineSetter__)(false)))function ([y]) { };");
tryItOut("/*infloop*/while(<>yyy</>){this;var __count__ = this, __proto__ = false; }");
tryItOut("L: yield;");
tryItOut("for(let y in []);");
tryItOut("M:with({prop: __iterator__ =  \"\" }){\tgc() }");
tryItOut("{yield <x><y/></x>;__parent__ = null; }");
tryItOut("/*infloop*/M:for(var __count__ = (~ /x/g ); (__parent__ in <><x><y/></x></>).prototype = __parent__;; true % this.zzz.zzz) gc()");
tryItOut("L:do __noSuchMethod__; while((Boolean(@foo, window)) && 0);");
tryItOut("{ }");
tryItOut("export __parent__;");
tryItOut("yield (\t<y><z/></y> > <x><y/></x>);");
tryItOut("/*infloop*/do return this; while(prop.isPrototypeOf(__proto__));");
tryItOut("/*infloop*/for(var ({ prop: [__parent__, ] }) = prop.throw(<x/>)\n; window ? 0/0 <<= (gc)(__proto__, __count__) : <zzz><y><z/></y></zzz>; null++) throw 3;");
tryItOut("throw StopIteration;");
tryItOut("const __noSuchMethod__ = false, __iterator__;\ncontinue ;\n");
tryItOut("L:if(<><>yyy</></>) { if (void (true.*)[(p={}, (p.z = #1#)())]) {; }} else gc()");
tryItOut("/*infloop*/while(__noSuchMethod__.prototype = __proto__){export *; }");
tryItOut("with({__count__: delete <><x><y/></x></>}){yield; }/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) ");
tryItOut("let (__parent__ = *::*, prototype = __proto__) { ;return function ([y]) { }; }");
tryItOut("with({__count__: 3.141592653589793}){return __noSuchMethod__; }");
tryItOut("M:if( '' ) var prototype, prototype = <y><z/></y>;");
tryItOut("yield <x/>;");
tryItOut("");
tryItOut("throw StopIteration;");
tryItOut("if( /x/g .@*) {{} const prototype; }\nM:if(*)  get __iterator__(__parent__) { yield; }  else  if (<x/>) {export *;export *; }\n");
tryItOut("/*for..in*/for([constructor, prop] = [<x><y/></x>] in [[]]) var __proto__, __proto__, __parent__ =  '' ;");
tryItOut("with({}) { export __count__; } ");
tryItOut("while((new Function(true)) && 0)export __noSuchMethod__;");
tryItOut("/*infloop*/M:while((true - default: case (<x><y/></x>.throw(*::*) ? (null.__iterator__ = this) : prototype = @foo): /*infloop*/for(let __noSuchMethod__; (Object(__proto__)); [11,12,13,14].map) const prop;break; case 1: break; case ([,]( /x/g , <x><y/></x>)): break; const __count__, __noSuchMethod__;.valueOf(\"number\")) instanceof (constructor.__parent__ = [,])){break M;let __noSuchMethod__; }");
tryItOut("try { let(constructor = .2, constructor) ((function(){})()); } catch(__parent__ if (function(){return;})()) { __parent__ = prototype; } finally { with({}) { export *; }  } ");
tryItOut("/*infloop*/for(this; false; <x><y/></x>) {(#1=[#1#]);export prototype; }");
tryItOut("/*for..in*/for((((delete <x><y/></x>) >>>=*::*[function ([y]) { }]).__defineSetter__(\"__iterator__\", eval)).prototype in ((eval)(eval(\"/*infloop*/L:while([1,2,3,4].slice())var prototype = <x><y/></x>, __parent__;\", *::* < *::*)))){;export *; }");
tryItOut("L:if( /x/ ) {export __iterator__; } else \f{{} }");
tryItOut(" const __proto__;");
tryItOut("(Math.sin).apply");
tryItOut("if(<><x><y/></x></>.__defineGetter__(\"prop\", eval)) {export *;var constructor = *::*; } else  if ( /x/ ) {let __count__ = false, __noSuchMethod__;throw false; } else __count__");
tryItOut("/*for..in*/for([__parent__, prototype] = -0 in __parent__) {continue L;continue M; }");
tryItOut("switch((([[1]] == <x><y/></x>))[<x><y/\t></x> ^ window]) { case ({}) || false: break; case undefined.__lookupGetter__(\"prop\"): case __count__ = [z1,,]: break;  }\n/*for..in*/L:for(__count__ = *::* in window) ( \"\" );\n");
tryItOut("/*for..in*/for(var [prototype, __count__] = <><xxx {prop}={\n([1.3].some(gc))} /></> in (yield <x><y/></x> ^ constructor if (<x/>))) {if(<x/>) {( \"\" );return; }let prop = prop, prop; }");
tryItOut("while((new Error(__iterator__.eval(1e81))) && 0)");
tryItOut("let (prop = (-0) != (<x><y/></x>++), prototype = 1e81.__lookupGetter__(\"__iterator__\")) { yield 1.3; }");
tryItOut("{(<x><y/></x>).__defineSetter__ }");
tryItOut("do ([,,]); while(((window @ <><x><y/></x></>)) && 0);");
tryItOut("if(*::*) { if (prop) {;const __count__, __iterator__ =  '' ; } else {yield __noSuchMethod__; }}");
tryItOut("export *;");
tryItOut("for(let y in [5,6,7,8]) __parent__ = prop;");
tryItOut("/*infloop*/for(<><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></>.(( /x/g .__defineSetter__(\"__count__\", function () { []; } ))); __noSuchMethod__ .. <x><y/></x>; this.__defineGetter__(\"prop\", [1,2,3,4].slice)) {break ; }");
tryItOut("return true;\nreturn;\n");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("M:if((String())) { if (__parent__.__proto__ setter= Math.pow) {throw <x><y/></x>; } else throw window;}");
tryItOut("M:if(<y><z/></y>)  else \r{(<><x><y/></x></>);if(window) { if (null) new Function else ;} }");
tryItOut("{;this %= <x><y/></x>; }");
tryItOut("throw <x/>\n");
tryItOut("/*infloop*/M:for((this.__defineSetter__(\"__parent__\", function  __count__ (prop) { return [z1]; } )) /= (<><x><y/></x></>) .@ __parent__.( '' );  \"\" .__lookupGetter__(\"prototype\"); this) {prop = <x><y/></x>, delete;switch((eval(\"window\", <y><z/></y>)) < (0x99{/*for..in*/M:for(var __noSuchMethod__ in ((function (constructor, __iterator__) { return <x><y/></x> } )(constructor))) })) { default: yield;break; case prop = null: constructor; } }");
tryItOut("L: throw function::prototype;");
tryItOut("/*for..in*/L:for(let <y><z/></y>['__iterator__'] in new <><x><y/></x></> >>= __count__) /*for..in*/L:for(let __iterator__ = this.__defineSetter__(\"prop\", function  __parent__ (__parent__) { return <x><y/></x>; } ) ? eval(\"true;\", \nthis) : <{__iterator__}></{__iterator__}> in ( '' .__defineSetter__(\"prototype\",  /x/g ))) {yield false; }");
tryItOut("let(;) { with({}) { let(prop = [,,z1]) ((function(){;})()); } ");
tryItOut("L: throw StopIteration;");
tryItOut("/*infloop*/L:for(<x><y/></x>.__defineGetter__(\"__iterator__\", gc); ((__proto__ = __iterator__)()); new RegExp() * (new eval())) yield;");
tryItOut("L: {const __count__ = false, __proto__ = <><x><y/></x></>; }");
tryItOut("if(((__proto__)(5.0000000000000000000000, 0x99)) .@x:: <x><y/></x>.(@foo)) { if ((let (constructor) 0x99)) yield;} else {const __count__, constructor;return #3={a:#3#}; }");
tryItOut("/*for..in*/for(var [prototype, constructor] = <><x><y/></x></> in <x><y/></x>) break ;");
tryItOut("L:do constructor; while((this.zzz.zzz.valueOf(\"number\")) && 0);");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <><x><y/></x></>.__defineGetter__(\"__parent__\",  /x/ ).constructor in null) yield;");
tryItOut("/*infloop*/for(let constructor; [1e4].map([,]);  else if .throw(<x><y/></x>)) {; }");
tryItOut("do if(<><x><y/></x></>) {} else {return;(this); } while(((__noSuchMethod__ ^= <x/>) /= 1e-81 / <><x><y/></x></>) && 0);");
tryItOut("if(<><x><y/></x></>) return <x><y/></x>; else  if (__noSuchMethod__) export *;\n/*infloop*/while((<y><z/></y>.__count__ = <><x><y/></x></> << [[1]].map(Function))){yield 4.;/*infloop*/M:for(*::*; <x><y/></x>; false) {return false; } }\n");
tryItOut("/*infloop*/M:while(prototype = __parent__)/*infloop*/do {} while([[]]);");
tryItOut("if(3/0) ; else __iterator__, prop");
tryItOut("do {} while(((~1e-81)) && 0);");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("{break M;gc() }");
tryItOut("__count__ = constructor;");
tryItOut("/*infloop*/while(Function(('fafafa'.replace(/a/g, [1,2,3,4].map)))){/*infloop*/M:for(const prop = constructor; 3; *) {yield; } }");
tryItOut("/*infloop*/for(({ __proto__: prototype, __proto__: ({ constructor: prop, prototype: __count__ }) }) = new ([1,2,3,4].slice)().@foo; window; ([prototype, , __iterator__, prop] = <x><y/></x>.(<><x><y/></x></>))) ((3/0).watch).apply");
tryItOut("\n<y><z/></y>;\n");
tryItOut("L:if(1.2e3) {} else  if (window) ; else \t{with({prototype: function::prototype}){try { yield __noSuchMethod__; } catch(prop if #1=[#1#]) { var prop = <><x><y/></x></>; } ;gc() } }");
tryItOut("/*for..in*/for(\tvar __parent__ = [15,16,17,18].sort(-0, {})[(<><x><y/></x></> :: [1,,])] in <><x><y/></x></>) var prototype;");
tryItOut("/*infloop*/for(__iterator__ = function::__count__ = <><x><y/></x></>; ( - undefined); this .@x:: *) let __proto__ =  /x/g ;");
tryItOut("return <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("if((setter = [1e81].some((Math.pow).apply))) {switch(false) { default:  } }");
tryItOut("return null;");
tryItOut("/*for..in*/for(prop = (prop =  '' ) in (<y><z/></y>.__noSuchMethod__)) {return [];return  '' ; }");
tryItOut("/*for..in*/for(const prop = function::x::__parent__ = __iterator__ = <><x><y/></\fx></>.@* in 1.2e3 |= 3) M:do yield; while((this) && 0);");
tryItOut("if(<x><y/></x>) /*for..in*/M:for(var __proto__ in ((function(y) { yield y; throw #3={a:#3#};; yield y; })(true)))return <x><y/></x>; const __iterator__;");
tryItOut("switch(constructor = (p={}, (p.z = <x><y/></x>)())) { case 0:  }");
tryItOut("if(this.zzz.zzz) {yield <y><z/></y>;return ({a1:1}); } else continue M;");
tryItOut("/*for..in*/for(const (prototype) in \n) /*infloop*/M:do {false;return; } while(<y><z/></y>);");
tryItOut("if([1.3]) {const constructor, __iterator__ = 033;yield; } else {__iterator__; }");
tryItOut("if(null.@*) { if (~<x><y/></x>.__proto__) {function  yield (prototype) { return <y><z/></y> }  } else let prototype, <><x><y/></x></>;}");
tryItOut("/*infloop*/do yield this; while((<x><y/></x>.isPrototypeOf(__iterator__)));");
tryItOut("while((*::*.watch(\"(__count__)\", eval)) && 0){return;do {L:if( ) export __noSuchMethod__; else {(<><x><y/></x></>);let prop, constructor = <><x><y/></x></>; }switch(<><x><y/></x></>) { default: case 8: case 3: break; case 7: {}break; case 7: case 4: ;break; case 8: break; prop, prop = <x/>;case <><x><y/></x></>: const constructor = ({a2:z2});yield  \"\" ;break; case 4: throw  '' ; } } while(((#0=({__parent__: __count__.(window)}))) && 0); }");
tryItOut("/*infloop*/L:for( /x/ ; <><x><y/></x></>; window) ([[1]]);");
tryItOut("if(var constructor = <y><z/></y>, prototype) var delete, __proto__; else (function (__noSuchMethod__, constructor) { yield window } );");
tryItOut("let(__proto__, prototype) { with({}) { this.zzz.zzz; } ");
tryItOut("(__parent__) = constructor;");
tryItOut("let(__proto__ = 1e4, prop = <x><y/></x>) ((function(){yield this;})());");
tryItOut("return delete [ '' ].filter(({}).__lookupGetter__);");
tryItOut("/*infloop*/for(var __noSuchMethod__ = __count__; <><x><y/></x></>; prop) return [];");
tryItOut("L:if(true.throw(<x><y/></x>).throw(<y><z/></y> , <x><y/></x>)\n) { if (<><xxx>{prop}</xxx></>) /*infloop*/while(*;continue L;)(this); else (constructor.__iterator__);}");
tryItOut("switch((<><x><y/></x></>++)) { default: {}break; ;break; break; /*for..in*/L:for(let constructor in undefined) {}yield 1.2e3;break; case 2: export __proto__;;case ([[,] for each (constructor in 0.1)]): ( /x/ );\n\nbreak; break;  }");
tryItOut("\n");
tryItOut("__iterator__");
tryItOut("return \t<y><z/></y>;");
tryItOut("prototype = __iterator__;");
tryItOut("{/*for..in*/M:for(let __count__ in  /* Comment */ /x/g ) {while(([z1,,]) && 0){}let prop; }eval\n }");
tryItOut("{if(<><x><y/></x></>) {break M; } else  if (false) (true); }");
tryItOut("default: ");
tryItOut(";continue ;");
tryItOut("with({__parent__: (<y><z/></y>.@*.propertyIsEnumerable(\"__count__\"))})/*infloop*/L:for(let prototype; 4.;  '' ) ;");
tryItOut("if(__proto__.__noSuchMethod__ = [15,16,17,18].sort(({}).__lookupGetter__, constructor =  '' .throw(window))) /*infloop*/do if([z1,,]) (false); else {;yield this; } while(yield [1]); else  if (#1#) { \"\" ;throw <y><z/></y>; } else {__parent__, __parent__ = @fooreturn @foo\n[1,2,3,4].map }");
tryItOut("/*infloop*/do throw <x><y/></x>; while(window);");
tryItOut("eval");
tryItOut("yield;");
tryItOut("throw window;");
tryItOut("/*for..in*/for(var __iterator__ = <><x><y/></x></> in <><x><y/></x></>) export constructor = window;");
tryItOut("with(((get).watch).call((new RegExp([(({null.propertyIsEnumerable(\"__noSuchMethod__\"):  '' , __iterator__: <x/> }))].some(Math.pow))), delete <x/>, (.2 |  '' )\f.unwatch(\"constructor\")))const function::__count__ = *\n");
tryItOut("/*infloop*/for(const [] =  ''  .@*:: *::*.__noSuchMethod__ = <><x><y/></x></>; __noSuchMethod__.__parent__ = <x><y/></x>; __proto__) {var prop = <x/>; }");
tryItOut("/*for..in*/for(const prototype in (( /x/g )(<><x><y/></x></>))){; }");
tryItOut("");
tryItOut("if(({ <x><y/>/*\n*/</x>: constructor }) = (({}).__lookupGetter__).call(<><x><y/></x></>, <x><y/></x>, <x><y/></x>)) do return  '' ; while((__count__ = prop) && 0);");
tryItOut("/*infloop*/while(((prototype = *::*).eval(1e81).__lookupSetter__(\"prop\"))){//h\n\n(<><x><y/></x></>);var function::__parent__; }");
tryItOut("if(<x><y/></x>.watch(\"__iterator__\", <x><y/></x>)) {throw <><x><y/></x></>;window; } else {export __parent__;{} }");
tryItOut("/*infloop*/while(({}))const prop = *;");
tryItOut("L: {{}do return; while((<><x><y/></x></>) && 0); }");
tryItOut("var prototype, __iterator__; const __noSuchMethod__;");
tryItOut("while((eval(\"/*infloop*/for(var prototype = (undefined.eval(<x/>)); [,].*; ++<x/>) {let constructor = {return; }, prototype = window;return arguments; }\", prototype = 'fafafa'.replace(/a/g, [1,2,3,4].slice))) && 0)yield;");
tryItOut("L:with(this.__defineGetter__try { __noSuchMethod__ = __proto__; } catch(constructor if (function(){return;})()) { throw __parent__; } catch(__proto__) { __count__ = __parent__; }  (\"x::__noSuchMethod__\", function  __count__ (__parent__) { return __count__ } ) |= return;){var prototype; }");
tryItOut("let(constructor = new (function (prototype) { @foo; } )(__proto__, true), ({ __count__: x::function::__iterator__, __iterator__: constructor })) ((function(){with({}) { with({}) prototype } })());");
tryItOut("return <y><z/></y>; const prop;");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("switch(new ( /x/ ).__defineSetter__()) { case (1e-81)[1.2e3]: return;break; case <><x><y/></x></>: break;  }\nL:if((new (Math.pow)(*))) { }");
