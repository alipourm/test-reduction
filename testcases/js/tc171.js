tryItOut("if((this && <><x><y/></x></>)) {break L;{} } else  if (window) ([1]); else {Math.pow }");
tryItOut("/*infloop*/M:for(let prop = (new function  __proto__ (__parent__) /x/g ((((__count__).__defineSetter__).call(null, <y><z/></y>)))); ([Math.pow]); constructor) {-1; }");
tryItOut("{continue ;{} }");
tryItOut("{/*infloop*/for(__iterator__ = window; <x><y/></x>; window) gc()export prototype; }\n");
tryItOut("/*infloop*/for(var __parent__; [[1]][0.1] - __count__; null) (\t4.);");
tryItOut("let __count__ = this;");
tryItOut("/*infloop*/for((Exception((let (prototype) this))); this; (Boolean([ /x/ .__defineGetter__(\"__parent__\", function (prototype) { ; } ) for each (__proto__ in ({})) for (prototype in [1])], (<y><z/></y> << this.__lookupSetter__(\"__iterator__\"))))) {throw <x/>;/*infloop*/while(<x><y/></x>){const prop = @foo, prop =  '' ;export __iterator__; } }");
tryItOut("gc() const __parent__;");
tryItOut("/*for..in*/for(var __iterator__ = ({prototype getter: function  prototype ()null, constructor:  ''  }) in null.watch(\"__parent__\", Function)) {throw  /x/g ;break ; }");
tryItOut("switch( \"\" ) { default: return;case 7: return;case 8: continue ;break; case 5: break; ;break;  }");
tryItOut("(<x/>);\n{}\n");
tryItOut("with({}) for(let y in []);");
tryItOut("if((#1=[#1#] <<= <x><y/></x>)) {export __proto__;continue M; } else  if (prototype = __proto__) {throw @foo;const __proto__; }\nprototype;");
tryItOut("gc()");
tryItOut("/*for..in*/for(const [prop, prototype] = window .@*:: 3/0 in prototype = <y><z/></y>) {if(*) {return false; } }");
tryItOut("do let (prototype = 'fafafa'.replace(/a/g, (new Function(\"yield;\"))) >> __parent__ = ({a1:1}), ({ function::__iterator__: prop, __proto__: __count__ }) = ({prototype:  /x/g ,  set prototype __noSuchMethod__ (__parent__) { return  /x/g  }  })) { return var __parent__ = <x><y/></x>, __noSuchMethod__;; } while((([ '' ])) && 0);");
tryItOut("/*infloop*/do switch(new Error()) { default: const prototype = -0, each = this; } while((__count__.prototype));");
tryItOut("let(prop = this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) ((function(){with({}) { [<x/>].map(Function).__iterator__ = prototype; } })());");
tryItOut("L:with({__parent__: 0.1})yield (function ([y]) { })();");
tryItOut("if(( /x/g ([,,], this))) /*infloop*/do {export __proto__; } while(this); else {yield\nlet /*function::__noSuchMethod__ = *::*, prop = <y><z/></y>;yield @foo; }");
tryItOut("for(let y in [5,6,7,8]) return __proto__.(*);");
tryItOut("M:while((*) && 0){return;let __parent__ = true; }");
tryItOut("return undefined.@*;");
tryItOut("L: let __noSuchMethod__ = <x/>, __iterator__;");
tryItOut("for(let y in []);");
tryItOut("\fif((new (/a/gi)([,,]))) L:with(this.__defineSetter__(\"__noSuchMethod__\", function  constructor (constructor)<><x><y/></x></>)\t){gc()export __count__; } else  if ([({ __noSuchMethod__: prototype, __noSuchMethod__: __noSuchMethod__ })] = this.zzz.zzz) {} else {xL:with(undefined){const __parent__, let =  /x/ ; } }if(case 9: break; break; case (((<x><y/></x>).watch).call(1e4, ))[ /x/ ]: {prototype, prototype;gc() }break; ) { if ((-1 >>= @foo)((({ constructor: __noSuchMethod__ }) = []), new <x><y/></x>(false))) {{M:if(__count__.delete)  else  if (<x><y/></x>) export __parent__; } } else /*infloop*/L:for(__noSuchMethod__ = (this.zzz.zzz); __proto__;  /x/ .__lookupGetter__(\"__noSuchMethod__\")) continue M;}");
tryItOut("throw __count__;");
tryItOut("L: {gc() }");
tryItOut("do /*infloop*/do if(*::*) {\fexport __iterator__;yield; } else  if (-3/0) {yield; } while(*::*); while(('fafafa'.replace(/a/g, [1,2,3,4].map)) && 0);");
tryItOut("for(let y in [5,6,7,8]) let(constructor = __iterator__, __count__) { return ((eval(\"let constructor = false, __count__;\", 1.3)).__defineGetter__(\"__proto__\", new Function));");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = prop in this) yield\ngc()");
tryItOut("if(new (/a/gi)((*::*[__iterator__].__lookupSetter__(\"prototype\")), (new (new Function(\"{}\"))()) .@*:: <y><z/></y> + <x><y/></x>)) {yield __iterator__; } else  if (yield ((Function).call(<y><z/></y>, <x><y/></x>))) L:do {yield; } while((function ([y]) { }) && 0); else /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <{__proto__}>yyy</{__proto__}>) {/*for..in*/for(const __noSuchMethod__ = new Function in  '' ) {; }yield @foo; }");
tryItOut("/*infloop*/for(__count__;  /* Comment */this.__defineGetter__(\"__noSuchMethod__\", (({})).call); ({ constructor: prop, __count__: __proto__ }) = <x><y/></x> << <><x><y/></x/*\n*/></>) {gc()/*for..in*/for(const __proto__ = this in this) {const __proto__;yield; } }");
tryItOut("{} const ([1,2,3,4].map).apply;");
tryItOut("__count__ = __count__;");
tryItOut("with({}) throw StopIteration;L:while((__count__) && 0){1e81;__count__; }");
tryItOut("L:if(\r(<x/>.eval(this))) {undefined; } else  if ([[]]) {export __parent__; } else {__count__;<><x><y/></x></> === prototype }");
tryItOut("return new *::* < let (__noSuchMethod__) __count__;");
tryItOut("gc()");
tryItOut("/*for..in*/for(let __proto__ in ((Math.sin)(<y><z/></y>)))const function::__noSuchMethod__, __count__ =  /x/g ;");
tryItOut("/*infloop*/M:while(let (__noSuchMethod__ = [[]], prop = <x/>) [,] @ ({__parent__ getter: Function })){const __proto__ = ; }");
tryItOut("switch((4. |= window)) { default: /*for..in*/for(let __noSuchMethod__ = (\r<x><y/></x>.@*) in <x><y/></x>) {;return; }break;  }");
tryItOut("{/*infloop*/for(var constructor; eval(\"gc()\", <><x><y/></x></>); ) throw null;return  '' ; }");
tryItOut("/*for..in*/for(const prototype in ((prototype.prototype).unwatch(\"__proto__\"))) /*infloop*/for(let __noSuchMethod__; this.__defineSetter__(\"__iterator__\", /a/gi); [15,16,17,18].filter((new Function(\"export __parent__;\")), <y><z/></y>)) {let __count__ = true, constructor;var __noSuchMethod__; }");
tryItOut("return [,,].watch(\"prototype\", function  prop ()<x/>);");
tryItOut("({ __iterator__: set }) = __noSuchMethod__;");
tryItOut("{gc() } const prop;");
tryItOut("if(this.zzz.zzz ? <x><y/></x>.( '' ) : delete ( '' .__iterator__ = null)) {continue ; }/*for..in*/for(__iterator__ in <x><y/></x>) {; }");
tryItOut("continue M;gc()");
tryItOut("yield ([,,z1] .@ -this.hasOwnProperty(\"__noSuchMethod__\"));");
tryItOut("M:if(typeof ( /x/g .isPrototypeOf(__parent__))) { if (((constructor) =  )) {yield;(window); }} else __iterator__");
tryItOut("/*for..in*/for(let [prototype, __proto__] = __count__ |= null in <xxx {__parent__}={0.1 ? __parent__ :  /x/ } />) {M:if(new (#3={a:#3#}(({__parent__: 1e4}), this))((__iterator__.__parent__ = *::*))) { if \t(((yield <><x><y/></x></>)((<x/>); = 4.))) break L; else {; }} }");
tryItOut("if(null) {break M; } else  if (<><x><y/></x></>) return; else {__noSuchMethod__ = (-0); }");
tryItOut("/*infloop*/for(this; let (__parent__ = __count__) <><x><y/></x></>.throw(__noSuchMethod__); (yield __iterator__)) /*infloop*/for(var __count__; this; (function(y) { yield y; ;; yield y; }).apply((function ([y]) { } != .2))) return;");
tryItOut("yield (setter.__iterator__ setter=  \"\" );");
tryItOut("L: return prototype;{}");
tryItOut("with(*)#3={a:#3#};");
tryItOut("let (__count__ =  /* Comment */constructor ? <><x><y/></x></>.yoyo(*) : __iterator__ += <><x><y/></x></>, __count__) { return; }");
tryItOut("/*infloop*/while(\nMath.pow('fafafa'.replace(/a/g, [1,2,3,4].map),  /x/ ))if(<y><z/></y>) { if (new Function(1.3)) return;} else {export prop;export yield; }");
tryItOut("/*infloop*/for(const ({ prop: ({ prop: [], __parent__: [, , , prototype] }), constructor: __count__((@foo <<= null)) }) = eval(\";\", --[<y><z/></y> ? @foo : *::*].map(Math.sin));  /* Comment */((prototype.prototype) & 1e+81 ? <x><y/></x> : <><x><y/></x></>); Math.sin(null, 1.3).hasOwnProperty(\"__noSuchMethod__\") @ __count__ = [,].hasOwnProperty(\"__noSuchMethod__\")) {let __proto__ = -1, constructor;return; }");
tryItOut("return #0=[__parent__] ^ <><x><y/></x></>;");
tryItOut("while(((<x/> ? @foo : __proto__ = *::* &= prototype = this.__defineGetter__(\"prototype\", (window).watch))) && 0){L:if(<><x><y/></x></>) yield; else  if (<x><y/></x>) {} else {prototype; } }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ({__parent__: .2})) {continue ;let __proto__ = @foo; }");
tryItOut("if(this) { if (this) constructor =  \"\" , prototype; else gc()}");
tryItOut("(-3/0);");
tryItOut("if( /* Comment */'fafafa'.replace(/a/g, ({}).hasOwnProperty)) {{} } else  if (([ /x/g  |= window].some((new Function(\"gc()\"))))) if(window) yield @foo; else  if ( '' ) export *; else __iterator__ = __iterator__ else switch(@foo) { case 7: return;break; yield <x><y/></x>;case ({}):  }");
tryItOut("let (({ prototype: function::prototype, prop: prototype }) = *.__defineSetter__(\"prop\", eval), __parent__) { ; }");
tryItOut("/*infloop*/while(false){export prop; }");
tryItOut("break L\nlet __iterator__, __parent__ = 033\n");
tryItOut("/*for..in*/for(let [__count__, constructor] = <x><y/><///h\nx>.propertyIsEnumerable(\"constructor\")\f in window) yield <y><z/></y>;\nexport *;\n");
tryItOut("with({}) yield;");
tryItOut("let(__noSuchMethod__, __count__ = <><x><y/></x></>.prototype =  /x/ ) ((function(){let(__iterator__ = (\n__count__.prop--), prop) ((function(){__count__(<x><y/></x>) = __proto__;})());})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const  /x/g .__lookupSetter__(\"__noSuchMethod__\").prop in []) {let prop, __proto__ = (-1); }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(let prop =  /x/  in [[]])  {throw <><x><y/></x></>; }");
tryItOut("{prop; }");
tryItOut("/*infloop*/for(__count__.constructor getter= function(q) { return q; }; this == __parent__ = false; <></>) ; const __proto__;");
tryItOut("/*infloop*/while(<><x><y/></x></>)export constructor;");
tryItOut("L: { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x><y/></x>) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in true) {let constructor = 3.141592653589793, __iterator__; } }");
tryItOut("{yield *::*;/*for..in*/M:for(const constructor = new  '' (prop, window) in *::*) gc }");
tryItOut("yield constructor\nwhile((0) && 0){gc() }");
tryItOut("with({__noSuchMethod__: null}){return;(#1=[#1#]); }");
tryItOut("/*infloop*/for(let __proto__; __proto__.__proto__ = <><x><y/\r></x></>.unwatch(\"function::prototype\"); __proto__ = [z1] >= [z1]\n *= * ^ window ? Error() : constructor + <x><y/></x>) {__count__( /x/ )L:switch((-1)) { case 4: return;case 4: break; case 3: @foobreak; default: break; case  /x/ : break; case 0: break; (*::*);break; throw prototype; } }");
tryItOut("let (__iterator__, constructor =  /x/ ) { /a/gi }");
tryItOut("{yield  /x/ ; }");
tryItOut("__noSuchMethod__: window");
tryItOut("if(5.0000000000000000000000) {constructor = *::*; } else  if ((p={}, (p.z = #3={a:#3#})())) throw <><x><y/></x></>; else {__noSuchMethod__ }");
tryItOut("{throw *;prop = [,]; }");
tryItOut("do  while((<xxx>{__count__}</xxx>.(*::*.unwatch(\"__iterator__\"))) && 0);");
tryItOut("gc() const prop;");
tryItOut("/*for..in*/L://h\nfor(const [__iterator__, function::__iterator__] = __proto__.(*) in <><x><y/></x> </>) {let __iterator__ = [z1,,], __count__ =  \"\" ; /x/ ; }");
tryItOut("M:if((eval(\"/*for..in*/for(var [__iterator__, __iterator__] = undefined in <><x><y/\\f></x></>) __count__ = 0.1;\", <><x><y/></x></>))) { if (#0=function ([y]) { }) prop;} else {continue M;break ; }");
tryItOut("if(({a2:z2})) {with(null)\f<><x><y/></x></>; } else  if ((p={}, (p.z = [11,12,13,14].some , <x><y/></x>.(this))())) switch(window) { case 7: /*for..in*/for(const prop in <y><z/></y>) {continue M;__iterator__, __count__ = @foo; }break;  }");
tryItOut("/*for..in*/for(prop.constructor in @foo) {let prop, __noSuchMethod__ = #1=[#1#];export *; }");
tryItOut("/*infloop*/do {return {};throw  \"\" ; } while(new (#1#)(window));");
tryItOut("if(([<x><y/></x> for each (prototype in __parent__)]).watch(\"prototype\", function (__noSuchMethod__, __iterator__) { return <><x><y/></x></> } ).__defineGetter__(\"__iterator__\", eval(\"@foo\",  '' ) &= this.zzz.zzz)) while(((function(q) { return q; }).call(constructor, <y><z/></y>)\f) && 0){; } else  if (constructor) {if((\neval(\"0x99\", <x><y/></x>))) { if (<y><z/></y>) {/*infloop*/while(0.1){; }export *; } else {do {throw [,,z1];{} } while((null) && 0);{} }} } else if(window.__defineGetter__(\"__iterator__\", Math.pow)) { if (__count__ = (function ([y]) { })()) {return;return; }} else {yield; }");
tryItOut("return;\nL:if(( /x/g  <= *::*.__count__ = typeof window).isPrototypeOf((prop.(({__parent__ getter: ((__proto__ = .2)).__defineSetter__ }))))) yield (p={}, (p.z = prop)()); else {L: return; }\n");
tryItOut("if(prop.(*::*.eval(__count__))) {M:while(([<x><y/></x> for (constructor in [z1,,])].\fthrow([z1,,] >>= *)) && 0){yield; } } else  if (this.__defineGetter__(\"prop\", (__iterator__).__defineSetter__) /= function () { throw  /x/ ; } ) M:do return; while((__count__) && 0); else (null);");
tryItOut("/*infloop*/for(const prop = ((prop)[@foo])[((([1,2,3,4].map).call([z1], false, *)) < ++<y><z/></y>)].valueOf(\"number\"); #0=new (#1#)(null).valueOf(\"number\"); prop.__proto__ setter= <y><z/></y>.yoyo((__parent__.constructor = .2.*.valueOf(\"number\")))) (function  constructor ()(__count__)).call");
tryItOut("/*infloop*/for(__parent__(1.3, <y><z/></y>); ({__iterator__: eval(\"export __proto__;\", <>\t<x><y/></x></>)}); this.__defineSetter__(\"__count__\", Math.pow) ^=  \"\" ) {/*infloop*/for(var __count__; <x><y/></x>; __parent__) export *;yield <x><y/></x>;gc() }");
tryItOut("M:if(([11,12,13,14].filter)) {null; } else \n");
tryItOut("/*infloop*/for(var __count__ = (yield  /x/g ); <y><z/></y>.yoyo(undefined);  { return __noSuchMethod__ } ) {(3);throw {}; }");
tryItOut("/*infloop*/while((new ((this.__defineSetter__(\"__proto__\", function  prototype (__noSuchMethod__, prototype)[,]) - __count__ = #1#).watch)(let (__count__ = <><x><y/></x></>) ({prototype: ({a1:1}),  set __iterator__ prop (__iterator__)false }))))export __count__;");
tryItOut("/*for..in*/for(let __count__ = return <x><y/></x>; in  /x/g  ? *::* : <x><y/></x>\t) {/*infloop*/while(1e4){(1.3);gc() }yield; } const __iterator__;");
tryItOut("switch((<x><y/></x> >= <><x><y/></x></>).valueOf(\"number\")) { default: (gc).callcase (yield new String(false, [[1]])): return (-0); }");
tryItOut("for(let y in [5,6,7,8]) break L;");
tryItOut("/*infloop*/for(var __count__ = function::__parent__ = *::* /= <x><y/></x>; @foo; (uneval(<x/>))) M:switch(([11,12,13,14].\tsome)) { case 1: break; default: (0).watchbreak;  }");
tryItOut("/*for..in*/for(const default: break;  in (( )(([11,12,13,14].map))))/*infloop*/while(undefined){(function  constructor (__iterator__, prop)<>yield this;</>).call }");
tryItOut("if(({prop: (p={}, (p.z = __parent__ = (__noSuchMethod__))()) })) L:if(null ? prop : <x><y/></x>) {5.0000000000000000000000; } else  if (__noSuchMethod__.((({constructor: (p={}, (p.z = (<x><y/></x> for ([z1,,] in 5.0000000000000000000000)))())})))) ");
tryItOut("let(__proto__) { default: L:if( '' ) {return false;(<><x><y/></x></>); }break; case 5: case 2: __count__, __iterator__;let prototype = true;break; case 6: export *; = __iterator__;");
tryItOut("/*for..in*/for(this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty).__noSuchMethod__ in arguments) /*infloop*/L:for(<x><y/></x>; 3/0; <><x><y/></x></>) \n{export *;M:do {} while((this) && 0); }");
tryItOut("{}");
tryItOut("throw __iterator__;");
tryItOut("if(#1=new Number()) { if (null) {L: false;(__proto__); } else if(this[#1#]) {let prototype;return [,,z1]; }}");
tryItOut("let(__iterator__ = *::*) ((function(){this})());");
tryItOut("with({prop: __proto__ = new (*::*)()}){}");
tryItOut("throw __proto__;");
tryItOut("with((#3={a:#3#}-- +=  /x/g  < <x><y/></x>)){/*for..in*/M:for(const [__proto__, prototype] = undefined in 033) {([[]]);return <x><y/></x>; }prop = 0/0, __proto__ }");
tryItOut("L: ");
tryItOut("with({constructor: (-0)}){gc() }");
tryItOut("if(this) {continue ; } else {return;continue L; }");
tryItOut("if(__parent__%=__parent__) /*infloop*/\fwhile(-3/0){continue ;throw #1#; }\n");
tryItOut("(__iterator__);\n/*infloop*/for(var __count__ = <><x><y/></x></>; window; <x><y/></x>) yield;\n");
tryItOut("throw prop;");
tryItOut("if(true[#3={a:#3#}]) {} else  if ((throw  '' ;)(__count__, window)) {var __noSuchMethod__ = 4., constructor;yield 0.1; } else {yield @foo; }");
tryItOut("/*infloop*/while((__count__.__parent__)){/*infloop*/for(<><x><y/></x></>;  { yield; } ; undefined) {yield this; }; }");
tryItOut("{Math.singc() }");
tryItOut("/*for..in*/for(const __count__ in (((prototype.__proto__ setter= /a/gi).watch)(prop.prop))){var __noSuchMethod__ = <><x><y/></x></>;yield 0.1; }");
tryItOut(" for ((this.__proto__)(<y><z/></y>.isPrototypeOf( /x/g )) in  ) for each (prototype in constructor) for each (__iterator__ in <><bbb xmlns:ccc=\"false\"><ccc:eee></ccc:eee></bbb></> ? new ([[]])() : (new (5.0000000000000000000000)(undefined,  \"\" ))) for (constructor in constructor) for (__proto__ in  /x/ .throw([1,,])) for (false in __parent__)");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(const constructor in ((gc)((String(this, true))[(this.__defineGetter__(\"__iterator__\", Math.pow))] .@ new ([,])()))){yield (__proto__ = <x><y/></x>); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:while(<x><y/></x>)const constructor = <><x><y/></x></>;");
tryItOut("if(1.2e3 || .yoyo((0.watch(\"__count__\", (new Function(\"{}\")))))) {this;yield; } else  if ((__parent__.__count__/*\n*/)) {; }");
tryItOut("/*for..in*/for(let __count__ in @foo) /*infloop*/L:for(const [] = (<y><z/></y> ? <x/> : {}); ([11,12,13,14].some); (1.3 for each (__count__ in false)) ,  /x/ ) L: export __iterator__;");
tryItOut("/*for..in*/for(var __count__ in L: /*for..in*/for(const __parent__ = constructor !== <><x><y/></x></> in null) {with({__count__: ({a2:z2})}){var prop; } }) return; const prop;");
tryItOut("yield undefined;");
tryItOut("throw <><x><y/></x></>;");
tryItOut("yield constructor = <><x><y/></x></>;");
tryItOut("switch(yield <><x><y/></x></>;(prototype)) { case 1: break;  }");
tryItOut("/*infloop*/for(let prop = this; 1.2e3; true) {yield this; }");
tryItOut("if(new new return <y><z/></y>;(<y><z/></y>)(this.zzz.zzz)) { if ((Math.sin(<\fx><y/></x>)).propertyIsEnumerable(\"prototype\")) if(@foo) yield; else export constructor; else { }}");
tryItOut("this.zzz.zzz;");
tryItOut("L: {return (~\t /x/g  / prop);switch(0x99()) { case 4: default: yield; } }");
tryItOut("if(<y><z/></y>) {return;break M; }");
tryItOut("if(constructor = false) /*for..in*/L:for(const __iterator__ in ((/a/gi)(<y><z/></y>))){\f__noSuchMethod__ = @foo; } else \t if ({}) if(__count__) gc() else throw [z1];");
tryItOut("with({}) { return; } ");
tryItOut("with(<bbb xmlns=\"(false = (new @foo || null))\"><!--yy--></bbb>)const __parent__, prototype;");
tryItOut("'haha'.split\n([,,]);");
tryItOut("/*infloop*/do if(<><x><y/></x></>)  else  if (-3/0) (<><x><y/></x></>).watch while(window ^= constructor);");
tryItOut("__parent__ = __proto__;");
tryItOut("yield (uneval( \"\" ))\n");
tryItOut("{while((@foo) && 0)let (prototype = null) { function  __noSuchMethod__ (prop, __parent__) { yield <x/> }  } }");
tryItOut("let (__parent__ = -1) { __iterator__ = (-0), __iterator__; }");
tryItOut("const prototype;");
tryItOut("M:do continue ; while((<x><y/></x>) && 0);");
tryItOut("/*for..in*/L:for(let [z1,,] = ({a1:1}).__lookupGetter__(\"__iterator__\") in window) {yield <><x><y/></x></>;export __noSuchMethod__; }");
tryItOut("if(<><x><y/></x></>) false;");
tryItOut("/*infloop*/M:for(var __iterator__ = this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__); ([1,,].eval([,,z1])); <x/> , <y><z/></y>) true;throw window;\n/*infloop*/do break L; while(/*\n*/<x/>);\n");
tryItOut("if((false())) yield;");
tryItOut("with({__count__: (Iterator(eval(\"yield;\", false)) for ([, constructor, ] in <><x><y/></x></>) for each (let in  '' ) if (window))}){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const *::*['__noSuchMethod__'] in [[]]) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.__noSuchMethod__ in new function (__proto__, __proto__) { export prop; } ()) {if((+*::*).valueOf(\"number\")) { if (++prototype.<bbb xmlns:ccc=\"__iterator__\"><ccc:eee></ccc:eee></bbb> getter= function (__proto__)1e-81) {return *::*;__iterator__ = <><x><y/></x></>, __count__; } else (function(y) { yield y; export prop;; yield y; }).apply}{; } }");
tryItOut("while((('haha'.split()\f)(function ([y]) { }, ({a2:z2}))) && 0){return;/*infloop*/while(<><x><y/></x></>){break ; } }");
tryItOut("export *;");
tryItOut("while((false) && 0)yield;");
tryItOut("L:switch(<x/>((-1))) { default: window;break; export *; }");
tryItOut("return;");
tryItOut("if(-3/0.__proto__) {return .2;, __count__ =  /x/ ; }\n");
tryItOut("while((new  \"\" ().unwatch(\"__count__\")) && 0)let __proto__;");
tryItOut("(-3/0); const __parent__;");
tryItOut("{/*infloop*/for( /x/ ; <x><y/></x>.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))); window.watch(\"constructor\", Function)) {; } }");
tryItOut("try { return; } catch(__parent__) { var __proto__ = ({a1:1}); } finally { export *; } ");
tryItOut("/*for..in*/for(var (constructor) in ((({}).hasOwnProperty)(((yield <><x><y/></x></>)) @ ( \"\"  - function(id) { return id }).__defineSetter__(\"__parent__\", __iterator__)))){}");
tryItOut("gc()");
tryItOut("if([15,16,17,18].filter((true).watch, this).throw(<x/>.unwatch(\"constructor\"))[false])  set constructor constructor ()__proto__ else  if (\ntrue.__lookupSetter__(\"__iterator__\")) /*for..in*/L:for(const [let, __proto__] =  /x/g .watch(\"__iterator__\", 3.141592653589793).hasOwnProperty(\"__parent__\") in <><x><y/></x></>) {yield;{} }");
tryItOut("{if((__noSuchMethod__ = #0=<x/>)) {;with({__parent__: <x><y/></x>}){@foo; } } else  if ((__noSuchMethod__.constructor setter= ({}).hasOwnProperty)()) {function () { throw -0; }  }");
tryItOut("if((new Number(__noSuchMethod__ = [,], ((p={}, (p.z = 1.2e3)())))))  if {}((( /* Comment */<x><y/></x> if (<x><y/></x>)))) ; else {export *;let prototype = __proto__; }}\n");
tryItOut("switch\t(<><x><y/></x></>) { default: (@foo); }");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/for(let \f__count__ in #1#.throw(eval(\"(__count__(true, 033))\", 3/0))) {with([1]){export *;; } }");
tryItOut("{((null.*)) }/*for..in*/for([prototype, __noSuchMethod__] =  \"\"  in 0) export *;");
tryItOut("/*for..in*/L:for(__iterator__ = new RegExp().unwatch(\"*::*.prototype['__parent__']\") in yield 1e-81) gc()");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("return;\nreturn true;\n");
tryItOut("with(({__iterator__: ({a2:z2}) })){yield; }");
tryItOut("L: {return;yield; }");
tryItOut("/*infloop*/for(let __count__.constructor = <>let (__proto__ = window, prototype) <x/></> .@*:: (new (function(q) { return q; })().yoyo(new (new Function)(<><x><y/></x></>))); ; (uneval(({__proto__: * })[prototype.propertyIsEnumerable(\"constructor\")])).@foo) throw StopIteration;");
tryItOut("L:if() {export __iterator__;if(<x><y/></x>) yield; else  if (*::*) yield @foo; else {{}return  /x/ ; } } else  if (prototype%=[11,12,13,14].filter) {switch(@foo) { default: yield #1=[#1#];break; case 8: throw <y><z/></y>;yield *::*;break; break;  } } else {break L; const __noSuchMethod__; }");
tryItOut("{export *;var __parent__, prop = window; }");
tryItOut("/*infloop*/for(<x><y/></x>; true; prototype) continue ;");
tryItOut("L: (-0\t);");
tryItOut("do yield 1e-81; while((eval(\"throw prototype;throw .2;\", <x><y/></x>.watch(\"prototype\", <y><z/></y>))) && 0)\f;");
tryItOut("with(<x><y/></x>);");
tryItOut("");
tryItOut("for(let y in [])");
tryItOut("/*for..in*/for(let __proto__.prototype in function(id) { return id }) {{} }");
tryItOut("/*infloop*/L:do {} while(((prop+=arguments) |= __count__ = null));");
tryItOut("if(__parent__) return; else {}");
