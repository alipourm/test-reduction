
tryItOut("L:if(arguments)  else { }");
tryItOut("let(({ __count__: __parent__, constructor: ({ __parent__: __iterator__ }) }) = ([this for each (__proto__ in function(id) { return id })].isPrototypeOf(<><x><y/></x></>.eval(@foo))), ({ function::__proto__: __count__, prop: constructor }) = this.__defineGetter__(\"__iterator__\", *::*)) { for(let y in [])\n");
tryItOut("");
tryItOut("{yield <y><z/></y>; }");
tryItOut("/*infloop*/M:while([15,16,17,18].filter(function (prop)*,  '' )){return; }");
tryItOut("{yield;new Function }");
tryItOut("L: {prop; const __parent__;function (__proto__) { return <x><y/></x> }  }");
tryItOut("null;");
tryItOut("let(__proto__ = true.@foo, prototype) ((function(){let(__iterator__, __count__) ((function(){prototype = constructor;})());})());");
tryItOut("/*infloop*/for(const __parent__ = <y><z/></y>; true; <y><z/></y>) return this;");
tryItOut("switch(<x><y/></x>) { case <y><z/></y>: var __noSuchMethod__, prop = prototype;break; default: case [,,z1]: case 7:  }");
tryItOut("return;");
tryItOut("while(([]) && 0){let (prototype = (* .@x:: this), prop) {  }case 7: break;  }");
tryItOut("L:if([.2]) { if ([] = [[1]] for (constructor in this)) function ([y]) { } else const prop, __parent__ = try { const prop; } finally { return prototype; } ;}");
tryItOut("if((<x/>.watch(\"__parent__\", eval))) let (__count__ = (function ([y]) { })(), prototype) { /*for..in*/M:for(const __parent__ = [[]] in window) {{} } }");
tryItOut("/*infloop*/while(({ get __parent__ __iterator__ (constructor, prototype) { yield 033 } ,  get constructor() { yield <x><y/></x> }  })){1e81; }");
tryItOut("while(([this.__lookupSetter__(\"prop\")]) && 0)do {throw [[]];{} } while(([11,12,13,14].filter) && 0);");
tryItOut("with({}) let(x::each) { throw prop;");
tryItOut("M:if(<x/>) { if (null) @foo} else yield <><x><y/></x></>;");
tryItOut("{yield (function ([y]) { })(); }");
tryItOut("{throw  /x/ ;const __count__; }");
tryItOut("/*infloop*/do {/*for..in*/for(let prototype in __parent__) {export constructor;{continue L; const __proto__; } } }\t while(typeof window);");
tryItOut("/*for..in*/for(var constructor in ((constructor)(#1#))){{} }");
tryItOut("if(<x><y/></x>) continue M; else  if ([1]) {throw <y><z/></y>; }\n");
tryItOut("let __proto__, prop\t;");
tryItOut("j");
tryItOut("/*for..in*/for(let [__proto__, __iterator__] = <x><y/></x> in prototype) {}");
tryItOut("/*for..in*/for(const prototype in ((gc)(033))){throw <><x><y/></x></>; }");
tryItOut("\n/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in prop = window = true) {/*infloop*/for(const __parent__ = <x><y/></x>; *; null) yield  \"\" ; }");
tryItOut("let (set = ((![11,12,13,14].map)).__defineSetter__, __count__) { /*for..in*/for(var [__count__, constructor] = (this.__defineSetter__(\"__proto__\", (1 for (x in [])))) in [z1,,]) {/*infloop*/for(*::*; <y><z/></y>; [z1]) {export *;break ; }/*infloop*/M:for(__count__ = *::*; <y><z/></y>; <><x><y/></x></>)  } }");
tryItOut("with({}) { for(let y in [5,6,7,8]) return; } ");
tryItOut("L:with((({ prototype: prototype }) = __parent__ *  /x/ .valueOf(\"number\"\t)).yoyo([, prototype, , __noSuchMethod__] = let __proto__ = 0))prop, prototype;");
tryItOut("L:switch((<><x><y/></x></>.unwatch(\"__count__\"))) { case 3: break; ({});case 0: __iterator__, __iterator__ =  \"\" ;case prop.__count__: break;  }");
tryItOut("{let __parent__, __iterator__; }");
tryItOut("/*infloop*/while(({__count__: (__iterator__) = __noSuchMethod__.constructor, prototype: (uneval([<x><y/></x>])) })){yield <x/>\nprop;(<y><z/></y>);if((set = <x><y/></x>)) { if ((Date(true))) return 3.141592653589793;} else { } }");
tryItOut("{/*for..in*/for(var __noSuchMethod__ in <y><z/></y>) /*for..in*/for(const [__noSuchMethod__, \f__count__] =  \"\"  in <><x><y/></x></>) continue ;export *\nreturn;export *; }");
tryItOut("M:do {throw  /x/ ; } while((false.constructor = this) && 0);");
tryItOut(";\t<xxx {prop}={this} />");
tryItOut("continue L\nyield __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("return constructor;");
tryItOut("with( ''  >>> (__count__ = __noSuchMethod__)){export constructor; }");
tryItOut("throw __proto__;");
tryItOut("{with({__noSuchMethod__: (prototype.__parent__)}){yield; }export __count__\n }");
tryItOut("/*for..in*/for(var [prototype, __proto__] = __proto__ = (yield false) in  /* Comment */__parent__ += <><x><y/></x></>) {throw <y><z/></y>; }");
tryItOut("<x/>\n\n");
tryItOut("let (constructor, __iterator__) { return <y><z/></y>; }");
tryItOut("if(( /x/g .watch(\"__parent__\", function (__iterator__, __proto__) { return undefined } )) >>>= '' ) {[1,2,3,4].map } else  if ((let (prototype) (delete <><x><y/></x></>))) {/*for..in*/for(__count__ in this) return; }");
tryItOut("/*infloop*/for(const ({ __count__: constructor }) =  \"\"  + @foo; <><x><y/></x></> -= true; eval(\"constructor\", yyy)) const __count__ = <y><z/></y>, __proto__;");
tryItOut("gc()return <y><z/></y>;");
tryItOut("{return;__iterator__ = #3={a:#3#}; }");
tryItOut("/*infloop*/L:while([1].prop){<x/>;; }function ([y]) { };\tfunction (__proto__, __proto__) { yield window } ");
tryItOut("{const __parent__;/*infloop*/for(#1=[#1#]; this; false) {return window; } }");
tryItOut("let (__iterator__) { /*infloop*/for(<><x><y/></x></> <<  { export *; } ; (<y><z/></y> - constructor) !== (new  /x/ ); new (new Function(\"this\"))(__count__, undefined)) {export *;{} } }");
tryItOut("M:do function(y) { yield y; yield __iterator__;; yield y; } while((<y><z/></y>++) && 0);");
tryItOut("let (__parent__ = undefined, __noSuchMethod__ = <x><y/></x>) { export *; }");
tryItOut("(( \"\" ).__defineSetter__).apply");
tryItOut("yield Boolean(#3={a:#3#});");
tryItOut("/*for..in*/for(__iterator__ in (((1 for (x in [])))((\n(<y><z/></y> + <><x><y/></x></>.constructor = <x><y/></x>)) &  '' .eval(true.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })))))/*for..in*/for(let  /x/g .prop in false) {throw ; /x/g ; }");
tryItOut("M:with(*::*)yield *::*;");
tryItOut("with({function::prop: ({__parent__: 3.141592653589793 >> <><x><y/></x></> }).hasOwnProperty(\"__iterator__\")}){if([15,16,17,18].filter(<y><z/></y>, <y><z/></y>).yoyo(({delete: <x/> }))) { if (<{prop}></{prop}>) {;export constructor; }} else export __proto__; }");
tryItOut("M:if(<x/>) export *;/*infloop*/for(*::* %= <y><z/></y>; 1.2e3.__lookupSetter__(\"__noSuchMethod__\"); <x><y/></x>) /*infloop*/for(var __proto__; <x/>; <y><z/></y>) continue L;");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = this in *::*) yield;");
tryItOut("do {return [,,z1]; } while((false) && 0);Array(); const prop;");
tryItOut("if(<x><y/></x> :: <><x><y/></x></>) /*infloop*/do throw <><x><y/></x></>; while(<><x><y/></x><\t/>);");
tryItOut("/*for..in*/for(const [__iterator__, setter] = __proto__ in (__parent__ = [__noSuchMethod__, , , __parent__]/*\n*/)) const __parent__; const prototype;");
tryItOut("/*infloop*/for(var ({ __iterator__: __count__, __proto__: prop }) = constructor = *; prototype = @foo; prop.unwatch(\"__count__\")) yield @foo;");
tryItOut("while((((uneval((-0.__proto__))))) && 0)let(__noSuchMethod__) { gc()");
tryItOut("L:if((<x/>(var __iterator__, __proto__ = 0x99, function ([y]) { }.constructor))[3.141592653589793]) {throw this; const prop; } else with(delete eval(\"<x><y/></x>\", @foo))export prop");
tryItOut("return  '' ;");
tryItOut("/*infloop*/do {while((*::* | ({a1:1})) && 0){{} } } while(prototype = [window for (prop in  '' )]\t);");
tryItOut("for(let y in []);");
tryItOut("(3.141592653589793);\n(<x/>);\n");
tryItOut("{}");
tryItOut("return;");
tryItOut("let constructor =  /x/g , prop = __count__;");
tryItOut("with(({})){let __noSuchMethod__, __proto__; }");
tryItOut("with({__iterator__: ( /* Comment */ /x/g )}){/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in <y><z/></y>) break L; }");
tryItOut("var __count__;\n\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(new (/a/gi)(); (<x><y/></x>(([[1]].unwatch(\"__iterator__\")), <><x><y/></x></>)).eval(__count__) <  /x/ ; <y><z/></y>) return <y><z/></y>;\n '' \n");
tryItOut("with(0.1){yield <y><z/></y>; }");
tryItOut("/*infloop*/L:while(true){gc() }");
tryItOut("if(((yield __parent__ != __proto__))) { if (((new (this)({})) ? ((-1))[ /x/ ] : ({}).__lookupGetter__)) ({}).__lookupGetter__ else {/*for..in*/L:for(__parent__ in <x><y/></x>) {var __iterator__; }if(null) var __iterator__; else  if (<x><y/></x>) {yield;function::__noSuchMethod__ = <y><z/></y>, prototype = [[1]]; } }}");
tryItOut("/*infloop*/L:for(var constructor = constructor.__iterator__ setter= [1,2,3,4].slice; *::*.__lookupGetter__(\"__parent__\"); ({ set __proto__ prototype () /x/g , __count__: *::* })) function  constructor (__noSuchMethod__)[,,]");
tryItOut("/*infloop*/L:while(((null).__defineSetter__))M:if(window) { if (window) {throw *; } else {export *; }}");
tryItOut("/*infloop*/for(let [, ({ __proto__: ({ <><x><y/></x></>: ({ __noSuchMethod__: prop }), getter: prototype }), prop: __parent__ }), ({ __noSuchMethod__: ({ __parent__: prototype, prop: __count__ }), set: [] }), , ({ prototype: ({ __proto__: try { export *; } catch(__proto__) { prototype = <><x><y/></x></>, __count__; }  }), __parent__: __parent__ })] = \f(); prototype[__iterator__]; (Iterator())) {while((\n /x/g ) && 0)const prototype, __count__; }");
tryItOut("/*infloop*/\tfor(const constructor; ([({ constructor: __noSuchMethod__, constructor: ({ __count__: constructor, __proto__: delete//h\n }) }), __count__, , , __noSuchMethod__] = (-1).unwatch(\"prop\") ? __parent__ =  ''  : 033.watch(\"__noSuchMethod__\", function  constructor (__count__) { return 1e-81 } )); __proto__|=1e81.propertyIsEnumerable(\"__parent__\")) yield;");
tryItOut(";");
tryItOut("[1,2,3,4].slice");
tryItOut("while((eval(\";\", <x><y/></x>)) && 0){}\n");
tryItOut("let(({ __proto__: [, , ({ __proto__: __proto__, __iterator__: prototype }), prop, ] }) = *) { yield function (({ prototype: ({ __proto__: __noSuchMethod__ }) })) { return ((constructor = <x><y/></x>)--) } ;");
tryItOut("let (try { return; } catch(__iterator__ if undefined) { (#1=[#1#]); }  = <x/>) { export *; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var [prototype, __count__] = [<><x><y/></x></> if (arguments)] in false) ;");
tryItOut("this.zzz.zzz;");
tryItOut("gc");
tryItOut("{/*for..in*/L:for(__proto__ in ((function(q) { return q; })('fafafa'.replace(/a/g, [1,2,3,4].slice))))__proto__, prototype; }");
tryItOut("L: {Functionreturn; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("yield window\n<x><y/></x>;");
tryItOut("with((new (/a/gi)(<><x><y/></x></>)))/*infloop*/L:for(#1=<><x><y/></x></>;  ''  >=  /x/g ; <x><y/></x> /= <y><z/></y>) var __count__ = *, __noSuchMethod__;");
tryItOut("M:if([]) {continue M;export __proto__; } else  if (__iterator__|=window) var prototype;");
tryItOut("/*for..in*/for(var [prop, set] =  /x/  in <x/>) {gc() }");
tryItOut("L: /*for..in*/L:for(var __count__ = [11,12,13,14].filter in window) {}var __parent__ = *;");
tryItOut("{gc() }");
tryItOut("if(null(<x><y/></x>).*.throw(<y><z/></y>.@foo)) {__noSuchMethod__ = @foo.prop, __noSuchMethod__ }");
tryItOut("yield;{}");
tryItOut("return {};");
tryItOut("export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in window) break ;");
tryItOut("{return <x/>; }");
tryItOut("__parent__ = -3/0, __iterator__; const prop;");
tryItOut("L: {return this; }");
tryItOut("switch(function(y) { yield y; yield <><x><y/></x></>;; yield y; }(+<x><y/></x>)) { default: break; case  /x/g : case 8: if((__count__ = {})) let (__iterator__, __parent__) { throw [1]; }break; /*infloop*/for(/*infloop*/M:for(__proto__; <y><z/></y>; [z1]) {gc() }; prototype\n; (new (new Function)())) {prop = __parent__;{} }break; export *;break; case 8: {throw *\n }(prototype + <><x><y/></x></>);break; case 6: break; case (({__parent__: this.__lookupGetter__(\"__iterator__\")}).__defineSetter__(\"__count__\", prop = <><x><y/></x></>)): {}case 3: export __noSuchMethod__;case 1: yield;break;  }");
tryItOut("let ( set __iterator__ __iterator__ (__iterator__) { return new ((()()).watch)(RegExp(function ([y]) { }, *), 0x99) }  = (new (eval(\"({a2:z2})\", 0))(@foo.propertyIsEnumerable(\"prototype\"), x::prop)())) { ; }");
tryItOut("L: ;");
tryItOut("L:switch(constructor.x::__count__) { default: yield <y><z/></y>;break;  }");
tryItOut("{L: var __noSuchMethod__ = __noSuchMethod__;throw 0.1;/*for..in*/for(let __count__.prototype in ((undefined)(window.valueOf(\"number\")))){return; } }\nlet (constructor = ({constructor: [15,16,17,18].sort([1,2,3,4].map,  \"\" ) }), prop = [1,2,3,4].map) { /*infloop*/while(<><x><y/></x></>)__proto__; }");
tryItOut("if(prototype) {throw __proto__; } else let __iterator__ = false;");
tryItOut("with(<bbb xmlns:ccc=\"( \"\"  .@*:: this)\"><ccc:eee></ccc:eee></bbb>.*)const __count__;\nvar __proto__;\n");
tryItOut("/*infloop*/do {let constructor, __iterator__ = <y><z/></y>; } while(((1 for (x in [])).propertyIsEnumerable(\"__proto__\"))); const __count__;");
tryItOut("continueL");
tryItOut("(true);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in function ([y]) { }) function  __proto__ (__count__) { \nreturn prototype; } ");
tryItOut("do gc() while((undefined) && 0);");
tryItOut("switch(window) { case 2: export *; }");
tryItOut("new <x><y/></x>( \"\" , <><x><y/></x></>);\n/*infloop*/while(({__count__: <x><y/></x>}))yield;\n");
tryItOut("L: { }");
tryItOut("throw StopIteration;");
tryItOut("{{/*infloop*/L:while( /x/ ){yield;{} } }return new *::*(<x/>,  '' ); }");
tryItOut("yield *::*;\nlet (prototype =  /x/ )\t { switch(<x><y/></x>) { default: break;  } }\n");
tryItOut("return <>((<x/>)[<x><y/></\tx>]) ? __parent__ & window : ({ set __iterator__(__count__, __count__) { {} }  })</>;");
tryItOut("L: {var __count__ =  \"\" , __proto__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = @foo >>>=#2=({__iterator__: this.__defineGetter__(\"constructor\", <ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd>)}) in  /x/g ) {/*infloop*/while((__iterator__.__defineSetter__(\"[,,z1]\", ({}).hasOwnProperty)))return <x><y/></x>;export *; }");
tryItOut("[1,2,3,4].map");
tryItOut("/*infloop*/M:for(gc(); (new this()); this.__defineSetter__(\"__noSuchMethod__\", /a/gi)) {with([prototype].sort(({}).hasOwnProperty)\t)let __iterator__;let __noSuchMethod__ = 1.3; }");
tryItOut("/*infloop*/M:for(let ({ __parent__: __count__, __count__\f: __proto__ }) = __iterator__ = __noSuchMethod__; ({prop: 1e-81,  set __parent__ __parent__ (__parent__, __noSuchMethod__)__noSuchMethod__ }); eval(\"gc\", constructor)) throw 0/0;");
tryItOut("export __count__");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("if(window) {yield;( /x/g ); } else  if (('fafafa'.replace(/a/g, (-0)))) return  '' ;");
tryItOut("let (({ __proto__: ({ constructor: __proto__ }), __noSuchMethod__: __count__ }), __noSuchMethod__ = window) { while(((gc).call([,],  '' , <x/>) in [1]) && 0)(function ([y]) { }); }");
tryItOut("yield;");
tryItOut("let (__noSuchMethod__) { L:with({prop: __iterator__.__noSuchMethod__ getter= 'haha'.split}){} }");
tryItOut("/*infloop*/for(__proto__; (((*)[-3/0])(function ([y]) { }[true], <x><y/></x>)); null.eval(<x><y/></x>)) {/*infloop*/do {continue M; } while(#1=[#1#]); }");
tryItOut("if([11,12,13,14].some) gc else do return; while((<x/>) && 0);");
tryItOut("return;");
tryItOut("try { yield; } catch(__iterator__) {  /x/  } {}");
tryItOut("do while((( ''  & prop(__iterator__.( /x/  for each (prototype in <><x><y/></x></>))))) && 0)with(*){__iterator__; } while(((__parent__) = (new Array(this, <x/>))) && 0);");
tryItOut("with({}) { break ; } ");
tryItOut("if(yield;) { if (prop.(<y><z/></y>).constructor >>>=( /x/  / [z1,,])) {return;\nfunction(y) { yield y; return;; yield y; } } else return;}\nyield;\n");
tryItOut("if(let __parent__) {yield;throw <><x><y/></x></>; } else  if (({__proto__: __proto__.setter,  get __noSuchMethod__ __count__ (constructor)prop = window })) yield; else { }");
tryItOut("/*infloop*/for(__parent__ = (~#1# ? false : <><x><y/></x></>);  \"\" ; #3={a:#3#}) /*infloop*/M:for(var __proto__ = 0.1; <x><y/></x>; [,,]) prototype;");
tryItOut("if((p={}, (p.z = __count__-- ^= window > null)())) {yield  '' ;<x><y/></x> }");
tryItOut("/*for..in*/)/*infloop*/while(this){<><x><y/></x></>var __iterator__ = null, __parent__; }");
tryItOut("if(new Function(@foo.propertyIsEnumerable(\"prop\"))) {\ngc()__noSuchMethod__, constructor = (function ([y]) { })(); } else  if ((((__count__.__count__) ? __noSuchMethod__.prop = (<y><z/></y>.hasOwnProperty(\" '' \")) : ; + (p={}, (p.z = this)())) instanceof new window().__lookupSetter__(\"__proto__\"))) if(()) prop; else export get; else ;");
tryItOut("with({__proto__: <y><z/></y>})<><x><y/></x></>\nlet(__noSuchMethod__ = (function () { yield 5.0000000000000000000000.eval( '' ) } ).call(this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__).__defineSetter__(\"constructor\", function (prop) { yield  \"\"  } ), )) { with({}) { return (__proto__ = <y><z/></y>.watch(\"__count__\", (({}).__lookupGetter__).call)); } ");
tryItOut("gc()");
tryItOut("M:if((<x><y/></x> - <x/>.__defineGetter__(\"__parent__\", Math.sin))) { if ((gc)((<><x><y/></x></>.isPrototypeOf((function ([y]) { })())), null).prototype = \n1.3) gc() else {<x/>; }}");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ in ({ __count__: [prop, __iterator__, x::prototype, __parent__, ] }) = prop([z1,,])) /*infloop*/do {yield;gc() } while(constructor %= <y><z/></y>);");
tryItOut("L: {function (constructor) { return 033 }  }");
tryItOut("{M\t:if(undefined) { if (1e4) {var __proto__;{} }} else continue ; }");
tryItOut("return;");
tryItOut("/*for..in*/M:for(let constructor in <x><y/></x>) {{} }");
tryItOut("false;");
tryItOut("L:with(typeof <x><y/></x>)throw *::*;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(*) { if ((eval(\"throw <\\tx><y/></x>;\", (this.__defineSetter__(\"prop\", Function))))) let prototype = <><x><y/></x></>;} else {var __iterator__ = 1.3; const __proto__; }");
tryItOut("{{var constructor, constructor = undefined; } }");
tryItOut("__parent__;\n{}\n\n/*infloop*/for(let ({ __count__: set }) =  /x/g  < <><x><y/></x></>.__lookupGetter__(\"__count__\"); __iterator__ /= function::__count__; @foo > window ? prototype :  /x/g .valueOf(\"number\")) {; }");
tryItOut("with({__iterator__: new RangeError(constructor.__defineGetter__(\"prop\", 'haha'.split), <y><z/></y>)})/*for..in*/for(var __count__ in ((function  prop (prototype) { return true } )(false.\fyoyo(<x><y/></x>))))gc()");
tryItOut("if((this.zzz.zzz)) { if (eval(\"if(#3={a:#3#}) { } const prop;\", new (window)(__iterator__))) {return;do {4.;throw <><x><y/></x></>; } while((1e+81) && 0); } else }");
tryItOut("for(let y in []);");
tryItOut("{if(new ({}).hasOwnProperty()) {; } }");
tryItOut("/*for..in*/L:for(let x::prototype(let (__proto__ = [1], __iterator__ = <y><z/></y>.valueOf(\"number\")) ((function ([y]) { })()).call(( \"\" )[<><x><y/></x></>], @foo)) in ((gc)(let (__noSuchMethod__, prop = (yield [,])) let (prop, <x><y/></x> =  \"\" ) 1.3))){__noSuchMethod__ = prop; }");
tryItOut("/*for..in*/for(const __count__ = new ((new Function(\"export __count__;\")))((3.141592653589793)(<><x><y/></x></>) / this[3]) in ((__parent__)[<x/>])) {export __noSuchMethod__; }");
tryItOut("/*for..in*/for(var prototype in (((this.__defineSetter__(\"let\", /a/gi)).watch)(__iterator__))){return;gc() }");
tryItOut("/*infloop*/while([z1,,] >>  /x/g )if(__proto__) {return; } else {return #1=[#1#];yield  /x/ ; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __count__ = (<x><y/></x>.(<y><z/></y>).constructor =  /x/ ) in window = 3.141592653589793.hasOwnProperty(\"__count__\")) export *;");
tryItOut("with({}) { gc() } \n");
tryItOut("return\n/*infloop*/do var __noSuchMethod__, prototype; while([1,2,3,4].map);");
tryItOut("/*infloop*/while((<y><z/></y> if (*::*)))break ;");
tryItOut("/*for..in*/for(const [prop, getter] = (<x/> @ true).valueOf(\"number\")-- in String()) prototype = __proto__;");
tryItOut("/*infloop*/do {__parent__ } while((new (window)(0.1, __noSuchMethod__)));");
tryItOut("/*infloop*/while([z1]){(false);; }");
tryItOut("/*for..in*/for(let ({ __proto__: __iterator__ }) in (<><x><y/></x></>.__count__)) if( /x/g ) continue ; else {export *; }");
tryItOut("/*for..in*/for(const prototype = ((/a/gi).call(<x><y/></x>.(*), )) in .2) {return; }");
tryItOut("with({}) let(__parent__ = eval(\"()x><y/ ></x>\", (-0))) ((function(){this.zzz.zzz;})());");
tryItOut("try { return false; } finally { 3.141592653589793; } \n@foo;\n");
tryItOut("/*infloop*/for((new Function().hasOwnProperty(\"__count__\")); (uneval((3 :: prop))); ({ prototype: __proto__ }) = window <= __proto__) ;");
tryItOut("{/*infloop*/do {return 3;*; } while(<x/>.__iterator__); }");
tryItOut("yield true");
tryItOut("let(prototype, Math.sin = true) { throw StopIteration;");
tryItOut("{} const constructor;\nreturn 3/0;\nexport prototype;\n\n");
tryItOut("/*for..in*/M:for(var __iterator__ = RangeError() in new /a/gi((1e4 for (constructor in <y><z/></y>)))) ({}).__lookupGetter__");
tryItOut("/*for..in*/for(const [__parent__, __count__] = [] in *::*) <x><y/></x>;");
tryItOut("/*for..in*/for(const [prototype, __iterator__] = *::*.__lookupGetter__(\"prototype\") in null) {export *; }");
tryItOut("/*for..in*/for(const [__iterator__, prop] = prop = @foo in [,,z1]) export *;");
