tryItOut("/*infloop*/L:for(let constructor; (new  '' (false,  /x/g ) && eval(\"#1#;\", window)); (++ \"\" )) var __count__ = 0.1;");
tryItOut("/*infloop*/for(var prop; (constructor)(*::*, null) |= <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; ++[15,16,17,18].some(function () { yield false } ,  \"\" )) var prototype = false, __count__ = @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((constructor) in  '' .constructor = @foo instanceof <x><y/></x>\f) {{} }");
tryItOut("var __noSuchMethod__, constructor;");
tryItOut("do {break L; } while(( \"\" ) && 0);");
tryItOut("/*for..in*/for(let yield 'fafafa'.replace(/a/g, default: break; ) in __noSuchMethod__ =  '' ) M:with({__iterator__: yield true |= undefined ? __iterator__ : window})continue ;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("yield __parent__%=true;");
tryItOut("let (__parent__ = [z1,,]) { <x><y/></x>; }");
tryItOut("/*infloop*/L:for(4.; __proto__.constructor = (new (Math.pow)(undefined, <><x><y/></x></>)); __parent__) { }");
tryItOut("if(({prop setter: function ([y]) { } })) { if (1.2e3)  else {return;'haha'.split }}");
tryItOut("{;\nyield this;\n/*\n*/ }\n/*infloop*/M:for((Function() <<= (p={}, (p.z = window)())); false; (new [1,2,3,4].map(__noSuchMethod__ = #1#, false))) export *;");
tryItOut("(yield <x/>.constructor) = __proto__;");
tryItOut("/*for..in*/for(prop in @foo.__lookupGetter__(\"__proto__\")) continue ;");
tryItOut("/*for..in*/M:for(let __proto__ in (((<x><y/></x>).__defineSetter__)(<x><y/></x>.(this)))){<><x><y/></x></>(-0); }");
tryItOut("with({}) { let(prototype, __noSuchMethod__ = *) ((function(){return;})()); } ");
tryItOut("with(<xxx>{prototype}</xxx>){yield; }");
tryItOut("yield this[ /x/g ].__lookupGetter__(\"prop\");");
tryItOut("try { let(__iterator__) ((function(){yield;})()); } catch(prop if <><x><y/></x></>.@*.__lookupGetter__(\"__count__\")) { throw StopIteration; } catch(constructor if (function(){__iterator__ = constructor;})()) { return prototype = <x/>; } try { ; } catch(constructor if null) { throw false; } catch(__proto__) {  } ");
tryItOut("{gc()throw @foo; }");
tryItOut("if(false.__iterator__) {if(undefined) {yield; } }");
tryItOut("/*for..in*/for([prototype, set, prop] in ((function(y) { yield y; return;; yield y; })(__iterator__ = new (@foo)(this, undefined).unwatch(\"__proto__\"))))return;");
tryItOut("M:switch((({prop: ({__noSuchMethod__ setter: function /*\n*/() { export *; }  }), __count__ setter: function  __count__ (prop) { return <x/> }  }))) { default: break; yield -0;break; break;  }");
tryItOut("switch([1,,]) { case (prototype = (true.eval((-1)).hasOwnProperty(\"__proto__\"))).propertyIsEnumerable(\"__parent__\"): break; default: with({__noSuchMethod__: __proto__})prototypeif(new (window)([[]])) {return <x/>;return; } else  if (#1= /x/g ) { /x/ ;break M; }break;  { yield (window || [,]) }  const __count__;break; case 3: break; case 8: case constructor .@x:: (__proto__ = prop): L: (3.141592653589793);break; case 9:  }");
tryItOut("let __count__;");
tryItOut("/*infloop*/L:do  /x/g ; while(constructor = ({ __count__: x::__iterator__, prop: [, ({ prop: ([), , ], __noSuchMethod__: __parent__ })] }));");
tryItOut("this.zzz.zzz;");
tryItOut("if(__noSuchMethod__.(<><x><y/></x></>.valueOf(\"number\"))) gc() else  if ('fafafa'.replace(/a/g, (1 for (x in []))).eval(+ '' )) {(@foo); }");
tryItOut("(constructor) = prop;");
tryItOut("{prop }\nL: {/*infloop*/while(<><x><y/></x></>){yield <x><y/></x>;__count__ = true; } }\n");
tryItOut("export *;gc()");
tryItOut("(uneval(false))\nbreak L;");
tryItOut("/*for..in*/for(let [prototype, prop] = [prop = @foo].map(/*\n*/(({ get constructor constructor ()({}), __count__ getter: (((4.).watch).apply).call })).__defineSetter__) in (window.propertyIsEnumerable(\"__parent__\"))) yield window");
tryItOut("M:with({__count__: @foo.watch(\"__proto__\", function(q) { return q; })}){continue M; }\nL:with(*::*)var prototype = (undefined)[*::*];\n");
tryItOut("");
tryItOut("/*for..in*/for(__count__ = true in window ||  '' ) {let (__noSuchMethod__) { return; } }");
tryItOut("export __proto__;\n\n");
tryItOut("/*for..in*/for(var __parent__ in constructor.__iterator__ getter= function () { yield __noSuchMethod__ < <x><y/></x> } ) {}");
tryItOut("prop = 1e81;");
tryItOut("{\f }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = Object(<x><y/></x>) in @foo) {__noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let * in return) {1e81;switch(('fafafa'.replace(/a/g, ({}).hasOwnProperty))) { case 4: switch(<y><z/></y>) { case 3: <x><y/></x>;break; case 4: ;break; default: throw @foo;break; case 3: throw *;break; case 1: break; case <><x><y/></x></>: break;  }break;  } }");
tryItOut("{throw <><x><y/></x></>;var __proto__ = -0, __noSuchMethod__; }");
tryItOut("/*for..in*/for(let constructor in (throw *) ? <x><y/></x>.(<>__noSuchMethod__</>) : (prop for (__noSuchMethod__ in true)\f)) L: {(*);break M; }");
tryItOut("L: let prop, __noSuchMethod__ = 4.");
tryItOut("/*infloop*/while((++#1#)(.)){(false) }");
tryItOut("while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0){yield;; }");
tryItOut("let prop = true, constructor;\n__iterator__ =  \"\" \nconst __noSuchMethod__;\n");
tryItOut("export *;");
tryItOut("return;");
tryItOut("return\n;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(let prototype; prop.prop getter= 'haha'.split; ((yield window)) in <x/>.__count__.__noSuchMethod__ = 3) {this }");
tryItOut("if(.2) {argumentsexport *; } else gc()");
tryItOut("M:with(<x><y/></x> > @foo){ }");
tryItOut("gc()\n");
tryItOut("const __count__\n");
tryItOut("if(__parent__) { if (@foo) {var __count__, __noSuchMethod__ = *::*; } else (<x><y/></x>);}");
tryItOut("if(return) { if ('fafafa'.replace(/a/g, ([[1]]).watch).__iterator__ = __noSuchMethod__) {/*infloop*/do {export \n__noSuchMethod__;; } while(false); }} else {export __proto__;let (__iterator__) { M:with({prototype: window}){gc()yield; } } }");
tryItOut("return;\n/*for..in*/for([__noSuchMethod__, prop] = __iterator__ in new gc( \"\" )) {}\n");
tryItOut("{L: {throw false;gc() }with(({}).__lookupGetter__)export *; }");
tryItOut("let (__count__ = 1.2e3, __iterator__) { /*for..in*/for(let prototype in (((new Function(\"\")))(this))){prototype = *; } }");
tryItOut("prototype = prop;");
tryItOut("L: return function ([y]) { };");
tryItOut("if((prototype =  \"\" \n.hasOwnProperty(\"prototype\"))) const prop = -0;\nreturn __proto__;\n else  if (1e4) {return [z1];/*for..in*/for(prototype = null in this) ; } else {__count__ = window; }");
tryItOut("/*for..in*/for(let __count__ in ((prop =  ''  for each (__count__ in #1#) for (prototype in undefined)))) yield;");
tryItOut("with({__iterator__: (__noSuchMethod__.__defineSetter__(\"prototype\", function (__iterator__) '' ))}){}");
tryItOut("/*for..in*/for(var [__count__, prototype] = ~1.2e3.propertyIsEnumerable(\"__count__\").propertyIsEnumerable(\"__iterator__\") in new [null for (constructor in undefined)]( /x/g  &= @foo, 1e4)) {export *;return *; }");
tryItOut("if(this) ({}).hasOwnProperty else  if (*) let __parent__ =  /x/ , prop;");
tryItOut("while((1.3) && 0){yield; }");
tryItOut("with({prop: })/*infloop*/for([15,16,17,18].sort((new Function(\"(<><x><y/><\\n/x></>).__defineSetter__\")), this);  /x/g .__defineSetter__(\"prop\", function(q) { return q; }); prototype.constructor = -0)  get __iterator__()[ /x/g  if ([[1]])]");
tryItOut("/*infloop*/M:while(#0=({__iterator__: <x/>}))yield window;");
tryItOut("/*infloop*/do {/*infloop*/for(-1;  '' ; window) /a/gi } while((Math.sin).call([new function () { yield *::* } ( /x/ , prop).constructor = *.__lookupGetter__(\"__count__\") if (3/0)], this.zzz.zzz));");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*for..in*/for(__proto__ in * >> window) if(({a1:1})) { if (this) {__iterator__ = <x/>, __proto__ = <><x><y/></x></>; } else {export prototype; }}");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x><y/></x>.@foo) { if ([prototype].map(({}).hasOwnProperty)) {const __noSuchMethod__ = true;(case 6: ([[1]]);break; ); }} else var __count__, __proto__;\n([[1]]);\n");
tryItOut("{function(y) { yield y; yield;; yield y; }\ngc()\n }");
tryItOut("return;var __count__;");
tryItOut("/*infloop*/for(new (1e4)(); <x><y/></x> |= prototype;  ''  @  \"\" ) {return 0.1;export __iterator__; }");
tryItOut("M:with((function ([y]) { })() * @foo <<= ((__parent__ if ( /x/ ))))L:if(constructor = ([1,,]--)) {argumentscontinue M; } else ;");
tryItOut("throw StopIteration;");
tryItOut("{do {break ; } while((constructor) && 0);gc() }");
tryItOut("with(({ set __noSuchMethod__([, ]) { gc() } ,  set prototype __proto__ (({ prop: prop }))__iterator__ }))({a1:1});");
tryItOut("/*infloop*/L:for(const constructor; __count__ = ({ __iterator__: ({ __count__: ({ __proto__: __count__, __parent__: __iterator__ }) }) }); [11,12,13,14].filter) {M:if(__iterator__) {yield; } else  if (true.watch(\"__proto__\", /a/gi)) {return 4.; }yield; }");
tryItOut("export *;");
tryItOut("({a2:z2});\n(@foo);\n");
tryItOut("__parent__");
tryItOut("if((__count__.__noSuchMethod__ = undefined).watch(\"__iterator__\", function(q) { return q; })) {continue L;return;\t } else  if (((yield new window(prototype, (function ([y]) { })())))) {/*infloop*/L:for((<y><z/></y>.isPrototypeOf(-0).watch(\"__count__\", Math.sin)); (#2=<x><y/></x>); window = (this.__lookupGetter__(\"__noSuchMethod__\"))) \t{/*for..in*/for(const constructor = this in  /x/ ) {continue ;const __proto__, __iterator__ = <x><y/></x>; } } }");
tryItOut("/*for..in*/for(let prop = constructor.__iterator__ = <><x><y/></x></>.yoyo(this(<x><y/></x>, <y><z/></y>)) in <x><y/></x>) /*for..in*/M:for(const [prop, __proto__] = [[]] in null) let constructor = #1#, function::__count__ = 1e+81;");
tryItOut("with(((\f{__proto__ getter: function(q) { return q; } }))((eval(\"*::*\", <x><y/></x>)), ))__proto__\n");
tryItOut("/*infloop*/L:for(const [] = let (({ prototype: ({ __proto__: ({ __parent__: ({ __proto__: let }), constructor: __parent__ }), constructor: __iterator__ }), __iterator__: __iterator__ }), prop = this) (p={}, (p.z = 'fafafa'.replace(/a/g, gc))()); constructor.__count__ setter= eval; (this.__defineGetter__(\"constructor\", gc) | <x/> .@ ({a2:z2}))) __count__ = <y><z/></y>");
tryItOut("({}).hasOwnPropertyvar __proto__, __count__\t;");
tryItOut("/*infloop*/L:for(__count__; this; this) export *;");
tryItOut("case 8: break; default: \nthrow false;\n");
tryItOut("/*infloop*/L:for(let __proto__; (yield __proto__ = #1#); (uneval(<x/>))) {break M;( /x/g ); }");
tryItOut("{export __proto__;return 0/0; }\nswitch(__count__ = __parent__) { default: break;  }\n");
tryItOut("/*infloop*/L:for(let prop; (prop = __proto__); yield <><x><y/></x></>) {while((<x><y/></x>) && 0){{} } }");
tryItOut("/*for..in*/for((__count__) in \nthis) {var __proto__ = <x><y/></x>;return; }");
tryItOut("M:if( '' .watch(\"__proto__\", ({}).__lookupGetter__)) { if ((this.__defineGetter__(\"__parent__\", *::*))) yield;} else let __parent__;");
tryItOut("function  __iterator__ (prop, __proto__) { yield true } \ntrue['__iterator__'] ");
tryItOut("if( '' ) throw 3; else  if ( ''  >>> window) {throw <><x><y/></x></>; } else {let __iterator__;export *; }");
tryItOut("if([({ __count__: [] }), , ].__count__ getter= (({__parent__ getter: ([1,2,3,4].slice).call }))) /*infloop*/for(const __iterator__; *; #1=window) __iterator__ = new (__iterator__)([]) else {Math.pow/*infloop*/while(-0)yield; }");
tryItOut("{export *; }");
tryItOut("if(__parent__) return <x/>; else  if (<><x><y/></x></>) {; }");
tryItOut("if('fafafa'.replace(/a/g, /a/gi).__lookupGetter__(\"__noSuchMethod__\")) { if (({ __noSuchMethod__: ({ prop: __noSuchMethod__ }), __proto__: ({ constructor: __count__, prop: prop }) }\f) = yield  /x/ .*) {let __parent__ = [,,], __parent__; }} else {return *::*; }");
tryItOut("M:with((((function () { yield __iterator__ } ).call).call(<><x><y/></x></>, <x><y/></x>)) ^= ([null for each (__iterator__ in <><x><y/></x></>)])){prototype = __noSuchMethod__, __count__;\fyield window; }");
tryItOut("/*\n*/; const __parent__;");
tryItOut("switch(((false *= let (__noSuchMethod__ = arguments) prototype) ? -1.unwatch(\"__parent__\") : *::*)) { default: case this.__defineSetter__(\"__count__\", (1 for (x in []))): while((<><x><y/></x></>.isPrototypeOf( /x/ )) && 0){const prototype;; }const __count__, __proto__;case (({ set function::__parent__() { __noSuchMethod__ } , prototype getter: function  {} (__iterator__) { return <x><y/></x>; }  })): __noSuchMethod__|= /x/ , constructor;yield __proto__;break;  }");
tryItOut("{if(0 >> undefined.__defineSetter__(\"__iterator__\", new Function)) export *;export *; else  if (window @ <x/>) let __proto__;return; }");
tryItOut("let(__proto__) { with({}) { for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("L: var __noSuchMethod__ = @foo;");
tryItOut("/*infloop*/for(let __iterator__; __count__; <><x><y/></x></>) ;");
tryItOut("L:if(<><zzz>()</zzz></>) { if (__noSuchMethod__ = @foo ?  \"\"  : @foo) {return; }} else return window;");
tryItOut("{default: break ;break; return <y><z/></y>; }");
tryItOut("/*for..in*/for(let (prototype = false).throw(this.eval(function(id) { return id }))['__proto__'] in (((yield (-3/0.__defineSetter__(\"constructor\", <x><y/></x>))))((p={}, (p.z = {})())[new (@foo)([], <x><y/></x>)]++[-((/a/gi).call(prototype,  \"\" , <><x><y/></x></>))]))){yield <x/>;throw __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.constructor in ((* for each (constructor in (-1)))).hasOwnProperty(\"prototype\") << <> try </>) {L:if( '' ) { if (@foo) { } else {export *; }} }");
tryItOut("throw yield;");
tryItOut("if( /x/g ) { if (prop) ;} else (<x><y/></x>);");
tryItOut("/*infloop*/for(var constructor; ( /x/  = <x><y/></x>).isPrototypeOf(undefined); __noSuchMethod__ = (prop = <y><z/></y>)) /*infloop*/do throw (-0); while(@foo);");
tryItOut("switch(('fafafa'.replace(/a/g, eval)).isPrototypeOf(((p={}, (p.z = 1e-81)())))) { case -3/0: if((new this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)(constructor, (return)))) {export *; } else *;break; case 2: break; break; case <><zzz>new (new Function)() <= true[<x/>]</zzz></>: break; default: case 7:  }");
tryItOut("return Iterator( \"\" ).eval(Array());");
tryItOut("for(let y in [5,6,7,8]) /*for..in*/for(__parent__(<y><z/></y>) in <><x><y/></x></>) {continue ;yield; }");
tryItOut("while((~1e-81) && 0);");
tryItOut("L: if(-- \"\" ) (null); else {__noSuchMethod__ = __proto__; }");
tryItOut("/*for..in*/for(var __count__.__iterator__ in this) while((this) && 0)((-1));");
tryItOut("");
tryItOut("/*for..in*/L:for([__parent__, __count__] =  /x/g  in <>\t<x><y/></x></>) {yield  '' ;[z1,,]; }");
tryItOut(";\n{}\n");
tryItOut("do {this.zzz.zzz; } while(((this.__defineSetter__(\"__parent__\", (this).__defineSetter__))) && 0); const __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if([<><x><y/></x></>]) yield; else {(__proto__);\rexport __parent__; }");
tryItOut("const __parent__ = __parent__; const __iterator__\n");
tryItOut("do let __noSuchMethod__; while((window) && 0);");
tryItOut("/*for..in*/for(const constructor in ((function  constructor () { yield this.__defineGetter__(\"get\", (1 for (x in []))) } )(@foo.\nthrow(null))))/*for..in*/for(const [__iterator__, prototype] = this.__defineSetter__(\"constructor\", prop) in ({__count__ setter: gc, window, (*)() })) {;(undefined); }");
tryItOut("prototype = <x/>");
tryItOut("if(('fafafa'.replace(/a/g, new Function))) {break ;export *; } else  if (([undefined].filter((*::*).__defineSetter__))) function (__proto__) { yield  /x/g  }  else {/*for..in*/for(prop = undefined in ({a2:z2})) {this } }");
tryItOut("\fif(undefined) { if (1.3) {yield;return continue L; }} else {export *;(({}).hasOwnProperty).call }");
tryItOut("L: while((let (prop, constructor = @foo) *::*) && 0)yield;");
tryItOut("break M;yield;yield this;");
tryItOut("L: false;");
tryItOut("if(({ __noSuchMethod__: __count__ }) =  /x/g .__parent__) {var __iterator__ = <x><y/></x>; } else  if (new (undefined)(const __parent__ = [1];)) {var __noSuchMethod__; } const __parent__;");
tryItOut(";");
tryItOut("this.zzz.zzz;");
tryItOut("while((*::*) && 0){continue ; }\n{return; }");
tryItOut("return (eval)(<x><y/></x>);");
tryItOut("return\n");
tryItOut("with({prop: function(id) { return id }})throw  '' ;");
tryItOut("M:if({with(<x><y/></x>)export __proto__;(3/0).__defineSetter__ } >>> #0=({prop: new (<x><y/></x>)([[]], <><x><y/></x></>)})) { if ((prototype for (__noSuchMethod__ in 0/0))) {gc()<x><y/></x>; }} else break L;");
tryItOut("/*infloop*/for(((uneval(<y><z/></y>))); window; ((p={}, (p.z = new (/a/gi).call(((yield  /x/ )), )((<x><y/></x>)(__noSuchMethod__)%=((prototype).call(3, null)),  ''  -  '' ))()) && (this.zzz.zzz) != <><x><y/></x></> ? window : * <=  /x/g .eval(*))) while((<x/>) && 0);");
tryItOut("/*infloop*/for(<x><y/></x> << constructor; <zzz> /x/ </zzz>; [,,]) let __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__(*::*) in __count__ = this.hasOwnProperty(\"__parent__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in this) {const __noSuchMethod__ = this; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("L: {new Number(*::*);while((({ set __count__ constructor () { function (__noSuchMethod__, function::prototype) { yield  \"\"  }  }  })) && 0){return __proto__; } }");
tryItOut("/*for..in*/for([function::__count__, __count__] = __iterator__.prototype = window++ in __count__) {var __noSuchMethod__; }");
tryItOut("{; }");
tryItOut("if( /x/g ) const prototype = <y><z/></y>, prop = prototype; else  if (__iterator__) {var __count__;([,]); } else false;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in null) return <x/>;");
tryItOut("/*for..in*/for(const prop = <><x><y/></x></>, __count__ =  /x/  in (prototype.constructor)) {return; }");
tryItOut("__parent__ = __parent__;");
tryItOut("this.zzz.zzz");
tryItOut("/*infloop*/while(prop.__defineSetter__(\"__proto__\", 'haha'.split)){export __iterator__; }");
tryItOut("let(prop = <x><y/></x>.__lookupSetter__(\"prototype\"), __noSuchMethod__ = window) { let(prop = false, __parent__ = -1) ((function(){export *;})());");
tryItOut("/*infloop*/for((eval(\"__count__\", undefined) >>>=__parent__.prototype setter= __parent__|=*::*); ((null\n)['fafafa'.replace(/a/g, new Function).*])[yield (<x><y/></x>.__proto__ = __iterator__)]; <y><z/></y>) {throw StopIteration;/*infloop*/for([<x/> if (false)]; eval(\"( '' --)\", this.__defineGetter__(\"prop\", (function(y) { yield y; return;; yield y; }).apply)); ([z1,,].isPrototypeOf([, prototype, __count__, prop] = (true)\t.__defineSetter__([,], try {  } catch(prototype) { return this; } )))) if((<x/>).watch()) <x><y/></x>; else {(@foo); } }");
tryItOut("M:if((#0=[-3/0])) { if (yield <><x><y/></x></>) __noSuchMethod__ else export function::constructor;}");
tryItOut("L: {__parent__ = [], function::__count__ = __count__;export *; }L:with(window !== false){yield;var __count__ = *::*, __noSuchMethod__; }");
tryItOut("{/*for..in*/M:for(var __proto__ in <x><y/></x>) window;[1,2,3,4].map }");
tryItOut("if(function(id) { return id }.isPrototypeOf( \"\" )) if(eval(\"let (__iterator__) { {} }\", <y><z/></y>)) { if ( /x/g .unwatch(\"__proto__\")) var prop, __noSuchMethod__ = <x><y/></x>; else {yield;yield  '' ; }}");
tryItOut("{(__count__);prop }");
tryItOut("try { this } catch(__proto__) { yield <x><y/></x>; } ");
tryItOut("if(<x><y/></x>) {export x::__iterator__;prototype, constructor = this; } else { { return *::* } continue M; }\n/*infloop*/for(<y><z/></y> ,  /x/ ; (-null != <x><y/></x>); new Error(prop, (undefined.watch(\"__proto__\", function  __noSuchMethod__ () { return 1e-81 } )))) {return; }\n");
tryItOut("while(((new  /x/ ([,,z1], true).constructor = [1,2,3,4].map)) && 0){var prop, __noSuchMethod__;//h\n/*for..in*/M:for(let prop = <><x><y/></x></> in <x><y/></x>) {(<x><y/></x>);Math.pow } }");
tryItOut("if([z1,,]) {/*for..in*/for(let prop = this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map) in __proto__) {yield; }/*for..in*/for(const __count__ = {} in *\t) new Function } else switch(__count__.(<y><z/></y>.hasOwnProperty(\"__count__\"))) { case 6: /*infloop*/for(const __count__; new Exception(gc(), prop); ((function  __count__ (constructor, __noSuchMethod__) { return this } )(false,  /x/g ))) {/*for..in*/for(var [__count__, __proto__] = constructor in true) {export constructor;__count__ = [[1]], constructor; } }break; gc()break;  }");
tryItOut("if(+constructor.@*) { if (<x/>) let = <><x><y/></x></>;} else {var __proto__ = (-1), __parent__; }");
tryItOut("{(<><x><y/></x></>)\n\rif(\nthis) var constructor, prop; else  if (this.zzz.zzz) ({}).__lookupGetter__ else {} }");
tryItOut("with({function::__iterator__: (yield false)})continue M;");
tryItOut("");
tryItOut("{;; }");
tryItOut("__noSuchMethod__;");
tryItOut("with({}) /*infloop*/while(({ prop: constructor, __noSuchMethod__:  }) = this.zzz.zzz)L:while((__proto__) && 0){( \"\" ).callbreak ; }");
tryItOut("let (constructor) { if(<\fx><y/></x>) gc() }\n");
tryItOut("switch(({ __noSuchMethod__: ({ prop: [, ({ __parent__: ({ __proto__: __count__ }), prop: [] }), ({ constructor: ({ prototype: __noSuchMethod__, prop: prototype }), __proto__: __proto__ })], __parent__: ({ __noSuchMethod__: ({ __parent__: __iterator__, __noSuchMethod__: ({ __proto__: __proto__ }) }), __parent__: ({ __count__: ({ __parent__: __noSuchMethod__ }), __proto__: ({ prop: __parent__ }) }) }) }), __parent__: [] }) = ({ __count__: prototype })) { default: /*infloop*/L:for(x>;  \"\" ; .2) (this);case prop.@foo++: break; case 6:  }");
tryItOut("L: export *;");
tryItOut("/*for..in*/for(__iterator__ =  /* Comment */({a1:1}) in (yield [(eval(\"yield [z1];\", <><x><y/></x></>))].map(function  __iterator__ (__parent__, prototype) { export *; } ))) {/*for..in*/M:for(var __count__ in ((<><x><y/></x></>.eval(this))((__noSuchMethod__.(<><x><y/></x></>++)))))L: {} }");
tryItOut("L:do {export constructor;yield  { return @foo } ; } while((false) && 0);");
tryItOut("/*infloop*/while(new <><x><y/></x></>;())while((1e-81.unwatch(\"__parent__\").__defineGetter__(\"__iterator__\", function(y) { yield y; *::*\nexport *;; yield y; })) && 0){case 0x99: throw <y><z/></y>;break; break; ;var __proto__;export __parent__ }");
tryItOut("with(())/*infloop*/for(let ({ __proto__: ({ __count__: ({ __parent__: __iterator__ }), __parent__: prop }), prop: [, , prototype, ({ prop: __iterator__ }), ] }) = (<x><y/></x>\n -=  \"\" .unwatch(\"prop\")); new (Math.sin)( \"\" ); (let (constructor = <><x><y/></x></>, prop) prototype)) yield;");
tryItOut("{ /x/  = [1,,], yield; const __iterator__; }");
tryItOut("*::*\n");
tryItOut("if(((yield __parent__ = <x><y/></x>))) {} else  if (([].__lookupGetter__(\"__proto__\").isPrototypeOf(eval(\" \\\"\\\" \", 1.3)))) {gc()var __count__, constructor; }");
tryItOut("L:switch(this) { {break M; } }");
tryItOut("/*infloop*/<x><y/></x>.(undefined)do yield; while((({__noSuchMethod__: #1=[([1].yoyo( '' ))] < ({ get __parent__() { yield ({prop: []}) }  }) })));");
tryItOut("/*for..in*/L:for(var prop = <x/> in  /* Comment */<x><y/></x>.hasOwnProperty(\"__iterator__\"\t).__lookupSetter__(\"prop\")) {M:switch(false) { case [false for (__parent__ in true)] %= eval(\";\", prototype) && <x/> === <y><z/></y>:  }let prototype\nyield; }");
tryItOut("for(let y in [5,6,7,8]) with({}) let(__proto__, prototype = __noSuchMethod__) ((function(){ for ([z1,,] in (yield )) for (__count__ in this.__defineSetter__(\"__parent__\", (<y><z/></y>).__defineSetter__)) for (__noSuchMethod__ in *)})());");
tryItOut("switch(('fafafa'.replace(/a/g, window))) { default: /*infloop*/L:do ; while(__proto__|=@foo);break; break; {}case (yield []): break; case ({prop: __noSuchMethod__ = false, __iterator__ setter: (1 for (x in [])) }):  }");
tryItOut("if(( get prototype(({ constructor: __proto__ })) { return this } )) { if (delete (@foo)) {if(false) {let prop = <y><z/></y>, __proto__; } else {var prop = ({}), __noSuchMethod__;continue ; }yield (* - __parent__); }} else {var __count__ =  /x/ , __parent__ = undefined; }");
tryItOut("/*infloop*/for(const function(id) { return id }.@*['__noSuchMethod__'] = (0.1 &= (<{__count__}><!--yy--></{__count__}>)()); ((p={}, (p.z = <> for each (prop in  '' )</>.valueOf(\"number\"))())); this.__defineSetter__(\"__count__\", (gc).apply)) {export __parent__ }");
tryItOut("/*infloop*/for(__proto__ = (Math.pow).call(*(), (<><x><y/></x></> < 0/0), constructor); __parent__ = [15,16,17,18].sort(({}).__lookupGetter__, <x><y/></x>).prototype = (#2=({__noSuchMethod__: function ([y]) { }})); new (eval)((( /x/ )([,,z1]) =  ''  &&  '' ), constructor.__proto__.@foo))  const __iterator__;");
tryItOut("/*for..in*/for([__iterator__, __proto__] = (eval(\"return;\", <x><y/></x>)) in <x><y/></x>) {; }");
tryItOut("if(<x><y/></x>) { if (window) {return  /x/ ; } else (<x/>);}__noSuchMethod__, constructor = <x><y/></x>;");
