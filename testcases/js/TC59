
tryItOut("{this; }");
tryItOut("var __count__ = true;");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in ((((new (false)(<><x><y/></x></>)) for each (__noSuchMethod__ in __noSuchMethod__) if ((<x><y/></x>[this]))))((__count__.__parent__))))with({}) for(let y in []);");
tryItOut("do {/*for..in*/L:for(const __proto__ in ((({}).hasOwnProperty)((typeof (<x/> || <><x><y/></x></>))))){{; } } } while(( /x/ ) && 0);");
tryItOut("/*for..in*/for(const [prototype, prop] = true.throw(5.0000000000000000000000) in  /* Comment */__proto__ = <><x><y/></x></>) {; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var constructor = yield undefined in (let (__parent__ = 1e4)  '' .eval(* for each (constructor in constructor)))) {continue ; }");
tryItOut("with({__parent__: <x/>.__lookupGetter__(\"prop\")}){while((default: case 7: break; ) && 0){/*infloop*/for(true; (-0); @foo) {export *; }/*for..in*/for(prototype in ((*)(null))){continue ; } }if(new function(q) { return q; }()) const __count__ = this, prototype; }");
tryItOut("if(new Object( |  /* Comment */constructor, this.__defineSetter__(\"__proto__\", <x><y/></x>))) {export __iterator__\n;if( /x/g ) {; } else  if ((<x/> = <><x><y/></x></>)) const prototype = <><x><y/></x></>; else throw 1e+81; } else  if (@foo.throw(<x><y/></x>)) /*infloop*/while(<><x><y/></x></>)__iterator__ = @foo, prototype; else {return <x/>;return window; }");
tryItOut("return <x/> <<  {  } ;");
tryItOut("(*::*)yield __noSuchMethod__;");
tryItOut("/*infloop*/for(let prop; let (__parent__ = <><x><y/></x></>, __count__)  /x/g ; ('fafafa'.replace(/a/g, <x><y/></x>))) {var constructor;yield; }");
tryItOut("L: if(({a1:1}) &&  /x/g ) {} else  if (new <y><z/></y>(window, [,])) throw this;");
tryItOut("M:switch(true) { case 9: break; default: break; \t }");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/for(let prop in <x/>) { }");
tryItOut("/*for..in*/for(const  = this.zzz.zzz in 1.2e3.@foo) {__noSuchMethod__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype.constructor in <x><y/></x>) {;case  '' :  }");
tryItOut("/*for..in*/for(const [constructor, prop] = __count__ = <><x><y/></x></> in undefined .. *) {__iterator__ = <><x><y/></x></>, prop;let prop, __noSuchMethod__; }");
tryItOut("M:with({__noSuchMethod__: (__parent__ = (__noSuchMethod__ = [[]] / __noSuchMethod__.__iterator__ = false))})/*for..in*/for(\fprop in  /* Comment */<y><z/></y>) export *;/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in this) let __noSuchMethod__;");
tryItOut("try { ; } catch(__count__ if new Object([1])) { (function (__parent__, prop) { (<y><z/></y>); } ).apply } catch(setter) { export prototype; } ");
tryItOut("if(<xxx {__proto__}=\t{<y><z/></y>} />) return;");
tryItOut("/*infloop*/L:for(*; ({prop: <><x><y/></x></> }); ({ set function::__parent__() { return const prop = null }  })) {let(prop, constructor) ((function(){yield;})());/*for..in*/L:for([__noSuchMethod__, constructor] = <x/> , <><x><y/></x></> in ((function ([y]) { })()).call(<y><z/></y>, true, <><x><y/></x></>)) {continue ;if(false) { if ( /x/g ) {export *;throw window; } else const __iterator__;} } }");
tryItOut("{; }");
tryItOut("/*infloop*/L:for(var __count__; 0/0; (__proto__ = function ([y]) { })(<x><y/></x> % .2) >>> ) {gc() }");
tryItOut("/*infloop*/while( '' )false;");
tryItOut("");
tryItOut("L:if(<><x><y/></x></>) { if (*) {new Functionconst prop; } else }");
tryItOut("/*infloop*/for(let ({ constructor: prototype, __parent__: ({ __count__: ({ __noSuchMethod__: [[__iterator__]] }) }) }) = <bbb xmlns:ccc=\"(__proto__ for each (__proto__ in __noSuchMethod__))\"><ccc:eee></ccc:eee></bbb>; (eval(\"function  __iterator__ (constructor) { const __parent__ = true; } \", (--<x/>))); [15,16,17,18].sort(gc, new Error())) /*infloop*/for(1e+81; __iterator__;  /x/ ) throw <>case 8: case @foo:  { yield <y><z/></y> } break; case 9: yield;</>;");
tryItOut("/*infloop*/for(<y><z/></y>.__defineGetter__(\"__count__\", gc); ( { export prop; } .eval(window)); 'fafafa'.replace(/a/g, [1,2,3,4].map)) const __proto__;");
tryItOut("let(prototype) ((function(){let(({ prop: each }) =  '' ) { throw __count__;})());");
tryItOut("continue ;continue ;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__proto__; (( '' ).watch(\"__proto__\", Math.sin)); (p={}, (p.z = [,])())++) {break ;; }");
tryItOut("L:if(throw <x><y/></x>; ? <><x><y/></x></> : <y><z/></y>) {throw <x><y/></x>; } else (<><x><y/></x></>).watch");
tryItOut("/*infloop*/for(__parent__; ([[1]] ? __iterator__ : __noSuchMethod__.constructor); (__noSuchMethod__.__parent__ getter= window)) {export *;return; }");
tryItOut("L:with({__noSuchMethod__: [,,] *= new (window)(1.2e3)[@foo.unwatch(\"__proto__\")]}){__count__; }");
tryItOut("switch(([((window);.watch(\"__parent__\", true))])) { case 5: try { __iterator__; } catch(constructor if (function(){{}})()) { yield; } catch(__noSuchMethod__) { yield; } case [15,16,17,18].filter(function  constructor () { yield null } , <y><z/></y>) >>>=__proto__.( /* Comment */this): L:while(( /x/g  < <x><y/></x>) && 0){let prop, prototype = <x/>; }break; default: if(<x/>) { if (<><x><y/></x></>) ;} else ({}).__lookupGetter__ }");
tryItOut("/*for..in*/L:for(constructor = @foo.watch(\"__proto__\", gc) in (function ([y]) { })()) prototype = <><x><y/></x></>, prop =  /x/g ");
tryItOut("/*infloop*/for(const __proto__; throw *; __noSuchMethod__ * <x/>.__defineSetter__(\"prototype\", (1 for (x in [])))) /*infloop*/for(new Iterator(window, null) <= <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\"); (this for each (prototype in prototype)) for each (__noSuchMethod__ in  '' ) for each (__count__ in __noSuchMethod__); (eval).apply) {export constructor;\t }");
tryItOut("with(--Function(.2)){");
tryItOut("with([11,12,13,14].some){\rthrow __noSuchMethod__;yield arguments; }");
tryItOut("for(let y in []);");
tryItOut("return 033;");
tryItOut("if(*::*) do  while((this.eval(this)) && 0);");
tryItOut("const prototype, __iterator__ = __proto__");
tryItOut("prototype =  /x/ .__lookupGetter__(\"__count__\")\n");
tryItOut("/*for..in*/for(let [__proto__, __noSuchMethod__] = window in prototype) {break L;export *; }");
tryItOut("/*infloop*/do {for(let y in [5,6,7,8]) function ()@foo{}\n/*infloop*/for(__parent__; #1#; <y><z/></y>) yield; } while((window ? ((__parent__.prop = prototype.propertyIsEnumerable(\"__noSuchMethod__\")).throw(new \n<x><y/></x>(function(id) { return id } === __parent__, this))) : [, , , , yield] = (<><x><y/></x></> .@*:: .2)));");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in constructor = __count__) {if({}) { if (<x><y/></x>) {let function::constructor;export __iterator__; }} else {gcgc() } }throw [[z1] for (__proto__ in [,,])]; }");
tryItOut("with({prop: 0}){return *::*; }\n/*for..in*/for(const __iterator__ in ({__noSuchMethod__: new (function(q) { return q; })()})) {(null); }\n");
tryItOut("for(let y in []);");
tryItOut("if(*::*.__defineGetter__(\"__proto__\", (Math.pow).call)) {continue ;return -1; } else  if (@foo | true.eval( '' ) , *.__parent__ = <x/>.@*) {let __proto__;yield;\n<x><y/></x>;\n\nexport __parent__;\n } else {if(eval(\"__parent__\", prop)) {[1,2,3,4].map } else {(1 for (x in [])) } }");
tryItOut("{break M\n }");
tryItOut("for(let y in [5,6,7,8]) /*infloop*/for(let prop; <x><y/></x>; constructor) { }");
tryItOut("\nwith({}) { let(({  if (({})): __proto__, constructor: __iterator__ }), __proto__) ((function(){this.zzz.zzz;})()); } \n");
tryItOut("/*for..in*/for(const __proto__ = (1 for (x in [])) in true.@foo) {}");
tryItOut("/*infloop*/for(let __count__; 0x99; this) const prop; const prop;");
tryItOut("return; const __parent__;");
tryItOut("M:while((try { return <x><y/></x>; } catch(prototype if window) { {} }  = this) && 0){yield __count__; const __parent__;\n<x><y/></x>;\n }");
tryItOut("/*infloop*/while(new Date(5.0000000000000000000000.yoyo(<y><z/></y>)))/*for..in*/for(let prop.__noSuchMethod__ in (([1,2,3,4].map)(__noSuchMethod__))){export function::__count__;; }");
tryItOut("let(prop, prototype) { for(let y in [5,6,7,8]) let(prototype, __proto__ = 3) ((function(){let(prototype) { gc})());");
tryItOut("/*infloop*/for(__noSuchMethod__; window | .2.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }); -1.watch(\"__iterator__\", (new Function).apply)) {const constructor = <><x><y/></x></>.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__); }");
tryItOut("export *;");
tryItOut("M:switch(__count__ = <y><z/></y>['__noSuchMethod__']) { default: case <><x><y/></x></>: const <><x><y/></x></> = <><x><y/></x></>;function  prototype (__iterator__)<><x><y/></x></>case this: case  /x/ : ;{}break; case null: break;  }");
tryItOut("do {if((-0)) { if (<y><z/></y>) {}} else const __count__, <x><y/></x>, <x><y/></x>;prop = window; } while(((<y><z/></y>.eval([,]))) && 0);");
tryItOut("do {export *;return; } while((window) && 0);");
tryItOut("with({}) { constructor = prototype; } ");
tryItOut("/*infloop*/for(const prototype; 'fafafa'.replace(/a/g, function(q) { return q; }); <x><y/></x> ? 1.2e3 : (function ([y]) { })() >> @foo.__count__) {/*for..in*/L:for(const prop in this.zzz.zzz) {; }/*for..in*/for(var [__count__, constructor] = \n /x/g  in (p={}, (p.z = yield  /x/g )())) {gc() } }");
tryItOut("if(([,,z1] > h)) {prototype; }");
tryItOut("if((function ([y]) { })()) { if (window) 'haha'.split} else { }");
tryItOut("let (__count__, prop = <x><y/></x>) { let __noSuchMethod__; }");
tryItOut("/*for..in*/for(const __count__ in (((<><x><y/></x></>).apply)(this))){return <x><y/></x>; }");
tryItOut("/*for..in*/M:for(var <><x><y/></x></>.valueOf(\"number\")['__proto__'] in ((new Function)(__count__ = #3={a:#3#}))){for(let y in [5,6,7,8]) try { (<x><y/></x>); } catch(prototype) { return; }  }");
tryItOut("");
tryItOut("return [z1];\nexport prototype;\n const __parent__;");
tryItOut("if([15,16,17,18].filter((<x/>).__defineSetter__, this)) {export *; }");
tryItOut("{L:if(({__parent__ getter: Math.sin })) {var __parent__ =  '' ;var __proto__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__(<x/>) in undefined\n) const constructor; const __parent__;");
tryItOut("L:with( /x/g )return function ([y]) { }\nthrow __noSuchMethod__;\nvar prop;\n");
tryItOut("/*infloop*/L:for(let __parent__; ((1 for (x in [])))(); new [1,2,3,4].slice()) gc() const __parent__;");
tryItOut("let (({ __count__: prototype, __proto__: [] }) = undefined.__defineGetter__(\"__iterator__\", (function::prop).apply), __proto__) { gc() }");
tryItOut("__proto__;");
tryItOut("yield\n");
tryItOut("try { return; } finally { for(let y in []); } ");
tryItOut("{/*infloop*/for(var prop; <><x><y/></x></>; <><x><y/></x></>) return;var __noSuchMethod__ = prototype, prop; }");
tryItOut("return @foo.hasOwnProperty(\"prop\");");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/M:for(let [__count__, __parent__] = (__noSuchMethod__.__proto__ setter= *) in *::*) { }");
tryItOut("throw arguments\nyield;");
tryItOut("let (prop = arguments) { const constructor; }");
tryItOut("/*for..in*/for(let prop = (undefined) in null.propertyIsEnumerable(\"__proto__\")) \tif((constructor.prop setter= Math.sin)) { if ((this.__defineSetter__(\"prop\", (<x/>).__defineSetter__))) {return; } else this;}\nif((__count__ .@ prop|=[[1]])) M:with({__count__: <x><y/></x>}){return [z1];(<><x><y/></x></>); } else  if ({}.propertyIsEnumerable(\"__noSuchMethod__\")) function  __iterator__ (prototype, __parent__) { return <y><z/></y> } ");
tryItOut("/*infloop*/while([, ({ prototype: ({ [[]]: constructor, __count__: __parent__ }), (__count__): ({ x::__proto__: function::prototype, __parent__: prototype }) }), function::function::__proto__, , []] = (0) -= ((__count__)+=(function(y) { yield y; return;; yield y; }(*::*))))/*infloop*/for((new Function).call((-1).__defineSetter__, let (__noSuchMethod__)  \"\" ); __noSuchMethod__ = <x><y/></x> / (function ([y]) { })().__defineGetter__(\"prop\", (<y><z/></y>).watch); #3={a:#3#}) {/*infloop*/for(false; *::*; <x><y/></x>) yield prop;export *//h\n; }");
tryItOut("if( ''  @ constructor) return; else {(this);{} }");
tryItOut("if([15,16,17,18].some(@foo, (this.zzz.zzz))\f) return <><x><y/></x></>;");
tryItOut("if(window) var __noSuchMethod__; else export *");
tryItOut("throw prototype;");
tryItOut("{if(-0) { if (<><x><y/></x></>) {((function ([y]) { })());<x/>; } else {continue L;throw [1]; }} }");
tryItOut("with({__count__: undefined}){gc()return -0; }");
tryItOut("M:with({__proto__: <x><y/></x>.yoyo(__parent__)}){with({prop: @foo}){export __count__; }; }");
tryItOut("/*infloop*/do {{} } while(.2);");
tryItOut("{(<x><y/></x>);export *; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(delete in (([1,2,3,4].map)(<><x><y/></x></>.__parent__ = [,,z1].__defineSetter__(\"__proto__\", [1,2,3,4].map)))){constructor = true }");
tryItOut("if(3/0) <x><y/></x>; else  if (export __iterator__) {return; } else {return; }");
tryItOut("L:if(<x>\n<y/></x>) gc() else  if ([[1]]) gc() else const __count__, __noSuchMethod__;");
tryItOut("/*infloop*/for(prototype = ; (p={}, (p.z = window)()); <><x><y/></x></> if (1.3).prototype) {; }");
tryItOut("const __parent__ = null");
tryItOut("while(([,,]) && 0)continue ;\nfunction\f  __proto__ () { yield ({a1:1}) } \n");
tryItOut("if(({ prototype: [__proto__, , prop, __parent__] }) = (function ([y]) { })()) { if ((__iterator__ = (__proto__%=prototype = [1,,]).yoyo(<><zzz>__parent__ = constructor</zzz></>))) ; else {{ /x/g  } }}");
tryItOut("M:with({constructor:  '' .prop.__lookupGetter__(\"prop\")}){let __noSuchMethod__, constructor = __parent__;#1#; }{{}export prototype; }export __noSuchMethod__;");
tryItOut("/*infloop*/for(const constructor = <y><z/></y> = [,].__count__ = (5.0000000000000000000000)[*] >>= function::__parent__.__count__; 1e+81; false) {export <x><y/></x>\nif(*) ; }");
tryItOut("/*infloop*/while(<>((~033)++)</>){__noSuchMethod__ = constructor, __iterator__;/*for..in*/for([__noSuchMethod__, prototype] = 3.141592653589793 in undefined) __iterator__, __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __count__] = (function(y) { yield y; __count__, __proto__ = 1.3;; yield y; }).call((this ? prototype : <x/>), ({__count__: (033 - true) }), <x><y/></x> && @foo) in __count__ =  \"\" ) let  /x/  = <\nx><y/></x>, prototype = 1.3;");
tryItOut("M:if( /* Comment */function(y) { yield y; switch(.2) { default: yield 0;export *;break; export __proto__;break; ;break;  }; yield y; }) {gc()null } else  if (\nthis.propertyIsEnumerable(\"constructor\")) /*for..in*/M:for(var __parent__ =  \"\"  in __proto__ = <x/>) {;export *; } else {}");
tryItOut("with({}) { let(({ __parent__: [, , [__count__, , prop, __noSuchMethod__, __proto__]] }) =  /* Comment */ /x/g ) { throw __iterator__; } ");
tryItOut("{; }");
tryItOut("let (__parent__, function::<ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd> = <><x><y/></x></>.prototype = (0/0 , [[]])) { /*infloop*/for(__parent__; window; (true.__lookupGetter__(\"prototype\"))) {break L;continue ; } }");
tryItOut("if((__parent__.__iterator__ setter= function(q) { return q; })) break ; else ;");
tryItOut("if(new (.propertyIsEnumerable(\"__iterator__\"))()) export __iterator__; else yield  /x/ ;");
tryItOut("if(*) { if (null) {break ; } else export __parent__;}");
tryItOut("if((function () { yield <x><y/></x> } ())) (((<y><z/></y>.watch(\"__iterator__\", <x><y/></x>)).eval((-0).throw(<x/>))));");
tryItOut("let(prototype) { for(let y in [5,6,7,8]) let constructor = @foo;");
tryItOut("switch(null.isPrototypeOf(<x><y/></x>)) { case 0: break; default: break; case (1e81((({constructor: <x/>, __iterator__ getter: new Function })), window)): yield; }");
tryItOut("/*infloop*/M:for(let prop; [,]; __count__ = (function ([y]) { })().__defineSetter__(\"__parent__\", @foo)) {break ;(window); }");
tryItOut("L:if(__iterator__+=<x/> if ('fafafa'.replace(/a/g, <x/>)).watch(\"__noSuchMethod__\", 'haha'.split)) { if ((((({ get prototype()(function ([y]) { })() }).yoyo((false.__lookupGetter__(\"prop\"))))).watch( \"\" .watch(\"__iterator__\"\t, function  __iterator__ (__parent__, constructor) { yield <y><z/></y> } ), ((({a1:1}))[-1].valueOf(\"number\"))))) throw prototype.prop; else let __iterator__\n}");
tryItOut("throw prop");
tryItOut("if(<x/>) {yield; }");
tryItOut("if(prop) {} else  if (<x/>) {throw @foo; } else {const __noSuchMethod__, __noSuchMethod__;return <x/>; }\nyield <><x><y/></x></>;");
tryItOut("/*for..in*/for(const constructor in (window if (<><x><y/></x></>))) {*::*; }\t");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/while((new ([z1,,])(false, null))){export __iterator__; }");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; delete default: if(<x><y/></x>) {} else  if (-3/0) gc()break; break; case 7: break; ; __proto__ += <><x><y/></x></>) switch(undefined[new (this)(<y><z/></y>, undefined) /= ('fafafa'.replace(/a/g, ({}).__lookupGetter__))]) { default: const constructor; }");
tryItOut("L: return this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty);");
tryItOut("L: let __parent__ = <><x><y/></x></>");
tryItOut("if( /x/ ) { if (<><y><z/></y></>) {return; }} else __iterator__");
tryItOut("{throw <x/>;; }");
tryItOut("{/*for..in*/for(const [15,16,17,18].sort(new Function, window) in function::__iterator__) {__iterator__ = <><x><y/></x></>, prop = *;export *; } }");
tryItOut("do {/*infloop*/L:for(var x::__proto__;  \"\"  && <><x><y/></x></>; *::*.__lookupGetter__(\"prototype\")) yield\n } while((__parent__.__iterator__ = (<x><y/></x> === <x><y/></x>)) && 0);");
tryItOut("if([11,12,13,14].map) gc() else  if ((__parent__.constructor setter= (<x><y/></x>.yoyo(0x99) for (__noSuchMethod__(<x><y/></x>) in <x/>)))) let x::__proto__; else {export __iterator__;export function::prop; }");
tryItOut("with({__proto__:  /x/ })(undefined).watch");
tryItOut("M\n:with(false)let prop = undefined;");
tryItOut("if( /x/ )  else  if (__iterator__) export constructor;");
tryItOut("M:do {return this;gc() } while(((1e-81 /=  '' )) && 0);");
tryItOut("throw StopIteration;");
tryItOut("let(__proto__ = <x><y/></x>.(__noSuchMethod__), __parent__) ((function(){throw StopIteration;})());");
tryItOut("/*infloop*/do {(*).watchexport *; } while(true);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in (this <= <><x><y /default: /*for..in*/for(let <x><y/></x> in (((prototype).watch)((new (Math.pow)(prototype)))))/*infloop*/L:for(<><x><y/></x></>; undefined; this) export *;/*for..in*/for(var prop in __proto__) {let function::__proto__ =  \"\" ; }break; break; case (\ntrue): break;  ></>)) continue M;");
tryItOut("/*infloop*/M:for(new String(this, <\fx><y/></x>); (eval(\"export __iterator__;\", <x/>.hasOwnProperty(\"__iterator__\")).prop); __proto__ = -1) /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in false) let __proto__ = [];");
tryItOut("{eval<x><y/></x>; }");
tryItOut("/*infloop*/for(var __count__ = function ([y]) { }; null; undefined) const __count__ = <y><z/></y>, prop;");
tryItOut("/*infloop*/for(({ set __proto__() { return (new <><x><y/></x></> |= <y><z/></y>(true .. __noSuchMethod__,  '' )) } ,  set __iterator__(prototype)<><></></> }); (yield <>this.__defineSetter__(\"function::__noSuchMethod__\", ({}).__lookupGetter__)</>.(((function(q) { return q; })(undefined = this)))); __noSuchMethod__.prop getter= ({}).hasOwnProperty) {export *;/*infloop*/M:do <x><y/></x> while([<x><y/></x>let __count__;]); }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __iterator__ in (new Boolean(*::*))) {with(true)const default: __noSuchMethod__ = <x/>;break; const __iterator__;; }");
tryItOut("L:switch(<y><z/></y>.isPrototypeOf((__proto__ = __iterator__))) { default: __count__ = __proto__;break; case __noSuchMethod__: break;  }");
tryItOut("with((yield new (<x><y/></x>)())){export __noSuchMethod__;let prop = *, __proto__; }");
tryItOut("/*for..in*/M:for(const ({ __count__: __iterator__ }) in constructor.isPrototypeOf(__noSuchMethod__\n.yoyo(<><x><y/></x></> = true))) {yield; }");
tryItOut("");
tryItOut("L:do {yield <y><z/></y>; } while((false) && 0);");
tryItOut("for(let y in [5,6,7,8]) with({}) for(let y in [5,6,7,8]) ;");
tryItOut("prop = __count__;");
tryItOut("{yield ({ __parent__: __iterator__, __proto__: ({ __noSuchMethod__: [__noSuchMethod__, , ], prop: __iterator__ }) });for(let y in []); }");
tryItOut("/*infloop*/M:for(5.0000000000000000000000.unwatch(\"__parent__\"); @foo\n; (this.zzz.zzz)) {; }");
tryItOut("do {({}).hasOwnPropertyconst __parent__ = @foo; } while((*::*) && 0)\n{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __parent__: __iterator__, __parent__: __noSuchMethod__ }) in ([__iterator__constructor = ({a1:1})].filter(((<x><y/></x>.yoyo( let ))).watch))) {with({__noSuchMethod__: (yield window)}){/*for..in*/for(var prop = [,,z1] in ({})) {Function } } }");
tryItOut("\tL: return <x><y/></x>;");
tryItOut("try { throw prop; } catch(constructor if (function(){this.zzz.zzz;})()) { return ((<x><y/></x>).__defineSetter__).call(1.3, 0/0, <x><y/></x>); } catch(__proto__ if (function(){throw __count__;})()) { x::__parent__ = __parent__; } catch(__proto__) { throw __parent__; } finally { __parent__ = __noSuchMethod__; } ");
tryItOut("with({}) { try { return yield __parent__; } finally { return; }  } ");
tryItOut("let ([], prototype = <x><y/></x>[false].@foo) { /*infloop*/for(*::*; <x><y/></x>; *::*) gc() }");
tryItOut("if((* for each (__parent__ in  '' ) if (((yield  /x/ ))))) export *; else {[z1]; }");
tryItOut("L: /*infloop*/for(prop; undefined;  /x/ ) return;");
tryItOut("M:if((__proto__.__parent__ = @foo)) if(({})) { if (true) {const prototype = this; }} else {gc() }");
tryItOut("/*for..in*/for(let prototype in ((function  constructor () { return export constructor;.hasOwnProperty(\"__parent__\") } )(({ __iterator__: ({ __count__: prototype, prop: __proto__ }) }) = (~new <x><y/></x>()))))/a/gi");
tryItOut("/*infloop*/M:for(var [, ({ function::__iterator__: ({ __count__: __count__ }), __noSuchMethod__: ({ prototype: __parent__ }) }), (__iterator__), ] = __count__-=<x/>; <><x><y/></x></>.unwatch(\"prototype\"); (yield @foo) *= eval(\"export __proto__;\", <y><z/></y>).*) ;");
tryItOut("return Date(-3/0, *::*);");
tryItOut("switch(<y><z/></y>) { case 4:  /x/ ;break; default: constructorcase 5: break; case [,]: case 7: break; gc()case 2: break;  }");
tryItOut("with(({})){export __noSuchMethod__;; }");
tryItOut("({ prototype: __count__ }) = ({__parent__: undefined}) for (constructor.__proto__ in @foo)");
tryItOut("switch(({ __noSuchMethod__:  if ((window)[*::*]), __iterator__: ({ __noSuchMethod__: constructor, __parent__: ({ constructor: __iterator__ }) }) }) = ) { default: M:if(#0=({__proto__: <>constructor</>})) break ; else {prop, __noSuchMethod__;; }break; for(let y in []);export __count__;\nnew Function\n }");
tryItOut("M:while(((new 1.2e3(prototype)).unwatch(\"__iterator__\")) && 0)/*for..in*/for(let prop = <x><y/></x> in __count__) { }");
tryItOut("return <y><z/></y>\n");
tryItOut("return;\nexport *;\n");
tryItOut("/*infloop*/for(let constructor = (\n<x/>); __iterator__|=__iterator__ % (__noSuchMethod__.__count__ setter= gc); (<><x><y/></x></> ?  /x/  : <x/> .@*:: true >>> 1.3 %= ((yield prototype = this)))) ;");
tryItOut("; const __iterator__;");
tryItOut("/*for..in*/for(let __iterator__ in ((Function)(this)\f)){{}/*for..in*/for(prototype in *) {throw *; } }");
tryItOut("/*infloop*/while(__count__);return;");
tryItOut("while((((p={}, (p.z = (-3/0.propertyIsEnumerable(\"prop\").__defineSetter__(\"__parent__\",  /x/g )).eval((undefined.__count__+=<><x><y/></x></>)))()))) && 0){if(false) { if (<x/>) ;} else return;if(__iterator__.constructor =  /x/g ) { if (<y><z/></y>) export __proto__; else {yield; }} }");
tryItOut("let(__proto__ = <><{({prototype: <x><y/></x> })}>yyy</{({prototype: <x><y/></x> })}></>, constructor = gc()) { with({}) try { return; } catch(__noSuchMethod__) { __parent__ = __iterator__; } ");
tryItOut("do {__proto__, prototype; } while(( ''  != arguments++) && 0);");
tryItOut("({}).hasOwnProperty\ngc()");
tryItOut("let(__count__) { let(prototype = <y><z/></y>, ({ prototype: prop, __proto__: prototype })) { try { const __proto__ = window, prototype = false; } catch(__count__) { return; } ");
tryItOut("if(<y><z/></y>) yield *::*; else  if ( \"\" ) {yield;throw prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {/*infloop*/L:for(const prop = (__iterator__); __count__.prototype; __iterator__ = <><x><y/></x></>) {return;{} }/*infloop*/for(new RangeError(); window; (this.__defineGetter__(\"prototype\", (<><x><y/></x></>).watch))) /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in prop) {{var <x><y/></x>, prototype; }export __proto__; } } while(*::* =  /x/g  >>>=<x><y/></x>);");
tryItOut("export *;");
tryItOut("switch(({ each: [[[], [], ({ __noSuchMethod__: __proto__ }), ], , ], constructor: __noSuchMethod__ }) = ({__noSuchMethod__: (__count__ = <y><z/></y>)})) { case (yield  /x/ --): with((<x/> <<= __proto__)){(0/0);<><x><y/></x></> }break;  }");
tryItOut("/*infloop*/for((((__count__ =  /x/ .yoyo('fafafa'.replace(/a/g, function  constructor (\fprop) { yield *::* } ))))(((uneval(function::__iterator__ in <><x><y/></x></>))))); this; [1,2,3,4].map) {{} }");
tryItOut("do {do {{} } while((new String((function ([y]) { })())) && 0);/*for..in*/for(const [__count__, __count__] = __noSuchMethod__ in this) {return __proto__;([,,]).__defineSetter__ } } while(([this.zzz.zzz]) && 0);");
tryItOut("M:if(*::*) {var function::prop = <>throw prop;</>, let;{} }");
tryItOut("switch((__noSuchMethod__.__parent__ setter= -1.isPrototypeOf(*\n))) { case (__iterator__ = <y><z/></y>) === (this.zzz.zzz): do constructor; while((<x><y/></x>\f) && 0);default: case ({__noSuchMethod__: if(this) { if (true) {throw true;export *; } else {throw undefined;; }}, __count__ = yield}): export *;break; export constructor; }");
