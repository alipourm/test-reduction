
tryItOut("with({__proto__: each = ({a2:z2}) + (prototype.throw(*::*))}){;gc }");
tryItOut("/*infloop*/M:for(const ({ set: [], __count__: [, , ({ __noSuchMethod__: ({ __parent__: ({ __iterator__: ({ __count__: __count__ }) }) }) })] }) = (function(y) { yield y; const __noSuchMethod__, __proto__ = <><x><y/></x></>;; yield y; }).call(__count__, 033, *::*).propertyIsEnumerable(\"__parent__\"); new String( \"\" , <y><z/></y>); ((-- \"\" ).propertyIsEnumerable(\"__noSuchMethod__\"))) {constructor = prop; }");
tryItOut("<>(new Function(\"export *;\"))</>;\n<><x><y/></x></>\n");
tryItOut("{var prop, prop = this;\nprop;\nyield; }");
tryItOut("if(eval(\"{}\", new [1,2,3,4].slice(window))) { if (prop = <x><y/></x> << * <<= ([__parent__])) yield;} else export *\n");
tryItOut("let(__proto__ = this.__defineSetter__(\"__noSuchMethod__\", eval)) { let(__noSuchMethod__, __parent__) { prop;");
tryItOut("if(return( /x/g )) { if (<x/>) {/*infloop*/M:while(({a1:1})){yield;{} } } else if(#1#) export *; else  if ( /x/g ) {export *; }}");
tryItOut("/*infloop*/while([,]){var __iterator__ = <x><y/></x>, constructor = <x/>; }");
tryItOut("");
tryItOut("{{/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in function ([y]) { }) yield <><x><y/></x></>; }/*for..in*/M:for(var set = __proto__ in (-0)) throw 1.2e3; }");
tryItOut("if(#1=[#1#] ^= @foo.valueOf(\"number\")) {let (__iterator__ = <><x><y/></x></>, __iterator__ = window) { return; }export *; }");
tryItOut("/*infloop*/L:for(* .. null; let (__proto__, __parent__ = __noSuchMethod__) arguments; ({ constructor: constructor, __iterator__: __count__ }) = prototype = \rnull) {return false; }");
tryItOut("switch([, ] = new (false)().watch(\"__iterator__\", (new Function(\"\")))) { case 3: break;  }");
tryItOut("L:with(/*for..in*/for(const __count__ = <><x><y/></x></> in #1#) {{} })");
tryItOut("{*.throw(false); }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = <><x><y/></x></> in <x><y/></x>) export *;");
tryItOut(";");
tryItOut("/*infloop*/for(const __proto__ = (yield <x><y/></x> <= <x><y/></x>.unwatch(\"prop\") :: ({__noSuchMethod__ setter: Function, prop: [1] })); RegExp((__noSuchMethod__), new function  __noSuchMethod__ (__proto__) { return constructor =  /x/g  } (false)); (p={}, (p.z = <y><z/></y>)()).__defineGetter__(\"({ prop: <x><y/></x>, __count__: __iterator__ })\", function  prop (__count__, __count__) { return __parent__ = <x><y/></x> } )) if(this.zzz.zzz) ");
tryItOut("/*infloop*/L:for(let __iterator__ = ({}).__lookupGetter__((function::__parent__ for (default: break; case 8: break;  in 1e+81))); __count__.__parent__ = <x><y/></x>;  \"\"  >> null.constructor = 1e4(<x><y/></x>, true)) /*for..in*/L:for(__parent__ in <x><y/></x>) { }");
tryItOut("/*for..in*/for(let prototype = window in  /x/ ) return 3;");
tryItOut("let(({ __count__: [, , [], ({ __proto__: __count__, __iterator__: __count__ }), ], prop: [, ] }) = true.@*, ({ __count__: ({ __count__: prototype }), __proto__: __parent__ })) ((function(){throw prop;})());");
tryItOut("/*for..in*/for(prop = ((yield undefined)) in ((yield let (let) window))) {L:if(@foo) {<x><y/></x>;(0.1); }if(\f<x/>) {yield;export __count__; } }");
tryItOut("M:do {if( /x/g ) gc() else  if (((new Function(\"return;\")))([,].isPrototypeOf(window))) throw <x/>; else {; } } while(([] = (({}).hasOwnProperty)()) && 0);");
tryItOut("export *\n");
tryItOut("/*for..in*/for(let prop = constructor ? [,,] :  '' .hasOwnProperty(\"constructor\") in __noSuchMethod__ = new this) throw this;\f");
tryItOut("/*for..in*/for(null in (((\n(#1=[this])))(prop)))/*infloop*/while(const __noSuchMethod__ = <><x><y/></x></\t>, __parent__ = <y><z/></y>){let __proto__ =  /x/g ;return; }");
tryItOut("throw prototype;");
tryItOut("if((#1=({prop: __parent__.constructor = <x/>}))) { if ((yield <x><y/></x>.(prototype)[(<><x><y/></x></> !== *::*)])) {;return true.*; }} else {throw ({prototype: 1e+81 });__iterator__ }");
tryItOut("{}");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("break ;\nexport *;\n");
tryItOut("if() { if ((__parent__.(__proto__ = <><x><y/></x></>))) if(let (__parent__ = let constructor;, __proto__) <x><y/></x>) let @foo, __iterator__ = <><x><y/></x></>; else  if (\rundefined--) return; else this; else {return; }}");
tryItOut("{({}).__lookupGetter__yield window; }");
tryItOut("do L:do {return; } while(( \"\" ) && 0); const prototype; while((set = window) && 0);");
tryItOut("if((yield <x/>) !== ( \"\" [true])) { if (eval(\"(<><x><y/></x></>);\", @foo.@*)) {var __parent__ =  /x/ ;/*infloop*/for(let __count__ = <y><z/></y>; null; (function ([y]) { })()) yield window; } else {throw window;export *; }}");
tryItOut("while((this.__defineSetter__(\"prototype\", ( \"\" ).__defineSetter__)) && 0){{} }");
tryItOut("with({__proto__: #1#}){return; }");
tryItOut("L: ");
tryItOut("/*infloop*/L:for(void new (<y><z/></y>.isPrototypeOf(window).unwatch(\"__noSuchMethod__\") *= (<><x><y/></x></> === 0))(#3={a:#3#} >>> @foo.__defineSetter__(\"__proto__\", function(y) { yield y; throw  /x/ ;; yield y; })); (({}).hasOwnProperty).call( \"\" , [0.1], [1,,]) ? __iterator__.eval(1.3) :  /x/g  ? <x><y/></x> : false; (prototype = 3.141592653589793)) {} const __proto__;");
tryItOut("switch(*::*) { default: if(*::*) { if ([]) {return window;gc() }} else {export __parent__;return <y><z/></y>; }break;  }");
tryItOut("/*for..in*/L:for(var prop = true.throw(prototype) in __iterator__) {prop = *::*, __iterator__; }");
tryItOut("if((function::constructor((<x/> for each (__noSuchMethod__ in <><x><y/></x></>) enum )) = __count__)) {window;\nreturn false;\n }");
tryItOut("throw  \"\" ;\nbreak ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.__proto__ in undefined) ");
tryItOut("__noSuchMethod__");
tryItOut("export *;");
tryItOut("let (prop) { var prop = undefined, __parent__ = <y><z/></y>; }");
tryItOut("M:if((p={}, (p.z = (uneval([1,,].unwatch\t(\"__iterator__\") + ({prototype: 0}))))())) { if (<ccc:ddd></ccc:ddd>++) {; } else M:if( /x/g ) const __iterator__ = function(id) { return id }, prop;}");
tryItOut("return;");
tryItOut("M:if(null) {yield; } else prop = window;");
tryItOut("/*for..in*/for(let [constructor, prop] = true in <x><y/></x>) ");
tryItOut("/*infloop*/for(new new Boolean(__count__ = __parent__)(undefined, (({}).__lookupGetter__).call(this.__defineGetter__(\" /x/ \", ({}).__lookupGetter__), [11,12,13,14].sort, (*::*.throw(<x><y/></x>)))); <{__iterator__}><!--yy--></{__iterator__}>; (uneval(arguments))) {M:if( { return (prototype.prop = *).__lookupSetter__(\"function::__iterator__\") } ) { if (prototype = __proto__) {throw <x><y/></x>; } else (__parent__);} }");
tryItOut("L: {gc(); }");
tryItOut("if((yield function(id) { return id })) {export __noSuchMethod__; } else  if (<x/>.isPrototypeOf(<><x><y/></x></>)) return; else {return; }");
tryItOut("/*for..in*/for(const prop in ((({}).__lookupGetter__)(((<x/>)[ /x/ ])))){/*for..in*/M:for(__parent__(__iterator__) in *)  }");
tryItOut("{yield; /x/  }");
tryItOut("while((prop = __noSuchMethod__) && 0){; }");
tryItOut("/*infloop*/for(<xxx>{__count__}</xxx>\n; 1e+81 >>>=<>function  __count__ (__iterator__, __count__) { return ((false)[({a2:z2})]) } , (({}).hasOwnProperty)</>.throw(function::prototype :: true); (let (__proto__ = true |= this, constructor) (try { return; } catch(__iterator__) { ({ constructor: __noSuchMethod__, __count__: prototype }) = ({ __parent__: (__noSuchMethod__), constructor: prototype }) = typeof prop(this, {}); }  % window.watch(\"prop\", Math.sin)))) {if(<><x><y/></x></> >> (-1)) { if (eval(\"export __noSuchMethod__;\", this)) {export prop; } else {; }} }");
tryItOut("prototype const __count__;");
tryItOut("/*infloop*/M:for(<x><y/></x>; __count__; false) {<><x><y/></x></>; }");
tryItOut("with({constructor: @foo});");
tryItOut("/*for..in*/for(var __iterator__ = (((1e4)[<><x><y/></x></>] if (<x/>))) in 1e-81) {if(<><x><y/></x></>) {(<><x><y/></x></>); } else  if (<x/>) {var __iterator__ = *;yield *; }; }");
tryItOut("Math.sin");
tryItOut("/*infloop*/M:for(var [, , ] = ([constructor.__noSuchMethod__ = yyy]); /*\n*/(p={}, (p.z = __count__)())--; constructor) { }");
tryItOut("{yield [1,,];{} }");
tryItOut("throw __count__;");
tryItOut("return;");
tryItOut("with({function::prototype: this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice)}){L:do {throw  \"\"  } while((this.@foo || <x/> & <x><y/></x>) && 0); }\n/*infloop*/for(var __noSuchMethod__ = (prototype.__parent__ .@ (#1=({__proto__: <><x><y/></x></>}))); (); eval()) L:if(this) {gc()\fexport *; } else  if (__parent__) {} else yield\n(<x><y/></x>);");
tryItOut("/*infloop*/while((({prop: (__proto__ = __noSuchMethod__)})))/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in -3/0) {}gc() } while( '' );");
tryItOut("switch((eval(\"(<y><z/></y>);\", this).unwatch(\"__noSuchMethod__\"))) { case 6:  }");
tryItOut("M:with((3/0.unwatch(\"constructor\")))gc()");
tryItOut("L:switch(new function(q) { return q; }(__count__ > <y><z/></y>, [z1,,])) { default: while(((new Function(<><x><y/></x></>))) && 0)break M; }");
tryItOut("with({}) { return <><x><y/></x></>; } ");
tryItOut("/*infloop*/L:for(var constructor; prop = typeof function ([y]) { } += [15,16,17,18].sort((undefined).__defineSetter__, ({ set __proto__() { yield <x><y/></x> }  })); (eval) ^ *) {yield;throw prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in 'fafafa'.replace(/a/g, __count__)--) if([z1]) {/a/gi }");
tryItOut("gc() const __iterator__;");
tryItOut("if(undefined in *) { if (true) ;} else export constructor;");
tryItOut("break ");
tryItOut("M:if(__proto__ = []) { if ((* * <>3</> || false ^= prototype = prop.prop)) {M:if(5.0000000000000000000000) {<><x><y/></x></>; } else  if (this) {(033);break ; } else { }switch(true) { default: (function ([y]) { })();break;  } } else {export *;__noSuchMethod__ =  /x/ ; }}");
tryItOut("with({}) { (null)( /x/g ) = constructor; } ");
tryItOut("if(Function() >= ((/a/gi)(undefined, __parent__))) (-0); else  if (((1 for (x in [])))( /x/ , this) for each (__parent__ in *) for each \t(constructor in 0x99)) {(window); }");
tryItOut("yield;");
tryItOut("{gc()export *; }");
tryItOut("(<x/>);\nbreak M;\n");
tryItOut("const __iterator__ = <y><z/></y>, __iterator__ = <x/*\n*/><y/></x>; const __parent__;");
tryItOut("switch('fafafa'.replace(/a/g, let (prototype =  '' , prototype) undefined)) { default: case {}: case (this.throw(1e4)): break; case [1,2,3,4].map: break ;break;  }");
tryItOut("{{} }");
tryItOut("if((yield <><x><y/></\fx\t></>)) function (prop) { return  /x/  }  else break L;");
tryItOut("/*for..in*/for(var __count__ in ((({}).__lookupGetter__)(<x><y/></x>)))export *;");
tryItOut("/*infloop*/while(-3/0.watch(\"constructor\", ([[]]).__defineSetter__)){gc() }");
tryItOut("if(prop.__parent__ = null, {}.__defineGetter__(\"__iterator__\", gc)) { if (__parent__) {if(@foo) { if (window) throw 1e81;} else {constructor = function ([y]) { }, __proto__;return <x><y/></x>; } }} else this;");
tryItOut("/*infloop*/for(const ({ prototype: __proto__, prototype: __parent__ }) = -3/0 <<= *::*; prop.constructor =  /x/ \r; (<x/> ? <y><z/></y> : @foo)) break ;");
tryItOut("continue L; const __count__;");
tryItOut("if(((uneval((__noSuchMethod__.__count__ setter= [1,2,3,4].map))))) { if (__count__.__noSuchMethod__ setter= <x><y/></x>) var prototype = window, __count__ = function ([y]) { }; else {const prop = this, __iterator__ = @foo; }}");
tryItOut("let (__iterator__) { [,];\t }");
tryItOut("throw  '' \n");
tryItOut("while((<bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb>) && 0)\r { return undefined } ");
tryItOut("/*infloop*/for(<><ccc:ddd> </ccc:ddd></>; this.__defineSetter__(\"constructor\", /a/gi); ({__iterator__: arguments})) let (__iterator__, constructor) {  }");
tryItOut("L: yield;");
tryItOut("while((((uneval(null)) for (__noSuchMethod__ in new []()) for (__count__ in  /x/g )) /= (<x/> + .2)) && 0)throw __count__;");
tryItOut("return (#0=({__parent__: ((({prototype: #3={a:#3#} }))())}));");
tryItOut("return;");
tryItOut("{export *; }");
tryItOut("return;");
tryItOut("/*for..in*/M:for(prop = 'fafafa'.replace(/a/g, gc) in <x><y/></x> += <x/>) {yield @foo;\f }");
tryItOut("do {{if(1.2e3) { if (*) let function::__iterator__, __count__; else {;; }}yield; } } while((@foo instanceof  /x/ ) && 0);");
tryItOut("/*infloop*/for(eval(\"window\", \nnew (function(y) { yield y; this;; yield y; })( /x/ , <x/>).__lookupGetter__(\"__iterator__\")); [window].some('haha'.split)(3.valueOf(\"number\"),  '' ); this.__defineGetter__(\"__proto__\", eval)) M:if(* === this) M:switch(this) { case 3: break M;break; case 0: (*);export __iterator__;case <x><y/></x>: break;  } else  if (({ set __iterator__(<><x><y/></x></>.hasOwnProperty(\"constructor\"))null, __count__: Iterator() })) \u2028\n");
tryItOut("default: M:while(((void (*::* || function(id) { return id }))) && 0)with({prop: eval(\" /x/g \", <><x><y/></x></>)})export __iterator__;case 6: ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let prototype = <x/>; []; 5.0000000000000000000000) ;");
tryItOut("/*for..in*/for(const prop in ((function (({ (*::*)(*): ({ __parent__: __iterator__, __noSuchMethod__: ({ __proto__: [, , , [__noSuchMethod__, prototype, ]], __iterator__: __proto__ }) }), __parent__: [] }), function::__parent__)null >= [z1])(__iterator__ = ({ __proto__: __iterator__ }) = <><x><y/></x></>)))/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in 1e4) {return; }");
tryItOut("/*for..in*/for([__parent__, constructor] = this.__defineSetter__(\"__count__\", 'haha'.split).watch(\"__proto__\", *::*) in <x><y/></x>) var __noSuchMethod__ = <y><z/></y>, __noSuchMethod__;");
tryItOut("if(-3/0)  ''  else {return; }\n{}\n");
tryItOut("yield;");
tryItOut("if((({}).hasOwnProperty)()) {if(({__noSuchMethod__: 0/0.isPrototypeOf(5.0000000000000000000000)}).@foo) var __noSuchMethod__; else  if ((<bbb xmlns=\"window\"> </bbb>.(<><x><y/><\n/x></> || prop))) {yield <x/>; } else {function(q) { return q; }((([1,2,3,4].map).call).call); }break ; }");
tryItOut("with({prototype: <x/>}){/*infloop*/while(((__noSuchMethod__)--)){export *; }/*infloop*/for([1.2e3 for each (__noSuchMethod__ in *::*)]; new prototype|=<x><y/></x>('fafafa'.replace(/a/g, [z1,,]), false); <><x><y/></x></>.hasOwnProperty(\"constructor\")) return 033; }");
tryItOut("L: export prop;");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = *++ in [<y><z/></y>].some(({}).__lookupGetter__)) if(*::*) __iterator__ else  if ( '' ) {continue ;gc() }/*\n*/ else {<x/>;let __parent__, __noSuchMethod__ = <x><y/></x>; }\nyield <x/>;\n");
tryItOut("switch(this) { case ></>: export __count__; }");
tryItOut("yield ({ __parent__: [, , , ], __noSuchMethod__: [constructor, , __noSuchMethod__, , prototype] }) = (new prototype(*));");
tryItOut("for(let y in []);");
tryItOut("if(<x><y/></x>.(true).@foo.__lookupGetter__(\"__parent__\")) let __proto__ = [[]];");
tryItOut("return window;");
tryItOut("gc()/*for..in*/for(const __parent__ = <bbb xmlns=\"this\">yyy</bbb> in <x><y/></x>) return this;");
tryItOut("export *");
tryItOut("if(<x/> :: this) \fthrow (-1); else window");
tryItOut("/*infloop*/while(constructor = {}){L: let __noSuchMethod__; }");
tryItOut(";");
tryItOut("try { continue L;\nFunction\n } catch(__proto__) { with({}) { throw StopIteration; }  } ");
tryItOut("while((0.watch(\"__iterator__\", 'haha'.split)) && 0)<bbb xmlns:ccc=\"delete <><xxx {__noSuchMethod__}={<x/>} /></>\"><ccc:eee></ccc:eee></bbb>");
tryItOut("do L:with(window){yield; } while(() && 0);");
tryItOut("if(#0=<x><y/></x>) { if (undefined - <x/>) export *; else {(1 for (x in []))break ; }}");
tryItOut("/*infloop*/while((__parent__ =  /x/ )){export *; }");
tryItOut("{return;export __iterator__; }");
tryItOut("this; const prototype\n");
tryItOut("if(<><//h\nbbb xmlns:ccc=\"prototype = constructor\"><ccc:eee></ccc:eee></bbb></>) <y><z/></y>; else {return; }");
tryItOut("(<><x><y/></x></>.yoyo(@foo))\n\nwhile(( /* Comment */(function ([y]) { })().isPrototypeOf(__iterator__).valueOf(\"number\")) && 0)'haha'.split");
tryItOut("/*infloop*/for((p={}, (p.z =  '' )()); ( /x/g [<x/>]); __proto__ ? false : @foo) {return; } const __count__;");
tryItOut("if(<><{__noSuchMethod__}>yyy</{__noSuchMethod__}></>) {gc() } else  if ((({a1:1})((__parent__ = <x><y/></x>), constructor).valueOf(\"number\"))) yield <x><y/></x>; else gc()");
tryItOut("if(__iterator__) {export *;M:with({__count__: getter}){let prototype = 0;const __proto__ = <><x><y/></x></>; } } else {if(<x><y/></x>) {const prototype, __parent__;{} } else  if ( \"\" ) {} }");
tryItOut("/*infloop*/do {throw constructor;gc() } while(({ __iterator__: [, [, this, ({ __proto__: function::__count__, __proto__: prop }), [, prototype]], , , ], __noSuchMethod__: __count__ }) = <><x><y/></x></>.@* & prototype |= (new this.zzz.zzz((+'fafafa'.replace(/a/g, @foo)), (<x/>.@*))));");
tryItOut("/*for..in*/for(let __parent__ in (((1e-81.__lookupSetter__(\"prototype\")) &= ({a2:z2}).__lookupGetter__(\"__count__\"))(((1 for (x in []))()))))var __noSuchMethod__ = <><x><y/></x></>; const __proto__;");
tryItOut("let (__iterator__ = prototype =  /x/ .(\"number\"), prototype = eval(\"const __iterator__, __count__ = #1#;\", (throw 1e81.__parent__))) { /*for..in*/for(var constructor in <x/>) {{} }\f }");
tryItOut("/*for..in*/for(constructor = () in [,]) {break M//h\n; }\nreturn;");
tryItOut("/*infloop*/for(({ prop: [, , , prop], prototype: __parent__ })/*\n*/ = <><x><y/></x></>;  '' .yoyo( /x/g ); ((new null()).isPrototypeOf( /x/ ))) ({ __noSuchMethod__: __parent__ }) = ([__iterator__, , __iterator__, , ] = [<x/>])");
tryItOut("L:if(new (function (__count__) { return undefined } )(<><x><y/></x></>)) __count__; else ;");
tryItOut("with({constructor: [15,16,17,18].map(Math.pow, <><{__proto__}>yyy</{__proto__}></>).__lookupGetter__(\"__proto__\")})return  \"\" ;");
tryItOut("return;");
tryItOut("(<x><y/></x>)");
tryItOut("gc()export *\n/*for..in*/L:for(3 in <x><y/></x>) {}");
tryItOut("break ;");
tryItOut("delete = __parent__;");
tryItOut("/*for..in*/for(var __count__ =  /x/  :: [1] in ( /x/  !== this)) yield 033;try { return <x/>; } catch(__noSuchMethod__ if delete <x><y/></x>) { \tcontinue ; } catch(prop) { ; } finally { gc() } ");
tryItOut("throw {};");
tryItOut("M:switch(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { default: return <x/>;case undefined.propertyIsEnumerable(\"prop\"):  }");
tryItOut("throw window;");
tryItOut("throw __proto__;");
tryItOut("{throw  /x/ ; }");
tryItOut("throw StopIteration;");
tryItOut("L:while(((((<y><z/></y>)( /x/g ))[prototype].__defineGetter__(\"prop\", function  __iterator__ (__parent__) { yield new *::*(undefined, true) } )).valueOf(\"number\")) && 0)/*for..in*/for(__noSuchMethod__ =  ''  in [[1]]) yield this;");
tryItOut("{__iterator__; }\nL: { }");
tryItOut("{export prototype;throw <x><y/></x>; }");
tryItOut("/*infloop*/for(let __iterator__ = eval(\"false(window, __proto__)\", this.__lookupGetter__(\"prototype\")); #1=({each: __parent__}) for each (prototype in (prototype = \t<x/>)) if (@foo); __noSuchMethod__ = (new ({}).hasOwnProperty() = this)) ;break M;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:while(<><x><y/></x></>)true");
tryItOut("let ([constructor, __noSuchMethod__, __parent__, ] = (__iterator__.__count__), __noSuchMethod__ = 0x99) { var __noSuchMethod__; }\n");
tryItOut("throw __parent__, constructor = [[1]]\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(let __parent__ = (<><x><\ty/></x></>).watch(try {  } catch(prototype) { yield; } , null).__count__ in [11,12,13,14].map) with({__parent__:  /x/g }){(<><x><y/></x></>);export *; }");
tryItOut("constructor = __iterator__;");
tryItOut("let (__iterator__) { throw ({a2:z2});\n }");
tryItOut("(*::*);\n(<x><y/></x>);\n");
tryItOut("if(<>this</>) \f{ if (__proto__ =  /x/g ) {let __proto__;return; }} else {yield;yield; }");
tryItOut("window;");
tryItOut("/*infloop*/for(let ({ __proto__: __count__, __parent__: ({ prop: __parent__ }) }) = ((p={}, (p.z = undefined)())).__count__ = <x/>; let case 4: case 8: case <><x><y/\f></x></>: @foo;break; continue M; =  /x/ ; this.__defineGetter__(\"__iterator__\", <><x><y/></x></>).unwatch(\"prop\")) {while((null) && 0){export __count__; }__proto__ = @foo; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in prototype) {break ;\texport __iterator__; }\nreturn *;return;\nreturn false;\n }");
tryItOut("let(__iterator__ = (*)(<><x><y/></x></>, -1), prototype = __parent__ = -0) ((function(){this.zzz.zzz;})());");
tryItOut("if([[1]]) { if (<x><y/></x>.(__noSuchMethod__)) yield;} else {gc() }");
tryItOut("/*infloop*/for(var [] = (<><x><y/></x></>().eval(this[<x><y/></x>])); *; [[1]]) {yield true;L: export *; }");
tryItOut("if(([(* ? <y><z/></y> :  '' )].some((1 for (x in []))))) { if (<> '' </>) {throw *::*; } else { }}");
tryItOut("if(prototype; = ({__parent__: this})) { if (constructor) {return false;continue M; }} else prototype, prop;");
tryItOut("L:if( '' ) { if (__iterator__ = null &= <><x><y/></x></>) {var constructor; }} else {while((<>new Function(<><x><y/></x></>)</>) && 0)continue M\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in function ([y]) { }) {} }");
tryItOut("if(((new Function)(([ /x/g ].map(window) << undefined)))) { if ([,,z1] ? [[1]]; : [[1]]) { }} else {throw *::*; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const constructor in (([1,2,3,4].slice)(false)))export constructor;");
tryItOut("break ;");
tryItOut("if(__count__ for each (__parent__ in null)) {throw <><x><y/></x></>; } else  if (+ /x/ ) throw <x/>; else yield;");
tryItOut("yield ('fafafa'.replace(/a/g, Math.sin)); const __iterator__;");
tryItOut("M:switch((this.zzz.zzz)) { case (<><x><y/></x></>.@*): case 5: return;break; default:  }");
tryItOut("this.zzz.zzz;");
tryItOut("with({__parent__: (yield  '' )}){if( /x/g ) {return;({}) } else export *;/*infloop*/while(__proto__ = <x><y/></x> ?  /x/  : <><x><y/></x></>){/*for..in*/for(var constructor = [,,] in 1.3) {throw <y><z/></y>; }({ prototype: __count__ }) } }");
tryItOut("M:do if(<x/>\n) {return <><x><y/></x></>; } else {({}).hasOwnProperty } while((<y><z/></y> ^=  \"\" .@*) && 0);");
tryItOut("if(<x><y/></x>) {yield; } else  if (<x><y/></x>) <x/>; else {;break ; }");
tryItOut("with({function::window: <y><z/></y>})function  constructor (__iterator__, __iterator__) { yield [,,z1] } ");
tryItOut("if(([function(id) { return id }].some(Math.pow))) { if ('fafafa'.replace(/a/g, __proto__)) {<><x>\f<y/></x></>export constructor; }} else gc() const __count__;");
tryItOut("/*infloop*/M:for((0x99 + <y><z/></y>); <x><y/></x> ? <><x><y/></x></> :  '' ; (uneval(window))) export *;");
tryItOut("{}");
tryItOut("/*infloop*/L:for(constructor = *.eval(this).__defineGetter__(\"__iterator__\", (function(y) { yield y; break ;; yield y; }).call).watch(\"__proto__\", Function);  \"\" .watch(\"__count__\", @foo); [<x/>]) throw this;\nif([,]) {continue L; } else  if (true) {}\n");
tryItOut("export prop;");
tryItOut("return; const __iterator__;");
