tryItOut("return\n");
tryItOut("/*infloop*/L:while((window if (window))){[1,2,3,4].slice;function(q) { return q; } }");
tryItOut("with({constructor: this})return;");
tryItOut("L:if(this.zzz.zzz) { if ('fafafa'.replace(/a/g, (('haha'.split).apply).call)) {throw false; } else yield 1e4;}");
tryItOut("__iterator__ = constructor;");
tryItOut("yield <x><y/></x>; const __count__;");
tryItOut("gc()");
tryItOut("/*for..in*/for(var prototype in ({ __noSuchMethod__: ({ constructor: ({ __noSuchMethod__: __noSuchMethod__.__parent__, __proto__: ({ prototype: ({ constructor: constructor }), __count__: __noSuchMethod__ }) }) }), constructor: ({ __proto__: ({ __proto__: [, ({ __proto__: [prop, , __proto__, __parent__], constructor: ({ constructor: __iterator__, constructor: __noSuchMethod__ }) })], prototype: __iterator__ }) }) })) {(@foo); }");
tryItOut("/*for..in*/L:for(let prototype in <x/>) yield 1e-81\nexport *\t");
tryItOut("<x><y/></x>;");
tryItOut("{export prop;throw <x><y/></x>; }");
tryItOut("if((__noSuchMethod__ = constructor.([<x><y/></x> if (undefined)]))) {throw <y><z/></y>; } else export constructor;");
tryItOut("if(eval(\"/*infloop*/while(<x/>)__proto__ = window;\", <><x><y/></x></> ? (prop = <x><y/></x>) : ).__lookupSetter__(\"__noSuchMethod__\")) { if ((this.__defineSetter__(\"__noSuchMethod__\", /a/gi) for (__iterator__ in ({prototype: this, function::__proto__ setter: Function })) for each (constructor.__iterator__ in 1e81) if (prop))) {/*infloop*/L:for(null.__proto__ = (-1)--; function(y) { yield y; throw <x><y/></x>;; yield y; }(*::*); @foo.valueOf(\"number\")) {export __count__;export prototype; } } else return;}");
tryItOut("/*for..in*/for([, , ] = (new eval(null)).__count__ in (((new Function(\"__parent__: new  '' \\n\")))(('fafafa'.replace(/a/g, (1 for (x in []))))))){var __count__ = @foo, __noSuchMethod__;new Function }");
tryItOut("throw {}\n");
tryItOut("if(Function(this.zzz.zzz)) { if ([, [__parent__]] = (new Error())) {/*infloop*/do prop = *\t; while(((<><x><y/></x></>).__defineSetter__).call(constructor, @foo, <x><y/></x>));throw [z1]; } else {const __count__ = [,]; }}");
tryItOut("with(([, , ({ __parent__: __iterator__ }), , ] = <><ccc:ddd>yyy</ccc:ddd></>))/*for..in*/M:for(const __iterator__ in ((function  __iterator__ (prototype, __count__)<x/>)((({__iterator__: function(id) { return id }})))))continue M;");
tryItOut("/*for..in*/M:for(let __parent__ in (p={}, (p.z = \nfalse)()) >>= Array([[1]]).valueOf(\"number\").valueOf\f(\"number\")) {{return; }/*for..in*/for(const <><x><y/></x></> in ((Function)((--(-1\n)))))( '' ); }");
tryItOut("return eval(\"*::*.__proto__ = <><x><y/></x><\\f/>\", [[1]]);");
tryItOut("while(((Exception( '' ))) && 0){if((uneval(window))) export __count__; else  if (1e4.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })) {let __parent__ = *;yield ({a2:z2}); } }");
tryItOut("this.zzz.zzz;");
tryItOut("with({constructor: [1,2,3,4].slice})M:while((yield  /x/ ) && 0){[]let __parent__ = [,], __count__ = @foo; }");
tryItOut("switch(window) { default: break; case 2: {L:if(<x/>.isPrototypeOf(window)) continue ; else  if (prop) {export *; } }return\n /x/g ;L:do  while((<x><y/></x>) && 0);case 2: break; case 1: let((//h\n{ __count__: prototype }) = *::* *= <x/>) ((function(){ set __count__(__noSuchMethod__, __noSuchMethod__) { return (null.throw(<x/>)) ^ null[<><x><y/></x></>] } })());break;  }");
tryItOut("if(+<><x><y/></x></>) { if (<><x><y/></x></> ? __iterator__ : <x/>) {}} else throw window;");
tryItOut("L: {__noSuchMethod__; }");
tryItOut("let (__count__ = new Boolean(<x/> for (__iterator__ in *::*))) { if((({__count__:  }))\t) { if ( /* Comment */<><x><y/></x></>) throw window;} else return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 0) /*for..in*/for( /x/ ['prototype'] in prototype) {<><x><y/></x></>;try { return this; } finally { export *; }  }");
tryItOut("/*for..in*/for(let __parent__ in ((<x><y/></x>.(this) == __iterator__.__noSuchMethod__)(new (#2=window)(null && __noSuchMethod__)))){{} }");
tryItOut("L: yield;");
tryItOut("if((uneval(false))) { if (eval([15,16,17,18].some((constructor).__defineSetter__, <x><y/></x>))) __noSuchMethod__, __count__;1.2e3; else {switch(<x><y/></x>) { case constructor:  } }}");
tryItOut("/*infloop*/for(var __parent__; *; this.__defineGetter__(\"__count__\", (*).__defineSetter__)) {const __count__ =  '' ;export __noSuchMethod__; }");
tryItOut("L:do {\fwith({prototype: #1#})return return null;; } while(( \"\"  , ({ __iterator__: __proto__ }) = (new function' {} ()try { export __noSuchMethod__; } finally { new Function } prototype(*::*, prototype))) && 0);");
tryItOut("/*for..in*/for(var prototype in __parent__) (undefined);");
tryItOut("[, ({ : <><x><y/></x></>, prototype: <x><y/></x>['__proto__'] }), ]");
tryItOut("if( '' .__iterator__ = (function ([y]) { })() ? (new (<><x><y/></x></>.propertyIsEnumerable(\"__parent__\"))(new  if (<><x><y/></x></>)(({a1:1})))) : [11,12,13,14].sort) {export __count__; }");
tryItOut("M:if((function ([y]) { })().__lookupGetter__(\"prop\")) export *; else  if (<x/>) {}");
tryItOut("if(<x><y/></x> & __parent__.__defineGetter__(\"void __count__\\r|=false\",  { yield undefined %= null }  = #0=<><x><y/></x></>, __iterator__)) do {{} } while((<x><y/></x>) && 0);");
tryItOut("return\n");
tryItOut("/*infloop*/for(var ({ __proto__: __noSuchMethod__, each: ({ __iterator__: [, [, ]] }) }) = *; ([1,2,3,4].map).call(<x><y/></x>, ); ({ __parent__: x::__noSuchMethod__, __count__: constructor }) = (1e4[false])) {gc()yield __proto__; }");
tryItOut("if(new 'fafafa'.replace(/a/g, Math.sin) , \rnew ( /x/g )(<><x><y/></x></>)(new function  __noSuchMethod__ ()prototype((new 'haha'.split(window, prop)), undefined) % prop(<x><y/></x>) = ({ get __noSuchMethod__ __noSuchMethod__ ()<y><z/></y> }).propertyIsEnumerable(\"__proto__\"), prop = #1=[#1#])) { if ((p={}, (p.z = (eval(\"\", true)))())) yield; else {}}");
tryItOut("/*for..in*/for(var (__noSuchMethod__)(<><x><y/></x></>) in ((<bbb xmlns=\"case __parent__: yield <x/>;break; case *::*: let constructor = window, __count__;case 3: default: gc()return <><x><y/></x></>;break; continue ;break; \"></bbb>)(<x><y/></x>))){break L; }");
tryItOut("this.zzz.zzz; const __parent__;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in void window.isPrototypeOf([z1])) {return;(undefined); }");
tryItOut("let(prototype) ((function(){})());");
tryItOut("M:with({__noSuchMethod__: this.zzz.zzz >>>=\n(__iterator__ = false)})if(window) { if (<y><z/></y>.__lookupSetter__(\"prototype\").prop) throw *::*;} else {gc()if(#3={a:#3#}) { if (<x/>) {__noSuchMethod__ = window; } else gc()} }");
tryItOut("let(__count__ = (true)()) ((function(){return new Function;})());");
tryItOut("L:if(__parent__) <x/>; else {export *; }");
tryItOut("/*infloop*/for(const __count__; []; <x/>) {(-0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in let (__count__ = #1#, __iterator__ = <x/>) <x/>) {const __count__ = <><x><y/></x></>, prop = false;__proto__export *;{yield;__proto__ = undefined; } const prop;\t }");
tryItOut("with({__parent__: ([15,16,17,18].map('haha'.split, \tconstructor.hasOwnProperty(\"__iterator__\")))}){if(false) { if (<x/>) gc() else gc()} }");
tryItOut(";");
tryItOut("try { with({}) for(let y in [5,6,7,8]) {} } catch(prop) { return; } finally { (<><x><y/></x></>(__parent__, -0)).__parent__ = __iterator__; } ");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></> !== null) {throw 1e+81; } else ;");
tryItOut("export *;");
tryItOut("this;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((Math.sin)((window.prototype) && (__proto__ = [,,]))))/*infloop*/for(let __proto__; @foo; -3/0) {return;throw *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__parent__ in ([false] if ({}))) {L: return 1e+81;let __parent__ = null, prototype; }");
tryItOut("return;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/L:for(constructor = <xxx\f {__noSuchMethod__}={(<x><y/></x> ? null : window)} />.((<>*::*</>.(this))) in (undefined++) &&  /x/g  %= <bbb xmlns=\" \"></bbb>) /*infloop*/<bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*infloop*/while( '' )/*infloop*/M:do return <x><y/></x>; while(<x><y/></x>);");
tryItOut("let (__proto__ = undefined, __parent__) {  }");
tryItOut("/*infloop*/for(({ __parent__: ({ prop: __iterator__, __count__: [, , , constructor] }), prototype: ({ __noSuchMethod__: [__proto__, ], constructor: ({ prototype: constructor, __parent__: constructor }) }) }) = (<><x><y/></x></> /= <><x><y/></x></>) <<= __noSuchMethod__ = __parent__; \n__count__ = ({ prototype: prop }); new (__count__(0x99))()) {throw  \"\" ;gc() }export *;");
tryItOut("if((new <y><z/></y>(null))) while((@foo) && 0){let __parent__ = #1#, __iterator__;throw null; }//h\n else  if (gc() + <><x><y/></x></>\n) (new Function(\"yield __proto__;\"))");
tryItOut("let(({ __parent__: prototype }), function::__proto__ = false) ((function(){gc()})());");
tryItOut("0.1;\nexport __iterator__;\n");
tryItOut("/*infloop*/M:do {gc() } while(new yield true + <x><y/></x>());");
tryItOut("yield\n");
tryItOut("(true);");
tryItOut("/*infloop*/M:for(const __count__; <><x><y/></x></>; *::*) {throw 3.141592653589793;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __count__: prop })\r((function  __count__ (__count__) { (function  __count__ (prototype) { yield <x/> } ).call } ())) in (<x><y/></x>).watch) var prop;");
tryItOut("L: yield;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/do {{const __parent__\n }{} } while(new (({}).hasOwnProperty)(([[1]] , [1] &= constructor = window)));");
tryItOut("if(#3={a:#3#}) { if (1e81[prop = *]) {return; }} else __iterator__;");
tryItOut("/*for..in*/for(let __proto__ in *) yield;");
tryItOut("return false;/*infloop*/do {return <><x><y/></x></>;(undefined); } while((new __noSuchMethod__()));");
tryItOut("if(prop = eval(\"({a2:z2})\", continue ;).yoyo(undefined).@foo) {{}{} } else  if (*::*.prop) {if([1,2,3,4].map) {return;yield window; } }");
tryItOut("#1=[#1#];");
tryItOut("if(([-0 if (__noSuchMethod__ = this)])) {return <x><y/></x>; } else const __noSuchMethod__, prototype;");
tryItOut("yield null.isPrototypeOf(<x/>) @ @foo;");
tryItOut("{{} const prototype; }");
tryItOut("/*infloop*/do continue L; while(1e81);");
tryItOut("do with(#3={a:#3#})__parent__ while(((Math.sin)((window for (__noSuchMethod__ in ({})) if (-0)))) && 0);");
tryItOut("if(true.__defineSetter__(\"__proto__\", new Function)) { if (@foo ? 1e81 :  '' ) {break ;yield  /x/g ; } else {{} }}");
tryItOut("return\n");
tryItOut("if(false .@x:: 033\n\f) return;\n__parent__;\n");
tryItOut("M:if(__noSuchMethod__ = *::*\n) yield;");
tryItOut("{if(<x/>) break L; else  if (3.141592653589793) {yield null;<><x><y/></x></>; }const prop =  \"\" ; }");
tryItOut("do {export *;gc()\nyield; } while((export constructor) && 0)");
tryItOut("try { throw __noSuchMethod__; } catch(__iterator__) { let(__proto__ = <x/>) ((function(){return this;})()); } finally { __proto__.__parent__ = __noSuchMethod__; } ");
tryItOut("(__count__);");
tryItOut("__noSuchMethod__ = \n__parent__.__lookupSetter__(\"__iterator__\").prop");
tryItOut("throw x::__count__;");
tryItOut("/*for..in*/for(var __proto__ in ((constructor)(#1#)))return;");
tryItOut("if((yield <x><y/></x>.unwatch(\"__parent__\")())) {const __noSuchMethod__ = @foo, __noSuchMethod__; }");
tryItOut("function(y) { yield y; if(<x/>) (1e4);; yield y; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("{; }\nL:with(this){let prop = <y><z/></y>, prototype = @foo;return __count__; }\n");
tryItOut("const __count__;(<x><y/></x>);");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("with((<><x><y/></x></>.__defineGetter__(\"__iterator__\", Math.pow)))export prop;\n/*infloop*/L:for(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; this; *::* *= continue M; = <y><z/></y>) {(undefined); }\n");
tryItOut("if((new (<x/>)())) {<y><z/></y>return; } else  if (prototype.(function ([y]) { }).__lookupSetter__(\"__proto__\")) {export constructor; } else {throw \t1.3;/*infloop*/for(const __proto__;  /x/ ; window) {0.1 } }");
tryItOut("/*for..in*/for(var [constructor, __parent__] = <x/> in this) {;yield  /x/ ; }");
tryItOut("with(<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"))throw  /x/ ;");
tryItOut("if(prototype) export constructor; else  if (prototype <<=  \"\" \n) {-0 }");
tryItOut("/*for..in*/M:for(var [__proto__.__count__, __proto__] = (uneval(<><x><y/></x></>)) in <><x><y/></x></>) ");
tryItOut("{}");
tryItOut("/*infloop*/do {{} } while( /x/ );");
tryItOut("/*for..in*/M:for(var ({ prop: constructor }) in true) try { for(let y in [5,6,7,8]) for(let y in []); } finally { constructor = constructor; } \nthrow <><x><y/></x>/*\n*/</>;");
tryItOut("{while(((<>yield;</>.__defineSetter__(\"__iterator__\", function(y) { yield y; 'haha'.split; yield y; }))) && 0){;yield; }; }");
tryItOut("continue ;\n(({a2:z2}));\n\nL:if((<><x><y/></x></> += (function ([y]) { })())) {return;return; } else  if (*::*) {return; } else yield;\n");
tryItOut("if(<><x><y/></x></>.__defineSetter__(\"prop\", gc)) {/*for..in*/for(let __noSuchMethod__ in ((/a/gi)(true.eval(this))))yield 1.3;/*for..in*//* nogeckoex bug 349964 */M: for  each(const null in <><x><y/></x></>) let __proto__ =  '' , ({}) =  '' ; } else  if (('fafafa'.replace(/a/g, /a/gi))) if(this) { if (<x><y/></x>) yield <><x><y/></x></>;} else ; else {yield; }");
tryItOut("if(( /x/g \n) .@x:: constructor = prop) {return; \"\" ; }");
tryItOut("/*for..in*/for(prop(__count__.(<x/>).__lookupGetter__(\"__proto__\") -= (uneval(-0))) in ((({}).hasOwnProperty)((1.3 if (<x><y/></x>))))){yield this.__defineGetter__(\"__count__\", /a/gi);; }");
tryItOut("L: {let prototype, __count__ = ({a1:1});continue ; }");
tryItOut("with((__count__.prototype = __parent__));");
tryItOut("switch() { default: this.zzz.zzz;break;  }");
tryItOut("L:if(<x><y/></x>) {yield;var __iterator__ = (function ([y]) { })(), __noSuchMethod__; } else  if (true) {export __iterator__; }");
tryItOut("let(__parent__ = Iterator(({prototype: constructor }), 3/0.__lookupSetter__(\"__parent__\")), {} = <y><z/></y> <<  \"\" ) ((function(){with({}) { with({}) { yield __parent__ = #3={a:#3#}; }  } })());");
tryItOut("while((function::constructor = [<x/> for (__proto__ in null)]) && 0)break ");
tryItOut("if( /x/g .__defineSetter__(\"__proto__\", (new Function(\";\")))) { if (true.((__proto__-=<x><y/></x>))) [1,2,3,4].map else throw  '' ;}");
tryItOut("while(((-0)) && 0){if( \"\" ) return <y><z/></y>; else  if (*) <><x><y/></x></>; else {undefined; } }");
tryItOut("/*infloop*/do {switch(__noSuchMethod__.__noSuchMethod__ setter= __noSuchMethod__) { case __iterator__.(<><x><y/></x></>): break;  }gc()export __proto__; } while( /x/ .__noSuchMethod__ = undefined);");
tryItOut("do {/*for..in*/for(var __parent__ in ((function  __proto__ (__proto__) /x/g )((@foo.__noSuchMethod__ = this))))throw <x/>; } while((__count__) && 0);/*infloop*/do {export __count__; } while(this);");
tryItOut("M:if( \"\" ) { if (<x><y/></x>) {{}(*::*); } else {<x><y/></x>return 0x99; }}");
tryItOut("/*infloop*/while(( /x/g \n));");
tryItOut("<bbb xmlns:ccc=\"( /* Comment */1e-81)\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*infloop*/do let __parent__; while((<x><y/></x> / @foo).call(( /* Comment */ '' )((__count__.(prototype)), <x><y/></x>), yield true));");
tryItOut("let constructor = window;");
tryItOut("if(case 7: if(null.__defineGetter__(\"__count__\", #1#)) {;export constructor; } else  if (++ \"\" ) {(.2).watchlet __iterator__; } else yield;/*infloop*/while((<x/>--)){return; }break; case 0: default: ;break; switch(<x/>.__defineGetter__(\"prototype\", function  __proto__ (__proto__) { yield <><x><y/>\t</x></> } )) { default: break;  }break; L: {0.1;var prop = window, prop; }) /*for..in*/for(const __noSuchMethod__ = this in []) yield <y><z/></y>; else {if(__proto__ && 3) { if (<x><y/></x>.__defineSetter__(\"__noSuchMethod__\", (new Function(\"\")))) const __iterator__;} else {continue ;; }export prototype; }");
tryItOut("while(((0)() ^= [__parent__]) && 0)break ;");
tryItOut("/*infloop*/while((([( /* Comment */prop)]) if ((__parent__.__parent__ = <x/>.propertyIsEnumerable(\"get\")))))L: {function (__parent__) { yield <x><y/></x> } #1#; }");
tryItOut("/*infloop*/for((Math.sin).apply; __count__; [[]]) const __proto__;");
tryItOut("if(5.0000000000000000000000) ");
tryItOut("/*infloop*/L:for(prototype; (3 += <><x><y/></x></>.__count__); (uneval(*))) if(this) { if (@foo) {return; }} else gc()");
tryItOut("/*for..in*/for(let [prop, prop] = __iterator__ =  ''  in  \"\" ) {if(__parent__) { if (1e-81) {const constructor; } else {__noSuchMethod__;return <x><y/></x>; }} }");
tryItOut("this.zzz.zzz;");
tryItOut("if([1,,]) <x><y/></x> else  if (<x><y/></x>) {throw this; }\f");
tryItOut("M:with({__iterator__: <x/>})/*for..in*/for(var __count__ in constructor getter: function(q) { return q; }[4.]) {throw  \"\" ; }");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("while((*::*.__lookupSetter__(\"__parent__\").*) && 0)gc()");
tryItOut("/*infloop*/do { } while({});");
tryItOut(";");
tryItOut("for(let y in [5,6,7,8]) let(constructor = (function::prop if (<><x><y/></x></>))) { for(let y in []);");
tryItOut("L: export *;");
tryItOut("/*infloop*/M:do continue M; while(*::*);");
tryItOut("switch(0x99) { default: export __iterator__;break;  }");
tryItOut("/*infloop*/do yield 4.; while(this);");
tryItOut("/*infloop*/while(prop = __count__){return __noSuchMethod__; }\nexport constructor;\n");
tryItOut("L:if(this) {;gc() }");
tryItOut("switch(*::*) { default: case 4:  }");
tryItOut("/*infloop*/for(let __iterator__ = __noSuchMethod__ = __iterator__; eval(\"({a1:1})\", <x><y/></x>); __parent__.constructor) ");
tryItOut("export *;");
tryItOut("yield;");
tryItOut("M:with(\t__parent__){export *; }");
tryItOut("{} const __iterator__;");
tryItOut("L: break M;");
tryItOut("/*for..in*/for(prototype =  /x/g  in null) {Math.sin }");
tryItOut("/*for..in*/for(__count__ in undefined) {gc() }");
tryItOut("{export __iterator__;/*infloop*/for(*; 4.; <><x><y/></x></>) {} }");
tryItOut("throw StopIteration;");
tryItOut("L: var __parent__ = <y><z/></y>; const __parent__;");
tryItOut("let (__proto__) { __parent__; }");
tryItOut("/*infloop*/for(<x><y/></x> if (<y><z/></y>); constructor =  \"\" \t; (<x><y/></x>.(__count__))) <bbb xmlns=\"export *;\nthrow 5.0000000000000000000000;\n\"><{constructor}>yyy</{constructor}><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></bbb>");
tryItOut("\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x/>prop) (/{; }");
tryItOut("return\n(<x><y/></x>);");
tryItOut("/*for..in*/for(let prop = __parent__.prop getter= function ()@foo in __parent__ &= [11,12,13,14].filter) M:do continue L; while(( /* Comment */<x><y/></x>) && 0);");
tryItOut("/*infloop*/while(<y><z/></y> .@*:: #1=[#1#]){(__iterator__);__noSuchMethod__ }");
tryItOut("/*infloop*/for(constructor.(.throw(<x/>++/*\n*/)); <x/>; <><{__noSuchMethod__}><ccc:ddd></ccc:ddd></{__noSuchMethod__}></>) return 1e4;");
tryItOut("switch(<x><y/></x>.isPrototypeOf(1e-81)) { case 3: break;  }");
tryItOut("<><x><y/></x></>\n{throw  '' ; }");
tryItOut("L: throw <>\n<x><y/></x></>;");
tryItOut("export __proto__;/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in #3={a:#3#}) return this; while();");
tryItOut("/*for..in*/for(const [__iterator__, true] =  in undefined) {let (constructor, __proto__ = <y><z/></y>) { export __count__; }\ncontinue M;\n }");
tryItOut("return;\n/*infloop*/do /*infloop*/M:while(true)export __noSuchMethod__; while(window.yoyo(<x><y/></x>).yoyo(<><x><y/></x></>.*));\n");
tryItOut("switch(window) { default: constructorcase ({a2:z2}):  }");
tryItOut("with({prop: undefined.valueOf(\"number\")}){{}export delete; }");
tryItOut("const __noSuchMethod__");
tryItOut("{return null; }");
tryItOut("export each;");
tryItOut("/*infloop*/L:for(var ({ __proto__: ({ prototype: __proto__ }), prop: [({ __noSuchMethod__: prop })] }) = ((__proto__ = this))();  /x/g .@*\n; (({ set constructor(__proto__)default: break; return [[]];break; , __parent__: <><x><y/></x></> }))) {return; }");
tryItOut("/*infloop*/for(let [, [constructor, ], , , __proto__] = ({prop: ({ prototype: constructor }) = false, __parent__ getter: (1e-81).__defineSetter__ }); <><!--yy--></>; (0/0)(-3/0) <<= (@foo >>> <x/>)) {M:with((<x><y/></x>.(true)))var __count__; }");
tryItOut("const __count__;");
tryItOut("/*infloop*/for(__noSuchMethod__ = undefined; \n \"\" ; (<x><y/></x>.__count__+=<x/> != __noSuchMethod__)) {let function::__parent__ = <y><z/></y>, __iterator__;export *; }");
tryItOut("if(@foo) { if (__noSuchMethod__ =  /x/ ) \t{ }} else {throw 0x99;yield; }");
tryItOut("/*infloop*/L:for(let [({ __proto__: [({ __count__: ({ function::__noSuchMethod__: ({ __iterator__: __noSuchMethod__ }), __iterator__: [, __proto__, prototype] }) }), , ({ __count__.prop: __iterator__ }), [, , ({ prototype: __iterator__ })']] }), , , , ({ __iterator__: ({ constructor: prototype }), __count__: [].__count__ })] = ([11,12,13,14].map).__iterator__; 3.141592653589793; <y><z/></y>.__defineSetter__(\"set\", (#3={a:#3#} >>> window))) {{} }");
tryItOut(";\nyield;\n\nfor(let y in []);\n");
tryItOut("if(let (__parent__) <x/>) { if ((yield (prop.(<x><y/></x>)))) {{}__proto__ = window, __noSuchMethod__; }} else L: {; }");
tryItOut("if((((uneval(function ([y]) { }[[,]] |= (__iterator__)[-3/0])) if ( /x/g )))) { if (/a/gi(([undefined].map(({}).hasOwnProperty)))) {{}switch(this.__defineSetter__(\"prototype\", ({}).hasOwnProperty)) { default: break;  } } else {}}");
tryItOut("/*for..in*/for((__noSuchMethod__) in ({__proto__: null})) gc()");
tryItOut("{( \"\" );export *; }");
tryItOut("M:switch((\nwindow)) { case 'fafafa'.replace(/a/g, function  __count__ (__iterator__, __parent__) { yield false } ): break; default: /*infloop*/for( /x/ ; null; 1e-81) gc()break; case 2: while((<y><z/></y>) && 0){} }");
tryItOut("yield 5.0000000000000000000000;");
tryItOut("switch(function::prototype = #3={a:#3#}.__parent__) { default: case new (window)(): break; case 9: [1,2,3,4].mapcase 1: return;break; case 0: /*for..in*/for(var constructor in ((function (prop, __proto__) { return __count__ } )(#2=({constructor: <x><y/></x>})))){}break; case 9: return <x/>;break; /*infloop*/for(constructor; 'fafafa'.replace(/a/g, function(q) { return q; }); (<x/> += [1])) const __parent__ = [z1], __iterator__;break; break;  }");
tryItOut("L: if('fafafa'.replace(/a/g, undefined)) { if (window |= 5.0000000000000000000000) {throw true; } else {(1e+81);export set; }}");
tryItOut("/*for..in*/for(let __iterator__(<y><z/></y>) in \nfunction(id) { return id }.yoyo(<><x><y/></x></>)) yield (__count__|=<><x><y/></x></>);");
tryItOut("/*infloop*/M:do if(<x><y/></x>) { if (@foo) throw [[1]]; else {yield this; }} while(((function ([y]) { })() ? <x><y/></x> : window).yoyo(String(undefined,  \"\" )));");
