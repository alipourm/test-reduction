tryItOut(";");
tryItOut("while((true) && 0)false;");
tryItOut("if(0.1 == true) { if ((<><\tx><y/></x></>)[new Function()]) break ;} else break ;");
tryItOut("with({}) { return; } ");
tryItOut("{/*for..in*/M:for(__proto__ in 0/0) export *; }");
tryItOut("{}");
tryItOut("");
tryItOut("/*infloop*/M:while(delete true .@x:: <y><z/></y>){if((__proto__ = __noSuchMethod__.__noSuchMethod__ = ({ get __count__(__iterator__, __noSuchMethod__) { return <x/> } ,  get prototype false (constructor)<><x><y/></x></> }))) { if ((([<y><z/></y>].sort(function (__noSuchMethod__, __count__)@foo)).@*)) {export function::prop; }} else {__parent__ = *::*, __iterator__;constructor } }\fif(([,,])[<x><y/></x>(this, __iterator__)].unwatch(\"constructor\")) { if () (@foo);} else continue L;");
tryItOut("/*for..in*/M:for(let [__proto__, __proto__] = (this.zzz.zzz) in <y><z/></y>.__defineGetter__(\"__iterator__\", function(q) { return q; })) break M;");
tryItOut("M:if(<bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb>) /*infloop*/for(var __parent__ = <y><z/></y>; <x/>; <x/>) {let __noSuchMethod__ = __count__;; }");
tryItOut("{{} const prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const @foo < window['__iterator__'] in [11,12,13,14].sort) continue L;");
tryItOut("/*for..in*/for([prop, prop] = <bbb xmlns:ccc=\"(typeof <x><y/></x>)\"><ccc:eee></ccc:eee></bbb> in 3/0 <<= <>yield;</>) [@foo];");
tryItOut("L: L:switch(<y><z/></y>) { case __proto__.__proto__ = \f<><x><y/></x></>: export __proto__;case 2: case 9: var x::__iterator__, __proto__;break; /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <><x><y/></x></>) (__count__);return; }");
tryItOut("with((setter: constructor.__defineGetter__(\"prop\", (((0.1).watch).apply).apply))){const __iterator__ = __proto__; }\n{window;export *; }\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = [,,] >>>=<x><y/></x> in <><x><y/></x></>) {yield; }\n{}\n");
tryItOut("with({prop: (__parent__.hasOwnProperty(\"prop\"))})(__count__);");
tryItOut("/*for..in*/for(prototype in (((Math.sin).call)(null)))var __count__;");
tryItOut("if(@foo) {break L;; } else {let function::constructor;\t }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prop = false)(<x/>.hasOwnProperty(\"__proto__\")) in (String( '' .*, <><x><y/></x></>))) {__parent__ =  ; const prototype;{__noSuchMethod__ = undefined } }/*infloop*/for(({ __noSuchMethod__: __iterator__, prototype.__count__: ({ prototype: __proto__, prop: ({ __iterator__: function::__noSuchMethod__ }) }) }) = ~constructor.__iterator__ getter= this; __noSuchMethod__ === constructor = [z1,,]; (prop.__lookupSetter__(\"__proto__\"))) try { throw constructor; } catch(__iterator__) { with({}) return function  __noSuchMethod__ () { {} } (__iterator__); } ");
tryItOut("export __noSuchMethod__;throw <x/>\n");
tryItOut("for(let y in [5,6,7,8]) let(__parent__) { break ;");
tryItOut("if(let (__count__ = [15,16,17,18].some([], [<x><y/></x>])) (__proto__.constructor).__lookupGetter__(\"prop\")) { if (3.141592653589793.unwatch(\"constructor\").eval(prototype.__parent__)) {/*for..in*/L:for(let [__parent__, __iterator__] = @foo in 0x99) ; }} else throw (p={}, (p.z = __noSuchMethod__ = <x><y/></x> = <x/>)());");
tryItOut("/*\n*/L:with(<x><y/></x>)default: export *;break; case 5: break; (window);break; \n/*infloop*/while(<x><y/></x>){yield; }");
tryItOut("return false;");
tryItOut("(1.3 > [,,].@foo)");
tryItOut("(this.__defineGetter__(\"__parent__\", [1,2,3,4].map)) < let (__iterator__ = ~-3/0) (constructor%=null.watch(\"constructor\", *)) &= (gc)['__iterator__']");
tryItOut("M:switch(undefined) { default:  }");
tryItOut("window.unwatch(\"prototype\")");
tryItOut("L:if(({ constructor: __count__, prototype: constructor }) = ({ __noSuchMethod__: prototype })) {const __parent__, __noSuchMethod__ = <x/>;M:if(this) export prop; else  if (__parent__)  /x/  }");
tryItOut("gc()");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = constructor.(<x><y/></x>) in (function ([y]) { })()) <x/>;");
tryItOut("{/*infloop*/for(let [__proto__, , , ({ __parent__: __iterator__ }), \f({ constructor: constructor, __iterator__: __parent__ })] = @foo; (new <x><y/></x>()); <x><y/></x>.(constructor)) __proto__; }");
tryItOut("L: *::*\n");
tryItOut("/*for..in*/for(var prototype = prototype.valueOf(\"number\") in (({ get __proto__ prototype (__iterator__) { return false } ,  set prototype(__parent__) { return __proto__; }  }) if (<><x><y/></x></>))) {return; }");
tryItOut("let (__proto__ = ({constructor: undefined.watch(\"__iterator__\", function  __count__ (prop, throw *;)[z1,,]) }).@foo, __proto__ = new null()) { __count__ }");
tryItOut("M:switch(<><x><y/></x></>) { default: export *;break; case this: case 4: throw __proto__; }");
tryItOut("/*infloop*/M:for(let prop; <x/>; <x><y/></x>) continue M\nif(eval(\"0.1\", (1.2e3)())) export prop; else  if ((({__iterator__: prototype}).valueOf(\"number\").valueOf(\"number\"))) {yield;eval } else __count__ = <><x><y/></x>\t</>, __noSuchMethod__ = undefined;");
tryItOut("L:do /*for..in*/for(const __noSuchMethod__ in <y><z/></y>) {} while((<><x><y/></x></> ? undefined : <x><y/></x>) && 0);");
tryItOut("export __noSuchMethod__\n");
tryItOut("/*infloop*/for(let ({ __count__: __proto__ }) = ~null.unwatch(\"__count__\"); __count__.__count__ setter= (1 for (x in [])); ({ constructor: ({ constructor: x::constructor }), delete: ({ __noSuchMethod__: __proto__,  . __parent__: __iterator__  { yield <x/>.__parent__ }  }) }) = __noSuchMethod__) L: {{do ; while((@foo) && 0); }throw <x/>; }");
tryItOut("/*for..in*/for([constructor, __proto__] = ((uneval(0x99))) in 'fafafa'.replace(/a/g, Function)) *::*;");
tryItOut("(__iterator__);\nyield;\n");
tryItOut("{/*infloop*/while(window - <x/> != (\n \"\"  += <x/>)){var prototype; }; }");
tryItOut("L:if(null) {return __parent__; } else  if (<x><y/></x>) export *; else {export __proto__; }");
tryItOut("switch([11,12,13,14].sort) { default: L:switch([, , get, , delete] = prototype.constructor = <x><y/></x>) { default: gc()break;  }break;  }");
tryItOut("do {while((__parent__.yoyo(constructor).watch(\"__proto__\", function(q) { return q; })) && 0){let __count__ = {yield; }, __parent__;continue ; } } while((((.2 = *::*) % (( '' )(1e-81, *::*)\t))) && 0);");
tryItOut("/*infloop*/for((([15,16,17,18].filter([1,2,3,4].slice,  /x/ ))--); [, ({ constructor: __proto__, __noSuchMethod__: delete }), , return <y><z/></y>;] = this.__defineSetter__(\"prop\", function (prop, function::constructor)<x><y/></x>); (__noSuchMethod__.(<x/>.@*))) {/*infloop*/L:for([1,,] = constructor; [11,12,13,14].sort; __iterator__ = 3.141592653589793) null }");
tryItOut("/*infloop*/M:for((__count__ = this @ this.__defineSetter__(\"prototype\", [1,2,3,4].map) + (this.zzz.zzz)); this.__defineGetter__(\"prop\", function  prototype ()\t<><x><y/></x></>); null *= -@foo) break M;");
tryItOut("if(this.zzz.zzz) {; } else  if (\n*::*) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((__noSuchMethod__) in (+)()) {M:if( /x/ ) {export __parent__;return prop; } else  if ( /x/ ) return <x><y/></x>;if(window) {export __parent__;<y><z/></y>; } else {return; } }");
tryItOut("if(prototype) yield; else  if (true.valueOf(\"number\")) {gc()gc() }\nexport *;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = *::* in ([1,2,3,4].slice)(prop|=<x><y/></x>\r) ? __parent__ : __count__ = this) {/*infloop*/do {<x/>;gc() } while(<y><z/></y> ===  /x/ );/*infloop*/for( /x/g ; false;  /x/g ) return; }");
tryItOut("if(false) { if (<><x><y/></x></>) {}} else return;");
tryItOut("/*for..in*/for(prototype in <x><y/></x>) {export *; }");
tryItOut("<x><y/></x>");
tryItOut("if(prop[window]) {yield;const __noSuchMethod__; } else false;\t");
tryItOut("/*infloop*/for((@foo.@foo) for each (prop in <x/>) for each (prop in <y><z/></y>) for (__noSuchMethod__ in  /x/ ) if (this); new Iterator(); (window)(((yield window)), __parent__ = this)) /*for..in*/for(var [__count__, __count__] = __iterator__ in prop) {{}'haha'.split }");
tryItOut("export *;\nconst __proto__ = <x><y/></x>, #3={a:#3#};\n");
tryItOut("/*infloop*/while( \"\" ){let __noSuchMethod__, __noSuchMethod__;gc() }");
tryItOut("/*for..in*/for(let [__count__, constructor] = (window >  /x/g ) in <>\f<x><y/></x></>) throw (function ([y]) { })();");
tryItOut("/*infloop*/for(__count__; [,,z1].propertyIsEnumerable(\"prop\"); !(<x><y/></x>.__count__) || (#1=({__proto__: <x><y/></x>})).__lookupSetter__(\"__noSuchMethod__\")) <x><y/></x>");
tryItOut("{if(eval(\"__count__.(<><x><y/></x></>)\", true.isPrototypeOf(<x><y/></x>))) -1; else  if (new (undefined)(<><x><y/></x></>)\t) {1e-81; } }");
tryItOut("if((<x/>)[window]) { if (<><x><y/></x></> *= true) L: {; } else export *;}");
tryItOut("if(eval(\"throw  /x/ ;\",  \"\" ) < <x><y/></x>) return\n else  if (__proto__(__noSuchMethod__)) {; } else {return <x><y/></x>;return prototype; }");
tryItOut("try { return; } catch(__iterator__ if this) { yield; } catch(prototype) { let __noSuchMethod__ = __parent__; } ");
tryItOut("with({}) { with({}) { throw <x><y/></x>; }  } ");
tryItOut("return __noSuchMethod__;");
tryItOut("{return; }");
tryItOut("export *");
tryItOut("let(__parent__, constructor) { throw __iterator__;\nwith({}) { return; } \n");
tryItOut("switch(__count__.prototype.unwatch(\"__noSuchMethod__\")) { case (([,,] &= [[]])()): while((<><x><y/></x></>) && 0){__count__, __iterator__ = this; }break;  }");
tryItOut("yield (__proto__ = *)\n");
tryItOut("/*for..in*/for([set, __proto__] = <xxx {__proto__}={[11,12,13,14].sort -= (yield  /x/ ) ? (1e81[]) : <x><y/></x>//h\n.prototype = window} /> in (eval(\"if(new (function  prop (prototype, prototype) { return  \\\"\\\"  } )()) export *;\", each for (constructor in *::*)))) /*infloop*/M:for((<x>\f<y/></x>.prototype); (\nprop instanceof <><x><y/></x></>); <><x><y/></x></>.__defineGetter__(\"true\", 'haha'.split)) yield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (__iterator__ = 1.3.eval((void <x><y/></x>)))) {prop = (new (function  __proto__ (let) { return 0 } )(<><x><y/></x></>, __count__)), __proto__ }");
tryItOut("/*infloop*/while((({__count__: (new (*::*)(__noSuchMethod__, prototype)) })))");
tryItOut("yield");
tryItOut("/*for..in*/for(var __iterator__ = (<><><ccc:ddd></ccc:ddd></></>.__defineGetter__(\"constructor\", gc).__proto__ = <y><z/></y>) in [window].some(eval) ? ([] ? <x/> : <><x><y/></x></>) : true >>> __noSuchMethod__) return; const __noSuchMethod__;");
tryItOut("L: {export *; }");
tryItOut("yield 3;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(var __parent__.prop in (<x/>.__lookupGetter__(\"prop\"))) {{return this; } }");
tryItOut("\freturn;\n<x/>;\n");
tryItOut("let (prop) { const prototype = ({a1:1}) }");
tryItOut("with((({prototype: this })))<y><z/></y>");
tryItOut("switch(<y><z/></y>) { default: ;break; ;break;  }");
tryItOut("{continue ; }");
tryItOut("/*for..in*/for(const prototype in *) {var prop = constructor, __count__;let __noSuchMethod__; }");
tryItOut("/*infloop*/do constructor, __noSuchMethod__ = <x><y/></x>; while( \"\"  & -1);");
tryItOut("let(__noSuchMethod__, __proto__) ((function(){var __parent__, __count__;})());");
tryItOut("throw __iterator__;");
tryItOut("with(__count__ = <x><y/></x>)({}).hasOwnProperty");
tryItOut("var __iterator__ =  \"\" \n");
tryItOut("M:do export __parent__; while((prop) && 0);");
tryItOut("/*infloop*/while((eval()))if(*.eval(1e-81)) { if (*) } else gc()");
tryItOut("M:if(this) {(true); } else {/*for..in*/for(let prop in this) return <><x><y/></x></>; }");
tryItOut("with({__proto__: eval(\"(window)[*::*]\", prop === __iterator__) .@ @foo}){\n(@foo);\n }");
tryItOut("do {yield <y><z/></y>; } while(((true[<x/>])) && 0)");
tryItOut("L: {let (prop, prototype = this) { yield *; } }");
tryItOut("{ }");
tryItOut("M:if(<x><y/></x>.(<><x><y/></x></>)) export __proto__;switch(<><x><y/></x></>) { case <><x><y/></x></>: break;  }");
tryItOut("if(true) { if (({a1:1})) const __proto__, prototype = [,,]; else throw <x><y/></x>;}");
tryItOut("M:switch(<xxx>{__proto__}</xxx>) { case (this >= (-1) instanceof (-1)): if( /x/g .__lookupGetter__(\"constructor\") = new ({}).hasOwnProperty(1e81, <//h\nx><y/></x>)) yield  \"\" ; else  if ([15,16,17,18].sort(({}).__lookupGetter__, *::*)) var prototype;/*for..in*/for(__count__ in ((constructor)( \"\" ))) }");
tryItOut("try { return; } catch(prototype) { export __count__; } \n");
tryItOut("throw constructor;\nyield;\n");
tryItOut("do {continue ;let __iterator__; } while((window) && 0);");
tryItOut("L: {/*for..in*/for(let prototype = {} in constructor) function (constructor) { var constructor, constructor = arguments; }  }");
tryItOut("L:switch(<xxx {__count__}={<x><y/></x>.@*} />) { case 0: return;break; if(__count__.constructor) { if (window += <><x><y/></x></>()) {prop;__proto__ = <y><z/></y>, __iterator__; }} else export *default:  }");
tryItOut("throw __count__\nif((uneval(<y><z/></y>))) {let constructor = <y><z/></y>, __noSuchMethod__ = <><\tx><y/></x></>;\f }");
tryItOut("with({__noSuchMethod__: (false !=  \"\" )})export __noSuchMethod__;");
tryItOut("{return; }");
tryItOut("/*infloop*/M:for(new RegExp(__proto__ = __iterator__.yoyo(@foo())); 1.3; (prototype)[3.141592653589793]) {throw (yield ({a1:1})); }");
tryItOut("L: gc()");
tryItOut("/*infloop*/L:do {} while( /x/ .throw([z1]));");
tryItOut("if(<xxx {__parent__}={window} />) {while((<y><z/></y>) && 0)(<x><y/></x>);; }");
tryItOut("/*infloop*/do yield window; while( /* Comment */Exception());");
tryItOut("throw 0/0;");
tryItOut("if((<x><y/></x>.(true))) return *::*; else {{}yield <x><y/></x>; }");
tryItOut("{ }");
tryItOut("let (__parent__, __parent__) { if(<x><y/></x>) yield; else  if (<x><y/></x>) prop = .2; }\n");
tryItOut("this{ if ((new  /x/g (<><x><y/></x></>, *::*))) (<y><z/></y>); else {{return <y><z/></y>;let constructor, __noSuchMethod__; } }}");
tryItOut("if(null @ 0/0) { if (033 >>= this) {var prop;const prop =  \"\" ; }} else {<><x><y/></x></>;continue M; }");
tryItOut("yield;\n/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in <x/>) {throw this; }\n");
tryItOut("L:if((null[*::*]).*) {L:if(<x><y/></x>) { if (window) gc() else export __count__;}/*infloop*/for(const __proto__ = [z1]; prototype; *) yield; } else ;");
tryItOut("__count__");
tryItOut("/*for..in*/for(const constructor = prototype.__proto__ in typeof  /x/g ) {export __noSuchMethod__; }");
tryItOut("/*for..in*/for([__iterator__, prop] = <y><z/></y> in <><!--yy--></>) {(new Function(\"{}\")) }");
tryItOut("/*infloop*/for(const __parent__ = void __count__ = ~let; (prop.isPrototypeOf(__proto__.constructor)); ((null)[ /x/ ] += this.__defineGetter__(\"constructor\", gc))) {{return; }export *; }");
tryItOut("let (prop = ++ /x/ , __count__) { /*infloop*/do {continue L;{} } while(__iterator__.__parent__); }");
tryItOut("with(this.__defineSetter__(\"__parent__\", /a/gi)){}");
tryItOut("/*infloop*/do {yield <y><z/></y>; } while(((window).watch)(@foo));");
tryItOut("yield <x><y/></x>\f;yield <x><y/></x>;");
tryItOut("gc()\n");
tryItOut("if(()) {return; } else {let constructor, x::__proto__;let (prop =  /x/g , __noSuchMethod__) { ; } }");
tryItOut("while((3 || [z1]) && 0){if(true) (<x><y/></x>).__defineSetter__ else  if (<y><z/></y>) {return; } }");
tryItOut("M:switch( /x/g (<x><y/></x>,  '' )) { case <bbb xmlns=\"0x99\"><\n!--yy--></bbb>: case 4:  }");
tryItOut("L:if((<x><y/></x> << [1].__defineGetter__(\"constructor\", (new Function(\"gc()\"))))) with((p={}, (p.z =  /x/g )()))<><x><y/></x></> else  if ([function::__parent__, [({ __count__: __count__, __iterator__: __parent__ }), , [__count__, , ], ], [({ constructor: prototype }), constructor, prop, ]] = <x><y/></x>) {@foo;function::prototype.__iterator__ = __parent__; }");
tryItOut("var __count__, __noSuchMethod__;");
tryItOut("/*for..in*/M:for\t(const [__noSuchMethod__, __noSuchMethod__] = * in window) {prop = <x/>; }");
tryItOut("return <x/>(({a1:1}), window);");
tryItOut("return;\nexport prototype;\n");
tryItOut("(undefined)");
tryItOut("let (__noSuchMethod__ = ( \"\"  = __iterator__.valueOf(\"number\"))) { throw (); }");
tryItOut("M:while((<x><y/></x>) && 0){gc()const __noSuchMethod__ = window; }");
tryItOut("while((new __noSuchMethod__ &= (new /a/gi(({a2:z2})))) && 0)this;");
tryItOut("if(delete ([15,16,17,18].some(function  __count__ (__noSuchMethod__, __parent__)undefined, <x/>)).throw(__noSuchMethod__.prop getter= Math.sin)) with({__count__: * - true})( \"\" ); else  if (__noSuchMethod__.__parent__ = <x><y/></x>.([z1,,])) {(1 for (x in []))undefined; } else /*infloop*/for(constructor =  \"\" ; window; <x><y/></x>) function(y) { yield y; let __count__ = <x><y/></x>,  = <x><y/></x>;; yield y; }");
tryItOut("constructor;\n*::*\n{}\n");
tryItOut("with({ if (++<x><y/></x>): ((1 for (x in []))).call( /x/g , <><x><y/></x></>, *::*).constructor}){-1;export __count__; }");
tryItOut("/*infloop*/L:for(let prototype; ({ __noSuchMethod__: [, , ] }) = *; ({__count__: function::constructor })) /*for..in*/L:for([__proto__, __iterator__] = ([<x/>].some(*) |= ( /x/  == prop)) in <x><y/></x>) {export *; }");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = yield 0x99 in [[]]) L: { }\r");
tryItOut("export *;prototype");
tryItOut("/*infloop*/do {let __noSuchMethod__; } while((x::__noSuchMethod__ = this.__defineGetter__(\"__noSuchMethod__\", Function)));");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) throw __proto__;");
tryItOut("return (p={}, (p.z =  /x/ )());");
tryItOut("/*infloop*/for(const constructor; (yield [11,12,13,14].some); * |= window) {/*infloop*/for(var prototype; this.__defineSetter__(\"__iterator__\", [11,12,13,14].map); *) {throw StopIteration;let prototype, __noSuchMethod__; } }");
tryItOut("if(new *(@foo, *) ? ([15,16,17,18].sort(function (constructor, constructor) { return; } ,  /x/ )) : ([1,,])[<x/>]\n) { if ((#1=[#1#])(4., ({a2:z2}))) {; }} else {const prop;prototype; }");
tryItOut("throw <x/>;__iterator__, __iterator__ = undefined;");
tryItOut("/*infloop*/for((yield 0.isPrototypeOf(this.__defineSetter__(\"prototype\", function(y) { yield y; /*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in <><x><y/></x></>) {throw 1e-81; }; yield y; })));  \"\" ; window /=  /x/g ) {switch((constructor if (#1=[#1#]))) { default: break; break; case (prop.__noSuchMethod__): break; case \n():  }<><x><y/></x></>; }");
tryItOut("const __proto__, prop;{}\n");
tryItOut("if(1.2e3) { if (undefined) {throw constructor; }} else {\t }");
tryItOut("switch(__iterator__ = --<><><x><y/></x></> === window</>.prototype) { default: /*for..in*/for(var constructor in (((constructor).watch)(window.__count__))){export *; }case ([__proto__, , __noSuchMethod__, prop]+=(<><x><y/></x></>.hasOwnProperty(\"__parent__\"))): <x><y/></x>;case 5: if(function(id) { return id }) continue ; else  if (<><x><y/></x></>) {__proto__ = <x><y/></x>, __noSuchMethod__ = <x/>; } else {let __parent__; }break; case 4: throw function(id) { return id };break;  }");
tryItOut("M:switch(<{__parent__}><x><y/></x><ccc:ddd>yyy</ccc:ddd></{__parent__}>.(window .@x:: <x/>).*) { default: break;  }");
tryItOut("if(<bbb xmlns:ccc=\"true--\"><ccc:eee></ccc:eee></bbb>) throw  /x/ ; else  if (undefined) {export *;(<x><y/></x>); } else return 0;");
tryItOut("with({}) with({}) { throw StopIteration; } ");
tryItOut("break ;");
tryItOut("for(let y in []);");
tryItOut("const __parent__\n");
tryItOut("this.zzz.zzz;");
tryItOut("M:switch(((uneval(undefined)))) { default: export __count__;return *::*;break; /*for..in*/for(__count__ = (function ([y]) { })() in #1=[#1#]) prop;break;  }");
tryItOut("const __proto__ = <y><z/></y>, constructor\n");
tryItOut("/*infloop*/do break \n while(<><xxx>{set}</xxx></>.__lookupSetter__(\"__proto__\"));");
tryItOut("//h\nlet __iterator__\nvar prop = <x><y/></x>\n");
tryItOut("{/*for..in*/for(const __count__ in ((function  __count__ (__count__) { return __count__ } )(<x/> ^= <x><y/></x>))){prototype = undefined, prop = @foocontinue ; }return; }");
tryItOut("M:with( /x/ ){const __noSuchMethod__; }");
tryItOut("/*infloop*/while((void *.valueOf(\"number\"))){with({prop: <>\f<x><y/></x></>++}){{}export __iterator__; }/*infloop*/L:for(const constructor; #1=({prototype: ([11,12,13,14].map)}); void ({a1:1}).propertyIsEnumerable(\"__count__\")) {continue L;\n(5.0000000000000000000000);\n } }");
tryItOut("if(this.__defineSetter__(\"prototype\", function  __count__ (__proto__) { return  /x/  } ).throw(__proto__ = *)) Function else  if ((<x><y/></x>.( /x/ ))) /*infloop*/while(@foo)yield;");
tryItOut("if((yield (true.propertyIsEnumerable(\"__iterator__\"))).hasOwnProperty(\"constructor\")) {throw prototype;/*infloop*/while(<y><z/></y>)const __noSuchMethod__ } else  if ((yield window[__noSuchMethod__])) {do yield; while(((({}).__lookupGetter__).call(<x><y/></x>, //h\n<><x><y/></x></>, {})) && 0); } else {/*for..in*/for(__noSuchMethod__ = (<x><y/></x>)(window, @foo) in true) {gc() } }");
tryItOut("let (__iterator__ = this, __iterator__) { \rexport *; }");
tryItOut("with(<x><y/></x>)export *;");
tryItOut("gc()");
tryItOut("L:with(([15,16,17,18].filter(*, (__iterator__.__count__ = [,,]))))with((( '' )()))/*infloop*/for(var __iterator__ = true; __proto__; <x/>) {__proto__, prototype = prop; }");
tryItOut("let(constructor, __parent__ = 3) { ");
tryItOut("if((this.__defineGetter__(\"__parent__\", (new Function(\"throw constructor;\"))))) {const __proto__;export __proto__; } else  if (undefined.__count__) gc() else yield (-0);");
tryItOut("{\t(*::*); }");
tryItOut("with({prop: prop})");
tryItOut("(<><x><y/></x></>);return;");
tryItOut("L: {yield;/*infloop*/do true; while( '' ); }");
tryItOut("gc const __iterator__;");
tryItOut("throw  /x/ \n/*for..in*/for(prototype( /x/ ) in <><x><y/></x></>) {return; }");
tryItOut("do {yield <x><y/></x>;(*).watch } while(((Function).call(gc(), this)) && 0); const __parent__;");
tryItOut("if(({prototype: #3={a:#3#} })) /*for..in*/for(__iterator__ = __iterator__ in <x><y/></x>) throw <x/>; else {return; }");
tryItOut("export *\nexport __iterator__;");
tryItOut("/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = ({ prop: __noSuchMethod__, __parent__: __noSuchMethod__ }) = [] in <><>window</></>) ;");
tryItOut("/*infloop*/L:for(const ({ __iterator__: [prototype, prototype, , __noSuchMethod__, ] }) = __iterator__ = typeof ((__iterator__ = this) && <x><y/></x>.__lookupSetter__(\"prop\")); (((null && 0).hasOwnProperty(\"function::__iterator__\")).__noSuchMethod__); this) break ;");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("with(@foo)");
tryItOut("L:if(@foo) {}");
tryItOut("with({}) { 'haha'.split } ");
tryItOut("with({__count__: <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")}){export prototype; }\n__parent__\n");
tryItOut("M:while((false) && 0)");
