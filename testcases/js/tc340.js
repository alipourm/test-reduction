tryItOut("{throw <x><y/></x>;break L; }");
tryItOut("L: throw (-1);");
tryItOut("__parent__; const __parent__;");
tryItOut("\n");
tryItOut("/*for..in*/for(const __parent__ in ((/a/gi)(__proto__.__iterator__ = <x><y/></x>))){__noSuchMethod__;export *; }\n");
tryItOut("/*for..in*/M:for(prop = <>\f<x><y/></x></> in [,,]) yield [[1]];");
tryItOut("/*for..in*/for(let <><x><y/></x></> in  '' ) break ;");
tryItOut("L: ");
tryItOut("/*for..in*/L:for(const constructor in ((function  __parent__ () { yield -1 } )(1e-81))){yield undefined;let prop;\t }");
tryItOut("({}).hasOwnProperty( /x/ );");
tryItOut("/*infloop*/for(var __count__; <zzz>('fafafa'.replace(/a/g, <x><y/></x>))</zzz>; prop = __iterator__ = []) {var constructor = <><x><y/></x></>, prop; }");
tryItOut("if(this.zzz.zzz.@foo) { if (this.zzz.zzz.watch(\"__proto__\", /a/gi)++) {(false); }} else /*infloop*/while([15,16,17,18].map(/a/gi, null))return 1.3;");
tryItOut("/*infloop*/while(({ __noSuchMethod__: ({ __proto__: __noSuchMethod__ }) }) = 033){L: {export *;Function }do ; while((([11,12,13,14].filter).yoyo((window.throw(*::*)))) && 0); }");
tryItOut("for(let y in []);");
tryItOut("prop.__iterator__ = ;");
tryItOut("/*infloop*/do {export prop;\nvar __parent__ = ;\n } while(({ prototype: get }) = (window for each (__count__ in prototype)));");
tryItOut("/*infloop*/for(const __parent__;  \"\" ; undefined) ");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((new Function(\"export prototype;\")))((uneval(undefined))--))){(__proto__)\n;export prop; } const prototype;");
tryItOut("export *; const __iterator__;");
tryItOut("yield (<y><z/></y> , this);");
tryItOut("if(window.hasOwnProperty(\"__parent__\")) { if (new ({}).__lookupGetter__()) {/*infloop*/M:while(this)return *::*;__noSuchMethod__, __noSuchMethod__ } else with({__proto__: true}){let constructor =  '' ;return; }\n/*for..in*/for(var [__proto__, prop] =  /x/g  in null) {gc()const prop = 3, constructor = *; }\n}");
tryItOut("/*for..in*/L:for(let prop = (Array(<><x><y/></x></>,  \"\" )) in new (__noSuchMethod__)()) throw undefined;\nreturn <><x><y/></x></>;\n");
tryItOut("M:switch(undefined.*) { default: prototype;break;  }");
tryItOut("with({prototype: (eval(\"gc()\", <x><y/></x>))}){ /x/ ; } const __count__");
tryItOut("if( /x/g ) { if (@foo) } else (<y><z/></y>);");
tryItOut("let __parent__, prototype;");
tryItOut("/*for..in*/for(var [set, prototype] = new (function ()prototype = [1,,])() in false) /*infloop*/while(<x/>)yield;");
tryItOut("yield [,,].yoyo(1e+81).__defineSetter__(\"__parent__\", ({a1:1}));");
tryItOut("do L: __noSuchMethod__, prototype; while(((p={}, (p.z = constructor.([1,,]).unwatch(\"constructor\"))())) && 0);");
tryItOut("try { yield #1=[#1#].throw(__iterator__); } catch(__count__) { __proto__ = __proto__; } ");
tryItOut("/*for..in*/for(const __iterator__ = (<><x><y/></x></> &=  /x/  >= (__iterator__ = __noSuchMethod__)) in ({ : __count__, prototype: constructor }) = window ? @foo :  ''  ? prototype = <y><z/></y>.__defineGetter__(\"prototype\", null) : ({}.__defineSetter__(\"prop\", <y><z/></y>))) {const __iterator__ = undefined, prototype = <><x><y/></x></> }");
tryItOut("/*infloop*/M:for((let (__noSuchMethod__, __noSuchMethod__) (undefined.throw(__count__)).unwatch(\"constructor\")); <><x><y/></x></> || __count__; (({ prop: constructor, __noSuchMethod__: __iterator__ }) = ([[1]]\n))) {prop = eval(\"function () { yield ({a1:1}) } ((null)(), <x><y/></x>)\", (({constructor: new Boolean(true, <x><y/></x>)})))(<x><y/></x>);; }");
tryItOut("/*infloop*/M:while(this.__defineGetter__(\"__proto__\", (<><x><y/></x></>).watch)){(<y><z/></y>); }");
tryItOut("/*infloop*/M:while(constructor)let __noSuchMethod__;");
tryItOut("let (prototype) { let __parent__ = 0x99; }");
tryItOut("/*infloop*/for(prototype; true; <x><y/></x>) ");
tryItOut("M:if((new (*::*)(window))) { if (this.watch(\"__parent__\", ({}).__lookupGetter__)) {__iterator__ = <><x><y/></x></>; } else {(window); }}");
tryItOut("{}\nvar constructor = <x><y/></x>, __proto__ =  '' ;");
tryItOut("/*infloop*/for(let constructor;  for each (__proto__ in (uneval(<y><z/></y>)) | (eval(\"\", this))); (__parent__.prop).__defineSetter__(\"function::getter\", (1 for (x in [])))) {throw <x/>; }");
tryItOut("/*infloop*/for(__proto__; \n(__iterator__.__parent__) != new Function() >> 'fafafa'.replace(/a/g, (new Function(\"gc()\"))); new (this.zzz.zzz) >> [z1,,](new (function ([y]) { })()(),  /x/ )) {L:if((p={}, (p.z = *::*)())) ; else  if (!@foo) {prototype = <x><y/></x> } else <ccc:ddd><x><y/></x></ccc:ddd> }\n/*for..in*/for(let.__proto__ in ((({}).__lookupGetter__)(constructor.((({prop: __parent__}))))))export __noSuchMethod__;");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M:var  = <x><y/></x>, __iterator__; for  each(__parent__ in window) return #1#;");
tryItOut("(<x><y/></x>); const __noSuchMethod__");
tryItOut("{if(<y><z/></y>) break M; else  if (null) {Math.pow{} } else __count__ = *, let;var __iterator__ =  '' ; }");
tryItOut("");
tryItOut("export prop; const __iterator__;");
tryItOut("with({constructor:  \"\" })L:while((let) && 0){yield __count__; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] =  in ((<><x><y/></x></>)[<x/>])) {/*infloop*/while(new (Math.pow)()){/*infloop*/while(__parent__){break L; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in @foo.valueOf(\"number\")) {{{} }; }");
tryItOut("/*for..in*/for(__noSuchMethod__((-0)) in ((function (__noSuchMethod__, __noSuchMethod__) { yield return (.2.throw(undefined)) } )(new (Function)((( /x/ )[<><x><y/></x></>]))))){if(<y><z/></y>) yield <x><y/></x>; else  if (<><x><y/></x></>.__defineGetter__(\"__parent__\", ((new Function(\";\"))).apply)) {export *; } else {return; }yield; }");
tryItOut("/*for..in*/for(const __parent__ in ((eval)( /x/ ))){const constructor =  /x/ ;export *; }");
tryItOut("/*for..in*/L:for(1e81 in ((Math.sin)(prop.constructor.__proto__ = true)))(*::*);");
tryItOut("return;");
tryItOut(";\f const __parent__;");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __count__: ({ __proto__: [], __count__: prop }), prop: __proto__ }) }) = (this.__defineSetter__(\"#1=[*::*]\", ({}).hasOwnProperty\t)) %= 'haha'.split.__parent__ = this.__defineSetter__(\"prototype\", (<>return;</>).__defineSetter__).__proto__; ((yield <x><y/></x>[<><x><y/></x></>])); eval(\"new (eval(\\\"getter\\\", null))((this++))\", (<y><z/></y>.@*.*))) return;");
tryItOut("{ }");
tryItOut("throw StopIteration;");
tryItOut("if((prop = <x/>)) {break M;export constructor; } else  if (*.unwatch(\"__noSuchMethod__\")) {evalMath.pow } else {return;{} }");
tryItOut("L: if(*::*.__lookupGetter__(\"__count__\")) { if (((constructor = <><x><y/></x></>) & (<x/> for each (__noSuchMethod__ in [1,,])))) break M;} else {yield <y><z/></y>; }");
tryItOut("return;");
tryItOut("/*infloop*/do {;\flet __iterator__ = window, prop = __noSuchMethod__; } while([[1]]);");
tryItOut("M:if(typeof __noSuchMethod__) {(<x><y/></x>); } else  if (__parent__ = prop) {if(<x><y/></x>) const __noSuchMethod__ = __proto__, prop =  /x/ ; else  if (<x><y/></x>) throw <><x><y/></x></>;return <y><z/></y>; }");
tryItOut("if(*::*) {export *;break ; } else  if ( /x/ ) break ;");
tryItOut("L:if(+<y><z/></y>()) {export __iterator__; }");
tryItOut("L:switch( \"\"  | *) { default: return; }\n/*infloop*/M:for(__proto__ = prototype in <x><y/\t></x>; ({__noSuchMethod__: <x><y/></x> ? null : this}); (this.zzz.zzz)) ;");
tryItOut("if(null) { if (~<y><z/></y>) L:with({constructor:  /x/g })this;} else {export __parent__; }");
tryItOut("let constructor, __count__ = this;");
tryItOut("let (__proto__) { for(let y in []); }");
tryItOut("if(__iterator__.(*)) {/*infloop*/M:for(let constructor; yield __noSuchMethod__; __proto__.(eval(\"throw null;\", new false( /x/g , <><x><y/></x></>)))) {return;\nvar prototype = __proto__, setter = constructor;\n } }");
tryItOut("with({__noSuchMethod__: *::*})let ([constructor, __noSuchMethod__, , __noSuchMethod__] = ((new Function).apply(constructor, <><x><y/></x></>)), __iterator__ = <><x><y/></x></>) { throw [z1]\n goto  }");
tryItOut("");
tryItOut("/*infloop*/for(__proto__ = __proto__; 'fafafa'.replace(/a/g, function  constructor (__iterator__, __proto__) { export *; } ); (__parent__.hasOwnProperty(\"__proto__\"))) {L:while((@foo) && 0){var prototype; }yield <><x><y/></x></>; }");
tryItOut("/*infloop*/do gc() while(<><x><y/></x></>)\n\nyield;\n");
tryItOut("/*for..in*/L:for(prop in #3={a:#3#}) {yield; }\n");
tryItOut("prop = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) ;");
tryItOut("if(<x/> ? __count__ : window) { if ((<><x><y/></x></>.watch(\"__parent__\", function  __parent__ (__noSuchMethod__) { yield <x/> } ))) {{} } else }return;");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ in ((([1,2,3,4].map).call)(new 3.141592653589793())))if(this) { if (<><x><y/></x></>) return; else return __iterator__;}");
tryItOut("yield;");
tryItOut("try { let(({ function::constructor: ({ __parent__: ({ constructor: __noSuchMethod__, __proto__: __proto__ }), __proto__: ({ __count__: __count__, __iterator__: prototype }) }), prototype: ({ __noSuchMethod__: ({ yield: __noSuchMethod__, __count__: __parent__ }) }) }) = <x><y/></x>.prototype, prop) ((function(){try { for(let y in []); } catch(__count__) { let(__iterator__) ((function(){return;})()); } })()); } catch(prop if arguments.propertyIsEnumerable(\"constructor\")) { new (<y><z/></y>)(constructor, *::*) = __count__; } catch(__parent__ if ({ prop: [, __iterator__, , ({ __count__: ({ __proto__: prototype, prop: __noSuchMethod__ }), __noSuchMethod__: (#1# % (#2=0x99)) })], __iterator__: __iterator__ }) = prototype =  \"\" .hasOwnProperty(\"constructor\") &= prop.__proto__ = Iterator(<x/>,  /x/g )) { yield (([[,,]].sort((new Function(\"([1,,]);\"))) >= __iterator__) || (@foo.yoyo(<y><z/></y>))); } catch(constructor) { return; } finally { {}/*\n*/ } ");
tryItOut("M:while((__parent__) && 0)<y><z/></y>;");
tryItOut("L: let (__parent__ = <x><y/></x>, prototype = <x><y/></x>) { export *; }");
tryItOut("for(let y in []);");
tryItOut("export *;");
tryItOut("{/*for..in*/M:for(const this in (((*::*).__defineSetter__)(((Math.sin).call(__proto__, ))))){export *;yield; } }");
tryItOut("/*for..in*/L:for(const __count__ in ((\ffunction(y) { yield y; M:switch(@foo) { case *::*: break;  }; yield y; })((5.0000000000000000000000 .@x:: [,][.2 /=  \"\" ]))))yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in <x><y/></x>) {export *; }");
tryItOut("throw __proto__;");
tryItOut("__parent__, prop");
tryItOut("this.zzz.zzz;");
tryItOut("if(((\nwindow :: ({__noSuchMethod__: [1], <ccc:ddd></ccc:ddd> getter: Function })) - __proto__())) {if( \"\" .__defineGetter__(\"__parent__\", (Function).call)) export __iterator__; else {} } else  if (undefined) {export function::prototype; } else /*infloop*/for(this; <><xxx>{__proto__}</xxx></>; window) ");
tryItOut("with({}) for(let y in [5,6,7,8]) gc()");
tryItOut("with({({ function::prototype: [__noSuchMethod__, __noSuchMethod__, , ] }): })let constructor;");
tryItOut("if() ");
tryItOut("M:if(false) {export *; } else {export *; }");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(__iterator__ = [<y><z/></y>].some((1 for (x in [])))['__noSuchMethod__'] = (this.__defineSetter__(\"__proto__\", *::*) + \t#2=[(({}).__lookupGetter__)]) in ({ __proto__: ({ __noSuchMethod__: [], __iterator__.__iterator__: ({ prop:  }) }), prototype: [__count__, __count__] }) = (__noSuchMethod__.unwatch(\"__iterator__\"))) {/*\n*/const __noSuchMethod__ = <><x><y/></x></>\ngc() }");
tryItOut("for(let y in []);");
tryItOut("{};\n__count__;\n");
tryItOut("if( /x/g --) {let prototype = __proto__;<><x><y/></x></>; } else  if ((<><x><y/></x></>.throw(1e81)) - *) /*for..in*/for(const __iterator__ in <x><y/></x>) {throw 1e-81;(<y><z/></y>); } else {return 5.0000000000000000000000;gc() }");
tryItOut("{switch((<><x><y/></x></> .. *::*)) { case 4: break;  } }");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = __proto__.__noSuchMethod__ =  /x/g .unwatch(\"__parent__\") in let (__proto__\f) <y><z/></y>) export __iterator__;");
tryItOut("__noSuchMethod__, prototype;");
tryItOut("if(eval(\"__proto__ = ((uneval([z1,,])))\", <x><y/></x>.(undefined))) {M:if(<x><y/></x>) yield; else  if (1e-81) {yield <x><y/></x>; } else {<x/>; } } else  if ((++false)) {(<x/>); }");
tryItOut("if(function(id) { return id }) {yield;gc() } else  if (-1) {return; } else {throw <x><y/></x>;return; }");
tryItOut("/*infloop*/do {var __parent__ =  /* Comment */1.2e3 |= ({a1:1});if(prototype) { if (<x><y/></x>) ; else export *;} } while((({ set prototype(__proto__, __iterator__) { return -1.__lookupSetter__(\"__count__\") } ,  get __proto__ constructor (constructor, __iterator__) { return eval(\"const __noSuchMethod__;\", eval(\"yield;\", *)) }  })));");
tryItOut("switch(this.zzz.zzz) { case <x/>['prop']:  }");
tryItOut("M:switch(-\t<><><x><y/></x></>;</>.isPrototypeOf(eval(\"null\", .2)).__defineGetter__(\"prototype\", function  prop (__proto__)(-.isPrototypeOf(x::__count__ = null)))) { default: (prototype)case 8: __iterator__ =  /* Comment */__proto__; }");
tryItOut("export *\nconst yield;");
tryItOut("M:if('fafafa'.replace(/a/g, /a/gi)) {const __iterator__, __proto__; }");
tryItOut("if(true) return; else  if ([[1]]) ; else yield <x/>;");
tryItOut("/*infloop*/do L: <y><z/></y>; while((<x/> <<= -3/0\r).call(\n /x/ , (({ get prototype() { yield (-0) } , __count__: __count__ }))));");
tryItOut("/*infloop*/do {const __parent__; } while((__proto__.__iterator__));");
tryItOut("/*for..in*/for(let __iterator__ in (([1,2,3,4].slice)(new @foo()))){export prop;return; }");
tryItOut("{let __count__ = this;let __noSuchMethod__; }\nwhile((({a2:z2})) && 0){continue M;export *; }");
tryItOut("L: {with({<><x><y/></x></>: 3});\nreturn;\n; }");
tryItOut("do  while(((#1=(false *= <y><z/></y>).__iterator__ = (<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")))) && 0);");
tryItOut("with(({prototype: <employee id=\"1\"><name>Joe</name><age>20</age></employee> }))/*infloop*/do {} while(*);");
tryItOut("with(*::*)");
tryItOut("with({}) try { for(let y in []); } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(var prototype in ((@foo)(<x><y/></x>))){yield; }");
tryItOut("with({__iterator__:  /x/  ^ <x/>}){throw (#1=[*::*]);M:with({__parent__: *})export *; const __iterator__; }");
tryItOut("/*infloop*/do {yield; } while(<x/>);");
tryItOut("let __iterator__ = <y><z/></y>, __proto__ = null;");
tryItOut("let (__noSuchMethod__, __count__) { export *; }\nexport __noSuchMethod__;");
tryItOut(";");
tryItOut("let(__noSuchMethod__ = *::*, prop) { let(constructor) { for(let y in [5,6,7,8]) __iterator__ = __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <y><z/></y>) ");
tryItOut("with({__parent__:  /x/g })*::*;\nconst __parent__, __noSuchMethod__;\n");
tryItOut("L:switch(#3={a:#3#}) { case 9: break; default: /*for..in*/L:for(let __parent__ = __iterator__\n.yoyo(__count__ = *::*) in  for (__iterator__ in window) if ([[1]])) break ;break; case (this.__defineSetter__(\"__noSuchMethod__\", function::constructor.__noSuchMethod__ = <><x><y/></x></>)): case 3: case #1=[*]: with({}) return;case 6: /*infloop*/for(__count__;  /x/ ; __noSuchMethod__) {export *; }\nbreak; case (yield false === window): null;case ((Number())[function(id) { return id }]): return prototype;break; case (((this.valueOf(\"number\")))(__iterator__.prop)): var prototype = null, window\nvar constructor = null, x::__parent__;break; case ({})(<y><z/></y>) = (new function(q) { return q; }()): case function::prop = prototype: break; yield;break;  }");
tryItOut("{yield; }");
tryItOut("do return; while((window) && 0);");
tryItOut("{if(Math.sin(this, [z1])) { if ( for each (__proto__ in __iterator__)\n) throw [,,];} else ; }");
tryItOut("throw __iterator__;");
tryItOut("while((<y><z/></y>) && 0)/*\n*/{return window; }");
tryItOut("return");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) {if((-0)) {return __noSuchMethod__; } else  if ([[1]]) {throw  \"\" ;continue M; } else {{}gc } } const prop;");
tryItOut("M:if((<x><y/></x>.( /x/ ))) { if (1e-81) /*for..in*/for(var [constructor, prop] = export prototype; in prototype) {gc(); } else {return <x/>; }}\n/*infloop*/while(__noSuchMethod__ = <x><y/></x>){var <x><y/></x>, prototype;return undefined; }/*for..in*//* nogeckoex bug 349964 */ for \f each(__iterator__ in <x/>) {yield window;({}).hasOwnProperty }");
tryItOut("switch(window) { default: break; case 8: break;  }");
tryItOut("let (__parent__, prop = __iterator__%=this.__noSuchMethod__) { /*infloop*/for(<><x><y/></x></>; <x><y/></x>;  \"\" ) {(<x><y/></x>); } }");
tryItOut("{M:if(false) gc() else  if (function(id) { return id }) return;switch(delete (({}).hasOwnProperty)(<x/>)) { __proto__ = <y><z/></y> } }");
tryItOut("yield <y><z/></y>;");
tryItOut("/*for..in*/for(var __proto__ =  in [,,]) {window; }\n");
tryItOut("const __count__ = *, constructor = {};");
tryItOut("throw <y><z/></y>");
tryItOut("with(<><bbb xmlns=\"__count__ =  /x/ \"><xxx>{({a2:z2})}</xxx> </bbb></>)/*infloop*/do [z1,,]; while(#2=[<x><y/></x>]);");
tryItOut("/*infloop*/for(let __count__; (prop = <y><z/></y>); (yield __iterator__ =  /x/ )) {{; } }");
tryItOut("if(<><!--yy--></>) {if( /x/ ) var prototype\nif((__parent__.__noSuchMethod__)) { } else {(); } }");
tryItOut("M:while((<><>function ([y]) { } .@*:: *::*</></> ? false[<x/>] : prop.__parent__) && 0){export prototype/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __iterator__) [1,2,3,4].map }");
tryItOut("for(let y in [5,6,7,8]) yield yield *;");
tryItOut("while(((*::* >>> false)[(<><x><y/></x></> === <x/>)]) && 0)/*infloop*/L:while(prop = #1=[#1#]){break ; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; undefined; ((__count__.(({a1:1}))).eval((__count__)))) {{} }");
tryItOut("M:if([1,2,3,4].slice) { if (({})) gc()} else gc()");
tryItOut("let(__proto__, __proto__) ((function(){export constructor;})());");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(let prop = (this) in  /x/g ) {{}\nFunction }");
tryItOut("/*\n*/while((3.141592653589793) && 0)return;");
tryItOut("while((new (new <x/>(4., <><x><y/></x></>)((this.zzz.zzz), *::*))) && 0)__parent__ = @foo;");
tryItOut("/*infloop*/do const __proto__; while(window);");
tryItOut("return");
tryItOut("yield\n");
tryItOut("do {export *; } while((prop%=4.) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [__noSuchMethod__] in constructor) {/*infloop*/while(window.isPrototypeOf(#3={a:#3#}))if(#1#) {(<>\n<x><y/></x></>).applythrow <x><y/></x>; } else  if (window) function  __proto__ (__parent__, function::constructor)3/0 }M:if(<y><z/></y>) return; else yield 5.0000000000000000000000;");
tryItOut("<x><y/></x>;");
tryItOut("if(3.141592653589793) return; else export __iterator__;");
tryItOut("switch(__iterator__ .@ prototype = @foo) { case 1: break; break; return (p={}, (p.z = (*::*)(<><x><y/></x></>,  /x/ ))());if(5.0000000000000000000000) {continue ;export constructor; }export prototype;\tbreak; default: break; case 7: let (constructor = <x><y/></x>, __iterator__) { yield <y><z/></y>; }case (Math.sin).call(({a1:1}), false): if((constructor = [,,z1])) \tyield 1e4; else  if (({ __count__: __parent__ }) = __parent__(<x><y/></x>)) /*infloop*/L:for(let __parent__ = <y><z/></y>; <y><z/></y>; <x><y/></x>) (__count__);break;  }");
tryItOut("if(prop *= <x><y/></x>) { if (new (Math.sin)(, __noSuchMethod__)) throw window;} else  '' ;");
tryItOut("try { L: {__noSuchMethod__(-1); } } finally { return; } ");
tryItOut("/*for..in*/for(let [prototype, function::__noSuchMethod__] = this in <y><z/></y>.hasOwnProperty(\"__count__\")) {return <y><z/></y>; }");
tryItOut("/*for..in*/for(var [__iterator__, __noSuchMethod__] = new <x><y/></x>( /x/ ) in (true.__count__ = *::*.__proto__)) return;");
tryItOut("{return <x><y/></x>; }");
tryItOut("/*for..in*/for([__parent__, constructor] = [z1,,] in <x/>) return  \"\" ;");
tryItOut("if(<x><y/></x> , __parent__) <!--yy--> else {return; }");
tryItOut("for(let y in [5,6,7,8]) with({}) const ({ __iterator__: constructor }) = <y><z/></y>.__defineGetter__(\"__iterator__\", function(y) { yield y; export __iterator__;; yield y; });");
tryItOut("L: {__noSuchMethod__;continue L; }");
tryItOut("L: {{} }");
tryItOut("try { {} } finally { throw __parent__; } ");
tryItOut("{/*for..in*/L:for(let prototype in *) {return ({}); } }");
tryItOut("yield;\n/*for..in*/M:for(let __proto__ = <><x><y/></x></> in __noSuchMethod__) __iterator__, __parent__;\n");
tryItOut("M:with({__parent__: prototype = (-0)}){;return <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for([constructor, __noSuchMethod__] = (eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in false) {const __count__; }\", ( \"\"  <<= function::__proto__ = <y><z/></y> = @foo))) in (prototype%=<x/> for each (__count__ in false.unwatch(\"__count__\")))) {throw constructor; }");
tryItOut("do if(getter) {{} } else  if (4.) yield 1.2e3; else  while((@foo++) && 0);");
tryItOut("if(-false) prop else ");
tryItOut("return;");
tryItOut("{{}/*for..in*/for(var __parent__(window) in (([1,2,3,4].slice)(this.__defineSetter__(\"__noSuchMethod__\", (<y><z/></y>).watch))))with(<y><z/></y>){<y><z/></y>; } }");
tryItOut("/*infloop*/L:do  while(<><{__count__}>yyy</{__count__}></>);");
tryItOut("/*for..in*/for(prop in ((Math.pow)('fafafa'.replace(/a/g, (1 for (x in [])))))){/*infloop*/for(const ({ __iterator__: ({ __noSuchMethod__: constructor, prototype: prototype }) }) = ([undefined <<=  /x/g ].filter((function (__count__, __noSuchMethod__) {  } ).apply)); ; <x><y/>//h\n</x>.hasOwnProperty(\"function::__noSuchMethod__\")) {if(this)  else  if (constructor) export *; }/*for..in*/M:for([__parent__, prototype] = <x/> in <x/>) var __noSuchMethod__ =  /x/ , __parent__ = null; }");
tryItOut("if( /* Comment */<y><z/></y> >= <x><y/></x>) { if (__iterator__.prop setter= <><x><y/></x></>) { }} else case <x/>: case <><x><y/></x></>: break; ");
tryItOut("with(( /* Comment */constructor = window)){yield; }");
tryItOut("/*for..in*/for(let constructor = (__parent__.__parent__ = <><x><y/></x></>) in @foo) ");
tryItOut("M:with({__parent__: new (<><>*</></>)(eval(\"(undefined);\", __proto__), ({ get __noSuchMethod__(__noSuchMethod__) { (<x><y/></x>); }  }))}){do function(q) { return q; } while((new Exception( /x/g , [z1,,])) && 0); }");
tryItOut("/*for..in*/for(const <employee id=\"1\"><name>Joe</name><age>20</age></employee> in (( /* Comment */-1)( ''  >>> [,].isPrototypeOf((uneval(<><x><y/></x></>))))))\n");
tryItOut("/*infloop*/while((yield constructor.prop)){{}throw __iterator__; }");
tryItOut("prototype");
tryItOut("/*for..in*/for(var constructor in (((new Function(\"constructor = <x><y/></x>, __proto__ = <><x><y/></x></>;\"))\t)([1,,]))){__parent__ = <><x><y/></x></>, prop = @foo; }");
tryItOut("switch(([11,12,13,14].filter))\f { default: {throw window; const __noSuchMethod__; }if((<y><z/></y>)(undefined)) { if (<><x><y/></x></>.__parent__) yield;} else let __count__ = prop setter: (*::*).apply, __parent__;break;  }");
tryItOut("switch(([, prototype, function::prototype] =  /x/g  == false)) { case (({ __noSuchMethod__: __proto__ }) = (new (undefined)(5.0000000000000000000000, [[1]]))): let (prototype =  '' ) { (<><x><y/></x></>); }break; break;  }");
tryItOut("\tswitch((p={}, (p.z = <x><y/></x>)())) { default: let = *;break; case 3: {} }");
tryItOut("function::__noSuchMethod__");
tryItOut("/*infloop*/for(const __proto__; (Boolean().yoyo(prototype.hasOwnProperty(\"__noSuchMethod__\"))); <y><z/></y>.yoyo(1.2e3)) /*for..in*/L:for(let prototype in true) #1=[#1#]");
