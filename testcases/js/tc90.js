tryItOut("M:if(@foo >>> ((<x/> for ( in 0/0)))) {{} } else  if (0.1\n) {<x><y/></x>; } else gc");
tryItOut("switch(arguments) { default: return;case <><zzz>undefined</zzz></>: break; case let (__parent__ = *)  '' : {throw prototype; /x/ ; }break; case ([15,16,17,18].map(new Function, *) & __proto__%=__noSuchMethod__): break; case new Function( '' ,  '' ): break; return;break;  }");
tryItOut("var __noSuchMethod__, prop = __parent__;");
tryItOut("/*for..in*/for(const __iterator__ in ( '' .prototype)) {with({}) export *; }\nlet(__noSuchMethod__) { this.zzz.zzz;");
tryItOut("/*for..in*/for(<ccc:ddd><xxx>{@foo}</xxx> </ccc:ddd> in -1) {/*for..in*/for(const (__count__.__defineGetter__(\"__iterator__\", function(y) { yield y; var __iterator__, __count__ = *;; yield y; })) = (null)(prototype,  '' ).__proto__ = new Object() in (window / <><x><y/></x></>)) {yield 0;export prototype; }\tswitch((uneval(<><x><y/></x></>))) { case 0: 3.141592653589793;break;  }\t }");
tryItOut("L:with((((yield window) for each (__parent__ in <><x><y/></x></> <= undefined)\t))[({ __noSuchMethod__: [prototype], constructor ||  '' : ({ __parent__: prop }) }) = [,,]--]){yield <x><y/></x>; }");
tryItOut("/*for..in*/for(({ prototype: __count__, __proto__: __iterator__ }) in (((((yield false).yoyo((__count__.__noSuchMethod__ = window.@*)))).watch)(<><><bbb xmlns:ccc=\"-0 for each (__proto__ in @foo)\"><ccc:eee></ccc:eee></bbb><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd><\t/></>))){gc()\nyield;\n;\n__count__ = __count__; }");
tryItOut("if(__parent__.__noSuchMethod__) { if ('fafafa'.replace(/a/g, ({}).__lookupGetter__)) {break M; } else {return; }}");
tryItOut("throw StopIteration;");
tryItOut("(#3={a:#3#}).apply");
tryItOut("/*infloop*/for(prototype = window; <x><y/></x>; null) {yield *::*; }");
tryItOut("/*infloop*/for(prototype = (({constructor: (++window),  get prototype(__proto__)yyy })); this.zzz.zzz; __parent__ ? __iterator__ = [,] :  /* Comment */<x><y/></x>) {return\n }");
tryItOut("while(( \"\" ) && 0){break M; }");
tryItOut("/*for..in*/for(var {}['__noSuchMethod__'] in ((({}).__lookupGetter__)(((this for each (prop in this))))))return prototype;");
tryItOut("throw function(id) { return id };");
tryItOut("switch((__iterator__.prop setter= function(q) { return q; })) { default: break; case (eval).call(<><x><y/></x></>, <x><y/></x>.__proto__ = [[1]], window): break; case 8: M:if(this) __parent__, prototype; else ;break; case (new Boolean()): with({}) { let(prop) { for(let y in [5,6,7,8]) export __proto__; } case 1: {/*infloop*/M:for(<><x><y/></x></>; false; <><x><y/></x></>) {return null; } }case ({ set prop __noSuchMethod__ (__noSuchMethod__)@foo }): case (new (this.__defineSetter__(\"__parent__\", gc))(null.__defineGetter__(\"__count__\", ({}).hasOwnProperty))): if(undefined) { if (<x/>) export __parent__;} else {export *;<><x><y/></x></>; }break; break; [z1];break;  }");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = constructor.__noSuchMethod__ = @foo in __iterator__) {export __count__; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(({ prototype: [] }) = (new ((function  __iterator__ (__iterator__) { return <><x><y/></x></> } ).apply)(<><x><y/></x></> instanceof __noSuchMethod__ ? (this.zzz.zzz) : __proto__.(@foo), ((uneval(<x><y/></x>)))))) {if(0) {let __parent__;{} } else var __parent__;return; } else {return ((([11,12,13,14].some))[<><x><y/></x></> <<= __iterator__]);__proto__ = <>prototype: <><x><y/></x></></>; }");
tryItOut("/*infloop*/for((prop.hasOwnProperty(\"__parent__\").eval((Error(undefined) |= !033))); *::*.yoyo(<><x><y/></x></>);  /x/g ) {};");
tryItOut("/*infloop*/do {export prototype; } while( \"\" );");
tryItOut("continue L;");
tryItOut("/*infloop*/M:for(const ({ __count__: ({ __parent__: __proto__ }) }) = <>yyy</>; __noSuchMethod__.(true.__proto__); <x><y/></x> .@ *::*) {L:if((new @foo())) const __proto__ = <x/>, __iterator__ = window; else  if (false.watch(\"constructor\", (1 for (x in [])))) {let __noSuchMethod__ = 0/0; } else export constructor;return <x/>; }");
tryItOut("return []\n{return window;gc() }");
tryItOut("/*infloop*/\tL:for(var prototype; prototype = ({ __iterator__: prop, __parent__: __count__ }) = [15,16,17,18].map(function (__parent__)true, 033); \nIterator()) {var __proto__ =  /x/g ;if(__parent__ = __iterator__) { if (this.__defineSetter__(\"prop\", (\f@foo).__defineSetter__)) {__iterator__gc() } else export *;} }");
tryItOut("/*infloop*/for([] = this.zzz.zzz; (new Number().throw([,,].throw( '' ))); [,,z1]) {continue ;/*for..in*/M:for(let [constructor, __proto__] = @foo in __count__) prop = {}; }");
tryItOut("/*infloop*/while((true .@*:: <\t><x><y/></x></>))return;");
tryItOut("M:if((prototype.__iterator__ = <x/> if (-3/0))) continue M; else ");
tryItOut("if(({__iterator__: 033[this], constructor: eval(\"{continue ;return @foo; }\", 0.1) })) {; }");
tryItOut("{*::*\nwith({}) gc() }");
tryItOut("{}yield;");
tryItOut("return; const __count__;");
tryItOut("with({}) { try { break M; } catch(__count__) { gc() } finally { yield; }  } ");
tryItOut("/*for..in*/L:for(let __count__ in ( ''  <= [])) gc()");
tryItOut("M:if(({prototype: this})) {let __iterator__; } else  if ( /* Comment */ '' ) {export *;throw function(id) { return id }; } else yield;");
tryItOut("/*infloop*/for((1e-81.__lookupSetter__(\"prop\")); ({ __noSuchMethod__: [, , __proto__] }) = __iterator__; ((uneval(((<x><y/></x>)(*, <><x><y/></x></>).watch(\"function::prop\", Function))))).unwatch(\"__noSuchMethod__\")) var __parent__ = [];\nexport __iterator__;\n");
tryItOut("/*for..in*/for(var __count__ in @foo) let constructor, __count__;");
tryItOut("with({}) let(__iterator__, __count__) ((function(){return;})());");
tryItOut("while((({prototype: (uneval(<x/>)),  set __count__() { yield __proto__ }  })) && 0){if(constructor) { if (true) {;yield; }\f else {;export prop; }}function  prototype () { return 1.3 } \n/*infloop*/M:for(const __noSuchMethod__ = window; [,,z1]; *) gc() }");
tryItOut("return __noSuchMethod__\nreturn;");
tryItOut("<x/>;yield <x/>; const __noSuchMethod__;{return this;yield *; }");
tryItOut("for(let y in [5,6,7,8]) return constructor = setter\n;");
tryItOut("/*for..in*/for(const constructor = (RegExp()) += (new (__noSuchMethod__)(<y><z/></y>)) in (({__iterator__:  /x/ , prototype setter: [1,2,3,4].slice })[\n<><x><y/></x></>])) /*infloop*/do let __noSuchMethod__ = [[]]; while(__parent__);");
tryItOut("{/*for..in*/for(@foo in [1,,]) {const __noSuchMethod__ = <><x><y/></x></>;break M; } }");
tryItOut("if(this.zzz.zzz) export __iterator__; else  if ((this.yoyo( \"\" ).__iterator__) /= (prototype = __iterator__)) {({ __iterator__: prototype, __proto__: prototype }); } else {export *;; }");
tryItOut("gc()");
tryItOut("L: prototype setter: function(y) { yield y; break M;; yield y; }");
tryItOut("/*infloop*/for(var <><x>//h\n<y/></x></>.__count__ = (<><x><y/></x>/*\n*/</>['__count__']-=<><x><y/></x></>); __proto__; prop = *::*) {Math.sin }");
tryItOut("/*infloop*/do {return <x/> } while(({ __proto__: <y><z/></y>, __noSuchMethod__: __proto__ }) = *.hasOwnProperty(\"constructor\") instanceof __proto__.eval(prop));");
tryItOut("if(((\nnull))().__defineGetter__(\"constructor\", function (constructor)(__proto__.__parent__))) { if (#2=window %= <><x><y/></x></>.valueOf(\"number\")) {M:if( '' .@*) continue ; else  if (1.3.throw(<x/>)) {break ; } } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ setter: (1 for (x in [])) in this) {gc }([,,z1].watch(\"__iterator__\", (new Function(\"let __parent__;\"))));return; }}");
tryItOut("with(eval(\"/*infloop*/M:for((window < <x><y/></x>) += (<x><y/></x> === <><x><y/></x></>); (uneval()); (<x><y/></x> === <y><z/></y>)) {get = __noSuchMethod__;; }\", (__noSuchMethod__ = <x><y/></x>)['constructor'] = <x><y/></x>.__count__ = *::*))return <x><y/></x>;");
tryItOut("prototype\n");
tryItOut("L:if(((p={}, (p.z = (*))()))[* ::  \"\" ]) throw window;\n/*infloop*/for(<><x><y/></x></>; *; <><x><y/></x></>) let __proto__, __count__;\n else  if (<><zzz>void (prototype.(__noSuchMethod__).valueOf(\"number\"))</zzz></>) {this.zzz.zzz; } else break ;");
tryItOut("if((__parent__ =  /x/g )++) throw <\n><x><y/></x></>; else  if (this.zzz.zzz) { } else {{(new Function(\"throw <><x><y/></x></>;\")){} }eval }");
tryItOut("with({}) throw __iterator__;");
tryItOut("<!--yy-->");
tryItOut("with({__iterator__: <x/>}){yield; }");
tryItOut("/*infloop*/");
tryItOut("{;([z1]); }");
tryItOut("with(<y><z/></y>.@*)gc");
tryItOut("do {return; } while((__iterator__ =  /x/ ) && 0); const constructor;");
tryItOut("with( /x/ )throw <><x><y/></x></>\n");
tryItOut("L:with({constructor: let (__parent__) \f<x/>})function (__iterator__) { throw ; } ");
tryItOut("let (constructor = __proto__ = new (<><x><y/></x></>)(), __noSuchMethod__) { if([11,12,13,14].filter) { if ((p={}, (p.z = <x/>)())) throw [,,z1]; else {throw  /x/ ;throw 0/0; }} }");
tryItOut("if(__parent__ = (new (__proto__ =  '' )(~<><x><y/></x></>))) { if (((yield window).watch(__parent__.prototype))) /*infloop*/for(let __count__; new Date();  try ) {export *; } else if(<x/> :: <><x><y/></x></>) {} else  if (()) return -0;}");
tryItOut("if(false) return this; else throw <y><z/></y>");
tryItOut("/*infloop*/for(const prop; 'fafafa'.replace(/a/g, /a/gi);  /x/ ) ;");
tryItOut("with({}) for(let y in []);");
tryItOut("/*infloop*/do {yield;gc() } while(return ([,,z1](<y><z/></y>)));");
tryItOut("with({}) { throw __noSuchMethod__/*\n*/; } ");
tryItOut("for(let y in []);");
tryItOut("switch(__iterator__.constructor getter= gc) { default: (0);case \tprototype =  '' .hasOwnProperty(\"constructor\"): prototype = <><x><y/></x></>, __iterator__ = <><x><y/></x><//>;break; case this.__defineSetter__(\"__parent__\", /a/gi): break; let prop, __parent__;break;  }");
tryItOut("");
tryItOut("let (prototype = *::*) { {({a1:1});export *; } }\nL: {const __count__ = <y><z/></y>; }\n");
tryItOut("/*infloop*/M:while((prototype.@foo))switch({}) { default: break;  }");
tryItOut("yield true; const prototype;");
tryItOut("export prototype;");
tryItOut("/*for..in*/for(let constructor in  /x/ ) yield;");
tryItOut("constructor = function::__noSuchMethod__;");
tryItOut(" /x/g  = prototype;");
tryItOut("throw this;");
tryItOut("__iterator__ = prop;");
tryItOut("yield *::* === 3.141592653589793;");
tryItOut("if([15,16,17,18].some(<><x><y/></x></> ? false : <x/>, [<y><z/></y> if (__iterator__)])) {do return; while((__iterator__) && 0);yield <><x><y/></x></>; } else let (prototype) { export *; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function (__iterator__) { \tyield <><x><y/></x></> } )(this)))gc() const constructor;");
tryItOut("export *");
tryItOut("/*infloop*/L:for(const __proto__; let (/prop)  ''  >= <><x><y/></x></>; __proto__) {export *; }");
tryItOut("/*infloop*/for(<y><z/></y>; __iterator__ = ([1,2,3,4].slice).call(3/0, *::*); eval(\"([*].some(function  __count__ (__noSuchMethod__)<x><y/></x>) | this.zzz.zzz)\", window)) this\n/*for..in*/for(let prototype.prop in __iterator__) {export *; }");
tryItOut("L:if(( /x/ \n)) {gc()let constructor = [], prototype } else  if (new <x/>.hasOwnProperty(\"prototype\")()) __proto__ = constructor; else {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in ([0/0])) export __count__;");
tryItOut("{return window;; }");
tryItOut("{/*infloop*/while((__proto__)[true]){{} }/*infloop*/for(({__parent__: undefined}); (var prototype = false); 3.141592653589793 ||  '' ) {false;constructor = __count__\f; } }");
tryItOut("let (__count__) { return; }");
tryItOut("/*infloop*/do <><x><y/></x></>\n %= ({ set constructor __proto__ (prototype, __proto__) { throw *::*; }  }) ? (null instanceof (({__parent__: <x><y/></x>})).__lookupSetter__(\"__iterator__\")) : __parent__ = #1# while((let (, prop = -1) [(<><x><y/></x></>).__defineSetter__].some(new Function))/*\n*/);");
tryItOut("M:if(({a1:1})) {export __proto__; } else (__noSuchMethod__);");
tryItOut("while((__proto__|=@foo) && 0)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in  \"\" .constructor) if(this) {( \"\" ); } else  if (-3/0) {export __proto__;[z1]; }");
tryItOut("{export *;do {yield null; } while(((\n#1#)) && 0); }");
tryItOut("/*infloop*/while(window && \f__iterator__.constructor){continue ;\t/*infloop*/M:do {return; } while(<x><y/></x>); }");
tryItOut("/*infloop*/M:while((__count__ = @foo.eval(<x><y/></x>).hasOwnProperty(\"__count__\"))){do export *; while(((new (<><x><y/></x></>)())) && 0);let (__iterator__ = ((new ([,])())[constructor = this]), __iterator__ = 1e+81) { let prototype = __proto__, __parent__; } }");
tryItOut("/*for..in*/for(var <y><z/></y> in __noSuchMethod__) yield;");
tryItOut("let (__count__, prop = <x><y/></x>) { var constructor =  '' , prop = #3={a:#3#}; }");
tryItOut("/*infloop*/for(<x/>.@foo; (__count__ for each (__parent__ in <x><y/></x>)); ('haha'.split)(<><x><y/></x></> == -1, let (prototype = constructor) (__iterator__ = 4.))) yield;");
tryItOut("/*infloop*/do let prototype = <x><y/></x>; while(false);");
tryItOut("/*infloop*/for(const [({ __count__: ({ __count__: prototype }) }), ({ __noSuchMethod__: ({ __noSuchMethod__: [, (__count__), ({ constructor: ({ constructor: prop, __iterator__: __iterator__ }), __parent__: ({ __parent__: getter }) }), __proto__, ] }), __proto__: prototype }), ({ __noSuchMethod__: ({ __iterator__: ({ prototype: [({ prototype: function::__proto__, prop: __proto__ }), ] }), prototype: __proto__ }) }), default: break; case ((#1#.yoyo(#1=[#1#]))(([z1,,][function ([y]) { }])[(yield true)] :: (let (__parent__ = #1#) (p={}, (p.z =  \"\" )()))) && prototype+=<y><z/></y>.hasOwnProperty(\"__count__\")): break; case __noSuchMethod__ = __iterator__.setter: case 4: break; case 9: break; ] = ([11,12,13,14].map.watch(\"__iterator__\", new Function))(); arguments;  '' ) {({}); }");
tryItOut("L: export __proto__;");
tryItOut("return;");
tryItOut("let(__proto__, constructor) { export *;");
tryItOut("if(<x/>) yield; else  if ((p={}, (p.z = --0.1)()) .. constructor = false <= (<x><y/></\tx>.unwatch(\"prop\"))) {prototype = <><x><y/></x></>; }");
tryItOut("M:with(new (1 for (x in []))(<><x><y/></x></>,  '' )){throw __parent__; }");
tryItOut("L:do {yield __noSuchMethod__; } while(([z1]) && 0);");
tryItOut("/*infloop*/while(@foo){yield;let prototype = this, prop = undefined; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (yield @foo).__lookupGetter__(\"prototype\"); 0x99.watch(\"__noSuchMethod__\", eval(\"prop[<x/>]\", (yield .2)))) { }");
tryItOut("/*infloop*/for(var __parent__; (); __count__ = __parent__ =  \"\" .__lookupSetter__(\"__iterator__\").valueOf(\"number\")) {__noSuchMethod__, __proto__ = __count__;if( \"\" .__iterator__) { if (constructor) {{}prop; }} else var __count__ = [z1,,]\n }");
tryItOut("/*infloop*/for(prototype; <><>({ __proto__: constructor, __count__: [, , __proto__, , ] }) = (false,  \"\"  =  /x/ ).__noSuchMethod__</></>; {} == (new Function(3.141592653589793, arguments))) yield 1e4;");
tryItOut("/*for..in*/for(const __proto__ = new (eval())() in 033) let __noSuchMethod__ = [], __iterator__;");
tryItOut("/*for..in*/for(var (__proto__) in ((Function)(--<\tx><y/></x> << 'fafafa'.replace(/a/g, function (__count__) { ; } ))))export *;");
tryItOut("let (prototype) { return; }");
tryItOut("with({}) { if('fafafa'.replace(/a/g, function(q) { return q; })) {;__proto__ = <x><y\t/></x>; } else export __count__; } ");
tryItOut("if(*) do {export *; } while(([(-1)]) && 0); else  if ( ''  += (uneval((eval(\"@foo\", <><x><y/></x></>))))) break M; else export *;");
tryItOut("let prop = {};");
tryItOut("/*infloop*/M:for(var [, [constructor]] = *; ({get getter: function  get () { return ({__iterator__: <><x><y/></x></>}) } , __iterator__ getter: {} % [z1] }); <x><y/></x>['__iterator__'] = ([] = false)) {constructorexport delete; }");
tryItOut("/*infloop*/\ffor(let ({ constructor: [({ constructor: constructor, prototype: __count__ })], prop: ({ __proto__: ({ __proto__: __count__, __noSuchMethod__: prototype }) }) }) = __proto__ = this; ('fafafa'.replace(/a/g, function(q) { return q; })); true) {continue ; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:do ; while(window);");
tryItOut("if((this.yoyo(1e81))) {yield;;\nreturn;\n }");
tryItOut("this.zzz.zzz;");
tryItOut("((null).__defineSetter__)()");
tryItOut("L:if(__parent__ = RangeError(window)) {continue ; }");
tryItOut("continue \n");
tryItOut("constructor = prototype;");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ prototype: ({ __parent__: <x><y/></x>.__count__ }), prop: ({ __count__: [[], , ({ __noSuchMethod__: __iterator__ })] }) }) = @foo; <><xxx>{__iterator__}</xxx></>/*\n; new true == --<><x><y/></x></>) {yield  /x/g ;{} }");
tryItOut("with({prototype\t: <><x><y/></x></>}){prop }");
tryItOut("switch( /* Comment */(uneval((yield null)))) { ({ __iterator__: ({ prop: [[constructor, __noSuchMethod__, , , ({ prop: __parent__, __proto__: __count__ })], , , , ({ __proto__: __count__, __noSuchMethod__: __count__ })] }), prop: prop }) }");
tryItOut("if(prototype = [z1,,].valueOf(\"number\")) { if (@foo.__defineGetter__(\"__proto__\", window) *= __proto__ = prototype.constructor) {{} } else export constructor;}");
tryItOut("if([<><x><y/></x></>.unwatch(\"__iterator__\")]) {L:while((this[<x><y/></x>] = __noSuchMethod__) && 0){return <x/>;export setter; }<y><z/></y> } else  if ((this.__defineGetter__(\"__proto__\", function (__count__, __parent__) { <x><y/></x>; } )) <<= #2=({__noSuchMethod__: <><x><y/></x></>}).__proto__ = this.zzz.zzz.__parent__) gc() else {let (__noSuchMethod__ = __count__, __parent__ = null) { gc() } }");
tryItOut("/*infloop*/do var yield, function::prototype =  \"\" ; while((yield this.zzz.zzz));");
tryItOut("{gc() }");
tryItOut("for(let y in []);");
tryItOut("export prop;");
tryItOut("/*infloop*/for((function(y) { yield y; export prop;; yield y; })();  /x/g .propertyIsEnumerable(\"constructor\"); (false.*)) {function::__noSuchMethod__, __parent__; }L: {return @foo;let __noSuchMethod__; }");
tryItOut("/*for..in*/for(__proto__.__iterator__ in <x/>) (<><x><y/></x></>);");
tryItOut("let (constructor) { const __iterator__ = <><x><y/></x></>; }\n");
tryItOut("__iterator__ = prop");
tryItOut("/*infloop*/do {with({__proto__: window})let __count__; } while(<x><y/></x>.(0.1));");
tryItOut("/*for..in*/for(let __proto__ = this in <x/>) {[1,2,3,4].slice }");
tryItOut("let(__count__, prototype = <x><y/></x>) ((function(){return <x><y/></x>;})());");
tryItOut("/*infloop*/for(var prototype; <><x><y/></x></>; <>function(id) { return id }</>[true]) {; }");
tryItOut("((*.throw(<x><y/></x>)))\f\n;");
tryItOut("/*infloop*/for(var -1 = *; undefined; arguments) break L;");
tryItOut("if((new (function(q) { return q; })(__noSuchMethod__)).prop) continue L; else <><x><y/></x/*\n*/></>;");
tryItOut("return;");
tryItOut("{export *; }");
tryItOut("/*infloop*/do constructor = #1=[#1#]; while(<x><y/></x>);");
tryItOut("M:if(<><x><y/></x></> = \f(prop = <><x><y/></x></>) - ( /* Comment */<y><z/></y>)) /*for..in*/L:for(var __iterator__ in [,]) {{}throw @foo; } else  if (let (prototype = (* for (prop in true)), __iterator__) __noSuchMethod__) /*for..in*/for(let prop in ((({}).hasOwnProperty)(5.0000000000000000000000))){export *;'haha'.split }");
tryItOut("/*infloop*/for(*::*; [,,z1];  /x/ ) ");
tryItOut("throw constructor;");
tryItOut("export *;");
tryItOut("/*infloop*/while(function  __noSuchMethod__ (__iterator__, __count__) { yield (<x><y/></x>(false)) } ){yield @foo;/*infloop*/for((__parent__)(this) = __proto__\t.constructor; (yield <y><z/></y>); (constructor = eval(\"__iterator__ = 0.1, prop = <><x><y/></x></>;\", 1.3))) ; }");
tryItOut("if(<x><y/></x>.__lookupSetter__(\"prototype\")) { if (*::*.__defineGetter__(\"constructor\", (1 for (x in [])))) export __iterator__; else {gc(){} }}");
tryItOut("");
tryItOut("for(let y in [5,6,7,8])  '' ;");
tryItOut("/*infloop*/for(let ({ __iterator__: prototype, __count__: constructor }) = @foo.__defineSetter__(\"__parent__\", 1e4); ( /x/  <<= <x><y/></x>); __proto__: false) {([z1]);return constructor; }");
tryItOut("return;");
tryItOut("return ({prototype: <y><z/></y> >>>=<x><y/></x> });");
tryItOut("/*for..in*/L:for(const prop in ((function  __proto__ (constructor) { return prop.(3/0) } )(<employee id=\"1\"><name>Joe</name><age>20</age></employee>))){throw <><x><y/></x></>; }");
tryItOut("L:while((eval(\"{}\", [15,16,17,18].some(Math.pow, window))) && 0)/*infloop*/for(__iterator__; <x/>; [15,16,17,18].filter((1e-81).__defineSetter__, null)) /*infloop*/while(<x><y/></x>)export prop");
tryItOut("with({__noSuchMethod__: new (eval)(yyy)}){/*for..in*/for(const [__proto__, constructor] = [1] in __parent__) { } }");
tryItOut("/*infloop*/do {/*infloop*/for(*; window; this) {} } while(yield this.zzz.zzz);");
tryItOut("let (__noSuchMethod__, __count__ = false) { {} }\nL: gc()");
tryItOut("/*for..in*/for([__parent__, __parent__] = ('fafafa'.replace(/a/g, (new Function(\"(window);\")))) in 0x99) {<><x><y/></x\f></>;function(y) { yield y; let __proto__ = <><x><y/></x></>;; yield y; } }");
tryItOut("if(<x/>.eval(<><x><y/></x></>)) continue ; else {({}).hasOwnPropertygc() }");
tryItOut("{;/*infloop*/for(let __parent__; let (prop) prototype; null) {\n } }");
tryItOut("with(false.watch(\"__parent__\", [[]])){const prop, prop = 3/0;yield constructor; }");
tryItOut("{/*infloop*/for(<y><z/></y>; 5.0000000000000000000000;  \"\" ) yield <y><z/></y>; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(constructor)throw this\n");
tryItOut("yield  /x/ ;");
tryItOut("/*for..in*/(let __proto__ in false %= window.valueOf(\"number\")) let setter = <><x><y/></x></>, __iterator__; const let;");
tryItOut("L:do /*for..in*/for(const __count__ = [11,12,13,14].filter in <x/>) break L; while((([1,2,3,4].slice).call(<x/> >>>  /x/ , ) && ({ get __proto__(//h\n) { return (({__noSuchMethod__: 1.3, __proto__: (3.yoyo(( get __count__() { yield <y><z/></y> } (yield false, new 033(__noSuchMethod__, [z1,,]))),  \"\" \n)) })) } , prototype: <y><z/></y>.@* })) && 0);");
tryItOut("(*).__defineSetter__yield");
tryItOut("/*for..in*/for(const [__parent__, prop] = (*::*()) in (prop = null)) {export 1.2e3;\t }");
tryItOut("let (__proto__ = (this.yoyo( /x/ )), __noSuchMethod__ = (void ((p={}, (p.z = __iterator__)())))) { if(*) {break L;x::prototype; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (<x/> % false)[this.zzz.zzz].constructor in false >>= <y><z/></y> %= ([<x><y/></x> if (<><x><y/></x></>)])) {M:with(({ get __iterator__(__count__, __iterator__) { ; } , prop: __count__ }))/*infloop*/M:do {(<x><y/></x>);return; } while( /x/g );return <x><y/></x>.__proto__; }");
tryItOut("{{const __parent__ = [,]; } }");
tryItOut("gc()");
tryItOut("with({__count__: (eval)})( '' );");
tryItOut("if(3.141592653589793) { if ((* =  \"\" )) {}} else {throw function ([y]) { }; }");
tryItOut("switch(~<><x><y/></x></>) { default:  }");
tryItOut("if(<y><z/></y> + true) return; else __parent__, __count__ = 3.141592653589793;");
tryItOut("with({}) for(let y in []);");
tryItOut("while(([15,16,17,18].some((1 for (x in [])), window)) && 0)/*for..in*/for(var prop in ((function () { yield  ''  } )( \"\" ))){export __noSuchMethod__;<x><y/></x>; }");
tryItOut("{var __proto__ =  /x/ ; }");
tryItOut("do {if((eval(\"*\", true))) [1,2,3,4].map else  if ( \"\" .isPrototypeOf(-0) / [[1]]) {const prop = __parent__, __iterator__; } else {continue ;if( '' ) { if (<x><y/></x>) {(false); }} else {__parent__; } } } while(((__parent__ = window = ~Boolean(__noSuchMethod__, 0/0))) && 0);");
tryItOut("/*infloop*/while(__parent__ = window){throw window;var constructor, constructor = (-1); }");
tryItOut(";");
tryItOut("while((+<x/>) && 0){{} }\t");
tryItOut("\n(<x><y/></x>);");
tryItOut("/*infloop*/L:for(var prop = [15,16,17,18].map(/a/gi, (yield  .@*:: __count__.constructor)); __parent__ =  ''  :: <x><y/></x>--; @foo.eval(true)) {do {/*for..in*/for(let __noSuchMethod__ in (('haha'.split)(try {  } catch(prototype) { yield <x/>; } finally { (@foo); } )))__count__ = 1e+81; } while(((__proto__.((1 for (x in [])))).hasOwnProperty(\"setter\")) && 0); }");
