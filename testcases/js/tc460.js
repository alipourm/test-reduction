tryItOut("switch(new (new Function(\"__iterator__;\"))().__defineSetter__(\"__count__\", eval)) { case ({ prop: prototype }) = (undefined ? <x/> : <><x><y/></x></>): /*for..in*/L:for(var [__proto__, prop] = window.eval([]) in  /x/g ) throw <x/>;break; gc() }");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*/for(const __parent__ = (RegExp(<><x><y/></x></>)).valueOf(\"number\") in <x/>) gc() }");
tryItOut("with((window)(<><x><y/></x></> .@ window)\f)L:if(<y><z/></y>) { if (*) {yield; } else { }}");
tryItOut("this.zzz.zzz;");
tryItOut("with((new Function).call((__proto__.x::prop getter= [1,2,3,4].map), ))let prototype, __iterator__ = [,];");
tryItOut("( /x/ );");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <x><y/></x>) {let (prototype, __count__) {  } }");
tryItOut("{continue ; }");
tryItOut("while((false) && 0){(<x><y/></x>); }");
tryItOut("export *;\nexport *;\n\n");
tryItOut("{return; } const __noSuchMethod__;");
tryItOut(" { yield (__noSuchMethod__.propertyIsEnumerable(\"constructor\")) } ");
tryItOut("__parent__(<x/>) = ;");
tryItOut("L:if(false) { if (<><x><y/></x></>)  else ;}");
tryItOut("{const __noSuchMethod__ = @foo, prop = (function ([y]) { })();false ? 033 : {} }");
tryItOut("if(__iterator__-=__count__) {yield @foo;; } else  if ([15,16,17,18].some(new Function,  /x/g )) yield;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ({ __iterator__: each }) = ({ prototype: prop })) return;");
tryItOut("let([[, prop, prop, , \t], , ] =  '' , prototype) ((function(){for(let y in []);})());");
tryItOut("/*for..in*/for(\t__proto__ in (('haha'.split)(window ? * : *)))return window;");
tryItOut("let (x::prototype = #1#, prototype) { if(@foo) break ; else  if (__iterator__) {__proto__var __proto__, __parent__ = <y><z/></y>; } }");
tryItOut("M:if([z1][({a2:z2})]) { if (<x><y/></x>.yoyo(<><x><y/></x></>)) ;} else {(<x/>);prop } const __proto__;");
tryItOut("if(this.zzz.zzz) {; } else  if (window !== __noSuchMethod__) break ;");
tryItOut("prop = prototype;");
tryItOut("let(__iterator__) ((function(){gc()})());");
tryItOut("/*for..in*/L:for(let [constructor, __proto__] = 1e81.propertyIsEnumerable(\"__proto__\") in <x/>) {<ccc:ddd></ccc:ddd>export __noSuchMethod__; }");
tryItOut("for(let y in [5,6,7,8]) /*infloop*/while((gc).apply){export *; }");
tryItOut("with({}) yield <><x><y/></x></>;");
tryItOut("switch(<x><y/></x>) { default: case 9: export *; }/*infloop*/L:for(let __parent__ = null; true; *) {}\n");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("/*infloop*/while(@foo)");
tryItOut("/*infloop*/for(let [] = window; *; void eval(\"export *;\", <><x><y/></x></>)) yield (--this);\f");
tryItOut("while(([__iterator__].some(this)) && 0){; }");
tryItOut("if(<></>) {gc() } else  if \f([1,,]) throw ({a1:1});\nyield .2;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) {const __count__ = 3/0; }");
tryItOut("if(({ constructor: constructor }) = ((uneval((prototype = window))))) {/*infloop*/do {gc()export *; } while(this);gc() }\f else  if ((new ((yield eval(\";\", <y><z/></y>)))(*::*, (({ set prototype __iterator__ (__parent__, __iterator__) { yield <><x><y/></x></> }  }) || (yield (<y><z/></y> for each (__parent__ in <x><y/></x>))))))) {/*infloop*/while(__count__)gc() } else L:with(.__defineGetter__(\"__noSuchMethod__\", gc)){break L;({}).__lookupGetter__ }");
tryItOut("M:with({__parent__: ({__parent__: ( /* Comment */([11,12,13,14].sort)), __noSuchMethod__ setter: Math.pow })})/*for..in*/for(var function::__proto__ in ((({}).__lookupGetter__)([[1]])))var constructor = <y><z/></y>;");
tryItOut("with({({ __noSuchMethod__: __parent__, prop: constructor }): window in <><x><y/></x></>})return 0.1;");
tryItOut("this.zzz.zzz;");
tryItOut("do const __proto__; while((<><zzz>\nnull</zzz></>) && 0);");
tryItOut("/*for..in*/for(var prototype in <><x><y/></x></>) (<><x><y/></x></>);");
tryItOut("L: {<>\t<x><y/></x></>;const __iterator__ = false, __noSuchMethod__ =  /x/ ; }");
tryItOut("throw prototype;");
tryItOut("{gc()(<><x><y/></x></>).call }");
tryItOut("L:switch(window) { case ((<x><y/></x>)[<x><y/></x>]): ;break; case __proto__ = *::*: {}default: return function(id) { return id }; }\n/*infloop*/for(function(id) { return id }; ((~-1))((yield <><x><y/></x></>), <x/>); *) yield __parent__;\n");
tryItOut("let __noSuchMethod__;continue ;");
tryItOut("/*infloop*/for(const __parent__ = <{prototype}> </{prototype}>; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.( /x/ .eval(<x><y/></x>)); (((function (prop) { yield \n-0; } ).call(this, null)) ? [1,,] *= <y><z/></y> : __parent__ =  /x/g )) {yield;throw <y><z/></y>; }");
tryItOut("prototype = prototype;");
tryItOut("if(\rfalse.@*['constructor'] = <y><z/></y>\n) { if (*::*) 0;} else {}");
tryItOut("if(new (function (prop, prototype) { yield __count__ = <><x><y/></x></> } )()) {export __parent__;break ;\n\n } else while((<x><y/></x>) && 0)return window; const __noSuchMethod__;");
tryItOut("\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in ({prop: <y><z/></y> .@x:: *::* })) {M:do {yield;let prop; } while(((4..__lookupGetter__(\"__count__\"))) && 0); }");
tryItOut("let (prototype, __noSuchMethod__ = [[]]) { yield 0.1; }");
tryItOut("with({}) try { return; } catch(__iterator__ if this) { throw <x><y/></x>; } ");
tryItOut("export *;gc()");
tryItOut("{gc()\nexport prop;var prototype = <x><y/></x>, __proto__; }");
tryItOut("with((({prop: constructor }))){\texport *; }");
tryItOut("(<y><z/></y>).__defineSetter__");
tryItOut("with({}) { gc() } ");
tryItOut("yield true; const prototype;");
tryItOut("/*infloop*/M:for(__parent__; *::*.valueOf(\"number\").__proto__ <<= (Function)\f.call( /x/g , <x/>, <><x><y/></x></>).__proto__.__defineGetter__(\"prop\", (new Function(\"(function(q) { return q; }).call\"))); [<x><y/></x> for (__proto__ in <><x><y/></x></>)].watch(\"__noSuchMethod__\", 'haha'.split)) return 0/0");
tryItOut("/*for..in*/for(const prototype.__parent__ in function ([y]) { }) {return [z1];prop, __iterator__ = false; }");
tryItOut("try { return; } catch(__noSuchMethod__ if __iterator__ =  /x/g ) { with({}) {} } catch(constructor if @foo) { (*); } catch(__count__ if (function(){__noSuchMethod__ = __parent__;})()) { this.zzz.zzz; } catch(__iterator__ if (__count__.__parent__)) { __noSuchMethod__ = __iterator__; }  const setter;");
tryItOut("this.zzz.zzz;");
tryItOut("let (__noSuchMethod__ = (<><x><y/></x></> instanceof [,,]).isPrototypeOf(<x><y/></x\t> <<= <><x><y/></x></>)) { if(((p={}, (p.z = <x/>)()))) { if (( ''  !== <><x><y/></x></>)) \rbreak L; else {yield; }} }");
tryItOut("L: (@foo);");
tryItOut("for(let y in [5,6,7,8]) /*for..in*/for(var [__noSuchMethod__, prototype] = @foo in this) yield");
tryItOut("{let __iterator__ = @foo, __proto__ = __count__; }");
tryItOut("\"");
tryItOut("/*for..in*/for(const prototype =  /x/  in true) let constructor = false, __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var <><x><y/></x></>['prototype'] in *::*) export *;");
tryItOut("let (prototype = (({ __proto__: prototype }) = <x><y/></x> % __proto__) |= new Boolean(), __noSuchMethod__) { let constructor = this, __count__ = true; }");
tryItOut("{}");
tryItOut("{continue M;((function ([y]) { })()); }");
tryItOut("let (<bbb xmlns:ccc=\"{}\"><ccc\t:eee></ccc:eee></bbb>) { return; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(var __proto__ = true; (yield <><x><y/></x></>); String(3/0,  '' )) {const __proto__ = prototype;\t }");
tryItOut(" for each (__noSuchMethod__ in <>__parent__</>)\nyield <y><z/></y>;\n");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in <x><y/></x>) {gc() } while(prototype setter: ({}).hasOwnProperty);");
tryItOut("/*infloop*/for(*; this.zzz.zzz; <{prototype}><!--yy--></{prototype}>) {prop = this, __count__ = ({}); }");
tryItOut("for(let y in []);");
tryItOut("{prototype, __count__ = [[1]]; }");
tryItOut("L: {[1,2,3,4].mapreturn *::*; }");
tryItOut("/*infloop*/L:for(({function::__iterator__: ({prototype: eval(\"<x><y/></x>\", {}) })}); this.zzz.zzz; __count__.(#1#)) {const constructor, __count__;{} }");
tryItOut("/*infloop*/M:for('fafafa'.replace(/a/g, (new Function(\"var __parent__, __proto__;\"))); (3.141592653589793\n); <y><z/></y> && <x><y/></x>) gc()");
tryItOut("with({constructor: (({constructor: prototype})) ==  \"\" }){with({prop: __count__.(([<x/> for each (__noSuchMethod__ in window)]))}){this;return *::*; }/*for..in*/for(var prop.__proto__ in ((eval)(@foo))){/*for..in*/for(prop = <><x><y/></x></> in <x><y/></x>) {{}return <x><y/></x>; }var __parent__ = undefined; const prop; } }");
tryItOut("/*infloop*/for(({ constructor: [, ({ __noSuchMethod__: __count__ }), ], __noSuchMethod__: ({ __noSuchMethod__: __parent__ }) }) = ((function(q) { return q; }).unwatch(\"__iterator__\")); (eval(\"1e+81\", ( /x/ ) - __iterator__)); (constructor)[<><x><y/></x></>].__defineGetter__(\"__count__\", gc)) const __proto__;");
tryItOut("with({}) { try { constructor = undefined; } catch(constructor) { return; } finally { return ({a1:1}); }  } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in  /x/g ) {/*infloop*/M:for(var __count__;  /x/g  ? 1e4 : @foo; __noSuchMethod__.__noSuchMethod__ getter= gc) throw <x/>; \"\"  = window, __iterator__; }");
tryItOut("{yield;0 }");
tryItOut("1.2e3['__count__'] = __parent__;");
tryItOut("/*for..in*/for(var  \"\"  in (( '' )(3.141592653589793)))yield 3/0;");
tryItOut("/*infloop*/for(var ({ prop: __proto__, constructor: prototype }) = ((<><x><y/></x></>.yoyo(true)) ^ __proto__.valueOf(\"number\")); eval(\"(uneval((__parent__ = \\n*::*)))\", [[1]]); ({a2:z2})) {/*infloop*/do (<x><y/></x>); while([z1]);eval(\"if(*) {-3/0;(undefined); } else  if (false) {export __parent__;__count__ = (({}).__lookupGetter__).apply, constructor; }\", 'haha'.split(*)); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.__proto__ in <><x><y/></x></>) break ;");
tryItOut("throw prop;");
tryItOut("let ({ __noSuchMethod__: ({ __proto__: [, , ], __proto__: ({ __proto__: prop }) }), constructor: ({ __parent__: prototype }) }) = (new (((this for each (__count__ in this))))(<y><z/></y>, <y><z/></y>[<><x><y/></x></>]));");
tryItOut("let (prototype)\n { do {(__count__); } while((__noSuchMethod__ = (-1)) && 0) }");
tryItOut("/*infloop*/L:do return <><x><y/></x></>; while((( ''  for ((<><x><y/></x></>)(this) in [[1]]) for (prototype in this) for each (__parent__ in  '' ))));");
tryItOut("throw prop;");
tryItOut("if(new [1,2,3,4].slice(constructor, 3)) {return *::*;continue M; } else  if () ");
tryItOut("\rwith(case ({ get prototype(constructor, )null.propertyIsEnumerable(\"__parent__\"), prop getter: function  __proto__ ()(-0) }): ;){var prop; { yield null } ; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with({__noSuchMethod__: window}){yield #3={a:#3#};yield null;\n }\nMath.sin\n\ncontinue ;");
tryItOut("M:with(\f{constructor: }){*::*; }");
tryItOut("for(let y in []);");
tryItOut("{{} }");
tryItOut("/*infloop*/for((<><x><y/></x></>).@foo; __parent__ = <x><y/></x>--; (__proto__ = *::*) < !0x99) {}");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("L: yield;");
tryItOut("M:if(((uneval(<><x><y/></x></> >>>=__iterator__)))) {(<><x><y/></x></>); }");
tryItOut("M:with({prop: (this.zzz.zzz)}){constructor = null, prototype;var prototype = 1.3; }");
tryItOut("let (prototype = @foo) { yield <y><z/></y>; }\n/*for..in*/for(var __count__ in @foo) break L;");
tryItOut("/*infloop*/for(var __proto__ =  \"\" ; prototype; (__noSuchMethod__)) {if(prop) return <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(let __proto__ = function (__noSuchMethod__) { <x><y/></x>; const constructor; } (this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })) in __proto__.[,,z1]) {return 3.141592653589793.valueOf(\"number\"); }");
tryItOut("{const constructor;function  prop () }");
tryItOut("/*infloop*/while( '' )prototype");
tryItOut("/*for..in*/for(let [__proto__, constructor] = [1,,] in let (function::__proto__) __proto__) {gc() }");
tryItOut("try { const prop = case ({}): break; (__iterator__);break; yield @foo;default: {}; } catch(prototype if (function(){var constructor;})()) { (<><x><y/></x></>); } finally { ({}).hasOwnProperty } ");
tryItOut("/*infloop*/for((__count__--. { return <y><z/></y> } .watch(\"__iterator__\", 'haha'.split)); ~(@foo .@x::  '' ) >>= ({__count__: __iterator__}); [<><x><y/></x></> for (constructor in this)]) [,,z1];");
tryItOut("return *.propertyIsEnumerable(\"prototype\");");
tryItOut("return (uneval(#1#));");
tryItOut("throw <x><y/></*\n*//x>");
tryItOut("(<\t><x><y/></x></>);\n;\n");
tryItOut("L:\rif([11,12,13,14].filter) {constructor; } else  if (<y><z/></y>) yield 0; else {prototype }");
tryItOut("<x/>");
tryItOut("/*infloop*/do (*::*); while((__proto__%=@foo));");
tryItOut("/*infloop*/for(({ prop: ({ __count__: ({ prop: ({ __noSuchMethod__: __parent__ }) }), constructor: ({ __proto__: prototype, constructor: [({ __noSuchMethod__: __iterator__ })] }) }) }) = (-0 %= <x><y/></x> -= (Math.sin).call(function::__parent__ = <x><y/></x>, <x><y/></x> && 1e-81) for (__count__.prototype in @foo.propertyIsEnumerable(\"__noSuchMethod__\")) if ( '' )); (__noSuchMethod__ = __noSuchMethod__); ([,] for each (constructor in <><x><y/></x></>) for each (__noSuchMethod__ in <><x><y/></x></>))) {yield (uneval(0));/*infloop*/M:do return  \"\" ; while(let (__count__ = <y><z/></y>) <><x><y/></x></>); }");
tryItOut("with({}) continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in @foo) {falsevar __iterator__; }");
tryItOut("/*for..in*/for(var [prototype, __iterator__] = __noSuchMethod__ = prototype in (-1)) {{} }");
tryItOut("/*infloop*/for(let (@foo < 0/0); ((Function)(true.isPrototypeOf(arguments), (\n<><x><y/></x></>))); new (function  constructor (__proto__)\n__parent__)()) (<x><y/></x>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in this) {/*for..in*/for(let __parent__ = [[]] in <><x><y/></x></>) yield;continue L; }");
tryItOut("while((5.0000000000000000000000) && 0){yield [1,,];continue L; }");
tryItOut("let(({ __iterator__: __proto__ }) = getter.constructor getter= function(q) { return q; }, prop = <y><z/></y>) ((function(){try { const __parent__; } finally { ; } })());");
tryItOut("L:if([,,] .@ __count__.@foo) export *; const constructor; else  if (false) {; }");
tryItOut("M:do {{throw eval(\"[,]\", *); } } while((({__iterator__ getter: void <><x><y/></x></>.__iterator__ = [z1], constructor: true })) && 0);");
tryItOut("if((window == <><x><y/></x></>)) return; else  if ((*::*.unwatch(\"__noSuchMethod__\"))) {{}var __proto__ = *, __noSuchMethod__ = __noSuchMethod__; } else {prototype, __iterator__;function::__count__ =  /x/ , prototype; }");
tryItOut("switch((__count__ = (function ([y]) { })())) { default: break; break; case 3: throw <x/>;return;break;  }");
tryItOut("throw prop;");
tryItOut("/*infloop*/while(new ((this.__defineSetter__(\"__count__\", function (__noSuchMethod__)<x><y/></x>)))((__noSuchMethod__ = @foo), null))L: ;");
tryItOut("\n");
tryItOut("if( /x/g ) { if (('fafafa'.replace(/a/g, function  __noSuchMethod__ () { yield 0 >>> this } ))) {; }} else export __count__;");
tryItOut("if([15,16,17,18].filter(*::*, #3={a:#3#}.throw(<x/>))) { if ([window.__lookupSetter__(\"__proto__\")].some(/a/gi)) /*infloop*/for(__parent__ = window; <><x><y/></x></>; (function ([y]) { })()) {yield; }} else {yield; }");
tryItOut("/*for..in*/for(const [prototype, __iterator__] = (new (<y><z/></y>)(<x/>, 3.141592653589793)) in (-<x><y/></x>)) throw *;");
tryItOut("/*infloop*/do (1 for (x in [])) while((new String(<><x><y/></x></>, null)));");
tryItOut("function(y) { yield y; gc(); yield y; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if(<x/>) { if (@foo) {<x/>;const __iterator__ = *, __parent__; }} else {continue ; }");
tryItOut("/*for..in*/for(var prop in (((new Function).apply)(function(y) { yield y; [1,2,3,4].map; yield y; })))var __count__ = [], __count__ = <><x><y/></x></>;");
tryItOut("with(true.hasOwnProperty(\"__proto__\")){return;return [,,]; }");
tryItOut("let (__noSuchMethod__) { return <x/>; }");
tryItOut("/*infloop*/while(<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")){L:if(({a1:1}) .. true) {/*infloop*/L:for(<x><y/></x>; <y><z/></y>; true) {const getter, __noSuchMethod__;yield 3; } } else export *;L: ({a2:z2}); }");
tryItOut("/*for..in*/for(let <><{__iterator__}>yyy</{__iterator__}></> in String(new ((({__noSuchMethod__: <x><y/></x>})))(prop.__defineGetter__(\"__count__\", (window).__defineSetter__)))) {if(false--) {/*for..in*/M:for(let [__count__, constructor] = (constructor) in this) this; } }");
tryItOut("let(__iterator__, __iterator__) { __iterator__.__parent__ = constructor;");
tryItOut("/*for..in*/M:for(const prototype = prop\t.(<y><z/></y>) in new String(,  /x/g )) export __noSuchMethod__\n");
tryItOut("/*for..in*/for(__proto__ in ((/a/gi)(this))){throw @foo; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (({ get constructor __proto__ (__iterator__)<><x><y/></x></> }))) {/*infloop*/while(*)(<><x><y/></x></>); }");
tryItOut("with(__noSuchMethod__){yield; }");
tryItOut("L: {if(function::prop) /*infloop*/do {__count__;const __iterator__, __proto__ = <y><z/></y>; } while(null); else  if (case (__parent__ = <><x><y/></x></>): export *;default: continue break; ) {} else {} }");
tryItOut("with(*)continue L;");
tryItOut("/*for..in*/L:for(let [__count__, __parent__] = void window in prop.__parent__ = (window)\r) yield;");
tryItOut("/*infloop*/M:for(var __parent__; prop , 1e4.hasOwnProperty(\"__parent__\"); (__count__(this)%= /x/g )) gc()");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("yield new (let (prop =  /x/g ) true)();");
tryItOut("/*infloop*/for(let ({ prototype: constructor }) = (@foo.watch(\"__iterator__\", (@foo).watch)); <x/>() !== __parent__ = 1e81; eval(\"<y><z/></y>\",  '' ) |= (<x><y/></x> >>  \"\" )) ;");
tryItOut("if((prop)) {throw prop; } else  if (let (__noSuchMethod__ = <><x><y/></x></>) null) export __parent__;");
tryItOut("throw null.constructor; const prop;");
tryItOut("/*infloop*/for(const constructor;  { /*for..in*/L:for(let ({ prop: prototype }) in ((/a/gi)((({}).eval(this)))))/*for..in*/for(var __proto__ in prototype) {throw window; } } ;  /x/ ) {var __iterator__, __proto__ }");
tryItOut("if(__noSuchMethod__) {;this.__defineGetter__(\"prototype\", [1,2,3,4].map); } else  if ([window %= ({a2:z2}) for (__iterator__ in [,,z1]) for each (__proto__ in <><x><y/></x></>)]) eval");
tryItOut("if(__iterator__) true else  if (prop, prop) {return; }");
tryItOut("if( /* Comment */__noSuchMethod__.( /x/ )) { if (new (__proto__.__proto__)) /*for..in*/for(var prop = (function::__iterator__ = <x/>) in <y><z/></y>) var __iterator__, prop;} else {export __iterator__\n(*).__defineSetter__ }");
tryItOut("throw __iterator__");
tryItOut("{/*for..in*/for(let [__proto__, __noSuchMethod__] = 1.3 in false) export *; }");
tryItOut("if(null.__defineSetter__(\"__count__\", eval)) { if (<x/> = [*::*]) {{} } else {let __parent__ = *, function::__noSuchMethod__ = *; }}\n");
tryItOut("if((__count__ = this * __noSuchMethod__) >>> window) { if (__iterator__.(null) %  ''  / ([11,12,13,14].map)) {L: return 1e4;(@foo); } else {throw constructor;\n;\n }}");
tryItOut("if(let (var __noSuchMethod__ = (-0), __count__;, prop =  \"\" ) this.__defineGetter__(\"x::__proto__\", true)) <><x><y/></x></>; else  if (this.__defineGetter__(\"__iterator__\", [1,2,3,4].map)) {if(false)  } else {return; }");
tryItOut("/*for..in*/for(const [//h\n__iterator__, __parent__] = this in <x/>) {\tthrow null;(<x><y/></x>); }");
tryItOut("if(constructor['constructor'] = (Math.sin)) { if (new (function(q) { return q; })(1e4, #1#.unwatch(\"prop\").eval((eval(\"window\", [1]))))) __noSuchMethod__} else {Math.sin }");
tryItOut("switch([,,]) { case 0: break; default: M:if(<y><z/></y>) { if (( /x/g .__defineGetter__(\"__count__\", ({a1:1})))) {<x><y/></x> } else <><x><y/></x></>;}break; case (__count__ = 1e81 === *): break;  }");
tryItOut("M:do { } while((window) && 0);");
tryItOut("/*infloop*/for(var ({ __parent__: __proto__ }) = (<xxx>{constructor}</xxx>.([11,12,13,14].some)).__iterator__ = @foo; false | window.eval(this.__defineGetter__(\"__noSuchMethod__\", @foo)).prototype; __noSuchMethod__ = this.zzz.zzz) return;");
tryItOut("/*infloop*/while((new *::*.watch(\"__iterator__\", (<x><y/></x>).__defineSetter__)))export <employee id=\"1\"><name>Joe</name><age>20</age></employee>;");
tryItOut("/*infloop*/while((<y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")))gc()");
tryItOut("\n");
tryItOut("if(<x><y/></x>) {return <y><z/></y>; } else  if (<><x><y/></x></>) var __noSuchMethod__ = <y><z/></y>, __noSuchMethod__;");
tryItOut("if((<x><y/></x>.(<><x><y/></x></>)))  else  if (<x/>) {const __proto__, constructor = window; } else (new Function(\"var constructor = <><x><y/></x></>, constructor = <y><z/></y>;\"))");
tryItOut("while(((<x/>.throw([1,,])\n)) && 0)this;");
tryItOut("/*for..in*/L:for(let [prototype, __count__] = <x><y/></x>//h\n.__defineGetter__(\"__proto__\", __noSuchMethod__) in __count__, ({a2:z2})) /*for..in*/M:for(var prop = __noSuchMethod__ = __count__ in  /x/g ) export *;");
tryItOut("/*infloop*/for([, , , []] = eval(\"yield this;\",  /x/ ); __iterator__ |= ({a2:z2})--; (uneval(<x><y/></x>))) {; }");
tryItOut("{return;gc() }");
tryItOut("/*infloop*/for(var ({ __iterator__: [prototype] }) = ( \"\"  .. new ([true for each (prop in 1e4) for (constructor in window)])()); *::*.unwatch(\"__count__\") |= ((<x><y\f/></x>.__defineSetter__(\"__parent__\", <y><z/></y>))()).__noSuchMethod__; ([1,,].unwatch(\"__count__\").*)) export prototype;");
tryItOut("let __iterator__ = *::*;\n(__parent__);\n");
tryItOut("if((this.__defineGetter__(\"__iterator__\", gc))) { if (*) ; else {with({return new __noSuchMethod__(@foo, <x><y/></x>);: ({__proto__: (-0), constructor:  \"\"  })})\n/*infloop*/do return __noSuchMethod__; while(<x><y/></x>); }}");
tryItOut("/*infloop*/for(var prototype(<x><y/></x>) = ([15,16,17,18].sort(*, false)); <x/>.yoyo(this); {}) {yield <x><y/></x>;L:if(@foo) { if ( '' ) {return;var __parent__; }} else export *; }");
tryItOut("if((eval(\"(gc).call(<x/>, <x><y/></x>, 3.141592653589793)\", (constructor.(<x><y/></x>))) if (<><x><y/></x></>.__lookupSetter__(\"prop\")))) {{} } else  if (-0) \n{yield <x><y/></x>; } else {throw false;yield; } const __count__;");
tryItOut("let __parent__\nbreak ;");
tryItOut("const constructor;");
tryItOut("/*for..in*/for(prop = false in ({a2:z2})) export __parent__;");
tryItOut("var __proto__;\nreturn;\n");
