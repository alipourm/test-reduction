
tryItOut("M:if((RegExp(__proto__, 033))) {function(y) { yield y; new Function; yield y; }yield; } else return;");
tryItOut("{return; }");
tryItOut("/*infloop*/for(({ __count__: __count__, __iterator__: break ; }) = +*.__defineGetter__(\"prototype\", eval); (({ <y><z/></y>: ({ constructor: [let, ], prop: ({ __noSuchMethod__: __parent__ }) }) }) = [, ({ __parent__: prototype }), __count__, , ]); ((#1=({a1:1})) += /*infloop*/while('fafafa'.replace(/a/g, <bbb xmlns:ccc=\"(__iterator__+=null)\"><ccc:eee></ccc:eee></bbb>)){yield constructor;return window; }))  for each (__noSuchMethod__ in null.__lookupSetter__(\"prop\").__lookupGetter__(\"__parent__.__noSuchMethod__\")) if (typeof (-1 |= constructor))");
tryItOut("{switch(window.propertyIsEnumerable(\"prototype\")) { default: break;  } }");
tryItOut("switch([[]]) { case 4: let(({ __iterator__: prototype, return;: false }), __proto__ = <x><y/></x>) ((function(){return [__proto__];})());break;  }");
tryItOut("return;");
tryItOut("/*for..in*/M:for(var [x::__iterator__, __iterator__] = 1e+81.__defineSetter__(\"__count__\", []) in function::prototype =  /x/g ) break ;");
tryItOut("\n<><x><y/></x></>;\fcontinue ;");
tryItOut("with({__proto__: (1e+81.unwatch(\"prop\"))}){throw false; }");
tryItOut("M:if((let (prototype) window) >= let (constructor = <x><y/></x>) undefined) ([,]) else {yield; }");
tryItOut("{with(<y><z/></y>){var __parent__ = function ([y]) { }, __noSuchMethod__ = <x><y/></x>;(-1) } }");
tryItOut("/*infloop*/L:for(const __proto__;  \"\" ; __count__)  \"\" ;");
tryItOut("/*infloop*/for(var __proto__; <><x><y/><></>; <x><y/></x>) export prototype;");
tryItOut("let (constructor, prototype) { yield: window }");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__");
tryItOut("/*infloop*/for(var __iterator__; (.((@foo).watch(<><x><y/></x></>))); <><x><y/></x></>[true]) {;throw  '' \nyield; }");
tryItOut("\neval\n\n");
tryItOut("{yield; }");
tryItOut("(__proto__) const constructor;");
tryItOut("try { break ; } catch(__parent__) { return; } ");
tryItOut("/*infloop*/L:for\n(__noSuchMethod__ = __noSuchMethod__; 1e+81; [z1,,]) return <y><z/></y>;");
tryItOut("/*infloop*/while((<x><y/></x> , <y><z/></y>))__iterator__");
tryItOut("return\nexport *;");
tryItOut("if(<xxx {__count__}={__count__ = __parent__ = <x><y/></x>} />) return; else  if (delete __noSuchMethod__ = this) /*infloop*/M:for(__proto__ = this.zzz.zzz; <zzz>null</zzz>; try { export *; } catch(prop) { export __proto__; } ) {export *; } else {yield; }");
tryItOut("return eval(\"({ set __noSuchMethod__ __parent__ (constructor, constructor) { yield .2 }  })\", @foo) %= *::*.isPrototypeOf(<x/>);");
tryItOut("let (prototype) { export constructor; }");
tryItOut("M:if((false).watch) { if (<x/> == undefined) with({__count__: (__count__ & window.isPrototypeOf(this))}){/*for..in*//* nogeckoex bug 349964 */ for  each(const  /x/g  in this) {__proto__; } } else {let (__iterator__ = ( /x/  >>= <y><z/></y>)) { M:do {let prototype = <y><z/></y>, prototype;{} } while(('fafafa'.replace(/a/g, function  __parent__ (prop) { yield this } )) && 0); }export prototype; }}");
tryItOut("{for(let y in [5,6,7,8]) gc() }");
tryItOut("let (__proto__, /*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in ({a1:1})) /*for..in*//* nogeckoex bug 349964 */ for  each(let function::__proto__ in case 8: break; ) {; }) { return <><x><y/\t></x></> >> *; }");
tryItOut("L:if(({__proto__ getter: [1,2,3,4].map })) if(__proto__.prototype) {{} } else  if (undefined) function ([y]) { } else {export __iterator__; /x/g ; } const __count__; else {/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x><y/></x>) (prop);throw @foo; }");
tryItOut("if(this.zzz.zzz instanceof (Function)()) {var __count__;\nexport *;\n } else  if (eval(\"return;\", this -=  { return <><x><y/></x></> } ) <<= this.__defineGetter__(\"constructor\", (<><x><y/></x></>).watch)) {M:if((-0)) (<><x><y/></x></>); else {(new Function(\"@foo;\")) }throw -0; } else {return [z1];gc() }");
tryItOut("return;");
tryItOut("if(prop = [,,z1].propertyIsEnumerable(\"prototype\")) {export *;/*for..in*/for(__count__ in <x><y/></x>) {(prop;);var prop = <y><z/></y>, __parent__ = <x/>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in false) {export *; }");
tryItOut("if(null) var __iterator__ = <y><z/></y>, prop;");
tryItOut("L:if(__iterator__ ^= __proto__) if( '' ) return <y><z/></y>; else  if (<><x><y/></x></>) {export __count__;yield; }//h\n else  if (new <y><z/></y>((-0), this)) {window; }\nthis.zzz.zzz;");
tryItOut("if(new RangeError(false, <x><y/></x>)) { if (++__noSuchMethod__ = [({a1:1}) if (({a2:z2}))]) {if([15,16,17,18].map(function(q) { return q; }, (-0).yoyo(<x><y/></x>))) { if (new (( '' ).__defineSetter__)([,,z1], null)) yield; else export *;}with((__parent__ = window)){prop = <x><y/></x>, __count__ = <><x><y/></x></>;return; } }} else var __noSuchMethod__ = <x><y/></x>, __parent__ =  /x/g ;");
tryItOut("with({__proto__: (([,])(@foo))[[z1]]}){__iterator__ = <x><y/></x>; }");
tryItOut("do {let __count__; } while((function(id) { return id }) && 0);");
tryItOut("new Function/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in #0=<x/>) \n{throw window;const prototype, __noSuchMethod__ =  /x/ ; }");
tryItOut("(__noSuchMethod__)(__proto__) = prototype;");
tryItOut("throw <x/>; const constructor;");
tryItOut("__proto__ = (-0), __proto__ = 1e+81;");
tryItOut("if((this())) {continue L; } else {(<><x><y/></x></>); }\n/*for..in*/for(const __noSuchMethod__ = -3/0 in arguments) {yield; }\n");
tryItOut("throw __iterator__;");
tryItOut("if(*::*) { if (void <y><z/></y>) /*for..in*/M:for(const __count__ in false) let prototype; else <x><y/></x>\n{}}");
tryItOut("L: continue ;");
tryItOut("/*infloop*/L:for( /x/ ; this; [[1]]) ");
tryItOut("/*infloop*/for(let __count__; ({ get prototype(prop, constructor)<x><y/></x> }); <x><y/></x>.__count__) yield;");
tryItOut("/*infloop*/M:while(new Date(true, false))const \f__iterator__, constructor;");
tryItOut("/*infloop*/L:do {switch(((#2=[true]).propertyIsEnumerable(\"__count__\")).@*) { default: break; L: {{}__noSuchMethod__ }case 9: break; export *;break;  }/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in *) export prototype; } while((({prop: __parent__ = prototype }).@* < (__parent__ = <><x><y/></x></>)++));");
tryItOut("__parent__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <y><z/></y> in ((function(y) { yield y; const prototype;; yield y; })(Function)))/*for..in*/L:for(let constructor = [[]] in null) yield;");
tryItOut("let(__proto__ = [1,,].unwatch(\"constructor\"\r), __proto__) { continue ;");
tryItOut("/*infloop*/for(let <x/> != __proto__.prop getter= new Function = (eval(\"const __proto__ = <x/>, __iterator__ = false;\", <y><z/></y> < <y><z/></y>).watch(\"__count__\", *::* .@x:: false)); (-0).propertyIsEnumerable(\"__proto__\");  \"\" ) {L:if(new (<><x><y/></x></>)(constructor)) return <x><y/></x>;*; }");
tryItOut("let(prototype) {  if (([15,16,17,18].filter(function (__proto__, prototype) { ; } , [-3/0])))");
tryItOut("do yield (-0); while(((p={}, (p.z = <x><y/></x>)())) && 0);");
tryItOut("/*infloop*/L:for(const __proto__ = *::*; true; window) {false; }");
tryItOut("with({prototype: ([15,16,17,18].some(Math.pow, *::*)).__defineGetter__(\"__iterator__\", Math.sin)}){return *;if(({a1:1})) { if (__proto__) {export *; }} else let __proto__, __proto__; }");
tryItOut("L: export *;");
tryItOut("L:if(<><x><y/></x></> >>> getter) let __noSuchMethod__; else  if (prop.(undefined)) {{}yield <x/>; } else break ;");
tryItOut("switch((__parent__.(#3={a:#3#}))) { default:  }");
tryItOut("if( /x/g ) (<><x><y/></x></>); else  if (<><x><y/></x></>) \r; else prop = <><x><y/></x></>;");
tryItOut("M:if(( /* Comment */<><x><y/></x></>.@foo)) { if (((yield (([[]].valueOf(\"number\")))(1e81, __proto__['__iterator__'] = this)))) export *; else prototype = __noSuchMethod__;1e+81;}");
tryItOut("{/*infloop*/do {throw *; } while(<x><y/></x>)\nM:if(4.) {var prop = *;return false;\n } else  if (this) {;throw *::*; } else var __iterator__ = <x><y/></x>; }");
tryItOut("yield;");
tryItOut("prop = __count__;");
tryItOut("yield;gc()\n");
tryItOut("while(((prototype.(<><x><y/></x></>.eval(false))) >> (__noSuchMethod__|=<><x><y/></x></>)) && 0){return #3={a:#3#};break ; }");
tryItOut("let([, , prototype]) { yield !<><x><y/></x></>;");
tryItOut("yield  '' ;\n/*for..in*/L:for(const __iterator__ in ((/a/gi)(<x><y/></x>))\t)(3.141592653589793);\n\nwindow\n");
tryItOut("{L: {yield;let __proto__, __iterator__; }yield (<><x><y/></x></>--.prop =  /* Comment */__iterator__); }");
tryItOut("if(<x/> ?  ''  : prototype) {return; } else {; }");
tryItOut("let(({ let: [__iterator__, ({ prototype: __iterator__, __parent__: __proto__ }), , , ({ __proto__: prop, __proto__: __noSuchMethod__ })], __count__: [, , , __proto__] }) = var __parent__ = <x><y/></x>, constructor = __parent__) { try { export constructor; } catch(prototype) { (null); } ");
tryItOut("if(((<><x><y/></x></>).call(<y><z/></y>, ))) const __count__ = 1e81, __noSuchMethod__ = <x><y/></x>; else  if (( /* Comment */<x/>)) {prop = <><x><y/></x></>;let __parent__; }");
tryItOut("if((this.zzz.zzz)) export constructor;");
tryItOut("L:if(this.zzz.zzz\f) {export __iterator__; } else  if ((__noSuchMethod__.__noSuchMethod__) .@*:: <y><z/></y>\n) var __iterator__ = false; else {{}yield; }");
tryItOut("/*infloop*/do {break L; } while(__iterator__);");
tryItOut("L: return <x><y/></x>; const __count__;");
tryItOut("yield  /x/g ;");
tryItOut("var __count__;\nfunction  constructor ()<x><y/></x>\n");
tryItOut("L:with({__proto__: <x><y/></x> ? <x><y/></x> :  '' }){var __count__; }");
tryItOut("/*infloop*/do {gc()throw window; } while(([1,,].__iterator__|=constructor * #1#));");
tryItOut("return;");
tryItOut("L:if(prototype) {export *; } else  if (prototype) {throw <><x><y/></x></>;<><x><y/></x></> } else throw window;");
tryItOut("continue L;");
tryItOut("*; const __noSuchMethod__;");
tryItOut("let (__proto__ = (null > 0.1)) { gc() }");
tryItOut("with({}) try { throw StopIteration; } catch(prop if (function(){let() { throw StopIteration;})()) { for(let y in []); } catch(__count__) { this.zzz.zzz; } ");
tryItOut("while((constructor.(<><x><y/></x></>) / #0=prop.@foo) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(-0['__count__'] in ) {const prop;let __count__, __noSuchMethod__; } }");
tryItOut("<><x><y/></x></>");
tryItOut("if() do gc() while((@foo) && 0);");
tryItOut("M:if(({prototype: <><x><y/></x></>})) {export __noSuchMethod__; } else export *;");
tryItOut("/*infloop*/while(\n \"\" ){yield;[1,2,3,4].map }");
tryItOut("if(<x><y/></x>.__lookupGetter__(\"prop\")) <><x><y/></x></> else  if (prop|=({__count__: (<y><z/></y>)[window],  set __iterator__(__iterator__) { ; }  })) {}");
tryItOut("while(() && 0){}");
tryItOut("let (__noSuchMethod__ = Number(null), __iterator__) { let(({ __proto__: ({ constructor: __count__ }) }), [({ __parent__: constructor }), , , __parent__, constructor]) { for(let y in []); }");
tryItOut("throw __parent__;");
tryItOut("yield __proto__;");
tryItOut("M:with([__iterator__ for each (__parent__ in [[1]]) for each (prop in <x><y/></x>)]){( '' );(new Function(\"export x::__count__;\")) }");
tryItOut("L: {while((/*\n*/#1#) && 0){const constructor = false, __iterator__ = *;var __iterator__ = window; } }");
tryItOut("__parent__, prop;{}");
tryItOut("/*infloop*/L:for(let constructor = (-0) / delete __proto__ -= constructor = undefined; (({__count__: *.watch(\"prototype\", new Function), prototype: (function ([y]) { })() })); __noSuchMethod__ = window) {yield;return [[1]]; }");
tryItOut("try { let(__parent__) { {} } finally { yield <><x><y/></x></>; } \n");
tryItOut("/*infloop*/M:while(prop = <x><y/></x>.valueOf(\"number\")){/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__.constructor in <x><y/></x>)  }");
tryItOut("{L: let constructor = <x><y/></x>, __proto__; }");
tryItOut("if((())().isPrototypeOf((({ __noSuchMethod__: ({ delete: __parent__ }) }) = (p={}, (p.z = <><x><y/></x></>)())))) {} else  if (setter) {(<x><y/></x>); const prop;yield null; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var 1e81['__proto__'] in <x/>) {return <y><z/></y>;let __parent__ = <y><z/></y>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var [__iterator__, function::__noSuchMethod__] = ((uneval(*::*.propertyIsEnumerable(\"__iterator__\")))).__parent__ -= new function  __proto__ () { export *; } (this.propertyIsEnumerable(\"prototype\"), <><x><y/></x></>) in ({prototype: *::*, constructor: [z1] })) {<x><y/></x> }");
tryItOut("/*for..in*/for((__proto__) in ((function  prototype (constructor)constructor = function::prop = <><x><y/></x></>)(eval(\"return <x><y/></x>;\", constructor = window)))){throw (function ([y]) { })();Math.pow }");
tryItOut("/*infloop*/for(constructor;  /x/ .propertyIsEnumerable(\"prototype\"); +(<x/> !== arguments)) {__count__ = <x><y/></x>;throw true; }");
tryItOut("L: var __proto__ = <><x><y/></x></>, prop;");
tryItOut("if(()) { if (null()) {var prototype; }} else let (prototype) { {} }");
tryItOut("if(1.3) {export prototype;let prop = (-1), prototype = <y><z/></y>; } else {; }");
tryItOut("M:switch(new Error({})) { case 9: break;  }");
tryItOut("/*infloop*/while(('fafafa'.replace(/a/g, gc)).propertyIsEnumerable(\"__proto__\")){}");
tryItOut("L:while(( \"\"  ,  /x/ .eval(*::* if (__proto__)) || \n<x><\fy/></x>) && 0)((undefined.__count__))(1.3.isPrototypeOf( '' ))");
tryItOut("/*infloop*/L:for(let __parent__; (void *.@*.watch(\"prop\", function(y) { yield y; M:if(undefined instanceof (.2++)) return;; yield y; })); (p={}, (p.z = <x><y/></x>)())) {if(false .@*:: false) {(<x><y/></x>);yield; } else  if (<x><y/></x> + undefined) {return; } else return prop; }");
tryItOut("var __proto__ = *::*;\nthrow 1e4;\n");
tryItOut("switch(eval) { case yield *: continue ;break; prop;break; /*for..in*/L:for(const __iterator__ in ((prop = \tconstructor)(1e+81))){export __proto__; } }");
tryItOut("L:if((__proto__ = ({prop getter: function  __proto__ (__proto__, __parent__)eval(\"true\", <><x><y/></x></>) }))) const __iterator__ = <x><y/></x>, __iterator__; else  if ((--<y><z/></y>.throw(({prop getter: __iterator__ })).__defineSetter__(\"__proto__\", (yield [1,,] @ @foo).__defineSetter__))) __iterator__ else if((__iterator__.isPrototypeOf(<x/>))) {yield #1=[#1#]; } else  if ((1e-81)) {function(q) { return q; } } else {;var __parent__, __parent__; }");
tryItOut("/*for..in*/M:for(var prototype in undefined) {let (prototype = <>yield <><x><y/></x></>;</>) { {} }continue ; }");
tryItOut("L: {export __noSuchMethod__;-0; }");
tryItOut("do /*for..in*/for(setter.__proto__ in this) {yield; } while(([* ? eval(\"<><x>< <x><y/></x> y/>/x></>\", \t<><x><y/></x></>) : <employee id=\"1\"><name>Joe</name><age>20</age></employee>]) && 0);");
tryItOut("return;let __count__, prop = <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("this.zzz.zzz\n");
tryItOut("switch(-0) { default: case *: ;break ; }");
tryItOut("with(//h\n<xxx>{constructor}</xxx>.( \"\" (<x><y/></x>, <><x><y/></x></>)))let __count__, __iterator__ = *::*;");
tryItOut("with(gc(@foo))yield __proto__;");
tryItOut("if(~(new Function)()) {throw <><x><y/></x></>;__count__; } else  if (([11,12,13,14].map)--) {var prop = @foo, function::__count__ = <><x><y/></x></>; } else {(*::*);gc() }");
tryItOut("( /x/g )\n");
tryItOut("export __parent__;");
tryItOut("throw window;");
tryItOut("if([4. if (*::*)]) export __noSuchMethod__; else  if (1.3) gc()");
tryItOut("switch((new Array())) { default: gc() }");
tryItOut("do let (__proto__, __count__ = 1.2e3) { return; }\f while(((({constructor: (*::*.throw(033).yoyo((<><x><y/></x></>.__iterator__))).__lookupSetter__(\"__proto__\")}))) && 0);");
tryItOut("L: ");
tryItOut("{}\nwindow");
tryItOut("const __count__, __noSuchMethod__ = 0/0;");
tryItOut("continue ;");
tryItOut("yield (<x><y/></x>.throw( /x/ ) /  \"\" [false]);");
tryItOut("if(<>(this);</>.__lookupSetter__(\"constructor\")) {{new Functionyield <x><y/></x>; }gc() } else gc()");
tryItOut("/*for..in*/L:for(let [prototype, prop] = (uneval((*::*.unwatch(\"prop\")))) in *::*) {return; }");
tryItOut("/*infloop*/L:for([[]]; <><x><y/></x></>; @foo) {var __parent__ = undefined;throw  \"\" ; }");
tryItOut("if(((uneval(prop.({ __count__: __noSuchMethod__, __count__: __count__ }) = \n<><x><y/></x\t></>)))) {/*for..in*/for(let prototype.__proto__ in prototype) prop, __noSuchMethod__;if(<y><z/></y>) { if (@foo) {}} else throw <><x><y/></x></>; }");
tryItOut("with({__parent__:  \"\" .unwatch(\"prop\")}){(__parent__).watch }");
tryItOut("/*for..in*/for(var __parent__ in ((<>__noSuchMethod__, prototype</>)(prop|=this))){var constructor, __parent__;continue ; }");
tryItOut("if(5.0000000000000000000000) /*for..in*/for(__parent__ in <x><y/></x>) {break ;const __iterator__ =  \"\" ; } else throw function ([y]) { };( '' );if((prototype = [z1])) var __count__; else  if (__noSuchMethod__ = @foo) yield  /x/ ;");
tryItOut("export __proto__;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __iterator__] = new RegExp(*::*) in var __noSuchMethod__, __parent__;) __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = undefined |= true in <x/>) ;");
tryItOut("yield;");
tryItOut("/*infloop*/for(constructor; undefined -= constructor.__iterator__; <><x>/*\n*/<y/></x></>.constructor = (@foo.constructor)) {export this; }");
tryItOut("return new ((<x><y/></x>.__defineGetter__(\"prop\", [,,]))).__defineSetter__(__parent__ = __iterator__, (({prototype: function ([y]) { },  get constructor __iterator__ (__iterator__, constructor) { yield window }  })));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__ in (prototype = arguments)) {__noSuchMethod__; }");
tryItOut("/*for..in*/M:for(function::constructor = this in function ([y]) { }) break \n");
tryItOut("do {const get, __count__ = 0.1; } while((constructor = new window()) && 0);");
tryItOut("if(<x><y/></x>.( /x/ )) {gc()var prototype, prototype = <><x><y/></x></>; } else  if ([11,12,13,14].filter) const prototype; else {/*for..in*/for((new Iterator(true, [,])) = ({a1:1}) .@x:: <><x><y/></x></> in <><x\n><y/></x></>) \f{var constructor, constructor = 0;{} }yield; }");
tryItOut("L: {throw <y><z/></y>;{constructor;export __count__; } }");
tryItOut("with(new (({}).__lookupGetter__)( /x/ , <><x><y/></x></>)){(1e81); }");
tryItOut("this.zzz.zzz;");
tryItOut("break \n");
tryItOut("/*for..in*/L:for(const __proto__ = ((@foo.\fisPrototypeOf(__parent__)) >>= #1#) in (-0).isPrototypeOf( '' )) throw <x><y/></x>;");
tryItOut("do {for(let y in [5,6,7,8]) {} } while((((typeof ([(__iterator__ = (function ([y]) { })())].some(window))).__lookupSetter__(\"prototype\"))) && 0);");
tryItOut("/*infloop*/for(var __noSuchMethod__; ((new (.2)()) !== (constructor = <x/>)); <><x><y/></x></>) yield;");
tryItOut("let(prop) ((function(){yield;})());");
tryItOut("{yield this; }");
tryItOut("/*infloop*/M:while(prototype = (<><x><y/></x></> <= [,])){with(function::constructor = <!--yy-->.unwatch(\"prototype\")){{({}).hasOwnPropertynew Function } } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(window in @foo; constructor = [[1]]; ((null).watch).call(<x/>, <x><y/></x>)) return __parent__;");
tryItOut("/*infloop*/for(var constructor; ('fafafa'.replace(/\fa/g, (undefined).__defineSetter__).__lookupSetter__(\"prototype\")); [prototype((__parent__ = 1.2e3)), ] = (([<x><y/></x> for (prop in <y><z/></y>)].__defineGetter__(\"__noSuchMethod__\", (eval).call)) in *)) {export *; }");
tryItOut("/*for..in*/for(const  in ((({ get __count__ prop () { yield  /x/g  }  }) ^= [15,16,17,18].filter((.2).watch, <x/>))(__parent__.@foo))){}");
tryItOut("for(let y in [5,6,7,8]) return prop;");
tryItOut("continue M\nbreak L;");
tryItOut("/*for..in*/for(let (__parent__) in ((((/a/gi)()))(([ \"\" ].filter('haha'.split)))))(__count__);");
tryItOut("let (prototype) { {while(([1,,]) && 0){yield null; }yield; } }");
tryItOut("M:if([11,12,13,14].filter) if( /x/  <<= <><x><y/></x></>) {} else  if (prop = __noSuchMethod__) let constructor = 1e-81; else {(<x><y/></x>);__parent__ =  \"\" , prototype = 0x99; } else  if (('haha'.split).call(window, <y><z/></y>).yoyo(({__proto__: <><x><y/></x></>, __iterator__ getter: function  prototype \f(__count__, __parent__)<><x><y/></x></> }))) {__noSuchMethod__;/*infloop*/do /*\n*/{ } while(__parent__ =  \"\" ); }");
tryItOut("if((Math.pow).call(eval(\"__proto__, __iterator__;\", <x><y/></x>), ((p={}, (p.z = (<x><y/></x>.(({}))))())), 1.2e3)) {{}const __proto__ = null, __proto__; } else  if (prototype, [z1,,] = [<x><y/></x>].some(function () { return; } )) const prop = 5.0000000000000000000000; else (Math.sin).call const __parent__;");
tryItOut("/*infloop*/L:for(var __parent__; true; 3) {throw __noSuchMethod__; }");
tryItOut("/*infloop*/M:for((({ set __count__() { return  /x/  } , __iterator__: this }))['prototype'] = new this(); *; new __proto__ ? let (constructor, prop = <><x><y/></x></>)  \"\"  : ) /*for..in*/for(__parent__ = @foo in <y><z/></y>) ");
tryItOut("with({}) { throw constructor = true; } ");
tryItOut("/*infloop*/for(let prop = window; <y><z/></y>; <><x><y/></x></>) throw <x><y/></x>;(<x/>);");
tryItOut("/*for..in*/for(const constructor = <x><y/></x> ? <x><y/></x>.(<><x><y/></x></>) : (let (__iterator__ = constructor) -1) in <><x><y/></x></>) {default: ; }");
tryItOut("/*infloop*/for(new (*)( /x/ , true); __count__.__proto__; false) {const __noSuchMethod__\nexport __parent__; }");
tryItOut("export __noSuchMethod__;gc()");
tryItOut("/*for..in*/M:for(__iterator__ = (<y><z/></y>.@foo) in <><x><y/></x></>.isPrototypeOf(033)) {switch(<y><z/></y>) { case *: export \tget;case null: case __noSuchMethod__: export *;default: export *;break; <><x><y/></x></>;return *::*;return;break;  } }");
tryItOut("while(((typeof __iterator__)) && 0)return;");
tryItOut("{} const __parent__;");
tryItOut("while((new (gc)()) && 0){continue M;export *\n/*infloop*/M:for(var constructor; <y><z/></y>; @foo) {export *;export prototype; } }");
tryItOut("/*infloop*/for((constructor); (x::prop); <><x><y/></x></>.__defineGetter__(\"__count__\", <x><y/></x>)) export __count__;");
tryItOut("/*for..in*/M:for(const x::__iterator__ in 3/0) {M:if(<><x><y/></x></>) { if ( /x/g ) let constructor, prototype =  \"\" ; else {return;; }}export *; }");
tryItOut("for(let y in []);");
tryItOut("const __parent__, prop = <><x><y/></x></>;");
tryItOut("/*infloop*/for(let ({ prototype: constructor }) = ([<x><y/></x>__noSuchMethod__]); eval(\"\", window); (__parent__)) export __noSuchMethod__;");
tryItOut("var constructor;");
tryItOut("{export *; }");
tryItOut("export *;");
tryItOut("/*infloop*/for( \"\" ; <><x><y/></x></>; <y><z/></y>) {export x::prop; }");
