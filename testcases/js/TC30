
tryItOut("/*for..in*/L:for(let [__iterator__, __proto__] = <><x><y/></x></> in __parent__) {const __count__ =  \"\" ;export __count__; }");
tryItOut("throw StopIteration;");
tryItOut("if(<zzz><y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")</zzz>.(prop = 1e4\n)) return;");
tryItOut("prop = constructor;");
tryItOut("export prototype\n{};");
tryItOut("(null);");
tryItOut("{ }");
tryItOut("{{}if(false) {constructor, __proto__<y><z/></y>; } else  if (prototype) throw <><x><y/></x></>; else continue M; }");
tryItOut("if(<><x><y/></x></> | @foo) break M; else  if ( '' ) ([,,z1]); else {gc() }");
tryItOut("if(new Exception(__noSuchMethod__, 1.3))  else { }");
tryItOut("break ; const __noSuchMethod__");
tryItOut("export *;");
tryItOut("prop = __proto__;");
tryItOut("/*for..in*/for(var prototype in #1#) (false);");
tryItOut("L: {while(([]) && 0)return; }");
tryItOut("return __parent__;\nexport __parent__;\n\nyield;\n");
tryItOut("with({}) if(<><x><y/></x></>) yield false; else  if (*::*) true; else let get;(*);");
tryItOut("__count__ = [z1,,];");
tryItOut("/*for..in*/for(let __proto__ in ((function  __iterator__ (__proto__, __iterator__) { return (-1) } )(<x/>)))const constructor, constructor;");
tryItOut("M:if((prop.__parent__)) {/*infloop*/for(const try { return <x><y/></x>; } catch(__count__ if <x><y/></x>) { return; } catch(__count__ if (function(){prop})()) { window; } catch(prop if __proto__) { constructor } catch(__iterator__) { export *; } finally { continue M; }  = <><x><y/></x><//h\n/>; __count__; function(id) { return id }) {;let prototype, prototype; } }");
tryItOut("L: yield;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do M:with({__proto__: [z1,,] < this}){yield;return __count__; } while(\n /x/g );");
tryItOut("with(this.__defineGetter__(\"__parent__\", /a/gi)++)/*infloop*/do {let __noSuchMethod__;var {; } while((<><x><y/></x></>));");
tryItOut("/*for..in*/for(let __proto__ = 3 in true) {export *; }return;");
tryItOut("{let (prototype = <x><y/></x>, __iterator__ = window) { var __count__; }/*for..in*/for(var <x><y/></x> in  /x/g ) {return  '' ; } }");
tryItOut("{(this);const constructor = <><x><y/></x>/>, prototype =  /x/ ; }");
tryItOut("/*infloop*/('haha'.split).call(window, false) ^= <><x><y/></x></>--, window[ /x/ ]");
tryItOut("yield <x><y/></x>; const constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in ((__parent__.((-1))).watch).call((__parent__.__parent__ = __iterator__), )) ;");
tryItOut("/*infloop*/do yield <><x><y/></x></>; while(<\tx><y/></x>);");
tryItOut("let(__parent__) ((function(){let((1.3);) ((function(){__iterator__ = RangeError(prototype)})());})());");
tryItOut("/*infloop*/for(var ({ __proto__: prototype: <>yyy</> }) = 033; this.zzz.zzz; (yield <x><y/></x>)) {export *;if(<x><y/></x>.hasOwnProperty(\"prototype\")) { if (new (eval)(*)) ; else {gc()continue M; }} }");
tryItOut("return  \"\" \nif(__iterator__) const prop, __proto__; else  if () gc else {return  /x/g ;yield 4.; }");
tryItOut("let (__iterator__, __iterator__ = true) { return <y><z/></y>; }");
tryItOut("M:with({prop: <x><y/></x>})return;");
tryItOut("/*infloop*/M:do {M:if(this) gc() else  if (@foo) {let __count__ = prop; } else {yield #1#;let prototype = window, __count__; } } while([ /x/g  if (false)]);");
tryItOut("/*for..in*/L:for(const __iterator__ in ((undefined)([<>#3={a:#3#}</>].map(this % 1e81))))__iterator__");
tryItOut("L: {export *;var prop = __iterator__; }");
tryItOut("export *;");
tryItOut("return <><x><y/></x></>; const prototype;");
tryItOut("{}");
tryItOut("{prototype, __parent__ = @foo;{} }");
tryItOut("let prototype, __count__\n");
tryItOut("{{yield <y><z/></y>; }gc() }");
tryItOut("/*for..in*/M:for((__parent__) in eval(\"033\", <x><y/></x>)) function(id) { return id };");
tryItOut("var __noSuchMethod__, prop;/*for..in*/for(prop in <><x><y/></x></>) {let prop = __count__, prototype = <x><y/></x>;export __noSuchMethod__; }");
tryItOut("{4.export *; }\nL:if((<><x><y/></x></> === <x><y/></x>)) {return;; } else  if (4..__noSuchMethod__) {export prop; }");
tryItOut("let(({ __parent__: __parent__, __count__: __count__ }) = constructor = 3.141592653589793) { {}");
tryItOut("with({__iterator__: (@foo.valueOf(\"number\")[new x::__noSuchMethod__ = function(id) { return id }, __iterator__()])}){{}(false); }");
tryItOut("let (__proto__ = *, __iterator__) { __iterator__, __count__ = []; }");
tryItOut("while((window) && 0){@foo/*for..in*/for(__parent__ in @foo) L:if(__count__) prop = undefined; }");
tryItOut("if(+[__noSuchMethod__ = \f<x><y/></x>].filter(function(y) { yield y; let (__proto__, __count__ = <x><y/></x>) { ; }; yield y; })) return *\n; else  if (<>(new __iterator__.__parent__ = <x><y/></x> &&  /x/g ())</>) {with(window)yield @foo;throw *::*; } else {__proto__ }");
tryItOut("continue ");
tryItOut("{let (prototype, constructor = ({})) { {} } }");
tryItOut("for(let y in [5,6,7,8]) [__noSuchMethod__, \t<ccc:ddd></\fccc:ddd>, ] = __parent__\t;");
tryItOut("\n");
tryItOut("const __noSuchMethod__ = <x/>; const __noSuchMethod__;");
tryItOut("if(('fafafa'.replace(/a/g, function(y) { yield y; (prototype);; yield y; }))) { if ((__proto__.prop getter= -0.throw(<y><z/></y>))) {/*infloop*/M:for(prop = 3.141592653589793; ({a2:z2}); [z1]) {export __parent__;{} }export __count__; }} else constructor: <><x><y/></x></>.throw( \"\" ) const constructor;");
tryItOut("while((+([1,,] for (constructor in <x><y/></x>)).@foo) && 0){L: {if(4.) export __iterator__; else  if (__count__) {undefined{} } else (*); }break  }");
tryItOut("/*infloop*/M:for(__iterator__; <x/>; <y><z/></y>) continue M;yield <><x//h\n><y/></x></>;");
tryItOut("do {return this; } while((1.3) && 0);");
tryItOut("L:if(__count__ ? window : 0x99) \f{ if (({prototype: #1=({prop: @foo}),  get prop function::x::__count__ (__parent__) { yield <xxx {constructor}={__count__ = <><x><y/></x></>} /> }  })) {{} }} else {;return window; }");
tryItOut("if(this) { if (__parent__ % (<x/>)(({a1:1})(__iterator__, <x><y/></x>))) {if(<x><y/></x>) __proto__ = this; else  if (null) {throw  /x/ ; }gc() }} else ((function ([y]) { })());");
tryItOut("export *\n");
tryItOut("(new Function(\"throw __parent__;\"))");
tryItOut("with({}) for(let y in [5,6,7,8]) gc()");
tryItOut("with({}) let prop = 1.3;");
tryItOut("/*infloop*/do {/*for..in*/for(var __noSuchMethod__ = <x><y/></x>['prototype'] in <x><y/></x>.valueOf(\"number\")) {yield 0x99;/*infloop*/while(@foo)<><x><y/></x></>; } } while(<><x><y/></x></>.unwatch(\"__proto__\"));");
tryItOut("var __noSuchMethod__ = <x/>, constructor;\n(arguments);\n");
tryItOut("L: return <><x><y/></x></>;");
tryItOut("/*infloop*/for(__proto__ =  ''  @  /* Comment */*::*; eval(\"(yield [z1,,])\", new ( /x/g )()); new <><x><y/></x></>((yield <><x><y/></x></>),  \"\" )) {M:if(true) __proto__, constructor = false; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*for..in*/for(const prototype in ((([15,16,17,18].sort('haha'.split, (delete)(<x><y/></x>\r % __count__))).__defineSetter__)(-0.__lookupSetter__(\"constructor\")))){__iterator__, __noSuchMethod__;return (-1); }");
tryItOut("let (\t__noSuchMethod__) { /*infloop*/for(var constructor; ({ __parent__: ({ __iterator__: __proto__ }), __proto__: prop }) = __parent__.__iterator__ getter= function(q) { return q; }; get(export *) = *) {{} } }");
tryItOut("L:while((typeof prop) && 0)__noSuchMethod__;");
tryItOut("{throw @foo[<x><y/></x>]; }\n");
tryItOut("with({constructor: ( /* Comment */__noSuchMethod__ = @foo |= <y><z/></y>.throw( /x/g )\r)}){this.zzz.zzz; }");
tryItOut("switch(__noSuchMethod__ = ({ __parent__: __noSuchMethod__, prop: __proto__ })) { case 2: continue ;case (__count__.prototype = <y><z/></y>): break; with({__parent__: __iterator__})/a/gibreak;  }");
tryItOut("let(prototype = <x/>, constructor = window) { break M;\ngc()\n");
tryItOut("do  while(((prototype.__proto__ = <x/>).eval((false.eval(__proto__)))) && 0);");
tryItOut("M:with({prop: this.__defineGetter__(\"constructor\", function(y) { yield y; -1;; yield y; })})L: {prop }");
tryItOut("let (__iterator__) { /a/gi }");
tryItOut("if(([11,12,13,14].map).propertyIsEnumerable(\"__count__\")) { if ( /* Comment */*::*.@foo) export *;} else if((<x><y/></x>)[window]) throw yield;;");
tryItOut("L:with({constructor:  /x/g })");
tryItOut("/*for..in*/for(var [constructor, prop] = (let (__iterator__ = <\r><x><y/></x></>, __iterator__) constructor @  /x/ ) in --<x/>) return #1#;\rL: {export *;export __noSuchMethod__; }");
tryItOut("L:if(new (<><x><y/></x></>)(constructor, <x/>)/*\n*/) { if (<bbb xmlns=\"(@foo++)\"><ccc:ddd><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></ccc:ddd></bbb>) {export ({});return <><x><y/></x></>; } else {throw *; }}L: {gc() }");
tryItOut("/*infloop*/do {(*);(*); } while(~(__noSuchMethod__ = *));");
tryItOut("prop.prop = __count__;");
tryItOut("/*infloop*/for([, , , ({ \f<x/> .. 0x99.prop: __parent__, __noSuchMethod__: ({ __iterator__: ({ constructor: prototype, each(\f*::*): ({ constructor: __proto__, __proto__: __iterator__ }) }) }) })] = __parent__; (<x><y/></x> ||  /x/ ).__noSuchMethod__; this.__defineGetter__(\"__iterator__\", /a/gi)) return 1e4;");
tryItOut("([,]);\nyield  '' ;\n");
tryItOut("export *;\nif((-0).__lookupSetter__(\"__proto__\")) { if (window != this) ; else export *;}\n");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor((new (Math.sin)(var __parent__, prop = false;,  \"\" ))) in ({__proto__: [[]], __parent__ getter: 'haha'.split })) {break ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in #1=[#1#]) {return <y><z/></y>;yield <x/>; }");
tryItOut("L:while((*) && 0)<\fccc:ddd></ccc:ddd>");
tryItOut("return <x/>;\ngc()\n");
tryItOut("L:with({constructor: ([z1] >> false)})export *;");
tryItOut("{M:if(new (__parent__ = prototype = prop)(([z1])().__iterator__)) { } else  if (((__proto__.__count__ = null++)((<x><y/></x>.(*))))) var prop = null; else {yield;L: {throw <><x><y/></x></>;export __proto__; } } }");
tryItOut("with(yield *::* >= <x/>\t)(@foo);");
tryItOut("while((((<><x><y/></x></>)(<y><z/></y>))) && 0){let __count__, __noSuchMethod__; }");
tryItOut("/*infloop*/do {yield <><x><y/></x></><x><y/></x>; } while((__noSuchMethod__ = prop = <x/>));");
tryItOut("let(({ constructor: ({ __proto__: ({ __noSuchMethod__: ({ __proto__: constructor }) }), __iterator__: ({ __count__: __noSuchMethod__, __parent__: ({ __proto__: __parent__ }) }) }), __proto__: prop }) = do __count__, __parent__; while((<><x><y/></x></>) && 0); = null - (-1)) { let(({ __iterator__: __parent__ }) = ([__count__].some(<x><y/></x>).hasOwnProperty(\"constructor\"))) { for(let y in []);");
tryItOut("/*infloop*/for(prototype; __count__; prototype = [1,2,3,4].slice()) export __proto__;");
tryItOut("let ([, [, , , ], , ], [__parent__, , , ] = (<x><y/></x>.__iterator__)) { /*for..in*/for(var __parent__ = __iterator__ =  /x/g  in 0x99) {gc() } }");
tryItOut("M:if((null ? <><x><y/></x></> : 033.__lookupSetter__(\"__count__\"))) /*infloop*/do __parent__, __parent__ = <x><y/></x>; while(#1=(({__parent__: this\f })).eval((uneval(window)))); else  if (true.propertyIsEnumerable(\"prototype\"))  else <x/>");
tryItOut("L:switch(__count__ =  '' .throw(window.*)) { case (__parent__ = <x><y/></x>): break; export __count__;default: /*infloop*/M:for(const [] = ({ __iterator__: ({ __count__: prop, __parent__: prop }) }) = this.zzz.zzz; ({ __parent__: prop })+=function::__parent__ =  \"\" ; Math.pow()) case 9:  }");
tryItOut("var __proto__,  /x/g ;");
tryItOut("yield  '' \n");
tryItOut("switch([15,16,17,18].map\r(false, try { const __noSuchMethod__ = false; } catch(__noSuchMethod__) { return  /x/g ; } finally { (<><x><y/></x></>); } ).unwatch(\"__proto__\")) { case [11,12,13,14].some: export __iterator__;\nvar constructor;\nbreak;  }L: {yield;{} }");
tryItOut("/*infloop*/while(this)gc()\n");
tryItOut("export __parent__");
tryItOut("{/*for..in*/for(__proto__ = __proto__.(null) in undefined) { }if((prototype = <x><y/></x>)) {return __iterator__;<><x><y/></x></> } else  if ((function  __iterator__ (prototype) { return window } ).call(<x><y/></x>, *::*)) {{} } else \f{var __parent__ = <x><y/></x>; } }");
tryItOut(" { yield __iterator__.__count__ = <y><z/></y> } ");
tryItOut("L: (new Function(\"export __proto__;\"))");
tryItOut("M:if(true.unwatch(\"__count__\")) { if (<><x><y/></x></>\n) {(this);export *; }} else {'haha'.splitreturn  '' ; }");
tryItOut("M:do {/*for..in*/L:for(var __parent__.constructor in ((({}).hasOwnProperty)(this.zzz.zzz))){ } } while(((eval(\"new (gc)(RangeError())\", * >= 0.1))) && 0); const __iterator__;");
tryItOut("M:if((this.@foo)) { if ((prototype = [, , , ])) {/*for..in*/for(var __iterator__ = ([1,2,3,4].map)() in window) {{var constructor, prop = 1.2e3;export __iterator__; } } } else {yield;throw *::*; }}");
tryItOut("/*for..in*/M:for(const __count__ in <><x><y/></x></>) {}");
tryItOut("while((([11,12,13,14].filter)) && 0){yield;{} }");
tryItOut("/*for..in*/for(let __proto__ = this.__defineGetter__(\"__proto__\", [1,2,3,4].slice) , constructor in <><x><y/></x></>) {0.1; const __iterator__; }");
tryItOut("while((new eval(\"continue L;\", true)) && 0){if((__noSuchMethod__ = (export __count__))) export __proto__; else const __noSuchMethod__ = false; }");
tryItOut("return  \"\" .__defineSetter__(\"each\", Math.pow) ? __iterator__.__noSuchMethod__ getter= [1,2,3,4].slice -= break L % ((constructor)(constructor, undefined)) : (p={}, (p.z = (this.zzz.zzz))()).watch(\"__parent__\", (new Function(\"Math.sin\"))) =  /x/ .@*;");
tryItOut("\nthrow <><x><y/></x></>;\n");
tryItOut("/*for..in*/\rM:for(var try { ; } finally { Math.pow }  in (((1 for (x in [])))(let (prop, set = <x><y/></x>) @foo))){{} }");
tryItOut("with(true())break L;");
tryItOut("let(__iterator__ = (__count__ = <x/>)) ((function(){/*infloop*/M:while(<x><y/></x>)(undefined);})());");
tryItOut("/*for..in*/for(var [__count__, prototype] = <><x><y/></x></> in <><x><y/></x></>) #3={a:#3#}\nwith({__iterator__: 3})return <y><z/></y>;");
tryItOut("");
tryItOut("with({__parent__: [15,16,17,18].filter(*::*, prop)})L: {throw <x><y/></x>; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in *) return;");
tryItOut(";");
tryItOut("L:if([(<><x><y/></x></>.__defineSetter__(\"__proto__\", function(q) { return q; }))].sort(function(q) { return q; }) >>>=(this.__defineGetter__(\"__iterator__\", Function))[([,,])[__proto__].__defineSetter__(\"prototype\", function(y) { yield y; (__proto__);; yield y; })]) {export prototype;if(prop) { if (@foo) export prototype; else {; }} } else  if (({})) {{gc() } }");
tryItOut("if(new (<x><y/></x> , 1.3.__iterator__ = (<y><z/></y>)())()) (__iterator__); else  if (<y><z/></y> ? (new ([])()) : (1 for (x in []))) {gc()if(-3/0) {gc() } else return; }");
tryItOut("__noSuchMethod__;\nreturn  '' ;\n");
tryItOut("/*infloop*/M:do {__proto__;; } while([,]);");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(@foo; (({__parent__: (__count__)() })); ((eval(\" /x/g \",  /x/g )).@*)) for(let y in []);");
tryItOut("/*infloop*/L:while(function(q) { return q; } >= let (__iterator__ = window, prop = 0) undefined)/*for..in*/for([__noSuchMethod__, __noSuchMethod__] =  /x/  in this) (null);");
tryItOut("L: break M;");
tryItOut("with({}) with({}) { let(__iterator__) ((function(){with({}) throw <x><y/></x>})()); } ");
tryItOut("with({__iterator__: yield  /x/g })/*infloop*/do ; while(((p={}, (p.z = <x><y/></x>)())));");
tryItOut("let (({ __count__: (window.watch(\"__parent__\", function ([y]) { }))(window) }) = (<><xxx>{prop}</xxx></>.isPrototypeOf(((uneval(<x><y/></x>)))))) { M:if((uneval( \"\" ))[prototype = this]) (try { let prototype; } catch(delete) { break ; } ); }");
tryItOut("if(__count__ = [,,] :: window) yield; else throw StopIteration;");
tryItOut("export __parent__\n{}");
tryItOut("/*for..in*/for(let prop = (@foo)(null).@foo\r in <y><z/></y>) return;");
tryItOut("/*for..in*/for([__iterator__, prototype] = __count__.__iterator__ |= (({ constructor: __iterator__, prototype: prop }) = <x><y/></x>) in (__parent__.prototype)) /*for..in*/for(const [__count__, __noSuchMethod__] = -3/0 ? <x><y/></x> :  /x/g  in <x><y/></x>) {return this;var __parent__ = undefined; }");
tryItOut("M:if(eval(\"new ((new Function(\\\"const __parent__, __parent__;\\\"))).apply(<><x><y/></x></> >>>=null[<x><y/></x> >>>=function(id) { return id }], false)\", <><{__iterator__}><>Iterator()</> </{__iterator__}></>)) /*infloop*/for(\r__iterator__; this.__defineGetter__(\"prop\", /a/gi) + (this.__defineGetter__(\"prototype\"\t, function  constructor (prototype)*).__lookupGetter__(\"__count__\")); ( /* Comment */[[1]].throw(<y><z/></y>))) gc() else  if (this %= *.prop = false[<y><z/></y>] !== ({__proto__: ([[]]).call(#3={a:#3#}, ), __parent__: ((prototype)() for each (__noSuchMethod__ in  \"\" )) })) with(([,,].__lookupGetter__(\"__proto__\"))){set; } else yield {};\n__iterator__ = ({a2:z2});;\n");
tryItOut("/*infloop*/L:while(([z1] /= -1)){__proto__ =  /x/g , __noSuchMethod__ = window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let 3.141592653589793.__count__ in *) (<x><y/></x>); const constructor;");
tryItOut("while((eval(\"(prop.__count__ = false)\", ( set #1=[#1#]['\t__proto__']\f constructor (prop, __noSuchMethod__) { let __parent__; } ))) && 0){export *; }\n/*for..in*/for(const [prop, __proto__] = [__proto__] in <><x><y/></x></>) throw <y><z/></y>;\n");
tryItOut("{return;const __proto__; }");
tryItOut("export __iterator__;");
tryItOut("yield __parent__;let prop;{yield null;__proto__, __noSuchMethod__ = 033; }");
tryItOut("with(\n<><x><y/></x></>){let prop; } const ({ __proto__: \nvar __iterator__ = undefined, prop;, __iterator__: ({ __iterator__: ({ prop: ({ __iterator__: ({ __parent__: __iterator__, __count__: __iterator__ }), prop: [, [[], , ({ __count__: __proto__, __count__: __parent__ }), , ], , [each]] }) }) }) });");
tryItOut("{/*for..in*/for(__count__ in ((eval)(<x><y/></x>)))\fconst __noSuchMethod__;false; }");
tryItOut("yield constructor; const __noSuchMethod__;");
tryItOut("with({}) { \treturn undefined; } ");
tryItOut("/*for..in*/for(var prop((p={}, (p.z = eval(\"\", <x><y/></x>(*, false)))())) in constructor = prop) {throw  '' ;; }");
tryItOut("if(-3/0) { }([15,16,17,18].sort(function(q) { return q; }, yield <x><y/></x>))['__count__'] { /x/ ; }/");
tryItOut("gc()");
tryItOut("yield\n");
tryItOut("while((<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>.(* + <x><y/></x>)) && 0){{} }");
tryItOut("/*infloop*/while( /x/ ){M:switch((<y><z/></y> >>= window += <x/> === 033)) { case 3:  }(1e-81); }");
tryItOut("if(__iterator__.__noSuchMethod__ = constructor ?  /x/  : false) { if (prop%=undefined) {throw <y><z/></y>; } else {export *;return; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in ({})) ");
tryItOut("/*infloop*/while([1,,])with({prototype: true}){(1.3); }");
tryItOut("with({}) [1,2,3,4].slicelet(__count__ = <y><z/></y>, __iterator__) { {}");
tryItOut("M:while(((function::__noSuchMethod__)) && 0);");
tryItOut("/*infloop*/while(<x><y/></x>.* == ((0x99).__defineSetter__) ? void prototype : [false]){continue L; }");
tryItOut("__iterator__ = prop;");
tryItOut("let (constructor = [, __proto__, , ] = 4..valueOf(\"number\")) { L:if( /* Comment */function(id) { return id } ? *::* : __noSuchMethod__) {L:if(4.) export *;let prototype, __parent__ = <x/>; } else throw @foo; }");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(const prop = yield () in 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) {{let constructor = <x/>\r; } const __proto__;if(this) {export __parent__; } }");
tryItOut("M:if((prototype.__proto__)) {L: {yield; }//h\n } else  if (prototype) if(this) let constructor = 5.0000000000000000000000, prop = <y><z/></y>; else  if ( '' ) function (prototype) { yield (function ([y]) { })() }  else {prop = true;yield  \"\" ; }");
tryItOut("break M;");
tryItOut("if(__iterator__) {{} const __count__;{} } else ");
tryItOut("constructor((undefined << 1e81 ^= function(id) { return id })) = __proto__;");
tryItOut("[,,z1]");
tryItOut("/*for..in*/for(__proto__ = (({__noSuchMethod__: ((uneval(<y><z/></y>)))})).hasOwnProperty(\"getter\") in <><>new Number(@foo, 1e+81)</></>) {/*for..in*/for(const true.throw( \"\" ) in (this.__defineSetter__(\"prop\", (function  let () { gc() } ).apply))) if() {throw  '' ;const prototype = <x><y/></x>, __parent__; } else  if (<><x><y/></x></>) const prototype = *::*, __iterator__; }");
tryItOut("M:if((this.zzz.zzz)) { if ((#3={a:#3#} , <x><y/></x>)) __iterator__ = *::*, constructor = __noSuchMethod__; else yield;}");
tryItOut("/*infloop*/for(let (__count__ = __proto__)  /x/g .hasOwnProperty(\"#1=[#1#]\").yoyo([z1]); (({ x::prototype: ({ __parent__: [, , __count__, __noSuchMethod__, __proto__] }) }) = [[__count__, [__proto__, __iterator__, __parent__, __proto__, ], ], [[__count__, , constructor], ({ prototype: prop }), , __count__, __iterator__]], ]); (<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")).yoyo((uneval(__count__)))) {yield;gc() }");
tryItOut("/*for..in*/for(let prop in (((eval).call)(<>yyy</>)))/*infloop*/()while(window{(<y><z/></y>); }");
tryItOut("switch((p={}, (p.z = ({a1:1}))())) { case <><bbb xmlns=\"<y><z/></y>\"> </bbb></>: var __iterator__, __count__ = window;break; case (undefined += []):  } const __proto__;");
tryItOut("return (.*);");
tryItOut("switch((__count__.throw(<x><y/></x>))) { default: (<y><z/></y>).__defineSetter__break;  }");
tryItOut("this.zzz.zzz;");
tryItOut("if((<y><z/></y> ? true : window)) {yield null;export __noSuchMethod__; } else let prop; const __count__;");
tryItOut("with(!<><x><y/></x></>);");
tryItOut("with({constructor: (this.zzz.zzz.watch(\"__noSuchMethod__\", (let (__proto__) <y><z/></y>\n).__defineSetter__))})throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("yield __proto__.watch(\"__parent__\", Math.pow).watch(\"prototype\", function  __proto__ () { return  /x/g  } ) >>> <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(#1=[#1#]['__count__'] = <x><y/></x>( '' ));");
tryItOut("if(() {M:if(<><x><y/></x></>) { if (prototype) __parent__ = *::*, __proto__; else {{}export get; }} }");
tryItOut("/*infloop*/L:for(__count__; this; (return)) __count__\nif(<><x><y/></x></> in <x><y/></x>) { } else  if (( \"\" .__count__)) {function  __parent__ (__count__, __proto__) '' return; } else {yield;const __noSuchMethod__, prop; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) break M; } ");
tryItOut("prototype;");
tryItOut("let(__noSuchMethod__: <y><z/></y>) ((function(){throw StopIteration;})());");
tryItOut("L: (window);");
tryItOut("(__count__.__iterator__) = __noSuchMethod__;");
tryItOut("if(({})) {const __iterator__, constructor; }");
tryItOut("M:with({__parent__: ([11,12,13,14].some)}){L: {throw <><x><y/></x></>; } }");
