
tryItOut("switch(*::*) { default: break;  }");
tryItOut("{}\nprototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var window in ({})) throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(var (4.)( /x/ ) in (('haha'.split)((p={}, (p.z = @foo)())))){yield <><x><y/></x></>;return <x><y/></x>; }\n/*infloop*/M:for(prototype; 'fafafa'.replace(/a/g, function  __count__ () { {} } ); this.__defineSetter__(\"__noSuchMethod__\", Math.pow)) {{} }");
tryItOut("L:with({constructor: -let __parent__ = __proto__\n{}}){throw undefined.__lookupSetter__(\"constructor\"); }");
tryItOut("");
tryItOut("if(__iterator__) { if ((<><x><y/></x></>.__proto__ = *::*).__defineGetter__(\"constructor\", function (__iterator__, __proto__) { gc() } ).@*) {let [] = null <<= 3/0, __parent__; } else export prop;}");
tryItOut("M:\rif(yield prototype.__parent__ = true.propertyIsEnumerable(\"__iterator__\").*.eval((Object()))) { if (@foo++) /*for..in*/for(let [__parent__//h\n, __count__] = <x/> <<= *::* in function ([y]) { }) gc() else yield;}");
tryItOut("{}");
tryItOut("switch(this.__defineSetter__(\"__noSuchMethod__\", function  constructor (prop, __iterator__) { return 033; } )) { case 1: case 0: break; break; break; default: return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(prop(new (({}).hasOwnProperty)(<x/>)) in __parent__) __parent__");
tryItOut("yield this;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("L: M:switch(new ((function (__proto__, function::__noSuchMethod__) { return (-0) } ).call)(undefined, 3)) { case 8: gc()let (__count__ = 4., __noSuchMethod__ = <><x><y/></x></>) { {} }break; L:do export *; while((@foo) && 0)\n__count__ = 4. }");
tryItOut("if((yield arguments[ '' ])) { if ('fafafa'.replace(/a/g, eval)) (false); export *;  else {}}");
tryItOut("/*infloop*/for(const constructor = this.__defineGetter__(\"prototype\", 'haha'.split); null , [11,12,13,14].map; new  /x/g (prop)) yield;");
tryItOut("if((prototype = <x/>)) {/*infloop*/for(const getter =  /x/ ; @foo; <x><y/></x>) {continue L;export __proto__; } }");
tryItOut("{/*infloop*/while(4.)var __parent__; }\n/*for..in*/for(let [constructor, prop] = (__iterator__.__count__.propertyIsEnumerable(\"function::__count__\")) in \tfalse) {throw true; }\n");
tryItOut("if((yield RangeError(@foo))) {(null);<bbb xmlns=\"[,].unwatch(\"(eval(\\\"[window if (1e4)]\\\", __iterator__%=1.2e3))\")\">yyy</bbb> }");
tryItOut("return;");
tryItOut("yield\ngc()");
tryItOut("if((new (<y><z/></y>)())) with(constructor){let prototype, __iterator__; } else /*infloop*/L:for(<x><y/></x>; true; *::*) \n");
tryItOut("(1.3);");
tryItOut("if(undefined) {let __noSuchMethod__ = true; }");
tryItOut("M:if(this &= -3/0.constructor) { if (eval(\"var __iterator__;\", <x><y/></x>.(<x><y/></x>))) function::__count__ else yield [1,,];}");
tryItOut("yield <x><y/></x>\n");
tryItOut("/*for..in*/for(var [constructor, __iterator__] = (({}).__lookupGetter__()) >> __noSuchMethod__ in (this.__defineSetter__(\"prototype\", this))) {switch(<x/> ? #1=[#1#] : <x/>) { default: ;break; break; case 6: gc() }/*for..in*/L:for(const __noSuchMethod__ in (((<x><y/></x>).__defineSetter__)( /x/g  = __parent__.__parent__ setter= gc))){function  __noSuchMethod__ (__noSuchMethod__)(function ([y]) { })()export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in undefined) export *;");
tryItOut("L: {<bbb xmlns=\"(\n<x><y/></x>)\"><ccc:ddd><!--yy-->\f</ccc:ddd></bbb>/*infloop*/do {gc()break ; } while(false); }");
tryItOut("(__iterator__); const prop;");
tryItOut("{return <><x><y/></x></>; }");
tryItOut(";\nreturn <x/>;\n");
tryItOut("if(undefined.__count__ = __parent__) {__count__ = <><x><y/></x></>, __iterator__;break ; }");
tryItOut("/*infloop*/M:for(prop; yield window.__noSuchMethod__; ) {/*infloop*/for(let __noSuchMethod__ = *; <x><y/></x>; *::*) yield;yield M:while((__iterator__) && 0)export *;; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) throw prop; } ");
tryItOut("do {export *;; } while((eval(\" /* Comment */<><x><y/></x></>\", <x><y/></x>)) && 0);");
tryItOut("with({}) with({}) ");
tryItOut("{return \tthis.__defineSetter__(\"__count__\", ({}).hasOwnProperty); }");
tryItOut("L:/*\n*/if(*) { if ((({}).__lookupGetter__)((-0), <x/>)) function  __count__ (constructor, constructor)<><x><y/></x></> else (this)\n}");
tryItOut("let(constructor) { return __parent__ = <><x><y/></x></>;");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("/*for..in*/for( { while((<><x><y/></x></>) && 0){export *;{} } }  = 0 in  /* Comment */((#0=[\r4.]) * new (\t[[]])(this))) yield;");
tryItOut("let(constructor, prop = <x><y/></x>) { return;");
tryItOut("/*for..in*/for([ \"\" , prop] = __count__ in <><x><y/></x></>) {<x><y/></x>; }");
tryItOut("with({__iterator__: ([<x><y/></x> .@  '' ])})var prop, __parent__;");
tryItOut("with(new (({a2:z2}))(<x><y/\n></x>, @foo)){\f; }\n\nfor(let y in []);");
tryItOut("/*infloop*/while((({__count__: prop([1,,])|=(-1) instanceof 1.3}))){(<x><y/></x>);__parent__ = prototype; }");
tryItOut("/*infloop*/M:for(([<y><z/></y> for (constructor in  /x/g )] %= (\n*)); <></>.(#0=[1.3\f]); \n(function (\t)<><x><y/></x></>((((__parent__).watch)())))) {if(*['__count__'] = *::*) yield function ([y]) { };/*infloop*/L:do (1.2e3); while((eval(\"5.0000000000000000000000\", window -= *::*))); }");
tryItOut("yield (1.3)[<><x><y/></x></>];");
tryItOut("/*infloop*/for(let  = window.@foo; __proto__.valueOf(\"number\"); 0.1) export __noSuchMethod__;");
tryItOut("/*infloop*/M:for([, ] = prop; __parent__.isPrototypeOf(0x99); (p={}, (p.z = eval(\"this\",  '' ))())) {/*for..in*/M:for(var constructor in (((1 for (x in [])))(window)))trueexport __noSuchMethod__; }");
tryItOut("return;\nreturn;\n const prop;");
tryItOut("/*for..in*/L:for(let __proto__ in <x><y/></x>) {yield; }");
tryItOut("return new (eval)(({ set constructor <><x><y/></x></> ()__noSuchMethod__, __iterator__ setter: eval }));");
tryItOut("{/*infloop*/while(-3/0){let __proto__; } }");
tryItOut("/*infloop*/M:while(({ constructor: __proto__, __proto__: let }) = __iterator__ &= <><x><y/></x></>)export *\n");
tryItOut("M:do /*for..in*/for(prop in  /x/g ) {break M;yield prototype; } while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0);");
tryItOut("let (__noSuchMethod__) { yield; }");
tryItOut("while((((<x><y/></x>))) && 0)constructor.(__parent__ = 0/0);");
tryItOut("if(\rfunction  prop () { yield; } ()) Math.sin\nL: {export *;; }\n else  if (<x><y/></x>.(window)) gc()");
tryItOut("try { for(let y in []); } catch(__proto__) { with({}) { ; }  } finally { for(let y in [5,6,7,8]) <y><z/></y>; } ");
tryItOut("let(__parent__, constructor) { return new (new <><x><y/></x></>([1]))();");
tryItOut("/*infloop*/for(var prototype = <x/>; <><x><y/></x></>; 1e-81) return  \"\" ;");
tryItOut("if(( < x::__parent__.eval( /x/g ))) <x><y/></x>; else  if (({a1:1}).constructor = __parent__\t) if((prototype = this)) { if (<x><y/></x>.(*::*)) #1#;} else return; else {break M;yield; }");
tryItOut("let (prop) { {} }");
tryItOut("{var __noSuchMethod__, prototype = <y><z/></y>; }");
tryItOut("export *\nlet constructor = false;if(<x><y/></x>) { if (({})) let __count__; else {<x/> }}");
tryItOut("try {  } catch(__parent__) { return; } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var __proto__; false <<= __parent__; (<x><y/></x>.((-1)))) gc()");
tryItOut("with({constructor: #2=*::*}){(({a1:1}));#1=[#1#]; }");
tryItOut("with(eval(\"<><x><y/></x></> &= *::*\", ({ setter: ({ prop: function::__count__ }), prop: /*for..in*/for(let __noSuchMethod__ in ((function () { return <><x><y/></x></> } )(@foo))){function () { yield [,,] }  } }) = true).isPrototypeOf((__proto__.__proto__ = 3 .. 1.3)))/*infloop*/do let constructor, __proto__; while([11,12,13,14].some);");
tryItOut("/*for..in*/for(var __proto__.__iterator__ in [1,2,3,4].slice) {gc()yield __noSuchMethod__; }");
tryItOut("let (__proto__ = <><x><y/></x></>) { throw *; }");
tryItOut("if(<y><z/></y>) { if (@foo)  \"\" ; else let __iterator__, constructor;}");
tryItOut("yield <x/>;");
tryItOut("L:with({constructor: ( \"\" .\tthrow(1.3)).watch(\"constructor\", #1=[#1#])})if(<><x><y/></x></>) [z1,,]; else  if (<x/>) ;");
tryItOut("if(prop :: <x/>) throw *; else  if (<y><z/></y>++) {return;yield false; } else {; }");
tryItOut("{}");
tryItOut("{;return 1e+81; }");
tryItOut("throw prop;");
tryItOut("L:if(<x/>) return __proto__;");
tryItOut("throw prototype\n");
tryItOut("yield  /x/ ;");
tryItOut("/*infloop*/for(__parent__ = <><x><y/></x></\n>; this; <x><y/></x>) {var prototype;__iterator__ }");
tryItOut("/*for..in*/for(var constructor in __proto__) {export *;gc() }");
tryItOut("with({__proto__: eval(\"(prototype = 1e81.hasOwnProperty(\\\"__noSuchMethod__\\\"))\", (null\t for each (__noSuchMethod__ in __proto__ = <x><y/></x>)))}){/*infloop*/for(let __parent__; __noSuchMethod__; 1.3) ; }");
tryItOut("\nif(constructor = [,]) {export __proto__; } else  if ( /x/ ) gc()");
tryItOut("/*for..in*/L:for(const [__count__, prototype] =  && <><x><y/></x></> === <><x><y/></x></> in (__noSuchMethod__ = this <<= return <><x><y/></x></>)) {with({}) const __proto__, __count__ = -3/0; }");
tryItOut("/*infloop*/for(let ({ __count__: prop, __parent__: ({ prototype: constructor }) }) = new ((((p={}, (p.z = undefined)())) @ ( /x/  ? * : <y><z/></y>))).watch((prototype = window)); window; this.zzz.zzz) {yield window; }");
tryItOut("export *;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = <xxx>{constructor}</xxx> in ({__iterator__: let (__proto__) <><x><y/></x></>, __noSuchMethod__ getter: ({__iterator__ setter: null }) })) {export *\nvar prototype; }");
tryItOut("{\n/*infloop*/M:for(const constructor; arguments; 3.141592653589793) {var __noSuchMethod__ = <y><z/></y>, prototype;gc() }\n/*infloop*/M:(const prop setter: *; <><x><y/></x></> ^= <y><z/></y> for (__parent__ in false);  return true;<><x><y/></x></>.__lookupSetter__(\"__parent__\")) gc() }");
tryItOut("yield;gc()");
tryItOut("if(<x><y/></x> < <x/>) {return;const prototype; } else  if ([__noSuchMethod__]) var constructor = <><x><y/></x></>, __proto__; else {gc(); }");
tryItOut("if(((function(q) { return q; })())) { if ((([,]).watch)(0, window)) {__noSuchMethod__ = false, prop = <x/>;var __count__; } else {let __count__;return; }}");
tryItOut("(-0);");
tryItOut("switch(constructor|=prop.__proto__ = undefined) { default: \n((this\n));/*infloop*/for(this; *::*; window) ( '' );break;  }");
tryItOut("/*infloop*/for(var __iterator__; eval(\"({prototype: false.eval( \\\"\\\" ), function::__noSuchMethod__: false })\", #2=[(#1=({constructor: null}))]); new Function(!__iterator__ = this, ((<y><z/></y>))) >>> ((!function::__iterator__.prototype setter= function  __count__ (__proto__, constructor) { return <x><y/></x> } ).@foo).yoyo(<x/>)) {const constructor;throw window; }");
tryItOut("{}");
tryItOut("with(({ get __count__ __iterator__ ()this })){yield; }");
tryItOut("L:if((p={}, (p.z = #2=[window])())) { if (this) {export prototype;{} } else const prototype = window, prototype;}");
tryItOut("return <y><z/></y>;");
tryItOut("if(1e4.throw(<y><z/></y>)) {yield function(id) { return id }; }");
tryItOut("throw 0.1;");
tryItOut("/*infloop*/while(null.yoyo(constructor)){continue ; }");
tryItOut("constructor = __count__;");
tryItOut("/*for..in*/for(const function::__noSuchMethod__ = 033.eval(constructor) in (case (-3/0 .. #3={a:#3#} %= this.zzz.zzz): /*for..in*/for(const __proto__ = let (constructor) <x><y/></x> in window) {__count__ =  /x/g ;; }break; continue Mdefault: case 8: case 3: .isPrototypeOf(-0))) ");
tryItOut("if( \"\" ) {yield;yield; } else  if () continue ;");
tryItOut("{throw 4.;; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = 1e4 in <x><y/></x>) ;");
tryItOut("yield !(new ([1,,])());");
tryItOut("/*infloop*/do {const __noSuchMethod__ = window;return; } while(\n*);");
tryItOut("if(((false.eval(undefined)) ? (__proto__ = null) : *) %= __iterator__) {M:if(yield) { if (<y><z/></y>) return [,,z1];} else export *; } else  if ([[1]]) {export *;/*infloop*/for(const __iterator__; (-3/0)(<x><y/></x>, [z1,,]); __noSuchMethod__ = <x><y/></x>) {return <x><y/></x>;const __proto__; }\n } else /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in 0/0) if(<y><z/></y>)  else  if (<x/>) return this; else (*);");
tryItOut("this.zzz.zzz;");
tryItOut("if(eval(\"( \\\"\\\" .constructor = <y><z/></y>.__lookupGetter__(\\\"__noSuchMethod__\\\"))\", constructor.__count__ = (<x/>.__count__))) continue ; else {}");
tryItOut("if(<x><y/></x>) { } else  if (<x><y/></x>) {export *;; }");
tryItOut("export *;yield\n");
tryItOut("/a/gi");
tryItOut("let __iterator__;");
tryItOut("if( '' ) { if (arguments) ;} else gc()");
tryItOut("export *;");
tryItOut("/*infloop*/for(let __count__; *.unwatch(\"__iterator__\"); <x><y/></x> && 1e-81) {__proto__, constructor = *; }");
tryItOut("");
tryItOut("/*infloop*/while(1.3)let prototype;");
tryItOut("export constructor;");
tryItOut("export *\n;");
tryItOut("/*infloop*/for(prop = Array(<y><z/></y>); yield false; prop = 0/0) case <><x><y/></x></>: __parent__;");
tryItOut("throw <x/>;\n({}).__lookupGetter__\n");
tryItOut("/*infloop*/for(<><x><y/></x></>; null; *) {let yield; }");
tryItOut("__parent__, __noSuchMethod__;");
tryItOut("M:if([<><x><y/></x></> if (*::*)] == new (<><x><y/></</>)()) {__count__ } else {;<x><y/></x>\f }");
tryItOut("M:if(null) { if (1.2e3()) {var prop; }} else {gc(){} }");
tryItOut("if(((p={}, (p.z = prototype.@*)()))) { if (__noSuchMethod__ .@x:: <x><y/></x>) break M; else while((try { let __iterator__ = <><x><y/></x></>, constructor; } catch(__noSuchMethod__ if  \"\" ) {  }  <<= window) && 0){var prototype; }}");
tryItOut("__noSuchMethod__.let = __proto__;");
tryItOut("/*for..in*/M:for(__iterator__ = true, prototype in ((({}).hasOwnProperty)( /* Comment */<><x><y/></x></>))){;export *; }");
tryItOut("if(*::*.unwatch(\"__iterator__\")) {gc() }");
tryItOut("while((( /x/g )()) && 0)const prototype;");
tryItOut("var prop");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in <x><y/></x>) {return;export __parent__; }\n");
tryItOut("/*for..in*/for(let prop in ((function  constructor (__iterator__) { yield; } )((([window/*\n*/ for (__count__ in <x><y/></x>)] > @foo) | __parent__ = (-0))))){L: {let prototype; }if(undefined) {(<x><y/></x>); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in prop.( /x/ )--) {return;/*for..in*/for(var prop in this) {this; } }");
tryItOut("L:switch(<x><y/></x>) { case 7: break; default: break; case 8: break; break; case 4: yield  \"\" ;break;  }");
tryItOut("while((.2) && 0)return null;");
tryItOut("return;\nwindow;\n");
tryItOut("M:switch((@foo++ ^= 0.throw((({__proto__: 3.141592653589793,  set __noSuchMethod__ prototype (/*) }))))) { default: break; case (({}\t.unwatch(\"prop\")))[<x/> | <><x><y/></x></>]: /*infloop*/for(let __iterator__; prototype = <x><y/></x>; ([1].watch(\"__count__\", Function))) {gc() }M:if(this) { if (prototype = __iterator__.__parent__) if(undefined) { if (1e+81) yield <x><y/></x>;} else let __noSuchMethod__, __count__ = <x><y/></x>;} else {gc()\n }break;  }");
tryItOut("while((*) && 0)Math.pow");
tryItOut("let (function::__parent__, __parent__) { {with(<x><y/></x>)throw window;const constructor; } }");
tryItOut("{throw 4.; }\n\n:\n");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/for(let ({ __proto__: ({ __count__: prototype, __noSuchMethod__: __proto__ }) }) = 'fafafa'.replace(/a/g, Math.pow); #1#.valueOf(\"number\"); eval(\"__proto__;\", <y><z/></y>(<><x><y/></x></>))) break ;");
tryItOut("L: {([1]);/*for..in*/M:for(const [prop, __parent__] = [,,] in <y><z/></y>) yield; }");
tryItOut("{; }");
tryItOut("M:if( /x/ ) { if (<x><y/></\fx>) *::*; else var __noSuchMethod__ = 033;}\nthrow <><x><y/></x></>;");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>; ({ __noSuchMethod__: [*::*, __proto__, ] }) = (__parent__.constructor = __count__.constructor); constructor % prototype) if(<y><z/></y>) gc()");
tryItOut("");
tryItOut("if(prop.__parent__.propertyIsEnumerable(\"prototype\")) {yield;let __noSuchMethod__; }");
tryItOut("L:if(<><x><y/></x></>.valueOf(\"number\").throw((window ? ({}) : <y><z/></y>))) {} else  if ((p={}, (p.z = __parent__ .@x:: (window === <x><y/></x>))())) {var function::__parent__;[], __count__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in ([(p={}, (p.z = * >>> window)())].sort(('haha'.split).call))) {function(q) { return q; }let __proto__ = <><x><y/></x></>, constructor }");
tryItOut("if(<><x><y/></x></>) (constructor); else  if (1e81) {function(q) { return q; } } else yield __parent__;");
tryItOut("if(eval(\"yield <x><y/></x>;\", let (__parent__ = false, prop) this)) { if ((Object(__proto__ = @foo, <x><y/></x>)[__iterator__\n.__parent__ = 'fafafa'.replace(/a/g, L:if(this.yoyo( \"\" )) { if ((__noSuchMethod__.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>))) {{}var constructor, prop; } else {__count__;; }\t})] for (__count__ in ({a2:z2})))) throw 1.2e3;} else /*infloop*/for(let __count__ = eval(\" '' \",  \"\" ); @foo < __iterator__; ) {yield __noSuchMethod__; }");
tryItOut("for(let y in []);");
tryItOut("M:if(('haha'.split).call( for (__iterator__ = <y><z/></y>['__iterator__'] in [,]) for (prop in true) for each (__proto__ in ({a1:1})), ) | (__parent__ =  /x/g )) {return  /x/ ;return window;; }");
tryItOut("/*infloop*/M:while(<y><z/></y>.propertyIsEnumerable(\"__iterator__\")){export *; }");
tryItOut("do let __parent__ = <x><y/></x>; while((constructor) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__.__parent__ in __noSuchMethod__.__parent__ = __noSuchMethod__) with(this)return this;");
tryItOut("let(window = (__count__ ? this : @foo)) ((function(){throw __iterator__;})());");
tryItOut("if(<><x><y/></x></>.@*) <xxx>{constructor}</xxx>");
tryItOut("switch(undefined.isPrototypeOf(*) = (yield -0)) { case 3: gc()export prop; }");
tryItOut("if(this.__defineGetter__(\"__count__\",  get __count__() { return <x><y/></x> } )) /*for..in*/for(const function::prototype in  /x/g .__lookupSetter__(\"__iterator__\")) ;");
tryItOut("\nbreak L;");
tryItOut("if( /x/g ) { if (yield (-1).valueOf(\"number\")) {yield;export __parent__; }} else {{} }");
tryItOut("break ;gc()");
tryItOut("while((this.__defineGetter__(\"__parent__\", Function)) && 0){L: export __count__;continue \n }");
tryItOut("/*infloop*/do L:switch(((0x99).__defineSetter__).call(*, window, 0)) { case @foo < this: return;break; case function(y) { yield y; var constructor = *, __proto__ = <x><y/></x>;; yield y; }: \fexport *; } while();");
tryItOut("L: {}");
tryItOut("yield 1.3;");
tryItOut("/*infloop*/M:for(let __count__; new Boolean() / __count__ =  '' ; (window = [,] / <y><z/></y>.valueOf(\"number\"))) /*infloop*/for(var ({ __proto__: __parent__ }) = [11,12,13,14].sort; __proto__ = <y><z/></y>; (@foo)) switch(*) { default:  }");
tryItOut("while((throw <y><z/></y>) && 0)\nexport *;\n");
tryItOut("{export __noSuchMethod__; }");
tryItOut("/*for..in*/for(var [prop, prototype] = eval(\"yield;\", [1]) += 3.141592653589793 in new  \"\" () - constructor.__lookupSetter__(\"__proto__\")) switch((false ? <x><y/></x> : false)) { default: break; break;  }");
tryItOut("/*infloop*/for(((__iterator__)) = (function (__noSuchMethod__, __parent__) { return window } ).call(<><x\f><y/></x></>, ) ? (<y><z/></y>.hasOwnProperty(\"__count__\")) :  /* Comment */[,,]; new [1,2,3,4].slice(<x><y/></x>.( /x/ )); <><bbb xmlns=\"<x><y/></x>\"></bbb><x><y/></x><ccc:ddd> </ccc:ddd></>) {Math.sin } const constructor;");
tryItOut("break M;\n[1,2,3,4].map\n");
tryItOut("const __count__ = 4.;");
tryItOut("/*infloop*/M:do var [] = -1 ^ __count__, __parent__ = function  constructor () { function  __count__ (prop) { const constructor, prop =  /x/ ; }  } ; while(~__parent__());");
tryItOut("/*for..in*/for(var [prop, ] = ({ get __noSuchMethod__() { return <x><y/></x>; }  }) in null) {export *; }");
tryItOut("break L;");
tryItOut("return;(this);\nvar __proto__ = false;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in <x/>) {yield <x/>;{} }");
tryItOut("/*for..in*/for(const (constructor = window)('fafafa'.replace(/a/g, eval)) in ((__parent__)((__iterator__ = [1])))){export __noSuchMethod__; }");
tryItOut(";yield this;");
tryItOut("/*infloop*/do export __parent__; while(([constructor = __parent__]) % ([prop].filter((({}).__lookupGetter__).call)).__defineSetter__(\"__proto__\", (1e-81).call));");
tryItOut("/*for..in*/for(var [prop, constructor] = window in [(yield -1) if (<><x><y/></x></>)]) {}");
tryItOut("/*for..in*/for(var [constructor, __proto__] = undefined in undefined) {; }");
tryItOut("1e81;");
tryItOut("throw __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) throw * = <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(<x><y/></x>) {<x/>;yield; }\n/*for..in*/L:for(let __parent__ in ((eval)((\f0 || 0x99)(+<y><z/></y> ^ undefined, (#0=[@foo]))))){throw 3 .@x:: *::*; }");
tryItOut("with((<><x><y/></x></> ::  /x/  >> window))export *;");
tryItOut("do {return;const __noSuchMethod__ = <x><y/></x>, __proto__ = this; } while(( ) && 0);");
