
tryItOut("L: yield;");
tryItOut("{break L;var __noSuchMethod__ = ({a1:1}), prop = true; }");
tryItOut("L:if(\neval(\"#1#\", <><x><y/></x></>)) /*for..in*/for(prop(false) in (('haha'.split)(constructor =  \"\" ))){yield;var __count__, prototype = false; } else { }");
tryItOut("{continue M;{yield;(1 for (x in [])) } }");
tryItOut("with({__iterator__: }){(<><x><y/></x></>);with(true){var __proto__; } } const __noSuchMethod__;");
tryItOut("M:if(*::* ? <x><y/></x> : @foo.__noSuchMethod__) {throw -0; } else  if (null <<= __count__) throw <x/>;\n/*for..in*/M:for(let __iterator__ in ((new Function)(new ((3.141592653589793 .@x:: -3/0))(({}).hasOwnProperty, <><x><y/></x></>)))){; }\n");
tryItOut("let (prop, function::__proto__) { /*for..in*/for([__iterator__, __iterator__] =  \"\"  in <x><y/></x>) {; } }");
tryItOut("with({}) /*infloop*/while(window){yield; { yield 3 }  }\nM:with(<x><y/></x>)1e-81;");
tryItOut("try { gc() } finally { ; } if(((constructor.__noSuchMethod__ = ((-0))(function::__noSuchMethod__, <x><y/></x>)))) { if (\n(<x/>.__parent__) |= [*::* for each (constructor in constructor)]) /*for..in*//* nogeckoex bug 349964 */window else L:if(<x/>) {throw __noSuchMethod__;let x::__proto__ = 0.1; }}");
tryItOut("M:do let __count__, prototype; while((<y><z/></y>) && 0);");
tryItOut("var __iterator__;");
tryItOut("constructor = <><x><y/></x></>; const prototype\nlet (__parent__ = *, __count__) { yield  \"\" ; }");
tryItOut("");
tryItOut("with(window)(this);");
tryItOut("\nreturn;");
tryItOut("gc()");
tryItOut("M:with({let: [15,16,17,18].some((eval).call, <><x><y/></x></>)}){ /x/g ;throw @foo; }");
tryItOut("with({constructor: -3/0}){(window); }");
tryItOut("const constructor = __noSuchMethod__; const prototype\n");
tryItOut("/*for..in*/L:for(var __noSuchMethod__['__parent__'] in ((gc)(@foo)))let __count__ = @foo;");
tryItOut("switch(<x><y/></x>) { default: const constructor = window; }");
tryItOut("let (__count__ = <><x><y/\f></x></>) { *::*; }");
tryItOut("throw constructor;");
tryItOut("M:if([z1,,]) {export *;*::*; }");
tryItOut("/*infloop*/while((return; |= <y><z/></y> .@x:: (null = window)))\n");
tryItOut("yield this.zzz.zzz();");
tryItOut("M:if(<><x><y/></x></>) yield; else  if (this) {var __count__, __parent__;return; } else return;");
tryItOut("if((((new Function(\"gc()\"))).call).call((<x><y/></x>)[<x><y/></x>], )) return; else /*for..in*/for([constructor, prop] = @foo in [[1]]) {gc() }");
tryItOut("with(false){__iterator__ = [z1]; }");
tryItOut("L: {{(new Function(\"__proto__;\")) }yield (({constructor: 0/0, __proto__: {} })); }");
tryItOut("/*for..in*/for(const (prototype) in (((( '' ).watch).apply)(<x><y/></x>)))export *;");
tryItOut("<x><y/></x>");
tryItOut("let (__parent__) { /*infloop*/for(var __proto__; \f1e4; (uneval((eval(\";\", <x/>))))) return; }");
tryItOut("(*::*)");
tryItOut("if(<y><z/></y>) {yield <><x><y/></x></>;throw __parent__; } else break M;");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map)) { if ((this.__defineGetter__(\"__proto__\"\t, (Math.pow).call))) return <y><z/></y>; else }");
tryItOut("/*for..in*/M:for(let __proto__ = <><{__parent__}><!--yy--></{__parent__}></> in null) switch(false) { default: throw <x/>;break;  }");
tryItOut("const __parent__ = <x><y/></x>; const __parent__;");
tryItOut("M:if(({ __iterator__: ({ __parent__: constructor }) }) = (({ prototype: __iterator__, __parent__: prototype }).__noSuchMethod__ = window)())  else {/a/giexport *; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x><y/></x>) {throw <x><y/></x>; }");
tryItOut("throw *::*;");
tryItOut("return new (<y><z/></y>)().__defineGetter__(\"__iterator__\", (new Function(\"L: {yield; }\")));");
tryItOut("prototype\n");
tryItOut("if(0x99) {function(q) { return q; }export *; } else  if (<><x><y/></x></>) {return;prototype; }");
tryItOut("if([1,2,3,4].slice((-0))) {const __parent__ = <x><y/></x>, __count__ = 1e4; } else  if (this.__iterator__) throw this\nexport *;\t");
tryItOut("do -0; while(((this)( /x/g )) && 0);");
tryItOut("const __parent__ =  /x/g ;yield;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) let(constructor = <y><z/></y>) { for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/M:for(var __proto__; 033; new <x><y/></x>) gc()");
tryItOut("let (__parent__, ({ constructor: __iterator__ })) { with({prototype: #1=({//h\n__count__:  /x/ })}){constructor, constructor = <x/>;{} } }");
tryItOut("throw __count__;");
tryItOut("var __noSuchMethod__ = [z1,,], prototype\n");
tryItOut("let(prop = window) ((function(){yield *;})());");
tryItOut("if(yyy[-1]) {const __count__;yield *; } else  if ((<><x><y/></x></>++)) return __parent__;");
tryItOut("/*infloop*/L:do /*for..in*/L:for(var __iterator__ in .2) {prop; } while((<{\f__proto__}><bbb xmlns:ccc=\"[,,]\"><ccc:eee></ccc:eee></bbb> </{__proto__}>.__defineGetter__(\"__proto__\", [1,2,3,4].slice)));");
tryItOut("yield\n\n");
tryItOut("({}).hasOwnProperty");
tryItOut("throw StopIteration;");
tryItOut("null\nvar prototype = <x><y\n/></x>, constructor\nyield;");
tryItOut("function(id) { return id } = __count__;");
tryItOut("__iterator__, __iterator__");
tryItOut("while((((p={}, (p.z = @foo)()).prototype = undefined\n) ? let (__iterator__ = (this for each (__iterator__ in *::*))) ((uneval(window === *))) : ([1,2,3,4].slice).call(*::* ? <x><\ry/></x> : true, )) && 0){/*infloop*/for(__noSuchMethod__; ({ get __parent__(__noSuchMethod__, constructor)false, prototype: (-1) }) ? __noSuchMethod__ = <><x><y/></x></> : [11,12,13,14].some; {yield <x/>; }) {{M:while((function ([y]) { }) && 0)return  '' ; }; } }");
tryItOut("export __proto__; const __iterator__\nlet(prototype, __noSuchMethod__) ((function(){let(prototype) { (<y><z/></y>);})());");
tryItOut("if(__parent__.__noSuchMethod__ setter= undefined) ( '' ); else  if ((eval(\"[[1]]\", this))) {export *;(null); }");
tryItOut("with({__iterator__: <xxx {__proto__}={ /x/ } />})return;");
tryItOut(" if (*)");
tryItOut("return '");
tryItOut("yield\n");
tryItOut("/*for..in*/for(const [prototype, prototype] = ++<y><z/></y>.__noSuchMethod__ || Error() in (new Function).call(.throw(<><x><y/></x></>), )) {let constructor = <x><y/></x>, prop;if(__noSuchMethod__) ; else \t if (<x/>) {var getter = @foo;let __parent__ = <x><y/></x>, __iterator__; } else {yield  /x/g ; }L: gc() }");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("/*infloop*/for(let __parent__ = constructor.yoyo(eval(\"false.throw((-0))\", __noSuchMethod__ = [z1,,])); ([<><x><y/></x></>[<x><y/></x>]]).propertyIsEnumerable(\"__noSuchMethod__\");  \"\" ) yield\n");
tryItOut("\fswitch(.2 & this) { case 8: if(function(id) { return id } >>> -0.@*) {<y><z/></y>\rnull; }break; default: const prop;let constructor, __iterator__ = true;break; case 0: return <x><y/></x>;\nconstructor;\ncase 3: break; case 6: gc()break; window;return; }");
tryItOut("if(({__parent__ getter: window })) { if (__count__.propertyIsEnumerable(\"prototype\")) yield false; else { }}");
tryItOut("L: {/*infloop*/for(let __parent__ = 1e4; <x/>; <x><y/></x>) let __noSuchMethod__ = <y><z/></y>, __proto__; }");
tryItOut("switch((-@foo.watch(\"__iterator__\", function  prototype (__parent__, __noSuchMethod__) { yield <x><y/></x> } ) === <x><y/></x> % <x><y/><\f/x>)) { default: /*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in *) {throw window;yield <><x><y/></x></>; }break;  \"\" \nthrow <x/>;case 0: (uneval(<x><y/></x>));\nif(({ __count__: __parent__, __proto__: __parent__ }) =  \"\"  & this) /*infloop*/L:while(<><x><y/></x></>){var __iterator__ = 0.1, __parent__ = @foo; } else  if (<x><y/></x> % undefined) const __parent__, __iterator__ = #1=[#1#]; else \nbreak; gc()( \"\" )\nexport *;break; case 3: break L\nbreak; case (window.eval(*::*)): this.zzz.zzz;let (__count__) { M:if( /x/ ) window; else  if (-0) {export *;yield <x><y/></x>; } }break; break; case 3: let (get = 5.0000000000000000000000) { let __proto__ = <x><y/></x>; }break;  }");
tryItOut("L:with(<><x><y/></x></>.@foo %= (<x><y/></x> * <><x><y/></x></>))'haha'.split");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = (function(id) { return id }.(__proto__ = <x/>)) && (x::constructor = @foo) != __iterator__\t === prototype in <>(*::*\n) </>) continue L;");
tryItOut("return;");
tryItOut("/*for..in*/for(\tconst [__iterator__, __count__] =  ''  in window) {export *;; }");
tryItOut("if(<><x><y/></x></>.__proto__ = true) {} else  if ( /x/g ) {export prop; }");
tryItOut("let(prop, __iterator__ = 5.0000000000000000000000) ((function(){yield;})());");
tryItOut("L: {return false; }");
tryItOut("with({__proto__: this\t.valueOf(\"number\")}){var prototype = *::*, constructor; }");
tryItOut("switch(<x><y/></x>.(*)) { default: M:while((__noSuchMethod__.eval(<><x><y/></x>/*\n*/</>)) && 0){(__proto__);export *; }if(__iterator__ = *\n) { if (new ((new Function(\"__proto__;\")))(undefined)) {export __iterator__;{yield;{} } }} else export *;break; case 7: throw <x><y/><\t/x>.yoyo(false);break; break; case null: yield __proto__;case 4:  }");
tryItOut("yield __parent__");
tryItOut("/*infloop*/while(null)yield\n");
tryItOut(";");
tryItOut("/*for..in*/L:for([prop, __noSuchMethod__] = [11,12,13,14].sort.hasOwnProperty(\"constructor\") in __parent__) {return;throw <>__count__</>; }");
tryItOut("with({__proto__: constructor})if((__iterator__.(((new Function(\" for each (__proto__ in <x><y/></x>)\")))(<><x><y/></x></>)) >>= (prototype++).yoyo(new ('haha'.split)(window, this)))) ");
tryItOut("L: {if((<x><y/></x>.(__parent__))) { if ([11,12,13,14].sort) const __noSuchMethod__ = @foo;} else {{}throw 4.; } }");
tryItOut("while(((<y><z/></y>)()) && 0)let __noSuchMethod__;");
tryItOut("/*infloop*/L:while((this.__defineSetter__(\"__noSuchMethod__\", Math.sin))){/*infloop*/L:do export *; while(new (<x><y/></x>)(1e81, <x/>));/a/gi }");
tryItOut("/*infloop*/for([15,16,17,18].some([1,2,3,4].slice, (__noSuchMethod__ = <x><y/></x>.eval((Math.sin).call(window, )))); (uneval(<x/>)).@foo;  /* Comment */<><zzz><x/></zzz></>) {if(*::*.watch(\"constructor\", ({}).__lookupGetter__)) continue L; else  if (__iterator__.throw(1e-81)) return; }");
tryItOut("/*for..in*/for(*::*(@foo, *::*).constructor in #1=[function ([y]) { } >>>=<x/> <= -0]) {var __parent__;export *; }");
tryItOut("with(this.zzz.zzz){if(new false(true, <y><z/></y>)) {this; } else yield; }");
tryItOut("while((1.3) && 0)prototype");
tryItOut("with({__count__: __iterator__.constructor+=('fafafa'.replace(/a/g,  /x/ ))})let __parent__ = @foo;");
tryItOut("this.zzz.zzz;");
tryItOut("with(!(\n<x><y/></x>)){{}yield; }");
tryItOut("/*infloop*/L:for(<y><z/></y>.__defineSetter__(\"__count__\", __count__); function::__iterator__ = <bbb xmlns:ccc=\r\"*::*\"><ccc:eee></ccc:eee></bbb>; true ? @foo : this) {yield <x/>; }");
tryItOut("function (prototype)false");
tryItOut("yield;");
tryItOut("{/*infloop*/L:for(0x99; __noSuchMethod__; 3) {[1,2,3,4].map } }");
tryItOut("L:if([,,]) { if ((-0)) {return; } else try {  } catch(constructor if (function(){;})()) { ; } }");
tryItOut("M:if((function(q) { return q; } ? __proto__ = prototype : (__parent__ = [[1]]))((yield this * *.eval( '' .prop)))) {return; }");
tryItOut("if(new <x/>) { if ((function ([y]) { })().valueOf(\"number\")) export *;\t} else {const __parent__ = <x><y/></x>, __noSuchMethod__ = this;var __noSuchMethod__ = window, __proto__ = (-0); }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x/>) return (function ([y]) { })(); while((1e-81) && 0);");
tryItOut("if(window) {throw  '' ; }\n");
tryItOut("/*infloop*/for(const prop; [11,12,13,14].some; yield @foo) throw undefined;");
tryItOut("if(#1=[#1#]) {/*for..in*/L:for(const __parent__ in -1) <><x><y/></x></>; }");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(const [__count__, prop] =  /x/g  in <y><z/></y>) {let __proto__, __count__ = *::*; }");
tryItOut("/*for..in*/for(const __count__ =  '' .eval(<x><y/></x>) in  \"\" ) {window;gc() }");
tryItOut("/*infloop*/for(prop; window; prototype) return;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("with({__count__: <x><y/></x>}){(prop); }");
tryItOut("/*for..in*/for(const constructor in (({__noSuchMethod__ setter: prop }))) {continue M; }");
tryItOut("/*infloop*/for(let prop; this.__count__ = <x><y/></x>; (__noSuchMethod__+=<><x><y/></x></>.__proto__)) {export *; }");
tryItOut("return");
tryItOut("export __proto__; const __iterator__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <><x><y/></x></> |= window(this.zzz.zzz, #3={a:#3#}) in new new Function()) {<x><y/></x> }");
tryItOut("M:with({__noSuchMethod__: ({ __proto__: constructor }) = -0})/*infloop*/do Math.pow while(<x/>)\nM:if(<x><y/></x>) { if (<><x><y/></x></>) {let prototype = false, __parent__; } else __count__;}");
tryItOut("M:if(*::*.__defineGetter__(\"__parent__\", ([1]).__defineSetter__) | ((p={}, (p.z = <x><y/></x>)())) for (__count__ in *::*)) {new Functionexport __iterator__; } else  if (\n(__noSuchMethod__ = @foo)) {{}<x><y/></x>; }");
tryItOut("/*infloop*/do {{yield @foo; } } while(#3={a:#3#});");
tryItOut("/*for..in*/for(const [__noSuchMethod__, ({ __noSuchMethod__: prototype, __proto__: __parent__ })] = (0/0)(1e4) in *.__defineSetter__(\"__proto__\", function(y) { yield y; var __count__ = <><x><y/></x></>;; yield y; })) {export constructor; }");
tryItOut("/*for..in*/for(let __noSuchMethod__.prop in __proto__ = false -= *::*) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const <><x><y/></x></>['__iterator__'] in 1e4) {(window); } }");
tryItOut("__proto__");
tryItOut("{}\nprop;\n");
tryItOut("/*infloop*/while(__count__)gc()");
tryItOut("/*infloop*/while((eval(\"\", (typeof [,,]))).throw(eval(\"#3={a:#3#};\", (-0)))){/*for..in*/for(let *::*['constructor'] in <>0x99</>) {*; }\tthrow __count__;export __noSuchMethod__; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (prop.(__parent__) < (eval(\"<><x><y/></x></>;'\",  /x/g ))); (uneval(this)).unwatch(\"__proto__\").propertyIsEnumerable(\"constructor\")) {L:if((<x><y/></x> .@ this).isPrototypeOf(prototype = 0x99)) {if(window) { if (*) __iterator__ =  \"\" , __parent__} else continue M; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let ({ delete: __noSuchMethod__ }) in ((<><ccc:ddd><zzz>[15,16,17,18].filter(Math.pow, setter) | *::* /= this</zzz></ccc:ddd></>)(prototype =  /x/ .propertyIsEnumerable(\"__count__\"))))/*infloop*/for(let __proto__; (this.valueOf(\"number\").valueOf(\"number\")); false.__lookupSetter__(\"prop\")) return;");
tryItOut("if((function  prototype ([], function::function::__count__) {  } ).call(new (<x><y/></x>)(\f<x/>, prop), )) gc() else  if (<zzz>new (gc)(this, <><x><y/></x></>)</zzz>.(__noSuchMethod__.__parent__ = false.prop =  /x/g ).valueOf(\"number\")) M:with({prototype: const __proto__, constructor}){export *;(constructor); } else ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each([] in false) {(window); }");
tryItOut("/*for..in*/L:for(const __parent__ in true) {/*for..in*/for([__parent__ = constructor, __noSuchMethod__] = [, __parent__, , , ] = constructor.(undefined) in (<><x><y/></x></>.__lookupSetter__(\"constructor\"))) {switch(null) { default: case {return undefined;var __proto__, __proto__; }.prop: return <x><y/></x>;break;  } } }");
tryItOut("/*for..in*/L:for([yield, __parent__] = function (__noSuchMethod__, __count__) { return <x><y/></x>++ }  in yyy) {export __iterator__\ngc() }");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = this.__defineGetter__(\"__iterator__\", (((1 for (x in []))).apply).apply) in prop = prototype ? null /= <><x><y/></x></> : <x/>) if(__parent__.__parent__ = <x/>) <x/>; else  if (<xxx {prop}={this.zzz.zzz} />.(* ? <><x><y/></x></> : __noSuchMethod__)) {gc() }({}).__lookupGetter__ else {return undefined;/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <y><z/></y>) let __parent__, prototype; }");
tryItOut("L:if(<bbb xmlns:ccc=\"new ( '' .__proto__)(((yield true.hasOwnProperty(\"constructor\"))), (<x><y/></x>.throw(<><x><y/></x></>)))\"><ccc:eee></ccc:eee></bbb>) break ; else  if ([(__proto__ = ( '' ))]) {/*for..in*/for(var [prototype, __proto__] = <><x><y/></x></>.__count__ in this) {{} } }");
tryItOut("with({prop: function ()continue L;})constructor;");
tryItOut("if(eval(\"(eval(\\\"<y><z/></y>\\\", *))\", (<x><y/></x>))) {export *;; }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in #3={a:#3#} ? <><x><y/></x></> : 1e+81) export *;");
tryItOut("/*for..in*/for(var constructor = ([eval(\"true\", <><x><y/></x></>)].some(constructor)) in __iterator__) yield <x><y/></x>;");
tryItOut("( /x/ );\n;\n");
tryItOut("return (yield  /x/g ) | <x/>.__defineGetter__(\"__proto__\", new Function);");
tryItOut("/*for..in*/for(var prop.__proto__ in <x/>[true]) {function::__parent__ = [1], constructor; }");
tryItOut("/*infloop*/for(({ prototype: [, , __count__] }) = (prototype = __count__ >> __parent__.(null).propertyIsEnumerable(\"__count__\")); [,,] >>=  /x/  .. new )(; *) {(__count__ = []);{{} } }");
tryItOut("L: let __noSuchMethod__, constructor;");
tryItOut("/*infloop*/do __parent__ = prototype; while(__parent__);");
tryItOut("/*infloop*/while(undefined){throw <><x><y/></x><\n/>; }");
tryItOut("/*infloop*/for([[1]]; null; 1.3) gc()");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/L:for(var constructor in ((function(q) { return q; })([])))const __iterator__ = <><x><y/></x></>;");
tryItOut("switch(let (__parent__ = eval(\"let prototype = window, __noSuchMethod__ = prop;\", this.zzz.zzz)) prototype = window ^= <x/>) { default: break; /*infloop*/for(var __parent__; (uneval( '' )); __count__.prototype = ( /* Comment */window)) throw <x><y/></x>;break; yield --3.141592653589793.constructor = <x><y/></x>;do {new Function{} } while((prototype) && 0);break; break; case 1: case -3/0.__parent__: return;case 3: continue M; }");
tryItOut("/*for..in*/L\n:for(let prototype = prop in <x><y/></x>)  else if ");
tryItOut("/*infloop*/for(([z1].__count__ = (true ? <><x><y/></x></> : <><x><y/></x></>)); 'fafafa'.replace(/a/g, __parent__); [15,16,17,18].filter([z1,,], __parent__)) {const __parent__, prototype; }");
tryItOut("L:if((<><x><y/></x></>.watch(\"__iterator__\", 'haha'.split)) <<= prop = <x><y/></x>//h\n) { if (prototype = [@foo for each (constructor in <x><y/></x>)]) {if(this) export __noSuchMethod__; else  if ((__parent__ * -3/0)) gc() else export prototype; } else {yield <x><y/></x>; }}");
tryItOut("M:if(1.3) return; else const prop = false, __noSuchMethod__ = 1e81\n");
tryItOut("/*infloop*/for(let ({ function::constructor: ({ __parent__: [], __proto__: ({ __iterator__: __noSuchMethod__ }) }), constructor: __proto__ }) = (new (<><x><y/></x></>)(prop)(this, ({a2:z2})).isPrototypeOf(window .. undefined in __noSuchMethod__.yoyo(*))); ([[, ], constructor, ({ ({ __proto__: ({ __parent__: __noSuchMethod__, __iterator__: __parent__ }), __proto__: __iterator__ }), ({ __count__: __count__, constructor: prototype }): ({ __parent__: __count__ }) }), prototype, ({ __proto__: [, __parent__, , __iterator__, prop], __noSuchMethod__: [] })] =  /x/ );  \"\" .__lookupSetter__(\"__count__\")) throw *::*;");
tryItOut("L:if(([,,])()) {{}; } else gc");
tryItOut("if(eval(\"__proto__ =  '' ;\", prototype)) if(*::*.__lookupSetter__(\"constructor\") != prop %= this) constructor = <><x><y/></x></> else  if (__noSuchMethod__ instanceof ({__iterator__: @foo})) {yield; } else const __proto__ = false; else  if ((Iterator(__iterator__, ({ set prototype(, prop) { return <><x><y/></x></> } ,  set prototype __proto__ (__count__)prototype })\t))) {L:if((this.zzz.zzz.__lookupGetter__(\"__parent__\")) instanceof (({ __count__: __noSuchMethod__, __noSuchMethod__: constructor }) = <x><y/></x> ? * : <><x><y/></x></>)) {export prop; } }");
tryItOut("/*infloop*/M:\ffor(033.watch(\"__proto__\", [1,2,3,4].map); (window.__lookupGetter__(\"prop\") - @foo); throw StopIteration;) L: yield;");
tryItOut("/*infloop*/for((try { throw #1=[#1#]; } catch(setter if (function(){;})()) { {} } catch(constructor) { {} } ) = ([11,12,13,14].filter); this.__lookupSetter__(\"prop\") in  /* Comment */__count__ = <x><y/></x>; (<x><y/></x>)(<x><y/></x>,  /x/g )) {/*infloop*/L:for(var __proto__; <xxx>{prop}</xxx>; yield ([11,12,13,14].sort)) {gc() } }");
tryItOut("M:switch() { default: /*infloop*/M:for((({__proto__ getter: /a/gi })); (__noSuchMethod__ = <x><y/></x>.prototype); ((yield void <><x><y/></x></>))) /*infloop*/for(var ({ prototype: __parent__ }) = (p={}, (p.z = <><x><y/></x></>)()); <x><y/></x>\n; 3.141592653589793 !=  /x/ ) {export __count__;var __count__, constructor; }break; /*infloop*/L:for(__iterator__ = 0; __iterator__; [,,z1]) __iterator__, prototype\n(<><x><y/></x>\n</>);({}).hasOwnPropertycase  /x/g  != (3 for (__noSuchMethod__ in true)): __parent__ = <x><y/></x>, __noSuchMethod__ = null;\n;\nbreak; /*infloop*/M:for(const __parent__; -@foo.hasOwnProperty(\"prop\"); [<x><y/></x> for each (prototype in <x/>)]) return  '' ;break;  }");
tryItOut("if( \"\" ) { if (@foo) {throw  /x/g ; }} else yield;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/M:for(let [__count__, prototype] = 'fafafa'.replace(/a/g, function (__iterator__, __count__) { yield  ''  } ) in <y><z/></y>) {export *;{} const \f__parent__; }");
tryItOut("/*for..in*/for(let ({ __iterator__: __iterator__ }) in #0=({constructor: yield (new (function  __proto__ (__count__) { return <><x><y/></x></> } )( /x/g ))})\t) /*for..in*/for(var [__parent__, __noSuchMethod__] = ({prototype: arguments }) in 033) {yield; }");
tryItOut("@fooif(__parent__.__proto__) {this.zzz.zzz; } else {throw  /x/ ;export *; }");
tryItOut("/*infloop*/do  while(window);");
tryItOut("return;");
tryItOut("throw @foo;");
tryItOut("/*infloop*/L:do {/*\n*/export *;__proto__ } while((this.zzz.zzz))");
tryItOut("/*infloop*/for(var __proto__ = (Iterator()) && \rfalse.propertyIsEnumerable(\"prototype\"); ('fafafa'.replace(/a/g, function  __noSuchMethod__ (__iterator__, __proto__) { <y><z/></y>; } )); ((__parent__ = false).watch(\"__proto__\", function (prop, __parent__) \"\" )) !== 0 || -3/0) {return __iterator__;(<x/>); }");
tryItOut("let __noSuchMethod__ = default: break; case *: , __count__;");
tryItOut("/*for..in*/L:for(var <><x><y/></x></>.__noSuchMethod__ in ((Math.sin)([1,2,3,4].map())))prototype = __count__;/*for..in*/for(let __noSuchMethod__ in <x/>) throw true;");
tryItOut("{(-0); }");
tryItOut("/*for..in*/L:for(const __parent__ = \n(5.0000000000000000000000 - yield <x><y/></x>;) in false.eval((function ([y]) { })()) &=  \"\" ) /*infloop*/L:for(prop = constructor = undefined; String(-0); <x/>) yield;");
tryItOut("{throw new <x><y/></x>(); }");
tryItOut("/*infloop*/L:while(<x><y/></x>.prototype)if(<y><z/></y>) {yield .2; } else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 1e+81) @foo;");
tryItOut("L: {throw  /x/ ;/*for..in*/L:for(const __count__ = ( /* Comment */set) in <y><z/></y>) {([[1]]);<y><z/></y>; } }");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in false) {var __iterator__ = <x/>, __count__; }");
tryItOut("/*for..in*/for(const prototype in ((this)((uneval(null)))))const __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/for(var prototype; <y><z/></y>; <y><z/></y>) return  '' ;");
tryItOut(" get prop(__proto__) { /*infloop*/L:do  while(__count__); } ");
tryItOut("if(constructor = (new Array([]))) { if (<>__proto__.__proto__ = <><x><y/></x></>.yoyo(this.yoyo( \"\" ))</>) {let __noSuchMethod__ = <x><y/></x>;if((*.yoyo(window)).__parent__) { if (constructor = (yield (\f4. ? *::* : <x><y/></x>))) {return;export *; } else yield;} } else throw 1.3;}");
tryItOut("/*for..in*/for(var __count__ in (prop = __parent__).propertyIsEnumerable(\"__count__\")) const __noSuchMethod__ = false, constructor = window;");
tryItOut("/*for..in*/for(__count__ = *::* = <y><z/></y> >>> (-1.__defineGetter__(\"<><x><y/></x></>\", (function(y) { yield y; var __parent__;; yield y; }).call)) in (((new Function(\"([]);\"))).apply)((*.eval(<><x><y/></x></>)), ({ set __proto__()(-1) }))) throw @foo;");
tryItOut("L: __parent__ = ({__count__: <x/> }), __iterator__ = ([[]].throw(<><x><y/></x></>))");
tryItOut("{{} } else [1];");
tryItOut("do {if((({__count__: .2}) >>> __noSuchMethod__ = window)) {return <y><z/></y>; } else  if (new <x><y/></x>()) {break ;prop; } else {export *;export function::__parent__; } } while((__noSuchMethod__.__proto__ = ({a2:z2})) && 0);");
tryItOut("M:if() { if (__proto__((<><x><y/></x></>)[<><x><y/></x></> :: __proto__]) = function::__count__.(constructor = <><x><y/></x></>)) {while((((let (__iterator__, __parent__ = [,,z1]) <x/>.constructor = constructor.(window)) for each (prototype in <x><y/></x>) for (constructor in function(id) { return id }))) && 0) } else {if(1e-81) {<><x><y/></x></>;function  __iterator__ (__iterator__) { return this }  } else  if (<><x><y/></x></>) {var __parent__ = null, __count__;null; } }}");
tryItOut("do {export *;for(let y in [5,6,7,8]) \t<y><z/></y>; } while((((uneval(<><x><y/></x></>))) / @foo) && 0);");
tryItOut("{export __count__;continue M; }");
tryItOut("{;let __count__, constructor = window; }");
tryItOut("if(this.__defineGetter__(\"__count__\", (__iterator__.__lookupGetter__(\"__noSuchMethod__\")))) while(([,,z1]) && 0){throw <y><z/></y>; } else let(__proto__) { return ([*::*].map(<y><z/></y>));");
tryItOut("/*infloop*/L:for(constructor; (__count__ = (-0)); (prop = <x/>)) {/*infloop*/for(__count__; 1.2e3; 1e4) {default: [1,2,3,4].slice } }");
