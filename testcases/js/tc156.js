tryItOut("if(\n__noSuchMethod__) {if((uneval(export __parent__))) return false;{yield;yield; } } else L: {/a/gi }");
tryItOut("if(#1=4.) /*for..in*/for(var __noSuchMethod__ in <x><y/></x>) const __proto__, __proto__ = @foo; else return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ( '' ().throw(__count__.prop setter= /a/gi))((__proto__ = <x><y/></x>)) in constructor.prototype = eval(\"with({__proto__:  /x/ }){yield <x><y/></x>;export __proto__; }\", *)) {if((__proto__.constructor = <xxx {prop}={new Function(#3={a:#3#}, 033)} />)) /*for..in*/for(var __noSuchMethod__ in <><x><y/></x></>) export *; else  if (try { return undefined; } catch(__proto__ if (function(){break ;})()) { {} } catch(constructor) { let __iterator__; } finally { var prop, __noSuchMethod__ = 4.; } .__lookupSetter__(\"__proto__\") || window.eval(1e+81).__defineGetter__(\"prop\", ( /* Comment */1.2e3))) {/*for..in*/L:for(const prototype.__proto__ in (([1,2,3,4].map\r)(1e-81))){let __iterator__;gc() } } else {export *;switch(*) { case 2: let __iterator__ = this, __proto__;default: break; export *;case <x/>: export prop;case 3/0: case <y><z/></y>: return window;break; case 9: break; case 3: break; case @foo: yield <><x><y/></x></>; } } }");
tryItOut("/*infloop*/while(new *( /x/g )){var prop, constructor; }");
tryItOut("if(eval(\"[__noSuchMethod__]\", yield [[]] !== 4.)) {{}function (__count__) { yield this }  } else  if ((constructor = eval(\"false\", 1.3))) {yield <x><y/></x>; }");
tryItOut("L: yield;");
tryItOut("{gc() }\t");
tryItOut("if(let (__count__, __proto__)  /x/ ) (Math.sin).call else __parent__ = window;");
tryItOut("switch(((<>/*\n*/<x><y/></x></> & undefined).__defineSetter__(\"__noSuchMethod__\", #0=this)[++#1#])) { default: break; case 0: yieldcase <><><!--yy--></></>: L:if(prototype = __iterator__ = __count__) \tthrow <x><y/></x>; else  if (({ __parent__: __count__, __count__: __noSuchMethod__ }) = ({ __noSuchMethod__: __parent__ })) {var __proto__ = this;yield; } else {const constructor = .2, constructor = @foo; }break;  }");
tryItOut("yield <><x><y/></x></>.prototype;");
tryItOut("with({__count__: new (p={}, (p.z = ({__parent__ getter: (new Function(\";\")),  set prototype() { yield prototype }  }))())}){/*infloop*/M:do const __parent__; while(false);M:switch((window.hasOwnProperty(\"__parent__\"))) { case 5: default:  } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(const constructor; yield null.throw(<x/>); [z1] ^  /x/g ) {throw 3/0; } const __proto__\nyield;");
tryItOut("with({__count__: __proto__ = \f*::*}){((__noSuchMethod__).watch).apply }");
tryItOut("if(*::*) {export *; } else  if (true) {return window;yield; } else yield @foo;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let __noSuchMethod__; (__count__) ^ @foo; this.__defineSetter__(\"constructor\", 'haha'.split)) {(__count__); }");
tryItOut("return;");
tryItOut("/*for..in*/for\f(__proto__ in (((*::*.__noSuchMethod__.throw(String())).watch)(new (eval)()))){return <x><y/></x>.( '' ) == __count__ = <><x><y/></x></>;const __noSuchMethod__ = function::prop, __count__; }");
tryItOut("L: {L:with({__proto__: 033})let __parent__ = [1,,], __count__ = true; }");
tryItOut("L:while((<x/>) && 0)(prototype);");
tryItOut("if(({__noSuchMethod__: false})) { if ((([1,,].propertyIsEnumerable(\"__noSuchMethod__\")).__defineSetter__(\"__iterator__\", /a/gi))) {/*for..in*/for(__iterator__ =  \"\" .constructor = window ? function ([y]) { }.yoyo(<x/> ) : #2=#3={a:#3#} in this) yield; }} else {*; }");
tryItOut("/*infloop*/for(var ({ __proto__: ({ prototype: ({ __parent__: constructor, prototype: ({ constructor: ({ each: let (__proto__, __proto__ = window) let (__parent__) 3/0: __parent__ }) }) }), __proto__: (prop) }), __iterator__: ({ __proto__: ({ ({ prototype: prop }): ({ x::prop: [] }), __proto__: ({ constructor: ({ setter: ({ __proto__: prototype, __count__: [, __iterator__, constructor, , ] }) }) }) }), prototype: ({ __count__: ({ x::constructor: prop, __proto__: prop }), __parent__: [] }) }) }) = \tnew Number(!@foo)++(const constructor, (__proto__)(function(id) { return id })); (true === <><x><y/></x></>.watch(\"__noSuchMethod__\", @foo)); \nprototype.watch(\"__count__\", function(y) { yield y; yield;; yield y; })) with({prototype: (<><x><y/></x></>.throw(<x><y/></x>))}){prototype =  /x/g ;export prototype; }");
tryItOut("L:do let (constructor, prop) { /*infloop*/while(5.0000000000000000000000)throw  /x/g ; } while(((([] = <x/>.__defineGetter__(\"__proto__\", (<x><y/></x>).__defineSetter__)) /= (Boolean())).__lookupGetter__(\"prop\")) && 0);");
tryItOut("if((<><x><y/></x></>++) if (<y><z/></y>)) { if (__proto__ = <><x><y/></x></>) {gc()(<x/>).watch } else var __noSuchMethod__;}");
tryItOut("/*infloop*/for(var prop.<bbb xmlns=\"'fafafa'.replace(/a/g, eval(\"window\", <x><y/></x>) .@ (__count__ = <x/>))\"><>(#0=({prototype: 'fafafa'.replace(/a/g, function  __noSuchMethod__ () { <><x><y/></x></>; } )}))</><ccc:ddd><zzz>[[]]</zzz> </ccc:ddd></bbb> = #1=[#1#]; ( /* Comment */__count__%=<x><y/></x>)++; __proto__ = #1=false .@x::  /x/g ) {gc()/*infloop*/for(const @foo;  '' ([z1]); ((p={}, (p.z = <x><y/></x>)()))) M:if(__proto__) { if (0.1) return  \"\" ;} else break ; }");
tryItOut("yield <y><z/></y>;var __iterator__, __iterator__;");
tryItOut("return;");
tryItOut("(+ (constructor); <><x><y/></x></>).__count__ = __parent__;");
tryItOut("yield ({});");
tryItOut("if(<y><z/></y>) { if (<x><y/></x>.(1.2e3) @ [,].__defineGetter__(\"prototype\", (function ()null).call)) {M:with\f({__noSuchMethod__: (__proto__.__proto__) >>  /x/ })yield function::prototype; } else {(<x><y/></x>);do {const __iterator__ = [[1]], prop = *::*; } while((*.yoyo(prototype)) && 0); }}");
tryItOut("/*infloop*/L:for(prop-=<y><z/></y>; __parent__.__noSuchMethod__ = this; (#1=[#1#] === <><x><y/></x></>)) {/a/gi }\n");
tryItOut("if((#2=[true[0x99]])) { if ( \"\" .@foo << (__count__.3)) {gc() } else {; }\t}");
tryItOut("{@foo; }");
tryItOut("M:while((this['__proto__'] = eval(\"{}\", [15,16,17,18].map('haha'.split, __parent__))) && 0){M:if(( \"\"  ? constructor : false))  else  if ((new (*)(<y><z/></y>, <x><y/></x>))) {yield;(<x/>); } else {}(<x/>); }");
tryItOut("/*infloop*/do {break ; } while(false.*.prop);");
tryItOut("/*for..in*/for(__count__ = <><x><y/></x></> in ((({}).hasOwnProperty)(throw <x><y/></x>.valueOf(\"number\"))))var __noSuchMethod__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <x><y/></x> in  /x/ ) {continue L;const __iterator__ = 0/0, __count__; }");
tryItOut("yield  /x/ ;");
tryItOut("return this.__defineSetter__(\"__count__\", function(q) { return q; });");
tryItOut("L:with(window != function(id) { return id }++)\tif(function  __proto__ (__count__) { yield  \"\"  } (getter, window)) gc()");
tryItOut("(*::*)\n");
tryItOut("/*infloop*/M:do { } while(undefined)\nreturn <y><z/></y>;");
tryItOut("M:if({let prop = 3/0; /x/ , prop = window; }) { if (__noSuchMethod__) function (__iterator__, __proto__) { return <x/> } } else {(-0); }");
tryItOut("yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in prop) {\nvar __noSuchMethod__ = 1e+81; }");
tryItOut("/*for..in*/for(const (this)(([*::* for (__noSuchMethod__, __noSuchMethod__ in <x><y/></x>)]).valueOf(\"number\")) in [<><x><y/></x></> if (this)]) with({}) { ; } ");
tryItOut("if( /x/g ) {(false); } else continue ;");
tryItOut("/*for..in*/for(const (null)(<><x><y/></x></>).__iterator__ in new ~<><x><y/></x></> && 'fafafa'.replace(/a/g, window)(<!--yy-->)) switch(__count__) { case 7: __noSuchMethod__break; break;  }");
tryItOut("throw __parent__;");
tryItOut("try { let(constructor, ({ prop: __proto__, prop: constructor }) = <x><y/></x>) ((function(){return ( /x/ .@*);})()); } finally { with({}) constructor = __proto__; } ");
tryItOut("/*infloop*/while(+(~__iterator__)){/*for..in*/for(const [__parent__, __iterator__] = <>\t<x><y/></x></> in 3) {0.1;return __iterator__; }/*for..in*/try { var __count__, __iterator__; } catch(x::__count__) { return __iterator__; } for(let __proto__.({ __parent__: prop, __proto__: constructor }) in (([1,2,3,4].map)(__iterator__.<x/> = .2.isPrototypeOf(<><x><y/></x></>))))<>(--<x/>)</> }");
tryItOut("if(undefined) {export *; } else  if (__noSuchMethod__) {export __noSuchMethod__;let prop = 1e-81; }");
tryItOut("throw true;");
tryItOut(";");
tryItOut("with({}) { return; } ");
tryItOut("throw undefined\n const __proto__;");
tryItOut("L:with((uneval(let (prototype)  /x/ )) instanceof (yield false)){with({__iterator__: ({__parent__: __noSuchMethod__,  set __iterator__(__iterator__)<><x><y/></x></> })}){function(q) { return q; } }/*infloop*/M:for(const constructor; arguments += *::*; __parent__ =  /x/  ?  /x/  : ({}).@*) {yield;export *; } }");
tryItOut("with([1,,])gc");
tryItOut("<bbb xmlns:ccc=\"yield false << (this + @foo)\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*for..in*/for(var __noSuchMethod__ in \t*::*) {-0 }");
tryItOut("default: break; false;break; ");
tryItOut("if(__parent__.constructor) __count__ else  if ((~<y><z/></y>)) {__proto__; }");
tryItOut("/*for..in*/for(const __iterator__ = [, , , , ] = ( /* Comment */<><x><y/></x></>).yoyo(0x99.__parent__) in new (null)()) if(@foo | (*::* >> (-0))) { if ((constructor = constructor)) {export *;prop = <x><y/></x>, prop; }} else {this;; }");
tryItOut("if( '' ) { if (__count__ = false.isPrototypeOf(__parent__ = 0/0).__lookupGetter__(\"constructor\").eval(Function(@foo))) throw __count__;\f else {/*infloop*/for(var  = (({constructor:  \"\" , __noSuchMethod__: __proto__ })); window .. @foo; eval(\"const __iterator__ = [,], prop;\",  '' )) yield;/*infloop*/while(@foo)var constructor = prototype, __iterator__; }}");
tryItOut("/*infloop*/while(--0)function(y) { yield y; __noSuchMethod__, __proto__ = <><x><y/><//*\n*/x></>;; yield y; }");
tryItOut("; const __proto__;");
tryItOut("/*for..in*/L:for(let prop in ((function (__iterator__) { {/*infloop*/do Function while(<><x><y/></x></>); } } )((--__count__.prop))))gc()");
tryItOut("with({}) .2;");
tryItOut("with({constructor: \tthis || <x><y/></x>}){function (function::__proto__)[1,,]throw <><x><y/></x></>; }\nyield <y><z/></y>;");
tryItOut("L: {(((__count__ = <><x><y/></x></>.hasOwnProperty(\"prototype\")))()), ( /x/g .prototype = @foo) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in false ? <y><z/></y> : <><x><y/></x></>) {/*for..in*//* nogeckoex bug 349964 */ for  each((__count__) in @foo) const function::__count__; }");
tryItOut("L:switch(__proto__ = <x><y/></x>) { default:  }");
tryItOut("(null)\n");
tryItOut("/*for..in*/L:for(var __parent__ in (([,,z1])(constructor.__iterator__)))return;");
tryItOut(";");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in ) {undefined\nthrow \f<x><y/></x>; }");
tryItOut("continue M;");
tryItOut("");
tryItOut("switch(<>yyy</>.__defineGetter__(\"__count__\", gc)) { case 3: /*for..in*/L:for(const [prop, __iterator__] = ([new Function if (this)].__noSuchMethod__ = (window && 3/0)) in [ '' ]) {/*for..in*/for(let __proto__ = export * in  /x/ ) { } }break; L: {/*infloop*/M:for(var [, , ] = (<><x><y/></x></>.valueOf(\"number\")); Function(this);  /x/ ) {(this);L: break M; } } }");
tryItOut("{throw (-0);const __noSuchMethod__, prop = (-1); }");
tryItOut("L:if(true.valueOf(\"number\")) {(1e4); } else  if ((prop =  \"\" )) {__parent__ = <><x><y/></x></>\f, prototype; }");
tryItOut("L: {gc() }\n");
tryItOut("export *");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in window) {gc(){} }");
tryItOut("undefined.constructor = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><x><y/></x></>) {constructor;export __parent__; }");
tryItOut("L:switch(void (*[<x/>])) { case 0:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <>this</>.prototype in prop = ([15,16,17,18].sort(function (__proto__) /x/ , [11,12,13,14].map/*\n*/))) const function::__count__ = <x><y/></x>, prototype =  /x/g ;");
tryItOut("with((<x><y/></x>.__noSuchMethod__).unwatch(\"__noSuchMethod__\")){var __count__, __proto__;continue M; }\nif((__noSuchMethod__ = (-1))) continue L; else  if ((<x/>.__defineSetter__(\"__iterator__\", this)))  else export *;");
tryItOut("with(__parent__.prototype){export *;export *; }");
tryItOut("{if(<x><y/></x>) {yield <x/>; } else {export prototype; } }");
tryItOut("switch(function ([y]) { }) { case new (let (prototype, constructor) <><x><y/></x></>.@foo)(<x><y/></x>.__defineGetter__(\"__parent__\", Function)): case (eval(\"{}\",  /x/ ) / eval(\"[]\", <x><y/></x> instanceof #1#)):  }");
tryItOut("/*for..in*/for(let __proto__ = function ([y]) { } in 1e-81) {; }");
tryItOut("var __proto__; const __count__;");
tryItOut("const true = @foo, __count__");
tryItOut("/*for..in*/for(var constructor = (undefined([,,] >> 5.0000000000000000000000)) in new [1,2,3,4].map((new Array(__parent__)), (-3/0 for each (prop in __proto__)))) {/*for..in*/for(var __iterator__ = (constructor.constructor) in <x/>) { } }");
tryItOut("L:if(()) {export __parent__;/*for..in*/for(var __noSuchMethod__ = <x><y/></x> in <><x><y/></x></>) {return []; } } const __noSuchMethod__;");
tryItOut("return (constructor)(<y><z/></y>);");
tryItOut("try { yield 'fafafa'.replace(/a/g, function(q) { return q; }); } catch(prop) { var __parent__; } finally { throw StopIteration; } ");
tryItOut("/*infloop*/M:for(var [] = #1#.throw(<><x><y/></x></>); ([,].__lookupSetter__(\"__iterator__\")); eval(\"export __parent__;\", (__iterator__+=<><x><y/></x></>))) {prototype;function  __count__ () { yield <x><y/></x> }  }");
tryItOut("/*infloop*/while(true .@ this.__defineGetter__(\"__proto__\", Math.sin))continue M;");
tryItOut("M:with((<y><z/></y>.__lookupSetter__(\"__parent__\"))){__iterator__;if(.2) {throw window; } else  if (false) {(5.0000000000000000000000);yield; } else yield null; }");
tryItOut("__count__");
tryItOut("M:with((yield  /x/ ))yield [z1]; const constructor;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(const __proto__ in (p={}, (p.z = ((this)\f.watch).call(__count__.prop = null, __iterator__, __parent__))())) /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in (true)(<><x><y/></x></>, (-1))) {/*infloop*/M:do {break ; } while(__noSuchMethod__ = <x/>);/*for..in*/for(let prototype in ((({}).__lookupGetter__)((<x><y/></x>))))gc() }");
tryItOut("/*infloop*/while(((([1,2,3,4].map).call(eval(\"[<><x><y/></x></> if ( \\\"\\\" )]\", __proto__), (@foo > this .@*:: [11,12,13,14].map))).__noSuchMethod__ = eval(\"(this.__defineGetter__(\\\"__noSuchMethod__\\\", Math.pow))\", (new Exception( for (__count__ in <><x><y/></x></>) if (1e+81)))))){with({<x/>: (__proto__.prop setter= [1,2,3,4].map)}){export __parent__;return; }let __parent__ = window, constructor = <x><y/></x>; }");
tryItOut("/*infloop*/while(new (*.__lookupSetter__(\"__count__\")).__defineSetter__(null, __parent__ = x::prop).hasOwnProperty(\"constructor\")){let(({ constructor: __parent__ }), constructor = (-1)) ((function(){with({}) const prototype, __noSuchMethod__;})());__count__ }");
tryItOut(";");
tryItOut("with({prop: (__proto__) = 0})(new Function(\"return;\"))");
tryItOut("/*infloop*/M:for(const constructor;  \"\" ; <><x><y/></x></>) {yield;continue ; }");
tryItOut("/*infloop*/do (window);/*\n*/ while(*::* && <y><z/></y>);");
tryItOut("this.zzz.zzz;");
tryItOut("if(<y><z/></y>) {export *; } else const constructor = <x><y/></x>, constructor;");
tryItOut("let([prop], prop = <><x><y/></x></>) ((function(){__noSuchMethod__ = __count__;})());");
tryItOut("if((yield.__lookupSetter__(\"function::__proto__\"))) with({__iterator__: [z1]})const __parent__; else {yield <x/>.throw(prototype);/*infloop*/while(true){let prototype; }\n/*infloop*/for(let \n__count__; undefined; window |= <x><y/></x>) {(/*\n*/<><x><y/></x></>); }\n }");
tryItOut("/*infloop*/5.0000000000000000000000.__lookupGetter__(\"constructor\")");
tryItOut("with({prop: this.zzz.zzz}){continue L; }\nM:with(((<x/>)[false].throw(<x><y/></x>.(__parent__)).valueOf(\"number\"))){/*for..in*/for(const prototype in __noSuchMethod__) break ; }\n");
tryItOut("with({__noSuchMethod__: (new ('haha'.split)(window).valueOf(\"number\"))}){/*for..in*/for(let __iterator__ = prop in  /x/g )  }if(1e81) { if (<y><z/></y>) {break M; } else {; }}");
tryItOut("with({}) __parent__.__proto__ = __noSuchMethod__;");
tryItOut("if(false) {\fyield window\nyield <><x><y/></x></>; } else  if ((<x/>.__lookupGetter__(\"function::prop\") ? prototype.__proto__ = constructor.isPrototypeOf((*::*)[__count__]) : (eval(\"yield;\", this.zzz.zzz;)))) {return;/*infloop*/M:for(undefined; eval(\"<x><y/></x>\",  '' ); __parent__ = this ===  '' ) constructor; } else {/*for..in*/for(let __parent__ = <xxx {__proto__}={[,]} /> in __iterator__) {export *; }if((p={}, (p.z =  '' )())) {} }");
tryItOut("L:switch((this.__defineSetter__(\"prototype\", *::*))) { default: if((window)[@foo]) ; else {return function ([y]) { };throw <><x><y/></x></>; }case 4: case 5: /*infloop*/while(<x><y/></x>){export *; }break; (<><x><y/></x></>);break; let prop, prop;break;  }");
tryItOut("/*infloop*/for(const __parent__ = window; prototype = (prop == undefined); yield window) {with({({prop: <><x><y/></x></>})\t: @foo[*]}){yield undefined; } }");
tryItOut("/*for..in*/for(var (window.__proto__)(__parent__.(*)) in (([1,2,3,4].map)([]))){; }");
tryItOut("if(__iterator__ = this) { if (<x><y/\f></x>.@foo) {prop =  /x/ ; } else ;}");
tryItOut("with(set\t.__count__){let (constructor, prototype = window) { return; }(prototype = prototype); }");
tryItOut("/*infloop*/for(var __proto__; ( /* Comment */(function ([y]) { })()--); null) /*for..in*/M:for(const ({ prop: __noSuchMethod__, __noSuchMethod__: prototype }) in @foo) continue ;");
tryItOut("L: {yield  \"\" ; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var yield = ; new Math.sin(<x><y/></x>, <><x><y/></x></>); __noSuchMethod__ = [,,z1]--) let __iterator__ = 0.1;");
tryItOut("/*infloop*/M:while((( '' )(null)))3/0;");
tryItOut("/*infloop*/L:while(({__noSuchMethod__: prop.__count__ setter= (1 for (x in [])),  set constructor() { yield (constructor)(<><x><y/></x></>) }  }))L: /*for..in*/L:for(let constructor in this) return;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = (this(<x><y/></x> ? __iterator__ : *::*)) in  /x/g ) return;/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in /*for..in*/\tfor(let prop = (uneval(<><x><y/></x></>)) in <><x><y/></x></>) {yield;*::*; }) {prototype }");
tryItOut("while((\f) && 0){export *;gc }");
tryItOut("/*infloop*/L:do {break ;export *; } while(new <x/>);");
tryItOut("while(((constructor: @foo)) && 0)\nM:switch(<xxx>{__parent__}</xxx>) { case (<x><y/></x>)[@foo] >> <x><y/></x>.yoyo(<y><z/></y>): break; case 1: {export __iterator__; /x/g ; }break;  }");
tryItOut("with({__count__:  @ <x><y/></x>})/*infloop*/for(var __count__ = window; <y><z/></y>.throw(4.); <><x><y/></x></>.__defineSetter__(\"prop\", 033)) {continue ; }");
tryItOut("/*infloop*/M:while(3.141592653589793){undefined; }\nexport __count__;");
tryItOut("if((let (prototype, __proto__ = __proto__) <x><y/></x>)) {yield; } else  if ( '' ) {__count__ = this; } else {yield;export *; }");
tryItOut("/*for..in*/for(const prop = (function (__iterator__, prop) { yield #1=[#1#] } ).call(*, ) in -1) {@foo;return;\f }");
tryItOut("M:with(<xxx {prop}={[z1,,]} />){yield; }");
tryItOut("let __parent__ = window;continue ;");
tryItOut("with({prop: 0})(1 for (x in []))");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) try { with({}) return; } catch(prop if (function(){for(let y in []);})()) { this.zzz.zzz; } catch(prop) { for(let y in []); } finally { for(let y in []); } ");
tryItOut("with({}) yield __iterator__ = __proto__;");
tryItOut("if(<><bbb xmlns=\"(new (<><x><y/></x></>)())\"><ccc:ddd>yyy</ccc:ddd></bbb></>) /*infloop*/do yield <><x><y/></x></>; while(*)");
tryItOut("let prop, __proto__;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((gc).apply)(<y><z/></y>.unwatch(\"__parent__\"))))/*infloop*/do {/a/gi*::*; } while(window);");
tryItOut("/*for..in*/for(let  = yyy *= (-0) *= ( /x/g .@foo) in eval(\"0/0;\",  '' )) {/*infloop*/for(let ({ __noSuchMethod__: __parent__['__count__'], prototype(constructor): [[, prop, __noSuchMethod__, prop, ], , ] }) = (true.throw( '' )); window; new (prototype)()) {export *;/*infloop*/do {(<><x><y/></x></>); = undefined; } while(<x/>); }/*for..in*/for(let __parent__ in ((gc)(prototype.watch(\"__noSuchMethod__\", __proto__))))break M; }");
tryItOut("/*for..in*/for([__iterator__, prop] =  ''  in ({__iterator__: __iterator__ = <x/>, __noSuchMethod__: <><x><y/></x></> })) {gc(){export prop;continue ; } }");
tryItOut("throw <x><y/></x>\n(function(id) { return id });");
tryItOut("if(eval(\"gc()\", <><x><y/></x></>)) {yield this; } else {continue ;export __iterator__; }");
tryItOut("/*for..in*/for(let [prop, __parent__] = ((function ([y]) { })().eval(*)) in this.__defineGetter__(\"constructor\", (1 for (x in [])))) yield;");
tryItOut("yield <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>;");
tryItOut("export *;");
tryItOut("/*infloop*/L:while(((<><x><y/></x></>).__defineSetter__)());");
tryItOut("(<x><y/></x>);");
tryItOut("L: /*for..in*/for(const (window)(__count__\f) in ((( /x/ ).__defineSetter__)( /x/g (<><x><y/></x></>, @foo))))export *;");
tryItOut("/*infloop*/while(__proto__ = constructor)export *;");
tryItOut("do {export *;[z1,,]; } while((let (prototype = <x><y/></x>) <><x><y/></x></>) && 0)\n\nif((-0 instanceof  '' )) {(@foo); } else  if ((uneval([[]]))) yield;");
tryItOut("/*infloop*/L:for(var prop = undefined; <x><y/></x>; //h\n<><x><y/></x></>) {; }");
tryItOut("/*for..in*/for(let __iterator__ in <><x><y/></x><!--yy--></>) export *;");
tryItOut("if((@foo)) { if (delete *::*[1e81]) {yield <y><z/></y>;export prototype; } else }");
tryItOut("if( /* Comment */(__noSuchMethod__ = <x><y/></x>)) { if ([11,12,13,14].filter) export *;} else continue M;");
tryItOut("{0/0; }");
tryItOut("yield null;\n((1 for (x in []))).call\n");
tryItOut("L: {var prop = <><x><y/></x></>, __count__\nyield;\nlet __iterator__ = @foo;\n }");
tryItOut("prop =  /x/ ");
tryItOut("if(<x><y/></x>.yoyo(window)) { if (@foo) (__noSuchMethod__ = __noSuchMethod__)} else {export function::prop;return; }");
tryItOut("/*for..in*/for(let \r[prop, constructor] = (eval(\"prototype\", prop)).__defineSetter__(\"__parent__\", this.*) in new this()) {this; }");
tryItOut("{return undefined;gc() }");
tryItOut("{<x><y/></x> }");
tryItOut("/*infloop*/while(this){return;let prop, __count__ = [1,,]; }");
tryItOut("if('fafafa'.replace(/a/g, function(y) { yield y; return <y><z/></y>;; yield y; }) >=  /* Comment */0/0) ((-1));");
tryItOut("if((new ({}).__lookupGetter__(033))) { if (__noSuchMethod__) yield;} else {throw ({a2:z2}); }\t\nfunction  __iterator__ () { yield [] } ");
tryItOut("this.zzz.zzz;");
tryItOut("with({__iterator__: ('fafafa'.replace(/a/g, <><x><y/></x></>))}){({}).hasOwnProperty/*infloop*/L:for(const (0x99)(false) = new RegExp(__parent__, <x><y/></x>).unwatch(\"__iterator__\"); [0.1]; -3/0 & window) gc() }");
tryItOut("/*for..in*/M:for(__iterator__ in <><x><y/></x></>) ");
tryItOut("{(<><x><y/></x></>); }");
tryItOut("while(((prototype = function(id) { return id })) && 0){export *; }");
tryItOut("try { try { return; } finally { __proto__; }  } finally { break ; } ");
tryItOut("let(__noSuchMethod__, __count__) ((function(){throw StopIteration;})());");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(this.__defineSetter__(\"prop\", ( \"\" ).__defineSetter__)){var constructor = prop;return <x/>; }");
tryItOut("if((prop >>> <x><y/></x>)[({ __iterator__: ({ [, , prop]: [__count__, __proto__, , __noSuchMethod__], __noSuchMethod__: ({ __iterator__: function::__noSuchMethod__, __parent__: __count__ }) }) }) = false]) break M; else { }");
tryItOut("let (__count__ = prototype |=  \"\" .hasOwnProperty(\"__parent__\")) { with({__proto__: (-1) << __noSuchMethod__, constructor}){return; } }");
tryItOut("if([,,z1]) yield;");
tryItOut("with( /x/ ){}");
tryItOut("constructor = __parent__;");
tryItOut("L:while((let (__count__ = *::*, prop = (<><x><y/></x></> && 3/0))  /x/g  - [,,z1]) && 0)with([1]){export *;gc() }");
tryItOut("try { __iterator__ = __count__; } catch(__count__) { try { yield <x/>; } catch(__count__ if  { return <x><y/></x> } ) {  } catch( /x/ ) {  } finally { throw window; }  } finally { export *; } ");
tryItOut("gc()");
tryItOut("/*infloop*/for(var ({ __iterator__: __iterator__((eval(\"<><x><y/></x></>\", <x><y/></x>))) }) = (void 0x99); (new (new false().valueOf(\"number\"))([1,,].__defineGetter__(\"let\", 'haha'.split), (p={}, (p.z = <x><y/></x>)()) >= __count__ =  '' )); __noSuchMethod__ = __count__ = *) {let function::__iterator__ = @foo;{} }");
tryItOut("if([({ __parent__: [], __iterator__: ({ prop: __proto__, __iterator__: __iterator__ }) })] = [15,16,17,18].sort( /x/g , prop = this) *= (window( '' ))) {{{} } }");
tryItOut("/*infloop*/for(<x><y/></x>; false; 033) {(-0)( /x/g ); }");
tryItOut("return constructor.__noSuchMethod__ getter= eval(\"__noSuchMethod__\",  \"\" );");
