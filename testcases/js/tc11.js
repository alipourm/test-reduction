tryItOut("/*for..in*/for(const [__iterator__, __count__] = <x><y/></x> in 1.2e3) return false");
tryItOut("/*infloop*/M:for(function::prototype = [true]; [undefined]; [0.1 for each (__parent__ in <x><y/></x>)]) constructor");
tryItOut("(new Function(\"\"))\nprototype = __iterator__;\n");
tryItOut("__proto__;");
tryItOut("yield __parent__;");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do throw <><x><y/></x></>; while(*::*);");
tryItOut("{__iterator__ }\n");
tryItOut("if((yield __count__)) { if ((constructor = *) << <x/> ? <x/> : prop.hasOwnProperty(\"constructor\")) if('fafafa'.replace(///h\na/g, (({}).__lookupGetter__).call)) \f<x><y/></x> else  else /*for..in*/L:for(const prop in ((({}).__lookupGetter__)( \"\" ))){const __count__; }}");
tryItOut("with({__count__: (0/0.__parent__)}){if(this.__defineGetter__(\"__noSuchMethod__\", new Function)) { if (++ if ( /x/g ).yoyo(#3={a:#3#})) gc()} else ((-0));/*for..in*/for(var __iterator__ in ((prop)(<x/>.isPrototypeOf(this)))){<x/>;*; } }");
tryItOut("if(<bbb xmlns:ccc=\"(new (-0)(({})))\"><ccc:eee></ccc:eee></bbb>) { if (__count__.(this)) {throw [[]];export __parent__; } else {yield <><x><y/></x></>;yield; }}");
tryItOut("/*infloop*/for(const __count__; (__parent__|=each); <y/></x>) {throw  /x/ ;yield <x/>; }");
tryItOut("gc()\n\texport __proto__;\n");
tryItOut("<x><y/></x>\nvar __count__ = __parent__;");
tryItOut("switch(-3/0.constructor) { case [15,16,17,18].some(function(q) { return q; }, -3/0.prop--): throw prop;break;  }");
tryItOut("/*infloop*/for(const constructor; __proto__; this) export __parent__;");
tryItOut("yield __iterator__;\nthrow __parent__;\n");
tryItOut("yield *::*;");
tryItOut("/*for..in*/for(__noSuchMethod__ in 033) /*for..in*/for(const __proto__ in ((({}).__lookupGetter__)(<><x><y/></x></>))){let __iterator__ = <x><y/></x>; }");
tryItOut("M:if(<><xxx>{__iterator__}</xxx></>) {/*infloop*/while(let (prop, __noSuchMethod__) <y><z/></y>){if([[1]]) {yield;let __parent__ = <y><z/></y>; } else  if (@foo) export __iterator__; else yield  /x/g ;export *; }const prop = (<x/> for (prototype in false)); } else  if (__parent__ =  instanceof true.__parent__) if(1e4) (/{ if () propthrow <x><y/></x>;let prop = *;{{}(__noSuchMethod__); } } else {/*for..in*/for(__proto__.__iterator__ in 3) {var each; }L: return\n }");
tryItOut("L: /*for..in*/for(const __parent__ = false in <x/>) {return;return; }");
tryItOut("if(<y><z/></y>) {L: {(1.3);throw <><x><y/></x></>; } } else  if (@foo *= ( /* Comment */<><x><y/></x></>)) export *;");
tryItOut("while(((__proto__ = (*::*).call(*, null, window)) ? <y><z/></y> .@*:: window : (constructor.constructor getter= (1 for (x in []))).__lookupGetter__(\"prototype\")--) && 0){{}\nvar constructor;\nexport *; }");
tryItOut("switch() { case __parent__ = __noSuchMethod__ && yield null >>>=this: /*infloop*/for(const __parent__+=prototype if (function(id) { return id }); (@foo >= undefined); [15,16,17,18].filter(new Function, this for (constructor in undefined))) /*infloop*/while(true){{} } /x/ ;/*infloop*/for(let prototype; (p={}, (p.z = <><x><y/></x></>)()) ? <x><y/></x> : (function(y) { yield y; prototype, prop;; yield y; }()); 033) {/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in window) gc()if([,,]) {(#1=[#1#]); } }break;  }");
tryItOut("try { continue L; } catch(prototype) { yield; } finally { function (constructor)window } ");
tryItOut("gc() const __iterator__; const prototype;");
tryItOut("export *;\nyield [];\n");
tryItOut("throw StopIteration;");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/x::__iterator__for(let __iterator__ = *::* in []) yield;");
tryItOut("/*infloop*/do throw __iterator__; while(!<>yyy</>);");
tryItOut("if((Error( = *::*))) {if(<x/>) { if (prop) {<y><z/></y>; } else yield (-1);} } else  if (eval(\"break L;\", __parent__ = __count__)) ");
tryItOut("M:while((this) && 0){continue M; }");
tryItOut("if(({})) { if (((uneval(\n(function ([y]) { })())))) return; else {continue ; }}");
tryItOut("M:if(((p={}, (p.z = ((5.0000000000000000000000)()))())) instanceof ((-1))[window]) {if([,,z1]) <y><z/></y>; else throw  /x/g ;null; } else  if (({}()\n).hasOwnProperty(\"__count__\")) {for(let y in [5,6,7,8]) __iterator__ = constructor;/*infloop*/for(let prop; <x/>; prototype) gc() } else {continue ;export *; }");
tryItOut("{yield <x/>; }");
tryItOut("/*infloop*/M:for(var __iterator__ = ({prototype: ((constructor)(window, *))}); [__parent__ - function ([y]) { } >>> (this.zzz.zzz)]; yield function ([y]) { }.__proto__) /*infloop*/L:for(let __count__ = prototype;  \"\" ; *::*) <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var __parent__.__count__ in 4.) continue L;");
tryItOut("if((typeof new (function(y) { yield y; yield [z1,,];; yield y; })())) {  } const __noSuchMethod__;");
tryItOut(";");
tryItOut("if((([11,12,13,14].map for each (constructor in window) for ( '' ['__parent__'] in 1e81) if ( /x/g )))) { if ('fafafa'.replace(/a/g, (((<y><z/></y> for (constructor in undefined)))).watch)) {return;{} }} else gc()");
tryItOut("/*infloop*/M:for(const prop = __iterator__; <x><y/></x>; [1]) {return __count__;gc }/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in #1=[#1#]) ( '' ); const prop;");
tryItOut("/*for..in*/for(prop = yield ({ __parent__: prototype }) = ({ prop: prototype }) in  |= prop+=false) return;");
tryItOut(";");
tryItOut("M:if(undefined >>> __iterator__.__count__ = (constructor for each (__parent__\f in <x/>))) { if (<>__noSuchMethod__.__parent__ =  \"\" </>) var __iterator__ = #1#, constructor = this\nreturn; else let (__proto__)\n { <x><y/></x>; }}");
tryItOut("return; const __parent__;");
tryItOut("/*for..in*/L:for(var set in (((new Function(\"let (__parent__ = (([1].__defineSetter__(\\\"__parent__\\\", [1,2,3,4].map)).eval([15,16,17,18].map(Function, *::*))), [({ prop: prototype, prop: __count__ }), ]) { {(window); } }\")))(((function ([y]) { })()['__proto__'] = <><x><y/></x></> | constructor)(<><x><y/></x></>[__count__]) = (__count__ = constructor = <x><y/></x>((<><x><y/></x></>\t)[-1]))))){'haha'.split\nfunction  __proto__ (__proto__, prop) { {} } \n }");
tryItOut("L:if((Number([0.1].some(/a/gi)).__lookupGetter__(\"prop\"))) if(0 &=  /x/ ) return prototype; else {return 3/0; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, <x><y/></x>] = window in  /x/ ) {export *; }");
tryItOut("/*for..in*/\ffor(constructor = (uneval((*::* == ({a2:z2})))) - ((yield <x><y/></x>)) in ( /* Comment */(delete  /x/ ))) if(*) {continue ; } else  if (<><x><y/></x></>) {return; } else {}");
tryItOut("/*for..in*/M:for(let __parent__ = <x><y/></x> in  \"\" ) {(<x><y/></x>); }");
tryItOut("/*for..in*/for(const [__parent__, prototype] = <><>([11,12,13,14].filter)</></> in __parent__ = __count__ = (<x><y/></x>.(<x><y/></x>))) /*for..in*/for(const __noSuchMethod__ = prototype.__count__ = <x><y/></x> in 1e+81) {return;/*infloop*/while\f(prototype){; } }");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = __parent__ <  \"\"  in 1e4) {;export prop; }");
tryItOut("while((Array('fafafa'.replace(/a/g, @foo))) && 0){/*infloop*/for(__iterator__ = <y><z/></y>; <x><y/></x>; <><x><y/></x></>) const prototype, __parent__ = true;throw <x><y/></x>; }\n");
tryItOut("do {let (__parent__ = prop) { {} } } while((([prototype, , __proto__, ] = ({ __count__: __count__ })++)) && 0);");
tryItOut("export prop");
tryItOut("L: /*for..in*/for(__count__ in ((Math.pow)\t( /x/ )))gc()");
tryItOut("{export *;var prop; }");
tryItOut("/*infloop*/L:do {/*infloop*/while( /x/g .watch(\"prop\", function(y) { yield y; <><x><y/></x></>; yield y; }))gc() } while(-0.__iterator__ = __iterator__ = __count__);");
tryItOut("if( /x/g ) { if ((function  __proto__ () { ; } ).call([,,], default: break; break M;case 7: break; case 8: let prop, constructor = (function ([y]) { })();break; case <x><y/></x>: break; case <x><y/></x>: break; throw \f[,,z1];return true;break; , true)) } else {const prototype = *;return; }");
tryItOut("/*for..in*/M:for(var prototype = ({prop: (((uneval((uneval(<x><y/></x>))))))[prototype.prop = ( '' (<y><z/></y>, <x><y/></x>))]}) in (__count__.__iterator__ getter= Math.sin)) __parent__, __parent__ = prototype;");
tryItOut("return;");
tryItOut("return;");
tryItOut("let (__noSuchMethod__ =  /* Comment */({a2:z2}).__defineGetter__(\"__parent__\", eval), __proto__) { M:if(this) gc() else {[,]} }");
tryItOut("if(this.zzz.zzz) {({}).hasOwnProperty }");
tryItOut("M:if((prop = @foo)) {export *;do {__count__ } while((\n4.) && 0); } else { }");
tryItOut("L:if(({__count__ getter: function(y) { yield y; {}; yield y; },  set __parent__(__count__) { yield __iterator__.(0x99) }  })) {(033); } else  if (window ? (<><x><y/></x></>.__defineSetter__(\"__count__\", function(y) { yield y; ;; yield y; })) : prop.valueOf(\"number\").isPrototypeOf([])) {break L;return *\nFunction } else ;");
tryItOut("/*infloop*/L:while((this.__defineGetter__(\"function::__parent__\", this) += <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", (*::*).watch)))if(5.0000000000000000000000) {} else  if (<x><y/></x>) {export *; }");
tryItOut("if( ''  += window.prop) { if (new __iterator__(<y><z/></y>, false)) var __count__ = <x><y/></x>, __parent__ = constructor; else }");
tryItOut("L:if((yield undefined)) {with(__proto__.constructor getter= <y><z/></y>)var __iterator__; }");
tryItOut("throw StopIteration;");
tryItOut("(__iterator__ = (__count__ = <x/>)\n), (({__count__: __proto__ = <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\") })) <<= eval(\"const \\f__proto__;\", this)");
tryItOut("/*for..in*/for(var __iterator__ in ((Function)(eval(\"__iterator__ = *, __proto__ = <x/>;\", ('fafafa'.replace(/a/g, Function)))))){throw ([__proto__ for each (__iterator__ in  \"\" )]); }\t");
tryItOut("switch(prototype = [[]]) { case 8: gc()break;  }");
tryItOut("with(( /x/g .unwatch(\"prototype\")))export *;");
tryItOut("switch((Function())[false]) { default: /*for..in*/for(*::* in ((({}).__lookupGetter__)([11,12,13,14].some))){<x><y/></x>;break ; }case (({prototype: .2 ^ <y><z/></y> })): __proto__ = <x><y/></x>; }");
tryItOut("/*for..in*/M:for(const __count__ in (((new Function(\"L:if(@foo) __parent__ = <y><z/></y>;\")))(<x/>))) \"\" ;");
tryItOut("/*for..in*/M:for(const __proto__ = new (yield constructor)(false) in .2) {return __iterator__; } const __iterator__;");
tryItOut("if(((5.0000000000000000000000-- if (get)))) { if (\n((<x/>\f)) + ({ __count__: __iterator__ }) = <x><y/></x>.hasOwnProperty(\"__parent__\")) {yield <><x><y/></x></>;switch(true) { default: throw false;break;  } } else return 033;}");
tryItOut("/*for..in*/for([__count__, __parent__] = * in 3) {return __iterator__; }");
tryItOut("if((([<><x><y/></x></>].filter((this).apply)).watch(\"setter\", (this).watch))) { if (window.*) gc() else function(y) { yield y; function  prototype () { return <><x><y/></x></> } ; yield y; }}");
tryItOut("if(1e4) {*;; }");
tryItOut("let (__count__ = <x><y/></x>, constructor = #1#) { yield; }");
tryItOut("/*for..in*/for(let (prototype) in ((new Function)((<x><y/></x> if (<y><z/></y>)).__count__ != ([11,12,13,14].sort(default: case 8: break; case (\nundefined): ({}).__lookupGetter__.__count__))))){/*infloop*/L:do {let (prop = <x><y/></x>) {  } } while( '' .eval(*));this; }");
tryItOut("/*infloop*/M:do export prototype; while(function(id) { return id });");
tryItOut("{}\n{}");
tryItOut("if(((false.unwatch(\"__parent__\"))++)) { if \r(prop.(eval(\"-0\", <x><y/></x>).@foo)) {if(--<><x><y/></x></>) return *::*;L:if((<><x><y/></x></> - 0)) return __parent__; else  if (__noSuchMethod__) {export __noSuchMethod__; } }} else {let prototype;export __noSuchMethod__; }");
tryItOut("");
tryItOut("/*infloop*/for(__count__.hasOwnProperty(\"__iterator__\"); (({__parent__: __iterator__})); ((this for (__iterator__ in 0x99))).yoyo(([z1,,]).call(undefined, ))) {/*for..in*/for(var prop = <><x><y/></x></> in <><x><y/></x></>) export __parent__;\n{(constructor);continue ;\t }\n }");
tryItOut("/*infloop*/for(const prototype; this.__defineGetter__(\"prop\", [1,2,3,4].slice).throw([,,]).__lookupSetter__(\"prototype\") >= (); (false > [1,,]).__defineGetter__(\"prototype\", (<x><y/></x>.(0x99))())) {export __iterator__\n{}/*for..in*/for(let __proto__ =  /* Comment */(<x/> for (prototype in false)) in true) {var __proto__;return null; } }");
tryItOut("/*for..in*/for(var __proto__ = new RegExp(<><x><y/></x></>) in ({ prototype: __count__ }) =  /x/  ? __count__ : 1e+81) yield;");
tryItOut("");
tryItOut("with(<x/>)yield window;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((try { return function  constructor () { const var prop, constructor = <x/>;; } (this.zzz.zzz); } catch(__count__) { return; } )( \"\" .__defineGetter__(\"prop\", ({}).hasOwnProperty))))<x/>");
tryItOut("/*for..in*/for(var __proto__ = ((p={}, (p.z = __parent__ = <x/>)())) in ( /* Comment */null)) let prototype; const __parent__;");
tryItOut("{with({({ __count__: __iterator__, constructor: prop }) = (__parent__.(@foo)): true}){let __iterator__ = 5.0000000000000000000000, prop;export __parent__; }*; }");
tryItOut("if(-3/0) {return ({}); } else  if (__iterator__.(window)) {w } else yield <x/>;");
tryItOut("let (__noSuchMethod__ =  /* Comment */<><x><y/></x></>, __count__ = <y><z/></y>) { /*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__.__parent__ in window) return; }");
tryItOut("M:switch(<y><z/></y> for each ( /x/  in  '' )) { default: {yield 0.1; }break;  }");
tryItOut("if(yield \t /x/ ) {{(window).watch }export prototype; } else  if (this) {__proto__ = <x/>, prototype;{} }");
tryItOut("yield; const constructor;");
tryItOut("let(__parent__) { yield this;");
tryItOut("if((<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\"))) export prop; else  if ( /x/g ) @foo;");
tryItOut("continue ;");
tryItOut("/*for..in*/L:for(const try { export *; } catch(prototype if (function(){<x/>;})()) { export __proto__; } catch(constructor\t if (function(){{}})()) { throw <><x><y/></x></>; } catch(__parent__) { var prop = .2; } finally { const __count__ = undefined; }  in new function(q) { return q; }( /x/ , -0)) const __proto__;return  '' ;");
tryItOut("switch(({__iterator__: *::*, __noSuchMethod__ setter: new Function })) { case [ /x/ ]: M:switch([z1,,]) { default: let constructor;break; case 5: export *;break; case this: ;break; __parent__;break; case 8: throw 3.141592653589793;const prop = false;case 0.1: (<x><y/></x>); }break;  }\nreturn this.__defineGetter__(\"prop\", (1 for (x in [])));\n");
tryItOut("if(({a2:z2})) { if (this) {gc() } else {yield [z1,,]; }} const prop;");
tryItOut("with({constructor: <><x><y/></x></>[ /x/g ]}){yield *::*;; }");
tryItOut("if(<x/>) {return *; } else  if ((constructor = ({a1:1}))) (<><x><y/></x></>);");
tryItOut("\n");
tryItOut("/*infloop*/do prop; while( \"\" );");
tryItOut("return;");
tryItOut("/*for..in*/for(__proto__ = #2=<></> in prop = __count__) /*infloop*/for(null; <x><y/></x>; <x/>) return 0;");
tryItOut("return  __count__ = false <x/>");
tryItOut("if(prop) { if (<x><y/></x>) export *;} else {default: break; let __noSuchMethod__ =  /x/g ;case 9: export *;break; case 0: export __iterator__;case 8: break; case  '' : case 0: break; break; break; case false: case 9: break; gc()break; return;case __parent__: break; case 0: throw <><x><y/></x></>;break; break; yield true;break; (<><x><y/></x></>);case <><x><y/></x></>: case __iterator__:  /x/ : break; case 8: gc()break; export __proto__;case 5: break; case 2: yield *; }");
tryItOut("/*infloop*/for(__proto__; *::*; <ccc:ddd> </ccc:ddd>) yield  \"\" ;");
tryItOut("let (__proto__, constructor = false) { const __iterator__ = <><x><y/></x></>; }");
tryItOut("do {{; } } while((prototype.__parent__ setter= #1=[#1#]) && 0);");
tryItOut("\n\n");
tryItOut("if(__parent__ = constructor) {yield <x><y/></x>; }");
tryItOut("/*infloop*/M:while( /* Comment */prop)");
tryItOut("L: {const __count__, prop = <><x><y/></x></>;; }");
tryItOut("with((null++)){throw <x><y/></x>; }");
tryItOut("\n()\n");
tryItOut("M:with({function::__iterator__: <><x><y/></x></>}){;var prop, ; }");
tryItOut("switch(.2) { case 4: M:if(@foo.valueOf(\"number\")) { if ( /* Comment */(yield constructor = (({a1:1})\r /= this))) /*infloop*/for(<x><y/></x>; ({}); <><x><y/></x></>) {(<x><y/></x>);__proto__, prop }} else { set __proto__() { const constructor; }  }break; default: prototype = constructor;break; case 5: var constructor =  /x/g , __count__ = <><x><y/></x></>; }");
tryItOut("([15,16,17,18].sort(new Function, let (__count__, __noSuchMethod__) @foo)).watch");
tryItOut("/*infloop*/for(({ prototype\f: ({ constructor: constructor, __parent__: [, [prop]] }) }) = __parent__.prototype; prop = 3; <zzz><x><y/></x> .@*:: constructor</zzz>.()) ({ constructor: __proto__, prop: __proto__ });");
tryItOut("/*infloop*/for(const ({ __count__: prototype }) = false , [[]]; __iterator__; ([11,12,13,14].sort)) __proto__;");
tryItOut("/*infloop*/while(window){return; }");
tryItOut("if(<y><z/></y>) { if (3/0) {yield; }} else yield <><x><y/></x></>;");
tryItOut("{export *;gc() }");
tryItOut("{with({prototype: <xxx>{__count__}</xxx>.(null.yoyo(<x><y/></x>))}){/*infloop*/while(window)return;throw __count__; } }");
tryItOut("/*for..in*/for(__iterator__ in ((([1,2,3,4].slice).apply)(-3/0[__proto__ =  /x/g ]))){break L;new Error() }");
tryItOut("__count__ = constructor; const __parent__;");
tryItOut("{}");
tryItOut("yield [[15,16,17,18].filter(({a2:z2}), [,])].map(({}).hasOwnProperty);");
tryItOut("L: __noSuchMethod__ = __parent__;");
tryItOut("let __parent__ = <x/>\n\nexport __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__(<y><z/></y>) in (function ([y]) { })()) {return __count__;let prototype, prototype = <x/>; }");
tryItOut("with(\n__proto__)[1,2,3,4].slice");
tryItOut("if([(-0) for (prototype in <x><y/></x>)])  else yield;");
tryItOut("/*for..in*/for(__parent__ in 'haha'.split) {{; } }");
tryItOut("switch(*::*.@*) { case (false ? @foo : [,,z1].isPrototypeOf((__parent__.__proto__ = true))): let (__noSuchMethod__ = __iterator__ = undefined) { M:switch((({}).__lookupGetter__).call) { case 1: L:if(({a1:1})) {let __parent__;const __iterator__; } else  } }break; break; default: break; case 0: {L: { } }break; case @foo: yield\nvar __proto__;break; case 3: break; yield <><x><y/></x></>;case 2: const __proto__, __noSuchMethod__ = 1e81\n;case __noSuchMethod__.valueOf(\"number\") & true.__iterator__ = <><x><y/></x></>:  }");
tryItOut("/*infloop*/M:while( \"\" ){<><x><y/></x></>; }gc()\n__parent__\n");
tryItOut("let(__iterator__) { let __parent__, __proto__ = constructor;");
tryItOut("false");
tryItOut("/*infloop*/while(3.141592653589793){}{}\n");
tryItOut("throw <><x><y/></x></>;");
tryItOut("constructor, __proto__ = __proto__;");
tryItOut("yield;null");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in prototype) throw <><x><y/></x></>; const prop;");
tryItOut("/*infloop*/try { (-0); } finally { ; } ");
tryItOut("M:switch((__iterator__+=<><x><y/></x></>)) { case 7: ;break; break; case 9: case *::*:  }");
tryItOut("/*infloop*/for(const [[, [({ prop: ({ prototype: ({ __count__: __iterator__ }) }) }), , __parent__]], ({ __proto__: ({ constructor: ({ __parent__: ({ __iterator__: ({ __iterator__: constructor, setter: __noSuchMethod__ }), __parent__: ({ delete: prop }) }), constructor: __count__ }), constructor: ({ prop: prototype }) }), __count__: ({ __proto__: ({ __noSuchMethod__: [, , ({ prototype: prop, __proto__: __noSuchMethod__ }), ({ __noSuchMethod__: <x><y/></x> })], __iterator__: __noSuchMethod__ }), prop: __noSuchMethod__ }) }), ] = ((p={}, (p.z = __count__ = [z1,,])())); new new Function(__iterator__.(let (prop, prototype) <><x><y/></x></>), (<y><z/></y>--)); (new (undefined)())) (({ set prototype(__parent__, __noSuchMethod__) { yield <x><y/></x> }  }\f));");
tryItOut("{while((undefined) && 0){yield;((function ([y]) { })()); }(1.3); }");
tryItOut("with({}) { return; } ");
tryItOut("if(\fvoid prototype.prototype+=(p={}, (p.z = *::*)())\t) {return <><x><y/></x></>; } else  if ((prototype.watch(\"constructor\", #1=[#1#]))) export __parent__;");
tryItOut("/*for..in*/for(const prop in (((function  let () { prop, prototype = <x><y/></x>; } ).call)(true for (__count__ in this) -= __iterator__-=@foo))){if(<><x><y/></x></>) { if (<><x><y/></\tx></>) export *; else {export *;({}).__lookupGetter__ }} }");
tryItOut("yield this\nvar prototype;");
tryItOut("");
tryItOut("function(q) { return q; }\nreturn  /x/ ;\n");
tryItOut("throw prototype;");
tryItOut("/*infloop*/while(function:: = *::*)/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in ({a1:1})) const __iterator__ = <x><y/></x>;");
tryItOut("M:while((__noSuchMethod__(@foo).prototype = window < 1e+81) && 0)yield;");
tryItOut("/*infloop*/for(const prototype; <><x><y/></x></>\n; *::*.__iterator__) {(this);return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var function::__count__ in let) {yield this; }");
tryItOut("while((this.zzz.zzz) && 0)");
tryItOut("/*infloop*/for(const prop; ; __parent__ = __noSuchMethod__) (<x><y/></x>).__defineSetter__");
tryItOut("throw StopIteration;");
tryItOut("yield <y><z/></y>;");
tryItOut("/*infloop*/L:for((@foo.isPrototypeOf( /x/ )); \t<y><z/></y>.hasOwnProperty(\"__parent__\"); this) L:with({__parent__: undefined})continue ;");
tryItOut("/*infloop*/L:for(<><x><y/></x></>; <><x><y/></x></>; @foo) throw <><x><y/></x></>\nvar prototype = true;");
tryItOut("/*for..in*/for(let prototype = (({prop setter: 'haha'.split })) > (p={}, (p.z = __iterator__ = arguments)()) in yield this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split)) /*for..in*/for(__proto__ = false in <x/>) return;");
tryItOut("if(window) Math.pow else  if (this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)) \nfunction  __proto__ () { export prototype; } \n");
tryItOut("(true)\nexport *;");
tryItOut("L:with({__parent__: new (yield @foo)()})/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in constructor%=false) continue ;");
tryItOut("M:if(null.yoyo(0/0)) yield; else export *;");
tryItOut("/*for..in*/for(const __proto__.__iterator__ in ((new Function)(\n(uneval([*]))))){__iterator__ = [,,] }");
tryItOut("let (__iterator__, prototype = <><x><y/></x></>) { (0/0); }");
tryItOut("L:if(__count__.__proto__) { if (((uneval(<><x><y/></x></>)))) {/*infloop*/[({ __count__: \t({ prop: ({ __iterator__: __count__, __count__: = }), __noSuchMethod__\f: ({ __proto__: constructor, prototype: __proto__ }) }) })] } else function::prototype;}");
tryItOut("const __count__ = *;\nyield window;\n");
tryItOut("/*for..in*/for(__iterator__ in (((({}).hasOwnProperty).call)(__parent__)))export *;");
tryItOut("/*infloop*/for(const [({ __count__: ({ __noSuchMethod__: [, ] }) }), __iterator__, , ] = this.__defineGetter__(\"__iterator__\", Math.pow); this; __proto__.prototype setter=  /x/ ) yield prototype;\f");
tryItOut("/*for..in*/for([function::prototype, __noSuchMethod__] = #3={a:#3#} in (Math.sin)(<x/>)) {export __noSuchMethod__;({}).__lookupGetter__while((<x/>) && 0)export *; }");
tryItOut("return __proto__.(<x/>);");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("with({__iterator__: (p={}, (p.z = 0/0)()).watch(\"__iterator__\", ({}).hasOwnProperty)});");
tryItOut("L:if((prototype = constructor.propertyIsEnumerable(\"prop\"))) { if ('fafafa'.replace(/a/g, /a/gi)) __count__} else {__proto__ =  /x/ ;/*for..in*/for([prop, __proto__] = <><x><y/></x></> in <x><y/></x>) (('haha'.split).call).apply }");
tryItOut("(#1#)");
tryItOut("if(4. *=  '' .yoyo(<\n><x><y/></x></>)) /*infloop*/do {return;export prop; } while(*::*++); else {; }");
tryItOut("let(prop, __count__ = __proto__-= /x/g ) ((function(){prop = __noSuchMethod__;})());");
tryItOut("while(((-<x><y/></x>)) && 0)");
tryItOut("/*\n*/switch(__noSuchMethod__ = constructor.__noSuchMethod__ setter= (/a/gi).apply) { default: /*for..in*//* nogeckoex bug 349964 */yyycase 6: {yield;-1 }break; export setter;case @foo ? <x><y/></x> : @foo: var * = constructor, __iterator__ = constructor;break; propbreak;  }");
tryItOut("switch((function ([y]) { })()) { default: break;  }");
tryItOut("( '' )\nM:with(<x><y/></x>)(<x><y/></x>);");
tryItOut("if(new ((1 for (x in []))).apply(<x><y/></x>)) constructor; else {throw (function ([y]) { })();break M; }");
tryItOut("M:\fdo {let prop = 0, __noSuchMethod__; } while((.__lookupGetter__(\"let\")) && 0);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (window)(<x><y/></x>, <><x><y/></x></>) in *::*()) {[constructor];prop, __parent__ }");
