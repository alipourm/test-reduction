tryItOut("let (prototype, prototype = (eval(\"(*::*);\", <x><y/></x>)).__defineGetter__(\"function::__iterator__\", (((yield <x><y/></x>))).__defineSetter__)) { /*for..in*/for(let [__noSuchMethod__, constructor] = [this].map(eval) in <x/>) {export *; } }");
tryItOut("for(let y in [5,6,7,8]) throw prototype;");
tryItOut("{break ;return; }export __count__;return *;");
tryItOut("L: {return; }");
tryItOut("if(yield;) {<{constructor}><!--yy--></{constructor}>function  prop (prototype)<>\f<x><y/></x></> } else  if ((__parent__.constructor = (void eval(\"<y><z/></y>\", <><x><y/></x></>))).valueOf(\"number\")) {; }");
tryItOut("<x><y/></x>\nreturn;");
tryItOut("if(\nconstructor) gc() else  if (new new Array()(this.prop = <y><z/></y>)) continue ;");
tryItOut("if((eval(\"export __parent__;\", <x/>))) {yield *::*;export __parent__; } else  if ( /* Comment */<><x><y/></x></>) {;\n }");
tryItOut("return\n");
tryItOut("throw prop;");
tryItOut("let (({ \f__parent__: ({ constructor: [[, __iterator__.constructor, __iterator__, , ], [({ __proto__: ({ constructor: __proto__, __proto__: __count__ }), constructor: __parent__ })], , , ] }), prototype: __parent__ }) = ('fafafa'.replace(/a/g, gc)), __proto__) { let(({ prototype: [, ({ __iterator__: ({ __parent__: __iterator__ }) }), __proto__.__iterator__], __noSuchMethod__: ({ [, , , ({ __noSuchMethod__: constructor, __iterator__: __parent__ })]: (*);, export *;: ({ __count__: ({ prop: __iterator__, try { const __noSuchMethod__; } finally { return {}; } : __parent__ }) }) }) }), constructor = 0.1) { __parent__ = constructor; }");
tryItOut("/*infloop*/for(var __count__ = (new (<x><y/></x>)(undefined)); eval(\";\", prototype); __noSuchMethod__ = <x><y/></x>) {gc()return; }");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = true) { prop");
tryItOut("yield;");
tryItOut("(@foo);");
tryItOut("/*infloop*/for(const prototype; prop; <xxx>{prop}</xxx>.((uneval(__proto__)))) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in ({__count__:  /x/ , __proto__: <><x><y/></x></> })) {/*infloop*/do throw __parent__; while(window);gc() }");
tryItOut("M:do {gc() } while(((window ,  /x/g )) && 0);");
tryItOut("L: {if(window) { if (__proto__) window; else export __parent__;}break ; }");
tryItOut("M:switch(true) { case (null.@*):  }");
tryItOut("M:while(((true ^= ++@foo)) && 0)/*infloop*/do  while(<x><y/></x>);");
tryItOut("/*for..in*/for([__count__, __iterator__] = ((this.__lookupGetter__(\"__count__\")).isPrototypeOf(([11,12,13,14].filter))) in <x><y/></x/*\n*/>) {return prop;(this); }");
tryItOut("{yield; }");
tryItOut("while((__parent__ = ({a1:1})) && 0){yield <x/>;return <><x><y/></x></>; }");
tryItOut("{yield;constructor = false, __noSuchMethod__ = false; }//h\n");
tryItOut("/*infloop*/L:for((#1=[#1#].propertyIsEnumerable(\"__proto__\").valueOf(\"number\")); (- /x/g ); __parent__ = (arguments.watch(\"x::__proto__\", function  prototype (__parent__)#1=[#1#]))) {let __iterator__; }");
tryItOut("/*infloop*/M:for(var __iterator__; ([z1].unwatch(\"constructor\")) ^ window.throw(null); <><x><y/></x></> @ this >>= this) {L:if([*::* <= * for each (prop in *::*) for each (prop in  /x/ )].yoyo((__iterator__ = this))) {while((null) && 0)export __iterator__;/*for..in*/M:for(__noSuchMethod__ in true) return; } else  if (({constructor getter: function  __parent__ (constructor) { yield new  '' () }  })) {x::__count__; } else {if(((1 for (x in []))).call(<x><y/></x>, )) let __iterator__ = <><x><y/></x></>, prototype = <x/>; else  if (Exception()) {const __iterator__; } } }");
tryItOut("/*infloop*/do return <x><y/></x\f>; while(undefined);");
tryItOut("if( \"\" ) {yield <x/>; } else  if (eval(\"(delete <x><y/></x> +=  \\\"\\\" )\",  /x/ (function::__noSuchMethod__ = *, undefined))) <x><y/></x>; else var __count__;");
tryItOut("M:if(([,].@foo)) { if (return <y><z/></y>) /*infloop*/for(let __proto__; <x><y/></x>; <><x><y/></x></>) {return false;<y><z/></y>; }} else yield ({});");
tryItOut("/*for..in*/for(const prototype = * in <><x><y/></x></>) var __proto__, prototype = *;");
tryItOut("if(window.*) { if (this) export *; else gc()}");
tryItOut("/*infloop*/for(\fconst __iterator__; ({a2:z2}); [[]]) case 8: break ;break;  const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (uneval(new Object(<x><y/></x>)))) L:if(true) {;{} } else  if (window) function (prop) { yield; }  else {;const prop = window; }");
tryItOut("while((new (({}).hasOwnProperty)((function ([y]) { })())) && 0){/*infloop*/for(<zzz><><x><y/></x></></zzz>; (yield ); null.watch(\"__iterator__\", Math.pow)) {gc()export __noSuchMethod__; } }");
tryItOut("/*infloop*/for(var constructor; ; [z1]) yield\n");
tryItOut("with(((prototype|=0.1) ? <><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\") : <x><y/></x>.(null)))(window);");
tryItOut("for(let y in []);");
tryItOut("do return <><x><y/></x></>; while((__noSuchMethod__) && 0);");
tryItOut("yield @foo; const prop");
tryItOut("for(let y in [5,6,7,8]) with({}) let(__iterator__) { yield <>false</>;");
tryItOut("let(__iterator__ = <><x><y/></x></>) { yield;");
tryItOut("throw 1.3; const __count__;");
tryItOut("/*infloop*/for(var constructor; prop.((__noSuchMethod__)).propertyIsEnumerable(\"prototype\") << (eval(\"let (prop = (__iterator__ = @foo), prototype = <><x><y/></x></>) { export *; }\", ((uneval(__parent__ =  '' ))))); false.__noSuchMethod__) {}");
tryItOut("export __proto__\nexport *;");
tryItOut("if(yield <x/>) { /x/ gc() } else  if () {prototype =  /x/g , x::__parent__; }\n\nif((constructor.valueOf(\"number\"))) return; else  if (((false)[<><x><y/></x></>])) {return; }\n");
tryItOut("export *; const prototype;");
tryItOut("if(prototype | <x><y/></x>\t) with((#2=({__parent__: true}))){let prototype = <y><z/></y>; } else for(let y in []);");
tryItOut("throw function::constructor;");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, __parent__] = constructor =  \"\"  in *::*) {<x><y/></x>; }");
tryItOut("(.2)\n__count__ = __count__;");
tryItOut("if(([1,2,3,4].map)(<x/>, @foo).__defineSetter__(\"__noSuchMethod__\",  '' )) { if (eval(\"<y><z/></y>\", <x><y/></x>)) {throw <><x><y/></x></>; } else {-3/0\nlet (prototype = [,,], __parent__ =  /x/g ) { {} } }}");
tryItOut("M:with({constructor: [] = (<y><z/></y>)(@foo, this)}){if(Math.sin) export *; else  if (Function(<x/>.__defineSetter__(\"prop\", \ffunction (__proto__)prototype))) break M; }");
tryItOut("if(new (new @foo(<x><y/></x>))(prototype.__proto__).throw(null || (this.throw(<x/>))[<y><z/></y>.valueOf(\"number\")])) {yield;throw this; } else return <x><y/></x>;");
tryItOut(";\nreturn;\n");
tryItOut("switch(([,,])(window, arguments)) { default: yield\nexport *;case *: <x><y/></x>;case 2: ;break; break;  }");
tryItOut("/*for..in*/for(var __proto__ in (((this))(null)))");
tryItOut(" const prototype;");
tryItOut("return;M:while((__proto__) && 0){const constructor =  /x/g , __iterator__;yield <x><y/></x>; }");
tryItOut("/*infloop*/do yield; while(__count__);");
tryItOut("export *;");
tryItOut("if(<><xxx>{__iterator__}</xxx></>) gc() else {(undefined);constructor = null, constructor; }[1,2,3,4].slice");
tryItOut("with({}) let(({ __proto__: ({ __proto__: __proto__, __count__: __iterator__ }) }) = prop.__count__) ((function(){(this = -3/0);})());");
tryItOut("/*infloop*/while(__count__.(null)){let (constructor = *::*) { break L; } }");
tryItOut("/*infloop*/L:do let (__parent__ = __count__.prototype) { with(new (<x><y/></x>)( '' )){with( /* Comment */true)let __noSuchMethod__; } } while(__noSuchMethod__.prop setter= (new Function(\"yield <y><z/></y>;\")).__proto__ = constructor =  \"\" );");
tryItOut("/*infloop*/L:for(let constructor; ; (new Date([,] - constructor)) ^ (yield <x/> >> [,,])) {return  '' ;({}).hasOwnProperty }");
tryItOut("with(((uneval(#3={a:#3#}))))/*infloop*/for(__iterator__ = *::*; <xxx {__parent__}={window} />; false) return;\nlet __iterator__ = <y><z/></y>, constructor;\n");
tryItOut("(true)");
tryItOut("/*for..in*/for(var [__count__, __proto__] = <x/> in window) ;");
tryItOut("/*infloop*/L:for(let constructor = ((__proto__).watch).call(@foo, ); __parent__; this) with({prop: <x/>.eval(__parent__)})(<><x><y/></x></>);");
tryItOut("{/*infloop*/M:for( '' ; 1e81; \n@foo) (/*\n*/({prop: <><x><y/></\fx></>, constructor: <><x><y/></x></> })), <y><z/></y> }");
tryItOut("switch(<><x><y/></x></>) { default: yield 1.2e3; }");
tryItOut("");
tryItOut("if(! /x/g ) { if ((*.__iterator__ = true)) {(this); }} else 'haha'.split");
tryItOut("with(yield __parent__ = <><x><y/></x></>)return;");
tryItOut("/*for..in*/M:for(var [<{prop}></{prop}>yyy, constructor] = ([[], ] = [1,2,3,4].slice(<x/>)) in ()) yield window;");
tryItOut("var <xxx>{__count__}</xxx>;gc()");
tryItOut("return;");
tryItOut("{let (__parent__ = __count__) { ; }M:if(1e81 - this) { if ((<x><y/></x>.valueOf(\"number\"))) null;} else {{} } }");
tryItOut("throw StopIteration;");
tryItOut("yield #3={a:#3#};/*for..in*/for(__parent__ = __count__ in <><x><y/></x></>) {return; }");
tryItOut("__noSuchMethod__ = <y><z/></y>, __proto__ = undefined;");
tryItOut("if(*::*.*.__lookupSetter__(\"prototype\")[!window]) /*for..in*/for(let prop in false) throw StopIteration;");
tryItOut("yield <y><z/></y>;");
tryItOut("/*for..in*/for(__noSuchMethod__ = * in (</*\n*/><x><y/></x></>.prototype = (<><x><y/></x></>.unwatch(\"__iterator__\").valueOf(\"number\")))) {throw __count__; }");
tryItOut("/*infloop*/for(let [, , , [__noSuchMethod__.prototype, ], ] = (({constructor: [<x><y/></x>].some(({}).hasOwnProperty)})); let (__parent__ = <><x><y/></x></>, constructor) __count__.(undefined); ({__count__: yield ([15,16,17,18].map((gc).apply, false))})) export *;");
tryItOut("/a/gi const prop;");
tryItOut("var __parent__ = 0.1, __iterator__ = this;");
tryItOut("L:if(({ set (uneval((prototype = constructor))) constructor (__proto__, __iterator__) { yield this.zzz.zzz }  })) {continue L;return -0; } else  if ((<x><y/>\n</x>.watch(\"__noSuchMethod__\", function(q) { return q; })--)) let __count__ = false, constructor = .2; else {export constructor;; }");
tryItOut("do <x><y/></x>; while(([,,]) && 0);");
tryItOut("/*infloop*/for(const __count__ = *; 3.141592653589793; #3={a:#3#}) {__noSuchMethod__ }");
tryItOut("if(({a2:z2})) { if (__count__: [ /x/  :: <x/>].map(function () { yield @foo } )) {; }} else gc()");
tryItOut("default: throw <x><y/></x>;");
tryItOut("L: {{}const prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in false in this) {const prop;<y><z/></y>; }");
tryItOut("if(__iterator__) { if (<x><y/></x>) ( \"\" ).watch else {yield;var prop = <>\f<x><y/></x></>; }}L: {const prop = null, __proto__ = *;yield 1e4; } const constructor;");
tryItOut("M:while(((uneval(<bbb xmlns=\"([1] .. )\"><!--yy></bbb>))) && 0)if(__count__) { if (return) {<x><y/></x>;break ; } else { }}\n\fconst __count__;\n");
tryItOut("/*for..in*/M:for([__parent__, __iterator__] = new 1e+81([z1,,]) in <y><z/></y>) {if(window) __noSuchMethod__ else  if (<y><z/></y>.__parent__) {window;([z1]); } else {const __iterator__ = 5.0000000000000000000000;var constructor = *::*, __iterator__; } }");
tryItOut("\n");
tryItOut("/*infloop*/while((__count__.__iterator__ = (({ __parent__: __iterator__, __proto__: __proto__ }) = new new Function(<><x><y/></x></>))) if (false)){}\n");
tryItOut("/*for..in*/for(var [__iterator__, __parent__] = false in false) var __noSuchMethod__, function::__count__ = <><x><y/></x></>;");
tryItOut("with(Exception(([true for each (__proto__ in true)]), undefined))export *;yield <><x><y/></x></>;");
tryItOut("export *\n/*infloop*/M:for((new function (prototype, __iterator__) {  \"\" ; } (__parent__)); (<x><\fy/></x>.valueOf(\"number\")); @foo) __noSuchMethod__");
tryItOut("/*for..in*/for(let [prop, prop] = (function::prototype+=function(id) { return id }) in  \"\" --) {throw undefined; }");
tryItOut("with({prototype: <y><z/></y>})let __iterator__ = __noSuchMethod__, __parent__ = #3={a:#3#};");
tryItOut("if(prototype.(__proto__).constructor = ({}) %= <x/>) { if (([11,12,13,14].some)) {return prop;((-0)); } else {({});yield; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M:/*\n*/ for  each(var __count__ in (prop =  \"\" ).__defineGetter__(\"prop\", Math.pow)) {return;__proto__ = 1e+81; }");
tryItOut("(p={}, (p.z = null)()).constructor = __iterator__;");
tryItOut("/*infloop*/L:for(let function::__proto__; new Math.sin(__noSuchMethod__.__noSuchMethod__ = (<x><y/></x> === false), \tprototype = 0.1 -  \"\" .__lookupSetter__(\"__proto__\")); (Number() %= ((prototype).__parent__ = \n(prototype = \f<x/>.eval(false))))) /*infloop*/do export __noSuchMethod__; while(prop = <y><z/></y>);");
tryItOut("M:if((new /a/gi(<><x><y/></x></> *= window))) {gc()M:if(<x/>) { if (<x><y/></x>) export prop; else __count__} } else  if (({ __parent__: __iterator__ }) = false.hasOwnProperty(\"prop\")) {return; } else ");
tryItOut("/*for..in*/for(let constructor((eval(\"\", -3/0))) in ((#3={a:#3#})((*::*--).propertyIsEnumerable(\"__count__\")))){; }");
tryItOut("L:if(__noSuchMethod__.prop setter= new Function) {export __proto__;false; } else {L: (new Function(\"export constructor;\")) }");
tryItOut("if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((__iterator__ = *::*)))) {([,,z1]); }");
tryItOut("/*infloop*/for(undefined;  /* Comment */*::*; function(id) { return id }) yield;");
tryItOut("var __count__; const __parent__;");
tryItOut("/*for..in*/for(const __iterator__ in ((Math.pow)(let (__parent__ = <\t><x><y/></x></>) <><x><y/></x></>.propertyIsEnumerable(\"__parent__\"))))M:switch(let (__count__ = #1=[#1#]) __parent__) { case 4: break; default: {}/*infloop*/while(prototype\n)__proto__, prop;case ( /x/g .watch(\"prototype\", function (__parent__) { return constructor } )).isPrototypeOf(eval(\"export *;\", -3/0)): return;break; break; case [15,16,17,18].map((<x/>).__defineSetter__, false): const prototype = [[1]], __noSuchMethod__ = __noSuchMethod__; }");
tryItOut("with(undefined)yield false;");
tryItOut("L:if([15,16,17,18].map((window).watch, __proto__)) switch(<><x><y/></x></>) { default: return;break;  } else  if ( /x/ ) {M:if(<x><y/></x>) {{}let __parent__ = <y><z/></y>; } else  if (undefined) {throw *::*; } } else export constructor;");
tryItOut("M:with(this.__lookupGetter__(\"function::prototype\")){\fwith({__noSuchMethod__: (p={}, (p.z = this.__defineSetter__(\"__noSuchMethod__\", gc))())})gc() }");
tryItOut("if(@foo) gc\n(<y><z/></y>);\n else {export __proto__; }");
tryItOut("/*infloop*/M:for(prototype; __count__.__noSuchMethod__ =  '' ; <><bbb xmlns:ccc=\"<y><z/></y>[*::*]\"><ccc:eee></ccc:eee></bbb></> / (( \"\" .watch(\"__proto__\", __iterator__)) == #1# === (__parent__.( /x/g )))) {'haha'.split; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(__count__.prototype setter= (1 for (x in []))) {[1,2,3,4].slice\n } else  if ((<>(p={}, (p.z = *)())</>.(<y><z/></y> ? window : <x><y/></x>\n))) {if(<>(((1 for (x in []))).call).apply</>) prototype; else  if (false) {var constructor, __iterator__ = 3; } }");
tryItOut("M:do {continue M;M:if(__iterator__.constructor = *::*) {var prototype = prop;return  \"\" ; } else  if (window[({})]) {yield;throw <x><y/></x>; } } while(((( /x/g .__count__).watch(\"prop\", function(y) { yield y; /*infloop*/for(constructor = \f<x><y/></x>; <x/>; false) {const prop, function::__parent__ = [];-1;/*\n*/ }; yield y; }))) && 0);");
tryItOut("/*infloop*/for(const __iterator__ = constructor ? ({constructor }) : -1 <<  { <!--yy--> } ; let (prop, function::__parent__ = <x/> for each (__proto__ in undefined)) *::* / <y><z/></y>; ([11,12,13,14].filter) ? <></> : ([( /x/g ) ? [15,16,17,18].filter([1,2,3,4].map,  /x/ ) : ({__count__ getter: -1 })])) {return <y><z/></y>;\nyield false;\n__noSuchMethod__ = true; }");
tryItOut("{/*for..in*/for(function::__noSuchMethod__ = <><x><y/></x></> in this) {yield;const __noSuchMethod__ = <><x><y/></x></>; } }");
tryItOut("/*for..in*/for(var __proto__ = (yield @foo) in <y><z/></y>) {/*for..in*/for(const prop = <x><y//h\n/></x> in <x/>) {{}return; }let __count__ = __parent__, constructor; }");
tryItOut("__count__ = constructor;");
tryItOut("do {gc()\fexport __noSuchMethod__; } while((this) && 0);");
tryItOut("switch(<x><y/></x>) { case 1: prop;break; break;  }");
tryItOut("with(){{} }");
tryItOut("/*infloop*/L:while(window ==  /x/ ){L:do export *; while((<x><y/></x>) && 0);yield  \"\" ; }");
tryItOut("/*for..in*/M:for(let  \"\"  in ((Math.sin)((window)(;) = (<y><z/></y> == window)))){<y><z/></y>yield #3={a:#3#}; }");
tryItOut("do /*for..in*/for(__parent__ in {var __count__ = false; }) return constructor; while((\f((((p={}, (p.z = throw  \"\" )()).watch(\"__noSuchMethod__\", (1 for (x in [])))))())) && 0);");
tryItOut("/*for..in*/for(3 in <x><y/></x>.throw(<x><y/></x>)) {}");
tryItOut("L: {(( ''  &=  \"\" ));{} }");
tryItOut("try { /*for..in*/for(__count__ in [,]) {yield;gc() } } catch(constructor) { let(__noSuchMethod__, __noSuchMethod__) { throw __parent__; } finally { \t__iterator__, __iterator__ = *::*\n<ccc:ddd><!--yy--></ccc:ddd>do {yield <><x><y/></x></>;prop = ({a2:z2}), __iterator__ = ; } while((0) && 0); } ");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, Math.sin))/*for..in*/L:for(__noSuchMethod__ in arguments) {yield __proto__; }");
tryItOut("if((uneval((prop)))) {const __iterator__ = ({a1:1}), prop = @foo;while((let (__count__) yield) && 0){const __iterator__ = <x><y/></x>, __proto__ = window; } }");
tryItOut("if(constructor) { if (<><zzz>#0=[<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((<><x><y/></x></>.unwatch(\"__noSuchMethod__\")))]</zzz></>) true.__parent__ = this; else /*for..in*/for(const __noSuchMethod__.constructor in ((function (__noSuchMethod__) { throw <x><y/></x>; } )( /x/ .unwatch(\"__iterator__\")))){throw @foo;var prototype = this, __count__ = ({a2:z2}); }\nexport *;\n}");
tryItOut("do (*).watch const __parent__; while((new @foo\t(<x><y/></x>, 1e4)) && 0);");
tryItOut("/*infloop*/for([new  /x/g (<y><z/></y>) if (function(id) { return id })]; ({ get __parent__ __parent__ (constructor)(__iterator__.__defineSetter__(\"prototype\", [1,2,3,4].slice)),  set [, , ]() { return (undefined) }  }); __count__ = <x/>) {L:if((prototype = <><x><y/></x></>)) { if (([(Exception())])) return this; else export *;}/*for..in*/for(let __iterator__ in [z1,,]) {gc() } }");
tryItOut("do {yield; } while((*::*) && 0)\n");
tryItOut("if([15,16,17,18].some((((#1#).watch).call).call, gc)) { if (delete [,,z1]) /*infloop*/for( '' ; prop , <y><z/></y>; (({a2:z2}) * null)) var __iterator__, __noSuchMethod__; else continue ;}");
tryItOut("/*for..in*/for(const prototype in (prototype = ((this ? this : {}).unwatch(\"__count__\").*))) {__iterator__ = function::__noSuchMethod__; }");
tryItOut("switch(((new Function)(<><x><y/></x></>, <y><z/></y>)) .@x:: (constructor.(this.__defineGetter__(\"constructor\", function(q) { return q; })))) { default: break;  }");
tryItOut("for(let y in []);");
tryItOut("while(([11,12,13,14].map) && 0){function(q) { return q; }var __iterator__ = prototype; }");
tryItOut("do {yield __proto__;if(<><x><y/></x></>) { if (__proto__) yield get;} else {export *; } }/*\n*/ while((<y><z/></y> :: <x/>) && 0);");
tryItOut("throw this; const __proto__;");
tryItOut("/*for..in*/for(let prototype in 0x99 .@ null.yoyo((<x><y/></x>.prototype))) L: {yield; }");
tryItOut("/*infloop*/for([, __parent__] = this.eval(<x/>); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (<y><z/></y> * 033) ? ([<x><y/></x>]) : *::*) {/*for..in*/for(const __count__ = window in this) {export __parent__;__iterator__ } }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] = this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty) in (#2=[1.3])) /*for..in*/for(let __proto__ in ((Math.sin)((<x><y/></x>.valueOf(\"number\")))))return 4.;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in [11,12,13,14].some.__lookupSetter__(\"prop\")) {{}(this.__defineSetter__(\"__parent__\", function ({export __parent__;gc() }) { return <x>\t<y/></x> } ));/*\n*/ }");
tryItOut("/*infloop*/do {/*infloop*/for(({ __proto__: [, , , [], __count__] }) = __noSuchMethod__.__parent__ getter= ((yield).apply).apply\r; __proto__ = <y><z/></y>.prop = (__noSuchMethod__ = <x><y/></x>); [11,12,13,14].map) {gc()L:if(<><x><y/></x></> <= <x><y/></x>) { } } while((({constructor: this})));");
tryItOut("while(((((new Function(\"throw <><x><y/></x></>;\")))((<><x><y/></x></> if (<><x><y/></x></>))))) && 0){gc()yield;M:while((null) && 0)gc() }");
tryItOut("yield ('fafafa'.replace(/a/g, (1 for (x in []))));");
tryItOut("/*for..in*/for([constructor, constructor] = __proto__.(new (<x><y/></x>.unwatch(\"prototype\"))(<x/>.@*)) in new RegExp()) {}");
tryItOut("let(({ prototype: __noSuchMethod__, __noSuchMethod__: __iterator__ }), __count__) ((function(){return <>let(__noSuchMethod__, __proto__) { __count__ = __count__;</>;})());");
tryItOut("/*infloop*/for(constructor = __iterator__.(<><{prop}> </{prop}></>\t); ((*::* >>>  '' ) ? [11,12,13,14].some : true.__iterator__); (@foo)()) {const constructor = 1e-81; }");
tryItOut("do throw  /x/g ; while((<x/>(__proto__, constructor)) && 0);");
tryItOut("if((undefined %= [,]).propertyIsEnumerable(\"prototype\")) M:while(( /x/g ) && 0){export constructor; } else  if ((( /* Comment */ ''  != 0x99 for each (__proto__ in <><x><y/></x></>[ /x/ ])))) {gc()var prop; }");
tryItOut("switch(this) { case 3: yield;case __noSuchMethod__: throw undefined;break;  }");
tryItOut("with(\n[[1]]){with(this){const __iterator__ = <><x><y/></x></>;function (__iterator__, prop) { yield this }  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in export prototype;) {</*\n*/x><y/></x>; }");
tryItOut("L: throw [,,z1];");
tryItOut("{ /x/ ; }");
tryItOut("export __iterator__;");
tryItOut("/*infloop*/for(<x><y/></x>(([z1,,].__defineGetter__(\"__iterator__\", function () { throw undefined; } )), <x><y/></x>); eval(\"break L;\", constructor =  /x/g ); (yield).isPrototypeOf(Date(<x><y/></x>, this))) continue ;");
tryItOut("/*for..in*/for(var __parent__ = __iterator__ in *::*) export prop;");
tryItOut("M:if(<y><z/></y>.__lookupSetter__(\"__parent__\")) { if ((window--)) /a/gi} else gc()");
tryItOut("let (__proto__) { {continue M;(.2); } }");
tryItOut("let(__noSuchMethod__, constructor) ((function(){constructor = __proto__;})());");
tryItOut("throw @foo\nyield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in function ([y]) { }.__noSuchMethod__ = [1]) {const __proto__; }");
tryItOut("/*for..in*/for(var (__count__) in window) let __noSuchMethod__;");
tryItOut("M:with(\f([<x><y/></x> for each (__iterator__ in  /x/ )]).__defineGetter__(\"__noSuchMethod__\", function (function::__noSuchMethod__) { yield __parent__.__iterator__ getter= -3/0.watch(\"prop\", new Function) } )){return; }");
tryItOut("if(let __iterator__.__lookupSetter__(\"prototype\")) {M:if(null) { if (<x><y/></x>) {;break L; } else export __proto__;} } else  if (constructor :: ('fafafa'.replace(/a/g, [1,2,3,4].slice) >>= <x/>)) Math.pow else /*for..in*/for(var __count__ in ((.function  prop (constructor, __noSuchMethod__) { yield [z1,,] } )(new @foo(window, <><x><y/></x></>))))yield\n");
tryItOut("/*for..in*/for(let __parent__ = (yield <x/>) ? (--<y><z/></y>) : (__noSuchMethod__-=<><x><y/></x></>) in this.__defineSetter__(\"constructor\", @foo)) /*for..in*/M:for\f(__count__.prop in <x><y/></x>) {<x><y/></x>; }");
tryItOut("returngc()");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((new Function(\"__iterator__, __parent__\")))(({ __parent__: __proto__ }) = ({ __parent__: prop }))))<><x><y/></x></>");
tryItOut("this.zzz.zzz;");
tryItOut("with({__noSuchMethod__: new Date( '' , __count__)() = window < #3={a:#3#} .@*:: ((<x><y/></x> ? <y><z/></y> : <><x><y/></x></>) ? ({__parent__: arguments}) : ())}){/*for..in*/for(var prop in this) {('haha'.split).apply }/*for..in*/L:for(var __proto__ = <><>__parent__ = <><x><y/></x></></></> in [1]) {function () { return false } gc() } }");
tryItOut("/*infloop*/M:do {if(<><x><y/></x></>) { if (<x><y/></x>) {}} else {yield;return; } } while((0x99.@*).__parent__);");
tryItOut("if(([<x/> for each (constructor in *::*)])) {yield; } else  if (__noSuchMethod__ = __parent__) {var constructor, prototype = <x><y/></x>;return; } else {}");
tryItOut("while((<x><y/></x>) && 0){(*);yield; }gc");
tryItOut("if(-1) \f{(<><x><y/></x></>/*\n*/);export function::prop; } else {return <x><y/></x>;\rthrow <x><y/></x>;(window); }throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in ((prototype = __iterator__)++)) {}\n");
tryItOut("__count__ = <x><y/></x>, __parent__ = <x><y/></x>\nexport prop;\nyield;\n");
tryItOut("if(<><x><y/></x></>.hasOwnProperty(\"__proto__\")) {; } else {continue L; }");
tryItOut("with({}) with({}) return;");
tryItOut("/*for..in*//*\n*/for(const __iterator__ in (((<x><y/></x>.(1e+81).@foo))(@foo))){let (constructor) { yield; }-- /x/g ; }");
tryItOut("throw <><x><y/></x></>\nthrow 0;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (__count__ = 4.) in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) return;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:while(('fafafa'.replace(/a/g, ({}).hasOwnProperty))){/*infloop*/for(var __count__; __proto__++; [11,12,13,14].some) {([z1]); }with({}) { let __noSuchMethod__; }  }");
tryItOut("L:with({__count__//h\n: ((window)[<><x><y/></x></>]) - (prop = <x/>)}){<x><y/></x>yield  /x/ ; }");
tryItOut("/*infloop*/while((let constructor, __proto__))/*infloop*/do export *; while(true);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in [ /x/  for (default: case 1: break; continue ;case 3: yield;;break; case 3: break;  in <x/>)]) continue L;");
