tryItOut("export constructor;");
tryItOut("gc()");
tryItOut("/*infloop*/for((<><x><y/></x></>\n).__lookupSetter__(\"prototype\"); ((1 for (x in []))()) for each (delete in this) if ( /x/g ); new (*);(1.2e3)) {if((eval(\"@foo\", <x><y/></x>))) {{} } else  if (new @foo(1e81)) continue ; else {(1 for (x in []))yield; }if(<x/>) { if (({constructor: 0/0, __iterator__: constructor })) {let constructor = 0/0; }} else {break L;(window); } }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (function ([y]) { }.hasOwnProperty(\"constructor\"))) function  __parent__ (__noSuchMethod__, __iterator__) { yield <><x><y/></x></> } \nreturn #1#;\n\nfor(let y in []);");
tryItOut("while(() && 0)\t/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in *) throw <x><y/></x>;");
tryItOut("{if( /x/g ) {prop = 5.0000000000000000000000;\t } else { } }");
tryItOut("if((<x/> ? __count__ : __iterator__)) ; else {export prop; }");
tryItOut("return <><x><y/></x></>\n");
tryItOut("if(033) return; else  if (false) {}");
tryItOut("/*infloop*/for(var ({ __parent__: __parent__ }) = <x/>.@*; (\t<x><y/></x>.isPrototypeOf(*::*//h\n)); (__parent__)(<y><z/></y>, window)) gc()");
tryItOut(" \"\" ;constructor = <y><z/></y>;");
tryItOut("yield;");
tryItOut("(__count__); const __proto__;");
tryItOut("return;");
tryItOut("L:switch() { default: break;  }");
tryItOut("/*infloop*/while(__iterator__){; }");
tryItOut("this.zzz.zzz;");
tryItOut("if([15,16,17,18].map((<x><y/></\nx>).__defineSetter__, false)) {export *; } else  if (((p={}, (p.z = this)()))) (<x/>);");
tryItOut("L:with(([0x99])){(3);yield; }");
tryItOut("for(let y in []);");
tryItOut("if(__count__.@foo) {while((null) && 0)/a/gi } else  if ((<{__proto__}><!--yy--></{__proto__}>.())) if([null for each (__parent__ in *::*)] && <><x><y/></x></> && <y><z/></y>) {;gc() } else  if (<y><z/></y>.*) {var __proto__ = prototype, prop = <><x><y/></x></>; } else <!--yy--> const prototype; else {L:if((constructor = constructor)) { if ( \"\" ) //h\ngc() else let __count__ = <x><y/></x>;} }");
tryItOut("with({constructor: ({ __count__: ({ prototype: __parent__, __iterator__: __parent__ }), prop: [, __parent__, prototype] }) = (<x><y/></x>.yoyo(<><x><y/></x></>))})yield; const __parent__;");
tryItOut("{break ;\n{}\n }L:while(((window.valueOf(\"number\"))) && 0)var prototype = function ([y]) { }, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.__noSuchMethod__ in \f\t if (undefined)) {<><x><y/></x></>; }");
tryItOut("const __iterator__, prop = ({a2:z2});");
tryItOut("/*for..in*/for(var __iterator__ in [] = export __noSuchMethod__) {constructor;/*infloop*/do (this); while(({})); }");
tryItOut("/*infloop*/while(({}).__lookupGetter__(__parent__)){}");
tryItOut("if(( /* Comment */<><x><y/></x></>)) { if (#1=[[]].yoyo((RangeError()).__lookupSetter__(\"__count__\"))) {[1,2,3,4].slice } else /*for..in*/for(var function::__parent__ in <x/>) continue L;}");
tryItOut("/*for..in*/M:for(let __count__ = this.zzz.zzz in __proto__ = [,]) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in __iterator__) {export *;(new Function(\"const __count__;\")) }");
tryItOut("{let (__parent__ = <y><z/></y>, __noSuchMethod__ = window) { var __iterator__ = <x/>; }; }");
tryItOut("if(1e-81.__defineSetter__(\"setter\", Function)) {var __parent__; } else  if (<><x><y/></x></>.throw(-3/0)) return 3/0;");
tryItOut("if(null) { if (({}.__lookupGetter__(\"constructor\"))) {/*for..in*//* nogeckoex bug 349964 */ for  each(<x/> in <x><y/></x>) let __noSuchMethod__, __proto__ = *;; } else /*for..in*/for(let constructor = - ''  in 1e81) (undefined).__defineSetter__}");
tryItOut("throw __count__;");
tryItOut("/*infloop*/for(*; <><x><y/></x></>; prototype) <y><z/></y>;");
tryItOut("yield true <<= 'fafafa'.replace(/a/g, ({}).hasOwnProperty);");
tryItOut("/*infloop*/<x><y/></x>");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = window.isPrototypeOf(window).propertyIsEnumerable(\"__noSuchMethod__\") in (-1)) /*infloop*/do yield <><x><y/></x></>; while(<xxx>{__count__}</xxx>);");
tryItOut("L:with({__iterator__: @foo |= ((window))[[11,12,13,14].some]}){; }");
tryItOut("switch((constructor = this -= eval(\"yield;\", prototype = __noSuchMethod__))) { default: if(__parent__ = @foo) { if (<x/>.__lookupGetter__(\"__count__\")) {export __count__; } else {return;(<x/>); }}break; throw <>__iterator__, __noSuchMethod__ = <y><z/></y>;</>;break; M:if(<x><y/></x>.constructor) with({__noSuchMethod__: true}){constructor;{} }yield *; }");
tryItOut("\n");
tryItOut("if((\t~(*::*)[({ set __iterator__ __count__ (__noSuchMethod__, <x><y/></\tx>) { ; }  })]).unwatch(\"constructor\")) {3.141592653589793; }");
tryItOut("{continue ; }");
tryItOut("if(function::__parent__ = <x/>) {const \f__count__, prop = <x/>;let prototype, __parent__; } else yield false;");
tryItOut("{const __noSuchMethod__; }");
tryItOut("gc()");
tryItOut("if( /x/g ) const prototype; else  if ((0x99.__defineSetter__(\"constructor\", Math.pow))) export __count__; else {(3.141592653589793); }\nreturn [15,16,17,18].sort(/a/gi, undefined);\n");
tryItOut("let __parent__;");
tryItOut("if(true) { if (033) {throw <><x><y/></x></>; }} else {new Function }");
tryItOut("{return ({a1:1}); }");
tryItOut("return");
tryItOut("/*infloop*/do {return;(<><x><y/></x></>);return 3; } while(([<><{__iterator__}> </{__iterator__}></>].filter(((p={}, (p.z = 5.0000000000000000000000)())).call)));");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("{M:while((try { ; } catch(__noSuchMethod__ if (yield -3/0)) { return prop; } catch(__count__ constructor  if (function(){})()) { return; } catch(__count__ if (function(){return;})()) { const prototype, constructor; } catch(__noSuchMethod__ if (function(){prop = <y><z/></y>;})()) { return <x/>; } .unwatch(\"__count__\")) && 0)(false); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype(constructor) in constructor = Math.sin) gc()");
tryItOut("yield <><x><y/></x></>\n{}");
tryItOut("let (__parent__ = -3/0, constructor) { /*for..in*/for(let  /x/  in ((function  constructor (__count__)constructor)(<y><z/></y>)))throw  \"\" ; }");
tryItOut("if(new (*::*)()) gc() else  if ((({ set prop __proto__ () { return __parent__ } , prototype: undefined }))) gc()");
tryItOut("if(<x><y/></x>) { if (__count__) {} else {function (__parent__) { return null } export *; }}");
tryItOut("/*for..in*/for(var __count__ = null in __count__) {window;var __proto__; }");
tryItOut("/*for..in*/for(yield this.prop in (()(this.__defineGetter__(\"__iterator__\", /a/gi)))){M:switch((-0 &= 3.141592653589793)) { case  /* Comment */0.1:  }null; }");
tryItOut("for(let y in [5,6,7,8]) yield [(uneval(null)) for each (prototype in ({})) for ( in <x><y/></x>)];");
tryItOut("L:if(({ __parent__: __iterator__, prototype: ({ prototype: __noSuchMethod__, __parent__: __parent__ }) }) = prototype) {/*infloop*/while( /x/g ){gc()let __parent__; } }");
tryItOut("with({constructor: \fthis.isPrototypeOf(*::*.unwatch(\"prop\"))}){L:switch(<x/>) { case 7: return;break;  } }");
tryItOut("/*for..in*/for(let __iterator__ in ((<>yield this</>)(eval(\"continue ;\", (<><x><y/></x></> !== <><x><y/></x></>))))){;return; }");
tryItOut("M:do while((@foo < <><x><y/></x></>) && 0){let __noSuchMethod__; } while(([] = yield  \"\" ) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in (p={}, (p.z = <x><y/></x> & new RangeError())())) {__proto__ = <><x><y/></x></>;let prop = __proto__;\nthrow  /x/ ;\n }");
tryItOut("for(let y in []);");
tryItOut("let(__parent__, __noSuchMethod__) { __proto__ = __parent__;");
tryItOut("/*infloop*/M:for(let prototype;  = function::try { gc() } catch(prop) { continue L; } finally { export __noSuchMethod__; }  <= (Date(#3={a:#3#})); ((__noSuchMethod__ = <x><y/></x>).__defineSetter__(\"__proto__\", ({}).hasOwnProperty))) prop setter: function (constructor, prop) { yield (__count__).call(<x><y/></x>, *) } ");
tryItOut("const prop, prop = __count__;");
tryItOut("L: [1,2,3,4].slice\n");
tryItOut("let(({ __noSuchMethod__: __count__ })) { prototype = prop");
tryItOut("/*infloop*/do {(<x><y/></x>);gc() } while(<><x><y/></x></> *= <><x><y/></x></>);");
tryItOut("let(constructor = this) { return;");
tryItOut("with(<x/>.propertyIsEnumerable(\"__noSuchMethod__\")){export *; }");
tryItOut("__proto__ = <><x><y/></x></>;");
tryItOut("L:if(\n) {gc() }");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __count__ in true) <><x><y/></x></>;");
tryItOut("{; }");
tryItOut("with({constructor: =.@foo})function (__count__, __parent__)__proto__");
tryItOut("/*infloop*/do {/*for..in*/for(const __noSuchMethod__(<x><y/></x>) in null) {break M;{(\r /x/ );var __iterator__ = <><x><y/></x></>, constructor = ({a1:1}); } } } while(delete [this].filter((( \"\" ).__defineSetter__).call));");
tryItOut("{do {export __iterator__; } while((<y><z/></y>\n) && 0);/*for..in*/L:for(const prop in (((--033).__defineSetter__)([new (<><x><y/></x></>)(arguments, (function ([y]) { })()) for (__proto__ in __parent__) for (__proto__ in 3.141592653589793)]))){if(__iterator__) [1,2,3,4].slice else  if ( /x/ ) {export constructor; } } }");
tryItOut("/*infloop*/for(const prop; (#3={a:#3#} >> * ? this.__defineGetter__(\"__proto__\", function  prop (__parent__)undefined) : *); (yield #1#).hasOwnProperty(\"__noSuchMethod__\")) return <x/>;");
tryItOut("/*for..in*/for(let __parent__ =  /x/g  in [15,16,17,18].sort((new Function(\"yield  '' ;\")), {})) {gc(){} }");
tryItOut("try { yield prop.__proto__ = [[1]] in <x><y/></x>; } catch(prop) { return this.__defineSetter__(\"__parent__\", (1.3)\t.__defineSetter__); } ");
tryItOut("/*for..in*/for(let __count__ = ('fafafa'.replace(/a/g, (Math.pow).call)) in undefined.__iterator__ = <x><y/></x>) /a/gi");
tryItOut("if(__count__ setter: ({}).__lookupGetter__) {const prototype = <x><y/></x>, __iterator__ = [1]; }");
tryItOut("return;");
tryItOut("try { return __iterator__; } catch(__count__ if (function(){throw 3;})()) { return [z1]; } catch(__parent__ if window) { yield; } finally { __parent__ = *::*, __count__ = <x><y/></x>; } ");
tryItOut("if(<y><z/></y>) ( /x/g ); else  if ( '' ) {var __parent__ = <x><y/></x>, __proto__ = <x><y/></x>; } else {const __iterator__; }");
tryItOut("yield this;");
tryItOut("/*infloop*/M:do {/*infloop*/for(let prototype; *::*; this) {;(1.2e3); }if(this\t) var __count__ = *, constructor; else {let prop;return; } } while((<zzz>new ((new Function(\"Math.sin\")))(((p={}, (p.z = [z1])())), (eval).call(this, __iterator__, (-1)))</zzz>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((*::*)([], @foo) in (new Function).call(<y><z/></y>)) {yield; }");
tryItOut("if( \"\" ) {__iterator__ = null, prop = (-0);(<><x><y/></x></>); } else  if ( \"\" ) gc() else {(<x><y/></x>); }");
tryItOut("/*infloop*/do gc() while(__count__ = \f \"\" );");
tryItOut("yield  '' \n");
tryItOut("throw  '' ;do return; while(([,]) && 0);");
tryItOut("{if(<x><y/></x>) export *; else  if (false) {throw <><x><y/></x></>; } else {;return #1=[#1#]; }\nM:do {033<y><z/></y>; } while(([z1,,]) && 0);\n }");
tryItOut("with(({ __proto__: function::__proto__ }) = [15,16,17,18].filter([,], <x><y/></x>) === 4. %=  ''  == \n<x/>.__lookupGetter__(\"__noSuchMethod__\")){if(new [,,](<x><y/></x>, <x><y/></x>)) {} else ( /x/g ); }");
tryItOut("/*for..in*/M:for(__iterator__\t = <><x><y/></x></> in 4.) {return [1,,]; }");
tryItOut("if(new (Math.pow)()) {if([,,].throw([1])) return; else  if ((<x/>.__parent__))  else {export constructor; }return  /x/g ; } else  if (([prop, , prop, ] = ( '' )(5.0000000000000000000000).__defineGetter__(\"prototype\", function  prop (({ __parent__: __parent__ })) { return (x::prototype = this) } ))) ((__iterator__)());");
tryItOut("\t(\t /x/g )\nL: {; }\n/*infloop*/L:while([,,])gc()\n");
tryItOut("let (({ prototype: ({ constructor: __count__, __proto__: __noSuchMethod__ }), __parent__: [, __iterator__, prop, prototype] }), __proto__) { ' }");
tryItOut(";");
tryItOut("/*for..in*/L:for(var try { undefined } catch(__proto__ if (function(){Function})()) { <><x><y/></x></> } catch(prototype) {  } finally { (<><x><y/></x></>); } .__parent__(/ in ((<y><z/></y>)(var prop;))){export __parent__; }");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("while(([function::__iterator__ += *].sort(prop).constructor) && 0){[] }");
tryItOut("/*for..in*/__iterator__");
tryItOut("return (( \"\"  %= window).watch(\"__proto__\", (new Function(\"\"))));");
tryItOut("if([,,z1].__iterator__) with({__noSuchMethod__: this}){export __count__; }");
tryItOut("if(__iterator__) throw false; else  if (<x><y/></x>) var prop = window, prop; else {export *; }\n/*infloop*/for((+0/0); __parent__; [ \"\" ]) gc()\n");
tryItOut("/*infloop*/M:do prop while(<y><z/></y>.__defineGetter__(\"prototype\", Function));");
tryItOut("/*for..in*/for(const prop in ((constructor = this.__defineSetter__(\"constructor\", (1 for (x in []))))((p={}, (p.z = (new [1,2,3,4].slice(false)))()))))let __proto__, __parent__ = this\nexport *;");
tryItOut("/*for..in*/for(constructor in ((({}).__lookupGetter__)(__proto__))) for each (prop in (yield null)) for (((* ? window : <x><y/></x>))(__proto__ = this) in __iterator__) for (prop in  /x/g ) for (__noSuchMethod__ in  /x/ )");
tryItOut("");
tryItOut("/*infloop*/for(let __count__ = ([constructor]); *::* >>>=<x/> |= __parent__; RangeError( \"\" , *::*)) /*infloop*/while(*::*)var ;\n/*infloop*/for(false; @foo; 3.141592653589793) {gc() }\n");
tryItOut("/*infloop*/for(__count__; undefined; new null | ([,].throw(<x><y/></x>))((yield __noSuchMethod__))) {/*for..in*/for(constructor = <><x><y/></x></> in this) {export __noSuchMethod__;(<y><z/></y>); } }");
tryItOut("M:if([[1]]\f) var prop = <x><y/></x>, prototype; else switch(new Exception(prototype)) { case __count__ = (function ([y]) { })(): ; }");
tryItOut("M:switch( \"\" ) { case <x><y/></x>: break; case 0: case 9: {} \"\" break; default: break; case 2: throw  /x/g ;break; yield __parent__;break; return prop;break; function  function::__noSuchMethod__ (__iterator__, prop) { yield undefined } break; case 6:  }");
tryItOut("/*for..in*/L:for(const __iterator__ = new <x><y/></x>() in <x><y/></x>) \r{;let __iterator__ = 0/0, __iterator__ = [[1]]; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (__parent__ = <x><y/></x> .. eval(\"export *;\", <><x><y/></x></>)); (p={}, (p.z = ([__count__].some(__proto__)))())) {break ;throw window; }");
tryItOut("/*for..in*/L:for(\fprop in *::*) yield;/*\n*/");
tryItOut("/*for..in*/for(const __noSuchMethod__ in [,]) {export *;export *; }");
tryItOut("with({}) { yield __noSuchMethod__ = *::*; } ");
tryItOut("let (prop) { prop; }");
tryItOut("if((yield 0)) {throw <><x><y/></x></>;let __count__ = arguments; } else  if (export *) {Math.pow }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(\tlet prop; [-0 for each (__proto__ in *::*)] ? (4. ?  :  '' ) : ((<x/>)[[,,z1]]); (({ set prototype prop (__count__)undefined, __count__: * }))) ({}).hasOwnProperty");
tryItOut("let __count__;yield; const __noSuchMethod__;");
tryItOut("/*for..in*/for(let (prototype) in (uneval(0/0))) \fif(new function () { yield -1 } (<><x><y/></x></>, 1e81)) let __noSuchMethod__ = prop, x::__proto__; else  if ((true.*)) {yield [,,]; }");
tryItOut("switch(let (__parent__ = prop, constructor) ((-0) , __proto__)) { default: break; case 6: do (<y><z/></y>); while((eval(\"yield;\", __noSuchMethod__ = <x><y/></x>)) && 0);break; case 4: if([]) { if (<><x><y/></x></>) {(*);<x/> }} else {return; }\f }");
tryItOut("with({}) { let(__proto__ = prop = 0.1, [, constructor] = *::*) ((function(){for(let y in [5,6,7,8]) let(__proto__ = <y><z/></y>, __count__ = [1]) ((function(){{}})());})()); } ");
tryItOut("/*for..in*/for(let try { prop = constructor; } catch(prop if (function(){throw StopIteration;})()) { yield <><x><y/></x></> ? <x><y/></x> : <x><y/></x>; } finally { {} }  = constructor = () &= -<x><y/></x> in window.@foo) {var __noSuchMethod__, __count__;prop; }\nconst constructor, prototype = 3/0;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(<x/>; <><x><y/></x></>; *::*) yield;");
tryItOut("let (__noSuchMethod__ = function(y) { yield y; yield .2;; yield y; }) { if(<x><y/></x>.yoyo(<x/>)) {{}export *; } }");
tryItOut("let (__noSuchMethod__ = new <><x><y/></x></>(<y><z/></y>, <x><y/></x>)) { throw 1e+81; }");
tryItOut("/*for..in*/for(prototype = ({}) in ({ __iterator__: ({ __parent__: __proto__, __noSuchMethod__: constructor }) }) = yield [,]) {throw <x><y/></x>; const function::prop; }");
tryItOut("M:if([, ] = 1e81 = try { <><x><y/></x></>; } catch(__noSuchMethod__ if <><x><y/></x></>) { var __parent__ =  '' , __iterator__ = @foo; } finally { return <><x><y/></x></>; } ) /*for..in*/for(let __parent__ = (({}).hasOwnProperty).call(this.__lookupSetter__(\"prototype\"), (new ([1,,])())) in new (1 for (x in []))()) {return; } else while((({ constructor: __noSuchMethod__ }) = false.isPrototypeOf(<y><z/></y>)) && 0){/*infloop*/for(const constructor = @foo; true; <x><y/></x>) let __proto__ =  '' ; }");
tryItOut("if((([z1,,] for each (__noSuchMethod__ in <y><z/></y>)))) { if ((1 for (x in []))(1e-81)) {var constructor; }} else {return; } const constructor;");
tryItOut("with({}) { prototype = __count__; } ");
tryItOut("/*infloop*/for(var [({ __proto__: __noSuchMethod__ }), , ({ __proto__: ({ __noSuchMethod__: prototype }) })] = <><>yyy</></>; (new RangeError((prototype = null), <y><z/></y>)); (new ({}) ^ this)) {export prop; }");
tryItOut("if((--window)) { if (throw <><x><y/></x></>;) { } else {}}");
tryItOut("");
tryItOut("with({constructor: <y><z/></y> <= *::*})/*infloop*/for(prop; <x><y/></x>; \t({})) {yield 1e4; }");
tryItOut("__proto__ = this;\n\n");
tryItOut("{gc()break L; }\n");
tryItOut("eval\nfunction(id) { return id }");
tryItOut("/*infloop*/for(<><x><y/></x></>['__noSuchMethod__'].isPrototypeOf(this.zzz.zzz); <y><z/></y>--; <><x><y/></x></> | *::*) {while((@foo) && 0)export __noSuchMethod__; }");
tryItOut("let (function::prototype, __noSuchMethod__ = undefined) { return false; }");
tryItOut("try { for(let y in [5,6,7,8]) try { ( \"\" ).__defineSetter__ } catch(prototype) { {} } finally { __proto__, __count__; }  } catch(prop if (<><x><y/></x></>)([[1]]).@*) { this.zzz.zzz; } catch(__noSuchMethod__ if (function(){with({}) yield [<x/>].filter(({}).__lookupGetter__);})()) { with({}) try { return <x/>; } catch(prop if (function(){const __iterator__;})()) { continue ; } catch(({ prop: prototype }) if +true) { var prop, prototype = <>__iterator__</>; } catch(__parent__ if <></>[<x><y/></x>]) { {} } catch(__noSuchMethod__ if __noSuchMethod__ = <><x><y/></x></>) { const __iterator__ = try { break L; } catch(x::__proto__ if (function(){return <x/>;})()) { return; } catch(constructor) { yield; } finally {  } , __iterator__ = @foo; } catch(prop) { const constructor; }  } catch(__proto__) { throw StopIteration; } finally { throw prototype; } ");
tryItOut("if(*::* || *::*) {<x><y/></x>;return; } else  if ((<y><z/></y>.__lookupGetter__(\"__parent__\"))) return;");
tryItOut("yield *;");
tryItOut("throw <x/>\n");
tryItOut("with(prop = null){;throw __noSuchMethod__; }");
tryItOut("M:with(*);");
tryItOut("constructor = this, [1]");
tryItOut("/*infloop*/for([, , prototype, , __proto__] = (yield this); arguments *= __noSuchMethod__; prototype > <x><y/></x>) yield <><x><y/></x></>;");
tryItOut("{} const __count__;");
tryItOut("/*for..in*/for(__proto__(@foo) in 4.) yield;");
tryItOut("with({}) return;");
tryItOut("/*infloop*/for(({prototype.constructor: ({case window: (0/0);case 5: break; , prop:  \"\"  }).unwatch(\"__noSuchMethod__\"),  get prototype prototype () { yield setter = <x><y/></x> ^=  ''  }  }); true ?  /x/  : null; (new (<><x><y/></x></>)(0))) {<x><y/></x>; }");
tryItOut(" with ");
tryItOut("/*infloop*/L:while(<><x><y/></x></>);");
tryItOut("/*infloop*/M:for(let __proto__ = (true.__lookupSetter__(\"prototype\")).throw(eval(\"__count__ = false\", (-1).isPrototypeOf(this))); ((this)()); [__iterator__, __count__, , ] = ({ __noSuchMethod__: __count__, __parent__: __noSuchMethod__ })) {const prop = {}; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (gc)(0x99.eval(<x><y/></x>))['prototype'] in this.__defineSetter__(\"__noSuchMethod__\", (<><x><y/></x></>))) /*infloop*/for(prop = prototype.( /x/g ); undefined.__defineSetter__(\"prototype\", Math.pow); (<x><y/></x>.watch(\"let\", function  __noSuchMethod__ (prop, __noSuchMethod__)this)) == this < <x/>) {if(function(id) { return id }) {yield;let constructor, constructor; } else {{} }L:if(-0) {yield;return  /x/g ; } else  if (<y><z/></y>) export __proto__; }");
tryItOut("/*infloop*/do  while(__iterator__.__noSuchMethod__ >>  /* Comment */*::*\n);");
tryItOut("{{}gc() }");
tryItOut("{return; }");
tryItOut("L: {{} }\n(__proto__);\n");
tryItOut("with( /x/ ){if(prototype++) break ;/*for..in*/M:for(let x::prop = undefined in 3/0) {yield *;(__proto__).__defineSetter__ } }");
tryItOut("M:if(<>__iterator__</>) { if (prop.__parent__ = yield window) {({ __proto__: ({ __noSuchMethod__: __noSuchMethod__, prop: constructor }) }) }} else __count__, prop;");
tryItOut("if(((3.141592653589793).call( /x/ , <x><y/></x>\f))(((yield (uneval(true)))))) { if (<><{constructor}> </{constructor}></>) {; }} else {let \t__noSuchMethod__ = -0; }");
tryItOut("/*infloop*/while([15,16,17,18].map(function  constructor () { function  __proto__ () ''  } , (<><x><y/></x></>).call(undefined, true, 5.0000000000000000000000)).propertyIsEnumerable(\"__count__\") == <x><y\n/></x> ? * : <x/>.isPrototypeOf(constructor.__parent__ = \t<x><y/></x>))#");
tryItOut("/*infloop*/for(({ __count__: ({ __count__: constructor }), __noSuchMethod__: ({ setter: prop }) }) = ({prototype: <><x><y/></x></>, __parent__:  /x/g  }); ([11,12,13,14].map); (__proto__.__count__)) {export *; }");
tryItOut("/*infloop*/while((prototype .. <x><y/></x>))export *;");
tryItOut("/*for..in*/M:for(let __iterator__\t in __proto__) do /*infloop*/L:while(window.yoyo(prop)){;let prototype; } while(((prototype = [[1]])) && 0);");
tryItOut("while((undefined) && 0){{} }");
tryItOut("/*for..in*/for([constructor, __proto__] = ((yield __count__)) in [,,].__lookupGetter__(\"__parent__\").hasOwnProperty(\"constructor\")) {default: ;case 9: return;break; var __iterator__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/L:for(const prop; (#0=[__iterator__.(<><x><y/></x></>(window, true) %= )]); [1] + 5.0000000000000000000000) gc()");
tryItOut("if(([] >= null)) { if ((Array(window))) {( /x/ );export *; }} else (<x/>);");
tryItOut("with({constructor:  ''  += null & 1e4 >>> undefined}){yield }");
tryItOut("if((this.__defineSetter__(\"function::let\", /a/gi))) { if (<>yyy</>) return null; else {0.1;(<><x><y/></x></>); }}");
tryItOut("try { yield ( \"\" ); } catch(__parent__) { try { return; } catch(__noSuchMethod__) { false; }  } ");
tryItOut("L: ");
tryItOut("if(<x/>) { if (<x/>) {return  /x/ ; }} else {let __proto__; }\nyield window; const prop;\n");
tryItOut("if(new RangeError((<x/>)[({a1:1})])) {}");
tryItOut("/*for..in*/for(var __iterator__ =  ''  in *) break ;");
tryItOut("if((yield __proto__)) {L: let __noSuchMethod__, __parent__ = <><x><y/></x></>; } else  if (((uneval(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)))) { /x/  }");
tryItOut("true");
tryItOut("{{throw <><x><y/></x></>; /x/g ; }var __noSuchMethod__, __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__.__noSuchMethod__ in 1e-81) {if(prototype) { if (__noSuchMethod__) {export *; }} else {export __iterator__; } }");
tryItOut("if((*.unwatch(\"__count__\").__defineGetter__(\"__iterator__\", (1 for (x in []))))) {export __count__; } else  if (__parent__.(<x><y/></x>.__lookupGetter__(\"__iterator__\"))) {(<x><y/></x>);let __proto__; }");
tryItOut("switch(this.__defineGetter__(\"__parent__\", function(q) { return q; })) { default: (this); }");
tryItOut("with({}) { return; const __noSuchMethod__ = constructor = __proto__; } ");
tryItOut("if(<><x><y/></x></>.@*) /*infloop*/for(<y><z/></y>; #1#; 1.2e3) gc()");
tryItOut("/*infloop*/for([1]; <><x><y/></x>//h\n</>; <y><z/></y>) {<x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in true) if(__iterator__) { } else  if ( /x/g ) {continue ;const __parent__ = prop, __parent__ = 1e+81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in (.unwatch(\"__noSuchMethod__\")[(<x/>.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; continue ;; yield y; }))])) {gc() }");
