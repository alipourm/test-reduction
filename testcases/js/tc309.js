tryItOut("while((null.prop) && 0)return this;");
tryItOut("{}");
tryItOut("while((* >>>=this) && 0){export *;throw <y><z/></y>; }");
tryItOut("/*infloop*/for(var __proto__; (((new Function(\"throw <y><z/></y>;\"))).call(<y><z/></y>, <y><z/></y>.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)).throw(__count__.hasOwnProperty(\"prototype\"))); (this.__defineGetter__(\"prop\", function () { constructor } )) >> function::__parent__ in <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")) *");
tryItOut("/*for..in*/L:for(var prototype = [15,16,17,18].sort(function (prop, __parent__)<><x><y/></x></> && false, (__noSuchMethod__.__noSuchMethod__ = __count__ =  /x/g )) in <x/> + window) ;");
tryItOut("with({__parent__: new @foo(__noSuchMethod__ = __noSuchMethod__)}){continue L; }");
tryItOut("__noSuchMethod__ = 1e4, __iterator__ = null");
tryItOut("; const prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("M:while(([[]]) && 0){export *;({}).hasOwnProperty }");
tryItOut("throw __count__;");
tryItOut("{yield <x/>;export prototype; }");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></> = window) {export *;return *; }\n{({}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.__noSuchMethod__ in __count__ = [[1]]) {export *;const prop = @foo; }");
tryItOut("if(<>((this)(@foo >>= this))</>) {do {/*infloop*/do {export __iterator__; } while(yield  \"\" );let (__parent__ = -3/0, prototype = <y><z/></y>) { yield; } } while((constructor) && 0); } else  if (new Number(__iterator__.__iterator__, <x/>)) {\tthrow constructor;//h\n } else {switch(((new Function(\"return <x><y/></x>;\"))(<><x><y/></x></>))) { case ({}): /*for..in*/L:for(var constructor in window) {{} } }if((__proto__.prop)) { if (<xxx>{__proto__}</xxx>) {var constructor, constructor; } else { for (__iterator__ in <><x><y/></x></>) for (__proto__ in window)throw  /x/g ; }} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in String((<><x><y/></x></> < window))) {;/*for..in*/for([prototype, __parent__] = (<x/> instanceof null) in *::*) {<><x><y/></x></>; } }");
tryItOut("let function::__noSuchMethod__ = window;");
tryItOut("while((this.__defineSetter__(\"__iterator__\",  /x/ )) && 0)let (prop, __parent__) { var prop; }\n{}");
tryItOut("do {const __parent__;throw  '' ;if(((( \"\" ).watch).call( /x/g , <x><y/></x>).propertyIsEnumerable(\"prop\"))) { if (new (eval(\"yield __parent__;\", <y><z/></y>))()) {yield;yield prop; } else { }} } while((yield __proto__) && 0);");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/L:for(let __parent__ = __parent__ in <x><y/></x>) {export __iterator__; }");
tryItOut("yield <y><z/></y>.throw(3/0);");
tryItOut("M:if(yield (#0=({__proto__: ~null}))) {yield ({a1:1}); }");
tryItOut("if(__parent__) {return <y><z/></y>; { return \n ''  }  } else  if (prop.__proto__ setter= function ()((yield <x/>[<x><y/></x>]))) let (prop)//h\n { L:if((function ([y]) { })()) {;yield; } else [1,2,3,4].map }");
tryItOut("let (({ __iterator__: \t({ get: ({ __count__: __count__ }) }), __noSuchMethod__: __proto__ })) { yield <><x><y/></x></>--; const __iterator__; }");
tryItOut("/*infloop*/for(let [__count__.__noSuchMethod__, , ({ __proto__: ({ prop: __count__ }) })] = false.constructor = *::*; this.zzz.zzz; (__count__.__iterator__ =  /x/  & prototype.__count__)) {eval }");
tryItOut("let(__parent__) { yield __proto__ = *::*;");
tryItOut("throw <x><y/></x>;\n/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in 3) {[1,2,3,4].mapgc() }\n");
tryItOut("if(@foo) {yield <x><y/></x>; }");
tryItOut("M:if(RegExp()) yield 3; else  if (<x><y/></x>.@foo) {(@foo);return <y><z/></y>; }");
tryItOut("/*for..in*/for(const prop in ((Function)( '' ))){/*infloop*/for(new Number(<x><y/></x>.valueOf(\"number\"), (<x/>())); (window)[@foo][(@foo.eval(<><x><y/></x></>))] & ((uneval(<><x><y/></x></>))); (__iterator__ = null) <=  \"\" ) ; }");
tryItOut("/*for..in*/for([delete, __proto__] = undefined.__lookupSetter__(\"constructor\") in (this)) {}");
tryItOut("for(let y in []);");
tryItOut("with((__parent__.(prop)))gc()");
tryItOut("if(__noSuchMethod__) return; else gc()");
tryItOut("{}");
tryItOut("/*for..in*/for(let [prop, constructor] = Error(undefined, <><x><y/></x></>) in 1.2e3) throw [1,,];");
tryItOut("return #3={a:#3#};");
tryItOut("/*infloop*/for(~(function  prop (__count__)[z1]) for each (constructor in <y><z/></y>)\f for (constructor in  \"\" ); [[]] == [,]; [prop]) /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <y><z/></y>) throw  \"\" ;");
tryItOut("while(([,,]) && 0){yield; }");
tryItOut("with({__iterator__: @foo}){export *; }");
tryItOut("try { with({}) { throw StopIteration; }  } finally { for(let y in []); } ");
tryItOut("L:switch([window.@* if (<>return;</>)\t]) { default: break;  }");
tryItOut("M:while(((prototype = *)) && 0){/*infloop*/while((({constructor: undefined}\r))){ '' ; }M:if(#1#) { if (window) {__count__ = *::*;__proto__; }} else ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.prop in (uneval((<y><z/></y>.valueOf(\"number\"))))) {L:do yield [z1,,]; while(((-0) ? <x><y/></x> : <x/>) && 0);yield * }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({}) in <><x><y/>\f</x></> <= @foo) { } const __count__;");
tryItOut("let (__proto__ = <x/>, function::prop = <><x><y/></x></>) { continue ; }");
tryItOut("if([1].__defineSetter__(\"constructor\", yield <x><y/></x>;)) ; else export *;");
tryItOut("let (constructor) { /*infloop*/for(constructor; <x><y/></x>; __iterator__.prop =  '' ) break ; }");
tryItOut("{constructor, ;true; }");
tryItOut(" const prop;");
tryItOut("if(((setter.__iterator__) *= 1e-81 != null)) { if ( ''  ?  ''  :  \"\" ) let __noSuchMethod__ = <x/>;} else return <x/>;");
tryItOut("if(new constructor(*)) { if ((new (function (__parent__) { yield <y><z/></y> } )(<x/>,  { return this } ))) {} else return;}");
tryItOut("while(((4..hasOwnProperty(\"__parent__\"\r))/*<ccc:ddd>__iterator__</ccc:ddd>\nlet prop;");
tryItOut("/*for..in*/M:for(let [__iterator__, __iterator__] = ( /* Comment */window) in __iterator__ = prop <= <><x><y/></x></> !=  '' ) {{\n} }");
tryItOut("if((new (<x><y/></x>)(window).propertyIsEnumerable(\"function::__parent__\")[new 033()])) {export *;yield [[1]]; } else export __count__;");
tryItOut("{export prop; }\f");
tryItOut("yield 'fafafa'.replace(/a/g, function () { break M; } ); const __parent__;");
tryItOut("with({__proto__: this}){const prop, prototype;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in \tundefined) return <y><z/></y>;");
tryItOut("if((this % false)()) {/*infloop*/for(var prototype; 3.141592653589793; *::*) export *; } else  if (window--) {export __noSuchMethod__; } else #1=[#1#];");
tryItOut("/*for..in*/for(let __iterator__ in (__noSuchMethod__.__iterator__ = __proto__.__lookupGetter__(\"__iterator__\") > (eval(undefined, __proto__) << undefined & <x><y/></x>))) {const __parent__ = (-0), __proto__ = this;export *; }");
tryItOut("/*for..in*/M:for((__iterator__) in (([1,2,3,4].map)(__count__)))eval");
tryItOut("/*infloop*/while(({ prototype: [default: break; case 4: case 3:  \"\" ;break; yield window\ncase 2: , ] }).isPrototypeOf(<><x><y/></x></>))\t{true }");
tryItOut("{return;/*for..in*/for(const prototype = <x><y/></x> in __parent__) gc() }");
tryItOut("<><x><y/></x></>;");
tryItOut("if([,]\n) M:with({constructor: prototype.__count__ = window}); else {gc() }\nL:if(~eval(\"<x><y/><\\f/x>\",  /x/g )) {export *; } else  if ([]) ;\n");
tryItOut("if(true) {gc() } else let prop =  \"\" , constructor = (-0);");
tryItOut("[[]];");
tryItOut("let(prototype, [, , __noSuchMethod__, ({ __iterator__: __parent__, __count__: __noSuchMethod__ }), [, , , ]]) ((function(){do {{}Math.pow } while(((<x/>.__count__)) && 0);})())\n");
tryItOut("/*for..in*/M:for(const [__proto__, prop] = ~__count__ in constructor = prototype) {{} }");
tryItOut(" \"\" ; const __proto__; const __iterator__;");
tryItOut("throw constructor;");
tryItOut("if(<x><y/></x>) export __iterator__; else  if ( '' ) return; else {{} }");
tryItOut("L:if(prototype.(((this)(<><x><y/></x></>, <><x><y/></x></>)).unwatch(\"__count__\"))) with('.unwatch(\"__proto__\").@foo)while((undefined) && 0)throw <><x><y/></x></>; else const __iterator__ = <x><y/></x>, __proto__;");
tryItOut("gc()");
tryItOut("/*infloop*/for(0.1.__count__; undefined; (({ prop: __iterator__, function::__proto__: prop }) = [ /x/  for (__iterator__ in function::__noSuchMethod__)]) ? __proto__.([,]) : (!undefined\t)) {L:if(typeof <x/>) {(prop);eval } }");
tryItOut("{throw  /x/ ; }");
tryItOut("yield this;");
tryItOut("{}");
tryItOut("switch(<bbb xmlns=\"this.zzz.zzz\"><ccc:ddd> </ccc:ddd></bbb>) { default: break; case 4: if() break ; if (((prop =  \"\" ).valueOf(\"number\"))) /*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in @foo) {return; } {gc()__proto__ } break;  }");
tryItOut("function (__iterator__) { ; } \n");
tryItOut("if((constructor.propertyIsEnumerable(\"constructor\")) in *::*.propertyIsEnumerable(\"delete\")) { if (<>yyy</> & (prototype)((__count__.*))) break \n else {if(__iterator__.__iterator__ setter= prototype) {(<y><z/></y>); } else  if (<x><y/></x>) return;/*for..in*/M:for(var [__proto__, function::__count__] = (prototype.__iterator__) in new (new Function)(1.3,  \"\" )) throw prototype; }}");
tryItOut("if([15,16,17,18].map(({}).hasOwnProperty, ( \"\" ['prototype'\f]\t = --this))) {do /*\n*/{;gc() } while(((1.2e3)[<y><z/></y>]) && 0); } else {with({__proto__: ({a2:z2})})throw 1e81; }");
tryItOut("__proto__: (#1# .@ <x><y/></x>.__parent__.isPrototypeOf(prop.prop = <x><y/></x>)) >> __parent__ = __proto__");
tryItOut("if(<x/>.@foo % true.@*) {L:if((({__count__: 4.,  set prototype prop () { yield undefined }  }))) {throw *::*; } else  if (((yield  /x/g ))) {(__noSuchMethod__);let __iterator__, __iterator__; }(undefined); } else for(let y in [5,6,7,8]) (0/0);L:with(this.__defineGetter__(\"__parent__\", (1 for (x in []))).__lookupSetter__(\"__iterator__\"))break ;");
tryItOut("return (new  \"\"  -= true.unwatch(\"__proto__\"\f)(new (eval)(), [15,16,17,18].sort(eval,  '' )));");
tryItOut("{return;false/*infloop*/L:for\f(let __noSuchMethod__; this.__defineSetter__(\"constructor\", Math.sin); * &= <x/>) {__parent__#1=[#1#]; } }");
tryItOut("if((( \"\" )(null) = <><x><y/></x></> .@*:: [,])) { if ((uneval(<y><z/></y>)).__lookupGetter__(\"__count__\")) L:if((-1)) {throw <y><z/></y>; } else  if (<x/>) {({}).hasOwnProperty } else \f{L: let (({ __proto__: __count__ }), delete) { L:do {<x/>; } while(((({ set __parent__ __noSuchMethod__ (prototype) { return null } , __count__ getter: ({}).hasOwnProperty }))) && 0); } }}");
tryItOut("/*for..in*/for(const __iterator__ =  ''  >>> <x/> in 0.1 <<= <x/>) \n\n/*for..in*/for(const prototype in undefined) yyy\n(3/0)\n\n");
tryItOut("yield <><x><y/></x></>;");
tryItOut("__parent__ = __iterator__;");
tryItOut("gc()yield;");
tryItOut("/*infloop*/M:for( \"\" ; (-0); setter) yield \r__count__;");
tryItOut("{(0.1);L:if(<x><y/></x>) { if (0x99) {const constructor = __count__, __count__; }} else const __iterator__ = prototype, __proto__; }");
tryItOut("/*for..in*/for(const prototype = <x/> in <x/>) {return <x/>; }");
tryItOut("yield ((uneval(<x><y/></x>)) |= (-0));");
tryItOut("L: throw <x><y/></x>;");
tryItOut("");
tryItOut("do {L:if((delete false)) /*infloop*/for(var __count__ = window;  \"\" ; [,]) {{}(*); } else  if ([[]] %= true) __proto__: <y><z/></y> else return;({a2:z2}).__defineGetter__(\"__parent__\", (1 for (x in []))); const __proto__;throw (uneval(__iterator__-=<><x><y/></x></>)).__noSuchMethod__ = @foo; } while((window) && 0);");
tryItOut("{if(__parent__.prop = <x><y/></x>) {__proto__ = <x/>;return (-1); }if(((new Function(\"return;\")))(3)) ; else  if (this) (1.3); }");
tryItOut(" = __noSuchMethod__;");
tryItOut("/*infloop*/for(let __parent__; (this.__defineGetter__(\"__parent__\", function  __proto__ (default: break; case 9: if(*::*) {const prototype, __parent__;var __parent__ = <x><y/></x>, prop =  '' ; }break; break; ) { return #1=[*] } )); [11,12,13,14].filter) prop;");
tryItOut("L:if( '' ) ( /x/g );");
tryItOut("constructor = __iterator__;");
tryItOut("L: {if(false = this) { if (((eval)\f.call((new -0()), ))) gc() else {var ; }} }");
tryItOut("if('haha'.split ===  '' ) continue ; else  if (this) {L: {/*for..in*/for(var prop in ((({}).__lookupGetter__)(<x/>))){export __proto__;__count__ = <y><z/></y>, prototype; }if(({a2:z2})) {} else {export prototype; } } }");
tryItOut("/*for..in*/M:for(const __count__ in  /x/ ) {throw #1=[#1#];export *; }");
tryItOut("let (prototype, prop) { let prop, __count__ = *; }");
tryItOut("if(yield null) {(true); } else  if () {yield;{} }");
tryItOut("throw __noSuchMethod__;");
tryItOut("(this.__defineSetter__(\"constructor\", ({}).__lookupGetter__));");
tryItOut("if((this.__defineSetter__(\"prototype\", function))) {gc()yield; } else {yield this; }");
tryItOut("M:with({constructor: new (this)()}){return __count__; }");
tryItOut("export __noSuchMethod__\n");
tryItOut("case [[1]]: L: {const __count__ = <x><y/></x>;{with(*)export *;/*\n*/ }\nexport function::prototype; }break; ");
tryItOut("do with({__parent__:  /x/g }) while(([11,12,13,14].map) && 0);");
tryItOut("export __count__;\n/*for..in*/for(var __noSuchMethod__ in (((new Function(\"export *;\")))((uneval(window))))){yield; }\n");
tryItOut("let (__noSuchMethod__ = ;) { Function }");
tryItOut("/*for..in*/L:for(var constructor(__proto__) in <y><z/></y>) {do {yield [,];throw ({}); } while((1.3) && 0); }");
tryItOut("/*for..in*/for(const __iterator__ = 1e-81 | -0 in null) export __iterator__");
tryItOut("/*infloop*/while(this.__defineSetter__(\"prototype\", function  __count__ () { yield 3.141592653589793 } ))\f{{}<y><z/></y> }");
tryItOut("if(1e4 & <><x><y/></x></>) return  /x/ \n{let constructor, prototype = <><x><y/></x></>;return <x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("\n\fif(undefined) { if (true\f)  /x/g ; else \t{ }}\n const prototype;");
tryItOut("if(<x/>.*) { if (gc()) ;} else export *;");
tryItOut("/*infloop*/do {continue L;return; } while(let (__noSuchMethod__, __noSuchMethod__) (eval(\"<x><y/></x>\", false)));L:if( '' ) {var __noSuchMethod__ = null, __proto__;gc() }");
tryItOut("{try { var function::__count__ = true; } finally { throw __iterator__; } L:with({__parent__: <><x><y/></x></>}){let prop = __parent__; } }");
tryItOut("const prop, prop = null;");
tryItOut("/*for..in*/L:for(var x::__noSuchMethod__ in (( /x/g )(<y><z/></y>)))");
tryItOut("/*for..in*/for(const __iterator__ in (([1,2,3,4].map)(__iterator__))){export *;/*infloop*/while(('fafafa'.replace(/a/g, function(y) { yield y; ;; yield y; }))){gc()gc() } }");
tryItOut("/*for..in*/for(var __proto__ in (('haha'.split)(<x/>)))prototype =  /x/g ;");
tryItOut("with({__proto__: ({a1:1})}){{}throw *; }");
tryItOut("/*for..in*/for(const prop in ((({}).__lookupGetter__)(@foo.prop = (__proto__.prop)))){(<x><y/></x>); }");
tryItOut("L:if((({ prototype: prop, __noSuchMethod__: prop }) = ({ prop: __count__, __count__: true, @foo }) ? [,,] in <x/> : void new ( '' )())) { if ((({a1:1}))) {/*for..in*/L:for(const __parent__ in null) {\flet __iterator__,  /x/ ;var constructor = <><x><y/></x></>, constructor; }/*for..in*/M:for(prop.prop in <x><y/></x>.(window)) {{}let __noSuchMethod__ = <x><y/></x>, constructor = <x><y/></x>; } } else {#1=({prototype: <y><z/></y>});/*infloop*/do return; while(<><x><y/></x></>); }}");
tryItOut("__parent__ = __count__;");
tryItOut("L:while((function::prop =  '' ) && 0){{__proto__ =  \"\" , __iterator__ = <x/>; } }");
tryItOut("function(y) { yield y; yield;; yield y; }");
tryItOut("gc()");
tryItOut("M:if(++(null)[true if ( /x/g )])  else  if (({ prop: prototype }) = prop) {export prop; }");
tryItOut("switch(yield");
tryItOut("L: {return 0.1; }");
tryItOut("if((<x><y/></x>.valueOf(\"number\"))) { if ((p={}, (p.z = <y><z/></y>.constructor)())) ;} else {throw __parent__; }");
tryItOut("M:with((<><x><y/></x></>\n)){/*for..in*/for(let __parent__ in ((Function)(__noSuchMethod__+=prop))){return  '' ; } }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let __parent__ in (([1,2,3,4].slice)(-@foo))){var __parent__;export *; }");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("/*infloop*/for([({ prototype: __parent__, constructor: constructor })] = try { ; } catch(__proto__ if <x/>.__defineSetter__(\"constructor\", gc).__defineGetter__(\"__count__\", ({}).__lookupGetter__)) { return (<x><y/></x>['prop'] = eval(\" /x/ \", true)); } catch(__noSuchMethod__ if <xxx>{prop}</xxx>) { throw StopIteration; } ; (<x><y/></x> <= <>yyy</> || ({a1:1})); (__noSuchMethod__+=__noSuchMethod__ = 0/0)) __parent__ = 3;");
tryItOut("/*for..in*/M:for(const __proto__ in window) {}\nlet  if (<x/>);;\n");
tryItOut("if((__iterator__.__count__).watch(\"constructor\", ([\t<x><y/></x>].map(window)))) {const prop;; } else  if ( /x/ ) {export * }");
tryItOut("if(window) /*infloop*/L:do null while(#1# == false); else  if (<x/>) /*for..in*/for(var prop in ((eval)(this)));");
tryItOut("do {'haha'.split{} } while(((Math.sin)(let (__parent__ = -3/0) (new (new Function).apply(__proto__, function ([y]) { })), <>[ { yield window } ].filter(this)</>)) && 0);");
tryItOut("constructor = prototype;\nM:switch(((({}))())) { case 6: break; default: export *;break;  }\n");
tryItOut("if((({ constructor: __noSuchMethod__ }) = <><x><y/></x></> <<= __iterator__)) const constructor; else  if ((__parent__.valueOf(\"number\"))) {/*infloop*/for(__noSuchMethod__ = @foo; <x/>; *::*) ( /x/g );/*for..in*/for(const prop in *::*) {return;{} } }");
tryItOut("switch(__iterator__ = __iterator__) { case 5: break;  }");
tryItOut("break M;\nwith(<x><y/></x>)( /x/ )\n/*for..in*/for(const [prototype, prop] = <x/> in  /x/g ) {return; }\n");
tryItOut("/*infloop*/for(var __parent__ = (uneval(<><x><y/></x></>)); -1; new (*)(<y><z/></y>, *::*)) {let __noSuchMethod__;{} }gc()");
tryItOut("try { let(__noSuchMethod__ = (3/0 &= <><x><y/></x></> ? (constructor =  /x/g ) : <><x><y/></x></>)) { try { throw __count__; } finally { for(let y in []); }  } catch(__noSuchMethod__ if (function(){yield Math.sin;})()) { with({}) { this.zzz.zzz; }  } ");
tryItOut("let (__parent__ = ((1 for (x in []))), __noSuchMethod__) { ({}); }");
tryItOut("/*for..in*/for(let ({ prototype: prototype, prop: __count__ }) in ((function (({ constructor: ({ prototype: __count__, __proto__: __count__ }) })) { return __proto__, (yield  \"\" ) } )([11,12,13,14].map))){{{yield; }return <x><y/></x>; }\n({ __parent__: function::constructor, __noSuchMethod__: __parent__ }), prototype }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("L: { }\n");
tryItOut("with({__count__: #2=[__iterator__ = <><x><y/></x></>]})constructor =  /x/ , setter = (-0);");
tryItOut("L:with({prototype: undefined}){yield; }");
tryItOut("L: (let (constructor, __noSuchMethod__) <x/>);");
tryItOut("return;");
tryItOut("if(prop =  '' ) \f{ if (yield <x/>) {break M;yield function ([y]) { }; }} else (<x><y/></x>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (0x99.__defineSetter__(\"__iterator__\", 'haha'.split).throw(\t(constructor = <><x><y/></x></>)))((new (window)(window))) in ((<x><y/></x>)) && (uneval(([11,12,13,14].sort)))) ");
tryItOut(" const constructor;");
tryItOut("var constructor = this;");
tryItOut("if(({prototype: <x/>.throw(<y><z/></y>)})) { if (()) {export __iterator__; }} else {prop;var __count__ = this, __noSuchMethod__ =  '' ; }");
tryItOut("if(constructor.__parent__ = <y><z/></y>[ /x/g  != <><x><y/></x></>]) { if ((<><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\")).constructor) {constructor = window, prop;(__parent__).watch } else export *;}");
tryItOut("if() return window; else {/*infloop*/for(__proto__; [,,z1]; null) 033; }");
tryItOut("/*infloop*/do {with({__proto__: <y><z/></y>.__parent__})yield;return; } while(__count__ = <x><y/></x> %= \f((-1) !=  \"\" ));");
tryItOut("L:if([11,12,13,14].filter) throw null;");
tryItOut("function (prop, prop) { export *; } \n;\n const __parent__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("switch(new \t(function(q) { return q; })()) { default: /*infloop*/for((uneval(__noSuchMethod__-=constructor)); new function(q) { return q; }(); (<x/>.hasOwnProperty(\"__noSuchMethod__\"))) {yield;gc() }break;  }");
tryItOut("if(<x><y/></x\t>) { if (<x><y/></x>) {} else {var __noSuchMethod__;var constructor; }}");
tryItOut("M:if((<><><x><y/></x></> ^ <x><y/></x>\n</>)[__noSuchMethod__ = null]) { if ( /* Comment */__iterator__) const __parent__ = this;} else {const __proto__ = <><x><y/></x></>;const prop = <x><y/></x>; }");
tryItOut("if(<x><y/></x> in this) { if (this < window.prototype) ;} else { }");
tryItOut("if(3/0.propertyIsEnumerable(\"prototype\")) { if ((new ({}).__lookupGetter__())) {export __noSuchMethod__;throw true; } else {}}");
tryItOut("return (undefined['__parent__']+=(-#1=[(new ((function (__noSuchMethod__, prop) { __proto__, __count__ = window; } ).apply)())]));");
tryItOut("{;constructor const __count__; }");
tryItOut("/*for..in*/for(const __iterator__ in ((Function)(new RangeError( /x/g , <y><z/></y>))))var function::__count__ = __count__; const  /x/g ;");
tryItOut("L:if(({__count__ getter: __parent__ }).valueOf(\"number\")) { if ((({ __proto__: ({ prop: ({ constructor: __count__ }) }), constructor: ({ prop: ({ prototype: constructor, constructor: prop }) }) }) = new (({}).hasOwnProperty)())) {/*infloop*/for((this.__defineGetter__(\"__parent__\", Math.sin)) == <><x><y/></x></>; window && <><x><y/></x></>; __iterator__.isPrototypeOf(( \"\" --))) break ;var prop; }\t else return;}");
tryItOut("return  \"\" ;");
tryItOut("/*infloop*/L:do export *; while(new ({}).__lookupGetter__(window in 1e4, (({prop: __parent__}))));");
tryItOut("/*infloop*/for(let __count__ = 1e81; ((__noSuchMethod__ = <x><y/></x>)()); this.__defineSetter__(\"prototype\", gc)) with((4. <= __parent__)){return;{} }");
tryItOut("let(({ __iterator__: yield, __noSuchMethod__: __noSuchMethod__ }), __proto__ = <y><z/></y>) ((function(){prototype = __noSuchMethod__;})());");
tryItOut("/*infloop*/M:while(<x/>.*){yield; }");
tryItOut("do {return;return; } while((false ^= <y><z/></y>) && 0);");
tryItOut("/*infloop*/do {/*for..in*/L:for([prototype, __noSuchMethod__] = [[1]] in <y><z/></y>) const __iterator__ = 0/0, __noSuchMethod__ = #1#; } while(({a2:z2})[ '' ]);");
tryItOut("let (prop) { M:switch(<x><y/></x>) { default: break;  } }");
tryItOut("switch(x::__proto__.__parent__ setter= (1 for (x in []))) { default: break;  }");
tryItOut("/*for..in*/for([__parent__, __parent__] = new (eval)(\n) in ) throw <y><z/></y>;");
tryItOut("with(new /a/gi(<><x><y/></x></>, false)++)");
tryItOut("__parent__.__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/for(let constructor = *::*; ;  /x/g ) let __parent__ = window;");
tryItOut("/*infloop*/L:for(var ({ __count__: prop, __count__: ({ prop: __parent__, function::prototype: constructor }) }) = 3.141592653589793.__count__ =  '' .eval((__noSuchMethod__)); (@foo == delete false).__lookupSetter__(\"__proto__\"); [15,16,17,18].map(Math.sin, <x/>) == (constructor.prop)) export __count__;");
