tryItOut("if(constructor = [,]) return;");
tryItOut("L:if(<x><\ny/\t></x>) 'haha'.split else  if (null) export __parent__;");
tryItOut("/*infloop*/for(var ({ prop: ({ __iterator__: ({ prop: ({ prototype: ({ constructor: constructor, prop: __parent__ }) }) }), __parent__: __iterator__ }), __noSuchMethod__: [, ({ __iterator__: __iterator__, __noSuchMethod__: ({ prop: __count__ }) }), prototype, ({ constructor: [, , , , ], __count__: ({ __count__: prototype, __iterator__: prototype }) }), ] }) =  /x/g ; constructor =  /x/g .unwatch(\"prototype\") / prototype = window; \t({__noSuchMethod__: (Object(new (window)(__parent__,  \"\" )))}) / true <<= undefined for (prop in <><x><y/></x></>) if (({}))) throw false;");
tryItOut("if([11,12,13,14].some) { if (constructor = <>\n<x><y/></x></>[new ([15,16,17,18].map([1,2,3,4].map, [,,] *= <y><z/></y>))([*::*].some('haha'.split))]) /*for..in*/for(const [prop, __iterator__] = 1e4 ^= this in prototype) {const __iterator__, __count__;export __proto__; }} else {M:switch(<x><y/></x>) { default: return <x><y/></x>;break;  }__iterator__, __iterator__; }");
tryItOut("export __proto__;");
tryItOut("/*infloop*/M:for(__iterator__; !prototype = prototype; (() = prototype.__defineGetter__(\"{if(null) {export constructor; } else {__iterator__ = [1,,], __count__ = []; { return <><x><y/></x></> }  } }function (prototype, __noSuchMethod__) { yield (--yield.( \\\"\\\" )) } \", (( /x/ ).call).call))) try {  } catch(constructor if yield <><x><y/\n></x></>) { gc() } catch(__parent__ if ([1,2,3,4].slice)(@foo)) { ; } ");
tryItOut("const __iterator__, prototype = ({a1:1}); const __parent__;");
tryItOut("/*infloop*/for(Exception(( /x/ ).watch()); this >>> <><x><y/></x></>.__count__ || window >= 0x99; ({}).__lookupGetter__) {{throw  /x/g /*\n*/;window\n } }");
tryItOut("let(prototype = (#1=[#1#] for each (__parent__ in *))) { let(constructor = window, __proto__ = <x><y/></x>) ((function(){return;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (yield undefined)) {if(__count__) {var __parent__; } else  if (null) {continue ;let __proto__ = window; } else (<x><y/></x>);L: {{}let __parent__ = 0.1, __iterator__ = .2; } }");
tryItOut("for(let y in []);");
tryItOut("with(this.__defineGetter__(\"__iterator__\", function  function::__noSuchMethod__ (__parent__) { var __proto__, __parent__; } )){throw __parent__;(<x><y/></x>); }");
tryItOut("/*for..in*/for(let __parent__ in (((new Function(\"yield;\")))(#1=[#1#]))){(<x><y/></x>);const __count__ = *::*, __parent__ = false; }");
tryItOut("{<><x><y/></x></>; }");
tryItOut("\n__count__.__noSuchMethod__\n");
tryItOut("L: M:if(<><x><y/></x></>) { if (<><x><y/></x></\t>.yoyo(<><x><y/></x></>)) (this); else yield *::*;}");
tryItOut("L: {yield; }");
tryItOut("L: return <><x><y/><\t/x></>;");
tryItOut("while((((<y><z/></y>))) && 0)const __iterator__;");
tryItOut("{yield;break ; }");
tryItOut("var __noSuchMethod__ = prototype, prop = [z1];\nreturn <x><y/></x>;\n\n");
tryItOut("/*for..in*/M:for(var (<y><z/></y>)((<><x><y/></x></>.eval(true))) in 0x99) {;while((<x><y/></x>) && 0)return window; }\n/*for..in*/for(1e81 in yield window ?  /* Comment */this : __iterator__) {/*for..in*/for(var ((<><x><y/></x></>)(<x><y/></x>)) in ((function () { ; } )(#1=[#1#] ^= <><x><y/></x></>))) }\n");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) yield (-1);");
tryItOut("{; }");
tryItOut("yield;\n/*infloop*/do {let <x><y/></x> = @foo; } while((<y><z/></y> :: prop));\n");
tryItOut("([[]])\nexport prototype;\nlet __count__ = <><x><y/></x></>, __count__\nreturn;\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ = constructor = this.__lookupGetter__(\"__parent__\") !== function(y) { yield y; const __noSuchMethod__ = <x/>;; yield y; } in [,].__lookupGetter__(\"prop\")) {yield window;<x><y/></x> }");
tryItOut("/*infloop*/for(const [__count__, __iterator__, prop, constructor, __parent__] = (); undefined.hasOwnProperty(\"prop\"); 1.3) {}/*infloop*/while(<x><y/></x>)let prototype, __iterator__//h\n;");
tryItOut("{throw 5.0000000000000000000000;(*); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in yield false) {(new Function(\"{}\")) }");
tryItOut("{} const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in  '' ) yield;");
tryItOut("L: {;export __proto__; }");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("/*infloop*/M:while(<x/>.throw(__proto__))[,];");
tryItOut("switch(yield *::* << *::*.__defineSetter__(\"true\", (prop).__defineSetter__)) { default: throw StopIteration; }");
tryItOut("if(prototype = <x/>) { if ((({ : constructor, __parent__: __iterator__ }) = 'fafafa'.replace(/a/g, Function))) {0x99;(window); } else return;}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in (__parent__.throw(null))) if(\nconstructor.prop) /*infloop*/L:for(let prop; var __parent__ = this, prototype;; __iterator__ = <x><y/></x>\r) let prototype;\n");
tryItOut("let (__proto__ = (-@foo) < prop(), __proto__ = __count__) { /*infloop*/for(__count__[null]; (this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)); (4.)()) continue ; }");
tryItOut("yield [z1,,];");
tryItOut("try { this.zzz.zzz; } \tcatch(prop) { continue ; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in window) (*::*);");
tryItOut("if(( = this) === [11,12,13,14].some.yoyo(get.(__parent__.__count__ = true.throw(*::*)))) ; else  if ('fafafa'.replace(/a/g, gc)) \freturn <><x><y/></x></>;");
tryItOut("M:if(function(id) { return id }) {{} } else  if ( ''  === (let (case 1: yield null;break; break; evalbreak; break;  = <x><y/></x>) #1#)) {gc()(<x><y/></x>); } else {let __parent__ = <x><y/></x>, __count__ = __parent__; }");
tryItOut("let (__proto__ = ((/a/gi)(([15,16,17,18].map(window, *::*)))), __count__) { if(<x/>) throw <x/>; else  if (<y><z/></y>) {(window); } }\n");
tryItOut("if(RangeError()) { if (this.zzz.zzz) do {undefined.__count__ = __proto__ } while((<><x><y//x></>) && 0); else {let prototype = [[]];throw __proto__; }}");
tryItOut("/*infloop*/M:for(let __proto__ = Exception(<x><y/></x>, <x><y/></x>); __parent__.__parent__; this.isPrototypeOf(<x><y/></x>)) return;");
tryItOut("with(-3/0)gc()");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*infloop*/while(([] << false))( \"\" ); const __parent__;");
tryItOut("if(*) continue M; else  if ((yield  /x/g )) {gc()return __noSuchMethod__; } else export *\nif(*::*) { if ( '' ) { } else ;}");
tryItOut("/*for..in*/for(var [__count__, prop] = true %= prop in new function  constructor () { yield 5.0000000000000000000000 } \f(3/0)) {gc()<x><y/></x>; }");
tryItOut("let(__count__) { ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in (__iterator__(window).__proto__)) {export *; }");
tryItOut("do /*infloop*/while(export *)throw  \"\" ; while((((uneval(*::*)))) && 0);");
tryItOut("break M;");
tryItOut("for(let y in [5,6,7,8]) return undefined;");
tryItOut("if( /* Comment */[] + * ?  /x/  : prop) {return  /x/ ;continue L; } else  if (({ prop: __proto__ }).({var prop;continue L; })) {export *;export *; }\n");
tryItOut("/*infloop*/L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <y><z/></y>) {} } while(undefined);");
tryItOut("{return;; }");
tryItOut("if(__proto__.__noSuchMethod__) { if (__proto__.eval(constructor)) export *; else {var __proto__, __noSuchMethod__ = @foo;{} }}");
tryItOut("M:if(this) { if (<x><y/></x>) __count__} else {export *; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((1 for (x in [])))(({__parent__: 0.1 }))))export *;");
tryItOut("M:if(true >> window) {yield;(1 for (x in [])) } else {break ; \"\" ; }");
tryItOut("if(@foo.__defineSetter__(\"prototype\", [1,2,3,4].map)) (<x/>); else  if (this) {function  __iterator__ () { return {} }  } else {return this;var constructor = <y><z/></y>, __iterator__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(var ({ prop: __parent__ }) = <><x><y/></x></> | 3; <><bbb xmlns=\" /x/ \"><!--yy--></bbb></>; undefined !== -0) break M;");
tryItOut("if(new <x><y/></x>()) { if (__noSuchMethod__) /a/gi else {let getter, x::constructor = 1.3;{} }}");
tryItOut("if(prototype.prototype getter= @foo) let __iterator__; else let constructor = @foo, __proto__ = *;");
tryItOut("with({}) export *;");
tryItOut("M:if((<x><y/></x>.valueOf(\"number\") ? [1] : ({__noSuchMethod__: <x><y/></x> }))) {yield;({}).hasOwnProperty } else  if (new RegExp(((null for (__count__ in <x/>))) ? .2 >>= <x><y/></x> : (__count__)[<><x><y/></x></>])) {L: {<x><y/></x>{} }return; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let ({ __iterator__: ({ prototype: ({ constructor: __noSuchMethod__, __count__: __count__ }), prop: __parent__ }), __proto__: ({ __proto__: ({ __count__: ({ constructor: __noSuchMethod__ }) }) }) }) = <x><y/></x>.(window); ((@foo).watch)(); \n0x99 >>= prototype) {(<y><z/></y>); }");
tryItOut("/*infloop*/M:for(var __parent__ = <x><y/></x>; 5.0000000000000000000000; <x/>) {const __iterator__ = *::*, __parent__ =  '' ; }");
tryItOut("if(this\t.__defineSetter__(\"__noSuchMethod__\", true)) { if (<x><y/>\t</x>.x::__count__ for each (__noSuchMethod__ in [,]) for each (prototype in )) {/*infloop*/L:for( '' ; 0x99; <><x><y/></x></>) {let __proto__, prototype = (function ([y]) { })(); } } else {(*::*); }}");
tryItOut("");
tryItOut("constructor = __count__;");
tryItOut("export __proto__; const __parent__;");
tryItOut("/*infloop*/while(gc()){ }");
tryItOut("/*for..in*/for(let constructor in ((@foo +=  /x/g )(prototype: (({__iterator__ setter: (Math.sin).apply, __proto__: 3.141592653589793 })).yoyo(true).__lookupSetter__(\"constructor\"))))<x><y/></x>");
tryItOut("if(this.isPrototypeOf(window)) with(<y><z/></y>){{} } else {const __noSuchMethod__ = __proto__, prop; }");
tryItOut("if((prototype.__noSuchMethod__ getter= gc >>> ((Math.sin).call(this.zzz.zzz, ((new Function(\"var prototype = <><x><y/></x></>;\"))))[this.zzz.zzz]))) {with({}) export prototype;M:while(((window != [z1,,])) && 0) } else  if ((([1,2,3,4].map).apply).call(new true(), this.zzz.zzz).__defineSetter__(\"prop\", (new Function(\"/*for..in*/for(var __proto__ = String() in prop) 'haha'.split\")))) do {; } while(( \"\" .*) && 0);");
tryItOut("/*infloop*/while(__proto__ = <y><z/></y>)/*for..in*/\nfor(let __count__ in ((*::*)(false)))gc()");
tryItOut("throw true;");
tryItOut("__proto__ = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in <x><y/></x>) {export *; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("let(__iterator__ = window, prototype) { return;");
tryItOut("switch(({ set constructor prototype () '' , __iterator__ getter: Math.sin })) { default: gc() }");
tryItOut("with({__proto__: (null( '' , *))}){if(function ([y]) { }) { if (<><x><y/></x></>) ; else yield;}break L; }\nconst  for each (__iterator__ in (\n1e+81)[true.__iterator__]) for (<xxx {__count__}={((#2=__parent__) |= <x><y/></x> @ #3={a:#3#})} /> in *::*) for each (__iterator__ in null) for each (__count__ in  /x/g ) if (1e-81);\n");
tryItOut("if(([z1,,].*)) {{return;return *::*; }M:switch(prop =  \"\" ) { case 6:  } }");
tryItOut("(window);");
tryItOut(";");
tryItOut("L: gc()");
tryItOut("/*infloop*/do {while((this) && 0){return *::*;return -0; } } while(new ([,,])(({a2:z2}), __iterator__));");
tryItOut("case (({ __count__: prototype }) =  /* Comment */ /x/g ): break; default: break;  const __count__;");
tryItOut("while((__iterator__((new ([1,2,3,4].slice)(__noSuchMethod__ = <x/>//h\n)))) && 0){gc() }");
tryItOut("do {export __noSuchMethod__; } while((( /x/ .__defineGetter__(\"constructor\",  '' ))) && 0);");
tryItOut("L: {throw #1=[#1#];yield ({a1:1}); }");
tryItOut("/*infloop*/do {L:if() {\fthrow this;<x><y/></x>; } else ; } while((prototype|=window.constructor =  \"\"  === prototype));");
tryItOut("if((this.__defineGetter__(\"__count__\", ({}).hasOwnProperty))) continue ; else  if ([z1,,])  else <><x><y/></x></>;");
tryItOut("L:if(function ([y]) { }) {{} }");
tryItOut("with({__proto__: function(id) { return id }.@*}){gc()export *; }");
tryItOut("/*infloop*/do {} while(undefined for each (__proto__ in __count__));");
tryItOut("/*for..in*/for(var prototype = <x><y/></x> in <><x><y/></x></>) __noSuchMethod__; const prop;");
tryItOut("/*infloop*/M:for(const __count__ = {}.yoyo(true); <x><y/></x> ? prop : .2; *) {/*infloop*/do yield; while(*::*);\n( '' );\n(false);\r }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in \n<x/>.@foo) {/*for..in*/M:for(const __proto__ = __noSuchMethod__+=<x/> in window) throw <><x><y/></x></>; }");
tryItOut("gc()\n\n");
tryItOut("__iterator__ = __iterator__;");
tryItOut("var __noSuchMethod__;");
tryItOut("constructor.__noSuchMethod__\nthrow <x><y/></x>;return;");
tryItOut("/*infloop*/for(let prototype; (({__iterator__: false})); (*::*)[<y><z/></y>]) yield;");
tryItOut("let(constructor, prototype = 033) { with({}) { var constructor = [[1]]; } ");
tryItOut("const function::constructor = *::*; '' .propertyIsEnumerable(\"__parent__\");");
tryItOut("{gc(); }");
tryItOut("{L:if(window) { if ((({ set prop(constructor) { yield this }  }))) /*infloop*/M:for(var constructor = this;  /x/g ; function(id) { return id }) export *;} else let __parent__; }");
tryItOut("return null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var false.valueOf(\"number\").prototype in ( /x/ .__lookupSetter__(\"__count__\"))) var prototype\n");
tryItOut("if(<xxx>{__proto__}</xxx>) return null; else {/a/gigc() }");
tryItOut("/*infloop*/for(var __count__ = ~<x/> .@ __count__; this.__defineSetter__(\"__noSuchMethod__\", (prop: <><x><y/></x></>).apply).__defineSetter__(\"prop\", ( /x/g ).__defineSetter__); this ? <><x><y/></x></>.__noSuchMethod__ : (__noSuchMethod__ = window)) return;");
tryItOut("{M:if(this) {4.;prop; } }");
tryItOut("return;");
tryItOut("if(((this.__defineSetter__(\"__parent__\", new Function)).__defineGetter__(\"__count__\", 'haha'.split))) { if (<><x><y/></x></>.eval(<x><y/></x>) === <x><y/></x> == <x/>) {if(false /= true) { if ((this\t.__defineGetter__(\"prototype\", Function))) {gc()[1,2,3,4].map }} else export __parent__;(new Function(\"{let prop = __proto__, prop;export *; }\")) } else {/*for..in*/for(let __count__ in *::*) export __proto__; }}");
tryItOut("if((({__parent__: __parent__.__proto__ = *::*}))) yield <y><z/></y>;");
tryItOut("L: /*infloop*/for((<><x><y/></x></>)[this]; <x/> :: <x><y/></x>; new *(function(id) { return id })) gc()");
tryItOut("L:if( /x/ ) {yield <x><y/></x>; } else {/*for..in*/M:for(let ({ prop: __noSuchMethod__, __count__: ({ __iterator__: ({ __iterator__: ({ *: prototype, __iterator__: get }), __iterator__: __proto__ }) }) }) = \n( /x/ .hasOwnProperty(\"__parent__\")) in <zzz><x><y/></x></zzz>) return this; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for(constructor = *::*; <><x><y/></x></>; 1e4) 'haha'.split/*infloop*/L:for(([1,2,3,4].map); constructor.__count__ setter= function (__count__, __iterator__) { yield __parent__; } ; (this.zzz.zzz)) case *::*: break; ");
tryItOut("return  \"\" \n{}");
tryItOut("do continue M while(((function ([y]) { })()) && 0);");
tryItOut("prop = __count__;");
tryItOut("if(( '' [#1=[#1#]]).__defineGetter__(\"prop\", Math.sin))  else __proto__;");
tryItOut("prop = prop;");
tryItOut("while((({ constructor: constructor }) = ({ __count__: prototype, constructor: ({ constructor: prop, __parent__: prop }) })) && 0)break L;");
tryItOut("var __count__;(3); const __noSuchMethod__;");
tryItOut("\n\n");
tryItOut("__parent__ = __iterator__;");
tryItOut("/*for..in*/for(const __proto__ in (__parent__ = [z1,,] >>>=arguments)) {let ({ prototype: function::prop }), x::__parent__ = @foo; }");
tryItOut("if((let ((-1)) <x><y/></x>))  else ;");
tryItOut("L:do if((new Object(1e-81 for (__proto__ in <><x><y/></x></>)))) { if ([].eval(@foo) >>> this.zzz.zzz) {if(eval(<x><y/></x>)) { if (prototype = <><x><y/></x></>) let __noSuchMethod__ = <x><y/></x>;} else {var ];(*::*); } } else {export __noSuchMethod__; }} while((window) && 0);");
tryItOut("/*infloop*/M:do __proto__; while(this.__defineSetter__(\"__proto__\", <><x><y/></x></>));");
tryItOut("return new (((function(q) { return q; }).call).apply)(); const prop;");
tryItOut("while((* -= <><x><y/></x></>) && 0)({}).hasOwnProperty");
tryItOut("/*infloop*/do {continue L; } while(<><x><y/></x></>);");
tryItOut("let (prototype = <x><y/></x>) { Math.sin } const __iterator__;");
tryItOut("const ({ prototype: prototype, prototype: __proto__ }) = <x><y/></x>.(__parent__)\n");
tryItOut("/*infloop*/while(((\nString()) % __noSuchMethod__.__parent__ = __iterator__ = __proto__ >= * .@x:: 1e-81\f)){/*for..in*/for(var [__noSuchMethod__, __parent__] = <><x><y/></x></> in try { (\r<x><y/></x>); } catch(__proto__ if (function(){var get =  \"\" ;})()) { return [[]]; } ) {const __count__; } }");
tryItOut("L: {do return; while((<x><y/></x>) && 0); }");
tryItOut("M:if(<><x><y/></x></>) { if (this) {yield <><x><y/></x></>;const prop = *::*; } else {<x><y/></x>;return ({a2:z2}); }}\nconst prototype, __proto__;");
tryItOut("if(<x/>) {export *;yield <><x><y/></x></>; } const prop;");
tryItOut("/*infloop*/for(const [({ __count__: ({ __parent__: __parent__ }) }), __count__, ({ prop: ({ __count__: ({ __proto__: ({ __iterator__: __iterator__ }), __proto__: ({ __proto__: {return 3/0; } }) }) }), prototype: ({ prop: __iterator__, __noSuchMethod__: [] }) }), ] = (<y><z/></y>.__proto__ = <x/>.__lookupSetter__(\"prop\").isPrototypeOf((new RangeError(<><x><y/></x></>)))); \fthis.__defineGetter__(\"prop\", eval)[true]; new (new Function(\"{yield; }\"))(function(id) { return id }, null.* = __count__ = prototype)) {/*infloop*/for(var constructor; prototype = new Date()((((([1,2,3,4].map).call(*, [z1])))( /x/ )), prototype = __parent__ getter: <x><y/></x>); (this.zzz.zzz)) {}\n }");
tryItOut("{export prop; }");
tryItOut("with({}) { throw prototype; } ");
tryItOut("/*infloop*/M:for([({ constructor: ({ prototype: x::prop, __proto__: [, ({ __parent__: prototype, prop: \f__parent__ }), ({ __parent__: __count__, __noSuchMethod__: __proto__ }), , ] }), __parent__: ({ prop: [[, __iterator__, , ], , , ] }) }), , , , prototype] = [__parent__ for (__noSuchMethod__ in null)].unwatch(\"__noSuchMethod__\"); this.__defineSetter__(\"prop\", ('haha'.split).call); ++__iterator__ =  '' ) continue ;");
tryItOut("/*infloop*/do {break ; } while(({ __count__: constructor, __parent__: constructor }) = (<y><z/></y>.prototype));");
tryItOut("{}");
tryItOut("/*for..in*/L:for(const __count__ = prototype(<x><y/></x>, <x><y/></x>) in (gc)(1e4, false)) {var prop;export __count__; }\n");
tryItOut("/*infloop*/L:for(__count__.propertyIsEnumerable(\"__proto__\"); (Function(1.2e3 >= #1=[#1#], (<><x><y/></x></>)())); \reval(\"export *;\", <><x><y/></x></>.unwatch(\"__count__\"))) {/*infloop*/for(let __count__ = undefined; this; @foo) prototype = [1];return; }");
tryItOut("if(this) {export __parent__; } else  if (<><><!--yy--></></>.__lookupGetter__(\"__iterator__\")) {var constructor; } else /*infloop*/M:for(let __iterator__; (prototype = <><x><y/></x></>); ((arguments)())) /*infloop*/L:for(let __noSuchMethod__ = ({}); <><x><y/></x></>; <><x><y/></x></>) return this;");
tryItOut("with(({__noSuchMethod__ setter: Function })){if(<><x><y/></x></>.*[(@foo += true)]) {__iterator__ = __noSuchMethod__;let constructor, __parent__; } }");
tryItOut("return *::* /= <><x><y/></x></>;");
tryItOut("{var prop, __iterator__ = 0.1;\nreturn;\n }");
tryItOut("for(let y in []);");
tryItOut("{}");
tryItOut("if((p={}, (p.z = ({a1:1}).hasOwnProperty(\"__iterator__\"))())) { if (({prop setter: function ()(__proto__ = 0x99), prototype.__noSuchMethod__ })) {yield <x><y/></x>; }} else {if(__noSuchMethod__)  { yield __proto__ = -1.watch(\"__proto__\", __count__) }  }\t");
tryItOut("return");
tryItOut(";\nthrow <y><z/></y>;\n");
tryItOut("yield [(<><x><y/></x></> /= <x><y/></x> -=  /x/g )].map((1 for (x in [])));");
tryItOut("{with(__iterator__)\texport prop;gc() }");
tryItOut("{yield; }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/L:do {return; } while((<y><z/></y>) && 0);");
tryItOut("/*for..in*/for(let __proto__ = [11,12,13,14].filter in Math.sin) if(false) {yield; } else export __noSuchMethod__;");
tryItOut("switch((({ __iterator__: __count__, prototype: __noSuchMethod__ }) = (prop.prop = *))) { case (.@*): break; default: while((<x><y/></x>) && 0){gc() }break; case 6: {/*for..in*/M:for(__parent__ in ((@foo)(true)));return; }break; case 8: break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (<x/>)(*) in <x/>) {<x/>; /x/g ; }");
tryItOut("/*for..in*/for(constructor = delete *::* in __noSuchMethod__ = prototype != (*::*.watch(\"prototype\", [1,2,3,4].map))) {let __parent__ = <y><z/></y>;/*infloop*/for(var ({ prototype: prop }) = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (__iterator__ for each (__proto__ in 0/0))\n; <x><y/></x>.unwatch(\"__count__\")) {throw *::*;(true); } }");
tryItOut("L:if(__parent__ = ('fafafa'.replace(/a/g, (new Function(\"__noSuchMethod__;\"))))) {yield false;(<><x><y/></x></>); } else continue L;");
tryItOut("if(<x><y/></x>) { if (window) {__proto__, __iterator__ = <><x><y/></x></>;yield; } else }");
tryItOut("if(eval(\"const prop = __noSuchMethod__;\", )) {new gc(*::**::* .__lookupSetter__(\"__noSuchMethod__\"), true)yield __iterator__; }");
tryItOut("{} const prop;");
tryItOut("return;");
tryItOut("{({}).__lookupGetter__ }");
tryItOut("L:with({__count__: (<>(/<x><y/></x></>).call(__count__.__iterator__, (delete 1e81))}){ /x/g ;throw  \"\" ; }");
tryItOut("{/*for..in*/for(const __noSuchMethod__ in @foo) {<><x><y/></x></>; }\t }");
tryItOut("{{} }");
tryItOut("switch((__iterator__.__count__)) { default: break;  }");
tryItOut("/*for..in*/for(__count__ in ((<x/>)(null))){false }");
tryItOut("break L;");
tryItOut("if(constructor) { if ((constructor)|=constructor.__noSuchMethod__ = (<><x><y/></x></> <= <y><z/></y>)) {(function ([y]) { });yield null; }} else {let <><x><y/></x></> = __iterator__; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("switch(null) { default: L:if(<><x><y/></x></> :: __iterator__ ^ this) break ; else  if ( '' .eval(arguments) !== (this <= <><x><y/></x></>)) {return <x><y/></x>;var __iterator__ = <y><z/></y>, __iterator__ = prop; }break; case 9: export *;break;  } const __iterator__;");
tryItOut("(__iterator__);");
tryItOut("do var __proto__ = <x><y/></x>, __iterator__; while((break M;) && 0);");
tryItOut("do {/a/gi } while(((this.__defineSetter__(\"__parent__\", new Function)) @ ( /* Comment */new (prop)())) && 0);");
tryItOut("/*infloop*/for((this.zzz.zzz); <x/>; delete <x><y/></x>) /*infloop*/for(__parent__ = 1e+81; __proto__; <x><y/>\f</x>) {__parent__ = <x><y/></x>;var __iterator__, get; }");
tryItOut("{return 0x99;; }");
tryItOut("/*infloop*/do __noSuchMethod__, setter; while(prototype);");
