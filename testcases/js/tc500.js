tryItOut("/*for..in*/for(var [__parent__, prop] = ((p={}, (p.z = (<x><y/></x> || __proto__))())) in (prop , this .. ({}))) /*infloop*/for(var __count__;  == (function (__proto__, prop) { ; } ).call(<x/>, ); [,]) yield <x><y/></x>;");
tryItOut("let (prototype) {  }\n__noSuchMethod__ = [z1,,];\n/*infloop*/for(function ([y]) { } / <y><z/></y>; (<x/>.__iterator__); *::* / <><x><y/></x></>) throw null;\n");
tryItOut("if(0.1.__defineGetter__(\"__count__\", gc)) { if (4.) return <x><y/></x>;} else {return; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/\tfor(var __iterator__ in (({}).__lookupGetter__)(default: <x><y/></x>break; )) {while((this.zzz.zzz) && 0){/*for..in*/for(let (this += (-1)) = (__iterator__ %= window) in window) {var __parent__ = <x><y/></x>;__proto__; } }/*for..in*/for(let __parent__ = [15,16,17,18].map((function(q) { return q; }).apply, this.zzz.zzz) in <><x><y/></x></>) -3/0; }");
tryItOut("let (({ prop: ({ __iterator__: function::constructor }), prop: ({ constructor: __count__ }) }), let) { __parent__ = true; }");
tryItOut("if((((__count__)-=(*::*.valueOf(\"number\")))(((1.3).__defineSetter__)((<><x><y/></x></> @ <><x><y/></x></>), window))%=__parent__.__defineSetter__(\"constructor\",  { yield *::* } ).__proto__)) L:while((0/0 << <x><y/></x>) && 0)var prop, prototype = window; else  if ( '' .watch(\"prototype\", (function(q) { return q; }).call).valueOf(\"number\")) return <><x><y/></x></>; else L:if((( \"\" throw default: gc()break; ;))) var __parent__; else  if (((p={}, (p.z = <><x><y/></x></>)()))) ([z1]);");
tryItOut("for(let y in []);");
tryItOut("L:  { yield <y><z/></y>\t } ");
tryItOut("return (new Function(({__iterator__: -1 }), <><x><y/></x></>))\n");
tryItOut("gc()");
tryItOut("M:with({__iterator__: (true += prototype)}){while((<><></></>) && 0){gc()/*infloop*/while(var __proto__ = @foo, __parent__;){return;gc() } }/*infloop*/for(const constructor; Math.pow(__noSuchMethod__(@foo)); ([*::* for (prototype in <x/>)].yoyo(window(<x><y/></x>, __iterator__)))) {throw <><x><y/></x></>;__proto__ = <y><z/></y>, prototype = <y><z/></y>; } }");
tryItOut("/*infloop*/for(null; <><x><y/></x></\t>; [,]) {yield = <x><y/></x>;throw constructor; }");
tryItOut("let (constructor = .2.__defineSetter__(\"__proto__\", (new Function(\"Math.pow\"))) <= (__noSuchMethod__ = __parent__), constructor = ((/a/gi).call(null, <><x><y/></x></>))) { {const __proto__ =  \"\" , prototype = false;let __proto__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <y><z/></y>) {export *; }");
tryItOut("with(1.2e3){const __iterator__, __count__ = <y><z/></y>; }");
tryItOut("L:switch(++__parent__ = false) { default: L:while((null) && 0){return <><x><y/></x></>;; }/*infloop*/for(constructor = __noSuchMethod__; __count__ =  \"\" ; --__proto__ = __parent__) \fbreak ;break;  }");
tryItOut("if(*) {continue ; } else  if (*::*) {throw 5.0000000000000000000000;(function ([y]) { }).apply } else {}\nvar __noSuchMethod__ = prototype;\n");
tryItOut("<><x><y/></x></>;");
tryItOut("if(prototype.constructor = this.__defineSetter__(\"__iterator__\", (function ([y]) { }).__defineSetter__).__noSuchMethod__ = ((<y><z/></y>).apply).call(<y><z/></y>, 1.3)) {L:if((this << <y><z/></y>)) {switch(__proto__) { case 8: var __parent__ = [[]], __noSuchMethod__ = <><x><y/></x></>;break;  } } else { }if(true) { if ( \"\" (<><x><\ty/></x></>, this)) {; } else (<><x><y/></x></>);} }");
tryItOut("while((({__proto__: #3={a:#3#}})) && 0)export function::__parent__;");
tryItOut("");
tryItOut("{continue M; }");
tryItOut("(function ([y]) { })();");
tryItOut("if(constructor = window) {with({__proto__:  /x/g })export *;function (__parent__) { yield; }  } else  if (((<><x><y/></x></>.propertyIsEnumerable(\"__count__\")).hasOwnProperty(\"__noSuchMethod__\"))) {let prototype, __parent__ = function(id) { return id };export __count__; } else {throw <x><y/></x>; }");
tryItOut("export *;\n{export __parent__;yield; }\n");
tryItOut("/*for..in*/for(let prototype = <x/> in 3.141592653589793) ([,]);");
tryItOut("M:with({prototype: __iterator__}){do return; while((<x/>) && 0); }");
tryItOut("{/*for..in*/M:for(var __count__ in window.propertyIsEnumerable(\"__count__\")) {;{} } }");
tryItOut("try { return; } catch(__iterator__ if (function(){/*for..in*/for(var [__count__, constructor] = 0x99.isPrototypeOf(*::*) in -1.watch(\"__parent__\", ({}).__lookupGetter__)) {export __iterator__; const prop;function(y) { yield y; 'haha'.split; yield y; } }})()) { let(prototype, prototype) ((function(){throw  for (prop.watch(\"constructor\", (new Function(\"export *;\")))['prototype'] in this) for (__iterator__ in this);})()); } finally { try { throw __parent__; } catch(__proto__ if (function(){return;})()) { with({}) { return; }  } catch(__iterator__) { let(constructor) { for(let y in []); } finally { this.zzz.zzz; }  } ");
tryItOut("M:if(Array(__parent__ = this) ? (eval(\"[,,z1];\", eval(\".2\",  /x/g ))) :  /x/g ) /*for..in*/for((this)(__parent__) in arguments) yield; else let constructor = function(id) { return id }, __parent__;");
tryItOut("let(__proto__ = ([, __proto__, ] = __parent__) for (prototype in *::*) for (constructor in [1]) if (*)) { this.zzz.zzz;");
tryItOut("prototype\nL:if(([[1]] == <><x><y/></x></>)) if(-3/0) { if (constructor) {return; }} else __noSuchMethod__, prototype = arguments; else let __proto__;");
tryItOut("var constructor, prop = <y><z/></y>;");
tryItOut("throw prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) {yield <x/>;break L;\r }");
tryItOut("/*infloop*/for(eval(\"( '' );\", *::*) ? __iterator__.__parent__ =  /x/  : ( '' .valueOf(\"number\")); (Number(<x/>, *::*)); \n[[]]) yield -0;return this;/*infloop*/for(let __proto__ = 1e81; prop; <y><z/></y>) {export __count__;return; }");
tryItOut("/*infloop*/for((eval(\"break M;\", function(y) { yield y;  \"\" ; yield y; })); ; constructor = __parent__--.valueOf(\"number\")) {if(prototype) return; else {export *;throw <y><z/></y>; } }");
tryItOut("/*infloop*/do  while(window);");
tryItOut("/*for..in*/for(var constructor = (__proto__ = <><x><y/></x></>) >>> ( /* Comment */<x><y/></x>) in (.2 for (__noSuchMethod__ in  \"\" ))) let constructor,  { yield [] }  = *;");
tryItOut("if([z1,,] in  \"\" ) __iterator__ else export __noSuchMethod__;");
tryItOut("/*infloop*/for(var prop = new (eval(\"<x/>\", __count__))((this.__defineGetter__(\"constructor\", Math.pow)), __iterator__); new Function(constructor); ((prototype !== window) for each (__iterator__ in #3={a:#3#}))) {__proto__;\nlet prototype;\n }");
tryItOut("L:switch(eval(\"export *;\", false) for (__count__(@foo) in <x><y/></x>) for (__parent__ in <><x><y/></x></>)) { default:  }");
tryItOut("L:if(eval(\"export *;\", <x><y/></x>).__parent__) { if (((__proto__))) {break M; } else /*infloop*/for(var function::__parent__ = null; <x><y/></x>;  /x/g ) {evalconst __parent__, __parent__ = window; }}");
tryItOut("throw this;");
tryItOut("{do var __iterator__, __iterator__ =  \"\" ; while((<><x><y/></x></>) && 0);M:while((<>*</>) && 0){export *;(<x/>); } }");
tryItOut("/*infloop*/for(const [, [, , ({ prototype: prototype, prototype: ({ __proto__: prototype, __noSuchMethod__: __count__ }) })], __parent__] = function ()#3={a:#3#} <<= (3).__defineSetter__.@*; (</*\n*/x><y/></x>)[this].__defineGetter__(\"prop\", true); ([__parent__.__iterator__ = *].some(function  constructor () { ; } ))[[] =  /x/g ].isPrototypeOf((<!--yy-->)(this.__defineSetter__(\"__count__\", constructor)))) return true;");
tryItOut("for(let y in []);");
tryItOut("yield __proto__;/*for..in*/for(const prop in <><x><y/></x></>) {break ;yield; }");
tryItOut("/*infloop*/while(typeof (prop.__defineSetter__(\"prototype\", [1,,]))){return;export *; }");
tryItOut("/*infloop*/for( /x/ .__lookupGetter__(\"__proto__\");  '' .unwatch(\"__iterator__\"); __noSuchMethod__) export *;");
tryItOut("with({prop: new (__proto__ = (#3={a:#3#}++))((eval(\"Math.pow\", ({prop: __proto__.@*}))))})return  '' .throw( /x/ )\f;");
tryItOut("while((({})) && 0)({}).hasOwnProperty");
tryItOut("if((yield __parent__ = -0)) return; else ;");
tryItOut("(<><x><y/></x></>);let __count__, constructor = undefined;");
tryItOut("L:if(1.2e3) {var constructor = __iterator__, let = <><x><y/></x></>;(<><x><y/></x></>); } else  if (constructor.__count__ / [z1]) {export __parent__;\nexport *;\n }");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = true\n ? (({a1:1}).__lookupSetter__(\"__iterator__\")) : (<x><y/></x>.(<x><y/></x>)) in (#0=[undefined])) var __iterator__ = __parent__, __parent__;");
tryItOut("new Function\nexport \nget;\n");
tryItOut("try { try { continue ; } catch(__count__) { gc() }  } finally { return; } ");
tryItOut("let ([constructor]) { {<><x><y/></x></>\nexport prop; } }");
tryItOut("/*for..in*/for(let __parent__ in *) export prototype;");
tryItOut("M:do {<><x><y/></x></>; } while((-<><x><y/></x></>) && 0);");
tryItOut("throw __iterator__;");
tryItOut("try { throw __iterator__; } catch(__iterator__) { for(let y in [5,6,7,8]) this.zzz.zzz; } finally { for(let y in [5,6,7,8]) return; } ");
tryItOut("new ((({ set prop prop () { {} } , __iterator__ getter: gc })))(<x/> ? 1.2e3 : <x/>, <><x><y/></x></>) !== (let (constructor = (return)) (__parent__ = __proto__++))");
tryItOut("/*infloop*/do {break M;yield  /x/ ;yield; } while(((true)()));");
tryItOut("with(({__count__: (yield -1.unwatch(\"__count__\"))}))with({__iterator__: <><><x><y/></x></> <= <><x><y/></x></></>})/*for..in*/L:for(let __iterator__ in <><x><y/></x></>) {__iterator__, constructor;let __proto__ = <x><y/></x>; }");
tryItOut("continue ;");
tryItOut("L:if((eval(\";\", <y><z/></y>))) { if (<><zzz>@foo</zzz></>) /*infloop*/for(__iterator__;  /x/g ; [z1,,]) } else {L:if(prop) yield <><x><y/></x></>; else {*;__noSuchMethod__ = constructor; } }");
tryItOut("if(__noSuchMethod__ = <x><y/></x>) { if ((<x><y/></x>.__defineSetter__(\"__proto__\", <x><y/></x>))) let constructor = this; else return undefined;}");
tryItOut("if( /x/g .__iterator__.@*) const __proto__ = this; else  if (({ prop: __proto__ }) = ( ''  += *)) {{}prototype:  /x/  }");
tryItOut("/*infloop*/while([,,z1]);\nreturn [11,12,13,14].filter;\n");
tryItOut("{yield <><x><y/></x></>;export *; }");
tryItOut("throw  '' ; const prop\nlet (__noSuchMethod__ = __parent__ % typeof false, constructor = ({a1:1})) { M:while((@foo != *::*) && 0){var __proto__ = <x><y/></x>; } }");
tryItOut("/*for..in*/for(var __count__ in new (__noSuchMethod__)(<x><y/></x>).__lookupGetter__(\"__iterator__\") :: ((<><x><y/></x></>.yoyo(((3.141592653589793)))))[(<><x><y/></x></>.propertyIsEnumerable(\"__count__\"))]) let([, __iterator__, __count__, [prop, __proto__, , , ], ]) ((function(){with({}) with({}) eval})());");
tryItOut("L:while((constructor.__count__ = false * 0x99\n) && 0){; } const __noSuchMethod__;");
tryItOut("{return; }");
tryItOut("/*for..in*/for(var (<y><z/></y>)(-3/0) in ((function(y) { yield y; export *;; yield y; })(__count__ = <x><y/></x>.prototype = (({a1:1}))[({})].__count__ = (0/0).call(1.2e3, <x><y/></x>))))throw [,,];");
tryItOut("for(let y in [5,6,7,8]) return false();");
tryItOut("<!--yy-->");
tryItOut("gc()");
tryItOut("L:if(null) {(*);; } else  if (this) export __iterator__;");
tryItOut("with(constructor.__noSuchMethod__){/*infloop*/do ; while((Date(({a1:1}))).valueOf(\"number\")); }");
tryItOut("/*for..in*/M:for([__count__, __proto__, __noSuchMethod__, , ] in  \"\" ) {prop = true;return *::*; }");
tryItOut("let (prop) { M:if(([11,12,13,14].filter if (null for (__proto__ in <><x><y/></x></>)))) if(false) {break ;var __count__ = [[1]], __parent__; } else  if (033) {prototype, constructor = <x><y/></x>;const constructor = prototype; } else  if ((let (__iterator__ = [1,,], __iterator__) [[]])) {var prototype, __noSuchMethod__ =  /x/g ;export __count__; } else {} }");
tryItOut("if(function(id) { return id }.@*) {continue M; } else  if ((uneval([[]]))) export constructor;");
tryItOut("with((__iterator__ = this)){L:if(__count__) continue ; else  if (prototype) {let prop; } else {{}const constructor; } }");
tryItOut("/*for..in*/for(let [__proto__, constructor] = [z1,,] in __parent__) (function(id) { return id });");
tryItOut("{Math.sin/*for..in*//*\n*/M:for(let <x/>.prop in true) (<><x><y/></x></>); }");
tryItOut("__count__");
tryItOut("export prop");
tryItOut("yield");
tryItOut("with({constructor: *::*})/a/gi");
tryItOut("");
tryItOut("{/*for..in*/for(var __proto__ in (( \"\" )( /* Comment */<><xxx {__parent__}={__noSuchMethod__} /></>))){yield; }/*for..in*/for([__proto__, __parent__] = window in <><x><y/></x></>) {export *;const constructor = <><x><y/></x></>, __noSuchMethod__ = @foo; } }");
tryItOut("/*for..in*/for(const [prop, __proto__] = prototype = <x><y/></x> in __parent__) let (({ __parent__: __noSuchMethod__ }) = this , [[1]], constructor = -0) { /*for..in*/L:for(prototype in ((function  prop (\t__count__, __parent__) { return; } )(()))){break L; } }");
tryItOut("/*for..in*/for(const __proto__ = [1,,] in <x><y/></x>) return;");
tryItOut("yield -0;");
tryItOut("__proto__ = prototype;");
tryItOut("/*infloop*/for(prop; false; (((p={}, (p.z = 3)())).@*)) {export *; }");
tryItOut("if([1e4 for (__noSuchMethod__ in __count__)]) { if (__count__.( /x/g )) {return null; } else ;}");
tryItOut("/*for..in*/M:for(var prop = <x/>.valueOf(\"number\")\n in (0.1 && <><x><y/></x></>) - __parent__ = window) {{export prototype; } }");
tryItOut("{} const __proto__;");
tryItOut("switch(this.zzz.zzz) { default: L: {__parent__: <y><z/></y>; }break; yield;break; let prototype; }");
tryItOut("/*for..in*/for(let [__proto__, prop] = this.zzz.zzz in (* %= ({a1:1}))) {{with([1,,])constructor; } }");
tryItOut("export *");
tryItOut("/*infloop*/for(__count__; (({}).__lookupGetter__)(); new ((({prop: 0}) >> new Exception()))()) /*infloop*/for(let __count__; this.__defineSetter__(\"prototype\", (1 for (x in [])))++; (new *::*)) {export prototype; }");
tryItOut("with({prop: function::__noSuchMethod__})export __proto__;");
tryItOut("/*for..in*/for(const  '' .__proto__ in ((this.__defineSetter__(\"prototype\", function (prop) { yield <x><y/><\f/x>; } ))((__proto__ = ({a2:z2})) ^ <x><y/></x> .@x:: typeof ({a2:z2})))){this.zzz.zzz; }");
tryItOut("/*for..in*/L:for(let __count__ in ((function () { return <x><y/></x> } )(5.0000000000000000000000)))gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ({prototype getter: <><x><y/></x></>, __count__: [,] })) {(-0);undefined;let __iterator__; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __parent__ = (get = <><x><y/></x></>.isPrototypeOf( \"\"  && window)) in window) {/*infloop*/M:for(<y><z/></y>; <><x><y/></x></>; <x/>) export constructor; }");
tryItOut("if(*) { if ([1]) break M;} else {yield  /x/ ;; }");
tryItOut("1e+81");
tryItOut("gc() const prototype;");
tryItOut("let (__parent__ = , prototype) { <x><y/></x> }");
tryItOut("/*infloop*/for(function::__noSuchMethod__; __parent__; @foo) export *;");
tryItOut("{break M;throw true; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = yield [11,12,13,14].some in ) {return __count__; }{'haha'.split }");
tryItOut("export *\n\nreturn @foo;\n");
tryItOut("try { return  /* Comment */<x/>; } catch(__proto__) { with({}) throw StopIteration; }  const __noSuchMethod__;");
tryItOut("let(__iterator__, __parent__ =  /x/g ) { yield;");
tryItOut("with({__count__: (('fafafa'.replace(/a/g, function  __count__ (__proto__, __iterator__)__count__))[Math.sin()]) instanceof null &=  '' }){/*infloop*/L:for(*; <><x><y/></x></>; 1e81) {{}export constructor; } }");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = *::* in  /x/ ) {function (prop) { yield return  \"\" ;; }  }");
tryItOut("with( \"\" .__defineGetter__(\"__proto__\", function () { yield -3/0 } ).__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))))const __proto__, __proto__;");
tryItOut("let (prop, __noSuchMethod__ = __parent__) { ; }");
tryItOut("if(* |  /x/ ) { if (__iterator__\n) {export *;('haha'.split).call }} else {yield  /x/ ; }");
tryItOut("let(constructor, __parent__ = []) { for(let y in [5,6,7,8]) let(__proto__ = window) ((function(){return;})());");
tryItOut("if(this.propertyIsEnumerable(\"get\").unwatch(\"__noSuchMethod__\")) { if (*.watch(\"prototype\", function (constructor, __iterator__) { return 3/0 } )) gc()} else throw window;");
tryItOut("try { yield; } catch(__parent__ if (function(){prop;})()) { throw prop; } catch(__proto__) { throw __iterator__; } finally { continue ; } ");
tryItOut("/*infloop*/for(let constructor; ; prop = new (<><x><y/></x></>)([z1], @foo).*) {/*for..in*/for(var prop in <x><y/></x>) return;yield;\ncontinue ;\n }");
tryItOut("/*for..in*/M:for(var __count__ = let (constructor) *::* ? <><x><y/></x></>.* : (#2=[new Date(@foo)]) in ('fafafa'.replace(/a/g, 'haha'.split) -= typeof __count__)) {/*infloop*/for(0.__lookupSetter__(\"__parent__\"); ++window; (undefined.__lookupGetter__(\"prototype\"))) {__iterator__ }\n }");
tryItOut("yield;throw <\fx><y/></x>;\nconst prop;");
tryItOut("M:with('fafafa'.replace(/a/g, (try { return window; } catch(__parent__) { let constructor = #3={a:#3#}; } finally { var constructor = __noSuchMethod__, __noSuchMethod__ = [,,z1]; } .let setter= function  __proto__ (__proto__) { (0); } )))with([,]){}");
tryItOut("while((constructor.constructor getter= function(q) { return q; }) && 0)this.zzz.zzz;");
tryItOut("L:with((gc).call(<y><z/></y>, 3, []))export __proto__;");
tryItOut("continue \n");
tryItOut("L: yield  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <><x><y/></x></>) {}");
tryItOut("with({__proto__: continue ; .@ \ffalse})while((undefined) && 0)export __parent__\n");
tryItOut("if(__count__) /*infloop*/L:do {; } while(~__count__);");
tryItOut("try { prop = __proto__; } catch(__noSuchMethod__) { yield [window for each (__count__ in -1)]; } ");
tryItOut("yield  \"\" ; const prototype;");
tryItOut("{let prop =  '' ; }");
tryItOut("let (({ __iterator__: ({ constructor: [__count__, , , , ] }) }) = @foo += __parent__)\t { if(*::*) { if ((let (__proto__, constructor = this)  \"\" )) {{} } else {yield <x><y/></x>;let __count__ = 1e+81, prototype; }} }");
tryItOut("__noSuchMethod__, __iterator__\nconst __iterator__;");
tryItOut("{/*infloop*/for(window.*; (\tthis ? (constructor = ((function ([y]) { })() for (__parent__ in <x><y/></x>))) : [11,12,13,14].some); Date()) {export *;return false; }/*infloop*/do with({__noSuchMethod__: 1e+81.__lookupSetter__(\"__count__\")})continue M; while(Number()); }");
tryItOut("if([z1]) {return <y><z/></y>; } else  if ((<><x><y/></x></>++)) {yield;break ; } else {export __iterator__;break M; }");
tryItOut("M:if(new Function(<y><z/></y>)) { if (<x><y/></x>++) {let (__proto__ = (({ set prop(__noSuchMethod__) { return this } , __iterator__ setter: function (({ __count__: prototype })) { let __count__, __parent__ = 5.0000000000000000000000; }  }))) { let __count__ = __count__, ; } } else {/*infloop*/do  \"\"  while(__iterator__);return *::*; }}");
tryItOut("if((p={}, (p.z = ({ get __noSuchMethod__(prop) { <x><y/></x> } \f }))())) { if (( '' .unwatch(\"prop\")).__lookupSetter__(\"__proto__\")) {(({ __iterator__: ({ prototype: prop }) }) = ); }} else {/*for..in*/for(__count__ =  /x/  in <x/>)  }");
tryItOut("L: {M:if((@foo)[(-0)]) return  /x/ ; else  if ( /x/ .__proto__) continue L'; }");
tryItOut("for(let y in [5,6,7,8]) prototype = constructor;");
tryItOut("do __count__; while((<{constructor}><!--yy--></{constructor}>) && 0);");
tryItOut("let (({ __iterator__: [] }) = <><x><y/></x></>.*, __proto__) { yield; }");
tryItOut("/*for..in*/for(let prop['__iterator__'] in ((eval)(5.0000000000000000000000))){constructor = <x><y/></x>, __iterator__;continue ; }");
tryItOut("let (({ __iterator__: ({ __iterator__: ({ prop: ({ __iterator__: __noSuchMethod__, __count__: prototype }) }), prototype: prototype }), __count__: true }) = <x/>, __parent__) { for(let y in []); }");
tryItOut("{function::prototype, __noSuchMethod__; }");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("L: {if(__parent__) { if \t('fafafa'.replace(/a/g, )) {{} }} else export *; }");
tryItOut("M:if(<y><z/></y> .@x:: constructor.__iterator__ = <y><z/></y>) { if (new String(3/0 -  \"\" )) /*for..in*/for(let [prototype, __proto__] = -1 in <y><z/></y>) {export *; }} else {var prototype;return; }");
tryItOut("if((yield yield *::*)) { if ( /x/ ) yield;} else return\n");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("/*for..in*/L:for(let (__noSuchMethod__.__count__) in ((function(q) { return q; })(([1,2,3,4].slice(<><x><y/></x></>, undefined))))){( /x/g ).__defineSetter__ }");
tryItOut("throw prop;");
tryItOut("(<x><y/></x>);");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/for(var [, __iterator__, , ({ constructor: __iterator__ })] = (<x><y/></x> *= <x><y/></x>); prototype.__noSuchMethod__; (yield (Function(true, this)))) {let setter = window, __proto__ = <><x><y/></x></>; }");
tryItOut("{throw null; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in true) {( '' );export __iterator__; }\n/*infloop*/M:for(const constructor; \t__count__; ([0/0.__lookupSetter__(\"constructor\")])) {export *; }");
tryItOut("/*for..in*/for(let [,,].__parent__ in ((({}).hasOwnProperty)(__parent__.__noSuchMethod__ = Date().prop = new Math.sin()))){if((((((function  prototype () { return; } ).call)(*)) for (@foo in null) if (<>(__iterator__).__defineSetter__</>)))) {export __iterator__;{} } }");
tryItOut(" /x/ \n{}");
tryItOut("/*infloop*/L:while(\f<><bbb xmlns:ccc=\" if (( \"\"  if ( /x/g ))[*::*])\"><ccc:eee></ccc:eee></bbb></>){/*infloop*/for(let constructor; <><zzz>4.</zzz></>; 0.1 < <x><y/></x> <<= ~undefined) export prop;this; }");
tryItOut("/*for..in*/for(let (<x><y/></x>)(constructor) in [1]) {var prototype, prototype = [z1]; }");
tryItOut("M:if(__iterator__.__defineSetter__(\"__proto__\", gc))  else  if (new (({}).__lookupGetter__)()) continue L; else {;export *; }");
tryItOut("/*infloop*/for(let __count__; new (window[prop])(yield (({}).isPrototypeOf(*)), constructor); *::*) {var __noSuchMethod__, prop;(<y><z/></y>).__defineSetter__ }");
tryItOut("with({}) ;");
tryItOut("L:with({prototype: (((<><x><y/></x></> <= __iterator__))((delete (* for ({} in *::*))))-=((new *())\n) = <y><z/></y> if ( /x/ ).watch(\"__count__\", [1,2,3,4].map))}){throw __count__;return;\nvar __proto__ = <><x><y/></x></>;\n }");
tryItOut("/*for..in*/L:for(let [prototype, __proto__] = () in  /x/g ) {var __noSuchMethod__ = <><x><y/></x></>, __parent__;__count__, __proto__ = null; }");
tryItOut("L:if((__count__ = <x><y/></x> for (constructor.__count__ in ({})) if (4.))) { if ([] = window) for(let y in []); else do (<><x><y/></x></>); while(( /x/g ) && 0);}");
tryItOut("with(<><x><y/></x></>.valueOf(\"number\"))if((null if (<><x><y/></x></>))) {export *; }");
tryItOut("with((-false)){yield  /x/g ;break ; }");
tryItOut("if(<>prop getter: function ([y]) { }</>.isPrototypeOf(3/0)) {(false);yield /*\n*/#1=[#1#]; }");
tryItOut("if(yield 'haha'.split(false, (-1))) { if (((p={}, (p.z = 4.)())) -= new Function.__lookupGetter__(\"constructor\")) prop; else {{} }}");
tryItOut("/*for..in*/M:for(var __parent__ in \t \"\" .eval(({a1:1}))) {(<x><y/></x>) }");
tryItOut("export constructor;");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(__parent__, prop prop; ({}).hasOwnProperty('fafafa'.replace(/a\t/g, ( /x/ ).__defineSetter__)); (constructor|=constructor)) ");
tryItOut("/*infloop*/for([ /x/g ]; (<x><y/></x> ^ <x/>); new ( /x/g )()) {M:do {yield window; } while(([,]) && 0); }");
tryItOut("if(<x><y/></x>.hasOwnProperty(\"__iterator__\")) { if () {u<x><y/></x> }} else yield false;");
tryItOut("/*for..in*/[, , , constructor], constructor");
tryItOut("/*infloop*/for(let __count__; <><x><y/></x></>; ({a1:1})) var __proto__ = (-0);");
tryItOut("throw StopIteration;");
tryItOut("M:if(new 033.unwatch(\"prop\")(prop, ({__count__: <><x><y/></x></> }))) export *\nreturn window; else {/*infloop*/M:for(let __proto__ = <x/>; 3.141592653589793;  '' ) {.2export __iterator__; }/*for..in*/L:for(var [__noSuchMethod__, __count__] = constructor in <x><y/></x>) {}\n }");
tryItOut("if(eval) { if (*) gc() else arguments}");
tryItOut("L: {return  /x/ ;(0x99); }");
tryItOut("/*infloop*/M:for(const constructor; let (__count__) ((false for (__proto__ in {}))); ((function(q) { return q; }).call(<><x><y/></x></>, )).eval(0.1.valueOf(\"number\"))) /*infloop*/L:while(case 0: break; default: yield [[]];{})window");
tryItOut("/*for..in*/for(var constructor(([<><{prototype}>yyy</{prototype}></> if (*)])) in 5.0000000000000000000000.__parent__ = undefined === *.__defineGetter__(\"prototype\", function(q) { return q; })) {{/*for..in*/M:for(var __parent__ in *::*) function::prototype, __iterator__ = <y><z/></y>;const prop, prototype = false; } }\n");
tryItOut("switch(((<><x><y/></x></> > *::* for each (constructor in #1=[#1#]) for (__count__ in *::*)) >> ((<><x><y/></x></> || this) instanceof ([11,12,13,14].map)) , (window <= <y><z/></y>\f ? new String(<y><z/></y>) : +3/0)) <<= yield (this.__defineGetter__(\"__iterator__\", gc))) { default: /*infloop*/while(yield 0/0)export *;case 4: with({let: (new Exception(<><x><y/></x></> &  \"\" , []))})break ;break; case -__iterator__.((uneval((*__parent__)))): do {gc() } while(( /x/  .@ __count__.prototype .. ((--3.141592653589793))[prototype = window]) && 0);break; case 7: {var __noSuchMethod__, __parent__ = <x><y/></x>;Math.pow }case 4: if(prop.__iterator__) {(1 for (x in []))gc() }case 9: case \n<><x><y/></x>\f</>: yield window;\nexport *;\nbreak; case 5: ({}).__lookupGetter__ }");
tryItOut("/*for..in*/L:for([__iterator__, __count__] = (prop.eval(this)) in <><x><y/></x></>) yield;");
