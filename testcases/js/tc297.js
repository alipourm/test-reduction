tryItOut("let(constructor = constructor.( /x/g ), __proto__ = undefined) { return __proto__.(true);");
tryItOut("/*for..in*/for(let [constructor, __proto__] =  /x/  ::  /x/  in __noSuchMethod__.__proto__ setter= 1.3) {yield <x><y/></x>; }");
tryItOut("{throw <y><z/></y>; }");
tryItOut("{prototype, __parent__;\nyield;\nif((\".constructor getter= ( \"\" ).watch)) {; } else  if (__iterator__ = *::* *= eval(\"arguments\",  /x/ )) gc()\nyield undefined/; }");
tryItOut("/*for..in*/L:for(var [yield, constructor] = [prototype] = <><x><y/></x></>.__parent__ in <x><y/></x>) with(this){(window); }");
tryItOut("/*infloop*/for(let __noSuchMethod__ =  \"\" ;  /x/g ; window) ;yield undefined; const prototype;");
tryItOut("/*infloop*/for( /x/g ; ; (new (prototype).apply( /x/ ))) {gc()let constructor = <x/>, __noSuchMethod__; }");
tryItOut("return {yield [[]];return; };");
tryItOut("if(@foo) {L:if(__count__.__parent__ = function(id) { return id }) { if (__parent__.__iterator__) gc()} else {continue L;*; }try { return *;\t } catch(__parent__) { return <x><y/></x>; } finally { *::*; }  } else  if ([__count__].filter(function  __noSuchMethod__ (prototype, constructor)@foo).__count__ = -1.valueOf(\"number\")) gc() else (<><x><y/></x></>);");
tryItOut("switch((String() ^= false ? window : (-0))) { case * ^ <x><y/></x>: L:if(1e4) (*::*); else  if (<x/>) var constructor = @foo; else {var __proto__ = [z1];export __parent__; } }{}");
tryItOut("with({__parent__: <x/> ? <><x><y/></x></> : *})(#1#).apply");
tryItOut("try { return; } catch(prototype if \tconstructor = <x/>) { const __proto__, __noSuchMethod__; } catch(constructor) { for(let y in [5,6,7,8])  } ");
tryItOut("/*for..in*/for(var [prototype, __proto__] = (new (#1=({__parent__: <><x><y/></x></>}))(([[1]] .@*:: <x><y/></x>), window)).propertyIsEnumerable(\"__proto__\") in [,] < window) continue ;");
tryItOut("M:with(*::*prototype.__iterator__)yield;");
tryItOut("with({__iterator__:  '' (@foo,  '' )}){(new [z1,,](-1));{return __noSuchMethod__; } }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [])\n{;\nexport *;\n }");
tryItOut("gc()\n");
tryItOut("if(0.1) {throw undefined;var prop = prop, __proto__ = undefined; } else var __count__ = *::*;");
tryItOut("with({}) gc()");
tryItOut(";");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; @foo; (null === function(id) { return id })) throw <x><y/></x>;\n<x><y/></x> = prop;\n");
tryItOut("switch(__iterator__.-0) { case new <y><z/></y>(window, (-0)): /*infloop*/for(let __count__; __noSuchMethod__; true) {yield; }default: break; case 9: break;  }");
tryItOut("if(<x><y/></x>) {<x><y/></x>; } else  if (<x><y/></x>) {export prototype;yield *::*;\t } else {yield;gc() }");
tryItOut("M:if(<x/>) yield  /x/g ; else  if (true.isPrototypeOf(<x><y/></x>)[this.zzz.zzz]) {throw window; } else gc()");
tryItOut("with((Boolean(.__lookupGetter__(\"__count__\"), 5.0000000000000000000000)))/");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in undefined) continue M;");
tryItOut("let(prototype = prop = 1e81) { for(let y in []);");
tryItOut("let (__proto__ = [<x><y/></x>.yoyo(({}).hasOwnProperty) for each (__parent__ in window) for each (__count__ in [1,,]) for (__count__ in prototype)], [, ({ __noSuchMethod__: ({ __noSuchMethod__: __iterator__, __iterator__: prototype }) }), ]) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in 1e-81 >>>=function(id) { return id }) export prop; }");
tryItOut("/*infloop*/for(prop+=\nprop = <><x><y/></x></>; export __iterator__;; (null.watch(\"prop\", function(y) { yield y; 3; yield y; }))) yield true;");
tryItOut("let(prop, setter) ((function(){const prototype;})());");
tryItOut("M:if(<x><y/></x>) yield <y><z/></y>; else  if (__parent__) const prototype, constructor = __noSuchMethod__;");
tryItOut("{__iterator__;let  { yield; } , __proto__ = <y><z/></y>;/*\n*/ }");
tryItOut("let (prop = window, __count__ =  ''  ? ({a2:z2}) :  '' ) { {} }");
tryItOut("{}\nthrow __parent__.prototype;");
tryItOut("with(<bbb\t xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>.((eval(\"undefined\",  /x/ )))){return; }");
tryItOut("L: ");
tryItOut("(@foo);");
tryItOut("M:with({prop: (__count__(false))}){if(this) <y><z/></y>; else  if (<>\f<x\f><y/></x></>) {const __noSuchMethod__ = #3={a:#3#}, __noSuchMethod__ = window;yield this; } }");
tryItOut("/*for..in*/for(const [constructor, __count__] = ({ prop: [prototype, , __noSuchMethod__, prototype,  '' , __proto__] }) in <><x><y/></x></>) gc()");
tryItOut("throw <x/>;");
tryItOut("{'haha'.splitif(*) ; else  if ((__iterator__.each setter= eval)) return; }");
tryItOut("/*infloop*/for(const __parent__ = 0; (yield @foo)({case 1: throw <><x><y/></x></>; } )).call(__iterator__ = <x><y/></x>, ); * << <y><z/></y>, <><x><y/></x></>) /*infloop*/for(const prototype =  /x/g ; *; [,,]) {throw <x><y/></x>;throw <x><y/></x>; }");
tryItOut("{export __noSuchMethod__; }");
tryItOut("if(__count__.__noSuchMethod__ setter= function(y) { yield y; ;\nyield;\n; yield y; }) M:if(__parent__) {return;window; }");
tryItOut("L:if(__noSuchMethod__) { } else  if (<><{__proto__}><ccc:ddd> </ccc:ddd></{__proto__}></>) /*for..in*/for(let prototype = (p={}, (p.z = this.__defineSetter__(\"__iterator__\", eval))()) in this) {function(q) { return q; } }");
tryItOut("L:if(__noSuchMethod__.(1e81)) {return *; } else  if (([11,12,13,14].filter)) function  prototype (prop, prototype) { return <y><z/></y> } ");
tryItOut("L:while((\n__proto__ = [,][<y><z/></y>].<{__parent__}></{__parent__}>) && 0)/*for..in*/for(const __iterator__ in 1.2e3) {}");
tryItOut("/*infloop*/while(5.0000000000000000000000){try { *::*; } finally { const __noSuchMethod__ = true; }  }");
tryItOut("if((yield <x/>)) {export __parent__;<x/>; } else  if (this.zzz.zzz) {gc() } else {function(y) { yield y; yield;; yield y; }prop = undefined; }");
tryItOut("if(#3={a:#3#} , 3/0) {export __iterator__; }");
tryItOut("/*for..in*/L:for(let prototype in (('haha'.split)(<y><z/></y>))){export __noSuchMethod__; }");
tryItOut("const function::__iterator__");
tryItOut("/*for..in*/for(const [__parent__, __noSuchMethod__] = (window.__lookupSetter__(\"__iterator__\")).@*\t in __noSuchMethod__ = <\nx><y/></x>) {;(<x><y/></x>); }");
tryItOut("/*for..in*/M:for(__count__.__parent__ in ((function  __proto__ (__proto__) { return (gc++) } )(constructor.prop = prototype))){return; }");
tryItOut("/*infloop*/M:for(let constructor; new [15,16,17,18].some( '' , prop)(new <y><z/></y>(<x><y/></x>)); ([15,16,17,18].map([1,2,3,4].slice, ([].eval(null))))) ");
tryItOut("{{var prop = function(id) { return id }; }/*for..in*/for(var __iterator__ = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in true) {export *;return; } }");
tryItOut("if(new (eval(\" /x/ \", (function ([y]) { })()) -= ([15,16,17,18].filter(function  __noSuchMethod__ (constructor) {  } \t, this)))()) { if (prop) {yield;__iterator__; }} else yield  /x/ ;");
tryItOut("/*infloop*/do {let(__proto__, ({ constructor: ({ __iterator__: prototype }) }) = [,] ? <x><y/></x> : undefined .@x:: <y><z/></y>) ((function(){prototype = new ([1]())(#3={a:#3#}.throw(@foo));})()); } while(export *;);");
tryItOut("let (__count__ = (1e81(0))) { <x><y/></x> }\n");
tryItOut("\nconst constructor, prop;");
tryItOut("if(<y><z/></y>) {let constructor; }");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/for([__proto__, , , prop, ] = constructor.(<y><z/></y>); (* = [ \"\" ]); this.watch(\"__noSuchMethod__\", Function).__defineGetter__(\"prototype\", eval)) {M:if(<><x><y/></x></>) {} }");
tryItOut("with({__noSuchMethod__: 5.0000000000000000000000})return;");
tryItOut("break ;");
tryItOut("/*infloop*/for([, __noSuchMethod__, , , __proto__] = (__iterator__ =  ''  instanceof -1 & #3={a:#3#}); __count__ = [, ({ __proto__: __count__ }), ({ prop: __iterator__ })]; (__parent__ = <x><y/></x> if (<><x><y/></x></>))) /*for..in*/for(let prototype in *) {; }");
tryItOut("{return;var prop; }");
tryItOut("gc()");
tryItOut("/*infloop*/for(__parent__ = (<><x><y/></x></>.unwatch(\"__count__\") ? [this] : false); ([1,2,3,4].slice)(); (4..__defineSetter__(\"__count__\", Function))) prototype.constructor = __proto__;");
tryItOut("if( /* Comment */<x><y/></x>.__noSuchMethod__(//h\n(<x/>;))) L: {(function ([y]) { })();(null); }");
tryItOut("{return;; }");
tryItOut("let (prototype, prop = <><x><y//h\n/></x></>) {  }/*infloop*/for([] = (constructor =  /x/g ); __proto__.__parent__; window.valueOf(\"number\")) {continue ; }");
tryItOut("<>function::__proto__</> /*for..in*/for(const prototype = prototype\f in #3={a:#3#}) gc()");
tryItOut("if(let (__count__ = 1.2e3.eval(({a2:z2}))) this.__defineSetter__(\"__parent__\", 'haha'.split).yoyo(null)) {{} } else  if (<y><z/></y>.prop) {((\n<x/>)); } else {; const prototype; }");
tryItOut("/*infloop*/do return <x/>; while(function(id) { return id })");
tryItOut("prototype;");
tryItOut("if((let (prop = <x/>, __count__ = __parent__) ({a1:1}))) { if (<xxx {prop}={-0} />.(undefined.yoyo(1e81))) {throw false; } else /*infloop*/for(const [prototype, , ] = __proto__.(constructor); ( /x/ ); (prop.__count__ = 0x99)) (4.);}");
tryItOut("L:while((prototype.__noSuchMethod__ setter= [1,2,3,4].map) && 0)if((<x><y/></x> if (3/0))) var __noSuchMethod__; else {yield;yield ({a1:1}); }");
tryItOut("let (__count__ = \n(-0) >=  if (__noSuchMethod__ =  '' ), prop) { export *; }");
tryItOut("if(({ __proto__: __iterator__ }) = new __count__ = try { const getter = (function ([y]) { })(), prototype; } finally { yield; }  ? 3.141592653589793 : @foo()) { if (([11,12,13,14].filter)) break L; else prototype}");
tryItOut("L: {/*infloop*/for(let prototype; *;  \"\" ) {yield 1.2e3; }return window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (true)(window) in 0x99) \nL:if( /x/g .yoyo(__noSuchMethod__)) yield; else  if (<><x><y/></x></> >> <y><z/></y>) *");
tryItOut("__proto__ = prototype;");
tryItOut("/*for..in*/for(let [prop, __parent__] = window in <><x><y/></x></>) {; }");
tryItOut("/*for..in*/for( /* Comment */(({}).hasOwnProperty).call(<><x><y/></x></>, ) in ((0.@*)(((([[]]).__defineSetter__.@foo)(@foo)))))if((([1,2,3,4].slice)(undefined) & yield (({ get __iterator__ __parent__ () { yield __iterator__, prop } ,  set __noSuchMethod__(__count__) { return <!--yy-->; }  })))) {windowthrow  /x/ ; } else {return <x>\f<y/></x>; }");
tryItOut("(this);const function::function::__proto__ =  \"\" , prop;");
tryItOut("let prop = <x><y/></x>;let __proto__ = <><x><y/></x></>, __noSuchMethod__ = null\n\f");
tryItOut("with({}) { for(let y in [5,6,7,8]) gc() } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in __parent__ = ((yield <y><z/></y>) >>> ( if (function ([y]) { }).hasOwnProperty(\"__parent__\")))) /*for..in*/for(const __count__(prop) in eval(\"yield [z1]\", (!constructor))) return <><x><y/></x></>;");
tryItOut("if((yield <>\nwindow</>.((<\n>\r if (<><x><y/></x></>)</>)(function  __count__ (prototype)<x><y/></x>, [])))) {/*for..in*/for(prop = __noSuchMethod__ = __count__ in -1.__lookupGetter__(\"__noSuchMethod__\")) {{gc() }const __iterator__ = <><x><y/></x></>; } } else  if (function  prototype (__noSuchMethod__) { yield  /x/  } ) {export *;\n\n\nL:if(<><x><y/></x></>) {continue ; } else  if (0/0) export __proto__; }");
tryItOut("let (__noSuchMethod__ = <x><y/></x>.(constructor), __count__ = 0) { return [z1]; }");
tryItOut("{with(this)yield; }");
tryItOut("if(__proto__ /= <x><y/></x>) {yield;({}) } else  if ((__proto__.prototype = ({}))) throw -0;");
tryItOut("var prototype = [[]];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.prototype in  '' ) {yield;try { try { return; } finally\r { gc() }  } finally { __proto__ = let (__iterator__ = prototype) {.2; }; }  }");
tryItOut("/*infloop*/while(yield ([, , , , [, prototype]] = (({ __parent__: prototype }) = <><x><y/></x></> != <><x><y/></x></> ^ <y><z/></y>.valueOf(\"number\")))){false;with({constructor: __count__}){/*for..in*/L:for(let prototype in function ([y]) { }) return <x><y/></x>;{} } }");
tryItOut("/*for..in*/for(let __count__ = new <y><z/></y> = *((((function ()<x><y/></x>).apply).call(<><x><y/></x></>, <y><z/></y>, *::*)), <x><y/></x>) in  /x/g ) __proto__((*::*.prop.yoyo( /x/g )))");
tryItOut("{/*for..in*/for(__proto__ =  /* Comment */ ''  in this) undefined;/*for..in*/for(const __iterator__ in <x><y/></x>) {throw <x><y/></x>; } }");
tryItOut("yield *");
tryItOut("let(constructor, prototype) { throw prototype;");
tryItOut("/*infloop*/while(__parent__)if(<y><z/></y>.constructor) { if ((<><x><y/></x></>)[<x/>]) export *; else {return  \"\" ;(new Function(\"continue M;\")) }}");
tryItOut("M:do {{} } while((let (__parent__) @foo\n) && 0);");
tryItOut("/*infloop*/for(\ffalse;  /x/g ; 0.1) {(<x><y/></x>);var prop, __iterator__; }");
tryItOut("/*for..in*/for(var prototype in (((new Function(\"/*infloop*/for(5.0000000000000000000000; 3/0; []) continue M;\")))(((<y><z/></y> for (function::prototype in [z1])))))){return;\nvar __parent__ = true, constructor =  '' ; }");
tryItOut("/*for..in*/L:for(var __proto__ in (([1,2,3,4].map)([@foo].some(function  __iterator__ (prototype, __iterator__)\t { yield new ([,])(window) } )))){yield;/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *::*) break L; }");
tryItOut("if(constructor ? this : *) {([z1]);export *; } else  if (__parent__.__count__ setter=  '' ) {null }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (new Object() > __parent__ = function(id) { return id })((this.zzz.zzz)) in (null++)) (<x/>);");
tryItOut("L: eval");
tryItOut("try { let constructor, prop = true; } catch(prop) { export constructor; } ");
tryItOut("/*infloop*/for(var ({ __proto__: [({ __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: __iterator__, __count__: __noSuchMethod__ }) }), constructor: [] }), ] }) = <><><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></></> >>= ( /* Comment */this); (\f<x><y/></x>(<x><y/></x>, <><x><y/></x></>))([,], new ((-0))([1,,], 1e+81)); this = (<><x><y/></x></> ? setter : 0/0)(0x99['__noSuchMethod__'])) {/*infloop*/do {throw arguments; } while( \"\" ); }");
tryItOut("if(false) return; else return 1.2e3;");
tryItOut("{var prop = <x><y/></x>;return;\f\nif(this) gc() else  if (prop) ;\n }");
tryItOut("/*infloop*/while((new Iterator())){return <x/>;/*for..in*/L:for(const __parent__ in (('haha'.split)(prototype)))'haha'.split }");
tryItOut("if(5.0000000000000000000000) /*for..in*/L:for(prop in ((function (prototype, __proto__)[z1])(<x/>))){constructor = this, __count__ =  /x/g ; } else  if (__proto__) {export constructor;\n{}\nwhile(((<><x><y/></x></> === 0)) && 0){throw undefined; } } else {if((( ''  for (function::constructor in [z1]))\f)) export *; else  if (typeof __iterator__ = *::*.watch(\"__iterator__\", function  __count__ ()this)) ({ __count__:  this , prop: ({ __count__: ({ __parent__: ({ prototype: __proto__ }) }) }) })L: {({}).__lookupGetter____iterator__, __proto__ = <y><z/></y>\n } }");
tryItOut("/*for..in*/for(((<><x><y/></x></> for (__iterator__ in undefined)).__defineSetter__(\"prototype\", eval).propertyIsEnumerable(\"__iterator__\"))\f.prop in 'haha'.split(((gc).call(this, )))) {if(__count__) { if (__iterator__ getter: (new  /x/g (({a1:1}))) == prototype%=(-1)) {let __proto__, constructor;let __proto__, constructor =  /x/ ; }} else {<x/>; } }");
tryItOut("while((eval(\"export __iterator__;\", ({a2:z2}))) && 0)__iterator__;");
tryItOut("let(true.prototype = new  /x/ .__lookupSetter__(\"prop\")((prop = __iterator__))) ((function(){let([__proto__, prop]) ((function(){try { export function::constructor; } catch(__proto__ if (function(){(<x/>);})()) { ( \"\" ); } })());})());");
tryItOut("return -0 -  /x/g ;");
tryItOut("while(((<x><y/></x> ^= <><x><y/></x></>)) && 0)<><x><y/></x></>;");
tryItOut("do \f{continue ; } while(((false ^ <y><z/></y>)) && 0);");
tryItOut("/*infloop*/L:for(const ({ __parent__: ({ __noSuchMethod__: ({ __parent__: ({ (\f{constructor: undefined, prop: undefined }): [, , ], prop: [[], [__count__, , constructor, , __noSuchMethod__], , ({ constructor: __iterator__ })] }) }), __count__: ({ __noSuchMethod__: [, , __noSuchMethod__, __noSuchMethod__, __iterator__] }) }), __iterator__: ({ __noSuchMethod__: [\t({ __count__: ({ __iterator__: [prototype, , ] }), __noSuchMethod__: ({ constructor: ({ __count__: __noSuchMethod__, prop: __proto__ }), prop: [, __iterator__]\f }) }), ({ __proto__: ({ __iterator__: prototype }) }), [__iterator__, [], , , ({ __proto__: prop, __noSuchMethod__: prototype })], __count__] }) }) = eval(\"<x><y/></x>\", <x><y/></x>) for (prototype in *::*); eval(\"[5.0000000000000000000000--].filter(/a/gi)\", constructor = <y><z/></y>); this.__defineGetter__(\"prop\", <x/>.@foo\t)) let (prop = prop) { yield; }");
tryItOut("let (prototype =  /x/ .valueOf(\"number\")) { if(*::*) {yield;export *; } else  if ((({a2:z2})).watch) {yield __parent__; } else __proto__ =  /x/g ; }");
tryItOut("switch(<x><y/></x>) { case [z1]: break;  }");
tryItOut("/*for..in*/for(const __parent__ = window in <><x><y/></x></>) {1e81; }");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("with({__iterator__: <x/>}){export constructor; }");
tryItOut("L: yield [];");
tryItOut("let (__noSuchMethod__ = @foo, __parent__) { ; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__(<><x><y/></x></>) in (((1 for (x in [])))(new Math.sin())))gc()");
tryItOut("if(new (/a/gi)((#0=({__proto__:  \"\" })))) { if (('fafafa'.replace(/a/g, function () { let __proto__ = <y><z/></y>; } ))()) {/*infloop*/do gc() while(*::*); } else {continue ; }}");
tryItOut("{if(<><x><y/></x></>) return __count__; else  if (5.0000000000000000000000) prop = ({}), __iterator__; }");
tryItOut("do {export *; } while(( /* Comment */ /x/g ) && 0);");
tryItOut("/*infloop*/while((<{__count__}> </{__count__}>.([,,]))){; }\f");
tryItOut("if((({__noSuchMethod__ getter: function::constructor = #1=[#1#], prototype: (<><x><y/></x></>.__defineSetter__(\"__iterator__\", function () { return  \"\"  } ).unwatch(\"__iterator__\")).__defineSetter__(\"get\", ()) }))) { if ((((p={}, (p.z = <\t><x><y/></x></>)()))[(yield undefined)].isPrototypeOf((undefined.watch(\t\"prop\", new Function))))) } else {\n;\n\f\n<x/>; }");
tryItOut("do throw true; while(((prototype && ((3/0.propertyIsEnumerable(\"__parent__\")))((/a/gi)(<y><z/></y>), *))) && 0);");
tryItOut("/*for..in*/for(const [function::__parent__\f, __count__] = <y><z/></y>.__count__ = [11,12,13,14].filter in *::*) {}");
tryItOut("if((null.throw(<><x><y/></x></>))) {do {break ;window; } while((false) && 0); } else  if (__noSuchMethod__) if(true) {return;(3); } else  if (*) __count__ else {return;gc() }");
tryItOut("try { throw StopIteration; } catch(prototype if new (new Array(1.3))([15,16,17,18].map( /x/ , this\t), @foo)) { let(__parent__ = <x><y/></x>, __noSuchMethod__ =  /x/g ) { (undefined); } finally { throw StopIteration; } ");
tryItOut("let ([, return 1e-81;] = (RangeError())) { yield  /x/g ; } const __count__;");
tryItOut("try { let(__iterator__, __iterator__) ((function(){__count__})()); } finally { constructor = constructor; } ");
tryItOut("{let (constructor, constructor = __noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in false) yield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each'(var <><x><y/></x></> in <x/>) {const prop = function::constructor; }");
tryItOut("if(this.__defineSetter__(\"constructor\", function  __iterator__ (__parent__) { return ('haha'.split).call(*, ) << (<x/>.prop) } )) { if ((__count__ = #3={a:#3#}) = <><x><y/></x></> <<= <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", new __count__)) if(undefined) {;export prop; } else \n if (<x><y/></x>) {(<x/>); } else (*::*); else {return -0\n }}");
tryItOut("undefined;");
tryItOut("{}");
tryItOut("/*infloop*/for(let constructor = (\tfunction () { yield <><x><y/></x></>/*\n*/ /= *.prop } %=function  __count__ (__proto__, prototype)(delete [[]])); (new *).constructor .@x:: <y><z/></y> << *::*; (window.propertyIsEnumerable(\"prop\"))) while((null = (new (Math.pow)(undefined.propertyIsEnumerable(\"constructor\"), <><x><y/></x></>))) && 0){break ; }");
tryItOut("return;");
tryItOut("export __count__\n\nprop;");
tryItOut("/*for..in*/M:for(const (function ([y]) { })().__iterator__ in (Math.pow).call(@foo.constructor, )) {for(let y in [5,6,7,8]) __proto__, prototype;yield; }");
tryItOut("throw <x/>;");
tryItOut("if(true) {( '' );{} } else {var __iterator__;yield <><x><y/>\t</x></>; }");
tryItOut("prop = <x/>");
tryItOut("/*for..in*/for(var [prototype, constructor] = let.__iterator__ = Boolean().hasOwnProperty(\"prop\") in [15,16,17,18].some((<y><z/></y>).__defineSetter__, __count__)) {{}if((new (@foo)())) {const prop, prop; } }");
tryItOut("with({__proto__: new (({}).hasOwnProperty)() ? eval(\"(<x><y/></x>.yoyo( '' ))\", * *= <><x><y/></x></>) : false})var __proto__;");
tryItOut("if(\t(let (constructor = <><x><y/></x></>, x::__proto__) [,,z1])) { if ('fafafa'.replace(/a/g, {}.watch(\"__iterator__\", @foofunction  constructor ()))) {throw [[]];export *; } else throw 0;}");
tryItOut("throw function(id) { return id };throw <x/>;");
tryItOut("if(__proto__) { if ((typeof prototype = ((p={}, (p.z = true)())))) {export *; }} else {prototypeyield arguments; }");
tryItOut("let (__iterator__) { L:do {if(arguments) { if ([*::*]) {let constructor; } else const __parent__ = 1e81;} } while(((<y><z/></y>.unwatch(\"__count__\")) + __proto__ = (this.__defineSetter__(\"__count__\", (1 for (x in []))))) && 0); }");
tryItOut("try { export *; } catch(__noSuchMethod__ if ({})) { (5.0000000000000000000000); } catch(prop if <y><z/></y>) { constructor; } catch(__parent__ if @foo) { {} } catch(constructor) { (prop); } ");
tryItOut("\fL:do /*infloop*/M:while(<y><z/></y> >>= <x/>){if(033) { \"\" {} } else export *; } while((new (new ('haha'.split)())(undefined.__count__++, __proto__ =  /x/ ).prop = ({  { return; } : prototype }) = this -= delete ({a2:z2}) in  /x/g .__parent__) && 0);");
tryItOut("if(window) yield; else  if (<y><z/></y>) let __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("if((eval).call([z1], .__count__)) {break M;return; } else  if ((Object(this @ [,,z1]))) (arguments);");
tryItOut("throw StopIteration;");
tryItOut("try { __iterator__ = prototype; } catch(__proto__) { yield  /x/  @ <y><z/></y>; } ");
tryItOut("/*infloop*/M:for(const [, __noSuchMethod__, , __noSuchMethod__] = (<x/>)(); ({ set __proto__(constructor) { return <><x><y/></x></> } , prototype: 3 }); __parent__) {export constructor; }");
tryItOut("/*for..in*/for(const [1,,] in <x><y/></x>) __proto__ = [1], __noSuchMethod__ = <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(let <y><z/></y> in *) export *;");
tryItOut("M:if(getter = __count__) {yield  \"\" ; } else  if (<x><y/></x> == [1,,]) break L; else {let __count__ = window; }");
tryItOut("/*for..in*/for(__noSuchMethod__.prop in ((Function)([[1]] if (<y><z/></y>) /  '' )))(new Function(\"yield;\"))");
tryItOut("/*for..in*/for(let prop = (.2)((yield <x/>), window .@*:: __proto__) >>> !__noSuchMethod__ =  '' .watch(\"__proto__\", *::*) in prototype = new function  prop (__count__) { return undefined\n < \n \"\"  } ((function ([y]) { })())) {;throw (yield prop, __noSuchMethod__); }");
tryItOut("return (null.hasOwnProperty(\"setter\"));");
tryItOut("if((this.__iterator__)) gc() else  if (( /x/ ['__iterator__'] = [,,z1](<y><z/></y>)\n)) {gc()*::* } else {( /x/ );continue L; }");
tryItOut("/*for..in*/for(__proto__ = (__noSuchMethod__.throw(__proto__)) in  /x/ ) {}");
tryItOut("throw prototype;");
tryItOut("do var prototype = *::*; while(((p={}, (p.z = __count__.__count__ = __proto__)())) && 0)\ndo return undefined\f; while((function(id) { return id }) && 0);");
tryItOut("return;");
tryItOut("yield  '' ");
tryItOut("/*for..in*/for(var prototype in ((-0)\n)) {gc() }");
tryItOut("prop = constructor;");
tryItOut("/*infloop*/for(function(id) { return id };  /x/ ; (uneval(<><x><y/></x></>)).yoyo( /* Comment */prop)) {break ; }");
tryItOut("/*infloop*/M:for(__parent__; (uneval((*.hasOwnProperty(\"prototype\")))); __count__ setter: function (({ prop: ({ __count__: prototype, __proto__: [[({ __noSuchMethod__: __parent__ }), [__count__, __iterator__], ({ __noSuchMethod__: __proto__ }), ({ __count__: __noSuchMethod__, __parent__: __count__ })], constructor, ({ __noSuchMethod__: [, __noSuchMethod__, ] })] }) })) { yield  /* Comment */ \"\"  .@ <><x><y/></x></> } ) {const prop, constructor\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x><y/></x>) break M;");
tryItOut("export __proto__");
tryItOut("return <><x><y/></x></>;\nMath.sin\n");
tryItOut("while(([,,z1]) && 0){/*for..in*/M:for(var __iterator__ = [11,12,13,14].map in  \"\"  @ <><x><y/></x></> % - \"\" ) {{yield prototype; }/*\n*/{export *;const __proto__, __parent__; } } }");
tryItOut("L:switch(([z1,,] for (({__parent__: (true.__lookupGetter__(\"prototype\")) .@  { return <x><y/></\fx> } \n })['let'] in (window / constructor).__defineSetter__(\"__noSuchMethod__\", Function)) for (prototype in __iterator__.prop = [,,z1]) for each (__parent__ in __count__ = prop))) { case 2: break;  }");
tryItOut("export __iterator__;");
tryItOut("return (yield (({}).@*));");
tryItOut("/*infloop*/for(__count__ = yyy; (yield undefined); yyycatch(constructor) { for(let y in []); } ) const prop = <y><z/></y>, __iterator__ = 0/0;");
tryItOut("{{} }");
tryItOut("L: L:if(__iterator__) {export *; }/*for..in*/for(let __noSuchMethod__ = ({__parent__: true.throw(<><x><y/></x></>), __noSuchMethod__ setter: function  __count__ (__noSuchMethod__, __parent__) { export prop; }  }) in (constructor =  '' )) {return;const constructor =  '' , __proto__ = <y><z/></y>; }");
tryItOut("while((<x><y/></x>) && 0)return <><x><y/></x></>; const __parent__\n");
tryItOut("M:if((yield Number(<><x><y/></x></>, *::*))) /*infloop*/for( '' ;  \"\" ; (-1)) {yield; } else  if (-3/0.__lookupGetter__(\"constructor\").__iterator__) (*);");
tryItOut("do /*infloop*/L:for(<x><y/></x>; constructor; __parent__) throw 3; while(([(__proto__ = *)].filter((prop).watch) >>= <><x><y/></x></>.__lookupSetter__(\"constructor\")) && 0);");
tryItOut("/*for..in*/for(__iterator__ = eval(*) in  \"\" ) yield;");
tryItOut("if([11,12,13,14].filter) let __count__, __noSuchMethod__; else  if (({ get __iterator__(__count__, *::*) { return <y><z/></y> }  })) if(({constructor: <><x><y/></x></>}) * function(y) { yield y; return -0;; yield y; }) {continue ;yield ({a2:z2}); } else  if (((new *(<x><y/></x>)).hasOwnProperty(\"__iterator__\"))) {return; } else {switch(#3={a:#3#}) { case <y><z/></y>: __proto__ =  /x/g ;break;  } } else let ([, __count__]) { export *; }");
tryItOut("return;");
tryItOut("switch((<y><z/></y> || @foo)) { case 3: break;  }");
tryItOut("if(this & @foo) { if (function::__parent__.(<><zzz><y><z/></y> === *::*</zzz></>)) {break ; } else const prop;}");
