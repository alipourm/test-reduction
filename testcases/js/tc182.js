tryItOut("{export *;gc() }");
tryItOut("yield;");
tryItOut("if(<x><y/></x>.@foo) {\rcontinue L;\n'haha'.split\n }");
tryItOut("return prototype+=(({prop: , (<><x><y/></x></> && true).__lookupSetter__(\"constructor\") }))\r;");
tryItOut("__proto__ const __count__;");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; (\n(__noSuchMethod__.__iterator__)); ([constructor] = undefined .. this)) {if(<x><y/></x>) __iterator__ = <><x><y/></x></>; else  if (<x><y/></x>) const constructor =  /x/g ; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if(*::*) {yield;var prop; } else  if (<x><y/></x>) (null); else export *; const prop;");
tryItOut("[1,2,3,4].slice\n");
tryItOut("if(this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__).prototype = (new (([1]).watch)(this,  '' ))) { if (this.__defineSetter__(\"__count__\", Math.sin)) return null;} else export *;");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = let (__proto__ =  /x/g ) <><x><y/></x></> in <><x><y/></x></>.unwatch(\"prop\")) /*for..in*/for(const __iterator__ = <><x><y/></x></>.* in <x><y/></x>) {__proto__; }");
tryItOut("with(( /x/g ( \"\" )))");
tryItOut("with({__iterator__: *}){const __noSuchMethod__; }");
tryItOut("try { yield @foo; } catch(__count__) {  } ");
tryItOut("if(<x><y/></x>) {export *;export constructor; } else  if (*) let prop\nif(new function  __proto__ (__parent__)<x/>([[]])) { if (0.1) L:do {(*); } while((try { return @foo; } catch(prototype) {  } ) && 0);} else {const __noSuchMethod__;yield; }");
tryItOut("/*infloop*/for(this;  /x/g ; (__noSuchMethod__.function::constructor setter= [1,2,3,4].map)()) \f{/*infloop*/while([15,16,17,18].some([1,2,3,4].slice, *) >= prop = (-1)){let __proto__; } }");
tryItOut("throw __count__\n");
tryItOut("do gc() while(( /x/g ) && 0);");
tryItOut("if(window) { if (__count__) export __proto__;} else export __count__; const __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(<><x><y/></x></> < 4.; new ((arguments).__defineSetter__)(<x><y/></x>).valueOf(\"number\"); let (__proto__ = false, __parent__ = <x><y/></x>) * * prototype) {window; }");
tryItOut("/*for..in*/for(let __proto__.__count__\r in (((new Function(\"break ;\")))(([({prop: false})].sort((function  __noSuchMethod__ (prototype, constructor) { yield prop =  /x/g  } \r).call/*\n*/)))))throw __iterator__;");
tryItOut("let (prop) { if(arguments) {export constructor;(<x/>).__defineSetter__ } else  if (<><x><y/></x></>) break M; else {<x/>;<x><y/></x>; } }");
tryItOut("/*infloop*/for(__noSuchMethod__; \f'fafafa'.replace(/a/g, 'haha'.split); (\t /* Comment */[1].__parent__).eval(((false++) | constructor))) {throw StopIteration;yield <x/>.__iterator__; }");
tryItOut(" const prototype;");
tryItOut("");
tryItOut("export __count__;");
tryItOut("if((this.__defineSetter__(\"__parent__\", function(y) { yield y; __proto__, __parent__ = @foo;; yield y; }))) { if (false<x><y/></x>\t<x><y/></x> ) {return this;let prototype = *::*; } else \freturn;}");
tryItOut("/*for..in*/for(const [constructor, __count__] = eval(\"const prototype = 4.;\", (\n<y><z/></y>)) in [,,]) {return; }");
tryItOut("/*for..in*/for(const __count__ in (([1,2,3,4].slice)(<x><y/></x> + <x><y/></x>)))export *;");
tryItOut("continue \n/*infloop*/do {throw prop; } while((prototype));");
tryItOut("if([function(y) { yield y; const __noSuchMethod__ = 0.1;; yield y; }].sort([1,2,3,4].map)) return  /x/g ; else {var constructor = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in false) {break ; }");
tryItOut("switch(({ __iterator__: __iterator__, __proto__: prop }) = \n) { default: break; case \nconstructor = <x><y/></x>.constructor = window: break; var constructor = <><x><y/></x></>, __iterator__ =  '' ;break; case let (prop = false) <><x><y/></x></>: export prototype; }");
tryItOut("throw StopIteration;");
tryItOut("L: if((4..hasOwnProperty(\"__noSuchMethod__\"))(<><><><x><y/></x></></></>.@*)) return;");
tryItOut("/*for..in*/for(var [delete, prop] = (yield throw *::*;) in (prop.__parent__ setter= ({}).hasOwnProperty)) {yield default: break; case <y><z/></y>: break; ;break M;break; case function(id) { return id }: break; ; }");
tryItOut("/*for..in*/L:for(prop(<y><z/></y>.__defineSetter__(\"constructor\", new Function)) in (((false).call(let constructor, prototype, yield <x><y/></x>) * this.zzz.zzz)([([11,12,13,14].filter) if ( /x/ )])))var prototype, prop; const true;");
tryItOut("gc() const __count__;");
tryItOut("/*for..in*/L:for(var __count__ in ((function  __noSuchMethod__ (__proto__)\f { yield undefined } )(*::*))){}");
tryItOut("with([[]])yield <y><z/></y>;");
tryItOut("if(-<x><y/></x>) {return false; } else let __proto__, __count__ = <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(const __count__.* in (({ __parent__: __parent__ }) = (__proto__ =  /x/ ))) \r{if(<><>-1 .@ <x/></></>) {(function  __noSuchMethod__ (prototype)1e81).apply! } else {export *; }(null); }");
tryItOut("L:if(<y><z/></y>) { if ( /x/g .throw(@foo)) ;} else {undefined;export *; } const __proto__");
tryItOut("export *;");
tryItOut("with({__parent__: 1e+81}){break ;; }");
tryItOut("{L: {<><x><y/></x></>;export *; } }");
tryItOut("export *; const __iterator__;");
tryItOut("throw [[]];");
tryItOut("if(typeof  /x/g ) { if (__noSuchMethod__ = <y><z/></y>.__defineGetter__(\"__parent__\", [1,2,3,4].map)) {gc() } else yield;}");
tryItOut("if(let (prototype, __proto__ = <x><y/></x>) arguments) yield; else  if (prop = __count__) export *; else {/*for..in*/for(const [__parent__, __count__] = this.__defineGetter__(\"__parent__\", 'haha'.split) in <><x><y/></x></>) return <x/>; }");
tryItOut("gc()throw __proto__;");
tryItOut("( '' );\n\f<><x><y/></x></>;\n");
tryItOut("{var prop = arguments, constructor;export __iterator__; }");
tryItOut("L: (#1#);");
tryItOut("/*for..in*/for(prop = eval(\"var __count__, constructor = <x><y/></x>;\", (null.watch(\"__parent__\", (/*\n*/false).watch).prop)) in (<><x><y/></x></>)[({a1:1})]) {export prototype;yield; }");
tryItOut("{ }");
tryItOut("let(__proto__ = <><x><y/></x></>.*) { var __parent__ = <x><y/></x>, __noSuchMethod__ = *;");
tryItOut("if(<x><y/></x>.@*) {return  \"\" ; }");
tryItOut("{*::*; }");
tryItOut("#1=[#1#];");
tryItOut("/*infloop*/while((p={}, (p.z = <x/>)())){export *; }");
tryItOut("function (prop) { yield true } ");
tryItOut("for(let y in []);");
tryItOut("M:do {return <y><z/></y>; } while((constructor for (__noSuchMethod__ in undefined)) && 0)\n/*for..in*/for(var prototype = __proto__ = ({}) in <x><y/></x>) {yield <x><y/></x>; }");
tryItOut("let (__iterator__, __proto__ =  /x/ [1e+81]) { return ( \"\" )(this, <x><y/></x>); }");
tryItOut("/*infloop*/for(const constructor = {}; [11,12,13,14].filter; <><xxx {__count__}={eval(\"(__count__.__proto__ = (-1)) &= @foo === {}\", [(eval(\"<><x><y/></x></>\", <x><y/>\t</x>)) for (__noSuchMethod__ in <y><z/></y>)])} /></>) if([1]) { if (([] = ({constructor: window, constructor: (-1) }))) {} else __count__}");
tryItOut("/*infloop*/for(let function::__proto__ = <x/>; false; * = yield  /x/ ) {{}return .2; }");
tryItOut("{(<x/>);if(<><x><y/></x></>) {yield; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for([__proto__, __iterator__] = 1e81 in [1]) __noSuchMethod__: <y><z/></y>");
tryItOut("with({}) \rthrow __iterator__\t;");
tryItOut("/*infloop*/for(({ constructor: __noSuchMethod__ }) = __count__ = (__count__ && (-0)) ^= (window @ (function ([y]) { })() ? 'fafafa'.replace(/a/g, (-1)) : prototype = <x/>); <xxx {__count__}={prototype = __count__-=window} />.([] = __noSuchMethod__); [prop, [({ prototype: __count__ }), [__parent__\f, , , , ], ]] = ({__proto__: yield <><x><y/></x></> })) /*infloop*/for([[]];  /x/ ; true) ;");
tryItOut("L: {{} }\n");
tryItOut("M:if(new Error()) constructor;");
tryItOut("if((new function (function::__iterator__, prototype) { yield #1# } (new prototype(__parent__, this)))) {break L; } else {; }");
tryItOut("var __iterator__ = function::get;");
tryItOut("with({prototype: (p={}, (p.z = *::*)())}){ }");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/M:for(const ({ __noSuchMethod__: __parent__ }) = __noSuchMethod__(<x><y/></x>, this) <<= constructor.__iterator__ = <><x><y/></x></>; (({__proto__ getter: (-0) }).prototype = (*::*.watch(\"prop\", /a/gi))); [<x><y/></x> for (constructor in <x><y/></x>)]) {throw this;( /x/g ); }");
tryItOut("/*infloop*/for(({prop: <x><y/></x>, prototype getter: eval });  /x/g ;  \"\"  + <y><z/></y>) {var __count__; }");
tryItOut("@foo;");
tryItOut("return <y><z/></y>;");
tryItOut("/*infloop*/for(__count__; -3/0 instanceof false; __iterator__ = (-1)\n.throw(<ccc:ddd></ccc:ddd>)) /*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in  '' ) {throw  /x/g ; }");
tryItOut("do {break ; } while((({constructor: -3/0 })) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("([z1,,])");
tryItOut("/*for..in*/for(let eval(\"this\", [1,,]).__count__ in ((/a/gi)( '' ))){throw  /x/g ;continue M; }");
tryItOut("/*infloop*/for(prop; *; constructor.prototype = <x/>) {__parent__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(x::__parent__ = function::__count__ = <x><y/></x>, prop; __iterator__; [,]) {\tcontinue M;__parent__ = __noSuchMethod__, __proto__ = <><x><y/></x></>; }");
tryItOut("if((yield prop = <x><y/></x>))  else  if (((prop.prop getter= <x><y/></x>).*)) {;/*infloop*/for(prototype = #2=[*::*]; ({prop setter: function  __parent__ (__count__) { return this }  }); (delete = 3.141592653589793)) {return; } } else do {continue  } while((RegExp()) && 0);");
tryItOut("/*infloop*/while(prototype.__proto__ = 1e+81)(*::*);");
tryItOut("/*infloop*/L:for(eval(\"(<><x><y/></x></>);\", <><x><y/></x></>.valueOf(\"number\")); constructor = ({ prop: __noSuchMethod__, true: __parent__ }); <><x><y/></x></> .@*:: <x><y/></x>) break ;\nvar __count__;\n");
tryItOut("with({prototype: ((p={}, (p.z = [11,12,13,14].sort)())).prop = ((true.unwatch(\"__proto__\")) = false >= <><x><y/></x></>)}){if(<y><z/></y>) {return .2; } else  if (window) <y><z/></y>; else *;export __iterator__; }");
tryItOut("let(prototype, __iterator__ = this.__defineGetter__(\"constructor\", eval)) ((function(){this.zzz.zzz;})());");
tryItOut("while((__iterator__.__iterator__) && 0)L: while(( /x/g ) && 0){return;let __iterator__, prop; }");
tryItOut("with(++this.__defineSetter__(\"constructor\", Function) , (<x><y/></x> for each (__count__ in 5.0000000000000000000000))){if(({}).valueOf(\"number\")) let __proto__, constructor = window; else  if (new 0x99) ; else return <><x><y/><\n/x></>;1.3; }");
tryItOut("L:if(*) {export *;(<x><y/\t></x>).__defineSetter__ } else {break ; }");
tryItOut("L: {<>constructor = *::*</> }");
tryItOut("/*infloop*/for(var ({ prototype: ({ __noSuchMethod__: [({ prototype: __noSuchMethod__ }), , , prototype, __proto__], prototype: [prop, ({ __parent__: ({ __count__: __proto__ }) }), ({ prop.__iterator__: ({ prop: __proto__ }) }), ({ prop: constructor })] }) }) = (this.@*.prop = <x><y/></x> || <x/>); (prototype.__lookupSetter__(\"__iterator__\") *= RangeError()); ((delete window).yoyo((<x><y/></x> = eval(\"yield undefined;\", <y><z/></y>))))) yield;");
tryItOut("/*infloop*/for(let __count__; __count__.(this); __parent__ =  '' ) ");
tryItOut("with(-1)continue L;");
tryItOut("{if(undefined) {Math.pow } else {; }return <x/>; }");
tryItOut("/*for..in*/L:for(const __proto__ in ((function (__count__, __noSuchMethod__) { yield (((__proto__.hasOwnProperty(\"constructor\")) for each (prototype in <><x><y/></x></>) for each (__iterator__ in constructor))) |= try { ; } catch(__noSuchMethod__ if ((p={}, (p.z =  /x/ )()))) { continue L; } catch(__proto__) {  catch  } finally { gc() } .valueOf(\"number\") } )(__proto__ =  /x/ )))if(.2) break M; else  if (getter) {(function  constructor () { return <x><y/></x> } ).call }return <x><y/></x>\n/*infloop*/for([false].some(function  prototype () { return 1e+81 } ); ((uneval((@foo for each (__iterator__ in 0.1))))); new (function  constructor (__noSuchMethod__)<><x><y/></x></>)()) try { for(let y in []); } catch(__proto__ if this) { with({}) for(let y in []); } finally { __iterator__ = prop; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x>) {gc() }");
tryItOut("return;");
tryItOut("return; const prototype;");
tryItOut("yield  \"\" \n");
tryItOut("M:if(window) throw this.eval(@foo); else  if (function ([y]) { }.unwatch(\"__iterator__\")) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in  /x/ ) <><x><y/></x></>;do {return; } while((*) && 0); } else {yield false;export *; }");
tryItOut("if(([] = (prop.__count__))) (<><x><y/></x></> if (<><x><y/></x></>) ? constructor = <x><y/></x> : 5.0000000000000000000000); else  if (false) {L:if( \"\" ) { if (__iterator__) yield; else return;} } else {M:with(\t@foo){gc() } }");
tryItOut("/*for..in*/L:for(const [,,].constructor = (this)((-0), 4.) in null) if(<x><y/></x>) {throw [z1]; }");
tryItOut("{break ; }");
tryItOut("__count__\nreturn [,,z1];");
tryItOut("L:with({prop: yield undefined})return;");
tryItOut("return;");
tryItOut("if(*::*.throw( /x/g )) var __count__ = <x><y/></x>, prototype = <><x><y/></x></>; else {false;yield window; }");
tryItOut("prop = prototype;");
tryItOut("/*infloop*/for(const __count__; (__proto__.__noSuchMethod__); Function(1e4)) return true;");
tryItOut("L:with({prototype:  /x/g })break L;");
tryItOut("with(undefined.eval(undefined))if(<><x><y/></x></>.throw(window)) { if ((new [1,2,3,4].map())) {const __noSuchMethod__ = prototype, prototype = <x/>; }} else {let __noSuchMethod__, __count__ =  { return constructor } ;{} }");
tryItOut("let __parent__");
tryItOut("/*infloop*/for(const prototype; ({}).hasOwnProperty((window for (function::__iterator__ in  /x/g )).call(((yield <y><z/></y>)), ), -3/0); (__parent__ = (p={}, (p.z = new (3)())()))) with({}) {}");
tryItOut("with({}) { prop, __proto__; } ");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("/*infloop*/for(var constructor; -3/0; true) {continue M;throw .2; }");
tryItOut("let (prop = <><x><y/></x></>) { yield; }");
tryItOut("if( /x/g ) export *; else {[1,2,3,4].slice{} }");
tryItOut("/*for..in*/M:for(var [__iterator__, __parent__] = @foo[window] in (<y><z/></y>.@foo)) yield;");
tryItOut("let (prototype = <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")) { yield; }");
tryItOut("/*infloop*/for(var [] = ([ if ({})]); (this.__defineGetter__(\"constructor\", <><x\f><y/></x></>)); #3={a:#3#}) {{} }");
tryItOut("/*for..in*/for(var {yield;return; }.prop in (((new Function(\"{}\"))())(<><x><y/></x></>(<><x><y/></x></>, <x><y/></x>).__proto__ = (constructor = undefined))))return;");
tryItOut("export *;\nexport *;yield 0.1\n\n");
tryItOut("try { this.zzz.zzz;\t } catch(__noSuchMethod__) { throw constructor; } ");
tryItOut("/*for..in*/for(const __iterator__.prop in null.@*) /*for..in*/for(var (W) in ((function (__noSuchMethod__, __count__.__proto__) { return <><x><y/></x></>.throw(<x><y/></x>) } )(eval(\"var __proto__;\", __iterator__) >>> ({a2:z2})))){/*infloop*/L:while(<x/>)let __proto__ = *;throw 1.3; }");
tryItOut("{}");
tryItOut("let (__iterator__ = ({ __noSuchMethod__: prop, prop: __count__ }) = ({ __parent__: __iterator__ }), prototype) { \n }");
tryItOut("/*for..in*/M:for(__noSuchMethod__.__proto__ in (([1,2,3,4].slice)(*::*.unwatch(\"__count__\"))))export __parent__;");
tryItOut("for(let y in [5,6,7,8]) with({}) { (<x><y/></x>); } ");
tryItOut("while(((({__noSuchMethod__: this, __iterator__ getter: function(q) { return q; } }))) && 0){export *; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (p={}, (p.z = (@foo.propertyIsEnumerable(\"prop\")))())) {yield <><x><y/></x></>; }");
tryItOut("break \nexport *\n\n");
tryItOut("with({}) return;");
tryItOut("/*infloop*/for(var prop; this.__defineGetter__(\"__parent__\", *); RegExp(<><x><y/></x></>)) with({__proto__: <x><y/></x>})gc()");
tryItOut("return;");
tryItOut("/*infloop*/while(([1,,].__lookupGetter__(\"constructor\").watch(\"__proto__\", function () { yield delete <y><z/></y> } ).__defineSetter__(\"prototype\", Math.sin))){with({__proto__: \n<x><y/></x> ? <><x><y/></x></> : <><x><y/></x></>})continue ;/*infloop*/do var __count__ = 1e-81, __proto__ =  /x/g ; while(window); }");
tryItOut("{return __parent__.(3/0); }");
tryItOut("this.zzz.zzz;");
tryItOut("let(__parent__, __parent__ = @foo) { throw StopIteration;");
tryItOut("if( \"\" ) function  __count__ \t(__parent__) { __parent__, prototype; }  else {}");
tryItOut("/*infloop*/for(let ({ prop: prototype }) = (this.zzz.zzz); \n([,].valueOf(\"number\")); (({ set __count__() { yield [15,16,17,18].sort((<x><y/></x>).__defineSetter__, undefined.__defineSetter__(\"prop\", function ([y]) { })) }  }))) {yield <><x><y/></x></>;\n/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in this) { }\n }");
tryItOut("if(null.isPrototypeOf(prop)) ; else  if (this.__defineGetter__(\"__noSuchMethod__\", (function ([y]) { }).__defineSetter__)) { }");
tryItOut("/*for..in*/for(const prop in (#1=3/0))  do ;");
tryItOut("({ __parent__: ({ constructor: prototype, prototype: ({ prototype: ({ get: , prototype: prototype }) }) }) }) = __noSuchMethod__;");
tryItOut("with([1,,] |= __parent__){try { return <><x><y/></x></>; } catch(prop if (function ([y]) { })()) { ; } catch(__parent__ if 0) { __count__; } catch(prop if (function(){return <x><y/></x>;})()) {  } catch(__proto__ if (function(){return;})()) { export *; } catch(constructor, __noSuchMethod__) { continue ; }  }");
tryItOut("/*infloop*/for(var __count__; (<x><y/></\rx>.eval(<x/>)); window.__lookupGetter__(\"constructor\")) {;let __count__ = __iterator__, constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <><x><y/></x></>) {(window); }");
tryItOut("throw ({}), __count__ =  '' ");
tryItOut("with((function  constructor (prop) { return; } ([z1]))){}");
tryItOut("let( /x/ ['__count__']) { with({}) __parent__ = prototype;");
tryItOut("/*infloop*/for(var prop = <><x><y/></x></>; <x><y/></x>;  /x/g ) {yield <x><y/></x>; }");
tryItOut("let (({ prototype: __noSuchMethod__ }) = __noSuchMethod__.__parent__ setter= (1 for (x in [])), __iterator__) { {export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in (__parent__ = <y><z/></y>)) (<y><z/></y>)\nyield prototype;");
tryItOut("if(__iterator__) { if ((constructor.valueOf(\"number\")) ^ <><x><y/></x></>) return *; else {throw false;export *; }}");
tryItOut("this.zzz.zzz;");
tryItOut("function (__parent__)prototype const __noSuchMethod__;");
tryItOut("throw 1e81;");
tryItOut("{}\nthrow __parent__.__noSuchMethod__ = 4. .@x:: <><x><y/></x></>;\n");
tryItOut("while((<y><z/></y>\n) && 0){export *;/*for..in*/for(var __iterator__ = ('fafafa'.replace(/a/g, (1 for (x in [])))) in [z1,,]) {} }");
tryItOut("M:if((--constructor = \f<x><y/></x>)) (__parent__); else {var prototype =  /x/g ; }\n");
tryItOut("do {if( '' ) { if (<x><y/></x>) {continue ;return; }} else yield __count__; } while(([({ __proto__: prop })] = -3/0) && 0);");
tryItOut("while((__parent__.(__count__)) && 0)switch(undefined) { default: break;  }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __noSuchMethod__ = true == <><x><y/></x></>) L: {const constructor =  /x/ ;; }");
tryItOut("{const prop = #1=[#1#];switch(((* for each (__iterator__ in 1e-81) for each (__iterator__ in <x><y/></x>)))) { default: continue M;case  \"\" (*::* | <x/>): break;  } }");
tryItOut("/*for..in*/M:for(const (window)(window) in __iterator__) export constructor;\nvar __proto__, constructor;\n");
tryItOut("this.zzz.zzz;");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var ((-0).constructor) in __iterator__) {; }");
tryItOut("M:with((( /x/  if (#1#)).@* == \f++))(prototype);");
tryItOut("\fif(<x><y/></x> .@ *.throw( /x/ )) { if (new ({}).__lookupGetter__(let __proto__;)) var __proto__, __proto__;} else {let constructor\n }");
tryItOut("if((uneval(-0)).__lookupGetter__(\"__count__\").__iterator__) { if (<xxx {__parent__}={(<x><y/></x>.(1.3))} />.(*::*)) {propreturn false; } else {/*infloop*/for(#1# *= false; this.zzz.zzz; @foo ? 3 : <x><y/></x>) return;if(__count__ ^= arguments) {\f__iterator__ = *, constructor = <x><y/></x>;([]); } else  if ((delete 033)) throw <x/>; }}");
tryItOut("let (__iterator__ = 1e81) { /*infloop*/for(__noSuchMethod__ = [z1]; @foo; <><x><y/></x></>)  }\n/*infloop*/M:for(prototype = setter.constructor; eval(\"gc()\", <x><y/></x>); (window >> undefined)) {}");
tryItOut("/*for..in*/for(var __iterator__(5.0000000000000000000000 .@*:: arguments) in  for each (prototype in (({__iterator__: <><x><y/></x></>\f}))) for each (__iterator__ in null)) /*for..in*/for(prototype = yield in 0x99) {export *; }");
tryItOut("gc()");
tryItOut("export __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*infloop*/M:do {{} } while([__noSuchMethod__ = 0/0].map((new Function(\"export *;\"))));");
tryItOut("/*for..in*/for(const prop in 1e4) if(__parent__) { if (<><x><y/></x></>) ;} else __noSuchMethod__, __count__;");
tryItOut("/*infloop*/M:for(__count__ = 3.141592653589793; (); prop.eval( \"\" )) {yield; }");
tryItOut("while(((1e-81 <  \"\" ) = Object()) && 0){3.141592653589793;/*infloop*/while((<x><y/></x> % [,,z1])){new Function } }");
tryItOut("/*infloop*/for(prop; <>#1#</>.(false.__lookupGetter__(\"__iterator__\")try { var __proto__ = 3/0, __iterator__; } finally { yield; } ); [[1]]) /*for..in*/M:for(__count__ in ((new Function)(this.zzz.zzz))){var ({a1:1}), __iterator__;return [,]; }");
tryItOut("if((typeof prototype.__noSuchMethod__ = <x><y/></x>)) /*for..in*/for(var [__iterator__, __parent__] = __count__ in <x><y/></x>++) {return <><x><y/></x></>; } else ;\nvar prototype = __count__, prop = prop;\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var [prop, __iterator__] = [* if ([1,,])] in (new ((1 for (x in [])))(-3/0)).constructor = [function::__parent__, ]) {yield __proto__ = eval(\"<y><z/></y>\", #3={a:#3#});(); }");
tryItOut("if(((-0))[<x><y/></x>]) {(prototype); } else  if ( /x/g  ? __noSuchMethod__\f : <x/>) L:if(this) { if (0/0) yield; else {return;new Function }}");
tryItOut("if(prototype) { if (<><bbb xmlns=\"[,]\"> </bbb></> === (__noSuchMethod__|={return; })) export *;} else {if(([15,16,17,18].map(gc, false))) {; } else  if (<x><y/></x>()) {throw <><x><y/></x></>; } else {\t__count__, prototype = #1=[#1#];var __parent__ = this; } }");
tryItOut("prop = __proto__\n");
tryItOut("/*infloop*/M:for((\n- = <><x><y/></x></>); 0; ([11,12,13,14].map.propertyIsEnumerable(\"__count__\"))) {yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __iterator__ in prototype = void  /x/ ) {/*infloop*/for(<><><ccc:ddd> </ccc:ddd></></>; (window.\tunwatch(\"__proto__\")) :: [11,12,13,14].sort; ({ set __count__ __proto__ (__parent__, ) /x/ ,  get __iterator__ __count__ (prop) { yield; }  })) gc() }");
tryItOut("return;");
tryItOut("M:if((new (typeof <x/>.unwatch(\"__parent__\"))( \"\" ,  /* Comment */ case 3: {}break; case 4: case 5: break; prop))) throw null; else  if (@foo) (((p={}, (p.z = prop)()))());");
