tryItOut("if(this.__defineGetter__(\"function:: /x/ \", eval)) (null)");
tryItOut("M:do { } while((function ([y]) { }) && 0);");
tryItOut("{if(<><x><y/></x></>) { if ( /* Comment */ '' ) {<><x><y/></x></>; }} else ; }");
tryItOut("do 'haha'.split while(((((<x><y/></x> instanceof *::*))())) && 0);");
tryItOut("let (constructor, []) { L: {} }");
tryItOut("if( \"\" ) { if (<y><z/></y>) return <y><z/></y>; else throw <><x><y/></x></>;}");
tryItOut("with(<x><y/></x> ? *::* :  '' )let constructor;");
tryItOut("let (__noSuchMethod__ = *::* << <x/>) { break ; }");
tryItOut("{gc()'haha'.split }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ( /x/ .__noSuchMethod__ = (this for (__count__ in <y><z/></y>)))) {delete getter: (({a1:1})).__defineSetter__ }");
tryItOut("L: {return  /x/g ; }");
tryItOut("if((((*::*.hasOwnProperty(\"constructor\")) for (__proto__ in *) if (__noSuchMethod__)))) export *; else  if ([false].sort(({}).hasOwnProperty))  \"\"  else { }");
tryItOut("{with(0x99)\t{const __proto__, prop = 1e4; } } const prop;");
tryItOut("let (__proto__, __parent__ = *::*) { continue ; }");
tryItOut("let (__parent__ = --(<x><y/></x>.unwatch(\"__proto__\")).__iterator__, [, prototype, __noSuchMethod__, ({ __count__: __count__, __noSuchMethod__: __count__ }), ]) { if(constructor)  else with(*)\tlet __proto__ = __parent__ = <><x><y/></x></>;, constructor = window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__parent__ = this)(yield __proto__) in [window]) {if(#1=({__parent__:  '' })) {} else export *; }");
tryItOut("[1,2,3,4].map");
tryItOut("/*infloop*/while(0x99)throw  \"\" ;");
tryItOut("/*infloop*/M:for(var __proto__; ({ set __count__(__parent__, __noSuchMethod__) { const constructor = []; }  }).__lookupSetter__(\"constructor.unwatch(\\\"constructor\\\")\"); (#0=<><x><y/></x></> :: undefined)) {{}; }");
tryItOut("return;");
tryItOut("if(<x><y/></x>) {gc() } else  if (__parent__) {export __iterator__; }");
tryItOut("do (constructor); while((*::*) && 0);");
tryItOut("do new Function while(( /x/ ) && 0);");
tryItOut("try { throw __iterator__; } finally { yield this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map); } ");
tryItOut("let(case 4: yield ({a1:1});break; ;break; , __proto__ = undefined) ((function(){continue ;})());");
tryItOut("{ }");
tryItOut("/*for..in*/for([prop, __proto__] = let (__count__ = this) <><x><y/></x></> &= <y><z/></y> !== <><x><y/></x></> .@x:: -3/0 in __parent__ *= ({a1:1})) {__count__/*for..in*/for([__count__, constructor] = <x/>.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }) in ({ __count__: __parent__ }) = __noSuchMethod__) {L: gc() const __parent__; }\t }");
tryItOut("/*infloop*/while((this.__defineGetter__(\"__proto__\", function(y) { yield y; var __iterator__ = <x><y/></x>;; yield y; }))){throw __count__; }");
tryItOut("let (__parent__ = <x/>, __parent__ = <y><z/></y>) { var __iterator__ = [[]]; }");
tryItOut("return (1.3 |= <><x><y/></x></>);");
tryItOut("/*infloop*/while(prototype){with({__count__: (__iterator__ = @foo)}){prop } }");
tryItOut("{(__proto__); }");
tryItOut("if((__iterator__ = __noSuchMethod__())) { if (prop|=*::*) var __noSuchMethod__ = [1,,]; else {switch(<x><y/></x>) { default: function::__iterator__ = *; }yield __noSuchMethod__; }}");
tryItOut("L: M:with(undefined ?  /x/ .__proto__ = this : __parent__){return;(__parent__); }");
tryItOut("L: {return <><xxx {prop}={(__count__ .. false)} /></>;yield (~false.yoyo( '' )); }");
tryItOut("if(__noSuchMethod__) ;");
tryItOut("const __proto__, constructor\n");
tryItOut("M:do {return <y><z/></y>; } while((this) && 0);");
tryItOut("__count__ = prototype;");
tryItOut("with({}) throw StopIteration;");
tryItOut("export prototype");
tryItOut("/*infloop*/while(new function(y) { yield y; export *;; yield y; }((window >>> *::*), (<!--yy-->.__count__)))export *;");
tryItOut("if((new (<><x><y/></x></>)())) {let __parent__, prototype = [[]]; } else  if ((yield <><x><y/></x></>.yoyo(undefined))) {var prop, __count__;function(q) { return q; } } else {yield prototype; }");
tryItOut("let (({ __noSuchMethod__: [({ constructor: ({ __iterator__: prop, __noSuchMethod__: __noSuchMethod__ }), __iterator__: ({ __proto__: __iterator__, __proto__: __noSuchMethod__ }) }), prop, ({ __noSuchMethod__: function::__count__ }), , ] }), [({ __iterator__: ({ __proto__: __noSuchMethod__, __noSuchMethod__: __proto__ }), __parent__: prototype }), ({ __parent__: ({ prop: prototype, constructor: __parent__ }), __iterator__: ({ __parent__: __count__, __count__: __parent__ }) })]) { yield  '' ; }");
tryItOut("with({__count__: (null.*).propertyIsEnumerable(\"prototype.__count__\")}){; }");
tryItOut("/*infloop*/do {export *; } while( '' );");
tryItOut("/*for..in*/L:for(//h\nlet __proto__ = this in <x><y/></x>) return;");
tryItOut("var __parent__;");
tryItOut("if((undefined.__lookupSetter__(\"__count__\") ? [{}.__noSuchMethod__] : (@foo)())) {export prop; } else  if ((~(__parent__.(false).watch).isPrototypeOf(__noSuchMethod__ = <y><z/></y>))) {continue M; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) Math.pow");
tryItOut("return;");
tryItOut("if(this.zzz.zzz) /*for..in*/for((+<><x><y/></x></>).__proto__ in ( /* Comment */*)) yield;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ prop: [, , , ({ }: __noSuchMethod__, __parent__: ({a1:1}) })], __proto__: prototype }), prop: ({ __noSuchMethod__: ({ prop: ({ __noSuchMethod__: ({ < <><x><y/></x></> !== truex><y/></x>: __noSuchMethod__, __noSuchMethod__: ({ prototype: constructor }) }) }), __noSuchMethod__: ({ __proto__: __count__ }) }), prototype: ({ prop: __noSuchMethod__, prototype: [, ({ __count__: ({ prototype: prototype, __noSuchMethod__: x::__count__ }), prototype: ({ __count__: constructor, prop: __count__ }) })] }) }) }) = (<x><y/></x>.([1,,])()); (null); <xxx {__noSuchMethod__}={<><xxx>{prototype}</xxx></>} />) {if(undefined) { if (this) {return 1.3;export *; }} else export *;return [].__lookupGetter__(\"__count__\"); }");
tryItOut("{return; const __count__;; }");
tryItOut("with({}) { with({}) prop = __proto__; } ");
tryItOut("/*infloop*/for(let __noSuchMethod__; __noSuchMethod__.constructor = (new (yield;)(__parent__, <><x><y/></x></>))//h\n; new Math.sin(\nnull)) {if(yield [,,z1] >>= prop) {return;export prop; } else {([z1,,]); } }");
tryItOut("with(1e4){return this;return; }");
tryItOut("var __noSuchMethod__;");
tryItOut("gc()");
tryItOut("export __parent__;");
tryItOut("/*infloop*/L:while(eval(\"yield;\", (constructor.__count__ = <y><z/></y>)(<x><y/></x>\f))){M:if([]) { if (*::*) {yield <x><y/></x>;export *; } else return window;}return; }");
tryItOut("M:switch(Boolean(this)) { default: case ((p={}, (p.z = @foo)())): this;case 7: case 4:  }\n/*infloop*/L:do {} while(new ((__parent__).watch)(0x99 >>=  /x/ , <x><y/></x>))\n");
tryItOut("export *");
tryItOut("do {/*infloop*/while((new (prototype)(*, <x><y/></x>))){export *; }if(1e4) {const constructor, __parent__ = #1#;yield undefined; } else  if (<y><z/></y>) {let __parent__ = <y><z/></y>; } else {} } while(((__noSuchMethod__.__noSuchMethod__%=__iterator__.function::__noSuchMethod__)) && 0);");
tryItOut("with((__count__ += __noSuchMethod__ ? __iterator__ : *::*)){/*for..in*/for(let constructor = <x/> in <><x><y/></x></>) {gc() } }\nif((const prototype, prototype =  \"\" )) {new Function } else (<x><y/></x>).apply");
tryItOut("/*infloop*/for(const constructor; (p={}, (p.z = ({ __parent__: [__iterator__, , constructor] }))()); <><x><y/></x></> +=  /x/g ) const constructor;");
tryItOut("/*infloop*/do export __count__; while(@foo);");
tryItOut("break M");
tryItOut("/*for..in*/for(const let = ((new [1,2,3,4].slice(( ''  ? __iterator__ : window), null)).valueOf(\"number\")) in __proto__ = ((__proto__.(<y><z/></y>)))[<x><y/></x>.(arguments)]) { { return prop.__iterator__ = [11,12,13,14].map } return <x><y/></x>.@*; }");
tryItOut("/*infloop*/do {if(window) (this); else  if (<><x><y/></x></>) {return <><x><y/></x></>; } else {return;yield; } } while(RegExp());");
tryItOut("/*infloop*/for(yield 3.141592653589793 != \n<><x><y/></x></>; new Date(yield); new (false)(<><x><y/></x></>, true) >> <><x><y/></x></>.constructor) if(<x><y/></x>) {(<x><y/></x>);(<x/>); }");
tryItOut("if((void (<x/>.constructor))) { if (prototype = __parent__) {yield;export *; } else {yield; }}");
tryItOut("{}");
tryItOut("with(<><{constructor}><employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy</{constructor}></>)/*infloop*/L:for(var __count__; yield this.__defineGetter__(\"__iterator__\",  /x/g ); [15,16,17,18].filter(gc, <><x><y/></x></>)) {throw true;yield <x><y/></x>; }");
tryItOut("'haha'.splittry { (false); } finally { return <x><y/></x>; } ");
tryItOut("/*infloop*/do {/*for..in*/M:for(const [__count__, prototype] = <y><z/></y> in <><x><y/></x></>) {constructor = 3.141592653589793, __proto__ = <><x><y/></x></>; } } while((#0=({__proto__: new .2()})).yoyo(<>window</>.((0)())));");
tryItOut("let(x::__parent__) { ");
tryItOut("if(window) { if (<><x><y/></x></>) {gc() }} else this;");
tryItOut("return -0;\n/*infloop*/for(__parent__ = <x><y/></x>; <><x><y/></x></>; @foo) {export *; }\n");
tryItOut("/*infloop*/do {{}/*for..in*/for(__noSuchMethod__ in <y><z/></y>) {yield; }\nlet prototype = <y><z/></y>, __count__; } while(({a2:z2}).__noSuchMethod__ = <><x><y/></x></>);");
tryItOut("/*for..in*/for(const __count__ = <><x><y/></x></> %= * in ( /x/g )[<x><y/></x>]) L:with({__parent__: (-0)}){throw <><x><y/></x></>; }");
tryItOut("if(({ prototype: [[, , , , ]], __parent__: [, ({ ({ __count__: [prop] }\f): prop, __proto__: ({ prototype: ({ __parent__/*\n*/: __noSuchMethod__ }), __parent__: __proto__ }) }), , ] }) = eval(\"*\", this.__defineGetter__(\"prop\", function  <!--yy--> (__noSuchMethod__) { this; } ).@*)) export *; else  if (*) {prop = *::*\nwith({}) {} } else {if(__count__) export true; }");
tryItOut("/*infloop*/L:while( for (__proto__ in __count__ = __iterator__.isPrototypeOf([1,2,3,4].slice)) for each (__proto__ in <y><z/></y>) for each (constructor in continue ; = <y><z/></y>) for each (__count__ in (({a1:1}) for (prototype in __count__))) if (*::*)){L:if((new [1,2,3,4].map()).unwatch(\"__iterator__\")) export prop; else  if (new Exception()) {export *; } else {gc() } }");
tryItOut("/*infloop*/L:for([ { yield __proto__ = <x/> } ] = __noSuchMethod__; eval(\"true\",  \"\" ); (uneval(<><x><y/></x></>))) {Math.powreturn; }");
tryItOut("L:do let __iterator__ = <><x><y/></x></>, __iterator__; while((__parent__) && 0);");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: \fprototype, prop: prototype }); \n<x><y/></x>.(({a2:z2})); ! /* Comment */<><x><y/></x></>) continue ;");
tryItOut("while(((p={}, (p.z = ({__parent__: <x/>}))())) && 0){ catch  }");
tryItOut("if(__parent__ = <y><z/></y>) {var __parent__ =  /x/ , constructor; } else  if ((constructor = [,])(this)) {__iterator__ = <>[1e4 for (constructor in @foo)], <x><y/></x></>, prop = <><x><y/></x></>; } else do {break L; } while(((null <= <x><y/></x>.(null))) && 0);");
tryItOut("return;");
tryItOut("var __proto__ = #3={a:#3#}");
tryItOut("{if(<x><y/></x>\t) { if (this) {(<><x><y/></x></>).watch } else __noSuchMethod__;}throw ({ __proto__: ({ __proto__: __count__ }), __iterator__: ({ __noSuchMethod__: prop, __proto__: prototype }) }) = (__proto__ = prototype).propertyIsEnumerable(\"__parent__\"); }");
tryItOut("L:do (window); while(((033.throw(*))) && 0);switch(@foo) { default:  }");
tryItOut("/*for..in*/for(let __parent__ in default: gc()) throw [1,,];");
tryItOut("{if(void @foo.yoyo(*::*) ^ ( /* Comment */<><x><y/></x></>)) {yield <><x><y/></x></>; } else  if (prop\n >> +<y><z/></y> instanceof [,,z1].valueOf(\"number\")) {gc()yield; } }");
tryItOut("export *;");
tryItOut("if((-1) if ((new (([,].valueOf(\"number\")) in (eval)( /x/g , <y><z/></y>))(true)))) { if ([, [({ __proto__: ({ __count__: ({ __iterator__: constructor, __count__: __count__ }), each: [__count__] }), __count__: constructor }), , , , ], ({ constructor: (this.__defineSetter__(\"prop\", [1,2,3,4].slice))['constructor'] })] = constructor) {export <x><y/></x>; } else /*infloop*/do {let __noSuchMethod__ = <x/>;gc() } while(window);}");
tryItOut("{if(this) 1.3; else  if (__proto__) gc() }");
tryItOut("{var __parent__ = prop; }");
tryItOut("this.zzz.zzz;");
tryItOut("break ; const prototype;");
tryItOut("prototype;");
tryItOut("M:if(@foo) yield; else  if (this) yield;");
tryItOut("while(((033) & <><x><y/></x></> %  '' ) && 0){try { ; } catch(prop if (function(){export *;})()) { let __parent__, __noSuchMethod__; } catch(prototype) { (window); } export __proto__; }");
tryItOut("L:switch(<xxx>{__noSuchMethod__}</xxx>) { case 4:  }");
tryItOut("if(eval(\"this % 0/0\", this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty))) {M:if(<x><y/></x>.valueOf(\"number\"))  else  if (__count__.__lookupSetter__(\"__proto__\")) var __iterator__ = window, __noSuchMethod__ = @foo; } else {do throw  /x/ ; while(((new (<x><y/></x>)( /x/ ))) && 0); }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("M:if((prop.({}))) { if (0x99.valueOf(\"number\")) { } else {return <><x><y/></x></>; }}");
tryItOut("L:switch(1e81.propertyIsEnumerable(\"__proto__\")) { default: (~033); /* Comment */0case 5:  }");
tryItOut("if(((<y><z/></y>++) in null ^ <><x><y/></x></>)) {throw <x><y/></x>;let __iterator__, __iterator__ = [z1]; } else  if (<x><y/></x>.eval(<x/>) ? ([z1,,] .@ prototype) : window.(false{throw *::*;function  __parent__ (\t__noSuchMethod__) { yield 1e81 }  } )) /*infloop*/for(__count__; 0;  /x/ ) {; } const prop;");
tryItOut("/*infloop*/for(const ({ __parent__: ({ set: prop, __iterator__: ({ __parent__: ({ __noSuchMethod__: x::__count__, __count__: ({ __iterator__: [], __iterator__: __count__ }) }) }) }) }) = .(new Array(<x><y/></x>, 0.1)); new Function; ((<><x><y/></x></>).@foo)) {yield; }");
tryItOut("{try { yield false; } finally { let <><x><y/>\n</x></> =  \"\" , prototype = [,,z1]; }  }");
tryItOut("/*for..in*/for(const prop = * in *::*) {__count__ = prototype; }");
tryItOut("/*infloop*/for((#0=[z1] for (__count__ in (this.throw( '' ))) for each (__iterator__ in this.throw(false))//h\n for (__parent__ in 1e+81) if ((-0))); 1e-81 |= [15,16,17,18].sort(function () { <><x><y/></x></>; } , prototype); (constructor|=({a2:z2}))) {return;continue ;\nyield  /x/g ;\n }");
tryItOut("if((window ? #1=[#1#] : prototype)) /*for..in*/M:for(var constructor in 1e+81) {(<x/>);case <><x><y/></x></>: yield; }continue M; else  if ((__noSuchMethod__.constructor = ([11,12,13,14].some))) {let prototype;return; }");
tryItOut("/*for..in*/for(const prototype = 4. in new (#1#)(\t)) {const prototype = <><x><y/></x></>; }");
tryItOut("M:if(this) {{} } else  if (__noSuchMethod__) {continue ;{} }");
tryItOut("/*infloop*/\tdo {export *; } while( typeof );if([15,16,17,18].filter(((1 for (x in []))).call, (eval(\"true;\", constructor)))) /*infloop*/for(const __iterator__; window.valueOf(\"number\"); ([1,2,3,4].slice()) - ((-1) /= .2)) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const new <y><z/></y> != ((uneval(<x><y/></x>))) in this.zzz.zzz) /*for..in*/for(var __noSuchMethod__ in ((Math.sin)((this.__defineGetter__(\"__iterator__\", /a/gi))))){const __parent__ = <x><y/></x>, * = @foo;export *; }");
tryItOut("if(( /x/  >>> <x/>)) throw <><x><y/></x></>; else  if (this.zzz.zzz) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((/a/gi)()['__noSuchMethod__']) in -3/0 | (-0)) with({__proto__:  \"\" }){return; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (constructor = <x/>.valueOf(\"number\")) in (this.zzz.zzz.propertyIsEnumerable(\"__proto__\"))) {if(prototype >= __proto__) export *; const __count__; }");
tryItOut("for(let y in []);");
tryItOut("while((<bbb xmlns:ccc=\" /x/g \"><ccc:eee></ccc:eee></bbb>) && 0){ }");
tryItOut(";");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <xxx {__proto__}={<><x><y/></x></> == __iterator__} />.((#1=[#1#]\n))) let (constructor) { {return __parent__;; } }");
tryItOut("throw *;");
tryItOut("M:if((__proto__.(undefined).__lookupGetter__(\"constructor\"))) return; else {gc() }");
tryItOut("if(<x><y/></x>) { if (null) {;(this); } else {}}");
tryItOut("/*infloop*/while((({ constructor: [, , , ] }) = function (__proto__, constructor)function(id) { return id }((new Number()), <><x><y/></x></>))){return  /x/ ;//h\n }");
tryItOut("switch(prop = (__iterator__.__count__)) { case 8: case 8: return (function ([y]) { })();case constructor: default: return;export *;break ;break; break; case this.zzz.zzz: break;  }");
tryItOut("/*infloop*/do {yield *::*; } while(prop = constructor.yoyo(new Object( '' )));");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = (-1 === <x/>[new (function () { return <y><z/></y> } )()]) in (({a1:1}))()) {export *;if([,]) { if (({a2:z2})) yield undefined;} else {const __iterator__ = <x><y/></x>; } }");
tryItOut("/*infloop*/for((new ({ get __parent__ __parent__ (constructor) { (<><x><y/></x></>); } , function::__iterator__: __iterator__ }).eval()()); (@foo.hasOwnProperty(\"prop\")) :: yield (this.zzz.zzz); ({__proto__ getter: [1,2,3,4].map(),  get prototype(__iterator__)__parent__ = <x><y/></x> })) {yield;M:if(<x><y/></x>) export *; else  if (@foo)  else {break ; } }");
tryItOut("/*infloop*/while(<x/>){let gc() = *::*, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("if(prop = this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) {}\n(undefined);\n");
tryItOut("yield;");
tryItOut("if(__count__) {(this);@foo; }");
tryItOut("/*for..in*/for(var constructor in <><x><y/></x></>) throw  '' ;");
tryItOut("/*infloop*/M:for(let prototype; [1]; [11,12,13,14].filter) /*infloop*/for(var ({ __proto__: [], prototype: __parent__ }) = new (({}).__lookupGetter__)(); (eval(\"<y><z/></y>.eval(<><x><y/></x></>)\", ((<x/>).__defineSetter__))); ) let __parent__, __parent__ = undefined;");
tryItOut("{<y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in <x/> >= <x/>) undefined;");
tryItOut("{for(let y in [5,6,7,8]) (prototype)\t.call }");
tryItOut("{{} }({}).__lookupGetter__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\t__count__ in [1]) gc const prototype;");
tryItOut("L:do /*infloop*/for((({}).hasOwnProperty).apply; <xxx>{prototype}</xxx>; __parent__ = prototype) throw __iterator__; while((function ([y]) { }) && 0);");
tryItOut("let (prototype, __count__ = <y><z/></y>) { var constructor =  /x/ ; }\n\tL:while((<x><y/></x>) && 0)break ;\n");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __count__ = (undefined) in (<><x><y/></x></>)) {let prototype; }");
tryItOut("if(( /x/g  <<= #3={a:#3#}.valueOf(\"number\"))) { if (<y><z/></y>.hasOwnProperty(\"__count__\")) /*infloop*/for(let prototype = <><x><y/></x></>; [,,z1]; <><x><y/></x></>) {gc() }} else {(<><x><y/></x></>).__defineSetter__(prototype); }");
tryItOut("let(prototype = __noSuchMethod__ = <><x><y/></x></>) { try { export prop; } finally { var __count__ = undefined; } ");
tryItOut("{with({prop: <><x><y/></x></>.__noSuchMethod__ = this}){gc()*; }return (eval(\";\", (prototype = undefined))); }");
tryItOut("/*infloop*/for(const ({ prototype: constructor }) = \n__count__; ([1,2,3,4].slice)(); (__count__.__count__ = prototype = <><x><y/></x></>)) ;yield;");
tryItOut("if((<x><y/></x>)().valueOf(\"number\")) {/*for..in*/for(let __proto__ in ((function (function::prototype)[z1])((new (undefined)( \"\" , <x><y/></x>))))){throw .2; } }");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype in (function(y) { yield y; {}; yield y; })() /= ([('haha'.split)()].map(Function))) export __parent__;");
tryItOut("let (__count__, constructor) { let __iterator__ =  '' , __proto__ = .2; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:while(((new  /x/ \n())) && 0)with(({constructor: <><x><y/></x></> }))yield;");
tryItOut("throw  \"\" \n/*for..in*/for(let __parent__ = (__parent__.prop = *) in window) <y><z/></y>;");
tryItOut("if((__count__.__lookupGetter__(\"prototype\"))) eval");
tryItOut("{}//h\n");
tryItOut("/*for..in*/for(__count__ in *) {gc() }");
tryItOut("/*for..in*/for(let __parent__ =  /* Comment */* in (((1 for (x in []))).apply)) {yield ({a2:z2});export *; }");
tryItOut("/*infloop*/for( typeof ; <><x><y/></x></>; *::*) {function  __count__ (prop, __parent__) { yield  /x/g  }  }");
tryItOut("{constructorthrow undefined; }");
tryItOut("throw  /x/g ;");
tryItOut("with({__parent__: false.unwatch(\"__proto__\")})(<x><y/></x>);");
tryItOut("__noSuchMethod__.__iterator__ = function::__parent__;");
tryItOut("if((*::* if (<x/>))) export *; else  if (@foo) {<bbb xmlns:ccc=\"*::*.propertyIsEnumerable(\"__proto__\")\"><ccc:eee></ccc:eee></bbb> } else throw this;");
tryItOut("/*infloop*/L:for(let ({ __iterator__: __iterator__ }) = (__parent__.__noSuchMethod__ = (3.141592653589793.__defineSetter__\t(\"prop\", function  constructor () { return true } )) , this.__defineSetter__(\"__noSuchMethod__\", this)); this.zzz.zzz; (__parent__ = (p={}, (p.z = <><x><y/></x></>)()))) return;");
tryItOut("throw prototype;");
tryItOut("if('fafafa'.replace(/a/g, (1 for (x in [])))) { if (__count__.__parent__ getter= __proto__) { } else gc()}");
tryItOut("/*for..in*/for(((((({prop: undefined})) for each (yield in  /x/g ) for (prototype in 1.3))))((constructor, prop = __parent__)) in ((function ()<{__count__}>__iterator__</{__count__}>)((( /x/ ).call(null, []).__count__) === (__parent__ .@x:: <x><y/></x>)))){with({ :  '' }){yield window;( /x/g ); } }");
tryItOut("/*infloop*/for((__proto__ :: '<><x><y/></x></>.__count__); __count__ .. *; (yield __parent__)) {export *;\t{} }");
tryItOut("if((yield (yield <><x><y/></x></>))) ; else  if (__proto__.prototype+=*::*) L:if(null += __parent__) {case <y><z/></y>:  } else  if (undefined.propertyIsEnumerable(\"prop\")) {{} } else {export *;\t }");
tryItOut("__count__ = __count__;");
tryItOut("let(__count__) ((function(){throw StopIteration;})());");
tryItOut("export __iterator__;\nthrow constructor;\n");
tryItOut("if((this .@*:: <x><y/></x>)) __noSuchMethod__, prop;");
tryItOut("gc() const __proto__; const __parent__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (false << eval(\"<x/>\", 0.1))) __parent__ = window;");
tryItOut("/*infloop*/M:for( \"\" ; <x><y/></x>; *::* ? <x><y/></x> :  \"\" ) {if( /x/ ) {this; } else  if (<y><z/></y>) (__noSuchMethod__); else (3); }");
tryItOut("return <x/>.__parent__-=(p={}, (p.z = 033)());");
tryItOut("if((<x/>.@*)) { if ((false)) __count__ = <x/>;} else {throw __proto__; }");
tryItOut("{; }");
tryItOut("if(033 .@x:: this) { if (__proto__ =  /x/g .*) {{(*::*); } } else __parent__ getter: (new Function(\"<x><y/></x>;\"))}");
tryItOut("/*for..in*/for(const constructor(-3) in <><xxx {prop}={new true(1.2e3, )} /></>) {with({__count__: #3={a:#3#}})break M; }");
tryItOut("with((new (eval).apply())){/*for..in*/for(var prototype in window) break ; }");
tryItOut("with(prototype > *::*.valueOf(\"number\")){/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in *) yield; }");
tryItOut("/*infloop*/L:for(( /* Comment */[1,,]) && <y><z/></y>; ((__count__ >>> <x><y/></x>).isPrototypeOf(constructor.constructor = @foo)); prop = *) {if(false) { if (<x><y/></x\f>) throw  '' ;} else {{}const <><x><y/></x></>; } }");
tryItOut("/*infloop*/while(window)constructor = @foo, __proto__");
tryItOut("L: continue ;");
tryItOut("/*infloop*/do (<x><y/></x>); while(({}))\n/*for..in*/for(var prototype in []) export *");
tryItOut("");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = this in #3={a:#3#}) var __parent__;");
tryItOut("function(q) { return q; }const __parent__;");
tryItOut("{__count__ = __iterator__;with( '' .@foo){ /x/  } }");
tryItOut("/*for..in*/for(var constructor in {}) {return <y><z/></y>; }");
tryItOut("/*infloop*/while(([15,16,17,18].map(new Function, (uneval(__iterator__)))))");
