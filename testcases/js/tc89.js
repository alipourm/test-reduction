tryItOut("/*\n*/if([(prototype.(false))].some((undefined).call)) ; else  if ((eval(\"[,,]\", @foo) >= (__parent__ = null))) {throw constructor;return; }");
tryItOut("/*infloop*/M:while(prototype){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>) export *;");
tryItOut("yield this;<><x><y/></x></>;");
tryItOut("__noSuchMethod__; const constructor;");
tryItOut("/a/gi");
tryItOut("with(({__parent__:  /x/  *= [1,,]}))return  __iterator__true;");
tryItOut("/*infloop*/for(var __noSuchMethod__; ([prop = ((0.1)( { ; } )) if (*::*)]);  /* Comment */__proto__) if(#1=[#1#] ||  /x/g ) { if (__iterator__.__lookupGetter__(\"__count__\")) /*infloop*/while(<x><y/></x>){export *; }} else {yield;M:do {return;break ; } while((null) && 0); }");
tryItOut("/*infloop*/for(var __iterator__; window; ({a1:1})) {const __count__ = [z1,,]; }");
tryItOut("while((((eval(\"(-1) >>> arguments\", new (Math.pow)( /x/g ))++))) && 0)const __iterator__ = this;");
tryItOut("for(let y in [5,6,7,8]) try { prototype = __iterator__; } finally { try { <x><y/\n></x>; } catch(__count__ if (-0)) { return; } catch(__iterator__) { Function }  } ");
tryItOut("if(__noSuchMethod__ = (new Iterator())) ");
tryItOut("if(<xxx {constructor}={null} />.(((1 for (x in []))).apply) , #1=({__noSuchMethod__: <x><y/></x>})) {let __parent__ = 1.3; } else  if (((++eval(\"/*infloop*/for(var __proto__ = function ([y]) { }; false; <><x><y/>\\f</x></>) null;\", window))())()) with((0/0.__iterator__))const __iterator__ = false, __parent__;");
tryItOut("yield; const __iterator__;");
tryItOut("/*infloop*/while(({a2:z2}) === prop.([,]))(<y><z/></y>);");
tryItOut("/*for..in*/for(let ([1.2e3].some((window).__defineSetter__))['constructor'] in <x><y/></x>) ;");
tryItOut("/*for..in*/for(let [, constructor] = 3.propertyIsEnumerable(\"__proto__\").__defineGetter__(\"prototype\", 'haha'.split) in <y><z/></y>) export __iterator__;");
tryItOut("if({}) {return; } else  if ( \"\" ) yield  /x/ ; else yield <y><z/></y>;");
tryItOut("{var prop, constructor =  \"\" ; }");
tryItOut("L: {}");
tryItOut("return <x/>;\nif(this) { if (#3={a:#3#}) {; } else export *;}\n");
tryItOut("/*for..in*/L:for(var [constructor, __parent__] = ({}) in <x><y/></x>) {yield <><x><y/></x></>; }");
tryItOut("M:if(this) { if (@foo) Math.sin else {;export __iterator__; }}");
tryItOut("M:if(3/0) { if ((new Function(\"return @foo;\"))(this, [1,,])) gc() else {yield; }}");
tryItOut("throw __parent__;");
tryItOut("if(undefined.watch(\"__proto__\", 'haha'.split).throw(Function)) {\t if ((this.__defineGetter__(\"__count__\", /a/gi))) /*for..in*/for(const [__noSuchMethod__, __iterator__] =  ''  in <x/>) {gc() } else {gc() }}");
tryItOut("yield __noSuchMethod__.__parent__ = <{__iterator__}><bbb xmlns=\"false.valueOf(\"number\")\">yyy</bbb> </{__iterator__}>;");
tryItOut("M:if((eval)()) __noSuchMethod__ = *::*; else  if (((-1).*)) export *;");
tryItOut("{ }");
tryItOut("/*infloop*/for(@foo; this; undefined) {__proto__ =  /x/g , __parent__ = window; }");
tryItOut("/*for..in*/for(var [constructor, __count__] = ( '' .__lookupGetter__(\"__count__\")) /= <><x><y/></x></> in [z1]) { }{}");
tryItOut("throw StopIteration;");
tryItOut("with(~({__noSuchMethod__ getter: (*::*).call }))(#1#).apply\n;\nexport prop\n");
tryItOut("M:if(({__proto__: ([(this.__defineSetter__(\"__proto__\", (new Function(\"function  __iterator__ () { yield <x/> } \")))) for each (prototype in @foo)]), prototype getter:  \"\"  })) { if ((this)[null]) do {gc() } while(((eval(\"<x><y/></x>\", <x><y/></x>))) && 0); else ;}");
tryItOut("if((({a2:z2}).eval(<x/>))(__count__ || <><x><y/></x></>, false) ^= true * <x><y/></x> * ({a2:z2}).valueOf(\"number\")) { if (<x/> |= true) ( /* Comment */__proto__ = constructor);} else {export *;\t }");
tryItOut("L: M:if(false) throw 1e+81;");
tryItOut("/*for..in*/L:for(const __count__ in (((new Function(\"gc()\")))(this)))__iterator__ = null;");
tryItOut("return\n;/*\n*/");
tryItOut("{} const __noSuchMethod__;");
tryItOut("let (__iterator__) { return <><x><y/></x></>; }");
tryItOut("{export prop;yield; }");
tryItOut("export __noSuchMethod__;continue ;yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let set in (new ;(Exception(<x><y/></x>)))) {if(void (<><x><y/></x></>--)) @foo else {/*for..in*/for(__proto__ in ((function  prototype ()<><x><y/></x></>)(<y><z/></y>))) }/*for..in*/for(__noSuchMethod__ in -3/0) gc() }");
tryItOut("/*for..in*/L:for(let __count__ in (((uneval(++<><x><y/></x></>)))((__count__ = this)))){__proto__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in <x><y/></x>) {{} }");
tryItOut("gc() const __iterator__;");
tryItOut("prop = __iterator__;");
tryItOut("/*infloop*/for(let __iterator__; return; 'fafafa'.replace(/a/g, function (__parent__, __parent__)<x><y/></x>).valueOf(\"number\") / __noSuchMethod__) /*infloop*/for(let prop;  \"\" ; <x><y/\f></x>) {[1,2,3,4].map }");
tryItOut("let(({ __iterator__: ({ __parent__: \t[, prototype] }) }) = (RangeError((#1#.__parent__), prototype)).propertyIsEnumerable(\"prototype\")) { return;");
tryItOut("/*infloop*/while(({constructor: <><x><y/></x></>})){new Function }");
tryItOut("{gc() const prototype; }");
tryItOut("with({__parent__: (<><x><y/></x></> >>> false)}){const constructor = __proto__;return; }");
tryItOut("/*for..in*/for(constructor in constructor) {with({}) {  } __proto__, __noSuchMethod__; }");
tryItOut("(this);");
tryItOut("/*for..in*/M:for(var ([<x><y/></x>].some(eval)).__proto__\t in ++(<x><y/></x>[null/*])) gc()");
tryItOut("/*infloop*/for(__count__; (<x/> ? null : {}) !== new (function (__iterator__, __iterator__) { yield window } )(false, prototype); \n(#1=[#1#])) {L:if(yyy) { if (@foo.\tunwatch(\"__iterator__\")) const __count__;} else {gc() } }");
tryItOut("/*infloop*/M:for(__proto__; <><x><y/></x></>.hasOwnProperty(\"__iterator__\"); <><x><y/></x></>\n) {return;(null); }");
tryItOut("if(__proto__.__proto__ =  /x/g  >> <y><z/></y>) { if ([({ __iterator__: 1e81, function::prop: constructor }), , __proto__, [], ] = (gc).call( '' , 3.141592653589793, <><x>\t<y/></x></>)) prototype} else {const __count__ = window; }");
tryItOut("/*for..in*/for(let [constructor, constructor] = __parent__ in __iterator__) (<><x><y/></x></>);");
tryItOut("with({prop: (*.@*)}){with(prop)yield;yield;(*); }");
tryItOut("with(this){with(__iterator__ = __noSuchMethod__){throw #1#;throw prototype;//h\n }throw <x/>; }");
tryItOut("throw prototype;");
tryItOut("for(let y in []);");
tryItOut("{export __proto__; }");
tryItOut("/*infloop*/L:for(const [, [], prop, ({ __count__: __count__ })] = (__count__.__parent__);  /x/ .propertyIsEnumerable(\"__iterator__\"); eval(\" \\\"\\\" \", false)) {((yield __count__))if([z1,,]) {return *; } else  if (<x><y/></x>) {{} } }");
tryItOut("/*for..in*/for(<ccc:ddd><employee id=\"1\"><name>Joe</name><age>20</age></employee></ccc:ddd> in ((eval)(((yield undefined >> this.propertyIsEnumerable(\"__count__\"))))))(constructor += <><x><y/></x></>);");
tryItOut("return window;");
tryItOut(";");
tryItOut("M:if([0/0.__defineGetter__(\"__noSuchMethod__\", gc)]) {/*infloop*/L:do ; while(null <<= __proto__); } else /*infloop*/L:do {window; } while((p={}, (p.z = <x><y/></x>)()));");
tryItOut("{gc() }");
tryItOut("{; const prototype; }");
tryItOut("if((-0).watch(\"constructor\", ({}).hasOwnProperty)) let prop = this; else  if ([null for each (__noSuchMethod__ in false)__noSuchMethod__]) throw 3/0; else return null;");
tryItOut("if(this.__defineSetter__(\"constructor\", [1,2,3,4].map)) {export prototype;var __proto__ = (-0); } else __iterator__ = __count__, prototype = *::*");
tryItOut("M:switch(undefined.watch(\"prop\", (#1=[#1#]).watch) === <><x><y/></x></>.propertyIsEnumerable(\"constructor\")) { default:  }");
tryItOut("{return window; }\nexport __iterator__;\n");
tryItOut("/*infloop*/for([[1]]; 0/0; *) export *\n{}\nvar prop, __noSuchMethod__ = <><x><y/></x></>");
tryItOut("return;");
tryItOut("L:with({prop: <><x><y/></x></>})return;");
tryItOut("do const __parent__; while((<x><y/></x> .@*:: <x><y/></x>) && 0);\nthrow false;\n");
tryItOut("L:switch((((function ([y]) { })()).call(this, ))) { default: __count__;break;  }");
tryItOut("{function (prototype, __count__) { return <><></></> } let (<y><z/></y>;, * = this) { function  prop (try { {} } finally { let prototype = <x><y/></x>; } ) { function(y) { yield y; var __count__;; yield y; } }  } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(constructor)export *;if(window) {} else  if (undefined) {continue L; }");
tryItOut("let (__proto__) { if( /x/ ) {gc() } else  if (033) yield window; else return *; }");
tryItOut("/*for..in*/for(const __parent__ in (('haha'.split)((new ((prototype.__proto__))((p={}, (p.z = <x><y/></x>)()), __parent__) &= {}))))M:if((p={}, (p.z = new (Function)(<><x><y/></x></>, <><x\n><y/></x></>))())) { if ((let prop = prop) ? (prototype = <x><y/></x>) : (RangeError())) if([[1]]) return window; else {var constructor = prop, __noSuchMethod__; }}");
tryItOut("with({}) { throw prototype; } \nL: { }");
tryItOut("L: {yield *::*; }");
tryItOut("{yield this;[1,2,3,4].map }");
tryItOut("export __proto__;");
tryItOut("switch(<x/> || <><x><y/></x></> >> [(__count__ .. <x><y/></x>)].map(({}).__lookupGetter__)) { default: break; case (__iterator__ =  /x/ ): break; case [, , , , [, constructor, __parent__]] =  /x/g : break; __noSuchMethod__ = 1e+81;break; case 2: gc()case 9: break; case 0: prototype = *; }");
tryItOut("__count__ = __parent__;");
tryItOut("/*infloop*/for(const __proto__; ({ __parent__: __count__ }) = ({ __count__: prototype }); <x/>) {;yield;/*infloop*/L:for(window; __iterator__; prototype) {export *; } }");
tryItOut("__iterator__ = __parent__;");
tryItOut("while((__parent__.constructor-=new (1e81)(#3={a:#3#})) && 0)/a/gi");
tryItOut("<x><y/></x>\n[,,z1]\n");
tryItOut("let __parent__ = <><x><y/></x></>, constructor\nexport *;");
tryItOut("/*infloop*/for(var [] = (this.__defineSetter__(\"__iterator__\", window)); ; [<x/>].filter((({}).__lookupGetter__).call)) {try { <x/> } catch(__proto__) { export __iterator__; } finally { return window; } with({__iterator__: __count__+=3.141592653589793})if(<y><z/></y>) { if (true) return true; else eval} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (this.zzz.zzz)) {yield\n/*infloop*/L:while(*::*){/*for..in*/for(var __proto__['prototype'] in <x/>) {export constructor;yield window; } } }");
tryItOut("if(export *) break M; else  if (*) {let constructor; } else {yield; }");
tryItOut("if(gc()) { if ((false.eval( '' ))) {try { (null); } catch(constructor) { __iterator__ = __parent__; } finally { yield  /x/ ; }  }} else {yield true;throw ([this].map(((new Function(\"throw <x/>;\"))).call)); }");
tryItOut("M:with({prototype: window})if(((new Function(\"yield;\")))(([,,])().unwatch(\"__noSuchMethod__\"))) return; else  if (\n<><x><y/></x></>) export *;");
tryItOut("if(new (gc)( /x/g )) {constructor;gc() }");
tryItOut("/*for..in*/for(const <x/>['prop'] in ((function  prototype (__iterator__, prototype) { yield [[]].propertyIsEnumerable(\"__proto__\") } )(eval(\"(new (__noSuchMethod__)())\", (<x/> << 1e-81))))){{continue M;'haha'.split }__noSuchMethod__, __proto__ = (<>\t<x><y/></x><\t/> , this) }");
tryItOut("if(delete __iterator__) { if (this) {{} } else break ;}");
tryItOut("\n");
tryItOut("for(let y in []);");
tryItOut("{yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__iterator__) in (<>function(id) { return id }</>.(<><x><y/></x></>(<><x><y/></x></>, true)))) {true;if(__noSuchMethod__ = window) { if ('fafafa'.replace(/a/g, .2)) {export *; } else {([[]]); }} }");
tryItOut("if(constructor =  /* Comment */Date()) { if (3) return;} else gc()");
tryItOut("{M:with({__proto__:  /x/ }){export *;var prototype; }prototype }");
tryItOut("L:if((__count__ = __count__ || <x><y/></x>)) { if (({a1:1}) << undefined @ (p={}, (p.z =  /* Comment */*::*)()))  else {const __iterator__, prop; }}");
tryItOut("/*infloop*/do {var prop = <y><z/></y>, __iterator__; } while(('fafafa'.replace(/a/g, function  x::prop (__noSuchMethod__) { yield <x/> } )));");
tryItOut("if(constructor = for(let y in []);) {;<x/>; } else  if (__iterator__) function  __parent__ () { yield <y><z/></y>; }  else {; }");
tryItOut("/*for..in*/L:for(__iterator__ = .2 = @foo :: (prototype)(<y><z/></y>, null).propertyIsEnumerable(\"__proto__\") in \f'fafafa'.replace(/a/g, <y><z/></y>).isPrototypeOf(!3/0)) M:if() function(q) { return q; } else {const prototype = this, __proto__;function  prop (__parent__) { yield this }  }");
tryItOut("{}\nyield;\n");
tryItOut("");
tryItOut("L: var constructor =  /x/g ;");
tryItOut("throw  '' ;\nif(*::*) {return P; }\n");
tryItOut("/*infloop*/for(const __count__; #2=({window: __count__ = prototype}); (new function  __noSuchMethod__ (prop, __count__)\nwindow())) {/*infloop*/M:do {yield; } while([({a1:1})].sort(function(q) { return q; })); }");
tryItOut(" \"\" ;");
tryItOut("if(((function (constructor, prop) { yield <y><z/></y>-- } )())({break L; })) {(__proto__)\n } else {export *;this.zzz.zzz; }");
tryItOut("let(__proto__) { {}");
tryItOut("L:do export __proto__; while(((<x/> .@ undefined ? ({}) : 1e+81)) && 0);");
tryItOut("export ~;");
tryItOut("{/*for..in*/for(var __proto__ in (('haha'.split)(__proto__ = 0x99))){;export *; } }");
tryItOut("M:with(x::__noSuchMethod__.throw(eval(\"( /x/g  - undefined)\", (this)))){var constructor = <x><y/></x>;/*infloop*/M:for(let __iterator__ = (new (window)(5.0000000000000000000000).isPrototypeOf(false ? [1] : [,])); true !== function::prop; []) {gc()yield [,]; } }");
tryItOut("let(__iterator__) ((function(){([1,,]);})());");
tryItOut("/*for..in*/M:for(const [__count__, __proto__] = ((uneval(#1=[#1#]))) in false) if(null) {var __count__; } else {return ({});break ; }\nexport __iterator__;\n");
tryItOut("/*infloop*/for(var __iterator__; ({a1:1}).__lookupSetter__(\"prop\")++; (+<xxx {constructor}={<><x><y/></x></>} />)) (<x><y/></x>);\n\n\nswitch(new (window)(__count__.__noSuchMethod__ getter= function(q) { return q; })) { case 4: const __parent__, __iterator__ = (let (__noSuchMethod__ = window, __count__) <x/>);break; default: break; case 6: 0;break; case 1: break; case (yield (({}))[<x><y/></x>]): case __iterator__ = <><x><y/></x></>: break ; const prop;case 2: return;break; case (prototype .@*:: ({})): gc()break; case constructor.hasOwnProperty(\"prop\"): break;  }");
tryItOut("let ([[, ], [prototype, ({ __count__: [], __count__: [] }), prototype( '' )], , ], x::__parent__ = ({__proto__: ({prototype: (__iterator__.constructor getter= 1e4) })})) { /*for..in*/for(const __iterator__ in <><x><y/></x></>) ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this in window) var constructor = <x/>;");
tryItOut("if(<bbb xmlns=\"(#0=*)\"><!--yy--></bbb>\t) { if ((({x::prop setter: <x><y/></x>.constructor, prop: 3.141592653589793 >>= <x><y/></x> }))) /*for..in*/for(const __noSuchMethod__ = <y><z/></y> in __parent__) {return ({});export *; } else {let __noSuchMethod__, prototype =  \"\" ;let __count__, __iterator__ = <><x><y/></x></>; }}");
tryItOut("throw undefined;");
tryItOut("__parent__ = __parent__;");
tryItOut("if(\nwindow) {prototype, __noSuchMethod__ = <x><y/></x>; } else {export *; }");
tryItOut("while(((yield __proto__)) && 0)return <x><y/></x>;");
tryItOut("/*for..in*/for(const constructor = new 033.hasOwnProperty(\"prototype\") in prop) return;");
tryItOut("if(\f /* Comment */ '' ) yield <y><z/></y>; else  if (\n5.0000000000000000000000) {yield #1=[#1#];/*infloop*/L:while(prototype = window){(this); } }");
tryItOut("export __parent__;");
tryItOut("let (__count__) { L:if(([[\fprototype, , ({ prop: delete, prop: __iterator__ }), ({ __noSuchMethod__: __noSuchMethod__, constructor: __count__ })], [__iterator__, __proto__, , ], , ].prop)) { if ((this++)) {return;__proto__, prototype }} else let __proto__ = __iterator__, __iterator__ = <><x><y/></x></>; }");
tryItOut("L: {gc()yield __proto__; }");
tryItOut("{__iterator__ = 0/0; }");
tryItOut("let (prop) { gc() }");
tryItOut("/*infloop*/M:do if(<x/>.@foo) {/*infloop*/for(let __iterator__; (p={}, (p.z = __proto__)()); <x><y/></x>.(*)) (<><x><y/></x></>); } while(((uneval(__iterator__ = <x><y/></x>)).yoyo((__parent__) = <x><y/></x> @ 4.)));");
tryItOut("do {let (__noSuchMethod__ = undefined) {  }if([]) {{}; } else  if (this) true } while(((function(y) { yield y; ;; yield y; })) && 0);");
tryItOut("if(eval) {;(get); } else  if ((<><x><y/></x></> for (__proto__ in null))) break M; else export constructor;");
tryItOut("/*infloop*/for([__iterator__, ] = #1=[#1#]; yield  /x/ (); undefined) gc()");
tryItOut("{return <x><y/></x>; }");
tryItOut("/*for..in*/for(let constructor = (typeof null.throw(1.2e3)) in  \"\" )  \"\" ;");
tryItOut("var __iterator__ =  '' ;");
tryItOut(" { yield {} } ");
tryItOut("if(new Date(window, 0/0)) { if (\t((yield function ([y]) { }/*\n*/))) ({}).hasOwnProperty else ;}");
tryItOut("const __noSuchMethod__ = <><x><y/></x></>, __parent__");
tryItOut("/*for..in*/for(const constructor in ((Function)((new window))))let (constructor = 1.2e3) { let constructor, prototype; }if(__count__.prototype = 5.0000000000000000000000 @ <y><z/></y>) {let __iterator__ = __parent__, __parent__ = 1e+81; } else  if ((<x><y/></x>.hasOwnProperty(  \"__parent__\"))) {const constructor = [1];throw  /x/ ; } else { }");
tryItOut("gc()\n");
tryItOut("switch((({__parent__: ({ __count__: [] }) = false = __proto__, prop: this.__defineSetter__(\"prop\", new Function) }))) { default: __parent__ = __iterator__;let(function::__parent__, __parent__ = window) ((function(){{}})());break; case 3: break; case 5: case (return this;): case true: break; break; break; case 5: break; let __count__;case 9: return this; }");
tryItOut("do prototype while(( /* Comment */(undefined for (__parent__ in  /x/ ))) && 0);");
tryItOut("M:if( \"\" ) ; else throw __parent__");
tryItOut("throw __count__;");
tryItOut("throw StopIteration;");
tryItOut("if((prototype.([([z1].throw(<y><z/></y>))]))) /*for..in*/for(__noSuchMethod__ = __proto__.case <x><y/></x>: break; default:  setter= function(q) { return q; } in this) gc() else  if (<x><y/></x>.yoyo(*::*) >>= this.__defineGetter__(\"prototype\", constructor)) {return ({a1:1});{} }\nif(<><>yyy</></>) {continue ; } else  if (__iterator__)  else ;");
tryItOut("/*infloop*/while(false)yield; const prop;");
tryItOut("prototype = false");
tryItOut("yield");
tryItOut("try { let(__proto__ = ({__iterator__: --(eval(\"{}\", <y><z/></y>)),  get __parent__()<><x><y/></x></>.watch(\"__iterator__\", *::*) })) { with({}) { constructor = __count__; }  } catch(__parent__) { with({}) { ; }  } finally { with({__proto__: 5.0000000000000000000000.throw(false).watch(\"prop\", (/a/gi).call)}){yield (function ([y]) { })(); } } ");
tryItOut("M:if(1e-81) { if ( /x/ ) gc() else }");
tryItOut("/*infloop*/for(const prop; [,,]; let (__noSuchMethod__ = <><x><y/></x></>) <x><y/></x>) /*infloop*/for(const function::__iterator__ = <><x><y/></x></>;  \"\" ; __proto__) {false = __parent__, __noSuchMethod__; }");
tryItOut("return <x><y/></x>; const function::__count__;");
tryItOut("/*for..in*/for([__noSuchMethod__, x::constructor] = <><x><y/></x></> in <y><z/></y> in __proto__) throw prototype;");
tryItOut("if(1e4 *= [,,].__lookupSetter__(\"__count__\")) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__.__iterator__ in 'fafafa'.replace(/a/g, arguments)) return;/*for..in*/for(var __parent__ in __parent__) throw <x/>; }");
tryItOut("do if([<x><y/></x>].some(({}).hasOwnProperty)) {export constructor; } else  if (window ? <y><z/></y> : <><x><y/></x></>) {export constructor;const __proto__, prototype = <x/>; } else {return;<x><y/></x> } while(((['fafafa'.replace(/a/g, (1 for (x in [])))])) && 0);");
tryItOut("/*infloop*/L:do return; while({});");
tryItOut("if(this.__defineGetter__(\"prototype\", ({}).hasOwnProperty)) {export *;yield @foo; } else  if (__parent__.__noSuchMethod__ getter= Math.pow) { }");
tryItOut("if((@foo--.yoyo( '' .*))) {export *; } else {; }\n/*for..in*/for(const __count__.prop in (( /x/g )((__proto__ >= null /= false))))do { } while((((<y><z/></y>)())) && 0);");
tryItOut("while((window.yoyo(*::*)) && 0)var constructor;");
tryItOut("{yield undefined;/*for..in*/for(var constructor in ((new Function)(null)))*; }");
tryItOut("switch(--prototype =  \"\" ) { default: break; case 8:  }");
tryItOut("");
tryItOut("{<x><y/></x>;return; }");
tryItOut("switch((<y><z/></y> >> __noSuchMethod__).__lookupSetter__(\"prop\").prop) { case 8: with({constructor: RangeError(0.1, __noSuchMethod__)})*{ }break; yield prototype = <x/>;break; default: break; break; case 5: case 0: yield;case (({ set function::__noSuchMethod__(prototype) { yield <><x><y/></x></> }  })):  }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("switch(((yield  /* Comment */undefined))) { case +true.propertyIsEnumerable(\"__noSuchMethod__\"):  }");
tryItOut("/*for..in*/for(const __iterator__ in ({a2:z2})) {while((({})) && 0)return;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in 1e4) {export *; }");
tryItOut("switch((((function(q) { return q; }).call(<x><y/></x> .@x:: <x><y/></x>, ))([[11,12,13,14].some]))) { default: /*for..in*/L:for(prototype = [1] in @foo) export prototype\nbreak; break; case new (function (constructor)prototype)(x::prop): ;break; case 8:  }");
tryItOut("return;");
tryItOut("{return;\nthrow  \"\" ;\n }");
tryItOut("do {yield -3/0;with({__count__: constructor | <><x\t><y/></x></> if (this)}){const __proto__, prototype;export prop; } } while((constructor-={}) && 0);");
tryItOut("(window)\n{}");
tryItOut("try { break ; } finally { {} } \nif(__proto__ %= <><x><y/></x></>) gc() else  if (((new ((prop ? __proto__ : false))(__iterator__ = [,])) != new (prop.__proto__ = __iterator__)((__proto__ = undefined)))) <><x><y/></x></>;\n");
tryItOut("*::*\nbreak ;\n");
tryItOut("while(((function (prop, prototype) /x/  >> -1)) && 0){break ; const prototype; }");
tryItOut("/*infloop*/for(var prototype; [15,16,17,18].map(Function, (([1,2,3,4].slice).call(3/0, window))); *) export prop;");
tryItOut("if((true)) /*infloop*/for(var __proto__; __count__; ({a1:1})) {gc() } else  if (<zzz>({prop:  /x/g , __iterator__ setter: Math.sin })</zzz>) {case 1.2e3: case 1: gc()default: yield arguments;break; ;(__proto__); }");
tryItOut("if(window)  else  if (<><x><y/></x></>) {return <x><y/></x>;__iterator__; }");
tryItOut("{const __count__ = __proto__;\nvar __noSuchMethod__ =  \"\" , __count__ =  /x/g ;\n( '' ); }");
tryItOut("/*for..in*/L:for(var [prototype, __parent__] = window in  /x/g .valueOf(\"number\")) {break L;null; }");
tryItOut("/*infloop*/for([] = (eval(new __iterator__-=prototype(( \"\" .throw(window))), (function::__count__, function::constructor = #3={a:#3#}.throw(<><x><y/></x></>)))); (constructor); ) {gc() }");
tryItOut("__proto__ = prop;");
