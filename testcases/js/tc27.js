tryItOut("/*infloop*/for(__parent__; ('haha'.split)(#1#(<x/>), __count__); (( /x/g .yoyo(*::*)).throw(<x/> &=  \"\" ))) yield;");
tryItOut("[z1];");
tryItOut("if(false && window) { if ( /x/ [({})]) {}} else constructor;");
tryItOut("if((#0=((this).watch)(<y><z/></y>))) { if ((@foo |= ((window)[<><x><y/></x></>].valueOf(\"number\")))) export *;} else {throw *::*; }");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __parent__: (__iterator__), __proto__: \f[(@foo)(*::*), , , ] }), __proto__: __noSuchMethod__ }) = (__count__ = undefined); ([1,2,3,4].map)(\n([ /x/g ].sort(new Function)), __proto__ = ( '' .__lookupSetter__(\"__proto__\"))); (null)(#1=[#1#]) = (uneval(null)).__noSuchMethod__--) function  __noSuchMethod__ ([1]\r) { yield Math.sin(<x><y/></x>) } ");
tryItOut("if(null) { if (prop = <><x><y/></x></>) return null;} else var __iterator__, prop;");
tryItOut("/*infloop*/for(({ prop: prop }) = ([1,2,3,4].slice).call( /x/g , (-1)); <y><z/></y>.__defineSetter__(\"prototype\", ({}).hasOwnProperty); [[]].sort(({}).__lookupGetter__)) return -1;");
tryItOut("with({__iterator__: (prop.constructor = (new ((<y><z/></y>).apply)(<x/>)))})if(0/0.@*) export __iterator__; else {__count__; }");
tryItOut("return 1e4;");
tryItOut("L:if(gc()) { if (__parent__++) {gc() }} else {}\ncontinue ;");
tryItOut("/*for..in*/for(const [__proto__, prop] = (function  __parent__ () { return <x><y/></x> } )(true, function(id) { return id }) in undefined) {export function::__count__; }");
tryItOut("with({__noSuchMethod__: 'fafafa'.replace(/a/g, <><x><y/></x></>)})continue \nif(prop.prototype setter= function  __count__ () { return  \"\" ; } ) { if (new (new Function).call(<x><y/></x>)\t) {yield;return <x><y/></x>; } else continue ;}");
tryItOut("throw StopIteration;");
tryItOut("L: new Function");
tryItOut("/*infloop*/for(prop; [this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)].some(eval); __proto__.__proto__) /*infloop*/for(let __count__ = undefined; -1; <><x><y/></x></>) export prop;");
tryItOut("if((({__noSuchMethod__ setter: Math.sin,  set __iterator__(prop, prototype)<><x><y/></x></> }).__lookupGetter__(\"__count__\"))) yield 0/0; else  if (new (3/0(prototype, <x><y/></x>))()) break ; else break M;");
tryItOut("{gc()return; }");
tryItOut("/*infloop*/for(const ({ getter: prop }) = new (let (__proto__ = window, __iterator__ = <><x><y/></x></) 1.3)(window.propertyIsEnumerable(\"__count__\")) += (new ((eval(\"<><x><y/></x></>\", this)))(( ''  ? 0x99 : constructor: @foo))); function ([y]) { }.watch(\"__noSuchMethod__\", Math.sin);  /* Comment */__count__.__count__ setter= ({}).hasOwnProperty) {return {}; }");
tryItOut("return;");
tryItOut("/*infloop*/do {/*infloop*/do {function(y) { yield y; function ([y]) { };; yield y; } } while((null.valueOf(\"number\")));while(((__count__ = prototype)) && 0)let __count__; } while(033);");
tryItOut("/*infloop*/while([15,16,17,18].filter((Math.pow).call,  /x/g .__defineSetter__(\"<x><y/></x>\", gc)))yield;");
tryItOut("( /x/ );");
tryItOut("yield;\nreturn;\n");
tryItOut("let (__iterator__, __parent__ = this) { throw this; }\nbreak M;");
tryItOut("/*infloop*/L:for(let prototype; ((__count__ = let (delete) <><x><y/></x></> | <zzz>default: ;</zzz>) for each (__parent__ in (eval)) for each (constructor in ())); [11,12,13,14].map) {do {(<y><z/></y>); } while(((uneval(1e4))) && 0);if(<y><z/></y>) ( /x/ ); else {} }");
tryItOut("/*for..in*/for(__proto__.constructor in ((((-(this.zzz.zzz)) != 1e4.__lookupSetter__(\"__count__\")))((__iterator__)))){/*infloop*/while(())return <x><y/></x>;function  prototype ()\t { return <><x><y/></x></> } \n{} }");
tryItOut("return;\n;\n");
tryItOut("/*for..in*/for(__noSuchMethod__ in  /x/ ) {throw <><x><y/></x></>; }");
tryItOut("let(__proto__ = yield null, __iterator__ =  /x/g ) { with({}) { return; } ");
tryItOut("{return;export __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in new {}(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) {L:switch(3/0) { default: break;  } }");
tryItOut("L:if(\n__proto__.(@foo)) (1e+81); else  if (-0.constructor = <y><z/></y>) throw <x><\ty/></x>;");
tryItOut("/*infloop*/while(((__count__ =  \"\" ).__proto__ = ({__proto__: undefined,  set __parent__(__iterator__, __parent__) { return <><x><y/></x></> }  }))){gc() }");
tryItOut("/*infloop*/L:for(let constructor; prop; function::prototype &= <x><y/></x>) {yield false; }");
tryItOut("with(__iterator__){if([1,2,3,4].map) { if (prop--) {var __parent__, __parent__ = this;throw <x><y/></x>; }} else (function (__count__) { yield <y><z/></y> } )\f.call/*for..in*/for(var constructor.__noSuchMethod__ in *::* ?  /x/g  : <x><y/></x> * !__iterator__) {if( /x/ ) {3; } else gc() } }");
tryItOut("/*for..in*/L:for(let __iterator__ in __parent__ = <><x><y/></x></> :: eval(\" '' \", [1])) {export prototype; }");
tryItOut("let(__proto__ =  /* Comment */<x><y/></x>, __iterator__) ((function(){for(let y in []);})());");
tryItOut("switch(<x/>) { default: break;  }");
tryItOut("if(({a1:1})) {export __proto__;; } else  if (((function (prototype)1.3( { yield  \"\"  } , (0x99)).__lookupSetter__(\"prototype\")) if ( ''  * (yield <><x><y/></x></>)))) throw <x/>; const __noSuchMethod__;");
tryItOut("/*infloop*/for(var __proto__; (uneval( '' )).valueOf(\"number\"); <bbb xmlns=\"*::* |= window\"><ccc:ddd><!--yy--></ccc:ddd>\f</bbb>.(undefined)) {return constructor; }");
tryItOut("/*infloop*/L:do return; while([, ({ prototype: ({ prototype: yyy }) }), , __parent__, []] = window === 0);");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, (constructor).__defineSetter__).__lookupSetter__(\"[1,,].isPrototypeOf((let (__count__, __parent__) <x><y/></x>).propertyIsEnumerable(\\\"prop\\\"))['constructor']\")){{} }");
tryItOut("__iterator__, __parent__ = <y><z/></y>\n\nexport __parent__;");
tryItOut("with( \"\"  >>> this != (\t1e+81).call(*::*, <x/>)){<x/>;{} }");
tryItOut("with([[undefined].sort(function  __count__ (__parent__) { yield window } )].map(function  prop (constructor, __parent__) { return __iterator__ } )){throw prototype;{continue L; } }");
tryItOut("yield; const undefined;");
tryItOut("with({prototype: (eval(\"*::*\", 1.2e3))--})/*for..in*/for([__parent__, __parent__] = (<x><y/></x> if (null)) in this) let __iterator__ = <><x><y/></x></>, __count__ = undefined;");
tryItOut("/*infloop*/do with(this.__defineGetter__(\"__noSuchMethod__\",  let __parent__;){/*infloop*/M:for(var __noSuchMethod__; <><x><y/>//h\n</x></>.yoyo(__iterator__); yield  /x/ ) {export constructor;M:do function (constructor) { (prototype); }  while((__noSuchMethod__) && 0); } } while(getter for each (constructor in (new constructor = this)) if ((RegExp())));");
tryItOut("while(((__proto__ = [15,16,17,18].filter(function  __count__ ()\f { yield 1.3 } , ((uneval(0x99)))))) && 0){if(<x><y/></x>) {gc()\n } else  if (false) break L; else {gc() }/*infloop*/for(__iterator__; (<x><y/></x>)[__noSuchMethod__]; [1,,](<y><z/></y>)) {} }");
tryItOut("__proto__ = __parent__;");
tryItOut("if(var constructor, __iterator__) {__noSuchMethod__, prop = <x><y/></x>;let __count__ = <y><z/></y>; } else const prototype, __count__;");
tryItOut("L: {return  /x/ ;return }");
tryItOut("var __parent__ = __proto__.prop setter= function  __count__ () { return this } \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let \f(new (window)(<><x><y/></x></>))['__count__'] in (<y><z/></y>)\f()) gc()");
tryItOut("let(let) ((function(){return new Iterator(__proto__.__parent__ setter= [1,2,3,4].map);})());");
tryItOut("var __proto__ = true, prop = this;/*for..in*/for(var prop = [z1,,] in false) yield;");
tryItOut("switch([ '' ].filter(/a/gi)) { default: __proto__;break; case (constructor.constructor) ? prototype = 033 for (__proto__(__noSuchMethod__) in  '' ) if (<x/>) : undefined: break; <x><y/></x>break;  }");
tryItOut("/*infloop*/for(__count__; __proto__ = false;  \"\" ) export *; const prop;");
tryItOut("{} const prototype;");
tryItOut(" const __noSuchMethod__;");
tryItOut("/*infloop*/for(var prototype = function::prototype;  /x/g ; window) {throw __proto__;export *; }");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] = @foo in ((gc)(({ get prototype(__count__, __count__) { yield <>\f<x><y/></x></> } , __noSuchMethod__ getter: function (prototype) { const __proto__ = [,,]; }  })))) {{} }");
tryItOut("switch(0) { case 9:  }");
tryItOut("switch(({constructor: prototype, prototype setter: /a/gi })) { default:  }");
tryItOut("/*infloop*/do {var __proto__ = ({a2:z2}); } while(<y><z/></y>);");
tryItOut("L:if(each) { if (({a1:1}).throw(<><x><y/></x></>)) {{}const __count__ = 1.3, __iterator__; } else %=}");
tryItOut("<><x><y/></x></>;");
tryItOut("if(__iterator__+=[11,12,13,14].some) {return @foo; } else  if (((function  __iterator__ () { return this } )(window, 4.))) {{} }");
tryItOut("if((__parent__.yoyo(<><x><y/></x></>.throw([1,,])))) { if ((({ __parent__: __proto__, prop: __parent__ }) = __proto__)) case undefined.__lookupGetter__(\"__count__\"): /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__: <x><y/></x> in (-1)) yield __iterator__;break;  else let __iterator__ = null, prop;}");
tryItOut("{yield;return; }");
tryItOut("if((<bbb xmlns:ccc=\"<x><y/></x> < <x><y/></x>\"><\tccc:eee></ccc:eee></bbb>.((Function)(({a2:z2}), window)))) { if ([,]) /*infloop*/{{}return; } else {if(false)  }}");
tryItOut("/*for..in*/for(var <x><y/></x>['constructor'] in ((Math.sin)([( /x/ \n)] > (-0) ? *::* :  /x/ ))){return; }");
tryItOut("if(((5.0000000000000000000000))) { if ( /* Comment */null) break M;} else continue ;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <x/>.valueOf(\"number\")) {(3.141592653589793); }");
tryItOut("");
tryItOut("L:if([[1,,]].sort(Function)) return  '' ; else  if (<x><y/></x>++) {(<x><y/></x>); }");
tryItOut("prop = __count__;");
tryItOut("{return this;yield; }");
tryItOut("/*for..in*/for(let <x/> in ((((__noSuchMethod__ = arguments)\n))(this))){gc()yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in (new (<x><y/></x>)(false))) {constructor }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var [__proto__, __count__] = 0 in null) {}");
tryItOut("export *;");
tryItOut("L: {<><x><y/></x></>; }var constructor, prop = .2\n");
tryItOut("L:if(1e81) this; else  if (*) {function  __noSuchMethod__ (__noSuchMethod__, prop) { yield undefined }  } else {(<x><y/></x>); }\n");
tryItOut("{/*for..in*/L:for(let __proto__ in ((function (constructor, __parent__) { 'haha'.split } )((p={}, (p.z = __parent__)()))))export *; }");
tryItOut("L:with(((uneval((1e+81)[*::*]))))export *;");
tryItOut("/*infloop*/do {var __proto__, prototype;; } while(new Function(*, (-0)));");
tryItOut("/*infloop*/\tL:for(true; 033; <><x><y/></x></>) return;");
tryItOut("/*for..in*/for(prop( /x/ ) in (yield undefined)) L: ;");
tryItOut("/*for..in*/for(const __proto__ = (.2 <<= <x><y/></x>) in window) {(<><x><y/></x></>/*\n*/); }");
tryItOut("return [({}) for (prototype in <x><y/></x>)];");
tryItOut("M:if(__parent__ .@*:: <><x><y/></x></>--) {let __parent__ = <><x><y/></x></>, __count__ = [1,,]; } else export *;\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in __count__ = false) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in false) {return; } }");
tryItOut("while((constructor = 3/0) && 0)undefined");
tryItOut("if(([([])].some(this))) {continue ; } else  if () {return;/*infloop*/M:while(<><x><y/></x></>)__noSuchMethod__ }");
tryItOut("/*infloop*/for(var ({ *::*: ({ prototype: ({ __count__: __noSuchMethod__, (this.__defineSetter__(\"__count__\", Function)) ^= ((yield this)): __iterator__ }), prototype: \t({ constructor: ({ function::__count__: ({ __parent__: prop, __noSuchMethod__: prototype }) }) }) }) }) = ((new (new <>\f<x><y/></x></>(*::*, <><x><y/></x></>))(\narguments)).throw(__noSuchMethod__.__parent__ = <x/>)); <xxx {__count__}={(#0=({__noSuchMethod__: this.__defineSetter__(\"__iterator__\", (1 for (x in []))) ? ((5.0000000000000000000000)((function ([y]) { })())) : window.__defineGetter__(\"__parent__\", function ()this)}))} />; * <= null) {constructor, __count__ = undefined; }");
tryItOut("L: if((<x><y/></x> +  \"\" )) { if (((\n1e+81 && (*)(1.2e3) = 1e-81.propertyIsEnumerable(\"__proto__\")).__defineGetter__(\"prop\", function ()__noSuchMethod__))) <ccc:ddd><x><y/></x>yyy</ccc:ddd> else gc()}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in true\t) {export constructor; }");
tryItOut("with({constructor: new function(q) { return q; }()}){if() return; else  if ((yield <x/>)) {return;return __parent__; } }");
tryItOut("/*infloop*/do {var __parent__;let prototype; } while([<x><y/></x>].sort(function () { return  ''  } ));");
tryItOut("/*for..in*/try { throw <x><y/></x>; } catch(__parent__) { gc() } for(var prototype in (~(function ([y]) { })())) constructor;");
tryItOut("while(((function ([y]) { })()) && 0){return window;gc() }");
tryItOut("L:while((((<y><z/></y> !== this).__lookupGetter__(\"__count__\")).unwatch(\"__iterator__\")) && 0){break ;yield; }");
tryItOut("with({__proto__: ((uneval(1e+81)))})Function");
tryItOut("/*for..in*/for(let [__proto__, constructor] =  in new ({}).__lookupGetter__(__parent__.__count__\t getter= function ()export __count__;)) {/*for..in*/for(let [function::prototype, prototype] = (prop.throw(*::*/*)) in (yield.unwatch(\"__noSuchMethod__\"))) let constructor = *::*; }");
tryItOut("if((eval(\"{}\", -3/0))) window;");
tryItOut("if(( /* Comment */(uneval(__proto__)))) { if ((typeof  '' ))  else {return  /x/g ; }}");
tryItOut("let (__proto__ = (this.__defineGetter__(\"prototype\", (this ? *::* : <><x><y/></x></>.@foo).__defineSetter__)), []) { return __noSuchMethod__.__noSuchMethod__; }");
tryItOut("/*infloop*/L:do {} while(<x><y/></x> ? <x/> : __count__);");
tryItOut("/*infloop*/L:while(<x><y/></x>.yoyo(__parent__))/*for..in*/for(let __proto__ = <x><y/><\f/x> in #1=[#1#]) ;");
tryItOut("/*for..in*/for(let prop = <x><y/></x> != (let (__noSuchMethod__) <x><y/></x>) in <><x><y/></x></>) ;");
tryItOut("{if((null.watch(\"__proto__\", ({}).__lookupGetter__) :: (__iterator__ >>= <x><y/*\n*//></x>))) [1,2,3,4].map else  if (new String()) {return <x><y/></x>; } else {yield this; } }");
tryItOut("try { function  __count__ ()1e+81 } finally { (true); } ");
tryItOut("L: yield function ([y]) { };");
tryItOut("let (__parent__ = <x/> >> <><x><y/></x></>.__iterator__) { /*infloop*/M:for(let __parent__ = <y><z/></y>; x::__parent__; false) return; }");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("while(((<x/>)()) && 0){throw prototype; }");
tryItOut("M:if((p={}, (p.z = <><x><y/></x></>)())) {prototype = <><x><y/></x></>, __noSuchMethod__ = []; } else {this;const __iterator__; }");
tryItOut("let(prop, __iterator__ = <><x><y/></x></>) ((function(){for(let y in []);})());");
tryItOut("if((__proto__.(<x/> <<= -3/0)).hasOwnProperty(\"__count__\")) {(@foo); const __parent__; }");
tryItOut("this.zzz.zzz;");
tryItOut("L: export *;");
tryItOut("export constructor;");
tryItOut("with( '' ){gc() }");
tryItOut("/*for..in*/L:for(let null - {}['__parent__'] in ((function(q) { return q; })(prop.((p={}, (p.z = window)())))))/*infloop*/for(constructor; prototype = <><x><y/></x></>; <>true</>) [1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var getter in (let (__parent__, prop) <><x><y/></x></>.unwatch(\"constructor\").eval( \"\"  .@x:: true))) {gc()for(let y in [5,6,7,8]) export __iterator__;\t }");
tryItOut("{/*for..in*/for(const __count__.__iterator__ in ((function  __count__ () { return; } )(033)))L:if(<x><y/></x>) { if (__parent__) constructor = __proto__, prop = <x><y/></x>;} else {; } }");
tryItOut("with({prototype: this.__defineGetter__(\"prop\", function  __count__ (__parent__, __noSuchMethod__) { yield (-0) } )}){{} } const __proto__;");
tryItOut("M:if(1e4-- if ( '' )) { if ([15,16,17,18].some(({}).__lookupGetter__, (new RangeError()))) {export __parent__;/*\n*/ } else {while((<y><z/></y>) && 0);yield; }}");
tryItOut("with(this);");
tryItOut("if(false) {const prop;if(<x><y/></x>) {yield this; } else export constructor; } else  if (function (__parent__, []) { return (this).__defineSetter__(\t<><x><y/></x></>, <><x><y/></x></>) } ) { '' ; }");
tryItOut("/*infloop*/L:for( /x/ ; [, , []] = eval(\"0\", <x><y/></x>); ((new Function(\"switch(new <y><z/></y>()) { case new function  __iterator__ (__proto__, __iterator__) { const prop; } \\f(<x><y/></x>.__noSuchMethod__): break; default:  }\")))(({__count__ getter: (__iterator__: <x/>).watch }))) {yield  /x/g ;{gc()return; } }");
tryItOut("yield *::*;");
tryItOut("let (__count__ = , __proto__ = (constructor = @foo[true])) { yield; }");
tryItOut("prop = prototype;");
tryItOut("let(constructor = [({ __noSuchMethod__: __iterator__ }), ] = [({ prop: __parent__, __noSuchMethod__: prototype }), , ({ __parent__: constructor }), , ], prop = [,,].__parent__) { return \n*.yoyo(<x><y/></x>);");
tryItOut("/*for..in*/for(var __parent__ in <><x><y/></x></>\n) null;");
tryItOut("L: var __noSuchMethod__;");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ((prop);/*\n*/)) for(let y in []);");
tryItOut("{<><x><y/></x></>;throw <><x><y/>\n</x></>; }");
tryItOut("let([, , , ]) { throw __parent__;");
tryItOut("if(__proto__ * <><x><y/></x></>) {let (__noSuchMethod__) { yield; } }");
tryItOut("let(__iterator__ = <><x><y/></x></>) ((function(){export constructor;})())\n");
tryItOut("do \tM:if(<><x><y/></x></>) {} else {prop{}\t } while((((uneval(undefined))).__lookupSetter__(\"__parent__\")) && 0);");
tryItOut("/*infloop*/do {if(<x><y/></x>) export *; else  if (<><x></></></>) {let __parent__ = <x><y/></x>, __parent__ = window; }export __iterator__; } while(({__count__: (3)[undefined].prototype = new window(<><\rx><y/></x></>), constructor setter: ({}).hasOwnProperty }));");
tryItOut("/*infloop*/do {/*for..in*/M:for([__parent__, __count__] = <x><y/></x> >>= <><x><y/></\fx></> in <x><y/></x>) {let __noSuchMethod__\n; /x/g  } } while((new *)());");
tryItOut("L:with({constructor: ((yield <><x><y/></x></>))}){yield; }");
tryItOut("{let prop = *, __noSuchMethod__; }");
tryItOut("if(({ get __parent__(__proto__, prop) { return <x><y/></x> }  })) { if (let (__noSuchMethod__, __count__ = window) *::*) {__iterator__, __parent__;yield; }} else {return <><x><y/></x></>; }");
tryItOut("");
tryItOut("while(( /x/ ) && 0){yield;if(<x><y/></x>) { if (prop) yield [z1]; else {arguments;function  __iterator__ ()[z1] }} }");
tryItOut("null--");
tryItOut("let prop = <x/>, constructor = window");
tryItOut("yield <><x><y/></x></>; const __iterator__;");
tryItOut("*::*;");
tryItOut("throw constructor;");
tryItOut("if(true.hasOwnProperty(\"__iterator__\")) { if ((new (new (<y><z/></y>)()\n)((<><x><y/></x></> >>> 1e-81)))) throw <x><y/></x>; else yield;}");
tryItOut("return;");
tryItOut("let (({ __noSuchMethod__: constructor, prototype: __parent__ }) = x::__parent__.__iterator__ setter= (1.3 ?  /x/g  :  /x/g  @ (uneval(@foo))).watch, prototype = __iterator__ = prop) { /*infloop*/M:while(new Boolean(__iterator__ = window))if(<x><y/></x>) throw 3/0; else {function ([y]) { };return *; } }");
tryItOut("/*infloop*/for(var ({ prototype: __noSuchMethod__.__proto__, __iterator__: __iterator__ }) = *; <><x><y/></\fx></> = ([<x/> if (({}))])++; this./*__defineGetter__(\"prop\", new Function)) {5.0000000000000000000000; }\nwindow.hasOwnProperty(\"prototype\")");
tryItOut("with({}) { return  /x/g .hasOwnProperty(\"__noSuchMethod__\"); } ");
tryItOut("for(let y in []);");
tryItOut("__noSuchMethod__ = [z1,,];\nprop\n");
tryItOut("L: return;");
tryItOut("while(([ \"\" ]) && 0)({}).__lookupGetter__");
tryItOut("if(__count__) { if ((this.__defineSetter__(\"__noSuchMethod__\", (({}).__lookupGetter__).call))) export *;} else var __parent__, __count__;");
tryItOut("let (({ prop: [], <x><y/></x>: ({ __count__: prototype }) }) = *, prototype = [[1]]) { return window; }");
tryItOut("/*infloop*/for([[[__noSuchMethod__]], ({ getter: ({ __count__: __count__ }), __noSuchMethod__: prototype }), , ] = ((1.3 if ( '' ))); (function  __iterator__ () { return <><x><y/></x></> } ).call([11,12,13,14].filter, )[((\n<x><y/></x>)[((<><x><y/></x></>)(1e4))])]; [[#3={a:#3#}].sort([1,2,3,4].slice) for each (constructor in *)]) {if([<><x><y/></x></>].sort(<y><z/></y>)) { if (Iterator(null,  /x/g ))  if (__count__)} else \treturn; }");
tryItOut("while((Object( \"\" , <><x><y/></x></>).__defineGetter__(\"delete\", ({}).hasOwnProperty) >>=  ''  in ) && 0){/*infloop*/for(this.__defineGetter__(\"prop\", function  __count__ ()@foo); ([({ __count__: constructor }), constructor] =  /x/g ); <x><y/></x>\n ? <x><y/></\fx>.( \"\" ) : (new Object(<><x><y/></x></>)).propertyIsEnumerable(\"__proto__\")) (<x><y/></x>);export *; }");
tryItOut("with({prop: <><x><y/></x></>})let prototype = window;");
tryItOut("/*\n*/if(<bbb xmlns:ccc=\"new [prototype, __count__] = ((<y><z/></y>).watch).call(<x><y/></x>, *, *::*)().unwatch(\"prototype\")\"><ccc:eee></ccc:eee></bbb>.(eval(\"(undefined);\", this) = window\f)) { if ((yield (({}).__lookupGetter__).call(<y><z/></y>,  /x/ )).watch(\"prop\", [1,2,3,4].slice)) {M:do return null; while((++this) && 0); }} else {yield; }");
tryItOut("L: function(y) { yield y; return;; yield y; }");
tryItOut("/*for..in*/L:for(var prop in <y><z/></y>.watch(\"__parent__\", -1)) {export __iterator__\n }");
tryItOut("let (__iterator__ = constructor.__parent__, prototype) { Math.sin const __count__;gc()\t }");
tryItOut("let (__iterator__, prop) { export __noSuchMethod__; }");
tryItOut("{*;let prop = <y><z/></y>, delete = *; }\f");
tryItOut("do {{} } while(((__proto__ = __proto__)) && 0);");
tryItOut("L:if([(set for (__parent__ in *)) for (undefined in (-1)) if (<x/>)]) { if (Function.throw([11,12,13,14].map)) {(<x/>); }} else ( for (prop in  '' ));");
tryItOut("if(new ('haha'.split)(__noSuchMethod__, *::*)) { if (__iterator__ = arguments ? <x/>.* : #2=[<x><y/></x>]) {var __parent__, prototype = this; }} else {}");
tryItOut("/*infloop*/for(var ({ prop: __iterator__, __proto__: __count__ }) = __noSuchMethod__ >>>=<x><y/></x>; #3={a:#3#}['__noSuchMethod__'] = 5.0000000000000000000000; (<><x><y/></x></>.@*)) export *;");
tryItOut(" { return ((-1) *= -3/0) } \n");
tryItOut("with( \"\" )return <x/>;");
tryItOut("throw StopIteration;");
tryItOut("with({__proto__: <><xxx {__noSuchMethod__}={@foo} /></>})\n{yield __parent__;\ffunction  __parent__ (__count__, __count__) { return __noSuchMethod__ }  }");
tryItOut("for(let y in [5,6,7,8]) let(__proto__, __proto__) ((function(){yield  /x/ \n;})());");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = (this.__defineGetter__(\"prototype\", @foo)) in -0) {gc() }");
tryItOut("/*for..in*/L:for(constructor in [this.__defineGetter__(\"function::prop\", [1,2,3,4].map) for (prop\t in <>\t<x><y/></x></>)] === (this.@foo)) {throw __proto__; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("switch(this @ false) { case 8: throw <x><y/></x>;break;  }");
tryItOut("/*for..in*/for(var [prop, __iterator__] = eval(\"*.*.__defineGetter__(\\\"__count__\\\", function (__noSuchMethod__, constructor)this)\", \n0/0)\t in ((@foo if (<x/>)).hasOwnProperty(\" { return ([5.0000000000000000000000].sort(new Function)) } \"))) {return this;L: return -1; }");
tryItOut("if(@foo) { if (<x><y/></x> /= *::*) {}} else new Function");
tryItOut("do (p={}, (p.z =  /x/ )()) while(((* <<= 3/0 <<= __parent__)) && 0);");
tryItOut("\treturn * <= 1e+81;");
tryItOut("/*infloop*/while(*::*)");
tryItOut("/*infloop*/for(<><x><y/></x></>; this; (-1)) {}\n");
tryItOut("/*infloop*/M:for(const constructor = <x><y/></x>; [[1]]; arguments) {var constructor; }");
tryItOut("M:if( \"\"  <<  for ( \"\" .__proto__.__noSuchMethod__ in  '' )) <x><y/></x>");
