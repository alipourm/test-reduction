tryItOut("with({__proto__: break ; @ (new Function(\"(<><x><y/></x></>);\"))( /x/g .watch(\"constructor\", undefined), prop)})throw *::*;");
tryItOut("switch(null.throw(<x><y/></x>) ? prop : <y><z/></y>) { default: ;window.__lookupSetter__(\"constructor\");break; case false: case (__count__ = __parent__): break; case 3: gc()yield; }");
tryItOut("if(*) {{export *;return x::__parent__; } } else  if (( /* Comment */( \"\"  && 4.))) continue ;");
tryItOut("constructor = @foo.* = constructor;");
tryItOut("{.2 = prototype;let (__proto__ = <><x><y/></x></>, prototype = <x><y/></x>) { {} } }");
tryItOut("M:with({__noSuchMethod__: <><x><y/><\n/x></>})export *;");
tryItOut("L: return <y><z/></y>;");
tryItOut("throw __count__;");
tryItOut("{prop: #1# }");
tryItOut("if(__noSuchMethod__(<y><z/></y>) = *::* %= __proto__) {;<><x><y/></x></>; } else let __parent__ =  '' , prototype = 3;");
tryItOut("switch(((new __proto__ = __iterator__()))[new (({}).hasOwnProperty)(<x/>)]) { case (-1): default: break; case 5: if(<x/>) [1,2,3,4].slice else  if ((prototype)) {const constructor =  /x/ , __proto__ = (-1);yield; } else  const prop;case ([15,16,17,18].map(<><x><y/></x></>, <x><y/></x>.eval((<x>(/<y/>/)x/>))): (__iterator__ =  \"\" );break;  }");
tryItOut("M:switch(this.zzz.zzz) { default: L:if((this.__defineGetter__(\"prop\", <x><y/></x> ? __proto__ : @foo))) if(-0) {yield <y><z/></y>; } else yield window; else {break M; } }");
tryItOut("/*for..in*/for(const constructor in ((*::*).__defineSetter__).call) {} const prototype;");
tryItOut("{undefined\n { yield <><bbb xmlns=\"({prototype: <x><y/></x>, __noSuchMethod__ getter: (undefined).apply }) :: (prototype =  /x/ )\"><ccc:ddd><!--yy--></ccc:ddd></bbb></> }  }\n/*for..in*/M:for(__proto__ = constructor in function(id) { return id }) {var continue ;; }");
tryItOut("do __count__ while((<x><y/></x> / [,]) && 0);");
tryItOut("\n");
tryItOut("with({}) { __noSuchMethod__ = constructor; } ");
tryItOut("{return; }");
tryItOut("with({}) { try { return __iterator__; } catch(__parent__ if (function(){return __noSuchMethod__ = this;})()) { __count__ = constructor; } catch(x::prop) { this.zzz.zzz; }  } ");
tryItOut("throw StopIteration;");
tryItOut("while((<x><y/></x>) && 0)\t\ngc()");
tryItOut("let (__count__ = <x><y/></x>) {  } const __noSuchMethod__");
tryItOut("if((this.__defineSetter__(\"constructor\", new <x><y/></x>(*)))) {<>\t<x><y/></x></>;return undefined; } else  if (new Boolean([*::*])) {<x><y/></x>; } else {(<><x><y/></x></>); }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if(<x><y/></x>) var __count__ = <><x><y/></x></>; else  if (<y><z/></y>) <><x><y/></x></>; else (prop);");
tryItOut("{return *::*;gc() }");
tryItOut(";");
tryItOut("if(__proto__.__parent__) throw __iterator__; else export *;");
tryItOut("L: const __noSuchMethod__ = ({__parent__: <x/>,  set __parent__ __iterator__ () { yield null }  }), __iterator__ = [[1]];");
tryItOut("\fif(*::*.@foo) {return;yield; } else  if ((({  { const prop = prop, __noSuchMethod__; } : __parent__, __parent__: prop }) = \n<x/>)) return;");
tryItOut("/*infloop*/M:for(let __iterator__ =  /x/ ; \n(-1); (<><x><y/></x></>.propertyIsEnumerable(\"__proto__\"))) export prototype;");
tryItOut("/*for..in*/M:for(var [prototype, __count__] = this in null) export __parent__;");
tryItOut("throw prototype;");
tryItOut("/*infloop*/while(/*for..in*//* nogeckoex bug 349964 */ for  each(((<x><y/>\f</x>)(this, *).yoyo(eval(\"true\",  \"\" )))((__parent__.__lookupSetter__(\"getter\")) === __count__ = function::__count__) in -3/0--) {__noSuchMethod__ = <x><y/></x>, __iterator__ = null; }[prop = <x/>]){return new Iterator(window); }");
tryItOut("{let  /x/ , prototype = null\n<x><y/></x>; }");
tryItOut("if(let (constructor = <x/>) /a/gi) { if (\f<></> ?  /x/  : window /= [11,12,13,14].some) return <y><z/></y>;} else gc()");
tryItOut("L: <><x><y/></x></>;");
tryItOut("if(([1] for (__proto__ in  \"\" ))) {continue ;continue M; } else  if (__noSuchMethod__ =  /x/g ) ;");
tryItOut("M:if(new (undefined)()) {/*infloop*/for(const __count__; [[]]; this) {throw <x><y/></x>; } } else  if ([] = ({ __noSuchMethod__: __proto__, __parent__: prototype }) < <x><y/></x>.__lookupSetter__(\"prop\").propertyIsEnumerable(\"__count__\")) {[[1]]; } else {{(5.0000000000000000000000).__defineSetter__gc() }yield #1#; }");
tryItOut("/*infloop*/while(((undefined).watch).call(1.2e3, -1, *)){/*infloop*/do {\fM:do {throw <x><y/></x>; } while((0x99) && 0);M:if(3) ; } while(\t<x><y/></x> || __count__); }");
tryItOut("export __proto__;");
tryItOut("L:if([[]]) /*infloop*/L:for(4.; <x><y/></x>; window) {; } else  if ((__parent__ = ((uneval(<x><y/></x>))))) { }");
tryItOut("/*for..in*/for(prop = (prop = *::*.yoyo(arguments)) in  /x/g (prop, <x><y/></x>)()) {{} }");
tryItOut("L: for(let y in []);");
tryItOut("L: return;");
tryItOut("function(y) { yield y; throw <x><y/></x>;; yield y; }");
tryItOut("M:do L: ; while(([(Function) for each (constructor in (new (this)(__proto__, <y><z/></y>)).throw(__parent__ =  { yield <y><z/></y> |= __noSuchMethod__ } )) for (__noSuchMethod__ in  /x/ .__lookupGetter__(\"__count__\")) for each ( in (<\f><x><y/></x></> if (*))) for ([11,12,13,14].sort['__iterator__'] in  /x/ ) for (__noSuchMethod__ in <x><y/></x>) for each (__count__ in <><x><y/></x></>)]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (function ([y]) { })() *= 1.2e3) {throw __noSuchMethod__;setter; }");
tryItOut("switch(([__iterator__ = <x/>].eval( /* Comment */1e-81))) { default: break; switch(*) { case 6: break; default: {} }break;  }");
tryItOut("with(__parent__ = <><x><y/></x></>){{} }");
tryItOut("with(<xxx>{prototype}</xxx>){ {  /x/g function (__noSuchMethod__) { yield <y><z/></y> }  #2=[constructor], __iterator__ = <x/>.propertyIsEnumerable(\"constructor\") }  }");
tryItOut("return <><x><y/></x></>;\f");
tryItOut("{throw __parent__;export prototype; }");
tryItOut("yield (({__proto__ getter: __proto__, __proto__: RegExp([1,,], false) })\n);");
tryItOut("/*for..in*/for(true &  /x/  in 3) {export __proto__; }");
tryItOut("while((__noSuchMethod__ =  /x/g .throw([[]])) && 0)return [,,];");
tryItOut("/*for..in*/M:for([x::__parent__, __iterator__] = (__iterator__.(prototype)) in __proto__ = (-0)) {}");
tryItOut("while((window) && 0){var __iterator__ =  /x/ , x::__noSuchMethod__;(<y><z/></y>); }");
tryItOut("/*for..in*/L:for(((window)(3)) in *) {return;constructor =  \"\" , prototype = (-0); }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((function (__iterator__) { yield this } ).call)( \"\" ))){return __proto__;var __count__, __parent__ = 7; }");
tryItOut("return ++();");
tryItOut("switch(<y><z/></y> for (__proto__ in window)) { default: break;  }");
tryItOut("L: /*infloop*/while((-0))[\t__parent__, setter, , ]");
tryItOut("export __proto__;");
tryItOut("\n{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [11,12,13,14].map) {throw  \"\" ; }");
tryItOut("if(-- \"\" ) M:if(null) { if (<x><y/></x>) return;} else (true); else  if (({ set __iterator__(__parent__, __noSuchMethod__) { return \f<x><y/></x>.__defineSetter__(\"constructor\", [1,2,3,4].slice) } , __noSuchMethod__: this.__defineSetter__(\"prop\", __iterator__) })) throw window;");
tryItOut("/*infloop*/for(const ({ __count__: (__iterator__)(__proto__) }) = *; __iterator__.throw( /x/g ).propertyIsEnumerable(\"__noSuchMethod__\"); (([try { with({}) continue L; } catch(__proto__ if +<y><z/></y> == (({prop: 0})/*\n*/)) { with({}) (__iterator__); } finally { this.zzz.zzz; } ] for each (__count__ in *) if (true)))) let __noSuchMethod__, __iterator__ = <x><y/></x>;");
tryItOut("/*infloop*/for(const __count__; [15,16,17,18].map(eval(\"(let (__noSuchMethod__) 1e81)\", (( \"\" .eval(<x/>)))), __count__); ([11,12,13,14].map >= (<><x><y/></x></>.__defineGetter__(\"__parent__\", /a/gi)) .@x:: *)) L:if((((__noSuchMethod__.prop = -0.hasOwnProperty(\"prop\")) if (({a1:1}))))) { if (((eval).call(<><x><y/></x></>, <x><y/></x>).__lookupGetter__(\"__noSuchMethod__\"))) {continue ; } else 1e+81}");
tryItOut("{return #3={a:#3#}; }");
tryItOut("((this.__defineSetter__(\"__count__\", function(y) { yield y; {}; yield y; })));");
tryItOut("return <><x><y/></x></>; const constructor;");
tryItOut("do __proto__ = <x/>; while((prototype = ({a2:z2})) && 0);");
tryItOut("if(function(y) { yield y; /*infloop*/M:for(var __proto__; <x><y/></x>; this) {(<><x><y/></x></>); }; yield y; }) {continue M }");
tryItOut("{1e+81 }");
tryItOut("const __parent__ = window;");
tryItOut("/*for..in*/for(let [prototype, __parent__] = *::* in __noSuchMethod__) {*; }");
tryItOut("continue \n");
tryItOut("export __parent__; const __proto__;");
tryItOut("M:with( /* Comment */__noSuchMethod__.(function(id) { return id }))/*infloop*/L:for(var __count__; this; *) var __proto__ = undefined, prototype;");
tryItOut("const __proto__ = false;\nexport __iterator__;\n");
tryItOut("{export __count__; }");
tryItOut("L: var prop;");
tryItOut("with(false === ({}))gc()");
tryItOut("if((__parent__.prop = [1,,])) {/*for..in*/for(prototype in ((__proto__)((eval(\"break M;\", __noSuchMethod__)))))gc() } else  if (__iterator__.__parent__ = <x><y/></x>--)  else gc()");
tryItOut("prototype\n");
tryItOut("yield *.propertyIsEnumerable(\"__parent__\");");
tryItOut("/*infloop*/M:for(__count__ = ++ /x/g ; ([11,12,13,14].sort); (<y><z/></y>.unwatch(\"__parent__\"))) {(<x><y/></x>); }");
tryItOut("/*infloop*/L:for(const [({ __count__: ({ __proto__: ({ __proto__: [[], ({ __proto__: prototype, __proto__: __parent__ })] }) }), __iterator__: ({ prototype: ({ __count__: ({ __noSuchMethod__: ({ __proto__: delete }), prototype: __parent__ }), __count__: constructor }) }) }), , , , []] = (<x><y/></x>.constructor = <x><y/></x>.(<x><y/></x>)); <y><z/></y>; (__proto__ === *::*)) function (__count__, __noSuchMethod__) { yield this } ");
tryItOut("switch(\r(__parent__ = [ /x/g ][__noSuchMethod__.yoyo(<x><y/></x>)])) { case <x/>: switch(([11,12,13,14].map)) { case null .@ this: break; var prototype =  /x/g , __iterator__ = *;break;  }break;  }");
tryItOut("prop, __parent__");
tryItOut("{gc() }");
tryItOut("yield\n");
tryItOut("L:if(eval(\";\", 1.2e3)) var __noSuchMethod__ = 033, __noSuchMethod__ = 1e-81; else  if (window) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <y><z/></y>.propertyIsEnumerable(\"__parent__\")) {yield;return @foo; }");
tryItOut("while((eval(\"__iterator__.({throw this;return <x><y/></x>; })\", new <y><z/></y>())) && 0)");
tryItOut("__count__, __parent__;\nreturn;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in __iterator__) (<x/>);");
tryItOut("for(let y in []);");
tryItOut("if((__iterator__ = @foo)) { if ((constructor.__proto__ = __parent__: null.(<><x\t><y/></x></>))) {return;[[<y><z/></y>\f].filter((new Function(\"gc()\"))) for (__iterator__.prop in null) if (null)] }} else if(<><x><y/></x></>) {let __noSuchMethod__;let prop = constructor, __parent__ = prototype; }");
tryItOut("if(+constructor) { if ((__parent__.(__iterator__ = <x><y/></x>).watch(\"__parent__\", (({__parent__: 0/0}))))) /*for..in*/for(const prop = (window /= <x><y/></x>) in ((({})).__defineSetter__)(<><x><y/></x></>, <><x><y/></x></>) | ( '' )) {/*infloop*/for(let __count__ = new Iterator(4., <x><y/></x>); (<x><y/></x>.*); [15,16,17,18].sort(({}).hasOwnProperty, <x><y/></x>)) let __count__;return <><x><y/></x></>; } else const prototype;}");
tryItOut("if((function ([y]) { })()) return <x><y/></x>;");
tryItOut("Function\n(undefined);\n");
tryItOut("if([]) (prop);");
tryItOut("throw __iterator__;");
tryItOut("with((continue\f L)){{}(-0); }");
tryItOut("[]");
tryItOut("{}\nvar constructor = [1], __parent__ = false;");
tryItOut("constructor = __parent__;");
tryItOut("/*infloop*/for( \"\" ; [, ] = (({__count__: __iterator__ = function ([y]) { } })); null) {L: continue M; for ((__noSuchMethod__) in __proto__.__lookupSetter__(\"__parent__\") >>> (prototype = <x><y/></x>)) if ( /* Comment */( /* Comment */__noSuchMethod__)) }");
tryItOut("M:if(([, ] = (p={}, (p.z =  /x/g )()))) { if ((prop.__noSuchMethod__%=<><xxx>{__noSuchMethod__}</xxx><\t/>)) gc()} else {export *; }");
tryItOut("/*infloop*/M:for(prop; (this(__iterator__)); (\n<><x><y/></x></>)) {yield;return true; }");
tryItOut("if([1,,]) { if (__iterator__) {gc() } else ;}");
tryItOut("{/*infloop*/for(let __parent__ = <y><z/></y>; [1,,]; false) return __count__;let (x::__parent__ = (yield <x><y/></x>), yield *;) { /*for..in*/for([__proto__, __count__] = (<x><y/></x> , 0) in __parent__) { \"\" ; } } }");
tryItOut("/*infloop*/while(this.zzz.zzz)try { {} } catch(__parent__ if true) { *::*; } finally { export prop = window, __noSuchMethod__ = <><x><y/></x></>; } ");
tryItOut("yield;");
tryItOut("with(constructor)const prop = <><x><y/><///h\nx></>;\nM:if(<x><y/></\rx>.__defineSetter__(\"__iterator__\", (3).__defineSetter__)) -3/0; else  if ((__count__ = <x><y/></x>)) gc() else {let __noSuchMethod__ = this; }\n");
tryItOut("if(@foo) if(prop =  /x/g ) return 1.2e3; else  if (constructor = @foo) { } else  if ((Function())) {yield;return;\f } else [1,,];");
tryItOut("<y><z/></y>");
tryItOut("const yield;\n/*infloop*/for(let ({ __noSuchMethod__: ({ __parent__: prototype, __noSuchMethod__: __count__ }), __noSuchMethod__: __noSuchMethod__ }) = __count__ = ({ __parent__: __noSuchMethod__, prop: true }); (prop.(__parent__) .@x:: (new (function ([y]) { })()((-1), [,,z1]))); this.zzz.zzz) {function (<y><z/></y>)*::*yield; }\n");
tryItOut("while((new ((window.valueOf(\"number\")))(__iterator__ = [], @foo)) && 0)if(__parent__) {; } else  if ({}) return <x/>; else export *;");
tryItOut("/*infloop*/for(((function  __proto__ (__proto__, constructor)[1]).call(yield, )).__defineSetter__(\"constructor\", function () { yield __iterator__ } ); <><x><y/></x></>; this.zzz.zzz) /*for..in*//* nogeckoex bug 349964 */window");
tryItOut("let(({ __parent__: prop, __noSuchMethod__: ({ prop: ({ prototype: __count__ }) }) })) { prop = each;");
tryItOut("let constructor = __parent__; const \f__proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in __noSuchMethod__) yield true");
tryItOut("export *\n");
tryItOut("export *\n\n/*for..in*/M:for([__noSuchMethod__, constructor] = (#0= /x/g )() in (this.zzz.zzz)) {M:if(yield __parent__.unwatch(\"delete\")) { if (this.__defineSetter__(\"prop\", function  prototype () { var constructor = #1=[#1#]; } )) {var constructor, constructor;yield; } else { }} } const __parent__;");
tryItOut("L:switch(({}).__lookupGetter__()) { case (*::*([)): break;  }");
tryItOut("/*infloop*/for(let __proto__ =  /x/g ; 0x99; <y><z/></y>) var __parent__\t;");
tryItOut("L: {export __iterator__;[,,]; }");
tryItOut("if(new Function( '' , <><x><y/></x></>) <<= <x><y/></x>) {__noSuchMethod__;switch(this.zzz.zzz) { default: (<x><y/></x>);break; case 6: case ({__iterator__:  '' ,  get __iterator__(__iterator__) { return <x/> }  }): export __noSuchMethod__;break; break;  } } else  if (this) {if([,]) { if ({}) {throw <y><z/></y>;return <x><y/></x>; } else continue ;}\n \"\" ;\n }");
tryItOut("/*for..in*/M:for(constructor in (((<x><y/></x>.yoyo(__iterator__)).__defineSetter__)((__parent__ = [1]--)))){gc() }");
tryItOut("try { const prop = <><x><y/></x></>, __proto__ = *::*; } catch(__proto__) { {} } ");
tryItOut("\t:if(-<><x><y/></x></>.yoyo(true)) {yield <><x><y/></x></>; } else  if (<><x><y/></x></> ? (eval(\"null\", undefined)) : ((uneval(__noSuchMethod__-=#3={a:#3#})))) throw <><x><y/></x></>;");
tryItOut("while((<x/>) && 0)do this; while((*) && 0);");
tryItOut("L: const prop; const prototype;");
tryItOut("if(<xxx {__count__}={(\n((null.prototype = *::*) instanceof ((1 for (x in [])))(constructor)))} />) { if ((*::*.hasOwnProperty(\"__parent__\"))) {yield;\nreturn 0;\n } else break M;} const __iterator__;");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(const constructor in ((('fafafa'.replace(/a/g, null)))(__iterator__))){throw <><x><y/></x></>\t; }");
tryItOut("/*for..in*/for(const constructor\t = (yield .2) &&  /= prototype[<x/>] in ((this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__).hasOwnProperty(\"prototype\") for (prototype in [11,12,13,14].map) for each (((Math.sin).call()).eval( /* Comment */<x><y/></x>) in [@foo for (__proto__ in <y><z/></y>)]) for (__count__ in <><x><y/></x></>) for each (constructor in <x/>) for each (__parent__ in l)))) yield window;");
tryItOut("let (prototype) { L:do {yield true; } while((#3={a:#3#}) && 0); }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(<x><y/></x>; *; this) export constructor;gc()");
tryItOut("let (prop = prop = __count__, __parent__) { null; }");
tryItOut("L:if( \"\" ) { if (window) {continue ;var __proto__; } else gc()}\n(<><x><y/></x></>)\n");
tryItOut("/*for..in*/for(function::({ delete: [__iterator__, , __count__] }) = ({a2:z2}).yoyo(<x><y/></x>) = <x><y/></x>.__lookupSetter__(\"prop\") in <x/>) {throw <x><y/></x>;yield; }");
tryItOut("L:if(true) {undefined;export *; } else {export __iterator__; }");
tryItOut("{(<x><y/></x>); }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in  /x/g .eval((__parent__.__count__))) {yield <x/>;{; } }");
tryItOut("/*infloop*/M:for((throw new (function (__proto__) { return 0 } )()); __noSuchMethod__.__iterator__ getter= /a/gi; (( /x/ .@foo).valueOf(\"number\"))) prototype = <x><y/></x>, __noSuchMethod__;\n/*for..in*/for(let __proto__ =  ''  in  /x/g ) {gc()throw prop; }\n\nwith({constructor: __iterator__ = #1#})try { export __count__; } catch(function::__iterator__ if <x/>) { return 033; } \n");
tryItOut("if(('fafafa'.replace(/a/g, function(y) { yield y; let constructor;; yield y; }))) { if ((__iterator__.__proto__)[[z1]]) ; const prototype;} else {throw arguments;try { constructor; } catch(prototype) { ; }  }");
tryItOut("/*infloop*/while((<x><y/></x>)[__parent__] * false >>> true){}");
tryItOut("{}");
tryItOut("var __count__;\ngc()\n");
tryItOut("{(@foo);{} }");
tryItOut("M:with({each: __count__}){continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor(<y><z/></y>) in prototype)  { yield [1] } ");
tryItOut("let (__count__) { L:with({prop: (#1#.unwatch(\"__parent__\"))})(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(var [constructor, prototype] = (uneval( /x/ )) in *) {true;yield; }");
tryItOut("yield <x><y/></x>;");
tryItOut("return <><x><y/></x></>;yield <><x><y/></x></>\n;");
tryItOut("; const __iterator__;");
tryItOut("return @foo;");
tryItOut("/*for..in*/for(prototype in 1e+81 > <y><z/></y>) {(<>throw window;</>);yield }");
tryItOut("/*infloop*/for(const ({ constructor: __count__, __iterator__: constructor }) = ({ yield: __iterator__ }) = (new <x><y/></x>(prop, window)); __noSuchMethod__; (null && arguments.@foo)) {while(((__noSuchMethod__) = <x><y/></x>.unwatch(\"prototype\")) && 0){throw window;{(1.2e3); } } }");
tryItOut("if(this.zzz.zzz) {} else  if ((<x><y/></x>.prop.valueOf(\"number\"))) (new Function(\"export __noSuchMethod__;\")) else continue ;");
tryItOut("/*for..in*/for([constructor, constructor] =  ''  in <x/>) ");
tryItOut("/*infloop*/for((continue ; >>>=constructor =  \"\" ) != </*\n*/x><y/></x> @  /x/ .yoyo(); H; [, ({ constructor: [, ({ prop: __count__ }), , [setter], ] }), [, , , ({ __noSuchMethod__: ({ prop: [prop, , prototype, constructor] }), __proto__: ({ __noSuchMethod__: ({ constructor: constructor, prop: constructor }) }) }), [({ function::__iterator__: ({ prototype: __parent__, __noSuchMethod__: __noSuchMethod__ }) }), , , ]]] = new  /x/ ()) export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in *) {( /x/ );return; }");
tryItOut("while(( /x/g ) && 0){return eval(\"\", window); }");
tryItOut("try { yield <x><y/></x> == <><x><y/></x></>; } finally { with({}) return  /x/ ; } ");
tryItOut("let (__iterator__) { this; }\n<>true</>\n");
tryItOut("switch(window) { default: break;  }");
tryItOut("/*for..in*/L:for(var __iterator__ = [1,2,3,4].map in new ({}).hasOwnProperty(('fafafa'.replace(/a/g, (<x><y/></x>).__defineSetter__)))) {if(({})) { if (({constructor: <><x><y/></x></>})) {throw this;if(<x><y/></x>) continue ; else {(({}).__lookupGetter__).apply } } else {export __iterator__; }}prop = __parent__; }");
tryItOut("/*for..in*/for(var prop. for (__count__ in (prop.__iterator__ = <y><z/></y>\n)) for (constructor in (yield function ([y]) { })) if (*::*) in ((/a/gi)(([((new Function).call([1].constructor = __iterator__++, )) for each (__noSuchMethod__ in (uneval(({constructor setter: (new Function(\"@foo\")) }))))]))))L:if(new ( /x/g )()) { if ((__proto__ = (yield window))[(eval(\"{}\", prop))]) {/*for..in*/for(let (this)(*::*) in (((window[<x/>]).__defineSetter__)((uneval( /x/g ))))){;{}; } }} else prototype;");
tryItOut("");
tryItOut("do {/*infloop*/do \r{throw 1e-81; } while(__count__ = this); } while((yield undefined) && 0);");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if(__parent__ = <><x><y/></x></>) <x/>; else  if (({__count__: (Function).call(<x><y/></x>, __noSuchMethod__, <><x><y/></x></>)})) {return this; } else { }");
tryItOut("if(\n*::*) {let __proto__;const __count__; }");
tryItOut("/*infloop*/for(const __parent__; [<><x><y/></x></>]; window) [1,2,3,4].slice");
tryItOut("/*infloop*/for(const prop; ({a2:z2}); @foo) {gc(); }");
tryItOut("with({__count__: ([-0].sort(Math.pow))(__noSuchMethod__, #1#)++ === *}){if(\n__proto__.__lookupGetter__(\"constructor\")) {let __parent__ = this, __noSuchMethod__;(#1=[#1#]); } else  if ((this.__defineGetter__(\"__count__\", function  __proto__ (__parent__, prop) { return <y><z/></y> } ))((prop.__iterator__ setter= function (__count__) { __count__ = this, constructor; } ))) {return;yield; } else {}gc() const __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.constructor getter= [1,2,3,4].slice in arguments .@*:: []) {with(<><x><y/></x></>)false; }");
tryItOut("/*infloop*/for(let prop; (uneval(this)) *= [,,z1]--; (({ constructor: ({ \nconstructor: __noSuchMethod__ }) }) = (function (setter) { return window } )())) (({a1:1}));");
tryItOut("__noSuchMethod__ = 1.2e3, prototype = *\n/*infloop*/do {<x/>; } while( ''  === <x><y/></x>);");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ((function(q) { return q; }).call(<><x><y/></*\n*//x></> /  '' , <x/>,  /* Comment */[,] .@ arguments)).isPrototypeOf(({ __parent__: __parent__ }) = __iterator__) in <>(\t#1# , @foo)</\f>.((prototype for (__proto__ in #1=[#1#])))) /*for..in*/M:for(const __count__ in ({a1:1})) {continue M;return; }");
tryItOut("/*for..in*/for(<y><z/></y>['__parent__\t'] in ((prop =  '' )((({a2:z2}).__lookupGetter__(\"__parent__\")))))/*for..in*/for(var __iterator__.__proto__ in (((<x><y/></x>).__defineSetter__)(false.prototype)))return <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <y><z/></y>.hasOwnProperty(\"prop\")) switch(new <x><y/></x>(3.141592653589793, <y><z/></y>).watch(\"prop\", Function)) { case (): default: (prop);break;  }");
tryItOut("if((__parent__ = {})) { if (__iterator__) export __noSuchMethod__;} else {}");
tryItOut("/*for..in*/for(var function::__iterator__ = this.zzz.zzz in <><x><y/></x></>) yield\n");
tryItOut("throw  \"\" ;");
tryItOut("let __proto__ =  '' , __noSuchMethod__");
tryItOut("/*infloop*/for(let __count__ = this; @foo; ({a1:1})) {}");
tryItOut("do \t while((<x/>) && 0); const prototype;");
tryItOut("__count__");
tryItOut("/*infloop*/for(let prop = [({a1:1})].map(Function);  /x/ .yoyo(@foo);  /* Comment */#1#) let __proto__, prototype = [[]]\ncontinue M;");
tryItOut("({ prototype: ({ prop: __parent__, prototype: [, __parent__, ] }) }) = ((<y><z/></y> / window) - prototype)");
tryItOut("with(default: export *;(*::*, true)){export *; }");
tryItOut("{continue M;const __count__ = @foo, __iterator__ = __noSuchMethod__; }");
