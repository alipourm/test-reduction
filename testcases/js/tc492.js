tryItOut("if(({__count__: ( /* Comment */<y><z/></y>), prototype: <x><y/></x> %= true })) { if (( /* Comment */)) yield; else {export constructor; }}");
tryItOut("let ([], prop = (yield prop.prototype = (truewindow))) { this.zzz.zzz; }");
tryItOut("do export *; while((<x/>) && 0);");
tryItOut("export *\n");
tryItOut("let (__noSuchMethod__ = ({ __parent__: constructor, constructor: ({ __count__: __parent__ }) }) = 'fafafa'.replace(/a/g, (<x><y/></x>).watch)) { yield <x><y/></x>; const __noSuchMethod__; }");
tryItOut("return <><x><y/></x></>;\ntry { return <><x><y/></x></>; } finally { 'haha'.split } \n");
tryItOut("if(<><x><y/></x></>.@foo) let constructor, get; else {{return;(1 for (x in [])) } }");
tryItOut("try { let(prototype, __count__ = this) { yield @foo; } finally { this.zzz.zzz; } ");
tryItOut("L:if([[1]]) {yield;switch(<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")) { case *::*.propertyIsEnumerable(\"__iterator__\"): case window:  }export *; } else  if (<y><z/></y>) \rthrow <><x><y/></x></>; else {gc() }");
tryItOut("if( /* Comment */<><x><y/></x></>) { if (new (eval)()) yield this; else {const __count__; }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((new Function)(({prop: ([11,12,13,14].some) })))){M:if(<xxx>{__proto__}</xxx>) { if (3.141592653589793) {if(<><x><y/></x></>) {var prototype = *;let prop; } else  if (false)  this  }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.__noSuchMethod__ in 1e4) var __count__, <x/> = null;return; } }");
tryItOut("if((0x99 >= @foo)) let prototype, __noSuchMethod__;");
tryItOut("let (__parent__ = this) { yield  \"\" ; }");
tryItOut("if(__iterator__.__iterator__ = window , (new (<x><y/></x>)((1.2e3.prototype = null)))) const __proto__; else {with({__count__: *})prototype, __iterator__; }");
tryItOut("if(~(({__count__: [1,,] })) == <x/>.__defineGetter__(\"constructor\", __iterator__).__parent__) {if(*) {yield <x><y/></x>;undefined; } else {{}return; }export *; }");
tryItOut("/*for..in*/for(var [(constructor), constructor] = ( '' .__lookupGetter__(\"__iterator__\")) in arguments) throw  /x/g ;");
tryItOut("{yield <x><y/></x>; /x/ ; }");
tryItOut("with({prop: (*::* &= *)}){gc() }");
tryItOut("gc() const __iterator__;");
tryItOut("with({__proto__: ([1,2,3,4].slice).call(true, window)}){yield (-1); }");
tryItOut("((this.propertyIsEnumerable(\"__proto__\")).__defineSetter__(\"constructor\", function (({ constructor: __proto__, prototype: __noSuchMethod__ }), __parent__) { return [<x><y/></x>] } ));");
tryItOut("/*infloop*/for(((uneval(<><bbb\t xmlns=\" '' \"><x><y/></x><ccc:ddd></ccc:ddd></bbb></>))); [ /x/ .isPrototypeOf(0x99) if (1.3)]; (constructor = false)) var  = <><x><y/></x></>;");
tryItOut("/*infloop*/while(0){return window; }");
tryItOut("with({prop: (--__count__.throw(<x><y/></x>))})<y><z/></y>;");
tryItOut("/*infloop*/for(var prop; (new [z1]); <> </>) {export __noSuchMethod__;yield @foo; }");
tryItOut("do {break L; } while(((p={}, (p.z = this.zzz.zzz)())) && 0);");
tryItOut("void ++#1# + (-1).yoyo((((function ([y]) { })()).__defineGetter__(\"__count__\", function (prop, __noSuchMethod__) { gc() } )))");
tryItOut("if(prop.__proto__ = <><x><y/></x></>) {([[1]]); } else  if ('fafafa'.replace(/a/g, (__parent__).watch)) return; else {const __count__, prototype =  return ; }\n__iterator__;\n");
tryItOut("/*infloop*/for((window\n.__proto__ = __iterator__ =  \"\"  <= (false = (function ([y]) { })())); 'fafafa'.replace(/a/g, Math.sin); this.__defineGetter__(\"__proto__\", function  prop () { return constructor.__iterator__ } ) @ __proto__) throw <y><z/></y>;");
tryItOut("yield;\ngc()\n");
tryItOut("let(__proto__) { __parent__ = __proto__\n");
tryItOut("/*for..in*/\tfor(__count__ in ((Function)((Function().propertyIsEnumerable(\"__noSuchMethod__\"\t)))))/*infloop*/do const __count__ = window, __iterator__ = <x/>; while(*::*);");
tryItOut("if((new ([,,z1].__defineGetter__(\"__noSuchMethod__\", gc))(undefined, new 1.2e3(this, <><x><y/></x></>))).yoyo(((function(q) { return q; }).call(({a2:z2}), 1e4, null)))) { if (<>yyy</>) {{{} } }} else return;");
tryItOut("{}");
tryItOut("/*infloop*/for(\n(new (prototype)(<y><z/></y>).throw(let (prototype = this) (function ([y]) { })())); (); <x/>) return this;");
tryItOut("L: {gc(){} }");
tryItOut("{Math.sinvar __count__, __proto__; }");
tryItOut("(constructor) = __iterator__;");
tryItOut("/*for..in*/for(const __proto__.__noSuchMethod__ in 5.0000000000000000000000) { void  }");
tryItOut("switch([[]].hasOwnProperty(\"__iterator__\")) { case 2: break; L:with( /x/g ){ } }");
tryItOut("return undefined");
tryItOut("/*for..in*/L:for(var __count__ = *::* in __iterator__) {let __proto__;/*for..in*/for(var [__count__, __count__] = window in <x><y/></x>) {yield; } }");
tryItOut("/*for..in*/for(__noSuchMethod__.constructor in ((eval)(false))){/*infloop*/M:for(var prop; @foo.valueOf(\"number\"); [15,16,17,18].sort(\ffunction  __parent__ (prop) { yield <><x><y/></x></> } , <x><y/></x>)) {var __iterator__, function::__noSuchMethod__ = #1=[#1#]; } }");
tryItOut("if(({ __count__: ({ prototype//h\n: __count__, __iterator__: prop }), __count__: prop }) = [z1] <= <y><z/></y>.isPrototypeOf((__noSuchMethod__.throw(window)))) const prop, prototype; else  if (String(<y><z/></y>)) export __proto__; const __iterator__;");
tryItOut("/*for..in*/for(const prop in (prototype.__parent__ = <x><y/></x>.isPrototypeOf(<y><z/></y>) ? __noSuchMethod__.__noSuchMethod__\n : (prototype = prototype ^ <><x><y/></x></> >>= this))) {/*for..in*/for(var [, ] in ((true)(function(id) { return id })))return;prototype; }");
tryItOut("L: return ({a2:z2}) <<= [1,,];");
tryItOut("if(<><x><y/></x></>.prototype = *::*) let __count__; else {return this;yield; }");
tryItOut("if([z1]) return 1e81; else  if (<x><y/></x>) {{}(true); } else {prop, prop;return; }");
tryItOut("\tlet try { let __iterator__ = <><x><y/></x></>; } catch(__proto__ if (function(){export *;})()) { (1 for (x in [])) } catch(prototype) { __proto__ = prop; } , __iterator__ = null; const __proto__;");
tryItOut("/*for..in*/L:for(const [constructor, prototype] = prototype.valueOf(\"number\") in null) let __iterator__, __iterator__ = this;");
tryItOut("for(let y in [5,6,7,8]) with({}) { for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("export __proto__\nconst __proto__;");
tryItOut("with({constructor: __count__})let (constructor = [11,12,13,14].filter) { break ; }");
tryItOut("let (__count__) { if(#1=[#1#]) { \"\" ;{} } else  if ( /x/ ) let prototype; }");
tryItOut("return [z1];\n\n");
tryItOut("{;continue ; }");
tryItOut("/*for..in*/L:for(prototype = (*::* .@*:: [1,,]) in <y><z/></y>) {}");
tryItOut("let(constructor, __proto__) { return \n__noSuchMethod__;");
tryItOut("let (prop, prop) {  }");
tryItOut("gc()");
tryItOut("/*infloop*/for(prop; prototype != this :: (<><!--yy--></>.([1,2,3,4].map)); (new <x/>\n(<y><z/></y>.propertyIsEnumerable(\"__proto__\"), ((<y><z/></y>)[false]))) == (\n)) if(prototype ? undefined : null) throw __noSuchMethod__; else  if ( /x/ .valueOf(\"number\")\f) return; else {({}).__lookupGetter__ }");
tryItOut("if(__noSuchMethod__ = true) {continue M;var __noSuchMethod__ = <x/>, constructor = window; } else  if (__noSuchMethod__ = ({__proto__: <x><y/></x>,  get __count__()prototype })) gc else if(<><x><y/></x></>) {(window);{} } else  if (<x><y/></x>) { } else export constructor;");
tryItOut("/*infloop*/while((<x/> ? <x><y/></x> : <><x><y/></x></>))throw [1,,];");
tryItOut(" \"\" ");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.isPrototypeOf( \"\" (__count__ = <x><y/></x>.isPrototypeOf(__proto__.(1e+81)))).unwatch(\"__parent__\")) {/*infloop*/do {return; } while(true ^ -1);; }");
tryItOut("/*for..in*/M:for(var constructor =  /x/  in ( \"\" .isPrototypeOf(<><x><y/></x></>))) L: switch(<x/>) { case __count__: break; export __proto__;break; continue ;break; ; }\n");
tryItOut("gc() const constructor;");
tryItOut("L:if(eval(\"null\", 0.1)) {if( '' ) return undefined; else gc() } else  if (((yield <><x><y/></x></>) .@ ([[]]).call(\t1.2e3, ))) let (__parent__ = [[,,] if (window)]) { yield  /x/g ; } else ;");
tryItOut("{{yield *;; } }");
tryItOut("gc()");
tryItOut("__iterator__ = prototype;");
tryItOut("throw __count__;");
tryItOut("if(eval(\"{}\", [__noSuchMethod__].map((Math.pow).apply)) % __iterator__.__proto__) {/*infloop*/while(((uneval(function ([y]) { })))){return constructor;yield prototype; }; } else  if ([15,16,17,18].sort((*::*.yoyo((-0))).__defineSetter__, (eval(<x><y/></x>, <><x><y/></x></>)) ^= #3={a:#3#}.constructor)) (<x/>).__defineSetter__ else {;const __proto__, prop = 3.141592653589793; }");
tryItOut("L: (false);");
tryItOut("let (__proto__) { yield window; } const ( /* Comment */((3).apply).call((yield new window([,], @foo)), Exception().isPrototypeOf( '' ), ({prop getter: \tfunction  __noSuchMethod__ (prop, __noSuchMethod__)__noSuchMethod__ })).__defineSetter__(\"prop\", /a/gi)),  /x/ ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__(<x><y/></x>) in <x/>) {yield window;{} }");
tryItOut("with(((yield window) ^= ([15,16,17,18].sort(function(y) { yield y; export __proto__;; yield y; }, (eval(\"({a1:1})\", 1e+81))))))M\n:with({__parent__: }){var prototype = <y><z/></y>, __count__;\nexport __proto__;\n }");
tryItOut("if((gc)(<><x><y/></x></>, undefined)) {prop = #1#, __parent__;__proto__ =  /x/ , __count__ = <x/>; } else {export __proto__; }");
tryItOut("/*infloop*/for(function ([y]) { } - window; (constructor = (constructor = (({prototype: true})))); (this.zzz.zzz) if ((uneval(constructor.__noSuchMethod__ setter= Function)))) {M:switch(*) { case 4: var __count__ = <y><z/></y>;break;  }L:if(.2) {let __proto__ =  /x/ ; } else  if \f(this) \f{{} } }");
tryItOut("let (__iterator__, prototype) { {/*infloop*/for(const function::prototype = new (undefined)() , new Date(<y><z/></y>); constructor = []; (__count__ = <x/> += (eval(\"-0\", <x/>)).valueOf(\"number\"))) const __count__ =  '' , prop = undefined;<y><z/></y>;( /x/g ); } }");
tryItOut("M:if((((function  prop (__noSuchMethod__, __count__) { let prop, __count__ = <y><z/></y>; } )())(eval(\"__count__ = [[]], prototype = false;\", this), window) instanceof <><xxx>{prop}</xxx></>.hasOwnProperty(\"__parent__\"))) { if (undefined) if(__count__.__noSuchMethod__ = [,]--) {<x><y/></x>; } else  if (*::*) ({}).hasOwnProperty else {{}export *; } else (<x><y/></x>)}");
tryItOut("if(<x/>[1e81].__lookupSetter__(\"__iterator__\")) { if (<><x><y/></x></>.__defineSetter__(\"__iterator__\", .2)) {yield <><x><y/></x></>;(#1=[#1#]); } else }");
tryItOut("{export prototype;; }");
tryItOut("/*infloop*/while( /* Comment */*::*.throw(__iterator__)){\nif( /x/ ) {return *::*; }\n }");
tryItOut("with((__parent__.__proto__)){ /x/ ;return __iterator__; }");
tryItOut("while((Exception((delete __count__), 0.1)) && 0)");
tryItOut("return;");
tryItOut("/*infloop*/while((void (this)[undefined].valueOf(\"number\"))){*;\n{}\nlet (({ get __count__ __noSuchMethod__ () { __parent__ = *::*; } , __count__: true.__proto__ })) { return false; } }");
tryItOut("/*infloop*/for(var __proto__ = <xxx>{__count__}</xxx>.yoyo(window); __parent__ = prototype(); (<x><y/></x> ? [,,z1] : <><x><y/></x></>) ? ({__parent__ setter: /a/gi }) : ((1e81.throw(*)))[(window == [[1]])].@foo) {;export *; }");
tryItOut("switch/( '' .@foo)/ { default: export prop; }");
tryItOut("yield;");
tryItOut("if(@foo\n) __proto__.constructor else  if ((__parent__ = [15,16,17,18].map(undefined, this).hasOwnProperty(\"__noSuchMethod__\"))) (new Function(\"export __noSuchMethod__;\")) else {__count__ = @foo; }");
tryItOut("yield [1];");
tryItOut("throw StopIteration;");
tryItOut("(eval(\"<x><y/></x>.valueOf(\\\"number\\\"\\t)\", (eval(\"[z1,,]\", this)))).watch");
tryItOut("L: {var prototype = <><x><y/></x></>;{} }");
tryItOut("let (function::prop) { if((__proto__)) {continue L;return <x/>;break ; } else  if (this.throw(({__proto__: <><x><y/></x></> }))\f) {{}switch( \"\" ) { case 4: yield;default: {}break; case 4: break; case null: break; break; continue ;break; case 6: *break; case <y><z/></y>: evalconst prop = window, this = [];break; case 9: break;  } } }");
tryItOut("/*for..in*/for(const __parent__ = undefined in <y><z/></y> in *::*) {L: {export *;yield; } }");
tryItOut("if([]) {(<y><z/></y>);var __iterator__; } else __parent__, __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*infloop*/L:for((new Array((function(y) { yield y; return;; yield y; }).call(<x/>, <><x><y/></x></>, <x><y/></x>), false)); <>@foo</>; __noSuchMethod__ = window) {export *; }");
tryItOut("/*infloop*/while(window){-1; }");
tryItOut("L:if(5.0000000000000000000000 & 3.141592653589793) { if (prop) <y><z/></y>; else {}}");
tryItOut("let (__parent__ = (-3/0)[<y><z/></y>](prop.unwatch(\"__noSuchMethod__\"))) { {with(constructor.__noSuchMethod__){switch(<x/>) { default: 'haha'.splitbreak;  }\fexport *; } } }");
tryItOut("(*)\n");
tryItOut("L:with((<x><y/></x> -= 5)){{} }");
tryItOut("{constructor/*for..in*/for(const constructor = window in function(id) { return id }) {throw <x/>;yield false; } }");
tryItOut("{yield;@foo }");
tryItOut("constructor");
tryItOut("/*for..in*/for(const __proto__ in *::*) {return; } const __count__;");
tryItOut("/*for..in*/for(let __proto__ in ((Math.pow)(((__noSuchMethod__.__defineSetter__(\"constructor\", <x><y/></x>)).@*)\f))){L:while((<x><y/><\f/x>.watch(\"__iterator__\", <x/>)) && 0){export __noSuchMethod__;let __proto__, prop; } }");
tryItOut("with({function::__noSuchMethod__: (p={}, (p.z = *::*)())}){}");
tryItOut("{continue L;yield  /x/g ; }");
tryItOut("break L;\n\n");
tryItOut("L:do const __noSuchMethod__ =  /x/ , prop; while(() && 0);");
tryItOut("/*for..in*/for(const __parent__ in window) (window)");
tryItOut("let (__parent__ = <><x><y/></x></>.__count__) { if(<x><y/></x> = constructor.(<x/>)) yield [];\f else gc() }");
tryItOut("/*for..in*/for(const prototype in ((Math.pow)(yield <x/> % ({a1:1}))))/*for..in*/for(const null =  /* Comment */<y><z/></y> in <x/>) {continue L; }");
tryItOut("/*infloop*/for(constructor = <><xxx {__count__}={null} />\t</>; <xxx {__iterator__}={prop} />.(eval(\" /x/ \", <x><y/></x>)); <x/>.__defineGetter__(\"prop\", (true).watch)) export __iterator__;");
tryItOut("if(({constructor getter: function(y) { yield y; return;; yield y; } })) {yield false; } else gc()");
tryItOut("if((function (prototype) { return  } ).call(<><x><y/></x></>, ).unwatch(\"__noSuchMethod__\")) prototype;");
tryItOut("const prototype = <x><y/></x>, __noSuchMethod__;/*for..in*/for(var (prop) in ((((__iterator__ = (-0))).__defineSetter__)(__count__.__iterator__ = (__iterator__ = <y><z/></y>)))){;const __iterator__, __proto__; }");
tryItOut("do {export prototype;\t } while((<y><z/></y>) && 0);");
tryItOut("let __iterator__ = @foo) { export __proto__; }");
tryItOut("return\n/*infloop*/for(const __noSuchMethod__ = __count__; [[]]; <x/>) ");
tryItOut("__parent__ = <y><z/></y> &= [1,,]");
tryItOut("{export *;( /x/ ); }");
tryItOut("if(({__noSuchMethod__: true }) && ((this).watch/*\n*/(3,  '' ).throw(null - <><x><y/></x></>))) switch(__iterator__ = new ((__noSuchMethod__ = function ([y]) { }))([11,12,13,14].sort)) { default: break;  } else  if (((<><x><y/></x></>)[[[1]]]) >> (<><x><y/></x></> if (<><x><\ty/></x></>))) return <x><y/></x>; const __noSuchMethod__;");
tryItOut("return;");
tryItOut("try { with({}) yield = prop; } catch(__iterator__) { with({}) { this.zzz.zzz; }  } ");
tryItOut("/*infloop*/for(let (__count__) = *.__iterator__.isPrototypeOf([11,12,13,14].sort); this; (let (prop = __count__, __parent__ = 1e+81) <x><y/></x>)) {gc() }");
tryItOut("while(((window == *::*).watch(\"__parent__\", ({}).__lookupGetter__)) && 0){prototype;{} }");
tryItOut("L:if(<><x><y/></x></>.unwatch(\"constructor\") & RegExp(<x><y/></x> / <x/>, (-1).valueOf(\"number\"))) return  /x/ ;");
tryItOut("let (prototype = (<x><y/></x>.isPrototypeOf(0))) { if((({}).__lookupGetter__([1,,], this)) >>>=constructor.__proto__) {/*infloop*/for(__noSuchMethod__; *::*; (__noSuchMethod__|=<x/>)) {return undefined;return; }let (__noSuchMethod__, __count__ = function(id) { return id }) { gc() } } }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("if(prop = <x><y/></x>) /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in window) var __parent__;");
tryItOut("/*infloop*/for(1.3; this; 5.0000000000000000000000) {var prototype; }");
tryItOut("/*infloop*/for([15,16,17,18].some((new Function(\"for(let y in [5,6,7,8]) *;\")), (uneval(<y><z/></y>)) for each (__iterator__ in __iterator__)); (__proto__ = this.__defineGetter__(\"__noSuchMethod__\", *)); (yield)) {{break M; }__parent__ }");
tryItOut("if(__proto__) {}");
tryItOut("{/*infloop*/for(prop = __count__ = x::__iterator__; window; (function  __proto__ (__parent__) '' (__iterator__ for (__noSuchMethod__ in window)))) {'haha'.split }/*infloop*/for((/*\n*/(<y><z/></y>)); ({__iterator__: <y><z/></y> }); ({}).hasOwnProperty(<x><y/></x> += <><x><y/></x></>, this) ^= (uneval([[1]]))) /*infloop*/M:while(\nthis.__count__ __lookupGetter__(\"__proto__\")yield *::*; }");
tryItOut("if(({})) {<><x><y/></x></>;(<><x><y/></x></>); } else  if (1e81) this;");
tryItOut("/*for..in*/L:for(let prop((<><x><y/><//*\n*/x></> < <x><y/></x>)--) in ([({__parent__: window}) if (<x/>)])) {L:with({__noSuchMethod__: window}){throw 1e+81;return 0/0; } }");
tryItOut("do {(window);return <y><z/></y>; } while((__proto__ .@x::  '' ) && 0);");
tryItOut("M:if(prototype) {let (prototype) { return; } } else  if ((true.prop)) return false[[,,]]; else {yield <x><y/></x>; }");
tryItOut("prototype");
tryItOut("while((__proto__ =  \"\" ) && 0)/*infloop*/do <x><y/></x> while(prototype);");
tryItOut("{export __count__continue L; }");
tryItOut("/*for..in*/L:for(let [__parent__, __iterator__] = 1.3 in  ''  |=  /x/ ) throw  '' ;");
tryItOut("/*infloop*/while(undefined){export constructor;yield  \"\" ; }");
tryItOut("with(<><x><y/></x></> ? undefined :  /x/g )throw [[]];");
tryItOut("return;");
tryItOut("/*infloop*/for(({ __parent__: __parent__, __noSuchMethod__: ({ __count__: constructor }) }) = __proto__ .@x:: [<x><y/></x> if (<x><y/></x>)]['constructor'] = __parent__; new [1,2,3,4].map((-1), <><x><y/></x></>); [(prop)].sort((1 for (x in [])))) {(-1);; }");
tryItOut("/*infloop*/L:while(let (constructor = 4. >= window, prototype = (<><x><y/></x></> <<=  \"\" )) (__iterator__ = <x><y/></x>).__lookupSetter__(\"__count__\").unwatch(\"__noSuchMethod__\"))/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__count__ in <><x><y/></x></>) M:with(<><x><y/></x><\t/>){yield;gc() }");
tryItOut("{break L; }");
tryItOut("throw ({ prop: [, __parent__] }) = export __proto__;");
tryItOut("yield;/*infloop*/do {return;/*for..in*/L:for(prop in ((({}).hasOwnProperty)(yield false)))while((true) && 0){yield;(3); } } while(<><zzz>constructor = 1e+81</zzz></>);");
tryItOut("/*for..in*/for(({ __noSuchMethod__: ({ ({ __parent__: constructor, __iterator__: __noSuchMethod__ }): ({ constructor: __count__, __count__: constructor }), __proto__: ({ __proto__: __parent__ }) }), prototype: constructor }) in new (<><x><y/></x></>)()) if(__parent__) {yield; } else  if (*::*) {return; } else (1e-81); const constructor;");
tryItOut(" /x/g ;");
tryItOut("do {} while(((<><x><y/></x></> || <><x><y/></x></>)((<xxx>{constructor}</xxx>.(<><x><y/></x></>)))) && 0);");
tryItOut("{(this);function(y) { yield y; gc(); yield y; } }");
tryItOut("switch((window =  /x/ .__lookupGetter__(\"__iterator__\")).hasOwnProperty(\"prop\")) { default: /*for..in*/for(var [__proto__, prototype] = false in __parent__ % <x/>) yield  \"\" ;return;break; case 8: let (__parent__, __parent__) { const __iterator__, prototype; }break; case <x/>++ << (-0) % <x><y/></x>: const constructor = @foo, __noSuchMethod__ = true;break; \f }");
tryItOut("prototype = __proto__;");
tryItOut("{if(<y><z/></y>.__iterator__ = <x/>) throw <><x><y/></x></>; else  if (yield this) continue M; ''  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((prototype = *))(<x><y/></x>(<!--yy-->)) in <x/>.__lookupGetter__(\"__count__\")) {switch(-1) { default: break; const prop =  /x/g ; } }");
tryItOut("with({__noSuchMethod__: ((p={}, (p.z = [new (({}).__lookupGetter__)( /x/g ) if (<y><z/></y>)])())).yoyo(__parent__ = <><x\f><y/></x></> += <x><y/></x> || (return))})\t{/*infloop*/for(let [, [], ] = new (<x><y/></x>)(1e-81, <x><y/></x>); (prop); this.zzz.zzz) __proto__; }");
tryItOut("__proto__ = __iterator__;");
tryItOut("if((-1 >>> (<><x><y/><\f/x></>.eval(__iterator__)))) {(*).watch } else { \"\" ; }");
tryItOut(" ");
tryItOut("yield *;");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = window() in __noSuchMethod__) {{} }");
tryItOut("L:if((constructor.__count__)) { if ( ) {throw this;(<y><z/></y>); } else {(undefined);(new Function(\"const __count__;\")) }}");
tryItOut("return;");
tryItOut("let(prototype, __iterator__) ((function(){with({}) { yield ([15,16,17,18].some(/a/gi, prototype = window)); } })());");
tryItOut("switch(<x/>.__proto__.watch(\"__noSuchMethod__\", function (prop) { return <><x><y/></x></> } )) { case 1: L: {(<><x><y/></x></>); }break; case 4: /*infloop*/L:for(constructor; <><x><y/></x></>.valueOf(\"number\").__defineSetter__(\"prototype\", gc); (<><x><y/></x></> &&  \"\" .watch(\"__count__\", function  __noSuchMethod__ (prop)3))) return <y><z/></y>;case ([*::*].map(Math.pow).throw(([11,12,13,14].some + ) + constructor = __iterator__ == <><x><y/></x></>.*)): if(@foo.__defineGetter__(\"__proto__\", Math.sin)) { if (function(y) { yield y; return;; yield y; }) {return this; }} else return @foo;break; M:do return; while((\n<x><y/></x>) && 0);case 7: /*for..in*/for(let __count__ = (\nprop) in <x><y/></x>) export *;break; break; default: break;  }");
tryItOut("/*for..in*/for(var __parent__ in ((function (({ prototype: (return)['prototype'] }), __iterator__)/*\n*/-1 ? prototype : [[1]]\n for (prop in *) for each ([1,,].@* in <><x><y/></x></>) for (__iterator__ in <><x><y/></x></>))(window))){(<><x><y/></x></>);\n\n }");
tryItOut("let ([, , , [__parent__, ({ __count__: ({ constructor: [] }), __noSuchMethod__: [({ __count__: __count__, prototype: constructor }), ({ prop: prop }), [], ] }), , ({ constructor: \r({ prop: <><x><y/></x></> }), __noSuchMethod__: [, \f, constructor, ] })]]) { /*infloop*/L:for(let __iterator__; (-1); constructor()) return; }");
tryItOut("L:if(new Error((),  '' )) { if ((this.zzz.zzz)--) {return [1];{} }} else {constructor\ngc()\nexport constructor; }");
tryItOut("if(([__parent__, __noSuchMethod__] = prop.(#3={a:#3#}))) if(undefined) {([1,2,3,4].map).call } else  if (<x><y/></x>) (1e+81); else  if (<><> </></>) /*for..in*/for([__proto__, __parent__] = <><x><y/></x></> in __count__) export *; else {( '' ); const __proto__; }");
tryItOut("/*for..in*/L:for(const __count__.__parent__ in (__noSuchMethod__.__parent__ = \nconstructor: __proto__.prop: (Math.pow()) setter= <x><y/></x> | )) {(constructor) = prop; }");
tryItOut("/*for..in*/for\f(var prototype = false in <><x><y/></x></>) {return; }");
tryItOut("/*infloop*/M:for(prototype; new ((-1).throw(<x/>).constructor = ([15,16,17,18].filter([1,2,3,4].map, prop|= /x/g )))((this.__defineSetter__(\"__noSuchMethod__\",  set __iterator__(prop) { return window %= [[]] } )).__lookupSetter__(\"__proto__\")); new Iterator()) if(this.__defineSetter__(\"__iterator__\", Math.pow)) {}");
tryItOut("if(__iterator__) continue ; else {<x><y/></x> }");
tryItOut("/*infloop*/while(<x/>)constructor; const __noSuchMethod__;");
tryItOut("return;if(<x><y/></x>) {__parent__var constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in __noSuchMethod__ |= 4.) if(this.__defineGetter__(\"__count__\", function (prop, prop)false)) export *; else  if (('fafafa'.replace(/a/g, Math.pow))) yield;");
tryItOut("if(new (<x/>)(undefined)) { if (new (<y><z/></y>)()) {let (\f__count__ = prototype) { #1=[#1#]; }with(__proto__)export __count__; } else let (prototype = prop) { throw * if ( '' ); }}");
tryItOut("if(<><{prop}><ccc:ddd><x><y/></x></ccc:ddd></{prop}></>) yield <x><y/></x>; else  if ((function::__proto__ = new (function (prop, prototype) { yield [[]] } ((-0), [,,z1]))) {var __iterator__, prototype = 1e+81;export __count__; }\n");
tryItOut("if((yield __count__.__parent__)) { if ([] >>= <x/>) switch(({ __iterator__: ({ constructor: constructor, \fprototype: __proto__ }) }).__iterator__ = *) { default: break; (<x\f><y/></x>);break; case (<x><y/></x>)[ \"\" ]: break; throw 3/0;return <><x><y/></x\r></> } else {let (__parent__) { yield true; } }}");
tryItOut("/*for..in*/M:for(constructor = export * in __count__) ");
tryItOut("L:with({__noSuchMethod__: __proto__})yield  '' ;");
tryItOut("{break ;const __noSuchMethod__; }");
tryItOut("return;");
tryItOut("with(delete prototype = <x><y/></x>){if(true) { if ( \"\" ) __noSuchMethod__; else return undefined;}throw eval(\"5.0000000000000000000000\", <x/>); }");
tryItOut("/*infloop*/do {<><x><y/></x></>;(<x><y/></x>); } while(<><zzz>3.141592653589793 .@*:: [,,]</zzz></>);");
tryItOut("/*infloop*/do {const __iterator__, __noSuchMethod__ = [];yield; } while(window);");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, __proto__] = this.__defineSetter__(\"__count__\", gc) in __proto__.prop = prototype.__defineSetter__(\"__iterator__\", function (__count__)undefined)) if(({})) \n<><x><y/></x></>");
tryItOut("M:if((__iterator__.constructor getter= Math.pow)) {constructor;return <x/>; }");
tryItOut("if(<><>0yyy</></>.propertyIsEnumerable(\"constructor\")) while((this) && 0){export * } else  if ([,] / <x><y/></x>) {return  /x/ ; } else { { {} }  }");
tryItOut("export __noSuchMethod__;");
tryItOut("while((((('fafafa'.replace(/a/g, (<y><z/></y>--.__defineSetter__(\"__count__\", [1,2,3,4].map)).watch)).watch).call(({ get __parent__ __proto__ (({ __noSuchMethod__: ({ constructor: each }) }), prop.__count__) { yield; }  }), (p={}, (p.z = <><x><y/></x></>)())\n))) && 0)with({__parent__: (<><xxx {prototype}=\t{__iterator__} /></> instanceof (\n /x/ ))}){(<><x><y/></x><\r/>); }");
tryItOut("if(eval) { if (constructor.(prop)) {with({__noSuchMethod__: __iterator__ = *::*}){throw this; } }} else var __count__ =  /x/g ;");
