tryItOut("return undefined;{/*for..in*/for(let __parent__ in *) try { export prop; } catch(__count__) { continue ; } finally { var constructor = 4., prop = <><x><y/></x></>; }  }");
tryItOut("return (().@*);");
tryItOut("M:if(<><x><y/></x></>) {} else {yield; }");
tryItOut("export constructor;");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = \f(prototype) = Array(<y><z/></y>) !== (uneval(this)) in prop = ({} >>= 033)) <><x><y/></x></>;\nbreak M;\n");
tryItOut("yield;");
tryItOut("{export <x><y/></x>; }");
tryItOut("/*infloop*/for(const prop; [, [prop, __count__, , , ], ] = (true if (<x><\ry/></x>)); <{__count__}><><ccc:ddd><!--yy--></ccc:ddd></><bbb xmlns:ccc=\"<employee id=\"1\"><name>Joe</name><age>20</age></employee>\"><ccc:eee></ccc:eee></bbb><bbb xmlns=\"( ''  / null)\"><></><!--yy--></bbb><!--yy--></{__count__}>) {continue L\nlet __noSuchMethod__; }");
tryItOut("/*for..in*/L\f:for(const [each, function::prop] = this in <x><y/></x>) __count__");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] = #1#.valueOf(\"number\") in __parent__) {<x/>; }");
tryItOut("with(((Math.sin).apply).call(__parent__, )){ }");
tryItOut("yield @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in (yield  '' .propertyIsEnumerable(\"prop\"))) {/*for..in*/for(let __noSuchMethod__ = *::*.valueOf(\"number\") in <><x><y/></x></>) {yield;; }return __proto__.__iterator__; }");
tryItOut("if(Array(prototype -= <x><y/></x>)) { if (__proto__.__proto__ setter= ({}).__lookupGetter__) {/*for..in*/for(const __iterator__(RegExp()) in #1#) throw true;yield; }} else {<x/> }");
tryItOut("/*infloop*/M:while(<y><z/></y>){}");
tryItOut("with({constructor: (( /x/ )[<y><z/></y>] = new (({}).hasOwnProperty)(*,  /x/ ) != 1e81.hasOwnProperty(\"constructor\")) for (({ __parent__: [__parent__] }) in [11,12,13,14].filter) for each (prop in prop.constructor) if ([1])})");
tryItOut("/*for..in*/for(let prop = this.zzz.zzz && __iterator__ = function ([y]) { } in (<x><y/></x> >>>=<y><z/></y>)) {continue ; }");
tryItOut("export *\n");
tryItOut("M:with(__noSuchMethod__)do (undefined); while((( \"\" )) && 0);");
tryItOut("eval(\"<!--yy-->\", (<x><y/></x>.<x><y/></x>.__parent__))) /*infloop*/for(const ({ __count__: __noSuchMethod__ }) = yield @foo; this; (-1) === true) Function else  if (/prototype = this{yield  \"\" ; }");
tryItOut("let (__noSuchMethod__ = this, prop = __proto__.throw(<><x><y/></x></>)) { switch([@foo]) { case (1 for (x in [])): break;  } }");
tryItOut("/*infloop*/for((new 1e81()); prop = #1=[#1#]; *) {*yield; }");
tryItOut("yield  '' ;\nbreak ;\n");
tryItOut("/*for..in*/for(const prop = __noSuchMethod__.(<x><y/></x>).valueOf(\"number\") in  '' ) yield #1=;");
tryItOut("constructor");
tryItOut("__proto__ = __iterator__;");
tryItOut("return this;");
tryItOut("M:if(prototype) {export *; } else  if (4.) ;");
tryItOut("/*for..in*/(this);");
tryItOut("( \"\" )\nreturn;");
tryItOut("/*infloop*/for(let x::__iterator__ = <><xxx>{prop}</xxx>\n</>; prop.__parent__ = [11,12,13,14].filter; (<x/>.valueOf(\"number\"))) {(undefined.throw(@foo), prop); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const \t(__noSuchMethod__.__proto__ = prop) in .2 for each (prop in <x><y/></x>)) {export *; }");
tryItOut("switch([\tnew ((this).watch)([]) if (__iterator__)]) { case 6: default:  }");
tryItOut("/*infloop*/do {(__proto__);if(window) { if (3) {*::* }} else throw #3={a:#3#}; } while((__count__.(true).__parent__ = (this[this])));");
tryItOut("/*infloop*/while(__iterator__.__proto__ setter= (<><x><y/></x>/*\n*/</>).watch)yyy\nif(prop = (null for each (prop in <x/>))) {{}(<><x><y/></x></>); } else  if ([[1]]) ( '' ).call else (window);break ;");
tryItOut("if( /x/g ) { if ((constructor)(1e-81, ({a1:1}))) {gc() }} else {({}).__lookupGetter__ }");
tryItOut("switch(({ __proto__: __parent__ }) = @foo = [,]) { default: if(constructor) { if (undefined) return ({a1:1}); else return <x><y/></x>;}break; case __count__ = true: /*infloop*/for( undefined  ?  \"\"  : [15,16,17,18].map(/a/gi, this ? <x><y/></x> :  /x/ ) << prop = ({ __count__: __count__ }); ([<><><x><y/></x><ccc:ddd>\f </ccc:ddd></></>]); __count__.__count__) switch( ''  @ *) { case (this ^= <y><z/></y>): __iterator__ }case 1:  const __iterator__;yield window\nthrow __count__\nbreak; case (__count__ = __proto__): /*for..in*/for(__iterator__ in @foo)  }");
tryItOut("{with({constructor: prototype}){function (constructor) { yield  \"\"  }  } }");
tryItOut("{}");
tryItOut("do {} while(((this.__defineSetter__(\"__proto__\", (1 for (x in [])))).__lookupSetter__(\"__noSuchMethod__\")) && 0);");
tryItOut("{/*infloop*/L:while([])const __noSuchMethod__; }");
tryItOut("/*infloop*/for( /* Comment */this.__iterator__ = this.__defineSetter__(\"prototype\", @foo); #1=new (5.0000000000000000000000)(window, false); (((yield false for (__proto__ in @foo)__iterator__ setter: function(q) { return q; }))(eval(\"if(<><x><y/></x></>) {{} } else  if (<x><y/></x>) let __iterator__ = this, __noSuchMethod__; else {return; }\", __proto__ = <><x><y//h\n/></x></>)))) {yield; }\n");
tryItOut("/*infloop*/for(void undefined ? this : *; eval(\"undefined\", <y><z/></y>); (yield 0x99.__iterator__)) {/*infloop*/for(__parent__ = [[]]; 0x99; window) {gc() } }");
tryItOut("/*for..in*/for(let __count__ = #0=false ? 0.1 :  /x/  in ( /x/ (constructor, prototype, *::*))) {throw <x/>; }");
tryItOut("{yield <x/>; }");
tryItOut("with({}) return prototype = window;");
tryItOut("break M;");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>; __noSuchMethod__ = @foo; [ /x/ ].sort(new Function)) yield; const __noSuchMethod__;");
tryItOut("{const __iterator__, prop = <y><z/></y>;/*infloop*/do __count__ while(({ __parent__: __noSuchMethod__, __noSuchMethod__: [, ] }) = constructor >= null); }");
tryItOut("let(__proto__ = (prop = this), ({ __noSuchMethod__: __parent__ })) ((function(){/*infloop*/for(constructor = *; ; (p={}, (p.z = @foo)())) {;<x><y/></x> }\nif(<y><z/></y>) {return;({}).hasOwnProperty } else __proto__;})());");
tryItOut("let (__parent__ = (uneval(eval(\"(({__noSuchMethod__: <><x><y/></x></>}))\", new (<y><z/></y>)( /x/g ))))) { return\n }");
tryItOut("/*for..in*/for(let constructor in ((yield new (function  prototype (prototype, __proto__)constructor)(false, <y><z/></y>) .@ (eval(\" '' \", true || *));)(eval(\"(<x><y/></x> instanceof <><x><y/></x></>)\",  /x/  for each (prop in false)))))throw <><x><y/></x></>\n");
tryItOut("/*for..in*/for(var constructor =  /x/  in undefined) /*infloop*/for(const prop = <><x><y/></x></>; ({a1:1}); this) {throw false;continue L; }");
tryItOut("this.zzz.zzz;");
tryItOut("throw __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__.watch(\"__iterator__\", function  prototype () { return <><x><y/></x></> } ) in (yield [[1]].yoyo(#0= /x/ ))) __proto__: __noSuchMethod__");
tryItOut("");
tryItOut("with((this.__defineSetter__(\"__parent__\", function ()each).eval(<><x><y/></x></> >= <y><z/></y>)\t)(#2=<><x><y/></x></>.isPrototypeOf(__count__)).__defineGetter__(\"__count__\", (<><{__iterator__}>yyy</{__iterator__}></>).apply)){export constructor;let 9; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor = constructor['__parent__'] in __noSuchMethod__ = function(id) { return id }) yield 033;");
tryItOut("/*infloop*/for(({ constructor: __count__ }) = let (__noSuchMethod__ = [,,z1], prop = <x><y/></x>) false; prop = <x><y/></x>; (new (new (({a1:1}))(window))(!@foo, <x><y/></x>))) gc()");
tryItOut("with(this.__defineGetter__(\"prototype\", (1 for (x in [])))){ }");
tryItOut("if() /*for..in*/for(let __noSuchMethod__ = (uneval(window)) in <><x><y/></x></>) const __iterator__ = null, __noSuchMethod__; else  if ((++<x><y/></x>)\n) ; else if(<x><y/></x> ,  /x/ ) return; else  if (__count__ = constructor) { } else {{} }");
tryItOut("/*for..in*/for(const this.x::constructor in window) {; }");
tryItOut("if(<x/>) { if (__noSuchMethod__) yield  \"\" ; else {const __count__; }}");
tryItOut("for(let y in []);");
tryItOut("do {;break//h\n L; } while(((__noSuchMethod__ = <x><y/></x> > function ([y]) { })) && 0);");
tryItOut("{switch((Math.sin(<x><y/></x>.( /x/g ), true))) { default: gc()break; case : case 4: break; continue M;break;  }if('fafafa'.replace(/a/g, (*).__defineSetter__).valueOf(\"number\")) {__parent__ = @foo, __proto__;; } else  if ( '' ) {function(y) { yield y; break L;; yield y; }__parent__; } else yield; }");
tryItOut("/*infloop*/for(var prototype; constructor; \tprototype.hasOwnProperty(\"__parent__\")) {break ; }");
tryItOut("if(this) {function(y) { yield y;  set constructor() { return #1# } ; yield y; }let(__iterator__ = undefined, constructor) ((function(){yield @foo;})()); } else  if (this.__defineSetter__(\"__iterator__\", function(q) { return q; })) {yield;L: {} } else {(-0); }");
tryItOut("if(((new ((-0))()).call).call( /x/ .prop instanceof ([11,12,13,14].map)--, )) const __parent__ = <y><z/></y>, __parent__; else ;");
tryItOut("/*for..in*/for([__iterator__, constructor] = (<y><z/></y>.__lookupSetter__(\"__proto__\")) in ([1,2,3,4].map)(<x><y/></x>)) {{} }");
tryItOut("with({__iterator__: this})continue ;");
tryItOut("L: {L: {{} }yield; }");
tryItOut("/*infloop*/while((((eval(\"break ;\", (1e81)(this, __parent__))).watch(\"prop\", (-*::*\n))\t) >>> yield eval(\"5.0000000000000000000000\", true)))throw prototype;");
tryItOut("each\nyield;");
tryItOut("L: <!--yy-->");
tryItOut("/*for..in*/for(var [__iterator__, __noSuchMethod__] = (\nyield *::*) in (gc)) {( \"\" ); }");
tryItOut("let (__parent__ = <y><z/></y>, constructor) { let __iterator__ = true, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("var constructor, __iterator__\n");
tryItOut("let __proto__ = <><x><y/></x></>, prop\n");
tryItOut("if( '' ) /*for..in*/for(var __noSuchMethod__.prop in ((/a/gi)(<><x><y/></x></> <<= null === [ '' ].some(function (__iterator__, constructor) { __count__, __count__; } ))))if([1,,]) export *; else  if \t(<x/>)  else {{}(@foo); }");
tryItOut("{(__noSuchMethod__);{} }");
tryItOut("if(<><zzz>null</zzz><ccc:ddd><x\f><y/></x><ccc:ddd></ccc:ddd></ccc:ddd></>) { if ((uneval( /x/ )) -= prop = <x><y/></x>) const prop;} else var constructor;");
tryItOut("/*for..in*/for(__parent__ in ((({}).__lookupGetter__)(( /x/g  , __proto__))))");
tryItOut("/*for..in*/this.zzz.zzz;for(const (-0) in ((function(y) { yield y; export constructor;; yield y; })(__noSuchMethod__ =  /x/ )))eval");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("{break L;M:do {'haha'.splityield 1e81; } while((<><x>\f<y/></x></>) && 0); }");
tryItOut("/*infloop*/for(let prop; [,]\n; prototype = <><x><y/></x></>) M:if(true) ([,]); else  if ( /x/g ) {;yield <x><y/></x>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in [__iterator__.__lookupSetter__(\"prop\") for (prototype in  /x/g ) for (prototype in <x><y/></x>) if (<x><y/></x>)]) {return; }");
tryItOut("while(((((@foo)(3, prototype))(eval(\"{}\", constructor), __iterator__))) && 0)throw <x><y/></x>\n;");
tryItOut("/*for..in*/L:for(var prop = return @foo; in  /x/ ) <><x><y/></x></>");
tryItOut("/*for..in*/L:for(var [__parent__, __noSuchMethod__] = (function  __iterator__ (prototype, __count__) { yield @foo } .watch(\"prop\", (0/0).call)) in ({a1:1})) yield;");
tryItOut("/*infloop*/for(let function::prop; constructor = undefined;  \"\" .@foo) /*for..in*/for(let [__proto__, __count__] = <x/> in  /x/g ) \r{export __proto__; }");
tryItOut("if(eval(\"/*infloop*/while(this.zzz.zzz)const __parent__;\", __count__)) { if (.2) {{if(window) {const __noSuchMethod__ = <x><y/></x>, __noSuchMethod__ = false; } else  if \n( /x/ )  } } else return <bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb>.((__proto__.__iterator__ = <y><z/></y>));}");
tryItOut("let (__proto__ = (let (__iterator__ = this) <y><z/></y>).__lookupSetter__(\"__count__\"), constructor) { const __count__ = @foo;false; }");
tryItOut("export *;");
tryItOut("throw prototype;");
tryItOut("try { ; } catch(constructor if __parent__(this)) { try { const __count__ = 1.3; } catch(constructor if (function(){__count__ = prop;})()) { return; } catch(__count__ if __iterator__ =  \"\" ) { (<y><z/></y>); } catch(__parent__ if [false].map((new Function).apply)) { [1,2,3,4].map } finally { let __parent__ = this, delete = #1=[#1#]; }  } catch(function::prototype if (p={}, (p.z = __parent__)())) { \fwith({}) {} } finally { for(let y in [5,6,7,8]) __noSuchMethod__.__count__ = constructor; } ");
tryItOut("L: {}");
tryItOut("if(((eval(\"this\", *::*))) = __parent__.(window) <<= <zzz>@foo</zzz>.(-3/0 && <y><z/></y>)) if(window) {yield; }");
tryItOut("/*infloop*/for(const constructor; [__iterator__ = this.__parent__ = (({ set prototype(__count__, prop) { yield #1=[#1#]; }  }))]; .hasOwnProperty(\"__count__\")) M:if(window) { if (.2) export *;} else {return true; }");
tryItOut("while((prop = this) && 0)const __noSuchMethod__, prototype = window;");
tryItOut("/*infloop*/for(<y><z/></y>; ((false)[__noSuchMethod__]); __iterator__\n) {/a/gicontinue L; } const prototype;");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("(<x/>);");
tryItOut("{}(@foo);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let 0.1 in window) switch(0.1) { default: let __iterator__, __parent__;break;  }");
tryItOut("if(<bbb xmlns=\"([false if (<><x><y/></x></>)])\"><bbb xmlns=\"([1,2,3,4].map)()\"><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></bbb><xxx>{prototype}</xxx> </bbb>) { if (<x><y/></x>.propertyIsEnumerable(\"__parent__\"))  set __proto__ __parent__ (prop = __parent__).__parent__ /= new Function else const function::__iterator__ = constructor = (-0);}");
tryItOut("if(eval(\"((this.__defineGetter__(\\\"__iterator__\\\", eval)) -= ([11,12,13,14].filter))\", *::* in <x><y/></x>.unwatch(\"__proto__\"))) {Functionthrow false; }\f else {constructor = constructor;export __parent__;prototype, prop; }");
tryItOut("L:with({prototype: new (<><x><y/></x></>)( /x/g )}){export *;<x><y/></x>; } const __noSuchMethod__;");
tryItOut("if(RangeError([11,12,13,14].filter)['__parent__']|=__noSuchMethod__.prop = ({ prop: ({ let: __parent__ }) }) = <x><y/></x> || (-3/0).call(-1, )) var ({ constructor: __parent__ }) = 3.141592653589793; else  if (prototype.prop = (uneval(<><x><y/></x></>))++) {( /x/ );/*infloop*/M:for(const constructor; 3.watch(\"constructor\", ({}).__lookupGetter__); this.zzz.zzz) {export *; } }");
tryItOut("var <x><y/></x> = function ([y]) { }");
tryItOut("L: {export *; }");
tryItOut("let __proto__ = *::*, constructor;");
tryItOut("with((constructor-=\fvar function::__parent__, __iterator__ = -1)){; const __iterator__;\n\n }");
tryItOut("/*infloop*/for( /x/g ; window; __count__) const __parent__ = <x><y/></x>;");
tryItOut("/*infloop*/for(__noSuchMethod__; [[]][<x><y/></x>]; 1.3 .@*:: window) {/*for..in*/for(var __parent__ in *::*) <y><z/></y>; const __proto__;export prototype; }\t");
tryItOut("{}");
tryItOut("while((__parent__) && 0){yield prop; }");
tryItOut("{var __proto__ = __count__, __noSuchMethod__; }");
tryItOut("if(new (<x><y/></x>)(arguments)) {(__parent__);return; } else  if (__parent__.__defineSetter__(\"__noSuchMethod__\", function (__iterator__, prototype)this)\t) {var __iterator__ = <><x><y/></x></>, constructor = <x><y/></x>;export *; } else gc()");
tryItOut("/*infloop*/for(const __proto__ = [[]]; <x><y/></x>; @foo) {var constructor = this;{} }");
tryItOut("while((this.zzz.zzz) && 0)return  /x/ ;");
tryItOut("{} const prop;");
tryItOut("__proto__ = prop;");
tryItOut("throw __iterator__;");
tryItOut("{/*infloop*/do yield <><x><y/></x></>; while(<y><z/></y>++);throw ; }");
tryItOut("with(prop){/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>) {(*); } }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("M:if(([,][*::*])) { if (__iterator__ = (__proto__-=__proto__).*) { }} else {return;break ; }");
tryItOut("let(__count__ = #2=[<><x><y/></x></> /= prototype\r]) { /*infloop*/for(false; [1,,]; (function ([y]) { })()) {function(y) { yield y; continue ;; yield y; }const prop = <x/>; }");
tryItOut("var getter = __count__;const prototype, prop;");
tryItOut("if(([this for each (__parent__ in __noSuchMethod__)])) ; else  if ([#1=[#1#]].filter([1,2,3,4].slice)) yield <x><y/></x>; else { }(<x/>);");
tryItOut("/*for..in*/for(var <><x><y/></x></>['__noSuchMethod__'] = __iterator__-=* in <><x><y/></x></>) *::*;");
tryItOut("{/a/gi const __proto__; }");
tryItOut("/*infloop*/do __proto__; while(({__parent__: <x/>,  set function::__noSuchMethod__(__iterator__, __proto__) { yield <x><y/></x> }  }))\n");
tryItOut("let(prototype, __parent__) { let __count__ = 1.3;");
tryItOut("/*infloop*/while(eval(\"export __count__;\", window)){yield\n }");
tryItOut("if(new constructor(*::*, window)) yield; else  if (this = constructor) {prop;throw <y><z/></y>; }\n");
tryItOut("/*infloop*/for(new (/a/gi)(); eval(\"return *;\", #3={a:#3#}).__lookupGetter__(\"prop\");  /x/g ) default: ;break; ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in [z1].watch(\"constructor\", ({}).__lookupGetter__)) export *;");
tryItOut("M:switch(prototype.constructor setter= function  constructor ()<x><y/></x>) { case (eval(\"export __noSuchMethod__;\",  /x/ )): yield;break; case 8: /*infloop*/for(__iterator__ = ({a2:z2});  '' ; __count__) throw  '' ;break; case (let (prototype, __count__) <x/>): 3.141592653589793; }");
tryItOut("/*infloop*/while(eval(\"this;\", (uneval([z1,,])).__lookupGetter__(\"__parent__\"))){if(*::*) {( /x/g );var prototype; } else gc()eval }");
tryItOut("/*infloop*/for(const __iterator__ =  \"\" ; 1e4; <><x><y/></x></>) {}");
tryItOut("with(new Array().__count__ = (<x><y/></x> % <x/>)){<!--yy-->this; }");
tryItOut("/*infloop*/L:for('fafafa'.replace(/a/g, (new Function(\"/*infloop*/for(let __noSuchMethod__; <x><y/></x>.unwatch(\\\"__count__\\\");  \\\"\\\"  >> <x><y/></x>) {;export *; }\"))); (<y><z/></y> ? *::* : ( \"\"  .@*::  \"\" )(0/0, __parent__)); (<x><y/></x>)()) {; }");
tryItOut("return prop;");
tryItOut(";");
tryItOut("yield;");
tryItOut("return;");
tryItOut("\nM:with((eval(\"let __count__ = this, __noSuchMethod__;\",  '' ))){var __proto__; }");
tryItOut("L:do gc() while(((({a2:z2}) .@ 0x99)) && 0);");
tryItOut("let (__proto__) { if(((prop.eval(.2)))()) __proto__, constructor else  if ((constructor = this for each (constructor in false))) if(null) export *; else {{yield;( set __parent__ constructor () { yield  /x/  } ); }yield undefined; } }");
tryItOut("");
tryItOut("/*for..in*/for(__proto__ in \ntrue) {let __count__ = constructor, constructor;var __proto__ = <><x><y/></x></>, __iterator__; }");
tryItOut("/*infloop*/L:while(__proto__ = <><x><y/></x></>){export __parent__; }");
tryItOut("if(3/0 ? #3={a:#3#} : undefined.__defineGetter__(\"constructor\", function () { return <x><y/></x>; } )) {{__count__ = <x><y/><\f/x>, __proto__; } } else  if ((this.__defineSetter__(\"prop\", eval) >= ([1,2,3,4].map())) , this.zzz.zzz) {/*for..in*/L:\tfor(__count__ = new (<><x><y/></x></>)(__iterator__, <y><z/></y>).[1,2,3,4].slice in (<><x><y/></x></>([<x><y/></x>].sort(Math.sin)))) <><x><y/></x></>; } else /*for..in*//* nogeckoex bug 349964 */M: for  each(let ((__proto__ = this))([1,,].propertyIsEnumerable(\"__proto__\")) in <ccc:ddd></ccc:ddd>) {var __noSuchMethod__, __iterator__; }");
tryItOut("/*infloop*/L:for(undefined; <><x><y/></x></>; ({a1:1})) {{} }");
tryItOut("if((uneval(new new Function()))) ; else  if (__count__-=null.prop) L:if(* =  /x/ ) throw 1e4; else  if (({prop: <x/>})) (<y><z/></y>); else yield {}; else {try { {} } catch(__parent__) { export *; }  }");
tryItOut("with([__count__])");
tryItOut("/*infloop*/L:for(const prototype; this.__defineGetter__(\"window\", __count__); __noSuchMethod__ = <x><y/></x>) const __noSuchMethod__ = <><x><y/>\f</x></>;");
tryItOut("L: if(<><x><y/></x></>) { if ((<y><z/></y> ? @foo : true)) {;yield; } else {break L; }}");
tryItOut("/*infloop*/for(eval(\"({prototype: prop })\", ;.eval( /x/g ));  /x/g \n; (prototype.(prop = [1,,]))) {}");
tryItOut("throw __iterator__;");
tryItOut("with((({ set this prototype (__parent__)__proto__ })).yoyo(let (__iterator__ = <x><y/></x>, __proto__) <y><z/></y>)){ }");
tryItOut("with(new (new Function(\"var __iterator__ = @foo, __noSuchMethod__;\"))(({a1:1})))(undefined);");
tryItOut("if(__parent__%=3/0) {const __count__, window; } else ");
tryItOut("/*for..in*/for(let __proto__ = (( /x/g --)()) in prototype = [__count__, ({ prop: ({ __count__: __iterator__ }), prop: __iterator__ }), , ({ __noSuchMethod__: ({ __parent__: __proto__ }), __proto__: ({ prototype: prototype, __proto__: __noSuchMethod__ }) }), ]) if(new Object()) { if (\n[]) {yield *;window; } else {; }}");
tryItOut("with((<x><y/></x> == <y><z/></y>))constructor");
tryItOut("constructor");
tryItOut("if(new ((undefined.eval(undefined)))(\f__proto__.(*::*), [11,12,13,14].map)) if([, ] = <x><y/></x>.yoyo( /x/g )) { if (*::*.@foo) /*for..in*/L:for(const __parent__ in [[1]]) {yield;return; }\n else throw <><x><y/></x></>;} else  if (({prop: new Function().eval(((new Function).apply).call(__proto__.__count__ = <><x><y/></x></>.propertyIsEnumerable(\"__proto__\"), (let (prop, __proto__ = <x><y/></x>) [[]][<y><z/></y>++]), *.isPrototypeOf(({})))),  set constructor(prototype, constructor) { return Boolean(<x/>,  /x/ ) }  })) let __iterator__ = <x/>, __parent__; else {M:do let __count__; while((<y><z/></y> = this) && 0);return; }");
tryItOut("if('fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })) { if (void (({prop: this.__defineGetter__(\"__count__\", .2)}))) {if([({a2:z2})].some(<y><z/></y>).throw(window.__lookupGetter__(\"__iterator__\") > 0.__lookupSetter__(\"__iterator__\"))) {let prototype;\n;\n } else const prop;var __noSuchMethod__ = <y><z/></y>;/*for..in*/for(constructor in ((new Function)((0/0 & <y><z/></y>))))export x::__noSuchMethod__; }} else {with({}) return this % false;/*for..in*/for(let [prototype, __count__] = <x><y/></x> in <><x><y/></x></>) {function(y) { yield y; #1#;; yield y; }yield; } }");
tryItOut("const __iterator__ = <y><z/></y>\n");
tryItOut("M:if((\n<x><y/></x> != <><x><y/></x></>)) export constructor; else  if ((1e+81)) /*for..in*/for(var __noSuchMethod__ = ( /x/ )() in <x><y/></x>) {export *; }");
tryItOut("\fM:do {yield __count__; } while((#1 = <ccc:ddd>yyy</ccc:ddd>.(<x><y/></x> >>>  '' )) && 0);");
tryItOut("/*infloop*/while(<y><z/></y> .@x:: null)((-0));");
tryItOut("L:switch(-<><x><y/></x></>) { default: ; }");
tryItOut("/*infloop*/M:while(__proto__ =  '' ){export __count__; }\nreturn;");
tryItOut("{} const __proto__\n");
tryItOut("L:if(undefined) {const __noSuchMethod__ = window;yield __count__; } else  if (this) {{}let __iterator__ = 1e4, __noSuchMethod__; } else {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __noSuchMethod__: [] }) in (( '' \n)[__proto__ = <><x><y/></x></>])) {export constructor;L: /*infloop*/L:do export prototype; while(new (Function)()); }");
tryItOut("if((<y><z/></y>() ? new (<x/>)(3/0) :  '' .valueOf(\"number\")).constructor) {let (({ constructor: ({ __proto__: __parent__, setter: prop }), prototype: prop })) { throw <x/>; } } else  if (undefined) {yield (true.yoyo(@foo))(constructor.(<><x><y/></x></>), null); }");
tryItOut("/*infloop*/for(var __parent__; ((Math.pow).call((), [(__proto__ = undefined)])); (__noSuchMethod__.(((function (__noSuchMethod__, __iterator__) { yield [] } ).call(this.prototype = prototype, this.zzz.zzz))))) /*infloop*/do {with(<y><z/></y>){continue ;(3); } } while(constructor = __noSuchMethod__);");
tryItOut("let(function::constructor, ({ constructor: ({ __count__: function::__count__, __count__: __noSuchMethod__ }), getter: __proto__ }) = new let   break (()) ((function(){return;})());");
tryItOut("if(Math.sin()) {}yield  /x/g ;");
tryItOut("throw [,,];\n(*);\n\n/*for..in*/for(var __count__ in (((new Function(\"if(<x><y/></x>) export *; else return;\")))([arguments].filter(function(q) { return q; }))))return;\n");
tryItOut("if(yield __noSuchMethod__.throw( \"\" )) {let prototype = window, __count__; } else if(*) {{}{} } else  if (null) {break L; }");
tryItOut("prototype, __noSuchMethod__ = [,,];if(=[window]) { if ((__noSuchMethod__ = constructor)) ; else { '' ; { yield <x><y/></x> }  }}");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; this; (<x><y/></x> for each (__parent__ in  '' )).watch(\"prototype\", function  prop (constructor, prop)prop)) export __iterator__;");
tryItOut("M:if((true.valueOf(\"number\")) - (@foo == {})) { if (-0) {{}gc() } else {gc()prototype, __noSuchMethod__ = (-0); }}");
tryItOut("let ([] = ( ''  |= this)[__proto__ = -0 << 1e-81 > (<x><y/></x>.(true))]) { /*infloop*/while(__parent__.prototype = yield yield <y><z/></y>.__lookupGetter__(\"prototype\")){if(1e4) continue ; else {yield *::*;break ; }export __parent__; } }");
tryItOut("export *\n");
tryItOut("M:while((<x><y/></x>.watch(\"__proto__\", ((1 for (x in []))).call)) && 0){x::__proto__, __proto__; }");
tryItOut("gc()\n(window);\n");
tryItOut("if(constructor) {L:with({__proto__:  /x/ .__defineSetter__(\"__parent__\", function(y) { yield y; return;; yield y; })})export *; } else  if (Function(([11,12,13,14].map))) {<x><y/></x>;yield; }");
tryItOut("if(([] = @foo >>= [,,z1])) {prop = prototype\n\f }");
tryItOut("function () { yield window } ");
tryItOut("__proto__ = __proto__;");
