tryItOut("/*infloop*/for(var constructor; ++/a/gi(<><x><y/></x></>, null); <xxx {prototype}={__parent__} />.(#2=[<x><y/></x> .@ K])) {(Function((new (function(q) { return q; })()))); }");
tryItOut("/*infloop*/do {return; } while(<x><y/></x>.yoyo(.2));");
tryItOut("yield\n\nconstructor = <><x><y/></x></>, function::constructor;\n");
tryItOut("{{{}return constructor; } }");
tryItOut("/*infloop*/do yield; while( for each (prototype in (<x/> || with({}) yield  \"\" ; & prototype)) if (([{}])));");
tryItOut("if(prop) { if (*::*) {throw  /x/ ; } else {<><x><y/></x></> }}");
tryItOut("{}");
tryItOut("{__noSuchMethod__ = __proto__;return *; }");
tryItOut("do [1,2,3,4].slice while((#3={a:#3#}) && 0);");
tryItOut("/*infloop*/L:do {{}(null); } while(<><x><y/></x></>.__defineGetter__(\"__proto__\", ({}).hasOwnProperty));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (({ prop: prototype, prop: prop })) in [1]\n) {yield;return\ngc() }");
tryItOut("/*infloop*/for(__parent__; (uneval(([,].constructor))); (<x><y/></x>.constructor)) { }");
tryItOut("if((p={}, (p.z = function(id) { return id })())) { if (__parent__) continue ; else {}}");
tryItOut("/*for..in*/L:for(__parent__ = [1] in __parent__) {prototype;break M; }");
tryItOut("L: {export *;with({prop: <x><y/></x>}){const __parent__ = undefined = <x><y/></x>, prototype = window; } }");
tryItOut("switch(constructor = true = #1=[#1#]) { case 3: break; case (__count__.(*)).@*: break; case 6: __iterator__ = prop;case 4: __iterator__;break; case <xxx>{__parent__}</xxx>: throw @foo;break;  }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: constructor, __iterator__: [//h\n, ({ constructor: ({ constructor: [, __parent__, , , ], prototype: prototype }) }), ({ __parent__: [] }), __parent__, ({ __parent__: [], __count__: __noSuchMethod__ })] }) = [,][[,,]]; ([] = #1=[#1#]); @foo)  for (__proto__ in null >> 1.3) if ((prototype.@*))");
tryItOut("M:if(this) { if (<><x><y/></x></>) {export *;; } else return __iterator__;}");
tryItOut("{for(let y in []); }");
tryItOut("/*for..in*/M:for(const [__parent__, __noSuchMethod__] = this.__defineSetter__(\"__parent__\", Function) in (true)[#1=[#1#]]) {{} } const __count__;");
tryItOut("/*infloop*/L:while(this.__defineGetter__(\"__proto__\", Math.sin)){}");
tryItOut("export  if (<x/>); const prop;");
tryItOut("if(<><bbb xmlns=\"#0=[null]\"></bbb></> || ()) {return prop; } else  if (true) /*infloop*/for(let __parent__ = @foo.eval(<x/>); Date(<><x><y/></x></>\t); @foo) M:with({prop: <><x><y/></x></>}){return [1];const __iterator__, __proto__ = true; }");
tryItOut("/*for..in*/for(const prop = __proto__.__parent__ = false >>=  ''  in @foo) {\n(window); }");
tryItOut("do {(new (((<><x><y/></x></>).__defineSetter__)([,], ({a2:z2})))()); } while((([(__iterator__ = constructor |= <x><y/></x> /= ({a2:z2}))].sort(window--))) && 0);");
tryItOut("/*infloop*/for(const prop; 'haha'.split( ''  ? <x/> : null <= __iterator__); window.propertyIsEnumerable(\"__parent__\")) {}");
tryItOut("\nconst prototype = <><x><y/></x></>, __parent__;\n");
tryItOut("L: {throw __noSuchMethod__; const __count__; }");
tryItOut("if([15,16,17,18].sort(constructor, <><bbb xmlns=\"( ''  |= #1#).prop\"><ccc:ddd>yyy</ccc:ddd></bbb></>)) { if ((new ([<x><y/></x><!--yy--> for (prop in *::*)__parent__])())) return; else while((<x/>) && 0)function (__count__, x::__proto__) { let __proto__; } }");
tryItOut("{L: {{} } }");
tryItOut("([])\nfunction (__iterator__)\n*::*");
tryItOut("if(Function()) {{} } else  if (<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", ('haha'.split).apply)) ");
tryItOut("/*for..in*/for(const [prototype, constructor] = ((( '' ++) === 'fafafa'.replace(/a/g, window)).__noSuchMethod__) in #2=({prop: @foo})) if((__noSuchMethod__ = (-0))) { if (new Array(<x/>, false)) gc()} else {'haha'.split }");
tryItOut("gc()\n");
tryItOut("gc()(undefined);");
tryItOut("if(<><x><y/></x></> = __proto__ = <x><y/></x>) yield; else  if (((yield this).*)) yield; else {/*infloop*/for(var prop; *::*; <><x><y/></x></>) {return; } }");
tryItOut("/*infloop*/for(__iterator__ =  \"\" ; <><x><y/></x></>; true) {const constructor =  /x/ ; }");
tryItOut("/*for..in*/for(var __parent__ = false in #0=({__parent__: eval(\"0x99\", (-0))})) L:if((__count__.__iterator__ = this)) {{} }");
tryItOut("let(__count__ = <><bbb xmlns=\"<x><y/></x> .. <y><z/></y>\"> </bbb></>) { for(let y in []);");
tryItOut("if(null) let prop =  '' , prototype = (-0); else  if (1e81) return  '' ;");
tryItOut("export *\nvar prototype, __proto__ = @foo;");
tryItOut("return <y><z/></y>;");
tryItOut("switch/*(<y><z/></y>) { case 0: break;  } const __iterator__;");
tryItOut("throw __proto__");
tryItOut("/*infloop*/M:for((0/0.__parent__); undefined.__lookupGetter__(\"__proto__\"; [15,16,17,18].map(__proto__, window)) yield;");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map).watch(\"__parent__\", (new Function(\"if(1.3 += <><x><y/></x></>) {; } else  if ( /x/ )  { yield <><x><y/></x></> }  else return undefined;\")))) {const __count__;(*::*); } else  if (<><x><y/></x></>.__defineSetter__(\"yield\", Math.pow)) /*infloop*/for(let __proto__; true; undefined) export *; else {break M;switch(-1) { default: break ;break; break; break ;case <><x><y/></x></>: throw .2;case 2: let __noSuchMethod__;break; yield <><x><y/></x></>;break;  } }");
tryItOut("L:if((<x/>--.__lookupSetter__(\"__iterator__\")\n)) {yield this; } else  if ((({prop: window ? <><x><y/></x></> : <><x><y/></x></>, __parent__: (<><x><y/></x></>.constructor) }).constructor)) {{}if(undefined)  }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("switch(prop) { case 8: default: if(#3={a:#3#} &= this) {export __noSuchMethod__; } else  if ((yield @foo)) {prototype{} } else {export *;let __parent__; }break; case 4: (window.__lookupSetter__(\"__count__\")\n);break; case 5: M:if(<x/>.throw(function(id) { return id })) { if (eval(\"(<y><z/></y>);\", <><x><y/></x></>)) {throw *::*;return 1e-81 } else { }}break; continue ;case [@foo]: export constructor;case 9: break; case 2: throw prop;(function(y) { yield y; Math.pow; yield y; }).callbreak; case 4: ;break; case 2: break;  }");
tryItOut("L: /*for..in*/L:for(__noSuchMethod__ = <x\t><y/></x> in 0/0) return *;");
tryItOut("L:do (-1); while(((uneval(true\n))) && 0);");
tryItOut("eval const __count__;");
tryItOut("/*for..in*/for(let prop in (([1,2,3,4].slice)(constructor))){return *::*;return; }");
tryItOut("__parent__");
tryItOut("/*for..in*/for([__proto__, __count__] = (1 for (x in [])) in  '' ) ({}).__lookupGetter__\n const __proto__;");
tryItOut("x::__parent__ = yield;");
tryItOut("Math.sin");
tryItOut("let (({ constructor: [], __noSuchMethod__: [[, ], __iterator__] })) { /*for..in*/for(const prototype in ((function  __noSuchMethod__ (prototype, __noSuchMethod__) { return <x><y/></x> } )(window)))export *; }");
tryItOut("switch(<><x><y/></x></>) { default:  }");
tryItOut("if((@foo.isPrototypeOf(<><x><y/></x></>))) { if (--) return;} else return;");
tryItOut("<x/>");
tryItOut("L:with(<><x><y/></x></>){export __proto__;__iterator__ = @foo }");
tryItOut("{throw <x><y/></x>\n }");
tryItOut("return;");
tryItOut("if(constructor = 3/0) var __noSuchMethod__ = <y><z/></y>; else  if ('fafafa'.replace(/a/g, function (__proto__, __noSuchMethod__) {  } )) ;");
tryItOut("return;");
tryItOut("if(this.eval(( ''  instanceof (yield <><x><y/></x></>)))) { if ((({ prop\n: , constructor: [, prototype, , ] }) = ({ __count__: [, [, __count__, __iterator__], x::__parent__], __count__: [[]] }))(prop)) function ()\t{}} else prototype;");
tryItOut("/*infloop*/do {; } while( \"\" );");
tryItOut("if(({a1:1})) { if (window)  else {<><x><y/></x></>;var __noSuchMethod__; }}");
tryItOut("if(prop.prop = __iterator__ = __iterator__) { if ((this.__defineGetter__(\"prototype\", (new Function(\"\"))))) {const prop, prop = <x><y/></x>;return __iterator__; }} else {gc()yield; }");
tryItOut("let(({ __parent__: __proto__, return;: __iterator__ }) = *::*.isPrototypeOf(@foo)) { __parent__ = <y><z/></y>;");
tryItOut("with({__count__: this})/*for..in*/L:for(let constructor in <y><z/></y>) (<x><y/></x>);");
tryItOut("/*for..in*/L:for(const prototype in (((window).call)(*)))yield\nlet (({ __count__: [, , ] }), __count__) { /*for..in*/for(let (<y><z/></y>)(__count__, *::*) in ((new Function)(this.__defineGetter__(\"__count__\", (1 for (x in []))))))M:if(false) export *; else  if (0x99) return; else continue M; }");
tryItOut("M:do {L: ;/*infloop*/do return null; while(.2); } while((this) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("(__parent__);\nif(prototype = <x><y/></x>) { if (<x><y/></x>.__lookupGetter__(\"prototype\")) {yield <x><y/></x>;break ; }} else Function\n");
tryItOut("/*infloop*/L:for(let prop = null; [prototype].sort(function () { yield @foo } ); __noSuchMethod__ = <x><y/></x>) {/*for..in*/M:for(var __count__ in ((({}).__lookupGetter__)(<x><y/></x>)))prototype =  /x/ , prop = undefined; }");
tryItOut("if(eval(\" /x/g \", <><x><y/></x></>) += void __proto__) { if (prop ?  /x/ .__iterator__ : __parent__ || *) {eval(\"var __noSuchMethod__ = window;\", <y><z/></y>); }} else export *;");
tryItOut("L: {constructor<><x><y/></x></>; }");
tryItOut("export __noSuchMethod__;\nyield;\n");
tryItOut("M:if(prototype for (prototype in <><x><y/></x></>)) {yield *::*;const __iterator__ =  /x/g ; } else  if ((prop = [1]).__proto__) {({}).hasOwnProperty }");
tryItOut("__parent__ = __proto__;");
tryItOut("<bbb xmlns=\"window\"> </bbb>");
tryItOut("L:if( /x/ .__defineGetter__(\"__parent__\", (Function).apply)) continue L; else  if ([1,,].unwatch(\"prototype\")) {export *; }");
tryItOut("with()const prototype, __proto__ = [,];\nlet prop = [z1,,], __noSuchMethod__ = undefined;\n");
tryItOut("for(let y in [5,6,7,8]) with({}) { __parent__ = __noSuchMethod__; } ");
tryItOut("let(__iterator__ =  '' , __noSuchMethod__ =  /x/g ) { __proto__ = <x><y/></x>;");
tryItOut("{__noSuchMethod__, constructor; }");
tryItOut("with(0x99)");
tryItOut("L:while((<x><y/></x>) && 0){export constructor;break ; }");
tryItOut("with(3.141592653589793){constructor = <x/>, __parent__; }gc");
tryItOut("switch(let (constructor = __noSuchMethod__, x::__iterator__ =  /x/g ) (<x><y/></x>.unwatch(\"__parent__\"))) { default: break; break;  }");
tryItOut("L:if((<><y><z/></y>.__defineSetter__(\"prototype\", function (constructor) { return undefined } )</> == prototype = 5.0000000000000000000000)) /*infloop*/for(constructor = true; null.yoyo([[1]]) ^  \"\" (__proto__); <ccc:ddd>yyy</ccc:ddd>) {;export __noSuchMethod__; } else  if ((this)[3/0] %= ([11,12,13,14].sort)) {/*for..in*/for(var constructor = <x/> >= 3 | __noSuchMethod__ in __noSuchMethod__) constructor }");
tryItOut("switch\t((uneval(yield eval(\"/*for..in*/for(const prop in __iterator__) yield this;\", -0)))) { default: break; return function(id) { return id };case (x::prop = ({}).hasOwnProperty): L: {export __noSuchMethod__;throw null; }break; __iterator__; }");
tryItOut("/*infloop*/for(const prototype; (4..__parent__); *.watch(\"__count__\", ((new Function).apply).apply)) yield *::*;");
tryItOut("yield [15,16,17,18].map(Function, <><x><y/></x> __count__ </>);");
tryItOut("/*for..in*/for(const [prototype, __iterator__] =  { gc() }  -= [z1,,] in ) {throw this\nbreak ; }");
tryItOut("/*infloop*/while((+ \"\" ))return");
tryItOut("/*infloop*/L:for((gc)().yoyo(((-0 for each (prop in ({a1:1})) if (window)))); ((uneval(__noSuchMethod__))); 1e4) /*for..in*/for(const __parent__ = this in this) {break L;{} }");
tryItOut("M:switch(#1#) { default:  }");
tryItOut("if(@foo) { if (((3.141592653589793 if (this)).__defineSetter__)(-<y><z/></y>)) {yield @foo; } else gc()}");
tryItOut("/*infloop*/for(false; __iterator__; constructor) {export *;export constructor; }");
tryItOut("__proto__ = prop;");
tryItOut("'haha'.split");
tryItOut("if(<><bbb xmlns:ccc=\" \"\" \"><ccc:eee></ccc:eee></bbb><!--yy--></>) { if ((([11,12,13,14].filter)[let (__count__ = constructor, __count__)  /x/ ])) {return;return; }} else {\n<x><y/></x>; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(+<x><y/></x>) yield *; else {{} }");
tryItOut("const prop, constructor");
tryItOut("/*infloop*/L:while(<y><z/></y>.__count__ = *::*){if(let (__proto__, constructor = ({a1:1})) .2) { if (prop.throw(<><x><y/></x>\t</>) ? (1.3.hasOwnProperty(\"__count__\")) : 1.2e3.hasOwnProperty(\"__proto__\")) {} else ;} }");
tryItOut("M:if((constructor ? <x/> : 3/0)) {return  \"\" ; } else  if (new Date((Math.pow)(<x><y/></x>))) {} else let prop;");
tryItOut("/*for..in*/M:for(const ((false).watch.__iterator__) in ((function  prototype ()constructor = <x><y/></x>)(null.__defineGetter__(\"prop\", undefined)))){export __count__;;\t }");
tryItOut("export *;");
tryItOut("with({__proto__\t: prop})return;");
tryItOut("yield (__iterator__ = <><{__proto__}><!--yy--></{__proto__}></>);");
tryItOut("if(-3/0) L: break ;");
tryItOut("let (prop = <><x><y/></x></>, __noSuchMethod__ = <x><y/></x>) {  }");
tryItOut("L: {gc()yield null; } const prototype;");
tryItOut("/*infloop*/M:for(let __proto__ =  \"\" ; __iterator__; <y><z/></y>) {const function::__iterator__, yield;__proto__ = window; }");
tryItOut("/*infloop*/for(var constructor = this.__defineGetter__(\"prototype\", function () { yield typeof <x/> } ); <><x><y/></x></> *= __count__++ %= ; prop = @foo.valueOf(\"number\")) continue L;");
tryItOut("/*infloop*/while(@foo){__count__, __noSuchMethod__;gc() }");
tryItOut("if((p={}, (p.z = (function(y) { yield y; yield;; yield y; }).call(false, ))())) {{@foo;*::*; } } else {eval }");
tryItOut("/*infloop*/while((new (window.hasOwnProperty(\"__proto__\").<x><y/></x>)())\t)let constructor = try { continue ; } finally {  } , __proto__ = __proto__;");
tryItOut("throw prototype");
tryItOut("{yield; }");
tryItOut("L: export *;");
tryItOut("M:while(() && 0)/*for..in*/for(const __iterator__ = (__proto__ = true) in window) {switch( /x/g ) { default: return true;yield;break;  } }");
tryItOut("let (__parent__ =  '' , prop = window) { yield  '' ; }");
tryItOut("if((__proto__+=1.2e3 % @foo).@foo) /*infloop*/*::* else  if (({})) let prototype = window, __count__ = prototype\n[1,2,3,4].map");
tryItOut("{yield;let __noSuchMethod__ = undefined; }");
tryItOut("({a1:1}).__lookupSetter__(\"prop\") const __parent__;");
tryItOut("/*infloop*/for(const constructor; 3.141592653589793\n; (new (@foo)([z1])(*::*))) break L;");
tryItOut("let (({ __proto__: constructor( \"\" ) }) = [1,,].__noSuchMethod__.@foo, __proto__ = false > <><x><y/></x></>) { {} }");
tryItOut("([,,]); const __parent__\nyield @foo;");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = (typeof (yield \ffalse.__parent__)) in (new (Function)(prop, false))) {/*for..in*/for(const constructor(<x/*\n*/><y/></x>) in ((eval)(({}).__lookupGetter__(`)))){continue ; }; }");
tryItOut("for(let y in []);");
tryItOut("if(break L ? (__parent__ = #0=null) : <><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></>)  else const __proto__ = __iterator__;yield; }");
tryItOut("{}");
tryItOut("return 0/0;");
tryItOut("({ __parent__: ({ __iterator__: ({ each: window.case 0: break; case (function  __parent__ (prop, prototype) { yield <x><y/></x> } ).call(window, ): case 9:  }), __parent__: [, , constructor, [({ __parent__: ({ __proto__: prototype, __count__: constructor }), constructor: ({ __noSuchMethod__: __iterator__ }) }), ({ constructor: __proto__, prop: constructor })]] }), __proto__: [({ \f<y><z/></y>: prop, get: new function  constructor () { yield __proto__ } (window,  \"\" ).prototype })] })");
tryItOut("while(((delete false).hasOwnProperty(\"constructor\")) && 0)return;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __count__.__parent__ getter= ({}).hasOwnProperty in __count__) {yield *::*;return; }");
tryItOut("M:if(<><x><y/></x></> *= true) { if (q) __proto__; else throw <><x><y/></x></>;\ngc\n}");
tryItOut("let (({ __parent__: constructor })) { /*infloop*/M:for(var __iterator__ = (new gc(null)); <x><y/></x>; null && true) {export prototype; } }");
tryItOut("/*for..in*/for(const __count__ = ((__proto__)) in <x/>) {break ;<><x><y/></x></> }");
tryItOut("if((<x><y/></x>)()) {yield <x><//h\ny/></x>.(#1=[#1#]);gc\t } else  if (++ '' ) return; else {if((__proto__.(true))) {export __proto__; } else  if (__proto__.prototype = <y><z/></y>) {yield; } else {return <x><y/></x>;export __proto__; }return <y><z/></y>; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) let __parent__ = <x><y/></x>; } ");
tryItOut("const O = this;");
tryItOut("return;");
tryItOut("yield;");
tryItOut("return (new (1 for (x in []))(<><x><y/></x></>))[(delete null)];");
tryItOut("do gc() while((new (<x/>)(0/0)) && 0);");
tryItOut("/*for..in*/M:for(prop in true) {const prop = *::*; }");
tryItOut("this.zzz.zzz;");
tryItOut("let (prop = (prop)+=new (<x/>)(window), ({ __noSuchMethod__: ({ __parent__: [prop, , ] }), __proto__: ({ prop: ({ prototype: __parent__, __parent__: getter }), <x><y/></x>.(<y><z/></y>)\t: [\f__noSuchMethod__, , , ] }) }) = (@foo.hasOwnProperty(\"__count__\"))) { /*infloop*/for(var prototype; (yield <y><z/></y>); this in  /x/g ) {break M; } }");
tryItOut("export __proto__; const __parent__;");
tryItOut("if( \"\" .__defineGetter__(\"__noSuchMethod__\", *::*)) {yield; } else  if ((this.zzz.zzz)) {break L;/*infloop*/do {\n\nexport *; } while(yield __noSuchMethod__ && <x><y/></x>); }");
tryItOut("L:if(*) {{}break \n; } else const __noSuchMethod__ = <x><y/></x>;");
tryItOut("return let (__iterator__, __noSuchMethod__ =  /x/ ) undefined;\nvar __parent__;\n");
tryItOut("(@foo).__defineSetter__");
tryItOut("{ \"\" ;return; }");
tryItOut("/*for..in*/for(<><x><y/></x></> <= true in ((<y><z/></y>)(this))){break ;{yield; } }");
tryItOut("/*infloop*/L:while([1.3 in __count__].filter((new Function(\"return <x/>;\"))))continue L;");
tryItOut("if(constructor) gc() else  if ( \"\" ) window; else {yield <><x><y/></x></>; }");
tryItOut("throw let;");
tryItOut("M:if(({ setter: __iterator__, prototype: __count__ }) = []) {yield  /x/g ; } else  if ((return  \"\" ; %= [,,].unwatch(\"prop\"))) {(<><x><y/></x></>).watch { {} }  }");
tryItOut("if(__proto__.constructor) throw <x/>; else  if (<x/> >>= undefined) {if([].propertyIsEnumerable(\"__count__\")) { if (this.zzz.zzz) let constructor = null;} else continue L; }");
tryItOut("switch((<x><y/></x>\n.@foo)) { default: ((arguments.prop));case 8: break;  }");
tryItOut("with( /x/g ){export __count__;let __iterator__ = <><x><y/></x></>, constructor = *; }");
tryItOut("<x><y/></x>;");
tryItOut("{return; }");
tryItOut("throw StopIteration;");
tryItOut("gc()\nL: {return;export constructor; }");
tryItOut("for(let y in [5,6,7,8]) with({}) { with({}) (1 for (x in [])) } ");
tryItOut("if(-1[false]) {gc(){} } else  if ((true ? <x><y/></x> : ({a1:1}))) {export *; } else {({}).hasOwnProperty{} }");
tryItOut("with({prototype: __parent__ = <x/>})(true);");
tryItOut("export __parent__;");
tryItOut("while(( /x/g ) && 0){ }");
tryItOut("let (__parent__ = <><x><y/></x></>) { let __parent__; }");
tryItOut("prop = __proto__;");
tryItOut("let (__noSuchMethod__) { (1 for (x in [])) }\n/*infloop*/for((-3/0.__noSuchMethod__); ++*::*; __iterator__.(typeof __iterator__)) {gc()M:if(#3={a:#3#}) { if (<x/>) {export __parent__;; } else {(true); }} }\n");
tryItOut("with(*::*){(__iterator__);\t }");
tryItOut("throw StopIteration;");
tryItOut("while(((#0=(<x/> if (constructor)).propertyIsEnumerable(\"__iterator__\"))) && 0){; }");
tryItOut("/*for..in*/for(__count__.__iterator__ in (([z1,,])(new <x/>() in  /x/g  *= constructor)))/*infloop*/L:do {[1,,] } while((yield <x/>));");
tryItOut("while(((1e4 >= null)) && 0){return; }");
tryItOut("let (({ constructor: ({ __proto__: [, prop, prop, ] }), constructor: ({ __noSuchMethod__: __count__, prop: prototype }) }) = (({__proto__: __iterator__ }) :: {/*for..in*/for(let __proto__ in  /x/g ) return; })) { L: {yield;; } }");
tryItOut("{}");
tryItOut("/*for..in*/for(__noSuchMethod__ =  /x/  in  /x/g ) {export __iterator__; }");
tryItOut("return (*::* * true).__noSuchMethod__ = <y><z/></y>.__lookupSetter__(\"constructor\");");
tryItOut("return;");
tryItOut("if(*.throw(true) ? window %= {} : (eval([[]],  \"\" )).__lookupSetter__(\"__iterator__\")) export *; else  if ((new (this.__defineGetter__(\"__proto__\", /a/gi))( /x/g , ( \"\" .__parent__)))) export *;");
tryItOut("throw StopIteration;");
tryItOut("L: {return; }");
tryItOut("{}");
tryItOut("if((<x><y/></x>.(<><x><y/></x></>) ? prop.constructor : <y><z/></y>.watch(\"prototype\", new Function))) {(<x/>); const prototype; } else  if (++eval(\"\", 4.)\t) gc()/*\n*/ else {/*infloop*/M:for(yield null; __iterator__ = ( \"\"  ^= <><x><y/></x></>).__lookupGetter__(\"prototype\"); true % true.__noSuchMethod__ = *) /*infloop*/L:\fwhile(x::prototype.let\n)return; }");
tryItOut("/*for..in*/\ffor(let (prop) in ((window)('fafafa'.replace(/a/g, eval(\"__parent__\", 1e+81))))) for (__count__ in prop.__iterator__ = this) if (undefined)");
tryItOut("with({__parent__: __noSuchMethod__ = Array(#2=[,,], <x><y/></x>)}){{} }");
tryItOut("return;\n(<y><z/></y>);\n");
tryItOut("with( /* Comment */<><x><y/></x></>){<x/>;yield null;return <><x><y/></x></>; }");
