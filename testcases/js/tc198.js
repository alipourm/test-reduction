tryItOut("({ prop: constructor }) = __iterator__;");
tryItOut("if(delete __count__ =  /x/g ) { if (((p={}, (p.z = <x/>)()) >> (uneval( '' )))) {let __proto__ = .2; } else {L: {prop; } }}\n{}\n");
tryItOut("with({__proto__: (new (1 for (x in []))((prop !== <x/>), <><x><y/></x></>))})break M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */prop.__proto__ = <x/>");
tryItOut("return; const __count__;");
tryItOut("/*for..in*/L:for(const prototype in ((Math.pow)(<><x><y/></x></>)))return <y><z/></y>;");
tryItOut("M:if((yield window) instanceof ((({prototype setter: ( \"\" ).watch, constructor: @foo }))(([,].__defineSetter__(\"__proto__\", function  prop () { \fyield this } )), __iterator__))) { if (\n-1.isPrototypeOf((prototype.isPrototypeOf(<x/>)))) {yield undefined; } else return;}");
tryItOut("/*infloop*/for(let prototype = (<y><z/></y> instanceof __iterator__); <><x><y/></x></> !== <x><y/></x>; __iterator__.@foo) {let prototype =  '' , __noSuchMethod__ = *::*; }");
tryItOut("if((let (prototype = <x><y/></x>, __parent__ =  /x/g ) __parent__)) ;");
tryItOut("let (__parent__, constructor = new false.@*(Error(033))) { {throw (typeof  \"\" .constructor - (yield 1e4));/*for..in*/ } }");
tryItOut("/*infloop*/for(const __count__; null[ /x/g ].prop = (prototype = __proto__ = window); function::__parent__ = []) {do ; while(([yield <x/>].map(function(q) { return q; })) && 0); }");
tryItOut("switch((null.__lookupSetter__(\"__proto__\").__defineGetter__(\"set\", this))) { case <bbb xmlns:ccc=\"<x><y/></x>.(__noSuchMethod__)\"><ccc:eee></ccc:eee></bbb>: Functioncase 6: with({}) { yield __parent__; } break; break; break; case <><x><y/></x></>.*: gc()break;  }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __count__] = true in window) {/*infloop*/for(*; true; window) continue L; }");
tryItOut("/*infloop*/do {; } while(<y><z/></y>);");
tryItOut("function(q) { return q; }\n");
tryItOut("/*for..in*/constructorconstructor)  \"\" ;'");
tryItOut("{return;gc() }");
tryItOut("do yield\n while((__proto__) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(constructor; <y><z/></y>; false) {var constructor = undefined; }");
tryItOut("/*infloop*/M:for(window; <x><y/></x>; x><y/></x>) prototype;");
tryItOut("const __noSuchMethod__, prop;");
tryItOut("switch((<x><y/></x>)() >>= <xxx>{prop}</xxx>.((Math.pow).call(function::prop, <><x><y/></x></>, #1#))) { default: case : break; /*for..in*/M:for(__parent__ in prop\n) {<><x><y/></x></>export __iterator__; } }");
tryItOut("with({}) try { const __count__, function::__count__ =  /x/ ; } catch(__parent__ if (function(){<x><y/></x>})()) { return *; } catch(__parent__) { __count__; } ");
tryItOut("/*infloop*/do {if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {gc() } else return;/*infloop*/M:for(new (({}).__lookupGetter__)(*, this); new  /x/g (<><x><y/></x></>); new ('haha'.split)()) export *; } while(function(id) { return id });");
tryItOut("do ; while((<><x><y/></x></>) && 0);");
tryItOut("M:if(new <>yyy</>((new Iterator()))\n) { if ((<>yyy</>.(--@foo).__proto__.prop = (__proto__.__proto__ getter= prop = <><x><y/></x></>).eval(( ''  for (__noSuchMethod__ in  /x/g ))))) {yield *::*;export *; } else return;}");
tryItOut("if(RegExp([z1,,])) {break ; } else  if () {prototype } else export *\n");
tryItOut("gc()");
tryItOut("{(<x><y/></x>); }");
tryItOut("return;");
tryItOut("while((prop = __proto__) && 0)/*for..in*/for(var __iterator__ in undefined) yield;");
tryItOut("/*infloop*/for(constructor; (this.zzz.zzz); <x/> << true = new (({__count__: ( '' .hasOwnProperty(\"__count__\"))}))()) {return  \"\"  << (function ([y]) { })();let __iterator__;\n__iterator__;\n }");
tryItOut("if( /x/ .__lookupSetter__(\"prop\")) {yield <x><y/></x>; /x/ ; } else {var __iterator__; }");
tryItOut("{do (<><x><y/></x></>); while((Function(1e-81, *)) && 0); }");
tryItOut("this\nM:if( /x/g ) continue L; else  if (this) {}");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("Function");
tryItOut("/*for..in*/for(var window in *) return *::*;");
tryItOut("({ __proto__: [prototype, ], prototype: __noSuchMethod__ })");
tryItOut("{export *;export prototype; }");
tryItOut("if(undefined) throw <x/>; else \t if (#3={a:#3#}) {( '' );throw <><x><y/></x></>; }");
tryItOut("");
tryItOut("/*for..in*/for(const __iterator__ in ((function  x::__noSuchMethod__ (__parent__) { (@foo); } )(3.141592653589793))){{const prop = *; } }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, \t__count__] = ({prototype setter: [1,2,3,4].map, __count__ setter: function  __iterator__ (__noSuchMethod__) { ([z1]); }  }) in (<x/>.__count__)) <><x><y/></x></>;yield 3/0;");
tryItOut("do {const __parent__, prop = */*\n*/; } while(((true for (__noSuchMethod__ in *))) && 0);");
tryItOut("while((null) && 0){L:if(*) yield __parent__; else  if (constructor) export __parent__; else ; }");
tryItOut("__count__ = __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.__iterator__ in []) {if(window) {(<x><y/></x>); } else  if (constructor) {function  prototype (__parent__, __iterator__) { yield @foo } return; } }");
tryItOut("if(new (<x><y/></x>)( /x/g )) var __noSuchMethod__, __proto__ = true; else  if (__noSuchMethod__.( '' )) prop = __count__, prototype; else {export *;const __proto__; }");
tryItOut("export *;");
tryItOut("__count__ = ([1])(window, this), __proto__");
tryItOut("/*infloop*/for(let __count__;  /* Comment */[z1,,].throw( /x/g ).(export *); new \f /x/g .valueOf(\"number\")(((function  __parent__ (__iterator__, prop) { yield prototype } )()), (({ get __noSuchMethod__ prop (constructor) { yield * }  })) == <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\").@*)) eval\n");
tryItOut("with({}) { let(__parent__, ({ prototype: __count__ })) { let(__count__ = <x><y/></x>, __iterator__ = window) ((function(){yield (__proto__.eval([z1,,]));})()); } ");
tryItOut("if((0/0 &= <><x><y/></x></> for each (__parent__ in null) for (constructor in  \"\" ))) { if (window) __noSuchMethod__ = <><x><y/></x></>, __proto__ =  \"\" ; else {;yield; }}");
tryItOut("if(({ __proto__: __count__ }) = __parent__ /= 1.3) {__iterator__;; }");
tryItOut("/*for..in*/L:for(var ({ yield: [], __iterator__: [[], ] }) in (((function (__iterator__, __proto__) { return 'fafafa'.replace(/a/g, function(q) { return q; }) } )()) * new (<x><y/></x>)(__proto__, (__count__);))) /*infloop*/L:for(__iterator__.prototype = <{__count__}><!--yy--></{__count__}>.(([15,16,17,18].sort(Function, true))).@*.__lookupGetter__(\"__count__\"); <x/>; <x><y/></x>.hasOwnProperty(\"prototype\")) export __proto__;");
tryItOut("/*for..in*/for(prototype = new function (__proto__) { return constructor } (constructor) in *) {yield; }");
tryItOut("with({prop: (\n<><x><y/></x></>)})");
tryItOut("M:with({prototype: yield  /x/ ;})Math.sin");
tryItOut("/*infloop*/for(const prototype; let (__noSuchMethod__ = *, __count__ = function ([y]) { }) __parent__ = __iterator__; new RegExp()) {var prototype;gc() }");
tryItOut("switch(((__proto__ > 5.0000000000000000000000).__lookupSetter__(\"__proto__\"))) { default: with(--(-0) & (__count__))/*for..in*/for(let __proto__ in (((__noSuchMethod__).watch)(prototype))){}\twhile((4..propertyIsEnumerable(\"__noSuchMethod__\")) && 0)export *;break;  }");
tryItOut("{{if((let (__iterator__ = <><x><y/></x></>) window)) {gc\nexport *; } else ;let __proto__ = <>\t<x><y/></x></>; } }");
tryItOut("/*for..in*/M:for(var __count__ in [@foo]) do {__iterator__var __count__, __parent__; } while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/M:for(__proto__; __proto__; (<y><z/></y> for each (__proto__ in <x><y/></x>) for (function::__count__ in this))) {{function(q) { return q; } }null; }");
tryItOut("if(((<><</>)[[1,,]])) { if ((Date(<x><y/></x>))) {var __parent__, __noSuchMethod__; }} else Math.pow");
tryItOut("{gc() }");
tryItOut("yield [,,z1]++;this.zzz.zzz;");
tryItOut("/*for..in*/M:for(var [constructor, __proto__] = true <<= <x><y/></x> in <y><z/></y>) {yield <x><y/></x>;var prop; }");
tryItOut("let(__noSuchMethod__, []) ((function(){export *;})());");
tryItOut("return;");
tryItOut("/*for..in*/L:for(let prop in ((Math.sin)(({ get constructor __parent__ (({ prop: __count__ })) { break M; } ,  get prototype __iterator__ ()1e+81 })))){__parent__ }");
tryItOut("L: if(<x><y/></x> > <x><y/></x>.__defineSetter__(\"__iterator__\", gc)) {yield; } else if(<x><y/></x>) {let __iterator__ = *; } else {(#1#);; }{};");
tryItOut("with({}) { break ; } \n{yield;case <x><y/></x>: (<><x><y/></x></>);gc()break; (true);default: break; case __proto__: (window);case 1e4: case 9: break; case 7: break; case 5: return @foo;break; case 0: case window: let constructor = <><x><y/></x></>;break; case [1,,]: break; break; let constructor;break;  }");
tryItOut("if(this.__defineSetter__(\"__proto__\", eval)) /*infloop*/do __noSuchMethod__ while(<x/>);");
tryItOut("{M:if(<x><y/></x>\f) {const __proto__ = @foo, prop = ({}); } else  if (*::*) {yield  /x/g ; } else var __iterator__, __iterator__;\nconst __iterator__ =  /x/ ;\n }");
tryItOut("let (prototype = ({__count__: (new ( '' )( /x/g , @foo)) })) { M:if(<><x><y/></x></>.hasOwnProperty(\"constructor\")) {(3/0);[z1]; } else  if (__proto__ = 0x99) {return; } else return prop; const constructor; }");
tryItOut("let __noSuchMethod__");
tryItOut("{__count__ = undefined; }");
tryItOut("with({}) { with({}) this.zzz.zzz; } ");
tryItOut("throw <x><y/></x>.(null)");
tryItOut("L:while(((true.__parent__)) && 0){__parent__ = *::*, prototype = constructor;({}).hasOwnProperty }");
tryItOut("while((prop ^ @foo @ ([11,12,13,14].filter)) && 0)var __count__ =  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.__parent__ in ( '' .propertyIsEnumerable(\"__iterator__\")).__lookupSetter__(\"__proto__\")) /*infloop*/L:for(const __iterator__; <x><y\f/></x>; window) {yield true; }");
tryItOut("export prop\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<y><z/></y>)(@foo) in -0) {this;gc()\r }");
tryItOut("{yield <x><y/></x>; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 1.3) {{} } }");
tryItOut("return;");
tryItOut("yield @foo;/*infloop*/while(\n3)constructor");
tryItOut("prototype = __iterator__;");
tryItOut("/*for..in*/for(var function::__count__ = (--*::* if ((__noSuchMethod__ = <x><y/></x>))) in (uneval(true))) ");
tryItOut("/*infloop*/do {var __noSuchMethod__ = this;let __iterator__; } while(__parent__);");
tryItOut("L: {export ;/*infloop*/for(var ({ __noSuchMethod__: [__proto__, , , ] }) = this.__defineGetter__(\"__count__\", Math.pow); (1e4.throw(null).unwatch(\"prop\")); ((0x99)(<><x><y/></x></>))) continue L; }");
tryItOut("if(([@foo & <y><z/></y> for each (__noSuchMethod__ in <x/>) if (*::*)] if ('fafafa'.replace(/a/g, ((<><x><y/></x></>).watch).apply))))  else  if ((__proto__ <= @foo)()) M:while(([1,,]) && 0)return; else {}");
tryItOut("export constructor; const __iterator__;");
tryItOut("return;");
tryItOut("prop = __parent__;");
tryItOut("/*infloop*/for(prototype = <x/>; true; @foo) {continue ; }");
tryItOut("/*infloop*/for([constructor].some(({}).__lookupGetter__);  /x/g  ? [] : <><x><y/></x></>; prototype) continue L;");
tryItOut("/*infloop*/do eval while(prop.setter);");
tryItOut("{return prototype\n; }");
tryItOut("with({prototype: (function(q) { return q; })}){L:if( '' ) break \t; else  if (1.2e3) export __count__; else {break ; }/*for..in*/for(var __iterator__ in __parent__) {const prop = window, __iterator__;const prop = this; } }");
tryItOut("do let function::__count__, __noSuchMethod__ = #1#; while(((<>)<bbb xmlns=\"@foo\"><!--yy--></bbb></>) && 0);");
tryItOut("export *; const __count__;");
tryItOut("yield ( \"\"  || (yield <><x><y/></x></>));");
tryItOut("M:if(<x><y/></x>) __noSuchMethod__");
tryItOut("/*infloop*/do function(q) { return q; } while((eval).call(<x/>, (false .@*:: <x/>) - true ?  /x/  : <x/>, (*::* / <><x><y/></x></>)));");
tryItOut("M:do {} const __count__; while((( /* Comment */((yield [])).__noSuchMethod__ = ({ __proto__: __noSuchMethod__, __iterator__: __count__ }) = (uneval( /x/g )).*.__defineSetter__(\"__count__\", function(y) { yield y; 1e+81;; yield y; }))) && 0);");
tryItOut("do /*infloop*/for(__count__; __parent__;  /x/g ) yield  '' ; while(((<><x><y/></x></>.__noSuchMethod__ = <x/>).propertyIsEnumerable(\"constructor\").@foo) && 0); const __parent__;");
tryItOut("export prop;");
tryItOut("/*infloop*/for(__count__.__iterator__; <y><z/></y>; ) prototype = window, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("{export prototype; }");
tryItOut("/*for..in*/for(const [__parent__\n, yield] = (3.__defineSetter__(\"__iterator__\", (Function).apply)).__defineSetter__(\"__parent__\", ((try { prop = __noSuchMethod__; } catch(__proto__) { (__proto__) = function::__proto__; } ).apply).call) in (<><x><y/></x></>)([1]) = __proto__ = @foo) {return; const __parent__;L:switch() { default: return <y><z/></y>;break;  } }");
tryItOut("do {(0.1); } while((([<x><y/></x>.(__parent__)].some(window))) && 0);");
tryItOut("export __iterator__;\nprop;\n\n__parent__ = 1e81, prototype;");
tryItOut("with({__noSuchMethod__: Array(<x><y/></x>)}){/*infloop*/for( /x/g ; constructor; function(y) { yield y; return __proto__;; yield y; }) {;var __proto__; }export __count__; }");
tryItOut("if(<x/>) var __noSuchMethod__ = #1=[#1#], __proto__");
tryItOut("/*for..in*/for(let prototype.__noSuchMethod__ in (uneval(prototype)) ? [[1]] , constructor, prototype : ((<x/>.__defineGetter__(\"__noSuchMethod__\", eval)) && (prototype%=this))) with((new (<x><y/></x>)())[(033)]){const yield, __proto__; }");
tryItOut("M:while((yield * if (({a2:z2}))) && 0)L: yield  /x/g .eval( '' );");
tryItOut("function::constructor = break ;;");
tryItOut("L: let (prototype) { /*for..in*/for(var undefined.prop in constructor) {<><x><y/></x></>; } }");
tryItOut("/*infloop*/while(*::*){return;throw this; }");
tryItOut("/*for..in*/for(var (__iterator__.__count__) in (undefined)(<x/>)) {with({}) function::__count__ = prototype; }");
tryItOut("const __noSuchMethod__, continue M;;\n/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in undefined) throw @foo;\n");
tryItOut("switch((.2.propertyIsEnumerable(\"arguments\"))) { default: break; case 9: break; break; const __iterator__ = <><x><y/></x></>, prototype;break; break;  }");
tryItOut("if(true.watch(\"__proto__\", function(y) { yield y; gc(); yield y; })) export *;/ else {export __noSuchMethod__;yield; }");
tryItOut("L: {if((prototype = <y><z/></y>)) {yield <><x><y/></x></>;export constructor; } else  if (((undefined)[[[1]]])) {return @foo;/*infloop*/while(5.0000000000000000000000){yield;return; } } else {let constructor; }/*infloop*/M:while(__iterator__.__count__ getter= function (prototype, prop)<><x><y/></x></>){throw <x/>;break ; } }");
tryItOut("/*for..in*/for(constructor || <x><y/></x> > true in ((eval)(<bbb \fxmlns:ccc=\"true.propertyIsEnumerable(\"__proto__\")\"><ccc:eee></ccc:eee></bbb>))){(<x/>);__parent__ =  /x/ ; }");
tryItOut("__proto__ = [[]], prop = [1,,]\n\n");
tryItOut("__count__ = __proto__;");
tryItOut("prototype = __parent__");
tryItOut("/*infloop*/do yield  \"\" ; while(this.__defineSetter__(\"__count__\", <x><y/></x>));");
tryItOut("try { const prototype; } catch(constructor) { return; } ");
tryItOut("/*for..in*/M:for(var __count__ in ({ set constructor __noSuchMethod__ (prototype) { yield this }  })) {while((this) && 0)let __count__;return window; }");
tryItOut("return (({a2:z2}) @ <y><z/></y>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let 0 ? <x/> : __noSuchMethod__ = <><x><y/></x></> in ((__iterator__.(<><x><y/></x></>)))) {return;return; }\nreturn;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in prototype) {{}let __count__; }\n/*infloop*/for(const prototype = __count__; 3.141592653589793.__count__ = __proto__ =  \"\"  - [<x><y/></x> for each (prop in @foo)]; (prototype.((uneval(function::prototype.__count__ = <><x><y/></x></>.eval(4.))))).__lookupGetter__(\"__proto__\")) {export __proto__; }");
tryItOut("/*for..in*/M:for(prototype in <x><y/></x>) return ({});");
tryItOut("L: { % @foo;var __count__, x::__parent__ = @foo; }");
tryItOut("L:while((<x/>) && 0){/*infloop*/M:while(<x><y/></x> << #1=[#1#]){export prototype; } }");
tryItOut("yield <x><y/></x>.propertyIsEnumerable(\"__proto__\");");
tryItOut("continue L;");
tryItOut("let (__count__ = [(~__iterator__)].some([,,]), ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: constructor })) { return; }");
tryItOut("return ([, prototype]).apply();");
tryItOut("/*for..in*/for(const __count__.__iterator__ in (((new Function(\"(<><x><y/></x></>);\")))((((uneval( /x/g )) for each (__noSuchMethod__ in (__proto__.__proto__.(([[1]] .@*:: __parent__)))) for (prototype in <y><z/></y>--) for (default: ({}).hasOwnProperty in  '' ))))))<x><y/></x>");
tryItOut("M:if(__noSuchMethod__.prop = prototype = window.__lookupGetter__(\"constructor\")) export *; else  if (const prop, __proto__ = ([[[1]] for each (function::prototype in 1e4)])) /*for..in*/M:for(let prototype in <x><y/></x>.unwatch(\"__noSuchMethod__\")) {var __iterator__ = <y><z/></y>, __proto__;constructor }");
tryItOut("const constructor, __parent__ = *;\n\n");
tryItOut("throw __proto__;");
tryItOut("if( /* Comment */false.propertyIsEnumerable(\"__noSuchMethod__\")) { if (eval(\"<x><y/></x>\", <x/>)++) [1,2,3,4].map} else {1e-81;(null); }");
tryItOut("export prototype;");
tryItOut("\tif(*::*.__lookupSetter__(\"function::__count__\")) gc() else {export *; }");
tryItOut("return\nif(default: /*infloop*/while(<xxx {__proto__}={<x/>} />){*::*;{} }case  : break;  >>= __parent__) ; else {prop;/*\n*/Math.pow }");
tryItOut("export __count__;");
tryItOut("/*infloop*/for(prototype; \n*; ({ __count__: prop, __iterator__: __parent__ }).__parent__ getter= function (__count__, __proto__) { return this } ) {switch([,,]) { default: let __proto__ = this, __parent__;return undefined;case 2: break; case __count__: break; ;break;  } }");
tryItOut("/*for..in*/for([__iterator__, __count__] = \n*.hasOwnProperty(\"prototype\") in yield <\t><x><\ny/></x></>) let (prototype = (p={}, (p.z = <x/>)())) { return <><x><y/></x></>; }");
tryItOut("let (prototype) {  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (__proto__.(<x><y/></x>)) in ('fafafa'.replace(/a/g, function(y) { yield y; return undefined;; yield y; }))) {}");
tryItOut("L:if(<x><y/></x>) {(-0); }");
tryItOut(";");
tryItOut("function (__parent__, prop) { return <><x><y/></x></> } var prop;");
tryItOut("L: {return; }");
tryItOut("L:if(prototype.function  __noSuchMethod__ (prop) { gc() } .__defineGetter__(\"prop\", [1,2,3,4].map)) const prop\n else  if (let (__noSuchMethod__, __proto__ = __count__) prop &= ({ get __noSuchMethod__() { yield <><><ccc:ddd><x><y/></x> </ccc:ddd></></> }  })) __count__ = <x><y/></x>; else {const 1.2e3 = 1e81, __iterator__; }");
tryItOut("if(false) { if ((__count__ = 1e4)) while((#1#) && 0){export __iterator__; }} else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each( '' ['__noSuchMethod__'] in <><x><y/></x></>) return @foo\nthrow null -=  \"\" ;");
tryItOut("(__proto__);");
tryItOut("do (<><x><y/></x></>); while(((<><x><y/></x></> >>= <><x><y/></x></>\n)) && 0);");
tryItOut("while((033) && 0)*");
tryItOut("{throw (-0); }\nif(\n<y><z/></y>) {yield\n{} }");
tryItOut("if((let (constructor =  '' .__noSuchMethod__ = <x><y/></x>\f.__defineGetter__(\"__count__\", eval), __parent__) new (<x><y/></x>)(function ([y]) { },  /x/g ))) { if ((+({ constructor: prop, prototype: __proto__ }) =  /* Comment */<><x><y/></x></> >= __proto__ = 1e+81)) {yield;yield; } else (__iterator__);}");
tryItOut("\ndo {return;/*infloop*/M:for(@foo; 0x99; *) <x/>; } while((this.__defineSetter__(\"__iterator__\", function  prop (__count__)(__proto__.((function ([y]) { })()) == new -0(-3/0)))) && 0);");
tryItOut("switch(typeof this) { case <x><y/></x>.isPrototypeOf(this): break;  }\ngc()\n");
tryItOut("switch((prop = #1#)[+.2]) { case undefined .@x:: window:  }");
tryItOut("__parent__, prop = <x><y/></x>;");
tryItOut("/*infloop*/for(*::*; *::*; false) {<x><y/></x>; }");
tryItOut("/*infloop*/while(new <><x><y/></x></>)continue L;");
tryItOut("/*for..in*/for(const constructor in ((eval)((({constructor: false}))))){/*for..in*/for(const [prototype, __noSuchMethod__] = (1e-81.isPrototypeOf(#1=[#1#])) in (<x/>)) yield <x/>;while((*) && 0)var __count__, constructor = constructor }");
tryItOut("/*infloop*/for(let [, __iterator__, , prototype, __noSuchMethod__] = (({ set __parent__(prop, prototype)__parent__ })); (delete [*::*]); yield ~constructor.propertyIsEnumerable(\"__iterator__\")) {/*infloop*/while(<><x><y/></x></>){; } }");
tryItOut("let (constructor) { yield [,,z1]; }");
tryItOut("do {return;return  /x/g ; } while((this) && 0);");
tryItOut("/*infloop*/while(prop.__count__ = <y><z/></y>){throw <x><y/></x>; }");
tryItOut("if([[11,12,13,14].map].some(function (__parent__) { return (eval).call(try { (*).watch } catch(__parent__) { export prototype; } , this, *) } ).__iterator__) { if ({__iterator__ =  { var __proto__; } ;{} }.valueOf(\"number\")) {yield undefined;constructor }} else {var __noSuchMethod__ = <x><y/></x>, __parent__; }");
tryItOut("(<><x><y/></x></>); const constructor;");
tryItOut("{while((this) && 0){function () { Math.pow }  }const __proto__, __count__; }");
tryItOut("/*infloop*/for(var ({ function::prototype: ({ __iterator__: prop }) }) = null << <x/>; new Iterator(window, @foo); ) return;");
tryItOut("M:if((undefined\n == (<x><y/></x>.(033)))) {{}export __count__; } else  if ((constructor = 1e81)) <y><z/></y>['__parent__'] = prop;");
tryItOut("if(1.2e3) { if (({a2:z2})) return;\n/*infloop*/while(@foo){continue L; }\n} else {\f{({ constructor: ({ prototype: __count__, prop: __count__ }), prop: ({ __count__: ({ prototype: __iterator__ }), __parent__: ({ prototype: __noSuchMethod__ }) }) }) }let (__parent__, __proto__ = null) { break ;/* } }");
tryItOut("/*infloop*/while((<x/>)[@foo])");
tryItOut("throw ({a2:z2});");
tryItOut("{let (prototype = null) { export \t*; } }");
tryItOut("if(this.zzz.zzz)  '' ; else ;");
tryItOut("L:while(((\n__proto__.prop)) && 0){let (__parent__) { var __parent__ =  \"\" ; } }");
tryItOut("");
tryItOut("/a/gi = __parent__;");
tryItOut("L: {yield;\tL:if((1 for (x in []))) {export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__proto__) in ((uneval(this))) && true >>= true) __noSuchMethod__");
tryItOut("/*infloop*/do {continue M; } while(__count__ for each (x::prototype in ({a2:z2})));");
tryItOut("throw function::constructor;");
tryItOut("let (({ __parent__: ({ __noSuchMethod__: __proto__ }) })) { (([11,12,13,14].sort)); }");
tryItOut("L: (prop//h\n)\n([1]);\ngc()\n");
