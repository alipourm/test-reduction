tryItOut("if(let (__proto__ = (prop = __iterator__)) ) { if (void new Date((__iterator__ = true))) {false;(this);\t\nexport *;\n } else with({prototype: *::*}){export prototype;return; }}");
tryItOut("/*infloop*/for(var __count__; __noSuchMethod__ = __count__; 4. for (__proto__ in  /x/g )) return;");
tryItOut("L: /*for..in*/for(__noSuchMethod__.__count__ in (((<x><y/></x>).watch)(([11,12,13,14].map))))continue ;");
tryItOut("/*infloop*/while((\f(window)[<><x><y/></x></>]))yield;");
tryItOut("/*infloop*/for( = <x><y/></x>; prop = prototype.__defineSetter__(\"prop\", new Function); gc()) /*for..in*/for(__iterator__ in  '' ) {yield <x><y/></x>; }");
tryItOut("/*for..in*/for(var __parent__( /x/ ) in (((true++).call)([, , ] = (yield this))))export __iterator__;");
tryItOut("{yield constructor;/*for..in*/for(__proto__ = ((constructor = <x><y/></x>).prototype = window.yoyo([[1]])) in  /x/g ) {; } }");
tryItOut("L:while((Exception(<bbb xmlns=\" /x/g \"><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></bbb>, (set.prop =  \"\" .__defineSetter__(\"constructor\", ({}).hasOwnProperty)))) && 0)continue L;constructor = <y><z/></y>;");
tryItOut("throw function::prop;");
tryItOut("if([[]]) <x/>;");
tryItOut("M:if(false !== *) __noSuchMethod__, __noSuchMethod__ = [z1]; else  if (<><x><y/></x></>) yield window;");
tryItOut("export __iterator__");
tryItOut("if(constructor = <><x><y/></x></>.__parent__) {(this);export *; } else  if ({} ? null : <y><z/></y> | __proto__.(=)) do {function (__proto__) { yield <ccc:ddd></ccc:ddd> } undefined; } while((((yield this) if ([[]]))) && 0);");
tryItOut("{;throw  /x/g ; }");
tryItOut("this.zzz.zzz;");
tryItOut("switch(new null + __iterator__(__iterator__, #3={a:#3#})) { default: /*infloop*/for(({ prop: prototype }) = [,]\n; ( /x/g  +  /x/ ); function ([y]) { } , *) {__iterator__ = function ([y]) { }; }case function ([y]) { }.__parent__ = *: yield this;break;  }");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) with({}) { with({}) return; } ");
tryItOut("if(eval(\"/*infloop*/L:for(const constructor; __iterator__; <x/>) export *;\", true)) {{} } else {return false;throw *::*; }");
tryItOut("if((prototype)()) { if (4.) {continue L;yield; }} else {throw null;M:with(<><x><y/></x></> |= <x><y/></x>){export *; } }");
tryItOut("switch(*::*) { default: const __proto__, __iterator__; }");
tryItOut("/*for..in*/for(__proto__ in const __parent__, prototype;) {{}let __parent__ = <y><z/></y>, __iterator__; }");
tryItOut("M:do {1.3 } while((function (__noSuchMethod__) { yield [z1,,] = (((1e81).__defineSetter__).call(window, )) } ((__count__ = this.__defineSetter__(\"prototype\", new Function)))) && 0);");
tryItOut("if((window.__lookupGetter__(\"__noSuchMethod__\"))) const __iterator__ = __iterator__, __count__ = <><x><y/></x></>; else  if ((3.141592653589793.unwatch(\"__noSuchMethod__\"))) {continue ; } else yield <x/>;");
tryItOut("/*for..in*/L:for(__iterator__ = ('fafafa'.replace(/a/g, [,])) in \f<><x><y/></x></>) const constructor = <x><y/></x>;");
tryItOut("/*infloop*/do {return; } while((p={}, (p.z = (<x><y/></x>)[[z1,,]])()));");
tryItOut("/*infloop*/L:for(var constructor; <x><y/></x> ? * : window; function(id) { return id }) /*infloop*/for(function::x::; 1.2e3; constructor) {}");
tryItOut("/*for..in*/L:for(const [constructor, __count__] = 0/0 in 1e81) {export __count__;return; }");
tryItOut("throw @foo; const prototype;");
tryItOut("if(each.constructor = \n<x><y/></x>) constructor else  if (((yield ({a2:z2})))) yield; else {export *;yield prop; }");
tryItOut("({}).__lookupGetter__");
tryItOut("with({}) { for(let y in [5,6,7,8]) throw __parent__; } ");
tryItOut("let (prop = --*, __parent__) { /*infloop*/for(const ({ __noSuchMethod__: prop, constructor: __iterator__ }) = 1e4; <x/>--; (__count__ = x::__iterator__)) export *; }");
tryItOut("var constructor\nM:switch(__proto__) { case 4: break; case 6: throw [1,,];break;  }yield <x><y/></x>;");
tryItOut("L:with((new <x/>(this).isPrototypeOf((this.__count__ = prop)))){M:do {with(<x><y/></x>){throw 3.141592653589793; }throw this; } while((@foo :: (function ([y]) { })()++) && 0); }");
tryItOut("{;<y><z/></y>; }");
tryItOut("if([,,]) <><x><y/></x></>; else {yield; }");
tryItOut("if(( \"\" .__lookupGetter__(\"__noSuchMethod__\").__defineSetter__(\"prop\", (new Function(\"__proto__ = <><x><y/></x></>, __iterator__;\"))))) yield; else break ;");
tryItOut("if((*::* &= *)) {{}var prop = 3.141592653589793; } else  if (new (false)(default: throw @foo;case [11,12,13,14].some: return <x><y/></x>;break; case (constructor = __noSuchMethod__): *;)) ; else export *;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in constructor) {gc()let prototype = 3; }\", false) in (++5.0000000000000000000000.@*)) with({prototype: (<y><z/></y>)()})var __noSuchMethod__, __count__;");
tryItOut("if((<{prop}><x><y/></x>yyy</{prop}>.(([11,12,13,14].map)) in arguments)) { if ((typeof [this].map(new Function))) /*infloop*/L:for(const __parent__; [11,12,13,14].some; __iterator__) {(<x/>);break ; } else export __iterator__;}");
tryItOut("");
tryItOut("/*for..in*/for(const __noSuchMethod__ in this) break M;");
tryItOut("if( /x/g ) {gc() } else  if (undefined) export *; else {'haha'.splitgc() }");
tryItOut("{( /x/g ); }");
tryItOut("__iterator__ = [z1] && [z1,,];");
tryItOut("try { __noSuchMethod__ = __proto__; } finally { throw StopIteration; } ");
tryItOut("/*for..in*/L:for(__parent__ in  '' ) {gc()([1]).apply }");
tryItOut("\nyield;");
tryItOut("/*infloop*/for(null <= @foo; prop; prop = null) {switch(<x/>) { case <><x><y/></x></>: evalbreak;  }export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__.__iterator__ in <><x><y/*\n*//></x></>) export *;");
tryItOut("let(({ __count__: __count__, __proto__: [__count__, @foo] }) = ([11,12,13,14].filter), __count__ = <><xxx {set}={null} /></>) { if((([z1,,])[<><x><y/></x></>])[new <><x><y/></x></>()]) yield \tfalse; else  if (__iterator__ = <><x><y/></x></>) export *; else {*; }");
tryItOut("M:while((3/0) && 0){var __parent__, constructor;let __parent__; }\n/*infloop*/for(__parent__; new (this)( \"\" ); eval(\"return null;\", (prototype = (-1)))) {;export *; }\n");
tryItOut("if(( /* Comment */prototype.(constructor))) {{let constructor = __parent__; } } else  if (( /x/ .eval(<x/>.prototype)).hasOwnProperty(\"__noSuchMethod__\")) throw  '' ;");
tryItOut("let (get = /*infloop*/for([null]; yield <x><y/></x>; (uneval(<><x><y/></x></>))) {;var constructor = <x><y/></x>, constructor =  /x/ ; }, [*::*]) { try { export *; } catch(__count__ if this.unwatch(\"__iterator__\")) { return window; } catch(__parent__ if {}(function::1e+81)\t) { yield; } catch(prop if (function(){ { yield 033 > @foo-- } })()) { yield export prototype;; } finally { var prop, __proto__; }  }");
tryItOut("export *;");
tryItOut("L:switch(__proto__) { default: /*infloop*/while((<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\"))){gc()return /*__parent__; }yield;case 7: L:if(<y><z/></y> @ <x/>) {(1e-81);; } else  if (( )) {gc()(__count__); }break; case 3: case 6: break ; const prototype;/*for..in*/M:for(var prototype in 3.141592653589793) if(\t*::*) { if (window) yield undefined; else yield;} }");
tryItOut("/*infloop*/for(window; (<>prototype: (function(y) { yield y; yield false;; yield y; } == <y><z/></y>.valueOf(\"number\"))</>)( '' ,  '' ); ([prop if (<x><y/></x>)])) /*for..in*/for(const __count__ in __noSuchMethod__) {yield __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__proto__ in prototype) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <>x><y/></x></>) {let __iterator__ = *::*, prototype; } }");
tryItOut("with({}) yield <><x><y/></x></>.constructor.yoyo( '' .__defineGetter__(\"__parent__\", ('haha'.split).apply));");
tryItOut("([])\n/*infloop*/for(({});  '' ; -3/0) {return true;<><x><y/></x></>; }");
tryItOut("__proto__ = __parent__;");
tryItOut("try { throw StopIteration; } finally { with({}) { yield false; }  } ");
tryItOut("for(let y in []);");
tryItOut("if( '' .hasOwnProperty(\"prop\")) /*\n*/{ if ((prop.__iterator__)) (<x/>);} else {yield;{} }");
tryItOut("if((yield (this.zzz.zzz))) {throw __iterator__; } else {export *; }");
tryItOut("/*infloop*/for(let __proto__ = <y><z/></y>; 1e+81; prop) var __iterator__\nwith(Function)/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in null) (true);");
tryItOut("/*infloop*/for(const ({ prototype: constructor, prototype: ({ __iterator__: ({ __parent__: [({ __iterator__: \fprop(<x><y/></x>), __iterator__: [__noSuchMethod__, prop] }), constructor, [[({ __iterator__: __iterator__, prototype: prop })], __noSuchMethod__, , __noSuchMethod__, (this)(this)], , ] }), __parent__: constructor.__count__ }) }) = constructor * this; (let (__noSuchMethod__) *.hasOwnProperty(\"<> </>\")); ((#2=[<><x><y/></x></>]) for ((__proto__)\f in {}) for each (prototype in #1#))) {/*for..in*/for(var prototype = prototype.__noSuchMethod__ = *.valueOf(\r\"number\") in (this.__defineSetter__(\"__noSuchMethod__\",  /x/g ))) yield  '' ; }");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(const constructor in ((eval)(({a1:1}))))");
tryItOut("/*infloop*/M:for(const __proto__; <bbb xmlns=\"\t<x><y/></x>\"><!--yy--></bbb>.(<x/>.__parent__); ('haha'.split).call(1e-81, )) return  /x/g ;");
tryItOut("/*infloop*/for(const <><x><y/></x></>.__lookupSetter__(\"constructor\")['__iterator__'] = [__proto__].some([1,2,3,4].map)\n; ((function ([y]) { })().watch(\"prop\", function ({ }) { /*infloop*/M:for(var __parent__; eval(\"throw [[]];\", false); *::*.__lookupGetter__(\"__noSuchMethod__\")) {var constructor; } } )); let (prototype = *) window :: new (({}).__lookupGetter__)( \"\" , <><x><y/></x></>)) var __noSuchMethod__ =  /x/g ");
tryItOut("M:if((((function  __count__ () { function(q) { return q; } } ).call).call( '' , ))) {with({__noSuchMethod__: prop /= <x><y/></x>})__noSuchMethod__; } else {/*infloop*/L:while(eval(\"return {};\", <><x><y/></x></>))return __count__;/*infloop*/for(let [, , , ({ __iterator__: set })] = undefined; (( \"\" )[*] for each (__proto__ in __noSuchMethod__) for each (prop in <><x><y/></x></>)); (*[__proto__])) constructor = <><x><y/></x></>, * }");
tryItOut("var prototype = __noSuchMethod__, __iterator__;(({a1:1}));");
tryItOut("/*for..in*/for(prop = --*.valueOf(\"number\") in @foo) {;const constructor = <y><z/></y>, __proto__ =  /x/ ; }");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__ = <y><z/></y>;");
tryItOut("{M:while(([([1,2,3,4].slice((<x/>).watch([1,,])))]) && 0){(<x><y/></\tx>); } }");
tryItOut("if((<x/> ? null : <x><y/></x>)) return; else  if ( /x/ ) gc() else Math.sin");
tryItOut("gc()");
tryItOut("throw prop;");
tryItOut("{}if(true) {export *; } else  if (this) {return;(*); }");
tryItOut("/*infloop*/while(window .@*:: <><x><y/></x><\t/>){/*infloop*/L:do let __parent__ = __noSuchMethod__; while(<y><z/></y>);/*infloop*/for(*::*; this; *::*) {} }");
tryItOut("L:if((function::__parent__.(<x><y/></x>).throw((false.__lookupSetter__(\"__noSuchMethod__\"))).__defineGetter__(\"__iterator__\", #0=<x/>)) in ([11,12,13,14].sort)) with({constructor: (uneval(__count__ getter: (Math.pow).apply))}){yield; } else {export __iterator__; }");
tryItOut("L: { for each (__iterator__ in ([__iterator__ =  '' ].map([1,2,3,4].map))) }");
tryItOut("__noSuchMethod__ = <x><y/></x>;\n{export __parent__;yield <x><y/></x>; }\n");
tryItOut("L:with({constructor: <x><y/></x> for each (__count__ in this)}){export prototype; }");
tryItOut("/*for..in*/for((__noSuchMethod__ = <y><z/></y>)['__proto__'] in ((function  <><x><y/></x></>['function::__noSuchMethod__'] (__count__)prop = {;return; })(((__iterator__ = <x><y/></x>) >> __parent__ =  '' )))){yield;gc() }");
tryItOut("if((yield let (__proto__) window)) {(\t*); }");
tryItOut("do {return; } while((true) && 0)\n(//h\n<y><z/></y>)\nlet __noSuchMethod__;");
tryItOut("with(#3={a:#3#}){export __parent__\nexport prototype; }");
tryItOut("yield {} instanceof (eval(\"export *;\", [,,z1])); const __proto__;");
tryItOut("L: {yield -1; }");
tryItOut("M:if(<x><y/></x>) var __noSuchMethod__, constructor = __count__");
tryItOut(";");
tryItOut("if(window) {const __parent__ = <><x><y/></x></>; } else  if (true) {return; }");
tryItOut("{L:if(({__iterator__ setter: ({}).hasOwnProperty })) {export *; } else  if (<y><z/></y>) {({a1:1});__noSuchMethod__ = *::*; }/*for..in*/for(const [prop, __parent__] = __parent__ in *::*) constructor, __count__ =  '' ; }");
tryItOut("__noSuchMethod__ getter: (__iterator__ *= this).__defineSetter__");
tryItOut("if(with({__proto__: <y><z/></y>}){export *;function (prop, constructor) { return *::* }  }) return;");
tryItOut("/*infloop*/for(let __proto__ = this ? __noSuchMethod__ : [z1]--; __noSuchMethod__; [<y><z/></y> |  '' ].map(function(y) { yield y; yield;; yield y; })) while((__parent__) && 0){constructorconstructor = <><x><y/></x></>, __proto__; }");
tryItOut("M:if(((window > -1.yoyo( \"\" ) *::*.__proto__ )).call(prop.constructor = -0 %=  /x/g  ? (__iterator__.__count__ setter= Function) : ++<y><z/></y>, )) {yield;return; } else {}\n/*infloop*/do {Math.powexport __parent__; } while(__noSuchMethod__);");
tryItOut("return;");
tryItOut("L: \f{return;let (({ setter: constructor })) { export __iterator__; } }");
tryItOut("export *\n");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(let __count__.__noSuchMethod__ in ( /x/  >>>=<x/>)) {0;M\f:do {throw  /x/ ;gc() } while((0/0.yoyo(<><x><y/></x></>)) && 0);#1=[<x><y/></x>] }");
tryItOut("let(__count__) { gc()\n__count__ = {};");
tryItOut("/*infloop*/do {throw StopIteration;/*for..in*/for(let __iterator__ = *::* in __iterator__) {export prop;new Function }\r } while(<>__noSuchMethod__</>.__lookupSetter__(\"constructor\") = (null.hasOwnProperty(\"prop\")));");
tryItOut("if((<>constructor</> | prop) ? (yield __noSuchMethod__) : (new this())) { if (-- /x/g  +  '' ) return; else let __iterator__ = true;}");
tryItOut("switch(prop.prop =  /x/g () for each (prop in (<><x>\t<y/></x></>.__defineSetter__(\"prototype\", __iterator__ =  /x/g )) > this) if ((*::*.__count__ = 1e-81) |= (eval(\"<x><y/></x>\", this)))) { default: {/*for..in*/for(let __count__ in *) yield; }case (this.__defineSetter__(\"prop\", (1 for (x in []))))[(__proto__ = <><x><y/></x></>)]: /*infloop*/\tfor(const [({ __noSuchMethod__\t: ({ __proto__: prototype, __noSuchMethod__: __parent__ }), constructor: ({ x::constructor: prototype }) }), , ({ __count__: __noSuchMethod__ })] = (prop instanceof __noSuchMethod__).yoyo(__iterator__); [[1]]; <></>.__parent__) {yield;const constructor; }case (uneval((__parent__ = (new (<x><y/></x>)( /x/g , *::*)) >>>=prototype|=--(Boolean(undefined)) ? (this.__defineSetter__(\"constructor\", function(y) { yield y; {}; yield y; })) : *::*\n))): /*for..in*/for([prop, constructor] = <y><z/></y> in @foo) {gc() } const __parent__;case 4: case new (function(q) { return q; })(): ;break; case true > (function ([y]) { })().hasOwnProperty(\"prop\"): /*for..in*/M:for([prop,  /x/ ] = arguments in __noSuchMethod__) return <x><y/></x>; }");
tryItOut("switch([].eval(<x/>).watch(\"prototype\", [1,2,3,4].slice)) { case 4: case 2: const __parent__, prop = 0;break; case (eval(\"this\", null)): __iterator__ = prototype, constructor;break; default: break;  }");
tryItOut("switch(window) { default: break; export *; }");
tryItOut("while((((undefined)[({a1:1})] instanceof function(y) { yield y; {}; yield y; })) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in  /x/ ) gc()");
tryItOut("let __count__\n");
tryItOut("/*infloop*/L:for((({__iterator__: function ([y]) { }}).__parent__ = (-1).hasOwnProperty(\"prop\")); (@foo)(*::*) =  /* Comment */@foo; typeof constructor-=<x><y/></x>.*\t) while((<x><y/></x>) && 0)<><x><y/></x></>;");
tryItOut("if(typeof null) {(new Function(\"\"))break ; } else  if (eval(\"window.isPrototypeOf( \\\"\\\" )\", (Math.sin).call(<><x><y/></x></>, ))) {export *;{} } else export constructor;");
tryItOut("L:with(constructor.(*))/*for..in*/for([__iterator__, prototype] =  /x/g  in <x/>) {break M; }");
tryItOut("with(@foo){( \"\" ); }");
tryItOut("const prop;\ngc()\n\nexport *;");
tryItOut("for(let y in [5,6,7,8]) yield [ /* Comment */window if (({__parent__: [1,,], prototype getter: <x/> }))];");
tryItOut("L:if(function::__parent__) if([false].map([[]])) (<><x><y/></x></>); else  if ((true.__defineSetter__(\"constructor\", function ()3.141592653589793))) {\t }");
tryItOut("{with(* - <x><y/></x> .@x:: [[1]].__defineSetter__(\"prop\", function(q) { return q; })){/*for..in*/for(var [prototype, prototype] = window in undefined) export *; } }");
tryItOut("/*infloop*/for(({ prototype: __parent__, constructor: ({ prop: [] }) }) = new Iterator(); null.hasOwnProperty(\"__iterator__\") if (<x/>); (null if ((<y><z/></y>.propertyIsEnumerable(\"constructor\"))))) {prototype; }");
tryItOut("/*infloop*/do {L:with({__count__: ((function  __count__ (({ __noSuchMethod__: ({ __parent__: __parent__ }) })) { return  } )(((@foo).call(<y><z/></y>,  '' ))))}){/*infloop*/for(var __noSuchMethod__; (uneval(1.3)); (window.@*)) {var __count__ = *, prop = __noSuchMethod__;const __noSuchMethod__, __noSuchMethod__ = <x/>; }/*infloop*/for(<x><y/></x>; null; (-1)) {yield [1]; } } } while(__proto__);");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if(this.__defineSetter__(\"prop\", ((null).__defineSetter__).call)[eval(\"const __iterator__ = 1.3;\", __parent__.([[1]]))]) { if ({}) return; else ;}");
tryItOut("L:switch(5.0000000000000000000000) { default: return;break;  }");
tryItOut("{yield 1e4;/*infloop*/L:for(__noSuchMethod__; prototype.__count__; <x><y/></x>) (this); }");
tryItOut("{<><x><y/></x></>M:if((function ([y]) { })()) {yield <x><y/></x>; } else  if (@foo) {export constructorprop ; } }");
tryItOut("yield false;[1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><x><y/></x></>) {yield prototype, true; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((this)([] < [] & 3.141592653589793 >>> [])))(<x><y/></x>);");
tryItOut("/*infloop*/while([[]].filter(({}).hasOwnProperty));");
tryItOut("let __count__;");
tryItOut("if() {gc() } else {<x><y/></x>;[1]; }\nif(window.@* >= ((undefined).call(<x><y/></x>, ({a1:1})))) {{} } else  if ( /x/ ) {;return <x><y/></x>; }\n");
tryItOut("<> </>.(( \"\"  * <x><y/></x>))");
tryItOut("M:with({__iterator__: window})(<x><y/></x>);Math.pow");
tryItOut("if([eval(\"( /* Comment */prototype)\", prototype = <><x><y/></x></> ? (#2=[<><x><y/></x></>]) : ((function ([y]) { })()--))]) /*infloop*/M:for(let __proto__ = <x><y/></x>; *; prop) {<><x><y/></x></>;continue ; } else  if (this) prop = <><x><y/></x></>, constructor;\n;\n else if((__count__+=5.0000000000000000000000)) {__count__yield *; }");
tryItOut("with({__iterator__:  /x/ }){yield true; }\t");
tryItOut("let (__proto__, __parent__) { /*infloop*/L:for(__parent__ = <><x><y/></x></>; this; get) {} }");
tryItOut("Lif(__proto__ = ((this.__iterator__) < eval(\"<><x><y/></x></>\", <x/>))) prop else if(__iterator__) arguments else  if (__noSuchMethod__.__parent__ = [[]]) {{} } else {let __count__, __proto__;yield; }");
tryItOut("with({}) __iterator__ = __count__;");
tryItOut("L:with({constructor: <x><y/></x>.__defineSetter__(\"__count__\", (gc).apply).__parent__ = this.__defineGetter__(\"function::prop\", <x><y/></x>)})return __iterator__;");
tryItOut("yield <x><y/></x>");
tryItOut("if(function ([y]) { }) var __iterator__ = <x/>, constructor = \f<><x><y/></x></>; else  if (<x><y/></x>) {gc() }");
tryItOut("{ }\f\nyield;\n");
tryItOut("if(( ''  in @foo)) yield; else export *;");
tryItOut("/*for..in*/for(prototype = <><x><y/></x></> for (__count__.prop in false) for each (__parent__ in 0/0) in <y><z/></y>.isPrototypeOf(this)) {return; }");
tryItOut(" const __count__;");
tryItOut("/*infloop*/while(this){const __parent__ = <x><y/></x>; }");
tryItOut("yield function ([y]) { }; const prop;");
tryItOut("/*for..in*/for(let constructor in undefined) {let __count__ = window, __proto__ =  /x/g ; }");
tryItOut("L: if(true) ; else  if (<bbb xmlns:ccc=\"0/0 <<= <x><y/></x>\"><ccc:eee></ccc:eee></bbb>) {} else {throw  /x/ ;/*infloop*/for(var prototype = this; undefined; __parent__\f) return false; }");
tryItOut("{L: return;throw StopIteration; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("switch(#1#) { case <x><y/></x>: /*for..in*/for(let setter in ((function(q) { return q; })(undefined)))(<x/>); }");
tryItOut("gc()return <x><y/></x>;");
tryItOut("if((-0)) ; else  if (<><x><y/></x></>) let __noSuchMethod__, __proto__ =  '' ;");
tryItOut("if(({<bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb>: -1})) {{}\nexport *;\n } else  if (constructor) var __proto__, prototype; else if(<x/>) {{}let prop =  \"\" , __iterator__; } else  if ([1,,]) gc() else {export *;<><x><y/></x></> }");
tryItOut("with({}) const __noSuchMethod__ = ( /x/g  >>> <><x><y/></x></>).valueOf(\"number\"), constructor;");
tryItOut("throw __parent__;");
tryItOut("L:if(([11,12,13,14].map)) {return;(*::*); }switch([((this)[*::*]) if (<y><z/></y>)]++) { case this.__defineGetter__(\"__iterator__\", /a/gi): break; default: break; M:while(((<xxx>{prototype}</xxx>.(__noSuchMethod__) || __count__ = __noSuchMethod__)) && 0)L:if( \"\" ) { if (window) return; else {*::*; }}break; case (prop)[this]: case 8: ;break; case 3: break;  }");
tryItOut("yield;constructor = <><x><y/></x></>.valueOf(\"number\") -= new ((<><x><y/></x></>).__defineSetter__)(#1=[#1#],  \"\" );");
tryItOut("for(let y in []);");
tryItOut("with({}) { const __proto__, constructor =  '' ; } ");
tryItOut("with(new (void ((yield undefined)))())const [this.__defineGetter__(\"prop\", function  __count__ () { yield <><x><y/></x></> } \f)].filter((function ()<><x><y/></x></>/*).apply) = prop = true;");
tryItOut("switch((new Boolean())) { default: var __noSuchMethod__, __iterator__;break; case ({ __proto__: __iterator__ }) = <x/>.@foo: L:if(*) yield __noSuchMethod__\ncase ([15,16,17,18].sort(window, undefined)) && \f ''  |  /x/g : ((yield eval(\"<x/>\", try { __noSuchMethod__ =  /x/ , x::__noSuchMethod__ =  /x/g ; } catch(__iterator__) { this; } finally { const __iterator__; } )));break; export *;break; case (this.zzz.zzz).throw(<y><z/></y> <<=  /x/ \t): return;break; case *.unwatch(\"__parent__\") ? ({function::prototype: ({a2:z2})}) : prototype = <x><y/></x>: case 3: export __count__;break; ;break; case <>__count__ = [z1]</>: export *;break; yield, prop;case 4: __noSuchMethod__, prop;break; case 4: break;  }");
tryItOut("{export *; }");
tryItOut("/*for..in*/for(var __parent__ in prop) {continue L; }let prop; const __count__;");
tryItOut("/*for..in*/for(__iterator__ = (this.__defineGetter__(\"prop\", (new Function).apply)) in <x/>(__proto__)) {{__parent__ =  '' , __iterator__; } }");
tryItOut("do {with(.2)var __noSuchMethod__ =  \"\" , __noSuchMethod__ = 1.2e3; } while((--<y><z/></y>) && 0);");
tryItOut("/*infloop*/for(let __parent__; (prototype = window--); eval(\"this\",  \"\" )) {function(q) { return q; } }");
tryItOut("{break L;{} }");
tryItOut("{L:if((this.__defineSetter__(\"prop\", eval))) { if ([15,16,17,18].sort((false).watch, <x/> <= <><x><y/></x></>).valueOf(\"number\")) switch(new (function  constructor (constructor, prototype) { yield 0.1 } )(, this)) { default: break;  }} else {with([1] ? prop : <x><y/></x>)yield; } }");
tryItOut("if(<><x><y/></x></>.valueOf(\"number\").__defineSetter__(\"__parent__\", 1e81)) { if (1.2e3.isPrototypeOf( /x/ )) yield; else { }}");
tryItOut("/*infloop*/for(let __noSuchMethod__; (0/0 ? -0 : prop); Array(( '' [<><x><y/></x></>]))) {M:if(__proto__ <= @foo) {{}; } else  if ([,,z1].watch(\"constructor\", (1 for (x in [])))) export *; }");
tryItOut("return");
tryItOut("let (__iterator__) { /*infloop*/M:while(new (case [,,z1]: .__iterator__ = <x><y/></x>)([<x><y/></x> for each (prototype in <x/>)], 1e-81))/*infloop*/for(var prop; *; <><x><y/></x></>) {yield [,,z1];break ; } }");
tryItOut("L:if(window.__defineSetter__(\"__parent__\", eval)) break M; else function  __proto__ (__iterator__) { return 3 } ");
tryItOut("/*infloop*/for(var  <><x><y/></x></> prototype; ; null) {( /x/ ); }");
tryItOut("/*infloop*/for(({ __count__: __iterator__ }) = eval(\";\", <><x><y/></x></>); [1,,]; prop =  /x/ ) {return;yield  /x/ ; } const __parent__;");
tryItOut("/*infloop*/for(let ({ constructor: function::Number(<><x><y/></x></>, <x/>) ? 'fafafa'.replace(/a/g, function(y) { yield y; {}; yield y; }) : 1.3 -= 0.1, __iterator__: ({ __noSuchMethod__: [[, , ], ], __noSuchMethod__: ({ __proto__: [] }) }) }); Error(__proto__ = ({})); \n(function ([y]) { })() | <><x><y/></x></>) {this.zzz.zzz; }");
tryItOut("{yield; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in prototype) {} } const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(this in [1]) export *;");
tryItOut("let constructor = <y><z/></y>;");
tryItOut("if(\n[1,2,3,4].map()) {/*infloop*/L:do {if(<x/>) {const __parent__ = 3/0; } else  if (<><x><y/></x></>) yield  '' ; } while(((p={}, (p.z = __iterator__ = <x/>)()))); }");
tryItOut("/*for..in*/for(let __count__ in (((1 for (x in [])))((__count__ &&  '' ).propertyIsEnumerable(\"__iterator__\"))))return __parent__;");
tryItOut("L:  get __parent__ __count__ () { yield new Object((new Boolean(<x><y/></x>) >>= 033.__iterator__), *) } ");
tryItOut("/*for..in*/for(var __parent__ in (((function  __proto__ (__iterator__, function::__count__) { yield  '' .__defineGetter__(\".\", function (__iterator__) { yield; } ) } ).apply)( /* Comment */(prop.prop)[new eval(({a1:1}))] >>> __proto__.__noSuchMethod__ = __iterator__.(1.2e3) <<= ((+<><x><y/></x></>).__lookupGetter__(\"__iterator__\")))))return __count__;\n__count__;\n");
tryItOut("yield __count__.prop setter= Function;");
tryItOut("L:if(-1) { if ((-0)(<><x><y/></x></>)+=get.(*) -= eval(\"(new <x/>.throw(undefined , __noSuchMethod__)(({__proto__:  ''  })))\", ())) {if(<y><z/></y> .@*:: <><x><y/></x></>) {} else  if (__noSuchMethod__ = <><x><y/></x></>) {continue ;x::constructor; } }} else with(__proto__){(window); }");
tryItOut("(<y><z/></y>.eval(x::__count__.__noSuchMethod__)).__parent__");
tryItOut("{}");
tryItOut("if(5.0000000000000000000000) {let __noSuchMethod__ = <><x><y/></x></>, constructor = false; }L:while(((new ( /* Comment */<><x><y/></x></>, undefined))) && 0){(<x/>)\n }/*for..in*/for(const prop in (([1,2,3,4].map)(<><x><y/></x></>))){throw null;gc() }");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for(var __count__ in ((function(q) { return q; })(1.3)))\tvar __count__, __proto__ = __proto__;");
tryItOut("while((<y><z/></y>) && 0){gc() }");
tryItOut("/*infloop*/for(yield this.__defineGetter__(\"__parent__\", \tfunction  function::__iterator__ (prop, __parent__) { return 1.2e3 } ); (prop.__count__ = yield constructor); -1 .@  \"\" ) {return;/*for..in*/for(prop = * in  '' ) {; } }");
tryItOut("<zzz><y><z/></y></zzz>");
tryItOut("/*infloop*/for(const prop; (constructor = *::*); (#1# % 1.3)) {(<><x><y/></x></>).__defineSetter__ }");
