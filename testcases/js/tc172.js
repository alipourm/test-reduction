tryItOut("/*for..in*/for(<><x><y/></x></>['__proto__']\f in ((({}).hasOwnProperty)(new ( /x/ )(window, <><x><y/></x></>)))){return __count__;export setter; }");
tryItOut("throw [,]; const __parent__;");
tryItOut("/*for..in*/for(const constructor = this.zzz.zzz + new RangeError(*::*) in this) prop = #3={a:#3#};");
tryItOut("L:with({prototype: *::* = @foo})throw this;\n\n");
tryItOut("{\f__count__; }");
tryItOut("const __parent__;");
tryItOut("/*infloop*/for(Math.sin((prototype = (-1)).\fwatch(\"prototype\", Math.pow)); (__iterator__ = __count__) .@*:: --<x><y/></x>.unwatch(\"prop\"); prop.eval(-3/0)) /*infloop*/M:do {/*for..in*/for(const __iterator__ in ((function (prop, each)undefined)(<><x><y/></x></>)))var __proto__ = *::*;/*for..in*/M:for(var __parent__ = constructor = <><x><y/></x></> in this) {throw __proto__;gc() } } while(~__proto__.__count__ = __count__);");
tryItOut("with({prop: function ([y]) { }})(function  __parent__ () { yield 0x99; } ).call");
tryItOut("M:if(\r(((\n<><x><y/></x></>) .@x:: eval(\"return;\", <x/>))[( ''  ? this : false)])) {if(<x><y/></x>) export *; else  if ( \"\" ) {var __proto__ = #3={a:#3#}, __proto__ = <><x><y/></x></>;let prototype = <x><y/></x>, @foo; } else {gc() }/*for..in*/for(const prototype in ((window)(<><x><y/></x></>)))gc() } else  if (<><bbb xmlns=\"1e-81\">yyy</bbb></>) /*for..in*/L:for(let [__parent__, __noSuchMethod__] = __parent__ in  \"\" ) __noSuchMethod__");
tryItOut("L:with({prop: ((p={}, (p.z = ({}))()))}){L:if(*::*) { if (((<x><y/></x>);)) gc()} else {/*infloop*/while(null){export prototype;const prop = 1e81; } }for(let y in [5,6,7,8]) continue L; }");
tryItOut("do {{continue L; } } while((void (undefined.__lookupGetter__(\"__noSuchMethod__\")).__lookupSetter__(\"__count__\")) && 0);");
tryItOut("with({}) for(let y in [5,6,7,8]) let(__iterator__) { throw __iterator__;");
tryItOut("M:switch(eval(\"gc()\", [z1,,])) { default: ; }");
tryItOut("constructor = __iterator__;");
tryItOut("/*for..in*/for(let [constructor, __count__] = ([] > <x><y/></x>) in <x/>) {}");
tryItOut("L: export *;");
tryItOut("M:if(this) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in ((( /* Comment */null)[[11,12,13,14].sort].__proto__ = *::*).hasOwnProperty(\"prop\"))) {/*infloop*/while(__parent__+=undefined)break M;with({prototype: prototype = __count__}){<y><z/></y> } }");
tryItOut("*;\nexport prototype;\n");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in __proto__) return;");
tryItOut("if(constructor = function(id) { return id }) {yield __proto__;export *; } else __parent__ = @foo");
tryItOut("if(this.zzz.zzz) {return *::*; } else  if (<x><y/></x> .@x:: <><x><y/></x></>) {{}break ; }");
tryItOut("prototype");
tryItOut("constructor");
tryItOut("L: {{continue M; }if(<><x><y/></x></>) { if (*::*) {throw *::*;return *::*; }} else {; } }");
tryItOut("/*for..in*/M:for(__proto__ in  /x/ , ({ __parent__: [({ prop: prototype, prop: __proto__ })], __iterator__: \t({ __proto__: prop, prop: __count__ }) })) {if(3.141592653589793.valueOf(\"number\")) { if (let (prop) true) yield;} else {var prop, undefined; }/*infloop*/L:for(let __noSuchMethod__; constructor.(<x><y/></x>); (__parent__ = *) * undefined >>>=<x/>.__lookupGetter__(\"__iterator__\")) __noSuchMethod__ = window; }");
tryItOut("let(__count__) ((function(){continue M;})());");
tryItOut("return new arguments;");
tryItOut("while((__count__ = __noSuchMethod__.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) && 0)throw StopIteration;");
tryItOut("/*for..in*/for(var constructor in (prototype.prop)) {export *; }");
tryItOut("switch(null) { case 0: /*infloop*/M:for(<><x><y/></x></>; <><x><y/></x></>; undefined) { } }");
tryItOut("switch(prop.__proto__) { case __proto__ ? 0 :  for each (prop in (-0 >= __iterator__)) for (__count__(this.__defineSetter__(\"prop\", ({}).__lookupGetter__)) in @foo) for (__count__ in this): return @foo; }");
tryItOut("for(let y in [5,6,7,8]) yield <><x><y/></x></>.__lookupSetter__(\"constructor\");");
tryItOut("/*for..in*/for(const prop in this) {let __proto__ = constructor, __iterator__ = -1;(new Function(\"yield 4.;\")) }");
tryItOut("return false != *::*;");
tryItOut("gc()\n(Math.sin).call\n");
tryItOut("throw *; const __count__;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = (eval(\"(new @foo())(@foo\\n)\", <x><y/></x> .@*:: this >= <><x><y/></x></>)) in  /* Comment */[window].sort(({}).__lookupGetter__)) {{/*infloop*/for(let prototype; false; null) {export *; }yield;\r } }");
tryItOut("let(prop = null <<= <x><y/></x>, __parent__ = this) ((function(){this.zzz.zzz;})());");
tryItOut("this.zzz.zzz,  /x/ .propertyIsEnumerable(\"prototype\").throw(undefined)with(1e81[<x/>]){{} }");
tryItOut("/*for..in*/M:for(prop in this) export __count__;*::*");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__count__ = *::* in <></>) this;");
tryItOut("do {;var __parent__; } while((0x99) && 0);");
tryItOut("/*infloop*/gc()do var __iterator__, constructor; while(*::*);");
tryItOut("throw  '' \n");
tryItOut("for(let y in []);");
tryItOut("switch(((false.__defineGetter__(\"prop\", [1,2,3,4].slice)).@*)) { default: break;  }\n/*for..in*/for(var [__parent__, __noSuchMethod__] = __proto__.((.2 ^= prop.propertyIsEnumerable(\"__iterator__\"))) in yield <x/>) \f;");
tryItOut("(*);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <><!--yy--></>) while(((this.__defineSetter__(\"prop\", (1 for (x in []))) .@x:: (__parent__))) && 0)continue M;");
tryItOut("/*infloop*/do (*::*); while([z1]);");
tryItOut("break \nlet __iterator__ = ({a1:1});");
tryItOut("return;");
tryItOut("M:if(window .. new Date()) { if (-0) break L;} else do yield; while((*) && 0);");
tryItOut("with(true.eval(@foo).__noSuchMethod__ = 'fafafa'.replace(/a/g, [1,2,3,4].slice)){return window;{}\n }");
tryItOut("return (prop == 0);");
tryItOut("{/*infloop*/for(let __count__; (<x><y/></x> | *++); [15,16,17,18].map(function(y) { yield y; gc(); yield y; }, <!--yy--> = this)) {}L:if(void * |= 033\n) { if ((__proto__ ^= window)) (null);} else const __iterator__, constructor; }");
tryItOut("L:if( /x/ ) { } else continue L");
tryItOut("L: let constructor, constructor;");
tryItOut("if(<x><y/></x>.(@foo)) \t{/*infloop*/while(function ([y]) { })gc }");
tryItOut("while(((({ constructor: __iterator__, __parent__: ({ __proto__: prop }) })).isPrototypeOf(<>\t<x><y/></x></> /= 1.3)) && 0){__iterator__ = <y><z/></y>;export *; }");
tryItOut("switch(((<><x><y/></x></>.*).@foo).valueOf(\"number\")) { \fdefault: for(let y in []);break; case window = <x><y/></x>.(this): break;  }");
tryItOut("{/*for..in*/L:for(const prototype = ({a1:1}) in [z1,,]) {var __noSuchMethod__ = [1,,], __noSuchMethod__ = <x/>;export *\f; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in prop) {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/while(*::*)/*infloop*/L:for(const ({ prototype: prototype, __parent__: delete }) = (1e4)[constructor.__noSuchMethod__]; <><x><y/></x></>.__defineSetter__(\"prop\", (function(y) { yield y; __iterator__ = 0x99, __count__;; yield y; }).call); this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)) yield <><x><y/></x></>;");
tryItOut("with(__iterator__.(<><x><y/></x></>(<x><y/></x>,  /x/g )['fafafa'.replace(/a/g, (1 for (x in [])))]) ?  /* Comment */false.__proto__ : __noSuchMethod__ = @foo.unwatch(\"prop\") >>> new (*::*)((delete [z1])))if(null) {with(<x/>)gc() } else  if ({} > ({prototype:  /x/g ,  set __noSuchMethod__() { return undefined }  })) (true); else {\treturn;; }");
tryItOut("{if(__count__ .. <y><z/></y>) export each; else  if ((__iterator__)) {var let; } }");
tryItOut("L:if((\n*)) { if (<bbb xmlns=\"1e81\"><x>\t<y/></x><x><y/></x><ccc:\fddd></ccc:ddd></bbb>.(( /x/g  % true))) {break M;export __noSuchMethod__; }} else {export *; }");
tryItOut("M:if(null) return (-0); else  if ((new (throw [])())) continue ;");
tryItOut("M:if(eval([__iterator__], <><ccc:ddd><!--yy--></ccc:ddd></>)) const prototype; else  if (yield __parent__.prop) continue M;");
tryItOut("while((<x><y/></x>.prop ? (__parent__) : <x/>) && 0){throw <y><z/></y>;[1,2,3,4].map }");
tryItOut("with(undefined <= <x/> ? <x><y/></x> : function(id) { return id }\n){{}L:if(*::* || <x/>) { if (<x/>) {yield; }} else {yield; } }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; <><x><y/></x></>; 1e4) {export constructor; }");
tryItOut("/*for..in*/for(const <><x><y/></x></>//h\n > (0/0 >=  /x/ )['prototype'] in (( /x/ )([<zzz>(false++)</zzz>])))/*infloop*/M:for(__count__; 1e+81;  for (__iterator__ in __count__)) {continue ;var __iterator__ = ({}), prop = undefined; }");
tryItOut("L:if() { if (eval(\"\", __iterator__ = function::prototype.hasOwnProperty(\"__parent__\"))) L:if(<><x><y/></x></>) {yield <y><z/></y>; } else return;} else if(0.1) break L; else {var prop = <x/>, constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in this) {if(__proto__) throw true; else  if (@foo) throw window; else {const __iterator__ = true, __proto__ = <><x><y/></x></>; }; }");
tryItOut("/*for..in*/for(const __noSuchMethod__((<x><y/></x>.__lookupSetter__(\"prototype\"))) in (((new Function(\"throw prop;\")))((({__count__: __proto__ - []})) ? false : let (__iterator__, __iterator__) <x/>))){ }");
tryItOut("/*for..in*/M:for(var (window)(window) in constructor) __proto__, __parent__ = <><x><y/></x></>;");
tryItOut("L:if(prop = @foo) {export __proto__;; } else  if (<><x><y/></x></>.valueOf(\"number\")) yield  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in __count__) continue ;/*infloop*/for(let ({ __iterator__: prop }) = this.__defineGetter__(\"__proto__\", Math.pow)\n; prototype.__iterator__; #0=prototype = <x><y/></x>) yield;");
tryItOut("let(__proto__ = [], prototype = <x><y/></x>) ((function(){yield 1e4;})());");
tryItOut("with/*\n*/({prototype:  /x/g , new (gc)(<x><y/></x>, window)}){L:if( /x/g ) (({a1:1})); else  if (1.3) function  __count__ (__noSuchMethod__) { return @foo } ({}).hasOwnProperty }");
tryItOut("/*infloop*/do gc() while(true)");
tryItOut("switch(__count__ = -[__noSuchMethod__].some(function(y) { yield y; break ;; yield y; })) { default: break; case function(q) { return q; }: /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in -1) export function::get; }");
tryItOut("/*infloop*/while( /* Comment */ \"\" )gc()");
tryItOut("return (function (constructor: <y><z/></y>) { {} } )().@foo;");
tryItOut("with({\t__parent__: window[(* if ([1,,]))]}){gc()(3.141592653589793); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__(('fafafa'.replace(/a/g, Math.sin))) in (<><x><y/></x></>.__defineSetter__(\"__count__\", [1,2,3,4].slice))) {return <y><z/></y>;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const @foo in constructor.__noSuchMethod__ getter= function (prop, function::__proto__) { yield [,,z1] } .eval(true)) /*for..in*/for(const [prop, __iterator__] = [[]] in <><x><y/></x></> % undefined) {break ; }");
tryItOut("L:switch(prototype << <bbb xmlns=\"[] <= prototype.unwatch(\"__count__\")\"> </bbb>) { default: with({}) constructor = __noSuchMethod__;case #2=false: break; case ({constructor: 1e81}): /*infloop*/M:for(var __iterator__; ((window)(prop)); <x/>) /*infloop*/L:for(const __proto__; *::*; constructor) {export __noSuchMethod__;yield {}; }break;  }");
tryItOut("with(@foo)return window;");
tryItOut("/*for..in*/for(let [constructor, ({ __count__: constructor })] = new 0/0(*::* ?  /x/g  : __noSuchMethod__, *) in [this for each (__proto__ in [[1]])]) {export constructor; }");
tryItOut("/*infloop*/for(let __count__ = function::__proto__ = -0++; __iterator__ = <x/>; ({}) >> (__parent__.prototype\f)) /*for..in*/for(__noSuchMethod__ in this) yield <x/>;");
tryItOut("if(new (*::*)(<x><y/><x>)) /*for..in*/for(const constructor = (let (constructor) <x/>)(yield false, <x><y/></x>) in <y><z/></y>) {do ; while((<x/>) && 0); } else  if ( /x/  >> [z1]) let __count__ = (new <x><y/></x>());");
tryItOut("/*infloop*/for(const __iterator__ = 1e+81.prop = *::*; constructor = <x/>; function(id) { return id }.@*) {gc()yield *::*; }");
tryItOut("while(((({__parent__ getter: function () { return  /x/g  } , prototype getter: (<x/>).watch }))) && 0){do {var __parent__;return; } while((this.zzz.zzz) && 0); }\n");
tryItOut("\tlet (constructor = (-1), __parent__ = 5.0000000000000000000000) { prototype = *; }");
tryItOut("M:while((__iterator__) && 0){let __count__ = *;export __noSuchMethod__; }");
tryItOut("let __parent__;gc const x::prototype;");
tryItOut("with((false -= [,]))let __proto__, __proto__ = this;");
tryItOut("/*infloop*/while(__noSuchMethod__){var __parent__ = <><x><y/></x></>, constructor;return; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; ((uneval(<><x><y/></x></> @ -0))).eval(*.__defineGetter__(\"__noSuchMethod__\", 'haha'.split)); <><><!--yy--></></>) {{}<x><y/></x> }");
tryItOut("/*for..in*/M:for(var prop in ((/a/gi)(false.@*))){throw <><x><y/></x><\f/>; }");
tryItOut("/*for..in*/for(let __count__ in  \"\" ) {gc() }");
tryItOut("{(0x99); }");
tryItOut("break ;");
tryItOut("/*for..in*/for(var null.__lookupGetter__(\"__noSuchMethod__\").__noSuchMethod__ in (uneval(([15,16,17,18].filter(({}).__lookupGetter__, false))))) /*for..in*/L:for(let __iterator__ in @foo)  const prop;");
tryItOut("L:if([constructor, , ] = __proto__(window)) {function  __proto__ (__parent__, __noSuchMethod__) { yield [z1,,] }  }");
tryItOut("do {break L; } while(((eval).call(<x><y/></x>, try { export __noSuchMethod__; } catch(__iterator__ if 1.2e3) { let __noSuchMethod__; } \rcatch(__count__) { 0/0; } , <x><y/></x>)) && 0);");
tryItOut("if(@foo) { if (__noSuchMethod__ = true) /*for..in*/for(__parent__ in ((new Function)(this = 1e4)))const __count__ = <><x><y/></x></>; else M:if( /x/  < prototype) {; } else return;}");
tryItOut("if(Function(*::*)) { if ((p={}, (p.z = (*)(undefined))())) __proto__ = __noSuchMethod__.__count__ getter= gc} else M:switch( /x/g  :: window) { case 1: break;  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in __noSuchMethod__) {gc() }");
tryItOut("__proto__\n");
tryItOut("with({__iterator__: yield function ([y]) { }})yield ({a1:1})\n(__proto__);");
tryItOut("M:switch(window) { default: const __parent__ = 0.1, getter;break;  }");
tryItOut("/*for..in*/{}for(var [__proto__, prototype] = <><x><y/></x></> in __parent__) {break L; }");
tryItOut("/*for..in*/L:for(var [__parent__, __count__] = new (function(y) { yield y; return  \"\" ;; yield y; })((-1), undefined) in __parent__) #1#");
tryItOut("let((new Function((eval(\"yield;\", null)), null)).constructor, getter) ((function(){yield [,].valueOf(\"number\");})());");
tryItOut("with((constructor-= '' ))(@foo);");
tryItOut("/*infloop*/for(var ({ prototype: ({ __parent__: [__count__, ], prop: ({ __proto__: __iterator__ }) }), __proto__: ({ prop: ({ prototype: ({ __noSuchMethod__: prop.__parent__ }) }) }) }) = (new [1,2,3,4].map()); <><xxx>{__proto__}</xxx></>((p={}, (p.z = [])()), [window for each (__parent__ in  '' )]); (function  prop (__iterator__) { yield null } ).call(let (__proto__ = <><x><y/></x></>, __proto__) undefined, 3--, false)) {throw prop;var  set __parent__(__noSuchMethod__) { export __count__; } ; }");
tryItOut("export __parent__;\nthis\n");
tryItOut("/*infloop*/for((({prototype: (( ''  if (5.0000000000000000000000))), __noSuchMethod__: <><x><y/></x></>.valueOf(\"number\") })); window; (++*.throw( '' ))) {/*for..in*/for( /x/g  in [[]]) {__proto__ = ({a2:z2}); }{{var __count__ = undefined, __noSuchMethod__; \"\" ;\t } } }");
tryItOut("/*for..in*/for(var [__parent__, ({__count__: @foo.__lookupSetter__(\"prop\"), function  prototype () { return \n({ set: prototype })-=({__count__: __proto__ = __iterator__ }) }  })] = (eval(\" { let __proto__; }  = <><x><y/></x></>, constructor =  '' ;\", <y><z/></y>)) in (new Math.sin([11,12,13,14].map.throw(<x/>.unwatch(\"__parent__\"))))) let (__count__, __noSuchMethod__) {  }");
tryItOut("M:with({__parent__: @foo})export prototype;");
tryItOut("try { with({}) let(prototype, __noSuchMethod__ = ([,,z1].hasOwnProperty(\"__iterator__\"))) ((function(){__parent__ = constructor;})()); } finally { let(__parent__ = (((uneval( \"\" ))) ? <y><z/></y> : undefined)) ((function(){let(prop = prop = (function ([y]) { })(), [, ] = ( '' .yoyo(<y><z/></y>))) { this.zzz.zzz;})()); } ");
tryItOut("/*for..in*/M:for(const __parent__ in __noSuchMethod__ = window) {export __iterator__; }");
tryItOut("/*infloop*/for(<x/>; __noSuchMethod__; 1e-81) return;");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>.((__count__.watch(\"__noSuchMethod__\",  \"\" )))) { if ((eval(\"window\", <x/>)) |= ({a1:1}).@* for each (prototype in this.zzz.zzz)) if((new ((({}).__lookupGetter__)(@foo)).hasOwnProperty(\"__count__\")())) { if (prototype.__count__) {prototype = <><x><y/></x></>;throw this; } else gc()} else {/*for..in*/for(var [__proto__, window] = 033 in __count__) {return; }var prototype, __count__ = true;\nexport __count__;\n }}");
tryItOut("(function::__iterator__);\ndo {yield 0;\n(this).watch\f\n } while((@foo) && 0);\n");
tryItOut("/*infloop*/while(*)1e4;");
tryItOut("{/*for..in*/for(const constructor in  /x/ ) return; }");
tryItOut("let __proto__, __proto__ = 0.1;");
tryItOut("return *.__defineSetter__(\"constructor\", *::*);");
tryItOut("L:  if (new (eval)()++)");
tryItOut("switch([[z1] ? <><x><y/></x></> : prototype].map( \"\" )) { case 5: break; default:  break; /*infloop*/for(var __iterator__; __iterator__ , new Function(); (const __proto__, __iterator__)) {}break;  }");
tryItOut("with({prop: ({ get __parent__(__proto__, constructor) { yield <><x><y/></x></> }  }).isPrototypeOf( /x/g  , false)})prop.prototype = __noSuchMethod__;");
tryItOut("M:with({__noSuchMethod__:  /x/ })eval");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <><x><y/></x></>) {return [z1,,]; }");
tryItOut("{let __count__ = , __proto__ = 1e4;yield __proto__; }");
tryItOut("switch(__proto__ =  \"\" [(eval(\"*::*\", [z1]))]) { case *: /*infloop*/L:for(const ({ prototype: __proto__ }) = true ? * : <><x><y/></x></>; (__parent__|=window); const function::constructor) ;default: do {function(q) { return q; }return [z1,,]; } while((<x><y/></x>) && 0);break; case 1: var __iterator__, __parent__;/*infloop*/do {gc()( \"\" ); } while((__noSuchMethod__));break; case (prototype = let (constructor = <x/>) (__parent__+=<><x><y/></x></>)): if(*::* /= [z1,,]) {throw *::*; } else {([z1]);yield <><x><y/></x></>; }let(__iterator__ = <><x><y/></x></>, __parent__ = @foo) { {}break; break; case ((function () { __noSuchMethod__; } (function ([y]) { })).yoyo(*\n)) == *::*.__count__: for(let y in []); }");
tryItOut("/*infloop*/for(var __count__; ({ get __noSuchMethod__ constructor () { return <y><z/></y> } , prop: undefined }); 1e4) {gc()<><x><y/></x></>; }");
tryItOut("M:switch((new constructor.__noSuchMethod__())) { case 7: <x><y/></x>;default:  }");
tryItOut("if(#1=({constructor: (eval(\"const prop =  /x/ ;\", 0.1))})) { if (return  /x/g .yoyo(<xxx {__proto__}={(continue M)} />.(( '' .watch(\"__parent__\", ([,]).watch) /= window(<><x><y/></x></>, <><x><y/></x></>))()))) {__count__; const __proto__;\n(1 for (x in []))\n{export *; } } else {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in prop) throw window;/*infloop*/do throw window; while(1e4 !== <x><y/></x>); }}");
tryItOut("M:if(#2=({__noSuchMethod__: [<y><z/></y>.watch(\"prop\", ( '' ).__defineSetter__) for (prototype in window) for (prop in <x/>)]})) {/*for..in*/for(var __parent__ in <x/>) {yield @foo;export prop; } } else  if (({}).@*) const __proto__, __iterator__ = <x><y/></x>\n<x/>");
tryItOut("return;");
tryItOut("{yield; }");
tryItOut("/*for..in*/for(let [let, __proto__] = <x><y/></x>(<x/>, this) in (#1=<><x><y/></x></>).__defineGetter__(\"__count__\", (prototype).__defineSetter__)) {/*for..in*/for(let [__parent__, constructor] = 'haha'.split in __parent__) yield [z1]; }");
tryItOut("throw StopIteration;");
tryItOut("prototype, prototype = {}\n");
tryItOut("{export __count__; }");
tryItOut("this.zzz.zzz;");
tryItOut("do {{}export prop; } while((__noSuchMethod__ = 5.0000000000000000000000) && 0);");
tryItOut("if( '' ) (undefined); else  if ((new Boolean())) {return true;{{} } } else {/*for..in*/L:for(var <y><z/></y>.constructor in ((function (constructor, __proto__) { false; } )(prop + this)))let __proto__;/*for..in*/for(const prototype(<><x><y/></x></>) in <x><y/></x>) {export *;__parent__ = null } }");
tryItOut("throw StopIteration; const prop;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/'forvar __iterator__ in ");
tryItOut("L:if(function(id) { return id }) {@foo } else  if (__parent__ = @foo) continue ;");
tryItOut("{/*infloop*/for(const ({ __proto__: ({ prop: prop }), __parent__: __count__ }) = (({__iterator__: false, constructor: window })); constructor = (); (eval(\"<><x><y/></x></>\", <x/>))) (@foo); }");
tryItOut("/*infloop*/M:for(var ({ prototype: __iterator__, __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: constructor, function::prototype: prop }), constructor: ({ __count__: ({ constructor: __parent__, constructor: __noSuchMethod__ }) }) }) }) = (); ((({__proto__: *, prop: <><x><y/></x></> })) | __iterator__ = true); true) {/*for..in*/M:for(const __count__ in ((function  prop (prop) { yield <x><y/></x> } )(-1e+81 for (constructor in 1e-81))))return;\nexport __parent__;\n{} }");
tryItOut("/*infloop*/while(Boolean( /x/ , [z1,,]))export *;");
tryItOut("{(@foo); }");
tryItOut("/*infloop*/for(prop; 'fafafa'.replace(/a/g, (<><x><y/></x></> if ((function ([y]) { })()))); this.__lookupGetter__(\"prototype\").yoyo( /* Comment */({__iterator__: ( /* Comment */1.3) }))) /*infloop*/for(((__proto__ = <><x><y/></x></>) if (#1#)); <x/>; constructor.prop getter= 'haha'.split) {const __count__ = *::*; }");
tryItOut("L: gc()");
tryItOut("if(__noSuchMethod__) yield; else  if ((__noSuchMethod__)\n) export function::__count__; else {gc(); }");
tryItOut("/*for..in*/prototype");
tryItOut("export *;");
tryItOut("let (__noSuchMethod__) {  }");
tryItOut("if([1,2,3,4].slice) { if (<><x><y/></x></>.isPrototypeOf((-0))) {yield;yield prop; }} else {(1.3);return <y><z/></y>; }");
tryItOut("let(__parent__) { throw StopIteration;");
tryItOut("/*for..in*/for(const return <x><y/></x>; in ((function  __noSuchMethod__ ()[prototype = <y><z/></y>])(4. / prop))){gc()if(new <x/>()) {export *; } else  if (#1=[#1#].prototype = 0x99) throw  \"\" ; }");
tryItOut("/*infloop*/do {(1e4);export *;\t } while([,,]);");
tryItOut("if(gc()) {let prop = this, prop = <><x><y/></x></>; } else  if (([[,,z1].prop for each (__noSuchMethod__ in -0)])) return <><x><y/></x></>;");
tryItOut("for(let y in [5,6,7,8]) export __count__;");
tryItOut("/*infloop*/M:do {throw <x/>;const __parent__, __iterator__; } while(5.0000000000000000000000 ? <y><z/></y> : window);");
tryItOut("if(<bbb xmlns:ccc=\"([]) = [<x/>].map(function(q) { return q; })\"><ccc:eee></ccc:eee></bbb>) {/*infloop*/for(const try { {} } catch(__proto__ if (function(){{}})()) { export __iterator__; } catch(__proto__ if <><x><y/></x></>) { {} } catch(__parent__ if \t(function(){{const prototype, prop =  /x/g ; }})()) { const __proto__, __iterator__ =  /x/ ; } catch(function::prop) { gc() } finally { function(y) { yield y; {}; yield y; } } ; ((Date(<x><y/></x>) ^ <x/> - (function ([y]) { })()));  /x/g ) {(<x/>); }\f } else  if (<x><y/></x>.(<><x><y/></x></>).watch(\"__iterator__\", (this).watch)) {}");
tryItOut("gc()\n");
tryItOut("/*infloop*/while((__noSuchMethod__)(0.1) = (Function().__count__)\f)with({constructor: })return window");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in  /x/ ) {prototype = this; }");
tryItOut("let (__noSuchMethod__ = ({__noSuchMethod__: window, __iterator__ setter: <x><y/></x> })) { with({__iterator__: eval(\"<x/>\", null)}){throw [z1,,];{} } }");
tryItOut("/*infloop*/while(<><x><y/></x></> ? 1e-81 : <x><y/></x>)L: *::*");
tryItOut("L: return window;");
tryItOut("M:if(([[1]].isPrototypeOf(<x><y/></x>))) {L:with({__iterator__: <><x><y/></x></>})(3).__defineSetter__ }");
tryItOut("/*for..in*/for(prototype in __proto__) yield window;");
tryItOut("yield;\n[[]];\n");
tryItOut("break M\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ([1])(true.eval(true)) in (__proto__.__iterator__ setter= /a/gi)) {prop, __parent__\nreturn;return; }");
tryItOut("with(let (__count__) <x/>){return;function (constructor, __iterator__) { const __iterator__ =  '' ; }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in (bbb xmlns:ccc=\"__parent__><:eee></:eee><(//bbb{gc() } >.(*::*.__iterator__ = <x/>))) {export *; }");
tryItOut("do export prop; while((({})) && 0);");
tryItOut("/*for..in*/M:for([__count__, __proto__] = [11,12,13,14].map in *) {var __noSuchMethod__ = window, __iterator__ = <><x><y/></x></>;export *; }");
tryItOut("{/*infloop*/L:for(let __count__ = <x><y/></x>;  set __count__ __noSuchMethod__ ()function ([y]) { }; <><x><y/></x></>) (eval).call }");
tryItOut("L: {<><x><y/></x></>; }");
tryItOut("do do (__proto__); while((<x><y/></x> /= @foo) && 0); while((eval(\"throw *::*;\", <x><y/></x>)--) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (yield undefined)) __count__;");
tryItOut("/*infloop*/for(__noSuchMethod__ = eval(\"yield (function ([y]) { })();\", ((function (__count__, prop) { return __iterator__ } )(#1=[#1#], window))); [@foo]; (new RangeError())) {constructor }");
tryItOut("return [,]");
tryItOut("while(((function () { yield  ''  } )()) && 0){@foo }");
tryItOut("with({}) gc()");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (-true) in <x><y/></x>) {export window;[[]]; }");
