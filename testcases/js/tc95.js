tryItOut("/*for..in*/for(var __iterator__ = 5.0000000000000000000000 for each (prototype in __iterator__) .. <xxx>{x::__noSuchMethod__}</xxx> in [0x99]) function  prop (constructor) { yield <x><y/></x> } ");
tryItOut("/*infloop*/do {gc()({ __count__: prop }) } while(__iterator__.__count__ = RangeError());");
tryItOut("let each =  \"\" ; const constructor;");
tryItOut("\fif(({__iterator__: #1#}) ^= <x><y/></x> += <x><y/></x>) {export *;export function::__count__; } else {__iterator__, prop = window;let __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var window in <x><y/></x>) \n");
tryItOut("while((({ set __proto__() { if(1.2e3) { if (undefined) throw [,,z1]; else yield;} }  })) && 0){switch(<><x><y/></x></>) { case 4: break; break; case this: function  constructor (__parent__) { __count__ = 4., prop =  /x/ ; } break; default: break; case <x><y/></x>: break; case 9:  } }");
tryItOut("{/*infloop*/L:do throw <><x><y/></x></>; while(*::*);if((yield @foo)) { if (\ntrue) {gc() }} else 3; }");
tryItOut("/*for..in*/M:for(const prototype in ((Function)(1e81))){export *;function(q) { return q; } }");
tryItOut("while((this.zzz.zzz) && 0)<><ccc:ddd><!--yy--></ccc:ddd></>");
tryItOut("/*infloop*/M:for(({__proto__: prop}); RangeError(delete = ({}), true); <x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")) yield;");
tryItOut("if([(-1) for (__parent__ in *)]) {{} } else {yield; }");
tryItOut("M:with(<> for each (prop in (-1))</>);");
tryItOut("if(__parent__.((p={}, (p.z = <><x><y/></x></>)()))) {yield; } else if(<y><z/></y> .@  \"\" ) {export *; } else  if (<x/>) {return;var prototype; } else ;");
tryItOut("throw StopIteration;");
tryItOut("yield ((__parent__ = (function ([y]) { })())(window == constructor) = <><x><y/></x></> .@x:: <x><y/></x>.watch(\"__noSuchMethod__\", Math.pow).yoyo(<x><y/></x>--.propertyIsEnumerable(\"__noSuchMethod__\")));");
tryItOut("if((yield  /* Comment */window))  else  if (yield <x><y/></x>.yoyo( /x/ ) :: [11,12,13,14].sort.yoyo(__proto__ = (<><x><y/></x></> .@ prototype > *::*.__iterator__)).prototype) {let function::__parent__, __count__;var prop = 1.3; } else {L: throw <x/>;throw *; }");
tryItOut("do {yield; } while(( '' ) && 0);");
tryItOut("with((this.__defineSetter__(\"__count__\", <y><z/></y> ^=  \"\" ))){ }");
tryItOut("M:with({__parent__: <y><z/></y>.eval(*::*)}){ }");
tryItOut("{throw <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in null) {continue ; }");
tryItOut("/*infloop*/for(new (1 for (x in []))(Array( '' ), <x><y/></x>\n); <y><z/></y>; window in <y><z/></y>) {(this); }");
tryItOut("/*for..in*/L:for(var [constructor, __parent__] =  in this) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 3.141592653589793) {1e81; }");
tryItOut("for(let y in [5,6,7,8]) yield window;");
tryItOut("/*for..in*/for(let __proto__ = try { return undefined; } catch(__noSuchMethod__) { return <><x><y/></x></>; } finally { yield; }  in false) var __parent__ = <>__proto__, __proto__ = window</>, __noSuchMethod__ = 3;");
tryItOut("__proto__ = __proto__;");
tryItOut("switch(((p={}, (p.z = 1e+81)()))) { case 8: break; case 0: default: case #1=<><x><y/></x></>: break; var __proto__; }");
tryItOut("M:with(prototype)throw  /x/ ;");
tryItOut("/*for..in*/for(__parent__ in ((<x><y/></x>)(*)))yield;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; <x><y/></x>; @foo) {\rreturn;return *; }");
tryItOut("/*for..in*/for(let __count__ in ((function (__noSuchMethod__, __parent__) { return <x><y/></x> } )(constructor)))yield;");
tryItOut("let(__iterator__ = <x/>, ({ prototype: ({ __proto__: prototype, __parent__: __iterator__ }) }) = *.@foo.prototype = eval(\"gc()\", __noSuchMethod__)) { let(constructor) ((function(){with({}) with({}) yield  '' ;})());");
tryItOut("/*for..in*/for(constructor( /x/ ) in (([1,2,3,4].slice)(prop = window)))continue M;");
tryItOut("with( \"\" ){}");
tryItOut("L:with({prototype: (#2=({prop: <x><y/></x>}).throw((constructor >>>=@foo))).throw(__noSuchMethod__)}){do {prototype = window, __count__;return ({}); } while(([,]) && 0);(null).watch }");
tryItOut("prototype");
tryItOut("throw StopIteration;");
tryItOut("L: 0;\n/*infloop*/for(constructor; @foo; 4.) {return arguments; }\n");
tryItOut("L:if(3/0) <><x><y/></x></>; else  if ((eval(\"throw 033;\", <x><y/></x>))) {} else {; }");
tryItOut("yield window;");
tryItOut("if((Error()) ? constructor+=<><x><y/></x></> : (p={}, (p.z = <y><z/></y>)()) && <x><y/></x>.(prop).isPrototypeOf((@foo).watch)) { if (__proto__.constructor) {yield <><x><y/></x></>;(<x><y/></x>); }} else [1,2,3,4].map");
tryItOut("while((arguments) && 0){continue ; } const __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ __proto__: prototype }) = (*::* ? false : constructor); this >> \f<x><y/></x>; ((null).__defineSetter__)(<><x><y/></x></>, -1)) this;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in -0) {throw <><x><y/></x>/*\n*/</>; }prototype = null");
tryItOut("/*for..in*/for(__count__ = new (this)() in #1#) {gc()gc() }");
tryItOut("if(__proto__) { if (true) {export __noSuchMethod__;var __proto__ = <x/>, __noSuchMethod__ = 4.; } else return <><x><y/></x></>;}");
tryItOut("with({}) *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in [,,]) {(*::*).watchreturn true; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <x><y/></x>) ( '' );");
tryItOut("if( '' ) { if (this) {export __noSuchMethod__; } else {prop;return window; }}");
tryItOut("var __iterator__;");
tryItOut("L: {throw <x/>;return  \"\" ; }");
tryItOut("let (__proto__ = constructor =  \"\" .valueOf(\"number\"), __parent__) { /*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></>['constructor'] in <x><y/></x>) {yield;; } } const prop;");
tryItOut("if((let (__proto__ = false) <x><y/></x>['__parent__']-=(<x><y/></x>)[function(id) { return id }])) { if (prototype.(\n033).__defineSetter__(\"constructor\", function(q) { return q; })) {/*for..in*/for(var ({ __noSuchMethod__: __iterator__, constructor: __parent__ }) in <x><y/></x>) {return; } }} else {return  /x/ ;break L; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in (function (<><x><y/></x></> <= window(this), let)(new Iterator(__parent__,  '' ))())) throw __count__;");
tryItOut("let(__count__, __count__ = [__parent__, , __parent__, constructor, __noSuchMethod__] = new ((-3/0.eval(prototype)))((#1=__parent__))) { Math.pow");
tryItOut("with({prop: ([( \"\" .__lookupSetter__(\"__parent__\")) for (__iterator__ in this) for (prop in [z1,,])])})export __parent__;/*\n*/");
tryItOut("if(@foo) {{}export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(this.__defineSetter__(\"prop\", function  __parent__ () '' ) % <x/>) (null);");
tryItOut("M:do yield; while(() && 0);");
tryItOut("let (getter, let) { M:if(<x><y/></x>) {let __count__, prop = this; } }");
tryItOut("/*infloop*/for(const prototype = <><x><y/></x></> >>= undefined; this.__defineGetter__(\"__parent__\",  /x/g ); <><x><y/></x></>.throw(*)) { }");
tryItOut("<><x><y/></x></> != @foo['prop'] = __noSuchMethod__;");
tryItOut("");
tryItOut("L: {return;break ; }");
tryItOut("(function(y) { yield y;  /x/g ;; yield y; }).call");
tryItOut("throw [,];");
tryItOut("(true)\nif([z1,,]) { if (null / #3={a:#3#}) {const __parent__ = window; }} else {({a2:z2}); }");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ in *) (<><x><y/></x></>)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ({a2:z2})) ");
tryItOut("yield yield <><x><y/></x></>;");
tryItOut("M:if(<x/>) { if ( /x/g ) export __proto__;} else {}\n");
tryItOut("/*for..in*/for([__iterator__, __parent__] = ((new Function(\"yield;\"))).call(<y><z/></y>, )\f in window) /*infloop*/for(var __noSuchMethod__; this; -0\t) export *;");
tryItOut("let(prop, constructor) { gc()");
tryItOut("L:do /*for..in*/for(__count__ in (((1 for (x in [])))((prototype.prototype = <x/>\f.yoyo((<><x><y/></x></> || <y><z/></y>).yoyo(033))) :: ))){yield  /x/g ;\nlet __count__, __proto__;\n } while((((__count__.__iterator__ = (-1) *=  \"\" ).__defineSetter__(\"prop\", (this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))))))) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = () in [11,12,13,14].sort.__defineGetter__(\"prototype\", ({}).hasOwnProperty)) yield;");
tryItOut("{var prototype = false;; }");
tryItOut("M:if(__proto__.( /x/g )) { if (\nnull) {continue M; } else {export __noSuchMethod__; }}");
tryItOut("break ;");
tryItOut("let (constructor) { continue L; }");
tryItOut("L: const prototype = @foo;");
tryItOut("if((new Function(\"export __parent__;\")).watch(\"__iterator__\", Math.pow)) L: {break M;var prototype, __parent__; }/*\n*/");
tryItOut("/*infloop*/M:do {[1,2,3,4].slicefunction ()({a2:z2}) } while(true);//h\n");
tryItOut("let (__count__) { /*for..in*/for(const [prototype, __proto__] = ({({ __iterator__: prop, prototype: ({ prototype: __iterator__, prototype: __parent__ }) }) getter: this.__defineSetter__(\"__parent__\", [1,2,3,4].map) }) in 'fafafa'.replace(/a/g, /a/gi)) M:while(( /x/ ) && 0)export *; }");
tryItOut("L: {__iterator__; }");
tryItOut("if(<x/>) { if (__count__) {throw <x><y/></x>;gc() } else (1e-81);}");
tryItOut("const prop;\ngc()\n");
tryItOut("(<x/>);");
tryItOut("if(0/0) {(*);throw <y><z/></y>; } else export __parent__;");
tryItOut("throw __iterator__;");
tryItOut("if(((function  prop (__count__, constructor) { yield prop } ).apply).call(<x><y/></x>,  /x/ , this)) { if (__count__.hasOwnProperty(\"constructor\")) if(1.2e3) let __noSuchMethod__, function::function::__count__ = *::*; else {\t }}");
tryItOut("/*for..in*/for([prop, prop] = [,,z1] in null) yield;");
tryItOut("/*infloop*/while(window){(<x><y/></x>); }");
tryItOut("/*infloop*/while((<x><y/></x>)[__noSuchMethod__]){continue L;prop; }");
tryItOut("this");
tryItOut("if(((function (__noSuchMethod__, constructor) { return <x><y/></x> } )(1e4))) ; else yield <><x><y/></x></>;");
tryItOut("with({yield: ({})}){let prototype = <><x><y/\t></x></>, __parent__ =  '' ; }");
tryItOut("if(@foo[*::*]) gc()");
tryItOut("/*for..in*/for(const __iterator__ = (#1=[ /* Comment */this].__lookupGetter__(\" '' \")) in true) gc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in __count__ = <y><z/></y>) if(this) {gc()function (__noSuchMethod__, constructor\n) { return __parent__: null }  } else {var __count__ =  /x/g ; }");
tryItOut("L: {/*for..in*/for(const __noSuchMethod__ in (-0)) {__parent__ = prototype;throw 1.2e3; } }\n/*for..in*/for(__count__ = (__parent__ = prop) += [z1].yoyo(<y><z/></y>) in __proto__) {}");
tryItOut(";");
tryItOut("let(prop = [z1,,] === *::*) ((function(){__noSuchMethod__ = [], prop;})());");
tryItOut("{}");
tryItOut("{if(new Array(<x/> instanceof @foo)) var prop = *::*, __parent__ = .2; else  if (\r<x><y/></x>.(1e+81)) {(<y><z/></y>); } }");
tryItOut("/*for..in*/for(var prototype = prototype in *) const __parent__ = 0/0;");
tryItOut("/*infloop*/M:for(\t<y><z/></y>; <x><y/></x>; window) {(1 for (x in []))prop = <x/>; }\n");
tryItOut("let (constructor = undefined) { export __parent__; }");
tryItOut("do /*infloop*/do {__proto__ = window, constructor =  '' ; } while([1,,] >= <><x><y/></x></>); while(((<x><y/></x>.(5.0000000000000000000000)) = (function(y) { yield y; continue L;; yield y; }) / <x><y/></x>) && 0);");
tryItOut("if( /* Comment */__proto__) let constructor, __iterator__ = <><x><y/></x></>; else  if (((new (Function)()) for each (__parent__ in (yield this)) for (<x><y/></x> in try { yield <x/>; } finally { yield; } ))) const constructor, __iterator__ else {while((window) && 0){var __parent__;export *; } }");
tryItOut("let (prop, __noSuchMethod__ =  '' ) { /*infloop*/L:while( \"\" ){{} } }");
tryItOut("with({prototype: *::*.__count__}){if((prop = 1e-81) !== __proto__ = <x/>) { if (!new function (prop, __noSuchMethod__) { return null } (<x><y/></x>)) {yield; }} else {__count__\nexport *; } }");
tryItOut("let( \"\"  = eval(\"M:with((function(q) { return q; })())var __count__, prototype =  \\\"\\\" ;\", [prop, prop, __count__, prop, ] = <x><y/></x>).hasOwnProperty(\"prototype\"), __proto__) ((function(){yield new function () { return * } (*, constructor) && (yield this.__defineGetter__(\"prop\", (1 for (x in []))).prop);})());");
tryItOut("with([11,12,13,14].map)yield;");
tryItOut("/*infloop*/for(let ({ __count__: ({ __parent__: constructor, prop: __parent__ }), __noSuchMethod__: [] }) = false.__defineSetter__(\"prototype\", (this).watch) <= <><x><y/></x></> :: window >= let (__count__ = null) 1e-81; [, , ] = <x><y/></x>; <x/>++--) let __count__; const __noSuchMethod__; const __parent__;");
tryItOut("case 6: (<x><y/></x>);break; default: break; __noSuchMethod__ =  '' ;case 8: return <><x><y/></x></>;case  /x/ : break; case 0: return;break; [,,z1];case 3: *::*;break; <x><y/></x>\nreturn <x><y/></x>;\n");
tryItOut("M:if(getter &= <x><y/></x>) yield __noSuchMethod__; else  if ((new new Function(<x><y/></x>)).propertyIsEnumerable(\"__noSuchMethod__\")) {continue M;{\f} }");
tryItOut("export *;");
tryItOut("for(let y in []);");
tryItOut("if((({__parent__: true }))//h\n.unwatch(\"__proto__\")) {;\nthis;\n } else  if (({a1:1})++) if(__proto__) {( \"\" ); } else {const constructor = @foo, __parent__ = <><x><y/></x></>; } else {(null).watch }");
tryItOut("return;");
tryItOut("do yield; while((__iterator__ = this.__defineGetter__(\"__iterator__\", function(q) { return q; })) && 0);");
tryItOut("M:if(<x/>) return;");
tryItOut("if(<><x><y/></x></>) { if (/a/gi(<><x><y/></x></>)\f) const prop; else continue L;}");
tryItOut("prototype = <><x><y/></x></>, prop;\ngc()\n");
tryItOut("gc()\nM:\tif([]) throw __parent__;\n");
tryItOut("/*infloop*/do {M:if([11,12,13,14].map) {yield;({}).hasOwnProperty } else  if (<x/> >= <x/>) {; }return [z1]; } while((this.__defineGetter__(\"__iterator__\", gc)));");
tryItOut("/*for..in*/for(var each = (__proto__.__lookupGetter__(\"__proto__\")).eval(false) + ({a2:z2}) in <><x><y/></x></>\n) {{{}(<><x><y/></x></>); } }");
tryItOut("return;");
tryItOut("/*for..in*/for(var __iterator__ = ({a2:z2}) in <x><y/></x>) {return [1,,]; }");
tryItOut("do {{return;/*infloop*/M:for(const __proto__; <x><y/></x>; __proto__)  } } while((<><xxx>{__noSuchMethod__}</xxx></>) && 0);");
tryItOut("if(false) yield;");
tryItOut("M:if((@foo ^= 0x99.@foo)) { if (constructor.eval(<><x><y/></x></>).valueOf(\"number\")) if(([<x><y/></x> for each (prototype in prototype)])) export *; else {let prop = __noSuchMethod__, prototype = @foo;gc() } else {return;let __proto__ = ({a1:1}); }}");
tryItOut("");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = constructor = window in <x/>) yield");
tryItOut("with({constructor: false.hasOwnProperty(\"__proto__\")})continue ;");
tryItOut("/*infloop*/for(let constructor; <y><z/></y>; <><x><y/></x></>) {export __iterator__; }\n");
tryItOut("L: ");
tryItOut("");
tryItOut("undefined;");
tryItOut("break \n/*infloop*/M:do {break ; } while(-3/0)\n");
tryItOut("/*infloop*/for(<>yield this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)</>; window.throw(prop); ({prop: <x><y/></x>})) {let __count__, prototype; get \n }");
tryItOut("/*infloop*/for(yield __proto__ = *; this.throw(<x><y/></x>)\t; prop = <y><z/></y> <<= ({ __proto__: __parent__ }) = <y><z/></y>.isPrototypeOf([z1]).watch(\"__proto__\", Math.sin)) {/*infloop*/do {{} } while(<><x><y/></x></>);<x/>; }");
tryItOut("let (__proto__ setter: new Function = <bbb xmlns:ccc=\"(__parent__.__noSuchMethod__ getter= function(q) { return q; })\"><ccc:eee></ccc:eee></bbb>, __iterator__) { {continue ; } }");
tryItOut("/*for..in*/L:for(const prop in *) gc()");
tryItOut("/*infloop*/while([11,12,13,14].some)export prototype;");
tryItOut("for(let y in []);");
tryItOut("M:if(constructor = <x><y/></x>) {yield <y><z/></y>; } else  if (__noSuchMethod__|= '' ) return <><x><y/></x></>; else __noSuchMethod__");
tryItOut("M:if((([1,2,3,4].map).call(prototype,  /x/g ,  '' ))) { if (<y><z/></y>) {export *;return  /x/ ; }} else {(undefined);export *; }");
tryItOut("with({}) throw <y><z/></y>; const __parent__;");
tryItOut(";continue M");
tryItOut("__count__ = 0.1, constructor;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:do {gc()switch(eval(\"var __iterator__ = 0.1, __noSuchMethod__;\", prop.( '' ))) { default: break; break; case 5: throw [[]];case <!--yy-->: case 6: break L; } } while((__noSuchMethod__[__iterator__.__count__ = \f__noSuchMethod__]));");
tryItOut("case <><x><y/></x></> / 1.2e3: /*for..in*/L:for(var constructor in ((([constructor.__proto__].filter(new Function)).watch)(~())))export *;");
tryItOut("if([11,12,13,14].sort.unwatch(\"__proto__\")) break M\n else  if ((((__count__ for (__noSuchMethod__ in  /x/ )) !== [z1] === -3/0) != this[window])[__count__ = 1.3.valueOf(\"number\").__defineGetter__(\"let\", (this).watch)]) {__proto__;/*for..in*//* nogeckoex bug 349964 */ for //h\n each(constructor in *) {gc() } } else let __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("");
tryItOut("((let (__count__ = *::*, __count__) 5.0000000000000000000000))\n");
tryItOut("yield +((yield ({ get __count__(__proto__, __parent__)<x><y/></x>,  set yield()<x><y/></x> })));");
tryItOut("L:if([<x/>].some(().__defineSetter__)) { if (false.__lookupGetter__(\"prototype\")) /*infloop*/L:for(__count__; ({prototype getter: function (__count__)<x><y/></x> }); this !== <y><z/></y>) {export __noSuchMethod__; }} else return;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: prop, __count__: ({ __noSuchMethod__: ({ __parent__: ({ __iterator__: __noSuchMethod__, __iterator__: ({ __proto__: [, ({ prop: __noSuchMethod__ }), prototype, , __parent__], prototype: [, ({ __proto__: __iterator__ }), , __count__] }) }) }), __parent__: ({ __noSuchMethod__: __parent__ }) }) }) = typeof @foo/* / ({a2:z2}); (<x><y/></x>.(<y><z/></y>)); eval(\"L: if(__iterator__) \\n4.; else var __parent__\\nreturn undefined;\", (({prototype: (window , false)}))) .. ((__iterator__.@foo).__defineGetter__(\"prop\", function (({ __count__: __noSuchMethod__, __parent__ = (<x/>.hasOwnProperty//h\n(\"__proto__\")), __parent__: ({ prop: __count__ }) })) { throw prototype; } ))) if(*) { if (this % this) {const __iterator__ = *;this }} else return <><x><y/></x></>;");
tryItOut("L:while((__iterator__ = (prototype.(( /x/ --)))) && 0){prototype =  \"\" ;{} }");
tryItOut("if(*.*) { if (undefined.__iterator__) {; } else return (-0);}");
tryItOut("/*infloop*/for(prototype;  /x/ ; <x><y/></x>) return");
tryItOut("while((new Exception(@foo, 1e4)) && 0){}");
tryItOut("/*infloop*/M:do {continue ; } while(this.zzz.zzz);");
tryItOut("/*infloop*/do throw *::*; while(\t({a2:z2}).__count__ = __proto__); const export *;;");
tryItOut("/*infloop*/for(eval(\"var __count__ = @foo, prototype = <><x><y/></x></>;\",  '' ); __count__.__count__ setter= eval; this.__defineGetter__(\f\"__proto__\", #1#)) {export prop; }");
tryItOut("[15,16,17,18].map(/a/gi,  '' )");
tryItOut("if( /x/g  || *) { if (null) (window); else export __count__;}");
tryItOut("__noSuchMethod__");
tryItOut("yield;if( \"\" ) yield; else throw #1#;");
tryItOut("/*infloop*/for(__iterator__; prototype; __noSuchMethod__ = [[]]) return;");
tryItOut("eval");
tryItOut("/*for..in*/for(const constructor in ((true)( \"\" )))yield\nfor(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("__proto__.__parent__ = __parent__;");
tryItOut("do  while(((<x/>.throw(#1#))) && 0);");
tryItOut("throw let prop, function::prop = __proto__;;");
tryItOut("try { return (\n!<x><y/></x>); } finally { __noSuchMethod__ = __parent__; } ");
tryItOut("while(((({}).__lookupGetter__).call(__parent__, this)) && 0){return this;{} } const __iterator__;");
tryItOut("if(undefined.__defineSetter__(\"__proto__\",  /x/g )) { if (((<y><z/></y>)([], <><x><y/></x></>)).__defineSetter__(\"__parent__\", (new Function(\"if(<x><y/></x>) { if (<y><z/></y>) const __noSuchMethod__, __noSuchMethod__ = (-1); else {function (__proto__, __proto__) { return __proto__ }  }}\")))) /*infloop*/for(const function::__parent__ = <x><y/></x>; <><x><y/></x></>; <x><y/></x>)  else /*for..in*/for(let constructor = [,] in [,,]) return arguments;}");
tryItOut("yield __count__;");
tryItOut("throw StopIteration;");
tryItOut("try { this.zzz.zzz; } catch(__noSuchMethod__: eval(\"(constructor)\", (__iterator__.constructor = window))) { prototype = __noSuchMethod__; } finally { return; } ");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(({})[ /x/ ]) {let  { {} } ;break M; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for((yield null[prototype])(0x99++); <> /x/g </>; __count__ = prototype) {  }");
tryItOut("/*for..in*/L:for(let __iterator__ in (((* = __iterator__ = true))(__count__.__parent__)))with({}) { prototype = __parent__; } ");
tryItOut("if((yield (undefined)(@foo) = (null.eval(<x/>)))) {export __count__; } else  if (1e4.throw(<x><y/></x>)[1.3.unwatch(\"__noSuchMethod__\")]) {with(__count__ = <><x><y/></x></>)export __parent__; }");
tryItOut("L: {{} }");
tryItOut("/*infloop*/while(eval(\"prototype\", 1e81))constructor");
tryItOut("M:with({prop: (<><x><y/></x></> ..  '' ) || ({}).__lookupGetter__}){var constructor;{} }");
tryItOut("if([15,16,17,18].map([1,2,3,4].slice, window)( /x/g  >>>=[1,,])) {<><x><y/></x></>;const prototype, __noSuchMethod__ = <><x><y/></x></>; } else gc()");
tryItOut("let (\t__parent__ =  { __count__ =  '' ; } ) { {} }");
tryItOut("if((undefined >> <y><z/></y>)) {__proto__;throw this; } else  if (<y><z/></y>) ; else [1,2,3,4].slice");
tryItOut("let (__count__, ({ __noSuchMethod__: [({ __noSuchMethod__: prop }), __count__] }) = __proto__.unwatch(\"__parent__\")) { 'haha'.split }");
tryItOut("L:with({__iterator__: *::*})default: (__noSuchMethod__).__defineSetter__break; ");
