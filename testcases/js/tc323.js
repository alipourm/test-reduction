tryItOut("M:switch(delete __proto__.prototype) { default: break; switch(null ===  \"\" ) {  { gc() }  }case 3: export __count__; }");
tryItOut("do  while((@foo) && 0);");
tryItOut("switch(this) { case 7: __proto__ = (-0); }");
tryItOut("L: {switch(__proto__ = @foo) { default: break; return this; } }");
tryItOut("gc()");
tryItOut("if((__count__.unwatch(\"prototype\").__parent__)) export __proto__; else {}");
tryItOut("this\n(<x><y/></x>);");
tryItOut("do {} while((*) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:while(<y><z/></y>){export function::constructor\nfunction (__parent__)~\n{} }");
tryItOut("L:with(#1=[#1#]){; }");
tryItOut("__noSuchMethod__\nexport *;");
tryItOut("with({__iterator__:  /* Comment */(new Function(\"{}\"))()(<x><y/></x>.(yield), (window)(__parent__))[(__noSuchMethod__.__noSuchMethod__)]})return function ([y]) { };");
tryItOut("/*infloop*/while(<x/> instanceof false)");
tryItOut("{for(let y in []); }");
tryItOut("");
tryItOut("/*for..in*/L:\ffor(let __iterator__ = [__count__ if (null)] in (Math.sin)( /x/g )) export prop;");
tryItOut("/*for..in*/for(var [constructor, __proto__] = (window.prop) in (prototype =  \"\" [(function ([y]) { })()])) {}");
tryItOut("L:with( /x/g )/*infloop*/while([[]]){return;break L; }");
tryItOut("throw function::__parent__");
tryItOut("/*infloop*/M:for(null[this]\r; --window ? __parent__ : 033; let (<x><y/></x>, __proto__ = <><x><y/></x></>) <y><z/></y>.valueOf(\"number\")) {{} }");
tryItOut("M:while((prop) && 0){throw .2; }");
tryItOut("with((new true((new Exception(this, <><x><y/></x></>)), (true.__parent__))).__defineSetter__(\"constructor\", *)){/*for..in*/for(__iterator__ in ((({}).hasOwnProperty)(null)))yield;export *\n }");
tryItOut("if(<y><z/></y>.yoyo(3.141592653589793) >= (\nthis ? #1=[#1#] : 0x99)) {/*for..in*/for(__proto__ = true in null) {yield 1.3;return; }/*for..in*/L:for(var [prop, __count__] = window.__defineSetter__(\"prototype\", new Function) in window) {return \nthis; } } else  if (\n(( /x/ .isPrototypeOf(<x><y/></x> -= <><x><y/></x></>)) .@x:: [1,2,3,4].map())) return; else throw <x><y/></x>\r.(*);");
tryItOut("do ; while((<x><y/></x>) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ in <x><y/></x>.__count__ = __noSuchMethod__) ~<><x><y/></x><\t/>.isPrototypeOf(( /x/g  .@x:: <x/>))");
tryItOut("switch(this.zzz.zzz.eval((undefined.eval(033)))) { default: try { function(q) { return q; } } finally { with({}) return null; } break; case 6: break; break; case new new [1,2,3,4].map(<><x><y/></x></>.__iterator__ = .2)(window): gc()\nyield export __proto__;;break; if((-0)) <x><y/></x> else  if (<x><y/></x>) \f }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in (([, , ] = __count__.__proto__ getter= (new Function(\"var __proto__ = [], constructor = 0/0;\")))(*))){ /x/g ;4. }");
tryItOut("if(((function ([y]) { })().hasOwnProperty(\"__count__\"))) { if (({prop: function(id) { return id } })) {__iterator__;gc() }} else {export *;\t }");
tryItOut("/*for..in*/for(let __parent__ in ((function(q) { return q; })(({ get __proto__ ({ prop: __parent__, __parent__: __parent__ }) () { return (-0)++ } , __proto__: \n<><x><y/></x></> })))){yield  '' ; }");
tryItOut("{{prop = __parent__, __count__;__proto__, __parent__; } }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: getter, __parent__: constructor }) = __parent__ = window.__lookupSetter__(\"constructor\"); (arguments.hasOwnProperty(\"prop\")); delete @foo) {return;/*infloop*/while(<x><y/></x>){return; } }");
tryItOut("let (__parent__ = *::*) { let ([] = 1.2e3) { ; } }");
tryItOut("\twith({__count__: ( /x/  for (__count__ in @foo))[prototype, __noSuchMethod__ >>= \f-1]}){export __count__;(-0); }");
tryItOut("/*infloop*/M:for(const prop; \f({ __count__: constructor }) = undefined; *.@foo.propertyIsEnumerable(\"prototype\")) { { yield *::*.__defineSetter__(\"__parent__\", constructor).__defineGetter__(\"__iterator__\", ( '' ).__defineSetter__).__lookupSetter__(\"__proto__\") }  }");
tryItOut("if(({__proto__ setter: ({}).__lookupGetter__ })) /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [,,]) {yield;\flet __noSuchMethod__; } const __proto__;");
tryItOut("let(__noSuchMethod__ = <x><y/></x>, constructor) ((function(){break M;})());");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = __iterator__ = setter.eval(<x><y/></x>) in __parent__) {continue ; }");
tryItOut("/*infloop*/for(let prototype+=\f({ constructor: <><x><y/></x></>.__lookupGetter__(\"__count__\").constructor, __count__: ({ prop: ({ __noSuchMethod__: ({ __proto__: __proto__ }) }) }) }) = 0/0 .@*:: [1]; __count__.__proto__; (uneval([15,16,17,18].map(Math.pow, window)[getter]))) if(<><x><y/></x></>.prop =  /x/g ) throw  \"\" ; else  if (<y><z/></y>) let __proto__ = function(id) { return id }, __parent__;");
tryItOut("switch(let (function::constructor, __noSuchMethod__) this) { case <x/>: M:switch([,]) { default: L:if(#1#) yield; else break; case 2: break; gc()break;  }default: case __iterator__.__proto__ = arguments: break;  }");
tryItOut("while(((function (__proto__, prototype) { return <><x><y/></x></>; } ).call(function::prototype = this, )) && 0){do {{return; } } while((.2) && 0); }");
tryItOut("M:if((this.__lookupGetter__(\"__proto__\"))) { if (false :: [z1,,]) {__iterator__ = ( \"\"  if (<y><z/></y>)), ({ __count__: [, ] }) = __noSuchMethod__ = <x><y/></x> } else {yield;let __iterator__; }}");
tryItOut("yield  get __iterator__ constructor (__proto__, __proto__)@foo\n");
tryItOut("/*infloop*/for(<><x><y/></x></> *= __parent__.propertyIsEnumerable(\"constructor\"); __iterator__.__noSuchMethod__ = Boolean(0 ? @foo : <><x><y/></x></>); (function(q) { return q; })) {{return;gc() }let (__parent__, __proto__ = <y><z/></y>) { window } }");
tryItOut("1e+81['__proto__'] = \t__proto__;");
tryItOut("if(undefined.__defineSetter__(\"__parent__\", function  prototype () { (033); } )) {while((<x><y/></x>) && 0){{}export *; }let (prop = window) { do var constructor, prop; while((@foo) && 0); } } else \f if ((<><x><y/></x></> .@ function::__proto__)) (this);");
tryItOut("__proto__\n");
tryItOut("var constructor = null\nreturn;\n");
tryItOut("let __iterator__");
tryItOut("{\rif(undefined) { if (<x><y/></x>) gc() else }; }");
tryItOut("switch(__iterator__-=<x/> - [ '' ].sort(({}).__lookupGetter__)) { case (void <><x><y/></x></>): default: break;  }[1,2,3,4].slice");
tryItOut("yield;export __noSuchMethod__;");
tryItOut("/*infloop*/M:for(var ({ __proto__: ({ __noSuchMethod__: __proto__, __proto__: __noSuchMethod__ }), __iterator__: prototype }) = ; this.zzz.zzz\n; __count__.(<x><y/></x>)) export *;");
tryItOut("/*infloop*/while(3)while((new false) && 0)function(y) { yield y; var __proto__ = <><x><y/></x></>, __count__;; yield y; }");
tryItOut("M:if(window) gc()");
tryItOut("throw prototype;");
tryItOut("export *\n/*for..in*/for(var __iterator__(constructor) in (((gc).call)(__iterator__ = this))){yield;gc() }");
tryItOut("/*infloop*/M:while( /x/g )yield *::*\n{return; }");
tryItOut("{(this)(*), __count__ }");
tryItOut("do if([z1]) throw <x><y/></x>; else  if (#3={a:#3#}) {export __noSuchMethod__; } while((new (function(y) { yield y; __parent__;; yield y; })(window) .@*:: try { {} } finally { ; } ) && 0);");
tryItOut("M:with({__iterator__: (new (({a1:1}))())}){M:if(<x/>) {( \"\" ); } else  if (__iterator__) ; else yield;yield; }");
tryItOut("export *;");
tryItOut("const __iterator__ = this, __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/do L: ; while((undefined)[undefined].eval((Date())));");
tryItOut("L:if(__noSuchMethod__ = [15,16,17,18].map(function  __noSuchMethod__ (prop, __noSuchMethod__)-1, window)) switch(#1#) { default: break;  }");
tryItOut("Functiontry { export __count__; } catch(__proto__ if <x><y/></x>\n) { return; } catch(setter) { return <></>; } finally { constructor; } ");
tryItOut("/*for..in*/M:for(prop = <><x><y/></x></>.* in <x><y/></x>) try { (1 for (x in [])) } catch(constructor) { Math.sin } finally { return  \"\" ; } (return window;);");
tryItOut("yield (new null(<x/>, @foo).prototype);");
tryItOut("return;");
tryItOut("/*infloop*/for(let __parent__; false; #1#) let __count__;");
tryItOut("yield;");
tryItOut("do yield; while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/while(0/0){(false);* }");
tryItOut("this.zzz.zzz;");
tryItOut("throw StopIteration;");
tryItOut("M:with({__count__: (({ __count__: ({ __noSuchMethod__: __iterator__, yield: prototype }), prototype: ({ prototype: __noSuchMethod__, __proto__: __noSuchMethod__ }) }) = ([export prop;]))}){yield *; }\ntry { function::__count__; } finally { var __noSuchMethod__, constructor = <x><y/></x>; } ");
tryItOut("/*infloop*/M:do ([,]); const prop; while(((eval))(null)--);");
tryItOut("/*infloop*/do { } while(<x><y/></x>);");
tryItOut("/*for..in*/for(var __parent__ in (([1,2,3,4].map)(({ get constructor __proto__ (__parent__, __count__) { yield  /* Comment */__proto__%=[,,z1] }  }))))with({}) __count__ = __iterator__;");
tryItOut("L: __noSuchMethod__;");
tryItOut("/*infloop*/do break ; while((<x><y/></x>__proto__));");
tryItOut("/*infloop*/for(var __count__; (this.__iterator__ = (({function::prop: #3={a:#3#}, <y><z/></y> % <><x><y/></x></> setter: (new Function(\"throw undefined;\")) })) @ (__proto__ = <x/>).unwatch(\"\")); [] > 1.2e3 >>= 1e4 .@ (__count__.prop)) L:\nif( /x/ ) export constructor;");
tryItOut("M:if(({ prop: [, [, ], ({ prop: __noSuchMethod__ }), ({ prototype: __count__, __proto__: __proto__ }), __noSuchMethod__] }) =  \"\" ) {return; }");
tryItOut("while((-0) && 0){([,,z1]);return *::*; }");
tryItOut("if((__iterator__ % 1.3).prototype) {M:if(__parent__) continue ; else  if (<x/>) return; else { } } else  if ((uneval(-3/0))) 0/0\nreturn; else L:if(<x><y/></x>) yield <x><y/></x>;");
tryItOut("/*for..in*/for(var x::__noSuchMethod__ = <xxx {[]}={(prototype = @foo)} /> in \f((uneval(<><x><y/></x></>)))) __count__;");
tryItOut("while((*::*) && 0)\f/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in true) {{} } const __proto__;");
tryItOut("__parent__;");
tryItOut("L:if(__count__ = false instanceof __iterator__ >>>=1e4.propertyIsEnumerable(\"__count__\"))  const prototype; else  if (true <<= __proto__) {gc() } else return false;");
tryItOut("yield  /x/ ; const __count__;");
tryItOut("/*infloop*/M:while([15,16,17,18].filter(([1,2,3,4].slice).__defineSetter__, ({a1:1}))(this.__defineGetter__(\"prop\", (true).watch))){let __noSuchMethod__ = <y><z/></y>; }");
tryItOut("<x><y/><//*\n*/x>");
tryItOut("/*for..in*/for([prop, constructor] = <y><z/></y>.throw(<x><y/></x>) in <y><z/></y>) ((<><x><y/></x></>).call).apply");
tryItOut("/*for..in*/for((constructor) in (([1,2,3,4].slice)(this .@ <x><y/></x>))){return -3/0;export __proto__; }");
tryItOut("with({}) with({}) ");
tryItOut("L: {export function::constructor\nyield; }");
tryItOut("if((prop = <x><y/></x>).throw(<x><y/></x> =  '' )) { if ((eval(\"__parent__ = constructor\", <x><y/></x>.isPrototypeOf(*::*)))) {throw <><x><y/></x></>;function  prop (__count__, __proto__)@foo }} else { }");
tryItOut("/*for..in*/for(*['prototype'].__iterator__ in ((function () { const constructor; } )(__noSuchMethod__%=@foo in <x><y/><\t/x>)))prop");
tryItOut("L: /*for..in*/for(var __parent__ in \n<x><y/></x>) ([1,2,3,4].map).apply");
tryItOut("for(let y in []);");
tryItOut("{M\f:if(window) {export __count__; } else  if ( '' ) {break ;prop, __proto__ = <x><y/></x>; } else break L;export __proto__; const __count__; }");
tryItOut("/*for..in*/for(const [prototype, prop] =  /x/  in window) yield <x><y/></x>;");
tryItOut("var __iterator__;");
tryItOut("L:with(__count__ ?  : <x><y/></x>){{/*for..in*/M:for(let [__parent__, __parent__] = .2 in <x><y/></x>) prototype; } }");
tryItOut("/*infloop*/for(prototype; *; <x><y/></x>) const __count__,  { return <><x><y/></x></> }  = 5.0000000000000000000000;");
tryItOut("/*for..in*/M:for(let prototype in ((Math.pow)(__noSuchMethod__))){throw @foo; }");
tryItOut("if( /x/ [(this.zzz.zzz) >> (this.__defineGetter__(\"__noSuchMethod__\", Math.sin)).isPrototypeOf(function::constructor = true--)]) L:if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(__proto__ = prop))) {yield <x><y/></x>; } else  if ((({ __noSuchMethod__: __noSuchMethod__, prototype: prototype }) = (uneval(null)))) this; else  if (\n((-1) .@*:: window.__iterator__)) M:while((<><x><y/></x></>) && 0)gc()/*\n*/if(0) { if (<x><y/></x>) return <x/>; else {yield;yield; }} else {export *;break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in __parent__) export *;");
tryItOut("L:do <x><y/></x>; while(() && 0);");
tryItOut("/*infloop*/while(true ^ 1.3); const prototype;");
tryItOut("if(__iterator__ = window.@*) \ncase 1: break;  else ");
tryItOut("yield;\nJ\n\n");
tryItOut("with(return.throw(eval(\"\\t#3={a:#3#} >>= true\", undefined).prop))yield <><x><y/></x></>; const prop;");
tryItOut("/*infloop*/for(let constructor; (new (function(y) { yield y; return <x><y/></x>;; yield y; })(<x/>)) << (<x><y/></x>.(__proto__)); eval(\"null = true, __parent__ = @foo;\", 3/0 , *)) {gc() }");
tryItOut("L:with((++constructor = *)){throw [ \"\" ];L: {return this;([1,,]); } }");
tryItOut("L:if(prop) <!--yy--> else {gc()var __parent__; }");
tryItOut("/*for..in*/for(prototype in ((Function)(new [z1](#1#))))*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in <><x><y/></x></>) {}");
tryItOut("if(<y><z/></y>) { if (<y><z/></y>) break ; else return *;}");
tryItOut("/*for..in*/for([prop, prototype] = [(<x/>( '' )) for each (__count__ in <><x><y/></x></>) if (this)] in false ? <>return undefined;</> : constructor) /*for..in*/for__iterator__: function(id) { return id }(__iterator__ = -1\f in [,]__noSuchMethod__) return <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in 'fafafa'.replace(/a/g, new Function)) /*infloop*/while(<><x><y/></x></>){;prototype =  /x/g , prop = window; }");
tryItOut("with({}) { with({}) { /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in false) yield; }  } ");
tryItOut("{return; }");
tryItOut("export *;");
tryItOut("[z1,,];let (try { yield; } finally { return; } , prototype = undefined) { return __iterator__; }");
tryItOut("let(__iterator__ = (function (__count__) { throw 0; } )( \"\" )) ((function(){return [,,];})());");
tryItOut("let (constructor =  /x/ , prop = 3.141592653589793) { const __count__; }");
tryItOut("\fif(( /* Comment */__iterator__.hasOwnProperty(\"__proto__\"))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const *::*.__noSuchMethod__ in [[1]]) export __count__; }");
tryItOut("if((<x/> == <x/>)) {with(__count__.prop){({}).__lookupGetter__export *; }throw <><x><y/></x></>; } else  if (({prototype: ((p={}, (p.z = (<x/>\f()))())) })) @foo; else ;");
tryItOut("/*for..in*/L:for(const [__iterator__, __proto__] = [,,z1], [1,,] in (-1)) {;return; }");
tryItOut("if(__proto__ != window) {__parent__, __noSuchMethod__ = [z1]; } else  if ( /x/g ) *::*;");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__ = 3)((this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }))) in <x><y/></x>) {var constructor = __noSuchMethod__;yield null; }\n } while(<><x><y/></x></>.eval(constructor = [1]));");
tryItOut("with({__iterator__: [] = Number(new (0x99)())})M:if(<x/>) { if (((__iterator__).call(__parent__, ))) (@foo); else var prop;}");
tryItOut("return;");
tryItOut("/*for..in*/for(__iterator__ in ((eval)(<><x><y/></x></>)))continue M;");
tryItOut("/*for..in*/for(__parent__ = 1e-81 in prototype = __noSuchMethod__) {/*for..in*/for(let constructor in undefined) yyy }");
tryItOut("/*infloop*/M:while( /* Comment */(new function (__count__, __proto__) { export __noSuchMethod__; } (\nnull, #1=[#1#])) >>>=yield function ([y]) { })break ;\n{/*infloop*/while(true){export prop;'haha'.split } }\n");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __count__ }) = (new  \"\" (window, <><x><y/></x></>)); new Date(<><x><y/></x></>, <x><y/></x>); Function(-3/0)) {(constructor); }");
tryItOut("if((\n<y><z/></y>)) M:if(1e-81) var \fprototype = this, __parent__ = <><x><y/></x></>;");
tryItOut("with({__iterator__: <><x><y/></x></> if (<x><y/></x>)})/*infloop*/for(const [, , __parent__] = <x/>; __noSuchMethod__; <y><z/></y>) gc()");
tryItOut("L: /*infloop*/do {} while(this);");
tryItOut("{/*infloop*/for(var constructor; false; window) ; }");
tryItOut("/*infloop*/ __proto__for(const __parent__yield <y><z/></y>(__proto__ = prototype); new String(){M:if(let (__parent__ = @foo)  \"\" .__parent__) yield false; const __proto__; else {gc() }/*for..in*/for(const __parent__ in (('haha'.split)(__proto__%=undefined))){/*infloop*/for(const __noSuchMethod__; <><x><y/></x></>;  /x/ ) {return;gc() } }\n }");
tryItOut("L:if(<y><z/></y> + __noSuchMethod__++) return; else  if (/*\n*/((new Function).call(*::*, 3/0))) ({}).__lookupGetter__");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let __count__ = ({ __count__: ({ __proto__: __count__ }) }) = (<x/>)([[]]) in set = undefined) { }");
tryItOut("if([,,] ^= 0.1) return; else  if (<x><y/></x>.(*::*)) yield -1; else {return  /x/g ;export *; }");
tryItOut("/*infloop*/while(window){gc()yield; }");
tryItOut("switch((__iterator__.__proto__.hasOwnProperty(\"__iterator__\")['__count__'] =  \"\" )) { default: while((window) && 0){throw 033;return 1e+81; }\n{return  /x/ ;(*::*); }\nbreak; case 2: break; case ((<></><ccc:ddd><zzz><y><z/></y></zzz><ccc:ddd></ccc:ddd></ccc:ddd>))(__iterator__ = <><x><y/></x></>): export *;case 2: /*infloop*/for(false; #1=[#1#]; @foo) \treturn;{}break; case 4: break; break;  }");
tryItOut("/*infloop*/L:do {let __proto__; } while(<><x><y/></x></> ? <x><y/></x> : prototype);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(<{__iterator__}> </{__iterator__}>.__parent__ in new Date()) {gc() }");
tryItOut("/*infloop*/do M:if(@foo = this) gc() else {return @foo;(<x><y/></x>); } while((\n<x><y/></x>[ \"\" ].__defineSetter__(\"__noSuchMethod__\", (function(y) { yield y; ;; yield y; }).apply)));");
tryItOut("/*infloop*/M:for(let __noSuchMethod__ = null; x<y/>'</x>; this) ;");
tryItOut("if(__proto__ = <x><y/></x>) {(-1);yield; } else  if ( /x/g .watch(\"prototype\", ((#3={a:#3#}).__defineSetter__).apply)) {return *; } else {throw *::*; }");
tryItOut("/*infloop*/do Function while([, ({ __proto__: prop, prop: ({ __count__: __count__ }) }), ({ __proto__: __count__ })] = this.zzz.zzz.__defineSetter__(\"prototype\", Function));");
tryItOut("/*for..in*/for(const prop =  ''  in  /x/ ) ;");
tryItOut("if( /x/ ) {function  __noSuchMethod__ (__iterator__) { return prototype } const __noSuchMethod__ = setter; } else {;constructor }");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__.__parent__ in <><x><y/></x></>)  while(((@foo)(false) = new (({}))()));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in ) {(@foo);\nexport *;\n }");
tryItOut("/*infloop*/while((({prop: null, constructor: <x><y/></x> }).watch(\"__proto__\", true))){yield function ([y]) { };({}); }");
tryItOut("yield this;export __proto__;");
tryItOut("/*infloop*/M:for(let prototype = __count__; <y><z/></y>; ({a1:1})) return;\nL:if(<x><y/></x>) { if (@foo) {; }} else {var __count__; }\n");
tryItOut("var prop;\n(<><x><y/></x></>);\n");
tryItOut("do __parent__ setter: [1,2,3,4].slice while(((yield 0 == this)) && 0);");
tryItOut("/*for..in*/for(let [__iterator__, __noSuchMethod__] = <x/> in #1#.unwatch(\"__count__\").@*) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (@foo)[\f__iterator__.isPrototypeOf(null)]) {if(((uneval((__noSuchMethod__ = null))))) {let prototype = 5.0000000000000000000000\n } else  if ( /x/ ) {{}constructor = __parent__; } else yield; }");
tryItOut("switch(*::*) { default:  }<><x><y/></x></>;");
tryItOut("yield Exception((#0=({prototype: <x/>})), (--<x><y/></x>));");
tryItOut("({\nthrow  '' ;/*infloop*/new #1=[#1#](<x/>, .2).constructor = function::prop; })");
tryItOut("return __parent__.prototype\n");
tryItOut("export prop\n");
tryItOut("/*infloop*/M:for(const __parent__ = ((uneval(<x><y/></x>.__lookupSetter__(\"__count__\"))) ? yield this.__defineGetter__(\"constructor\", function (prop) { return let; } ) : (export prototype.isPrototypeOf(eval(\" /x/ \", *::*)))); __noSuchMethod__ = 4..__parent__ * @foo; false.valueOf(\"number\").__defineGetter__(\"__proto__\", function (prop) { return [[]] } ).isPrototypeOf((#1=[#1#])(let (function::__parent__)  \"\" ))) {let prototype, prop = [z1]; }\n(@foo)\nwith({}) {}\n");
tryItOut("if(eval(\"/*for..in*/for(const __iterator__ in ((({}).hasOwnProperty)( /x/g ))){break ; }\", (0x99.isPrototypeOf(*)))) const __parent__ = __count__, __iterator__ = arguments;\ngc()\n");
tryItOut("let (prototype = [(\n#2=null) for (__parent__ in __proto__) if (*)]) { /*for..in*/L:for(const prototype = Function(1e4) in window) {var __noSuchMethod__, __proto__ = *::*;throw <x><y/></x>//h\n; } }");
tryItOut("L:with((<x><y/></x>)(<x/>, null))continue ;");
tryItOut("prop = __count__;");
tryItOut("with({}) return ([({})]);");
tryItOut("/*for..in*/for(x::__proto__ in -3/0) L:with(__parent__ = [,]){{}; }");
tryItOut("if(<><bbb xmlns=\"{}\"><!--yy--></bbb></>.__lookupSetter__(\"__count__((yield 0x99))\")) M:switch(function ([y]) { }) { default: const __iterator__;break;  } else { }");
tryItOut("with({__parent__: <xxx {__count__}={((yield <></>))} />}){if(('fafafa'.replace(/a/g, function(q) { return q; }))) { if (__iterator__.__proto__) {( /x/ );yield; } else continue L;}L:do {export __count__; } while((*::*) && 0); }");
tryItOut("with(__iterator__-=<><x><y/></x></>)<><x><y/></x></>;");
tryItOut("L:if(__count__ = (function ([y]) { })() ? export *; : <><x><y/></x></>) { if (([, __iterator__] = this.@foo)) export *;} else {return this; }");
tryItOut("let(prototype) { let(__count__ = this[#1=[#1#]], prop = *::*) ((function(){return;})());");
tryItOut("/*infloop*/while((typeof (delete = __proto__.__count__)))let (function::prop, __iterator__ = this.__defineGetter__(\"__count__\", ({}).__lookupGetter__)) {  }");
tryItOut("/*for..in*//*\n*/for(const [__iterator__, __noSuchMethod__] = <y><z/></y>.eval(false).() in *) {L:if(constructor |= #1# .@*:: 0) {(<>gc()</>);{} } else {return; } }");
tryItOut("do continue ; while((__iterator__.__parent__) && 0);");
tryItOut("with({}) { ; } ");
tryItOut("with({set: (eval(\" /x/g \", undefined).__count__ = <y><z/></y>|=(__proto__ = __parent__))}){033 }");
tryItOut("if(<bbb xmlns:ccc=\"1e81\"><ccc:eee></ccc:eee></bbb>.(__iterator__ |= <y><z/></y>)) L:switch( \"\" ) { case [[]]:  } else /*infloop*/while((gc).throw((__noSuchMethod__ = 3.141592653589793))){__count__ = this, __count__;( /x/g ); }");
tryItOut("return\n(__proto__);");
tryItOut("while((typeof __proto__.__noSuchMethod__ getter= function(q) { return q; }) && 0){/*infloop*/L:while(__parent__ *= [,,z1]){;export *; }\n/*infloop*/for(this.__defineGetter__(\"prototype\", (1 for (x in []))); new constructor = window(<y><z/></y>[#1#], *::*); __count__-=<><x><y/></x></>.isPrototypeOf((window @ @foo))) [,,z1] }");
tryItOut("/*for..in*/for([__count__, setter] = [11,12,13,14].sort in [prototype, __iterator__, __count__, , ]) constructor\n");
tryItOut("/*infloop*/for(const prop; this.zzz.zzz; [1].__iterator__.prop) yield;");
tryItOut("prototype = prototype;");
tryItOut("continue L;");
tryItOut("if(yyy) {;; }");
tryItOut("if((+ /x/g .watch(\"prototype\", ({}).__lookupGetter__))--) {const constructor;(<x/>); } else  if (true\n) {;if(constructor = \f{}) const __count__ = true, getter =  /x/g ; else {return; } }");
tryItOut("__parent__");
tryItOut("do gc() while(((__noSuchMethod__ = @foo)) && 0);");
tryItOut("/*for..in*/for(var constructor = 3 | prop in (function ([y]) { })()) {export *;#3={a:#3#}; }");
