tryItOut("");
tryItOut("with({}) let(prototype, constructor = new (<y><z/></y>)(true)) { let(prototype, __count__) ((function(){return;})());");
tryItOut("while((__parent__.__proto__ / <><bbb xmlns:ccc=\"prototype = <y><z/></y>\"><ccc:eee></ccc:eee></bbb></>) && 0){if( /x/g  %= <x/>) {let __count__ = [1], __noSuchMethod__ = [z1]; } else  if ( if ( /x/g )) {([1]);(({}).hasOwnProperty).apply }gc() }");
tryItOut("/*for..in*/for(__noSuchMethod__.__noSuchMethod__ in ((this.__defineGetter__(\"prototype\", (1 for (x in []))))((let (__noSuchMethod__) this.__defineSetter__(\"prototype\", function (prop, constructor) { break L; } ))))){try { export *; } catch(constructor) { __count__, prop = 1e4; } (<><x><y/></x></>);\f } const __proto__;");
tryItOut("let(__proto__ = [z1] =  \"\" ) ((function(){continue M;})());");
tryItOut("switch(new (1 for (x in []))(__parent__, arguments)) { case 9: if(new function  __iterator__ (__noSuchMethod__) /x/ ()) function  constructor (__iterator__) { return <x/> }  else let prototype;break; {return {let __parent__, prototype = #1#; };; }break; break; case 7: /*for..in*/L:for(const __iterator__ = <x><y/></x>++ in (<><x><y/></x></>.__lookupSetter__(\"__count__\")) >>> prop.__parent__ = <y><z/></y>) {/*for..in*/for(let [__proto__, __proto__] = new (function(id) { return id })( /x/ ) in <x><y/></x>.unwatch(\"prop\")) {break ; }/*infloop*/L:while((yield *))let prototype = 5.0000000000000000000000, __proto__; }default: break; var __proto__, __proto__ = __parent__;(<x><y/></x>);\n{}\nbreak;  }");
tryItOut("/*for..in*/for(const __parent__ in (((function (__iterator__) { return undefined; } ).call)(( ''  ^= <y><z/></y>)))){/*infloop*/while(window){throw <x><y/></x>; } }");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("for(let y in [5,6,7,8]) return *::*;");
tryItOut("L: {yield;yield; }");
tryItOut("export *;");
tryItOut("{with({constructor: __proto__.__parent__ = #1#}){break L;var prototype = 3/0; }/*for..in*/for(prop = (let (__noSuchMethod__ = <x><y/></x>, prop = window) <y><z/></y>).watch(\"__noSuchMethod__\", function(q) { return q; }) in undefined) {{}var prototype; } }");
tryItOut("yield;");
tryItOut("(undefined >= null);");
tryItOut("return;");
tryItOut("/*for..in*/for(let set in <x><y/></x>) {\texport *;__proto__; }");
tryItOut("prototype");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(\tconstructor.__noSuchMethod__ in __count__) {if((((this)()))) function (constructor, __noSuchMethod__) { return null }  else  if (#2=<x><y/></x>.watch(\"prototype\", function () { yield @foo } )) {while((function(id) { return id }) && 0){export constructor;continue ; } } }");
tryItOut("/*for..in*/for([__iterator__, prototype] = (prop ? <><x><y/></x></> : __proto__.constructor = false.__lookupSetter__(\"constructor\")) in [__parent__, ({ __count__: __proto__, __proto__: __noSuchMethod__ }), ] = window.__proto__\f) {__proto__[1,2,3,4].slice }");
tryItOut("/*for..in*/for(__parent__ = (({ get prop(prop, __noSuchMethod__) { /*infloop*/for(\f__count__ = *::*; <x><y/></x>; window) function (prop, __iterator__) { yield <x/> }  } , __noSuchMethod__ setter: (<><x><y/></x></>).__defineSetter__ })) >> <>.2</> *= this.__defineGetter__(\"__proto__\", ([,]).apply) in (function  prop (prop, __proto__)<y><z/></y>).call(<x><y/></x>, constructor, 5.0000000000000000000000)) while((<x><y/></x>.throw(-3/0).unwatch(\"__parent__\")) && 0)return <x><y/></x>;");
tryItOut("{/*for..in*/for(__parent__ in [1,,]) 5.0000000000000000000000; }");
tryItOut("/*infloop*/M:\tdo {yield;throw <y><z/></y>; } while(((function (__parent__, __count__) { #3={a:#3#}; } )(*)))\n");
tryItOut("{if(__count__) { if (true) export constructor;} else return <x><y/></x>; }");
tryItOut("/*for..in*/M:for([prop, constructor] = * in __parent__) do const __iterator__ while(((yield <x><y/></x>)) && 0);");
tryItOut("{continue M; }");
tryItOut("let(({ yield: setter, __parent__: __noSuchMethod__ }) = ((<><x><y/></x></>).watch)(<x/>)) ((function(){for(let y in [5,6,7,8]) gc()})());");
tryItOut("{;while((<><x><y/></x></>) && 0){const __iterator__ =  /x/ ;<><x><y/></x></>; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(let __parent__; prop = __parent__.eval(<x><y/></x>.(<x/>)); new Function) export function::__noSuchMethod__;");
tryItOut("L: {return; }");
tryItOut("/*for..in*/for(\tlet (constructor) in <x/>) yield @foo;");
tryItOut("/*infloop*/while((this\n)++){var ;((/a/gi).apply).call }");
tryItOut("function ()this(__noSuchMethod__).prop = function::__iterator__;");
tryItOut("throw ({a1:1})\nexport *;");
tryItOut("yield;");
tryItOut("/*for..in*/M:for(__count__ = new (Math.pow)( /x/ , *::*) in __iterator__ =  /x/g ) L: /*for..in*/for(let [__iterator__, prop] =  \"\"  in null) {;var __parent__; }");
tryItOut("/*for..in*/for(constructor = <x/> in window) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x/>) {yield; }");
tryItOut("/*for..in*/for(let constructor in ((<x/>)(<><x><y/></x></>))){export *; }");
tryItOut("{if(@foo) {gc()__noSuchMethod__; } else prototype = this, __count__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__.__count__ in ((([11,12,13,14].some))(<><x><y/></x></>() ^= (4..propertyIsEnumerable(\"__noSuchMethod__\")) |= <><x><y/></x></>.valueOf(\"number\"))))if(([1,2,3,4].slice)((([1,2,3,4].map).call(@foo, this, 4.)), false)) {return; }");
tryItOut("L: {; }");
tryItOut("if(window) throw []; else  if (*) {/*infloop*/L:do {return *;continue M; } while(<><x><y/></x></>);__parent__ = __iterator__, __count__ = ({a1:1}); } else {([,,z1]).apply }");
tryItOut("/*infloop*/for(const __parent__ = <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\"); {if([[]]) { if (1.2e3) this;} else {{} }export __iterator__; }; <><{prop}>yyy</{prop}></>.@foo) with(<x/>)");
tryItOut("let __iterator__ = #1#\n");
tryItOut("switch(<><x><y/></x></\f>) { default: break;  }");
tryItOut("with(<{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>){continue ;(<><x><y/></x></>).__defineSetter__ }");
tryItOut("/*for..in*/M:for([__parent__, __noSuchMethod__] = [<><xxx {__iterator__}={__count__.__parent__} /></>].sort(({constructor getter: <y><z/></y> })) in true) {export prototype;throw [,]; }");
tryItOut("L:if(__iterator__ = <x><y/></x>) {/*infloop*/do {Math.sin } while(<><x><y/></x></> ? undefined : (-0));if([prop if (__proto__)]) {return <><x><y/></x></>;return <y><z/></y>\f; } else  if ((* for (__noSuchMethod__ in ({a2:z2})))) {/*infloop*/for\t(*::*; ({a2:z2}); *::*) (<x/>); } } else  if ( /x/ ) {/*infloop*/L:for(let prototype; __parent__; [,,]) {var prop = 1e+81;let __proto__, __iterator__ = true; } } else /*infloop*/for(var [] = window.valueOf(\"number\"); __noSuchMethod__ = __parent__ |= *::*, ({ __count__: prop }) = {}; window) {yield null;{} }");
tryItOut("with({}) __noSuchMethod__ = constructor;");
tryItOut("let (__count__ = (prop = __parent__ instanceof <><x><y/><\f/x></>.valueOf(\"number\"))) { M:if(((__count__))[this.prop]) { if ((constructor = [,,])) {{} \"\" ; }} else yield; }");
tryItOut("L:if(.2 = (function(y) { yield y; yield <x/>;; yield y; })(window)) case false.__iterator__: break;  else {constructor, __proto__ }");
tryItOut("gc()export constructor;");
tryItOut("/*infloop*/do return *::*; while(<x/>);");
tryItOut("M:switch(([eval(\"gc()\", this %  /x/g ) for each (__proto__ in *) for each (prototype in  \"\" ) for each (prop in 1e81)])) { default: break; case 0: case 9: break; case 6: var __noSuchMethod__ = window, __iterator__ = this;continue ;break; break;  }");
tryItOut("{\n\nwith(<><x><y/></x></>){(<y><z/></y>); } }");
tryItOut("do export *; while(( /x/ ) && 0);");
tryItOut("/*infloop*/for(undefined; window;  /x/ ) const __proto__;");
tryItOut("if(undefined.throw( '' )) let prop = __iterator__, __parent__; else  if (__count__ = [[]])  '' ;");
tryItOut("let(prop = 1e-81, __proto__ = ({a2:z2})) { {} const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(var prototype in null) {;{} }");
tryItOut("return true;");
tryItOut("{/*for..in*/for(let [__iterator__, __parent__] = this in constructor) prototype, prop; }");
tryItOut("return; const __proto__;");
tryItOut("for(let y in []);");
tryItOut("if((Exception(<x><y/></x>.( \"\" ) if (this).valueOf(\"number\")))) { if (prototype = <x><y/></x>) M:if(([this.__defineGetter__(\"constructor\", ({}).__lookupGetter__)].some(Math.sin))) {export constructor;yield; } else  if (({ set __noSuchMethod__( { return __proto__ } , prop: @foo })) {throw <x><y/></x>;(<><x><y/></x></>); } else {; } else {( .. __proto__); }}");
tryItOut("({}).__lookupGetter__");
tryItOut("if(1e81) {if(((uneval(--null)))) { if (*::*.prototype) return get;} else {return;prototype = prototype; } }");
tryItOut(":");
tryItOut("for(let y in [5,6,7,8]) with({}) { this.zzz.zzz; } ");
tryItOut("\nreturn  \"\" \n");
tryItOut("if(new (null)().throw(<x><y/>\f</x> , #3={a:#3#})) { if ((__noSuchMethod__ /=  /x/  in 0)) L:if(-0) { }} else ({}).__lookupGetter__");
tryItOut("constructor = __proto__;");
tryItOut("/*for..in*/L:for(const [__parent__, __proto__] = (prop+=__iterator__ = <x/>.isPrototypeOf([15,16,17,18].filter(function(y) { yield y; export *;; yield y; }, <x><y/></x>))) in (<x/>.valueOf(\"number\"))) {/*for..in*/for(let [prototype, __count__] = prop.hasOwnProperty(\"__count__\") in @foo) {return <x/>;yield; }let (__parent__) { __count__ } }");
tryItOut("let (({ __proto__: constructor(<x><y/></x>), __parent__: ({ prototype: \r({ __count__: prop, __parent__: __count__ }), __parent__: ({ prop: __proto__, __noSuchMethod__: prop }) }) }) = (constructor.constructor setter= (*::*).watch)) { export __noSuchMethod__; }");
tryItOut("{if(@foo) {(function(id) { return id }); } else  if (prototype) const __noSuchMethod__, __iterator__; }");
tryItOut("Math.pow");
tryItOut("let (__proto__ = [] =  /x/  * this) { this.zzz.zzz; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in <x><y/></x>) L:while((this) && 0){export __iterator__; }");
tryItOut("/*for..in*/for(let __proto__ in constructor) gc()export __iterator__;");
tryItOut("/*for..in*/for(const [prop, prop] = ({__proto__ getter: function (__iterator__, <x/>) { yield <></> } , constructor: <y><z/></y> }) in arguments) {(<x><y/></x>);__parent__ = (\n /x/g ) }");
tryItOut("/*for..in*/for(let [prototype, constructor] = @foo in true) {L:if(false) {let prototype;let __count__ = false, prototype = []; } else  if (<><x><y/></x></>) {yield  \"\" ;prototype = *, __parent__; } else try { return; } catch(__proto__ if (function(){return;})()) { prototype; } ([,])\ngc() }");
tryItOut("/*infloop*/M:for(({__noSuchMethod__ setter: function  x::prop () { return undefined } , __proto__ getter: function (__count__, prop) { export *; }  }).eval(<><x><y/></x></> + <x><y/></x> !== {}[false]); new 1e-81(<x><y/></x>,  /x/ ) ? __count__ > 0/0 : (prototype =  \"\" ); (function ([y]) { })()) /*for..in*/for(__parent__ = __count__+=false in null) {{}var __parent__ = *, prototype; }");
tryItOut("if(#1=eval(\"[1]\", __parent__)) {with({function::prototype: __parent__.__proto__ = <x/>})return constructor; }");
tryItOut("yield function(id) { return id };");
tryItOut("/*infloop*/for(#3={a:#3#};  \"\" ;  /x/g ) __noSuchMethod__");
tryItOut("/*infloop*/do {{const __parent__; } } while(((__iterator__.__count__).watch).call((this.__defineSetter__(\"prop\", ({}).hasOwnProperty)), ));");
tryItOut("/*infloop*/while((__proto__ for (prototype.__proto__ in <x><y/></x>)))__iterator__;");
tryItOut("L:with({__count__: <x\t><y/></x>})gc()");
tryItOut("if(({__iterator__: <y><z/></y> })) {/*infloop*/L:while(({a1:1}))yield;033; } else  if ('fafafa'.replace(/a/g, Math.sin)) {/*infloop*/for(const constructor;  /x/g (this); eval(\"<x><y/></x>\", -3/0)) Math.sin }");
tryItOut("yield eval(\"__proto__\", (<><x><y/></x></>)).__parent__ = (<y><z/></y> if (__noSuchMethod__));");
tryItOut("do {(<><x><y/></x></>);const __proto__ = (-0); } while(((function (<!--yy-->) { yield  /x/  } ( \"\" )).isPrototypeOf(++ '' )) && 0);");
tryItOut("this\n");
tryItOut("L:with({prop: #1=[#1#].__defineSetter__(\"prototype\", function  __count__ (function::__iterator__) \"\" )})yield;");
tryItOut("throw *;");
tryItOut("switch(<><bbb xmlns:ccc/*\n*/=\"<y><z/></y>.__parent__\"><ccc:eee></ccc:eee></bbb></>) { case constructor = (<x/> > @foo): break; case true -= *: yield;break; break; [1,2,3,4].mapbreak; case ([__noSuchMethod__].map(function  prop (__proto__, constructor) { return 1e-81 } )): {}break;  }");
tryItOut("if(get|=#1#) {; } else {export prop;return; }");
tryItOut("continue ");
tryItOut("/*infloop*/do yield; while([((uneval(.__lookupGetter__(\"prototype\"))))]);");
tryItOut("/*infloop*/L:for(let ({ __parent__: __proto__ }) = constructor.prop = .2; __count__ = (((<x/>)[<y><z/></y>]).__iterator__); (p={}, (p.z = [<x><y/></x>])())) {/*infloop*/for(<x/>; <y><z/></y>; prototype) {break ;export *; }do {yield prototype; } while((prop) && 0); }\nif(((1 for (x in [])))) var constructor = __proto__; else  if ((this.zzz.zzz)) {throw <x/>;export *; }\n");
tryItOut("(*);");
tryItOut("/*for..in*/for(const __count__ in ) switch(<!--yy-->.__defineGetter__(\"set\", <><x><y/></x\t></>)) { default: if(window) __noSuchMethod__, prop = [[]]; else  if (true) {constructor, function::__parent__ = true; } else {var __noSuchMethod__ = <x><y/></x>; }break;  }");
tryItOut("do try { try { (1 for (x in [])) } catch(constructor if (function(){})()) { yield; } catch(__noSuchMethod__ if [,]) { {} } finally { export __parent__; }  } catch(prototype if <y><z/></y>.isPrototypeOf(this)) { __parent__ = constructor; } catch(__parent__ if true) { throw StopIteration; } finally { this.zzz.zzz; }  while((('fafafa'.replace(/a/g, 'haha'.split))) && 0);");
tryItOut("switch(this) { default: gc()break; case 1: throw 1.2e3; }");
tryItOut("yield false;");
tryItOut("try { yield *; } finally { return *; } ;");
tryItOut("throw  '' ;");
tryItOut("/*for..in*/for(let prop in (((#1=[#1#]).call)( /x/ ))){@foo; { ; }  }");
tryItOut("/*infloop*/do return this; while(<><x><y/></x></> ? * : window);");
tryItOut("if(((uneval(yield <><x><y/></x></>)))) {break ;return <x/>; } else (this);");
tryItOut("switch(new (*)((new ( \"\" )()))) { default: case function ([y]) { } & {}: gc()\nbreak ; }\n");
tryItOut("/*infloop*/prop");
tryItOut("do {const prototype;{} } while(((function ([y]) { })().@*.__defineGetter__(\"__parent__\", /a/gi)) && 0);");
tryItOut("__parent__ = __proto__;");
tryItOut("L:switch(this) { case 1:  }\nyield;");
tryItOut("L:while((yyy) && 0)return <><x><y/></x></>;");
tryItOut("export __proto__; const __iterator__;");
tryItOut("let (({ __noSuchMethod__: [], prop: ({ constructor: ({ __proto__: [], __count__: [] }) }) }) = true, __count__ = <bbb xmlns=\"({__noSuchMethod__: <><x><y/></x></> }) + [z1]\"><ccc:ddd><!--yy--></ccc:ddd></bbb>) { yield; }");
tryItOut("throw 1e81\n\nconst __proto__ = undefined;\n");
tryItOut("let (({ constructor: constructor, __parent__: __parent__ })) { export *; }");
tryItOut(";");
tryItOut("if((null\n.hasOwnProperty(\"__count__\"))) {return prototype; }");
tryItOut("/*infloop*/L:while([]){return;var  ; }  { /*for..in*/L:for(let __parent__ in __iterator__) {throw <><x><y/></x></>; } }  \nreturn <x><y/></x>;");
tryItOut("M:if(<><x><y/></x></>.yoyo(*)) yield;");
tryItOut("while((+({prop: <x><y/></x>.__defineSetter__(\"__iterator__\", new Function) })) && 0);");
tryItOut("/*infloop*/for(var ({ prop: [__noSuchMethod__, , K, , ] }) = __parent__.([z1]); *::*/* >>  constructor.__lookupSetter__(\"constructor\"); <><x><y/></x></> = undefined / <y><z/></y>.valueOf(\"number\"\n)) {}");
tryItOut("/*for..in*/L:for(let prop = constructor%=prototype = false in (1e81.__noSuchMethod__ = <x><y/></x>) = this.__defineSetter__(\"__proto__\", Math.sin)) {let __iterator__ = __iterator__;((function ([y]) { })()); }");
tryItOut("let __noSuchMethod__; const function::prototype;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut(" const __proto__;");
tryItOut("switch(new (function (prop)[,,z1])(\t<x/>, [,])) { default: break; return @foo; }");
tryItOut("return;");
tryItOut("(<y><z/></y>);");
tryItOut("with( /x/g .@foo)var __proto__ = [,];\nyield false;\n");
tryItOut("switch(@foo) { case 3: break; default: return;break; case 4: var __proto__, __parent__;case (this.__defineGetter__(\"prop\", [[1]])): gc()break; break; case 4:  }");
tryItOut("with({__parent__: <x><y/></x>});");
tryItOut("switch(~( \"\"  for each (constructor in 0/0))) { default:  }");
tryItOut("M:with( \"\" ){gc0.1; }");
tryItOut("/*infloop*/M:for(const __iterator__ = <x><y/></x> && <x/>; __count__ = *--; ( \"\" .throw(false)--)) continue \n");
tryItOut("L:if(__parent__.prop = 0x99.isPrototypeOf(<><x><y/></x></>)) { if (__iterator__.isPrototypeOf(@foo)) yield; else  /x/g ;}");
tryItOut("export *;{yield <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("{M:while((__parent__.constructor = ((((function(y) { yield y; export *;; yield y; }.call(<x/>,  function(q) { return q; } undefined,  '' ){} ))(window.__defineSetter__(\"prototype\", __proto__))\f) >> [15,16,17,18].some((1 for (x in [])), new String( /x/ ))) && 0)<><x><y/></x></>; }");
tryItOut("L: ;");
tryItOut("const prop =  \"\" \n");
tryItOut("/*for..in*/M:for(__iterator__ in ((prop = this)((*::* <= [,,z1]).eval(<><x><y/></x></> *= __count__.@foo))))var __parent__\n");
tryItOut("/*infloop*/do {export *;; } while(prop % (-1));");
tryItOut("/*infloop*/L:for(var __proto__; null; constructor.__iterator__ = <x/>) {for(let y in []); }");
tryItOut("/*for..in*/for(var __iterator__ = (((<x><y/></x>)[((<\fx><y/></x>).__defineSetter__).call(__parent__, )]).__defineGetter__(\"__count__\", (prototype.(033)).__defineSetter__)) in prop) /*infloop*/while(gc()){export __count__\nthrow 1e+81; }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/M:for(((<y><z/></y>).__defineSetter__).apply(); (({__iterator__: [15,16,17,18].sort(<x><y/></x>, prop)}) *= this.__defineGetter__(\"constructor\", 'haha'.split)); (uneval((__noSuchMethod__ = *::*)))) /*infloop*/{let prop = *::*//h\n;yield *::*; }");
tryItOut("L: /*for..in*/for(var __proto__(@foo) in  /x/ ) export *;\t");
tryItOut("if(((1 for (x in []))).call( \"\" , )) {;\t } else  if (this.__defineGetter__(\"function::prop\", prototype = __parent__)) yield;continue M; else {({}).__lookupGetter__; }");
tryItOut("/*for..in*/for(let __count__ in (((1 for (x in [])))((<bbb xmlns:ccc=\"void __proto__\"><ccc:eee></ccc:eee></bbb> >>>=((this if ( \"\" ))))))){if(__iterator__ = 3.141592653589793) ; }");
tryItOut("with([__noSuchMethod__.prop, ] = [({ constructor: __parent__ })].__noSuchMethod__ = null)throw @foo;");
tryItOut("throw __parent__;");
tryItOut("{{} { let __parent__; }  }");
tryItOut("/*for..in*/for(const __noSuchMethod__.__proto__ in ({ __parent__: ({ prop: ({ prop: constructor, __parent__: __count__ }), constructor: __proto__ }), constructor: ({ __parent__: ({ __iterator__: __noSuchMethod__, __count__: __parent__ }), ({a2:z2})['__iterator__']: __noSuchMethod__ }) }) = ({ __parent__: prototype })) {L: {/*for..in*/for(var __count__ in ((function(q) { return q; })(<x><y/></x>)))return;{} } }");
tryItOut("/*for..in*/M:for(({ prototype: prototype, prototype: __count__ }) in (([1,2,3,4].slice)(window))){/*for..in*/for(let [__count__, prop] = false in #1=[#1#]) {gc()eval } }");
tryItOut("/*infloop*/L:do {export *; } while([z1] & #3={a:#3#});");
tryItOut("__count__ = __count__;");
tryItOut("with({}) { let(yield) { return; } ");
tryItOut("/*infloop*/L:do do {return undefined; } while(((false >> #1=[#1#])) && 0); while((let (__parent__)  '' .isPrototypeOf(arguments >>= (<y><z/></y>)(window) for each (prototype in *) for (__iterator__.__count__ in -0) for each (__parent__ in __noSuchMethod__))));");
tryItOut("while((*) && 0){033; }");
tryItOut("yield null;");
tryItOut("if( \"\" [undefined]) { if (\n<><x><y/></x></>) (false); else {yield; }}");
tryItOut("/*for..in*/for(const x::constructor = /*\n*/({ __iterator__: ({ function::__parent__: prototype }) }) = [, , ] in (new @foo)) with({__noSuchMethod__: .2}){const __noSuchMethod__ =  '' ; }");
tryItOut("let constructor;export __iterator__;");
tryItOut("with({__noSuchMethod__: <!--yy-->})/*infloop*/L:for(let constructor; (__parent__)%=(delete  '' ); ((uneval(null)))) export *;");
tryItOut("for(let y in [5,6,7,8]) continue ;");
tryItOut("let (prototype = window[@foo]++) { const __count__, __noSuchMethod__ = window; }");
tryItOut("yield this;\nyield {};\n");
tryItOut("{}");
tryItOut("with({__proto__: 0/0}){__count__, __parent__ = prototype; }");
tryItOut("/*infloop*/do throw (-3/0)[<x/>]; while(((<x/> ? window :  '' )([11,12,13,14].filter, [15,16,17,18].map(function  prop (prop, __noSuchMethod__) { {} } , null))));");
tryItOut("/*infloop*/for(let __iterator__; constructor = this.throw(-0.propertyIsEnumerable(\"__proto__\").__parent__ = [z1,,] /= __iterator__).__iterator__; ((yield [[]]).valueOf(\"number\")) >= \n( '' ).call(this, *::*)) throw [(<y><z/></y>( /x/ , [1,,])) if (<><x><y/></x></>)];");
tryItOut("let (__proto__ = eval(\"__parent__ ? <><x><y/></x></> :  /x/g \", ((p={}, (p.z = __parent__ = window)()))), __parent__ = new (this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)).__defineSetter__(<x><y/></x> << this, (__count__.__noSuchMethod__))) { with({}) this.zzz.zzz; }");
tryItOut("if((({constructor: (-1.(prop))}))) { if (this.zzz.zzz) {1.3\n }} else {(<x/>);<x><y/></x> }");
tryItOut("/*for..in*/M:for(let [\r({ let: ({ __iterator__: [__noSuchMethod__, __parent__] }) }), constructor] = yield * in (p={}, (p.z = window)())) (<><x><y/></x></>);");
tryItOut("/*infloop*/for(prop = [z1,,]; true; (__parent__ = this) & ({constructor: \fundefined }).__defineSetter__(\"prototype\", (function(q) { return q; }).apply)) {prop = <x/>, __noSuchMethod__; }");
tryItOut("let (({ constructor: [({ __noSuchMethod__: __iterator__ }), ], prop: __noSuchMethod__ }) = (<x/>.__iterator__ = prop.prototype getter=  '' ) === ([__proto__ = <><x><y/></x></>])) { let (__count__ = <>__parent__: this</>, prop = ({})) { var __parent__; } }");
tryItOut("if(__noSuchMethod__) {( \"\" ).__defineSetter__ } else  if (3.141592653589793) {window;if(<x><y/></x>) { if (<x/>)  else {return <><x><y/></x></>; }} } else { if (<x><y/></x>)\n__iterator__ = false, __noSuchMethod__; }");
tryItOut("{; }");
tryItOut("/*infloop*/while((yield (__count__ = yield = function ([y]) { }.__lookupSetter__(\"prototype\") ? (((prototype.constructor setter= (@foo).__defineSetter__).yoyo(undefined)).yoyo((new (1.2e3)()) >>=  /* Comment */this)) : ((prop)(5.0000000000000000000000)+=({constructor: window}) ? <><x><y/></x></> >= <><x><y/></x></> : 4. * 1e-81)))){;\nexport *;\n }");
tryItOut("M:if(prop.(window)) { if (this(this)) {return;{} } else {(<x><y/></x>);__proto__ =  /x/ ; }}");
tryItOut("M:if( '' .propertyIsEnumerable(\"__noSuchMethod__\")) {\r } else  if (__noSuchMethod__ = <x><y/></\fx>) (<x><y/></x>); else {__count__ = *, constructor; }");
tryItOut("__parent__ = __iterator__;");
tryItOut("function  __noSuchMethod__ ()null const getter;");
tryItOut("L:with({x::__noSuchMethod__: (__count__%=<><x><y/></x></>)}){if(*::*) gc() else  if (function(id) { return id }) {(<x><y/></x>)\t; } }__parent__.__noSuchMethod__ = __proto__;");
tryItOut("{yield 1e4;/*for..in*/for(var [window, __count__] = window in <x><y/></x>) {gc()let __count__, __iterator__; } }");
tryItOut("L:with(<y><z/></y>( '' , <><x><y/></x></>))/*for..in*/for(const __count__ = (((function ([y]) { })() ? #3={a:#3#} : <><x><y/></x></>).__defineGetter__(\"prop\", function (__iterator__, __parent__) { function (__parent__, function::__parent__) { return [[1]] }  } ))\t in __count__) ");
tryItOut("if(1.2e3\n) {{}/*for..in*/for(var constructor in (([__count__] = ([1,2,3,4].map).call <<  \"\" )(((p={}, (p.z = typeof null)()))))){if(<><x><y/></x></>) yield; else  if (0/0) 1e-81;case 3: gc()break; const __noSuchMethod__;default: break; case [__count__ for (__noSuchMethod__ in function(id) { return id })]: continue ;  else {export *;export *; } } }");
tryItOut("{}");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] = [function  __parent__ (__noSuchMethod__) { return <><x><y/></x></> } (<x><y/></x>, <x/>).@*] in (({__count__: @foo }))) gc()\nyield window;\n");
tryItOut("M:if((1e+81 !== 033)) { if ((prop >> [,,].yoyo(undefined))) return *;} else return;/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in <><x><y/></x></>) {var __parent__ = this;const __proto__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const prop = <x><y/></x> in <x><y/></x>) {4.;throw true; }");
tryItOut("with(prototype <<= <><x><y/></x></>)continue L;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:do return  '' \nexport *; while(-(__count__.(<x><y/></x>))); const constructor;");
tryItOut("{if([{}].some('haha'.split)) { if (undefined.watch(\"prop\", Math.sin)) {[z1,,](@foo); }} else { }\f{} }");
