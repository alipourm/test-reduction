tryItOut("with({}) try { yield; } catch(__noSuchMethod__ if (function(){})()) { const constructor, prop =  /x/g ; } finally { {} } ");
tryItOut("/*for..in*/for(let prototype in (-1)) {export *;continue ; }");
tryItOut("__parent__ = __iterator__;");
tryItOut("L:with({__proto__: ((<><x><y/></x></>)( \"\" ))})@foo");
tryItOut("/*infloop*/do {({}).__lookupGetter__eval(\"yield this;\", *) } while(new (*)((function ([y]) { })(), <y><z/></y>))\n/*for..in*/M:for(__noSuchMethod__ in (__proto__ = <><x><y/></x></>)) break M; const __parent__;");
tryItOut("L: {if(*::*) { if (false) var  ; else return <x><y/></x>;} }");
tryItOut("while((@foo.__lookupGetter__(\"__count__\")) && 0)throw ;;");
tryItOut("/*infloop*/do [1,2,3,4].map while(( /* Comment */-0));");
tryItOut("const prototype = window, __count__ = [z1,,];continue ;");
tryItOut("with(<x><y/></x>.(<x><y/></x>)){let function::__parent__, __count__ = this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in  /x/ ) export *\n");
tryItOut("/*infloop*/for(prop; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (0/0 for (__proto__ in <x>\f<y/></x>)) .@x:: undefined.yoyo(<><x><y/></x></>)) yield 0;");
tryItOut("");
tryItOut("let (__iterator__, __noSuchMethod__) { /*for..in*/for(let (undefined)( \"\" ) in <x><y/></x> % prop) \f\n }");
tryItOut("with({__count__: let [], __count__}){break ;\n/*for..in*/L:for(let constructor = <x/> in <><x><y/></x></>) __noSuchMethod__ = 4.;\n }");
tryItOut("(;);");
tryItOut("/*infloop*/L:while((*) && 0)const __parent__, __parent__ = <x><y/></x>;for(var __count__ = undefined; *; 1e-81) {export prop; }");
tryItOut("; const __parent__;");
tryItOut("");
tryItOut("'haha'.split\n(<x><y/></x>);");
tryItOut("/*for..in*/for(let __noSuchMethod__ = [({a1:1})].map((new Function(\"const prototype = *, constructor = @foo;\"))) in <y><z/></y>.hasOwnProperty(\"__noSuchMethod__\")) try { throw [,,]; } finally {  } ");
tryItOut("throw window;");
tryItOut(" const __proto__;");
tryItOut("{}");
tryItOut("if( /* Comment */#1#) /*for..in*/L:for(var __proto__ in default: {}case 7: undefined;gc()break; case 1: break; ) {export prototype; } else  if (\n<y><z/></y>.watch(\"__parent__\", function (__count__, __noSuchMethod__)__iterator__)) let __noSuchMethod__ = this, prop = [,,];");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(__parent__.__parent__ in function () { yield ((prototype = *).watch(\"prototype\", window)) } ()) {({ prop: [, constructor, __count__] }) }");
tryItOut("L: __noSuchMethod__ = <x/>,  /x/ ;");
tryItOut("/*infloop*/L:while(<><x><y/></x></>)yield ;");
tryItOut("with((__proto__.__defineSetter__(\"__parent__\", Math.pow) ? (*::*(*)) : __noSuchMethod__ = window))");
tryItOut("yield __iterator__.(--__proto__ = *);");
tryItOut("/*infloop*/do {const __proto__;if(window) {{}Math.sin } else  if ([,,z1]) const __iterator__ = true; else {throw false; }\f } while(((prop.__noSuchMethod__ = false).unwatch(\"prop\")));L:if(<x/>.prop) const __parent__ = __proto__\n else  if ((__parent__.watch(\"__proto__\", [1,2,3,4].map).hasOwnProperty(\"__noSuchMethod__\"))) const /*\n*/__count__;");
tryItOut("/*infloop*/L:for(let (constructor) \n<x/>; new @foo(); <x><y/></x>.eval(<y><z/></y>) ? (__parent__ = false for ((prototype).watch.prototype in window) for each (__parent__ in [[]])) : (Function())--) {/*infloop*/for(let yield; [prop if (__count__)]; (null)) {prototype; } }");
tryItOut("/*for..in*/M:for(var __iterator__ = __count__.prototype getter= ((constructor in [])).__defineSetter__ in (gc)(@foo, prop)) { }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("if(#1#) try { gc() } catch(prop) { export *; }  else  if ([ /* Comment */<x><y/></x> if (<x><y/></x>)]) {if(* .@x:: __iterator__) {break \n } else  if ((p={}, (p.z = (<x><y/></x>.(window)).call(eval(\"continue L;\", @foo for each (prop in <x><y/></x>)), (*.constructor) | __count__.prop))())) {export __iterator__;; const __noSuchMethod__; } else yield\n }");
tryItOut("if((__proto__, __iterator__.isPrototypeOf(constructor) for each (prop in [1]) for (__iterator__\r in __parent__))) {function (__parent__) { return 1.3 } return; } else __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(const __parent__; (new Number((<x/>.eval(__parent__)), 3)); new Number()) [__proto__.(1e4)];");
tryItOut("if(prototype.__parent__ = __parent__ = 0.1.isPrototypeOf(-3/0)) { if ((this.__defineGetter__(\"__iterator__\", *)).isPrototypeOf(@foo).isPrototypeOf(constructor)) {if([#1=({__parent__: *}) if (<x/>)]) export *; else {export prototype;yield; } }\t else /*infloop*/for(let __parent__; ([11,12,13,14].map) &= <x/>; prop = [([[1]])[<y><z/></y>]].filter(Math.sin)) {return <x><y/></x>;{const constructor; } }}");
tryItOut("return;");
tryItOut("if( \"\" ) { if (constructor) {return; }} else {return; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(let __count__; delete @foo; (<x><y/></x>.unwatch(\"__count__\")) != yield) const [];");
tryItOut("{export __proto__;\n/*for..in*/for(var __parent__ = (export *) in <x><y/></x>) throw  /x/g ;\n }");
tryItOut(";");
tryItOut("/*for..in*/for(let prototype in ((Math.sin)(({prop: new Exception(this)}))));");
tryItOut("L:do {yield;return undefined;\nprop, __proto__ = <y><z/></y>;\n } while((new [<y><z/></y> for each (__proto__ in __count__)]( '' )) && 0);");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(let __iterator__ in ((/a/gi)(window[false]))){constructor }");
tryItOut("L: {M:if((-1) != <><x><y/></x></>) {return;(<><x><y/></x></>); } else  if ((function (prop, __parent__)[3/0].filter(window))((false - true)[(false >>=  '' )].constructor))  else {switch(3) { default: const prototype = <y><z/></y>; }<y><z/></y>; } }");
tryItOut("let(prototype) ((function(){let(__noSuchMethod__ = undefined) ((function(){})());})());");
tryItOut("do __noSuchMethod__, prop; while((-[1](<><x><y/></x></>,  \"\" )) && 0);");
tryItOut("/*infloop*/for(const [({ __proto__: ({ constructor: ({ __parent__: window }), __parent__: ({ __proto__: [({ prototype: ({ __noSuchMethod__: prop }), constructor: __iterator__ }), (prototype), prototype, ], constructor: ({ __proto__: ({ __count__: let(__proto__ = undefined, ;) { export *; }), __noSuchMethod__: __noSuchMethod__ }) }) }), __noSuchMethod__: ({ __iterator__: ({ __parent__: __proto__, __parent__: getter }) = (*.valueOf(\"number\")) ? constructor = __parent__ .@  /x/g  &= <x><y/></x> : [,,z1]: ({ __noSuchMethod__: __proto__ }) }) }), , __noSuchMethod__] = (({ __count__: __parent__ }) = this.__defineGetter__(\"constructor\", <x/>)) -= (p={}, (p.z = __noSuchMethod__+=this)()); (4..__parent__ = ([15,16,17,18].map(function(q) { return q; }, 1.3)) for (( /x/g )(this) in  \"\" ) if ( '' )).eval(new (<x/>.propertyIsEnumerable(\"prototype\"))(delete each[ /x/ ])); constructor.__proto__ getter= ('fafafa'.replace(/a/g, true))) if([constructor = null if (window)]++) return;");
tryItOut(";");
tryItOut("if(<x><y/></x> -= <><x><y/></x></>) {/*infloop*/while(@foo)var __iterator__ = this; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(var  in @foo) gc()/*infloop*/for(let __proto__; true; 1.3) \nlet constructor = prop;\n }");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = \fnew <><x><y/></x></>((window.unwatch(\"prop\"))) === prototype = 0 in function  constructor (__iterator__, prototype) { return *::*; } ((p={}, (p.z = <x><y/></x>)()))) L:if(( /x/ )(false)) {return\nexport __parent__; }");
tryItOut("M:switch((eval(\"export *;\", [[]]).__lookupSetter__(\"prototype\")) .@*:: window) { default: break; break; {; }break; break;  }");
tryItOut("\tconst __iterator__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in [z1]) {yield <x><y/></x>; }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:while(prop - var __parent__ = undefined, __noSuchMethod__;){ \"\" ; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("with(((thisprop: this.zzz.zzz)).yoyo((window ?  ''  : -1))./*__lookupGetter__(\"__count__\"))if( /x/g .valueOf(\"number\").@*) yield;");
tryItOut("__iterator__ = __parent__;");
tryItOut("if(*.hasOwnProperty(\"__noSuchMethod__\")) { if ( \"\" ) {yield; }} else {yield; }");
tryItOut("if(eval(\"__parent__.prototype setter= ((<x><y/></x>).__defineSetter__).apply\", (1e+81 <=  \"\" ))) {{{yield; } }var prop = <x/>; } else  if (__parent__) if(<x><y/></x>) {export *; }");
tryItOut("/*infloop*/M:for(({ __parent__: __iterator__, prop: [, , ({ __count__: ({ prop: ({ <y><z/></y>: prop }) }) })] }) = (p={}, (p.z = false || <y><z/></y>)()); (({ get constructor() { return; } , prop setter: 'haha'.split })).@foo; new (1e4 >>> <x><y/></x>.yoyo(function::__parent__.(true)))) {if((prototype = [[]])) { if ((uneval(window))) {gc() }} else gc() }");
tryItOut("/*for..in*/M:for(delete = 1e4 in <><x><y/></x></>) {throw true;export *; }");
tryItOut("/*infloop*/do {var constructor, __noSuchMethod__;export __parent__; } while((__count__-=<x/>));");
tryItOut("export __parent__;\n");
tryItOut("if((this.__defineGetter__(\"__parent__\", new Function))) { if (1e+81.__noSuchMethod__ = __proto__ = __noSuchMethod__) if(3/0) { if (<x><y/></x>) {return;; } else (yield window;)}} else {if(__iterator__.(<><x><y/></x></>)) { if ([11,12,13,14].sort) {export *; }} else {var prop = null, prototype = this; } }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = 'fafafa'.replace(/a/g, <y><z/></y>) in @foo) export constructor");
tryItOut("let ([({ __noSuchMethod__: __parent__ }), ({ prop: constructor }), , ] = 033) { /*infloop*/for(const prop; <x><y/></x>( \"\" , [,,]); (({__parent__ setter: eval }))) {break ;*::*; } }");
tryItOut("if(let (__noSuchMethod__)  \"\"  .@ undefined) /*infloop*/while(( /x/ .@*)){export *; } else export __count__;");
tryItOut("try { yield; } catch(prototype if __noSuchMethod__ = -1) { var prop, __iterator__ = <y><z/></y>;\t } finally { export prop\t; } ");
tryItOut("if(( \"\"  && this)) try { yield __count__; }  for each (__parent__ in <y><z/></y>)finally { yield 3; }  else  if (constructor = @foo) {export __count__;export *; }\nswitch(<x><y/></x>.hasOwnProperty(\"prototype\")) { case ('fafafa'.replace(/a/g, (0x99).watch)): <y><z/></y>;break; default:  }");
tryItOut("let prototype = #3={a:#3#}, __count__ =  /x/g ;\nreturn; const __iterator__;\n");
tryItOut("const __noSuchMethod__ = __noSuchMethod__ = <x><y/></x>;");
tryItOut("prototype;");
tryItOut("with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.__lookupGetter__(\"__noSuchMethod__\")){gc()/*infloop*/M:do {continue ;throw .2; } while(('fafafa'.replace(/a/g, Math.sin))); }");
tryItOut("with({constructor: yield  \"\" (<><xxx>{__proto__}</xxx></>, eval(\"yield  /x/g ;\", window))}){M:if(true) { if (<x/>) {export __count__;yield this; } else export *;}(__count__); }\n");
tryItOut("L:while(((p={}, (p.z = (__iterator__ = <x/> <  /x/ ))())) && 0)let (constructor, __proto__) { continue ; }");
tryItOut("throw __parent__;");
tryItOut("{}");
tryItOut("/*for..in*/for(var __proto__ in __iterator__) {throw <x><y/></x>; }");
tryItOut("/*infloop*/for(x::prop; [this].sort(('haha'.split).call); false = (p={}, (p.z = -3/0)())) {/*infloop*/while(__parent__){{} } }");
tryItOut("/*for..in*/for(let false['__proto__'] in ((function(y) { yield y; /*infloop*/while(#1=[[]]){{} }; yield y; })([]))){{return  /x/ ;var __count__ = .2, prototype = 3; } }");
tryItOut("let (function::prop = <><x><y/></x></>.__lookupSetter__(\"__count__\"), constructor = ({constructor: true}) & delete  /x/ ) { {throw prop; } }");
tryItOut("/*for..in*/L:for(prototype = (( /x/  >> (__iterator__ = <x><y/></x>)) ? this.__defineSetter__(\"constructor\", <x><y/></x>)([,,z1] .@x::  /x/g , @foo) : (new (arguments)([,]) <<= gc)) in ({ __proto__: __noSuchMethod__, constructor: ({ prototype: throw this; }) }) = true |= <><x><y/></x></>) {L: if(@foo) { if (1e+81) {return prop; } else const prototype = <y><z/></y>;}switch(([* if (window)])\n) { case 9: {return; }\n } }");
tryItOut("gc()");
tryItOut("const prototype = @foo, __parent__");
tryItOut("if(new arguments.valueOf(\"number\").propertyIsEnumerable(\"__count__\")(({constructor: <x><y/></x>, prop: <x><y/></x> }), (({a1:1}).eval((p={}, (p.z = <><x><y/></x></>)()))))) {yield;var prototype = <x><y/></x>; } else  if (let (prototype = *::*) <x/>.valueOf(\"number\")) {;throw undefined; }");
tryItOut("yield *;");
tryItOut("let (__parent__) { eval const __parent__; }");
tryItOut("L:if(([15,16,17,18]\f.some([1,2,3,4].slice, <x/>))) yield <x><y/></x>; else {yield;yield; }");
tryItOut("if( /* Comment */@foo) <y><z/></y> else {export constructor; }");
tryItOut("L: {export prototype;let __iterator__; }\n  set __iterator__(__count__) { return this } ");
tryItOut("{yield this;this }");
tryItOut("/*infloop*/do {gc() } while(__proto__.__noSuchMethod__ = *)\n(<x><y/></x\f>);");
tryItOut("/*for..in*/for(const prop = (__iterator__ = <y><z/></y>) in -3/0) continue ;");
tryItOut("/*for..in*/for(const __parent__ = 'fafafa'.replace(/a/g, (({}).__lookupGetter__).call) in <><x><y/></x></>) yield @foo\n{}");
tryItOut("L:while((({ constructor: ({ __proto__: prop }), __proto__\t: prototype }) = Function(((function (constructor) { yield (-1) } ).call)(<><x><y/></x></>, <><x><y/></x></>))) && 0)switch( get __iterator__() { return (window)(<><x><y/></x></>) } ) { case undefined:  }");
tryItOut("L:if((<x><y/></x> instanceof undefined).*.valueOf(\"number\")) { if (true['constructor'] = ({__proto__: *,  get true(__count__, prototype) { yield this;; }  })) {/*infloop*/for(const constructor; @foo;  /* Comment */undefined ? [1,2,3,4].slice : <x><y/></x>) __noSuchMethod__, __proto__ = *; }} else {export prototype;yield <x/>; }");
tryItOut("with({}) try { (++ /x/g ); } catch(prototype) { let(__parent__ = ([prototype].sort(function (prototype, constructor) { return #1=[#1#] } )), 0.1.__proto__ = prototype += 5.0000000000000000000000) ((function(){try { return [[1]]; } catch(function::prop if 1e-81) { break M; } catch(__noSuchMethod__ if this) { break ; } })()); } finally { return new (<><x><y/></x></>)(); } ");
tryItOut("if(({ set __count__ constructor (({ __parent__: __iterator__, __count__: (: __iterator__ }) }))\n { return eval(\"this;\", eval(\"<y><z/></y>\", false)) }  })) { if (( /x/ )) {}\ncontinue ; else gc()}");
tryItOut("/*for..in*/for(const __noSuchMethod__ in window) {const __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("var __parent__ =  '' ");
tryItOut("if(__parent__) { if ((\n3)) {<><x><y/></x></>;__proto__; } else {export *; }}");
tryItOut("{gc()gc() }");
tryItOut("break \ngc()");
tryItOut("let (({ __noSuchMethod__: constructor }), __count__) { /*for..in*/for(\f[constructor, constructor] = [1,,] == * in <><x><y/></x></>) {{}export *; } }");
tryItOut("if(<x><y/></x>) {return;yield <><x><y/></x></>; } else  if (<x><y/></x>) {return;return <x/>; }");
tryItOut("with(/*\n*/1.3--){{}( /x/g ); const __parent__; }");
tryItOut("M:do {switch((__parent__.__count__ getter= (@foo.__defineGetter__(\"__noSuchMethod__\", (new Function(\"(__noSuchMethod__).__defineSetter__\")))))) { case 1: break;  } } while(((new  /x/g (prototype)).yoyo( \"\" .throw(1.3))) && 0);");
tryItOut("/*for..in*/for(let [prototype, prototype] =  ''  in true) {__noSuchMethod__; }");
tryItOut("/*infloop*/while((__noSuchMethod__ ? (@foo)((p={}, (p.z = #1#)())) : <xxx {__count__}={ /x/ } />)){; }");
tryItOut("with({}) ( \"\" );");
tryItOut("yield;");
tryItOut("while((([ '' ].map((new Function(\";\")))).constructor = ([this for (prop in this)])) && 0){; }");
tryItOut("/*for..in*/for(__proto__ in ((Math.sin)(__parent__ = __noSuchMethod__ :: *))){continue ; }");
tryItOut("/*for..in*/for(const __parent__ = yield 1e+81 in <x/>) {break ; }\n");
tryItOut("__noSuchMethod__");
tryItOut("with({prop: *}){1e4; }");
tryItOut("with({prototype: 033})gc()\nswitch((window.hasOwnProperty(\"__count__\"))) { default: export *;break;  }");
tryItOut("if(<x><y/></\tx>) gc() else  if ((~.2)) [1,2,3,4].map");
tryItOut("\n__proto__;<x><y/></x>;5.0000000000000000000000;");
tryItOut("while((__parent__ = <x><y/></x>) && 0)yield *;/*infloop*/for( /* Comment */new ( '' )(); ({ __parent__: x::constructor, prototype: __count__ }) = <x({ __proto__ = window, function ([y]) { }: __parent__, constructor: __parent__ })><y'/</x>.isPrototypeOf(#1=[#1#]); [11,12,13,14].filter) {(033); }");
tryItOut("/*for..in*/for(0x99\n['__count__'] in [] = ({constructor setter: function  __parent__ () { {} }  })) for(let y in [5,6,7,8]) ;");
tryItOut("this.zzz.zzz;");
tryItOut("do /*infloop*/do {} while((Function(__iterator__, <y><z/></y>))); while(( /x/  >> (-0).__defineSetter__(\"__iterator__\", <><x><y/></x></>)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  /x/ .hasOwnProperty(\"prop\")) {break ;\n\n }");
tryItOut("default: with((eval(\";\", ({ set constructor __proto__ (__proto__, __parent__) { yield <x><y/></x> } , __noSuchMethod__: <x/> }))))/*for..in*/for(var [__count__, __noSuchMethod__] = this.__defineSetter__(\"__parent__\", function(q) { return q; }) in <x><y/></x>) if((@foo)[*]) let prototype, __count__ = false; else  if (<y><z/></y>.__defineSetter__(\"__proto__\", ( /x/ ).watch)) throw null; else export __parent__;");
tryItOut("if((3 , ((new (__parent__)([[]], <x><y/></x>))))) {/*infloop*/M:while(__noSuchMethod__ =  /x/g ){ } } else  if (__iterator__ = function ([y]) { }) return @foo;");
tryItOut("{; }");
tryItOut("if(__count__ = @foo) {continue ;<><x><y/></x></> }");
tryItOut("var __iterator__ = <><x/></>\n");
tryItOut("/*infloop*/L:for(this ^  /x/g ; ({ get __count__(__parent__) { yield Object(((uneval(1e4))), (<x/> for (__iterator__ in <x><y/></x>))) } ,  set __proto__() { __noSuchMethod__ =  \"\" ; }  }); [<employee id=\"1\"><name>Joe</name><age>20</age></employee>]) switch(* || __noSuchMethod__) { default: break; break; case 5: yield this;yield  \"\" ;case 2: yield;break;  }");
tryItOut("\n");
tryItOut("L: {({}).hasOwnPropertyreturn; }\nwith({prototype:  \"\" }){yield; }");
tryItOut("/*infloop*/M:for(const prototype; (p={}, (p.z = @foo)()); *::*.throw( /* Comment */ /x/g ).__count__ = new <\nx><y/></x>()) yield #1=[#1#]\n");
tryItOut("let (__noSuchMethod__ =  /x/g , __proto__ = this) { gc() }");
tryItOut("throw __noSuchMethod__;");
tryItOut("{(prop = *); }");
tryItOut("if(prototype = __iterator__ = (function ([y]) { })()) { if (((delete __parent__) <= (([1,2,3,4].map).call))) {L:if(window.@foo) { if (eval(\"return *::*;\", __noSuchMethod__))  else {let __noSuchMethod__; }}return <><x><y/></x></>; } else {with(3/0){{} }(@foo); }}");
tryItOut("/*infloop*/do {if(this.zzz.zzz) {export *; } else {continue L; }export __parent__; } while((prototype = null(([<x><y/></x>].some(function(y) { yield y; const __noSuchMethod__ = null, constructor;; yield y; })) <= (({}).__lookupGetter__), (p={}, (p.z = <x><y/></x>)()).*)));");
tryItOut("(<y><z/></y>)\n");
tryItOut("switch(new eval()) { default: return;throw *;break; case new (@foo)(this, 5.0000000000000000000000): var __noSuchMethod__ = __noSuchMethod__;case 2: break; case prototype = constructor.@*: {; }break; case <x>//h\n<y/></x>.watch(\"x::__parent__\", function\f (__parent__, __noSuchMethod__) { return <y><z/></y> } \f).prop = __proto__.constructor = *: gcreturn prototype; }");
tryItOut("{L:if((new (( /x/g ).watch)(<><x><y/></x></>)).throw(__iterator__.prop)) yield; else  if (((__parent__ %= <><x><y/></x></>) % ({}))) export *; else {gc()yield; }/*infloop*/M:do  for (__count__ in  \"\" )constructor while(__parent__); }");
tryItOut("{gc()window; }");
tryItOut("return;");
tryItOut("/*infloop*/for(var __parent__ = __iterator__.prototype getter= <y><z/></y> !== __parent__ = yield; <x/>.__lookupSetter__(\"prop\"); prop = *::*) {/*for..in*/for(var __iterator__ = @foo in []) export __parent__;yield <x/>; }");
tryItOut("/*infloop*/do break M; while(__parent__ = <x><y/></x>.yoyo(true));");
tryItOut("/*for..in*/for(const break M;return <x/>; const prop; = (__iterator__ = <><x><y/></x></>.@*).throw(__noSuchMethod__ = arguments) in constructor = __iterator__ === <y><z/></y>) {return (<x/>( '' ));<!--yy--> }");
tryItOut("/*infloop*/for(var yield; (constructor >  /x/g )( /* Comment */__proto__, *); new *(true,  /x/g ) %= (Error())) {__parent__ setter: function(q) { return q; } } const //h\nconstructor;");
tryItOut("/*infloop*/while(1e4){/*for..in*/M:for(__parent__ = new (prop)(({constructor: 4., __noSuchMethod__: [,,] }), 4.) in __parent__) {if( /x/ ) { if (-3/0) export prop;} else gc() }if(true) { if (this) __proto__, __iterator__ = <><x><y/></x></>; else {window;prop = true, prototype; }} }");
tryItOut("do {yield; } while((( =  /x/g )) && 0);");
tryItOut("while(([15,16,17,18].sort(function(q) { return q; }, (gc).call((*.isPrototypeOf(<x/>)), ))) && 0)export *;");
tryItOut("if((!*.throw( '' ))) function ()*::*\nwindow;\n else {(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(let (prototype) ( \"\"  /=  '' ); (Function()).__defineSetter__(\"__count__\", (1 for (x in []))); ({a1:1}).@* >>= \r({__parent__:  /x/  }).watch(\"__proto__\", (--({} .. <x/>))).propertyIsEnumerable(\"__count__\")) {export *;prototype = #1=[#1#], __count__; }");
tryItOut("/*for..in*/M:for(__parent__ = (#1=[#1#]) in __iterator__) return *;");
tryItOut("with(){}");
tryItOut("/*infloop*/M:for(const let; *; prototype) {((function ([y]) { })());export constructor; }\nwith({__count__: function(q) { return q; }.yoyo(function  __count__ () { gc() } ().valueOf(\"number\"))})throw *\n\n");
tryItOut("<x><y/></x>\nthrow true;");
tryItOut("/*infloop*/for(const __iterator__; 1.2e3; new set = <><x><y/></x></> ? prototype%=<x><y/></x> - Object() : (<{__proto__}> </{__proto__}>.([11,12,13,14].map))) export __proto__;");
tryItOut("/*infloop*/L:for(__proto__; (<x><y/></x> << <x><y/></x>) ? <x><y/></x> -= (-1) - <y><z/></y> ? this : this : [prop.((({}).hasOwnProperty).call( '' , ))]; this) break M;");
tryItOut("/*infloop*/for(<><xxx {__iterator__}={window(__proto__)} /></>; (this.__defineSetter__(\"constructor\", [1,2,3,4].slice).valueOf(\"number\")); (prop = <x/>)) return window;");
tryItOut("M:if(prototype = *::*) { if ( /x/  ^ #1#) yield; else {yield; }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __count__ = <x/> || new Exception() in *) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in (<x/>++)) {/*for..in*/for(const constructor in ((gc)(prop))){window; } }");
tryItOut("/*for..in*/\tfor(const [__count__, __parent__] = (this.zzz.zzz) ? this.__defineGetter__(\"prototype\", /a/gi) :  .@ prop.__noSuchMethod__ = * in (033 ^ <x><y/></x>) <  { (<x><y/></x>); } ) { }");
tryItOut("with({}) { let(prototype = (this.zzz.zzz), __count__ = __iterator__ = __noSuchMethod__) { yield this.__defineGetter__(\"prop\", <><x><y/></x></>); } ");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*/for(var __count__ = ((yield ( /* Comment */<><x><y/></x></>) >>>=<x><y/></x>.( /x/g ))) in prop.(<><x><y/></x></>)) {L:if(constructor; = {}) {\n if (<x><\fy/></x> & <x><y/></x>) {(*::*);Math.pow } else {(*::*);L:switch(<><x><y/></x></>) { default:  } }} }");
tryItOut("/*infloop*/for(let prop = <x><y/></x>; <y><z/></y>; <><x><y/></x></>) {export __parent__; }");
tryItOut("if() { } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) var prop, __proto__;");
tryItOut("with({}) yield __count__ = null;");
tryItOut("const __proto__ = ({});\nexport function::__proto__\nbreak L;\n");
tryItOut("switch(let (__proto__ = <x><y/></x>, __iterator__ = function::prototype) prop) { case (new Function(\"yield;\"))(): ;break; default: ;case 2: M:if( \"\" ) var __iterator__; else {throw window;const __proto__ = 0/0; }break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const [prop, __parent__] = [15,16,17,18].map('haha'.split, <xxx>{let}</xxx>) in __parent__.__noSuchMethod__ getter= (this).watch) {yield;[[]]; }");
tryItOut("/*infloop*/for(const __proto__; <>0.1</>.(null); return __proto__) {const prototype; }");
tryItOut("M:while((constructor - 0/0.*) && 0)break L;");
tryItOut("M:while((.2) && 0){return; }");
tryItOut("M:if(__count__ =  \"\" ) __count__ else  if (({__count__ setter: 'haha'.split, prop getter: function\t (({ __noSuchMethod__\t: [] })) { /*infloop*/while((function ([y]) { })()){(new Function(\"constructor\")); } }  }) &= [11,12,13,14].map\n) return  '' ;export *;");
tryItOut("M:switch(window) { default: if((*::* in <x><y/></x>).__lookupSetter__(\"__proto__\")) { if ((<x><y/></x>.__iterator__ = this)) {((<y><z/></y>).apply).call{} } else return arguments; const __iterator__;}break; break; return @foo;break; case (void *::*[constructor|=.2].yoyo(window)): L: (false);\n(*::*);\nbreak; case 5: break; case 0: case 4: const __iterator__;break; case 3: break; export *;break;  }");
tryItOut("/*infloop*/M:while([[prototype, , __count__, ({ __iterator__: __proto__, prototype: function::prototype })], ({ function::prototype: ({ prototype: __iterator__ }), __noSuchMethod__: constructor })]){export __iterator__;yield; }");
tryItOut("/*for..in*/for(var function::__parent__ = new String(<x/>) in <x/>) {yield; }");
tryItOut("throw StopIteration;");
tryItOut("__count__ = __proto__;");
tryItOut("if(((p={}, (p.z =  '' )()))) {gc()yield; } else {continue M;break ; }");
tryItOut("L:if((null.__lookupGetter__(\"prop\")) * (new Function(<><x><y/></x></>))) if(void [3 for each (__parent__ in <><x><y/></x></>)].__defineSetter__(\"__parent__\", [[1]] .@*::  /x/g )((__iterator__.prop setter= function (constructor, __iterator__) { return <><x><y/></x></> } ), <y><z/></y>.*)) yield <x/>; else {;export [[1]]; } else /*for..in*/L:for(function::__iterator__ in ((eval)(prop ?  '' .isPrototypeOf( /x/ ) : (yield prop)))){yield <x><y/></x>; }");
tryItOut("if(<y><z/></y>) {const constructor = <y><z/></y>, <>__parent__</> = prop; } else continue ;");
tryItOut("/*infloop*/L:do {;; } while(((<x><y/></x> && 0x99) .@x:: <><x><y/></x></>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__) in [,]) const __iterator__ = function ([y]) { }, __noSuchMethod__ = *::*;");
tryItOut("M:if( '' ) let __noSuchMethod__, prop = [z1];");
tryItOut("with({}) { <x/>\t; } ");
tryItOut("{if(__parent__\n) { if (([15,16,17,18].filter(/a/gi, <><x><y/></x></>(<y><z/></y>)))) {Functionvar prototype, __proto__ = @foo; } else {{constructor = <x><y/></x>, __parent__; } }} }");
tryItOut("/*for..in*/M:for( \"\"  in ((function  __noSuchMethod__ (__noSuchMethod__, __iterator__) { return [1] } )(Exception(true))))yield;");
