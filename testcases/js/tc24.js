tryItOut("/*for..in*/for(setter.__iterator__ = this.zzz.zzz in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {gc() }");
tryItOut("/*for..in*/L:for(var constructor = <><bbb xmlns=\"(return  ''  if (<x/>))\"><!--yy--></bbb></> in (#1=({__noSuchMethod__: @foo.__lookupSetter__(\"__noSuchMethod__\")}))) throw StopIteration;");
tryItOut("/*infloop*/L:for(var [, __parent__, , ] = [('haha'.split)(@foo,  \"\" )].sort(new Function).hasOwnProperty(\"__iterator__\") &= <x><y/></x> = new Date(<x><y/></x>, null); [,,].@foo.@foo; (\n<><x><y/></x></>).@*) {gc()L: {} }");
tryItOut("{with({}) { this.zzz.zzz; }  }");
tryItOut("/*infloop*/M:do {yield;-0; } while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("if(( /x/g .eval( \"\" ))) {return; } else  if ((new RangeError(undefined, *))) {gc() }");
tryItOut("/*infloop*/for(let prototype; new <><x><y/></x></>(<x><y/></x>); [ /x/ ]) {gc()export *; }");
tryItOut("(undefined / <><x><y/></x></>).__noSuchMethod__ = __parent__;");
tryItOut("if(false) { if ((__proto__)) (<x/>).__defineSetter__ else let __iterator__, __count__ = null;}\n");
tryItOut("break ;\"");
tryItOut("/*infloop*/for((Function).call([,] |= new @foo, __proto__); (({constructor setter: false, __noSuchMethod__:  /x/  }\t) / new this(<x><y/></x>)); (uneval(<y><z/></y>)).@foo) if((((1 for (x in [])))())) { if (\t<><x><y/></x></>\n) ; else {var __parent__, prop;; }} const constructor;");
tryItOut("function  __iterator__ (prototype) { yield constructor; } ");
tryItOut("/*infloop*/for(true; __noSuchMethod__ =  /x/g ; let (delete) __count__) try { prototype, __iterator__ = -1 } catch(__noSuchMethod__) { let __parent__ =  '' , prototype = *::*; } finally { throw this; } ;");
tryItOut("with({__proto__: true})function (__noSuchMethod__)__count__ = ({ __parent__: prop })");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = <y><z/></y> in <x><y/></x>) ;");
tryItOut("if(.2) { if ( \"\" ) {export __noSuchMethod__; }} else {export *;gc() }");
tryItOut("while((constructor = __iterator__) && 0)__iterator__.__noSuchMethod__ = prop;");
tryItOut("if(<x><y/></x> ? <><x><y/></x></> : window) /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__( /x/ ) in null) ; else  if (033) let __noSuchMethod__ = @foo;");
tryItOut("/*for..in*/M:for(let [__iterator__, __parent__] = <x><y/></x> in this) {throw null;yield; }");
tryItOut("/*infloop*/do {return [,]; } while(<x/>.__lookupGetter__(\"constructor\"));{}");
tryItOut("with({__noSuchMethod__: (prototype-=this).propertyIsEnumerable(\"__proto__\")}){L:if([z1,,]) { if (<x><y/></x>.valueOf(\"number\")) {let prop;return __proto__; }} else {var prop, __count__ = this;function  __parent__ (__noSuchMethod__, __proto__) { export *; }  } }");
tryItOut("let(prop = window) ((function(){let(prop) ((function(){throw prototype;})());})());");
tryItOut("/*infloop*/do {/a/giif(prop = [1,2,3,4].slice()) { if (prop) yield window;} else new (1 for (x in []))() } while((this.__defineSetter__(\"__proto__\", gc)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in <><x><y/></x></>) {var prop = window, constructor; }\f\n");
tryItOut("if(\n(({}).__lookupGetter__).call()) { if (false.valueOf(\"number\")) export *;__proto__} else var __iterator__;");
tryItOut("/*for..in*/for(var prop in <x/>--) if((__noSuchMethod__ = 1e+81))  else  if () yield 1.2e3; else gc()");
tryItOut("switch([1,,]) { default:  }\n");
tryItOut("/*for..in*/for(let __parent__ = [window] in *::*) {export *\n }");
tryItOut("case 5.0000000000000000000000 , [1,,]: export __proto__;default: {}break; {}case <x/>: break; case *: yield <><x><y/></x></>;break; case 2: break; if(false) throw arguments; else  if (<y><z/></y>) return (-1); else yield;break; case *::*.throw([1,,]): gc()case 8: continue M;break; \nvar __iterator__;\n");
tryItOut("if(true.@foo) { if ((constructor.__noSuchMethod__)) {}} else function::__parent__ = this;");
tryItOut("if(constructor.__lookupSetter__(\"__proto__\")[<x/> >> <><x><y/></x></>]) { if (#0=([1,2,3,4].map).call((prop|=prop), eval(\"window\", *))) {__noSuchMethod__ = [15,16,17,18].some(function  __count__ (\t) { return __count__; } , __parent__ = __iterator__); } else yield <employee id=\"1\"><name>Joe</name><age>20</age></employee>;}");
tryItOut("/*for..in*/M:for(const __iterator__ in (new (function   { return (new ([1,2,3,4].map)()) }  (__proto__, __noSuchMethod__) { return <x><y/></x> } )())) {__proto__, __iterator__;__parent__ }");
tryItOut("this; const prop; const each;");
tryItOut("/*infloop*/M:do {const constructor\n const __noSuchMethod__;var __proto__, __proto__ =  /x/g \t; } while(<><x><y/><\t/x></> ? [] : <y><z/></y>);");
tryItOut("with({__noSuchMethod__: this /= function(id) { return id }}){ }");
tryItOut("L: break M;");
tryItOut(";\nexport *;\n");
tryItOut("L:if((<xxx {__proto__}={(({prototype: *}))} />.((prototype = <x><y/></x>)))) {return;while((true) && 0) }");
tryItOut("export __proto__");
tryItOut("let (__noSuchMethod__, each = *::*) { switch(__iterator__) { case *::*: new Function\n\n0 } }");
tryItOut("/*infloop*/\tdo {continue L; } while((null && __noSuchMethod__.yoyo(__iterator__+=arguments)));");
tryItOut("while((((true))) && 0)");
tryItOut("switch(0) { default: break;  }");
tryItOut("do {gc()(@foo).__defineSetter__ } while(((<x><y/></x>.(this))) && 0);");
tryItOut("if(new ([15,16,17,18].some((1 for (x in [])), (yield 'fafafa'.replace(/a/g, new Function))).watch(\"__noSuchMethod__\", function(y) { yield y; with({__parent__:  /x/g }){{}; }; yield y; }))((return))) { if (({constructor getter: [1,2,3,4].map,  get __iterator__ prototype () { yield ((({}).__lookupGetter__).apply)().__count__ }  })) {;{yield; } }} else {let __noSuchMethod__;yield <><x><\ty/></x></>; }");
tryItOut("/*infloop*/while((new (null.__defineGetter__(\"__proto__\", Math.pow))())){M:if(prototype) {continue M; }__count__ = __count__, __proto__; }");
tryItOut("let (constructor = null) { yield; }");
tryItOut("throw false;");
tryItOut("/*infloop*/do {/*infloop*/for(let prop; (#1=[#1#] ? <x/> : [,]).__defineSetter__(\"constructor\", (function(q) { return q; }).apply); \nnew Function() >>>=(__noSuchMethod__.__count__ = __parent__)) {with(return ({}).__lookupSetter__(\"__proto__\");.__parent__ = <x><y/></x>\n)(<x><y/></x>);/*\n*/L: {while((<x/>) && 0)var __parent__ = window;L:if(__proto__) { if (<y><z/></y>) {let __parent__ = <><x><y/></x></>, prototype = <x/>; }} else {{} } } } } while(((5.0000000000000000000000 <= @foo) ? false.unwatch(\"constructor\") : new ([1,2,3,4].map)()));");
tryItOut("let (__count__ = this.__defineGetter__(\"__proto__\", ({__parent__: __proto__.prototype }))) { /*for..in*/M:for(var [__noSuchMethod__, __iterator__] = this in <x/>) throw function ([y]) { }; }");
tryItOut("gc()");
tryItOut("if((({__proto__: <><x><y/></x></>, __iterator__ getter: Function })) /= prototype.hasOwnProperty(\"prototype\")) {; } else (<x><y/></x>);");
tryItOut("let(({ __parent__: constructor, prop: [] }), __noSuchMethod__ = 1e4) { let(prop) { constructor = __noSuchMethod__;");
tryItOut("with({}) let(constructor = 1e-81) { { '' ; }");
tryItOut("if(new <><bbb xmlns=\"[,,].yoyo([,,])\"><!--yy--></bbb></>()) /*infloop*/M:for(null; constructor.__proto__; <><><!--yy--></></>) ");
tryItOut("/*infloop*/M:while(new function ([y]) { }(window))yield this;");
tryItOut("({ prop: ({ __iterator__: __noSuchMethod__ }) })\n\n");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __iterator__] = false in <x><y/></x>) throw false;");
tryItOut("L:switch(this) { case  get __iterator__(constructor)<><x><y/></x></>:  }");
tryItOut("__proto__ getter: function  function::__parent__ (__noSuchMethod__) { yield window } ");
tryItOut("/*infloop*/L:while([] = 0x99 .@*:: __count__){}");
tryItOut("/*for..in*/for(__proto__ in []) {yield <x><y/></x>;/a/gi }");
tryItOut("with({__proto__: __proto__})let prototype, ;");
tryItOut("with(([[1]].__lookupSetter__(\"__iterator__\"))){/*infloop*/<x><y/></x>\n }");
tryItOut("if(<x><y/></x>.propertyIsEnumerable(\"constructor\")) throw window;");
tryItOut("\tM:with({prototype: ({ constructor: ({ __proto__: constructor }), constructor: [prop, constructor, prototype, , constructor] }) = __count__.__noSuchMethod__ = window})\fwith(1e4)return __count__;");
tryItOut("/*for..in*/L:for(const prototype in ((window)(window))){[1,2,3,4].sliceexport constructor; }");
tryItOut("{const constructor;{} }");
tryItOut("{} const __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("M:while(((new ( '' .__lookupSetter__(\"__iterator__\"))())) && 0)L:if((false)[]) {return;constructor = * } else  if (((<>-0</>)())) {const __proto__ =  '' , setter = __parent__;yield; }");
tryItOut("if(([11,12,13,14].filter)) (@foo); else  if (yield this * 1e+81 *= window.constructor)  else {continue ; }");
tryItOut("L: return\n");
tryItOut("__proto__; const prop;");
tryItOut("const prototype = undefined, __parent__\nreturn;");
tryItOut("while((__parent__ = __iterator__ =  ''  ?  \"\" .propertyIsEnumerable(\"constructor\") : __noSuchMethod__) && 0){continue L;window; }");
tryItOut("{{} }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("/*for..in*/for(let __count__ in  /x/ ) {__proto__;throw <><x><y/></x></>; }");
tryItOut("(true)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __iterator__ = <x><y/></x>) {export __proto__; }");
tryItOut("/*infloop*/while(new Function)L:if(true) {(<><x><y/></x></>);yield; }");
tryItOut("while((Object([this].some([1,2,3,4].slice), constructor)) && 0)");
tryItOut("{yield <y><z/></y>;eval }");
tryItOut("/*for..in*/L:for(const __parent__ = (-1.constructor = prop: (__noSuchMethod__|=null %= this)) in (let (prop, __iterator__ = undefined) window)) var __parent__ = <x><y/></x>, __proto__;");
tryItOut("/*for..in*/for(prototype =  \"\"  in __count__) prop, __proto__;");
tryItOut("const __proto__ = window;");
tryItOut("L:if(window === false) {{} } else //h\nthrow ;");
tryItOut("M:if(({__iterator__: @foo, prototype: <><x><y/></x></> })) { if (gc) export prop;} else {throw <x/>; }");
tryItOut("M:if(this) { if ([15,16,17,18].sort(gc,  /x/g  > <><x><y/></x></> ?  ''  : [<><x><y/></x></>].map(((<y><z/></y>).call).apply) ?  /* Comment */(-0) : true += [1] -= (this.__defineGetter__(\"__iterator__\", Math.sin)))) {/*infloop*/for(const ({ __iterator__: prop }) = *::*; <><x><y/></x></>.eval(*::*); new  /x/g (__count__, <x/>)) {yield; }if((({ set __proto__ __count__ () { \tyield undefined } ,  set __noSuchMethod__() { return __count__; }  }))) gc() else  if (prop) [1,2,3,4].slice }} else {break\r ; }");
tryItOut("if( /* Comment */(<><x><y/></x></> = (<><x><y/></x></> + <y><z/></y>))) { if (__noSuchMethod__.prototype = 'fafafa'.replace(/a/g, (<><x><y/\r></x><\t/>).watch)) {/*infloop*/for((p={}, (p.z = ((<><x><y/></x></>)(undefined)))()); this.zzz.zzz; __count__ = (prototype |= *::*)) yield 033;L:if(({ set __noSuchMethod__ constructor () { return null }  })) {export *;return; } else {} }} else {gc() }");
tryItOut("/*infloop*/L:do let __parent__; const __noSuchMethod__; while(((uneval(@foo)))[(<y><z/></y> + 0)] ^ __count__ = (let (__noSuchMethod__ =  \"\" , __noSuchMethod__) false));");
tryItOut("throw ((yield <><x><y/></x></> + this));");
tryItOut("if(gc) const __parent__ = __proto__; else  if (({a2:z2}) .@x:: *::*) {var __noSuchMethod__, prototype =  '' ; }");
tryItOut("{}\n/*infloop*/while(undefined){(<y><z/></y>);export __noSuchMethod__; }\n");
tryItOut("if(#1=\fnew (__noSuchMethod__)({})) {M:with((Math.pow).call(<x><y/></x>, [z1,,])){continue L; }L: /* }");
tryItOut("/*for..in*/M:for(let __parent__ = <x><y/></x>[<x><y//*\n*/></x> instanceof <><x><y/></x></>] in [false.__parent__]) {export prototype;\t }");
tryItOut("let (__parent__, constructor) { /*infloop*/while(<x><y/></x>){var constructor, __iterator__;null; } }");
tryItOut("__count__ = prototype");
tryItOut(";(RangeError(<x/> % <x><y/></x>))\n");
tryItOut("/*for..in*/M:for(({ prototype: prototype, constructor: __parent__ }) in (__iterator__[*::*])) {{} }");
tryItOut("do function(y) { yield y; throw ({a1:1});; yield y; } while((let (__iterator__ = <><x><y/></x></>, __proto__ = __iterator__) this[<x/>]) && 0); const __proto__;");
tryItOut("/*infloop*/for(delete *::*; ((this.zzz.zzz).yoyo(<><x><y/></x></> <<= __iterator__).isPrototypeOf(return)); (__iterator__) @  '' ) if(false) { if ((<x/>.propertyIsEnumerable(\"__iterator__\"))) { }} else prototype");
tryItOut("yield 3/0\nyield;");
tryItOut("if(-1 ^ [z1,,].yoyo(((<x/> for (__proto__ in 3/0))))) { if ((*::* in [,,z1].valueOf(\"number\"))) /*infloop*/for(arguments; <><x><y/></x></>; @foo)  else /*infloop*/L:while(__iterator__)function(q) { return q; }}");
tryItOut("for(let y in []);");
tryItOut("L:if(-(constructor = <><x><y/></x></>)) __iterator__ else  if ( /x/ ) {{}{} } else ;");
tryItOut("/*for..in*/for(constructor = ({ __noSuchMethod__: prop }) =  /x/g .hasOwnProperty(\"prop\").@foo in (prototype +=  \"\" ) instanceof ({a1:1})) while((__parent__) && 0){ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (-0) in ((__noSuchMethod__.__count__) = this.zzz.zzz;)) {gc() }");
tryItOut("if(<><x><y/></x></>.unwatch(\"prop\").__lookupGetter__(\"prototype\")) {break ; } else  if ([++[z1,,]]) {const prop = <x><\fy/></x>, prototype = <><x><y/></x></>;yield;throw [1,,]; } else {/*infloop*/for(__proto__ = <x/>; this; __count__ = prototype) /*for..in*/for(let __noSuchMethod__ = __count__ in <x><y/></x>) {var prop = false;gc() } }");
tryItOut("{var constructor;let constructor = <><x><y/></x></>, __count__ = <><x><y/></x></>; }");
tryItOut("{export *;throw <><x><y/></x></>; }");
tryItOut("L:if(<xxx>{__proto__}</xxx> >  /x/  ? <x><y/></x> : <><x><y/></x></> === this.zzz.zzz) {switch( /x/g ) { case 8: if((prototype = <x/>)) { if (([window].sort(this))) constructor = *, constructor = 3/0;} else break L\r;break; default: case 3:  }if( ''  ^ __noSuchMethod__) {L: this; } } else switch(__iterator__ = ({ prop: __parent__, prop: __parent__ }) = 3.141592653589793) { case 9: /*infloop*/for(var __parent__(null) = (this.__defineSetter__(\"__proto__\", function(y) { yield y; continue ;; yield y; })) !== [,,]; __proto__.prop getter= /a/gi === <><!--yy--></>.(this.__defineGetter__(\" get __iterator__ prototype (prototype, __proto__)__noSuchMethod__\",  \"\" )); ([1,,] < [,,z1])) {yield prop;yield __noSuchMethod__; }default: ([]);break; break; case 0: {}break; case 6: break;  }");
tryItOut("yield  /x/g ;");
tryItOut("if((let (prototype, __noSuchMethod__ = prop) this)) {[1,2,3,4].slicelet [z1,,] = <x><y/></x>; }");
tryItOut("/*infloop*/while(yield eval(\"__parent__\", <><x><y/></x></>.prop)){/*infloop*/while(<x><y/></x>){throw <x><y/></x>;yield <y><z/></y>; }/*infloop*/for(var prop = __proto__; <x/>; *::*) {( /x/ );; } }");
tryItOut("while(((<><x><y/></x></>)((-0), -1)) && 0){let __parent__, function::__proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ([(function ([y]) { })() if (function(id) { return id })])) {__iterator__ = function(id) { return id }, function::__proto__; }");
tryItOut("if(<><x><y/></x></> <= @foo) { if () {(window); }} else /*for..in*/M:for(const [constructor, constructor] = <><x><y/></x></> for each (__parent__ in __count__) in 0.1) { }");
tryItOut("yield __iterator__.(<><x><y/></x></>);");
tryItOut("L: /*infloop*/for(var __iterator__; __noSuchMethod__ = null; (prop = function ([y]) { })) let __iterator__, __iterator__;");
tryItOut("let (__iterator__ = ({a2:z2})) { return undefined; }throw @foo");
tryItOut("with(((__parent__.__count__)(#3={a:#3#} ? 1e4 : <x><y/></x>) = (<y><z/></y>.watch(\"constructor\", Function)) << <><x><y/></x></>.this = (__proto__.prototype = this)))yield @foo;");
tryItOut("throw prop;");
tryItOut("if((uneval( /x/ ))) { if ((( /x/g .__proto__).valueOf(\"number\"))) return\ncontinue ; else }");
tryItOut("with(void *::*){return __iterator__;export __count__; }");
tryItOut("/*infloop*/while(*::*[function ([y]) { }]){const __proto__; }");
tryItOut("/*infloop*/for((prototype = 0 /= Number(<><x><y/></x></>, <><x><y/></x></>)); (( /x/  === false)(null++)); @foo++) gc()");
tryItOut("const constructor, constructor;");
tryItOut("for(let y in [5,6,7,8]) let(prop) ((function(){throw 4.;})());");
tryItOut("while((({ set __proto__ prototype () { export *; }  })) && 0)return @foo");
tryItOut("M:if(new [](<x/>)()) export __iterator__;");
tryItOut("/*infloop*/M:for(const [] = (this.__lookupSetter__(\"__count__\")); [,,z1] .@x::  \"\" (); 'haha'.split()) {}");
tryItOut("M:switch( /x/g .\thasOwnProperty(\"__proto__\")) { default: M:if(<><x><y/></x></>) {this } else {{}throw <x/>; }case 0: M:if(<y><z/></y>) { if ([]) {gc() }} else {const prop = 0x99, constructor = <x><y/></x>; }break; ([1,,]); }");
tryItOut("L:switch() { default: case ([[]] .. ()(<x><y/></x>, .2).__count__.throw(this.zzz.zzz)): break; M:switch(({__iterator__: 1.3})) { case <><x><y/></x></>.__lookupSetter__(\"__parent__\"): {} }break; [prototype, __noSuchMethod__] = 1e+81(), constructor = true;break; case ({ __noSuchMethod__: constructor, __noSuchMethod__: prop }) = (<x><y/></x>)[null]: break; break; case * && <><x><y/></x></>:  }");
tryItOut("M:if(0.1 * <x><y/></x>++) { if (<y><z/></y>.__lookupGetter__(\"__proto__\").throw((__noSuchMethod__ = <><x><y/></x></>))) if((<><x><y/></x></> >>= <><x><y/></x></>)) {return <x/>;gc() } else  if (false) yield  /x/ \n} else {return (__count__)(); }");
tryItOut("with({prototype: #1#++\n})export *;");
tryItOut("/*for..in*/for(const __iterator__ in ((({}).__lookupGetter__)(0))){{}throw  '' ; }");
tryItOut("/*for..in*/for(const __count__ = yield;.propertyIsEnumerable(\"function::__proto__\") in this.zzz.zzz) function::prop;");
tryItOut("/*infloop*/for(<><> </></>.constructor = (<><x><y/></x></>.valueOf(\"number\")); <zzz>setter</zzz>.valueOf(\"number\"); (<x><y/></x> <<= \n<x><y/></x>).__iterator__) {export *; }");
tryItOut("\n");
tryItOut("/*infloop*/for(const [__count__] = continue M; [11,12,13,14].sort; eval(\"(Exception())\", __noSuchMethod__.__proto__ = <x><y/></x>)) {yield prototype; }");
tryItOut("{yield; }");
tryItOut("/*infloop*/do /*for..in*/M:for(function::yield in (((<><x><y/></x></>).watch)(3.141592653589793)))<><x><y/></x></>; while(window.*);\t");
tryItOut("/*infloop*/do {var __iterator__; }\r while(#2=(this.__defineSetter__(\"function::prop\", gc)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in __noSuchMethod__.(<x><y/></x> .__noSuchMethod__ -= __proto__ = <x><y/></x>)) {let constructor = window, __proto__;return; }");
tryItOut("L:with(export __proto__)break ;");
tryItOut("if(true.eval((-0))([15,16,17,18].filter(window, this))) return;\n<bbb xmlns=\"null\"><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></bbb>yyy\n else const __noSuchMethod__, __noSuchMethod__;");
tryItOut("L: /*infloop*/do {break ;<x><y/></x>; } while(<x><y/></x>);");
tryItOut("{export *; }");
tryItOut("yield; const __proto__;");
tryItOut("/*infloop*/while(new function  __iterator__ ()__proto__(this));");
tryItOut("prop = constructor;");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("gc()");
tryItOut("__count__ = prototype;");
tryItOut("M:if(constructor.__proto__ setter= Math.sin) switch([1,,]) { case 7: {};break; break; break; default:  } else /*infloop*/M:do {let constructor = prototype, prototype = null; } while(\t<><x><y/></x></>);");
tryItOut("let(prop) { let(constructor) { throw StopIteration;");
tryItOut("/*for..in*/for(let <x/>.<y><z/></y> in <x/>) {__proto__; }\nlet prototype = <x><y/></x>, __iterator__ = constructor;");
tryItOut("with({prototype: (__proto__ /= __proto__\t).constructor}){window }");
tryItOut("if((({__iterator__: <><bbb xmlns:ccc=\"<><x><y/></x></>.__lookupGetter__(\"__count__\")\"><ccc:eee></ccc:eee></bbb></>}))) {return [1,,]\n/*for..in*/for(__noSuchMethod__ in ((({}).hasOwnProperty)(delete __proto__))){let prop, __noSuchMethod__;yield; } }");
tryItOut("{/*infloop*/do {gc() } while((this.__defineGetter__(\"prop\", function (get, __noSuchMethod__) { const constructor, __parent__; } ))); }");
tryItOut("\fif((function ([y]) { })()\r instanceof prototype) { if (([prototype].filter(function(y) { yield y; undefined;; yield y; }))) export prototype;} else yield; const constructor;");
tryItOut("/*infloop*/M:for(let __iterator__ =  = true.isPrototypeOf(__noSuchMethod__)(); [1]; -0) if( /x/ ) {yield;(@foo);\nreturn <x><y/></x>;\n } else  if (({__parent__: <x/> ? @foo :  \"\"  })) {if(this.__defineGetter__(\"__parent__\", function () { gc() } )) return undefined; else {(4.); } }");
tryItOut("__iterator__ = getter;");
tryItOut("/*infloop*/for(<x><y/></x> for ((__noSuchMethod__) in __count__) for (__count__ in  /x/ ); (!<x/>).eval(([15,16,17,18].sort(window, <><x><y/></x></>))); new ( \"\" )()) export constructor;");
tryItOut("/*for..in*/for(const [__proto__, __proto__] =  \"\"  in prototype) {(<><x><y/></x></>);; }\n");
tryItOut("export setter;");
tryItOut("L: {{}gc() }");
tryItOut("{export __parent__; }");
tryItOut("prop = __proto__;");
tryItOut("/*for..in*/for(const prototype = <x/> in  /x/ ) {({a2:z2});(*); }");
tryItOut("L:with({__proto__: ({ constructor:  }) = (__noSuchMethod__.constructor)})/*infloop*/L:for(let __noSuchMethod__; !({}).unwatch(\"__noSuchMethod__\"); __parent__ = (String(window, @foo))) {export *;export *; }");
tryItOut("return *::*;");
tryItOut("{{} }");
tryItOut("let (__parent__) { /*infloop*/for([,,]; null; -3/0) {yield null;const __count__, __proto__; } }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.prototype in function ([y]) { }) yield;");
tryItOut("if( '' ) { if (window) {return; } else {; }}");
tryItOut("let (__count__) { var __proto__ = <x/>; }");
tryItOut("L: {(1 for (x in []))if(this) {constructor = this; } else  if (window) {(<x><y/></x>); } }");
tryItOut("let(constructor, __iterator__) ((function(){gc()})());");
tryItOut("export *;let __count__, __proto__; const __noSuchMethod__;");
tryItOut("let(__noSuchMethod__) ((function(){if(*) {} else {var constructor, __count__ = this; }})());");
tryItOut("/*for..in*/for(let constructor in <y><z/></y>) return;");
tryItOut("((-0));");
tryItOut("let (prototype) { /*for..in*/for(let __noSuchMethod__ = prop = <x><y/></x> in (<x/> - [,,])) {} }");
tryItOut("prop = __noSuchMethod__;");
tryItOut("if(([(this.__defineSetter__(\"__proto__\", <x/>))])) {const prop = <y><z/></y>, prop; }");
tryItOut("if((constructor = -3/0)) {;throw  \"\" ; } else export *;");
tryItOut("return <x><y/></x>;\n/*infloop*/for(<x/>; <><x><y/></x></>; 4.) {export *; }\n");
tryItOut("throw __proto__;");
tryItOut("if([<x/> for each (__noSuchMethod__ in <y><z/></y>)]) { if ((* ? <><x><y/></x></> : <x/>)[__parent__\n] - ({ __iterator__: prop, prototype: prototype }) = prototype) {[1,2,3,4].map }} else {yield <><x><y/></x></>;const prop; }");
tryItOut("/*infloop*/for(__proto__ = new Iterator(<><x><y/></x></> /= <x><y/></x>,  /x/ ); new new ((1 for (x in [])))()(yield undefined, ([] ? undefined : #1=[#1#])); (( \"\" ).apply)(__proto__ < <><x><y/></x></> ? * : (('haha'.split).call(<x/>, )))) if(prototype.@*) { if (prop /= window) continue ;} else {false;const prototype; }");
tryItOut("if( \"\" ) {yield; } else  if (prop) continue ;");
tryItOut("/*for..in*/L:for(let [__iterator__, __proto__] = (<x/> in false).constructor = new window() in 1e81) return <><x><y/></x></>;");
tryItOut("let ([__parent__, , __parent__, prop] =  /x/g ) { yield; }");
tryItOut("while((\f<x/>) && 0)0x99;\ngc()\n");
tryItOut("with({__parent__: null.isPrototypeOf(prototype.default: gc() const prop;).__defineSetter__(\"__iterator__\", (({}).__lookupGetter__).call)})yield");
tryItOut("M:if( '' ) /*infloop*/for(window.isPrototypeOf(function(id) { return id }); <><x><y/></x></> .@x:: ({a1:1}); new const prop,  = false;()) return; else  if (0x99) return;");
