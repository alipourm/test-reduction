tryItOut("if(<x><y/></x>) { if (((constructor for each (constructor in <x><y/></x>)))) gc() else {export *; }}");
tryItOut("/*for..in*/for(prototype in ((({}).__lookupGetter__)(#0=({function::__noSuchMethod__:  \"\" })))){throw *; }");
tryItOut("yield;");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; new Function(function () { yield eval(\"var __count__, __proto__;\", <><x><y/></x></>.__lookupSetter__(\"constructor\")) } ((set = <><x><y/></x></>\n), @foo.prototype)); false.valueOf(\"number\")) /*for..in*/for(let __parent__ = *::* === this in this) {throw window;; }");
tryItOut("/*infloop*/for(let __iterator__ = <x/>; 3;  /x/g ) continue ;");
tryItOut("return;");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/L:for(('fafafa'.replace(/a/g, function  __count__ (__proto__, __count__) { yield new <x><y/></x>() } ));  /* Comment */[]; prop = (<y><z/></y>.__lookupGetter__(\"__proto__\") in (033.@*)), __count__ = false === 1e-81) {M:if(4.) (<><x><y/></x></>); else {throw <><x><y/></x></>; } }");
tryItOut("*::*;");
tryItOut("try { __noSuchMethod__ = __noSuchMethod__; } finally { let((* >>=  \"\" ) = ( /x/  / (new window( /x/ ))), prototype = [null].sort( /x/ )) ((function(){this.zzz.zzz;})()); } ");
tryItOut("{/*infloop*/for(let __proto__; <><x><y/></x></>; <x><y/></x>) {yield @foo;(033).__defineSetter__ }\nthrow true; }");
tryItOut("const __parent__;\n{L:with({prop: prop}){<x><y/></x> }M:with( \"\" ){export __noSuchMethod__; } }\n");
tryItOut("if((constructor , <x/>.__defineSetter__(\"constructor\", (__noSuchMethod__).call))) ; else  if ([(-0)].some(/a/gi) !== ((constructor =  \"\" ) != (let (constructor, __noSuchMethod__ =  '' )  '' ))) {yield; } else {__parent__;return <x/>; }");
tryItOut("/*for..in*/for(let [setter, __noSuchMethod__] = __noSuchMethod__ in (-1)) {export __count__;const __parent__, prop = constructor; }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = __noSuchMethod__ ^ (__parent__ for each (prop in this)) ? (({ __parent__\t({ __parent__: ({ constructor: prototype, __count__: __proto__ }) }) }) = constructor.__parent__ = <x><y/></x>) : * in (p={}, (p.z = <x><y/></x>)())) this.zzz.zzz;");
tryItOut("switch([[1]]) { case window: break;  }\n/*for..in*/M:for(var __iterator__ in ((1e4)( '' ))){yield [,]; }\n");
tryItOut("L: export *;(this);");
tryItOut("throw this;\n{}\n");
tryItOut("with({__proto__: <x><y/></x>[ \"\" ]})let __parent__ = __proto__;");
tryItOut("M:do \t{export __count__; } while((@foo.__parent__ = <y><z/></y>) && 0);");
tryItOut("/*infloop*/for(null; <><x><y/></x></>; this) const prototype = window, prototype = <><x><y/></x></>;");
tryItOut("with({__parent__: (new (__noSuchMethod__ = <><x><y/></x></>)())}){prototype =  '' , prototype = <y><z/></y>;continue M; }");
tryItOut("/*infloop*/while((this.__defineGetter__(\"constructor\", ((1 for (x in []))).call)).__defineGetter__(\"constructor\", function(y) { yield y; if(1.2e3) {continue ; }; yield y; })){<x><y/></x>; }");
tryItOut("M:\rswitch((( /x/ )[<y><z/></y>])) { default: break; case 6: break;  } const prototype;");
tryItOut("/*infloop*/for(var constructor = [,]; 1.3; <y><z/></y>) false");
tryItOut("/*infloop*/L:do {let (constructor, __noSuchMethod__) { ; } } while(Iterator());");
tryItOut("throw @foo;\n{}\n\nthrow <><x><y/></x></>;\n");
tryItOut("throw [,];yield prop\n([[]]);");
tryItOut("/*infloop*/while(-1(null))let __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("with((<x/>.__proto__))*::*\nreturn;");
tryItOut("{*::*;M:if(()) {var __proto__;var __parent__; } else  if (( /x/g  for each (prop in ({a2:z2})))) {return __count__; } }");
tryItOut("[1,2,3,4].slice\nyield;\n");
tryItOut("if(<x/>) { if (prototype.__defineSetter__(\"__parent__\", 'haha'.split)) ; else const constructor =  /x/ ;}/*for..in*/for(let __count__ = this in <x/>) {function  prototype () { yield  /x/g  }  }");
tryItOut("/*infloop*/M:while((p={}, (p.z = *)())){export __parent__; }");
tryItOut("L:do {case new new Function(prototype): break; break ;break; default: break; export __iterator__; } while(([z1,,].hasOwnProperty(\"prop\")) && 0);");
tryItOut("throw __count__;");
tryItOut("if(<y><z/></y>) {while((window) && 0){{}prop } } else  if (eval([,], arguments)) (default: (<x><y/></x>);break; case @foo: break; case 3: break; case <x><y/></x>: case __iterator__: break; case null: break; break; case 4: break; case 9: Functionfunction (__count__, prop)case <x/>: ); else return @foo;");
tryItOut("/*infloop*/L:while(((this).watch(window))){return;continue/*\n*/ ; }do __iterator__, __count__; while((#0=\t({getter: <y><z/></y>})) && 0)\ngc() const __count__;");
tryItOut("if(__iterator__) {let __noSuchMethod__, constructor;break L; } else  if ((__iterator__ || 1.3)) {export *;break\f \n } else constructor = 5.0000000000000000000000;");
tryItOut("switch((([window for each (prop in  \"\" )] for (__parent__ in <x/>) for (__noSuchMethod__ in __noSuchMethod__)))) { default:  if (*::*)break; L: {__noSuchMethod__ = <x/>;{} }break; gc()break;  }");
tryItOut("if(__proto__ = *) { if (({constructor: 3})) {(<><x><y/></x></>); } else return;}");
tryItOut("if(<x><y/></x> === 1.2e3.__defineSetter__(\"function::prototype\", <x><y/></x>)) { if ([1,,]) prop, __noSuchMethod__;} else <><x><y/></x></>;");
tryItOut("(<x><y/></x>)\n");
tryItOut("gc()");
tryItOut("/*infloop*/for(var __iterator__ =  /x/g  |= <x/>; <x><y/></x> & arguments; undefined.__lookupSetter__(\"__iterator__\")) {while((<x/>) && 0){let __proto__; }gc() }");
tryItOut("while((constructor = (__parent__ = this)) && 0)");
tryItOut("{throw __parent__; }");
tryItOut("var __noSuchMethod__ =  '' , constructor = undefined;\t const __noSuchMethod__;");
tryItOut("try { @foo.__parent__ = prop; } catch(__proto__) { \fL:if( \"\" .prop) gc() else  if ( /* Comment */<x/>) return 0x99; else gc() } finally { try { export __noSuchMethod__; } finally { {} }  } ");
tryItOut("let (__iterator__ = (eval(\"return;\", constructor = <>\t<x><\fy/></x></>)), __count__ = [<><x><y/></x></> for (prototype in  '' )]) { if(true) { if ((uneval([z1,,]))) L:if(({a1:1})) \t{ if (*::*) {export prop; } else {export *; }}} else yield __iterator__; }");
tryItOut("yield;");
tryItOut("{return <><x><y/></x></>; }\nyield __proto__;");
tryItOut("/*infloop*/M:for(__iterator__; 1e+81; <><x><y/></x></>) {export __count__; }");
tryItOut("with({}) return;");
tryItOut("let (__count__ = (prototype), __parent__) { with(([11,12,13,14].some)){L:if( /x/ ) {export prototype; } else return; } }");
tryItOut("M:if(this.zzz.zzz.hasOwnProperty(\"__parent__.prop\").isPrototypeOf(-<x/>) ? (({ [1]: [({ __count__: __parent__ }), , __proto__, ] }) = prop\f) : ('haha'.split)(<x><y/></x>, @foo)) {switch(constructor) { default:  } } else {with({__parent__: \t<><x><y/></x></> %=  /x/g })yield undefined;(undefined); }");
tryItOut("L:if(*) { if (__iterator__.prop setter= Math.sin)  else {\tif(__proto__) { if (<><x><y/></x></>) {}} else {{} }function  prop (each, __parent__) { var prototype; }  }}");
tryItOut("/*for..in*/M:for(var [prop, __count__] = new Function() in (<x><y/></x>)(*).isPrototypeOf(__count__ = <><x><y/></x></>)) function  constructor ()this");
tryItOut("/*infloop*/L:for([] = let(__parent__ = default: case 6: break; case (*.isPrototypeOf(<y><z/></y>)) !== function ([y]) { }: /*for..in*/for(const function::__parent__ in <x><y/></x> && <x><y/></x>) {continue ;var __iterator__; }) ((function(){throw __count__;})());; __parent__ =  \"\" .isPrototypeOf(true); <x/>) {__iterator__, __parent__ = this; }");
tryItOut("L: export *; const __parent__;");
tryItOut("while((prop.__count__ getter= (-0).watch) && 0)yield");
tryItOut("L:if(__iterator__.((constructor =  \"\" .hasOwnProperty(\"constructor\"))) !== <><{__iterator__}> </{__iterator__}></>) { if (eval(\"(this.zzz.zzz)\", ((-0) != null.__lookupSetter__(\"__noSuchMethod__\")))) let (constructor = yield \n#3={a:#3#}, ({ prop: constructor, prototype: constructor })) { for(let y in []); } else return <x><y/></x>; const __parent__;}");
tryItOut("do {let __count__ = <x><y/></x>;yield; } while(((<y><z/></y>)) && 0)\n");
tryItOut("/*infloop*/do if(( '' --).valueOf(\"number\")) {gc()export *; } while(( /* Comment */this.__defineSetter__(\"constructor\", #3={a:#3#})));");
tryItOut("for(let y in [5,6,7,8]) var prop;");
tryItOut("if(([[]])[<x><y/></x>]) {export *;export constructor; }");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = __noSuchMethod__ = (-0), __iterator__ in __proto__.watch(\"__iterator__\", [1,2,3,4].map)) {}\f");
tryItOut("__noSuchMethod__ = x::prototype;");
tryItOut("__iterator__\n");
tryItOut("/*infloop*/while(window)with((this.__defineSetter__(\"__noSuchMethod__\", (<x><y/></x>).apply)))if(<y><z/></y>) {export *;var __proto__ = 033, prop = this; } else  if (undefined\f) var undefined, __count__; else return  /x/ \t;");
tryItOut("1.2e3");
tryItOut("do {/*for..in*/L:for(let [__count__, __noSuchMethod__] = <x><y/></x>.(<x/>) in <y><z/></y>) {}/*for..in*/for(const [__parent__, __noSuchMethod__] = constructor = prototype in <x/>) {const __noSuchMethod__;break ; } } while(((__parent__ = (__count__.prototype.__noSuchMethod__ = false.isPrototypeOf(prop)))) && 0);");
tryItOut("L: {return  \"\" ; }");
tryItOut("try { return; } finally { yield 'fafafa'.replace(/a/g, function (__iterator__, __count__)[1].valueOf(\"number\")); } ");
tryItOut("\n");
tryItOut("let (({ __iterator__: (1.3)(false) }) = ((uneval((@foo.propertyIsEnumerable(\"constructor\"))))), []) { {/*infloop*/for(__iterator__;  /x/g ; [[]]) {(<y><z/></y>); } } }");
tryItOut("{}\n");
tryItOut("let(prototype, constructor) ((function(){for(let y in []);})());");
tryItOut("M:if((eval(\"*::*\", prop))++) { if ( /x/g .eval(__proto__) ? [undefined] : [z1,,]) constructor else return;}");
tryItOut("/*for..in*/for(__parent__ in <x/>) ");
tryItOut("/*infloop*/for(const __count__ = __iterator__; @foo; prototype) {yield; }\f");
tryItOut("throw __count__;");
tryItOut("/*for..in*/M:for(prop in __iterator__ = *::*) {if(*::*.__noSuchMethod__) { if (constructor = <><x><y/></x></>) {export __iterator__; } else ({}).hasOwnProperty} }");
tryItOut("{}\n/*infloop*/L:for(var prototype; ({prop getter: function(q) { return q; } }); (<y><z/></y>[ /x/g ])) {;yield; }\n");
tryItOut("return 1e81");
tryItOut("/*infloop*/M:for(prototype; (__proto__.propertyIsEnumerable(\"\\n '' \")); (Math.sin)()) /*infloop*/M:for(let __parent__ = __parent__; *::*; 1.3) {(false); }");
tryItOut("while((new (<x><y/></x>)(\r<><x><y/></x></>)) && 0){break ;{} }");
tryItOut("with({}) { /*for..in*/for(let __count__ = undefined in <y><z/></y>) {yield; } } ");
tryItOut("yield *;");
tryItOut("yield;");
tryItOut("if(<><x><y/></x></>) //h\nthrow false\n__proto__ = __parent__;");
tryItOut("with({__count__: ({prototype getter: new Function })\r})gc()");
tryItOut("{/*infloop*/L:do __iterator__ = -3/0, prop; while(0); }");
tryItOut("L: {gc()gc() }");
tryItOut("{}");
tryItOut("/*for..in*/L:for(const constructor = function::__count__ < window if (<x/>) in <x><y/></x> .. *) gc()");
tryItOut("gc()");
tryItOut("for(let y in [5,6,7,8]) with({}) return;");
tryItOut("<><ccc:ddd></ccc:ddd></>");
tryItOut("throw StopIteration;");
tryItOut("{<><x>\n<y/></x></>;gc() }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = [1,,] in function ([y]) { }) {;export *; }\n");
tryItOut("let (({ __count__: ({ __iterator__: ({ \f__noSuchMethod__: __iterator__, __iterator__: __noSuchMethod__ }), constructor: prototype }) }), __iterator__ = [11,12,13,14].some ^= this.isPrototypeOf(0/0)) { if((prop.__iterator__ = 033)) null; else {var __parent__;export *; }\nFunction\n }");
tryItOut("/*for..in*/L:for(const __iterator__ in 1.3) [z1,,]");
tryItOut("/*infloop*/M:for(let (prop = <><x><y/></x></>, __proto__) <x><y/></x>; let (__count__ = ((<x><y/></x>.(@foo))())) <x/>; constructor\n = prop = <><x><y/></x></>/*\n*/) {L:if((++(<x><y/></x>.( /x/ )) <= <x/>)) return; }");
tryItOut("L:if(function () { return *::*.watch(\"__parent__\", function(y) { yield y;  /x/g ; yield y; })\n } (<>[15,16,17,18].sort([1,2,3,4].map, [[]])</>\t)) { if (prop = #1=[#1#]) const prototype = <x><y/></x>; else break ;}");
tryItOut("1e4");
tryItOut("/*infloop*/L:while(3.141592653589793)M:if(((constructor))) { if (this.zzz.zzz) continue ;} else {{;(prop); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var eval(\"export __noSuchMethod__\\t;\", window) in 3/0(<><x><y/></x></>,  /x/ )) yield;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const prototype in ((Math.pow)(<><x><y/></x></>))){prototype__iterator__ }\nyield;");
tryItOut("{return; }");
tryItOut("let __proto__, __parent__;");
tryItOut("return *::*;");
tryItOut("yield;*::*;\n/*for..in*/for( in ({}.__lookupGetter__(\"prototype\"))) {let __iterator__ = false; }\n");
tryItOut("/*infloop*/for(var /*\n*/({ window: __noSuchMethod__, __noSuchMethod__: __noSuchMethod__ }) = ( '' .__lookupSetter__(\"__proto__\").__defineGetter__(\"prop\", Math.pow).valueOf(\"number\")); Iterator(0x99, window) ? this.zzz.zzz : window; (<x><y/></x> ? <x><y/></x> : prop)) let __parent__ = <><x\t><y/></x></>, prop = this;");
tryItOut("__parent__");
tryItOut("switch(false) { default: M:if(__proto__ = <><x><y/></x></>) {yield;with({constructor: arguments}) } else {{(-1);(@foo); } }break;  }");
tryItOut("/*infloop*/M:for(let prototype; @foo; <><x><y/></x></>) {[1,2,3,4].map(<><x><y/></x></>); }");
tryItOut("M:with(__iterator__){}");
tryItOut("/*for..in*/for(__parent__ = Function in (<y><z/></y>.eval(3))) ");
tryItOut("{gc()if(constructor.__proto__ = * % 4.) { if (<><x><y/></x></>.valueOf(\"number\")) {export *;;; }} else {__count__ =  \"\" ; } }");
tryItOut("let(__parent__, [] = __count__.prototype = @foo) { for(let y in [5,6,7,8]) throw prototype;");
tryItOut("if(new <y><z/></y>(<x><y/></x>, <x/>).__defineSetter__(\"if(window) return; else {(<><x><y/></x></>);export *; }\", false).@foo) {continue ;if([,,z1]) { if ( new ) {var __noSuchMethod__; } else {yield; }} }");
tryItOut("/*infloop*/for(setter;  \"\" ;  \"\" ) throw prop;");
tryItOut("with([__parent__] = <><x><y/></x></>){/*for..in*/for(let (prototype) in ((function(y) { yield y; switch((new (-1)())) { default: throw <x/>;break;  }; yield y; })(\nfunction(id) { return id } in #0=[(prop = 1.2e3)]))){L: {throw undefined;break L; } } }");
tryItOut("if(1e+81) {<y><z/></y>;throw false; } else  if ((yield <x><y/></x>)) export prop; else return this;");
tryItOut("while((<x/>) && 0)/*for..in*/for(const [__proto__, __parent__] = (({__count__ getter: (Math.sin).call, __count__: ( /x/g  += true |= false *= prop) })) in __proto__.__noSuchMethod__ getter= __proto__) {export __iterator__; }");
tryItOut("/*for..in*/for(let [__proto__, prototype] = -1 in [1,,]) gc()");
tryItOut("/*infloop*/while(undefined){let __parent__;let prototype = 1e4, __count__; } const prop;");
tryItOut("/*infloop*/for([, ({ prototype: __noSuchMethod__ }), , ] = (let (__parent__ = *, __iterator__ = <><x><y/></x></>) #1=[#1#]); ([3]) % __proto__.unwatch(\"constructor\"); <>(<><)y/></(__iterator__) x></>.__noSuchMethod__.prototype) yield\n/*infloop*/do {false;return; } while(*);\n\n");
tryItOut("/*for..in*/for//h\n(var [prototype, __parent__] = ([<><x><y/></x></>.@foo].sort(({}).__lookupGetter__)) in  /x/ ) yield;");
tryItOut("/*infloop*/do {break //h\n; } while(*);");
tryItOut("try { this.zzz.zzz; } finally { let(constructor = <><x><y/></x></> -= <y><z/></y>) ((function(){this.zzz.zzz;})()); } ");
tryItOut("/*infloop*/for((<y><z/></y> < <x><y/></x>)(true for each (__noSuchMethod__ in undefined) in <x><y/></x>.(<y><z/></y>)) = eval(\"const __iterator__ = *;\", this) *= (0 instanceof 3/0) *= #0=[<x><y/></x>]; (this.__defineGetter__(\"__noSuchMethod__\", function  __proto__ (prop)RegExp())); ({\tconstructor: \t*::* || <x/> :: (constructor = (<x><y/></x>.(window))),  set constructor __noSuchMethod__ () { {} }  })) /*for..in*/for(const [__proto__, prop] = (*::*.__defineGetter__(\"__proto__\", new Function)) in <><x><y/></x></>) gc()");
tryItOut("/*for..in*/for(let const [] = ({ __iterator__: prototype }) = [[]] -= true\t, constructor = this.unwatch(\"function::__noSuchMethod__\"); in ((({{}export *;{} }).watch)({}))){M:while((__count__.__proto__ = * * undefined) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.setter in {}) __iterator__ getter: * }");
tryItOut("if( /x/g .prop.__parent__ = 'fafafa'.replace(/a/g, (new Function(\"return;\")))) { if (3/0.prop) eval else ;}");
tryItOut("for(let y in [5,6,7,8]) try { __parent__ } finally { for(let y in []); } ");
tryItOut("if(//h\n([11,12,13,14].sort))  else  if ([11,12,13,14].some) {break L; } else {continue ; }");
tryItOut("M:do try { with({}) { ; }  } finally { export *; }  while((this.__defineGetter__(\"__iterator__\", [1,2,3,4].map)) && 0);");
tryItOut("{if(__iterator__) { } else {throw 1.3; }export *\ngc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in constructor) {{} }");
tryItOut("let (prop = (__iterator__.(window))) { /*for..in*/L:for(constructor in ({})) let (__count__, __parent__) { L:with(__count__)export __noSuchMethod__; } }");
tryItOut("/*infloop*/do {const __count__ = __count__, __parent__;/*for..in*/for(var prop = ((5.0000000000000000000000 + <><x><y/></x></>) /=  /x/g ) in <x><y/></x>) {<x><y/></x>; } } while((--<x/>.unwatch(\"*\")));");
tryItOut("/*infloop*/while((-1)){yield @foo;if(([11,12,13,14].filter)) { if (undefined) {return;return; }} else {\fexport __count__; } }");
tryItOut("(0/0);");
tryItOut("L: throw (<{prop}><x><y/></x><!--yy--></{prop}>.((({constructor: true }))));");
tryItOut("<x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (__proto__) in <y><z/></y>) {gc() }");
tryItOut("/*infloop*/for( /* Comment */(<x><y/></x>.watch(\"constructor\", Math.sin)); (({ constructor: __noSuchMethod__, __proto__: __iterator__ }) = ({ prop: __count__, __count__: __parent__ })); ) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(yield (<><x><y/></x></>)[<x><y/></x>].__parent__ in ( /x/g ).__defineSetter__) let (({ __proto__: ({ __parent__: constructor, __parent__: __proto__ }) }), __proto__ =  /x/g .__lookupGetter__(\"constructor\")) { /*infloop*/for(var prototype; ( /* Comment */ \"\" ); @foo.__parent__) __noSuchMethod__ = <x/>; }");
tryItOut("M:with(~undefined)const __proto__, __count__; const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\tconst ({ __parent__: __parent__ }) in this &=  \"\" ) {gc() }");
tryItOut("return; const getter;");
tryItOut("yield prop = <><x><y/></x></> -= [1];");
tryItOut("if() { if (( /* Comment */(({ __noSuchMethod__: __count__ }) = \n__count__.hasOwnProperty(\"__proto__\")))) Math.sin} else {var __count__, __parent__ = function::__count__\nyield  '' ; const __proto__; }");
tryItOut("let __iterator__, prototype = gc();/*for..in*/M:for([__noSuchMethod__, __noSuchMethod__] = (constructor.__parent__) in <><x><y/></x></>) let __proto__ = <><x><y/></x></>;");
tryItOut("let (prop) { ; const prototype; }");
tryItOut("if(constructor) { if ( \"\" ) const prop = eval(\"export __proto__;\", @foo); else /*infloop*/for(({ prototype: __count__, constructor: __parent__ }) = eval(\"4.\",  '' ); <x><y/></x>; ([15,16,17,18].filter(((function  prototype (__proto__, constructor) { return; } ).apply).call, ({})))) }");
tryItOut("/*infloop*/for(__iterator__ = (function ([y]) { })(); (new Function(\"[1,2,3,4].map\"))(1e4,  \"\" ); (++<><x><y/></x></>).prototype) ({}).hasOwnProperty");
tryItOut("M:if(__parent__ = __iterator__.eval(__iterator__.(<x><y/></x>))) { if ([15,16,17,18].filter( \"\" , null)) {return *;yield true; } else {yield @foo; }}");
tryItOut("M:do if((p={}, (p.z = function(id) { return id })()).__defineSetter__(\"__count__\", (1 for (x in [])))) {let __noSuchMethod__\f; } else  if (\r__iterator__ = this) constructor; while(((uneval(@foo .@ <y><z/></y>))) && 0);");
tryItOut("/*infloop*/for(__count__; __proto__; ({ __noSuchMethod__: __proto__, __parent__: __count__ }) === true) return __proto__;");
tryItOut("with({}) { constructor.__parent__ = __count__; } ");
tryItOut("do {let constructor = this;function(y) { yield y; export *;; yield y; } } while((__count__ = true) && 0);");
tryItOut("with({}) for(let y in [5,6,7,8]) let(prototype = false, __proto__ =  \"\" ) ((function(){})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in ((p={}, (p.z = <x/> += <x><y/></x>)())) <<= \nwindow * new __iterator__(<><x><y/></x></> >>> __parent__)) {/*for..in*/M:for(\tconst prop in (this.zzz.zzz)) {L:if(5.0000000000000000000000) {; } else { } } }");
tryItOut("if((new Object([,], __proto__))) {/*infloop*/for(let __proto__ =  /x/ ; *; <x/>) <x/>; } else  if ((window)(@foo)) {{} } else {throw <y><z/></y>;gc() }");
tryItOut("M:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {this;export *; } else {export *; }");
tryItOut("/*infloop*/for(var prototype; <y><z/></y>; [11,12,13,14].some) {constructor, __iterator__ =  '' ;export *; }");
tryItOut("/*for..in*/for(constructor = <x><y/></x> in @foo) {var constructor, prop; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <y><z/></y>) {throw window; }");
tryItOut("{/*for..in*/prop = (@foo.unwatch(\"__noSuchMethod__\"))( \"\" ); }");
tryItOut("let (__proto__ = false) { var __iterator__; }");
tryItOut("{#1#;if(__count__) yield 4.; else {var prototype, __iterator__ = #1=[#1#]; } }");
tryItOut("break ;");
tryItOut("if([11,12,13,14].filter) { if (((0x99.eval([[1]])))) export __noSuchMethod__;} else {let(prototype = prototype, yield) ((function(){throw @foo;})()); }");
tryItOut("/*for..in*/for(var function::yield.__proto__ in ((function  __proto__ (({ __count__: ({ __parent__: __iterator__ }), __noSuchMethod__: [, , , , [constructor]] })) { yield <><x><y/></x></>.__lookupSetter__(\"__parent__\") } )(this)))__parent__ = [[]], prototype = #1=[#1#];\nbreak ;\n");
tryItOut("/*infloop*/while(Array(.2.hasOwnProperty(\"__count__\") ?  \"\"  : (function::constructor = -0), (\t \"\" [<><x><y/></x></>]))){with(this)let __proto__; }");
tryItOut("switch(( /x/g \n)) { case <> </>.(__count__: <x><y/></x>.prop setter= Math.sin): {__parent__ = undefined; }case 5: break;  }");
tryItOut("/*infloop*/M:for(const [__parent__, __count__] = window.__count__;  /x/ ; --\twindow) {return true; }\nreturn;\n");
tryItOut("do /*for..in*/for(const prop in <x><y/></x>) throw __noSuchMethod__; while((#3={a:#3#}.eval(<><x><y/></x></>)) && 0);");
tryItOut("{var <><x><y/></x></> = true, __proto__ = prop; }");
tryItOut("/*infloop*/while([({a2:z2}) for each (__noSuchMethod__ in <x><y/></x>)])do true; while((@foo) && 0);");
tryItOut("M:with({__count__: 3/0})prototype, x::__parent__ = <x><y/></x>;");
tryItOut("/*infloop*/while(window)with({__proto__: #1=[#1#]})gc()");
tryItOut("{ '' ;const constructor = <x/>; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = null in  \"\" ) var __iterator__ = <x/>, prop =  '' ;");
tryItOut("with((new (this)([15,16,17,18].some(function  prototype (__count__) { {} } , undefined), <x><y/></x>))){return <><x><y/></x></>;var __noSuchMethod__ = <x><y/></x>, __proto__; }");
tryItOut("with((<x><y/></x>.__lookupSetter__(\"function::__parent__\")--()))prop;");
tryItOut("/*for..in*/for(var __iterator__ in ((@foo)(window)))return <y><z/></y>;");
tryItOut("\fL:if(({ __iterator__: , __proto__: __count__ }) = ({ __count__: __noSuchMethod__, __iterator__: __proto__ })) { if ((__noSuchMethod__ = <y><z/></y>).throw(break L)) {with({}) { try { 5.0000000000000000000000; } catch(prop if ({}) -= false) { ; } catch(prototype if (function(){ = 1e4, __noSuchMethod__ = constructor;})()) { break ; } catch(constructor) { yield <y><z/></y>; } finally { gc() }  } let __parent__ = prototype, __count__ = prototype; } else L:if((p={}, (p.z = @foo)())) continue L;}");
tryItOut("let (\nprototype = <x><y/></x>) { return false; } const constructor;");
tryItOut("let (prototype = new String(<x><y/></x>++, __proto__ | <y><z/></y>)) { export __iterator__; }");
tryItOut("L: return;");
tryItOut("yield = __proto__;");
tryItOut("/*infloop*/M:while(window)return;export __iterator__;");
tryItOut("with({__count__: (__proto__ = *::*, __noSuchMethod__.valueOf(\"number\")).throw(0x99)})switch(-1) { case undefined: break; default: break; case 4: export *;break; (1e-81);break;  }");
tryItOut("L:if(((__count__)[true])) ;");
tryItOut("/*for..in*/L:for(const <><x><y/></x></> in (((('haha'.split).call).call)([[]]\n)))__proto__\n");
