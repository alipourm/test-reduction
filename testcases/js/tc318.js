tryItOut("/*for..in*/for(const prop = 'fafafa'.replace(/a/g, function  __count__ (__proto__, __parent__) { return ({a1:1}); } ).__defineGetter__(\"constructor\", function  __proto__ (__proto__, __noSuchMethod__) { return prototype.propertyIsEnumerable(\f\"__parent__\") } ) in * <<= -0 / ({__noSuchMethod__: each, __proto__: <x><y/></x> })) {while((null.__lookupSetter__(\"__noSuchMethod__\")) && 0);with({__noSuchMethod__: <x/>.propertyIsEnumerable(\"__parent__\")}){;-0; } }");
tryItOut("with({__parent__: \fthis.__defineSetter__(\"__iterator__\", function (__proto__, __count__) { yield <y><z/></y>; } )})constructor = <x><y/></x>;");
tryItOut("__iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in (yield 033)) {L:do {/*infloop*/for([1]; 033; <><x><y/></x></>) {let __count__, prop;yield <x/>; } } while(([[1]]) && 0); }");
tryItOut("{/*infloop*/do {gc()gc() } while((3/0.watch(\"__iterator__\", function(y) { yield y; return  /x/ ;; yield y; }) for (prototype in __iterator__) if ((function ([y]) { })())));{}\n/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in arguments) yield; }");
tryItOut("M:do {if(((this == <x><y/></x>).yoyo(*.unwatch(\"__count__\")))) {gc() } else  if ( /* Comment */new (this)()) {while((__iterator__) && 0)yield 3.141592653589793; } } while((this.__defineGetter__(\"prototype\", Function)) && 0);");
tryItOut("M:while(((this).watch.hasOwnProperty(\"__noSuchMethod__\")) && 0){const constructor = undefined, prototype = @foo;/*infloop*/for(*; 0.1; window) __noSuchMethod__; }");
tryItOut("<><x><y/></x><//*\n*/>;");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("with(getter = this\n);");
tryItOut("if((uneval(__iterator__))) { if (#1=[#1#]) {{/*}throw <y><z/></y>; } else return;}");
tryItOut("L:if((yield  '' )) \f{return;\nyield  { yield constructor =  /x/g / } ;\n }");
tryItOut("/*infloop*/while(window){yield <x><y/></x>;0; }");
tryItOut("while((3.141592653589793.watch(\"constructor\", function (__noSuchMethod__) { return @foo } )) && 0)\nwith({}) { throw __proto__; } ");
tryItOut("/*infloop*/\fdo {} while((void {})); const __count__;");
tryItOut("/*for..in*/L:for(let prototype in ) {throw null;throw 4.; }\n/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in <x/>) {if([,,]) { if (__proto__) {;*; } else {return; }} }\n");
tryItOut("return;");
tryItOut("/*infloop*/do {([z1,,]).__defineSetter__yield; } while(((p={}, (p.z = *)())));");
tryItOut("M:with(((({ __iterator__: ({ x::__count__: <x><y/></x> }), __proto__: ({ __iterator__: constructor }) }) = arguments.__count__-=(__count__ = window).eval(new RangeError(<x/>)) for each (__proto__ in __count__.((false)[<x><y/></x>])) for (__count__ in <x><y/\f></x>.( '' )) for each (__proto__ in \nprop.(__iterator__)) for each (prototype in __noSuchMethod__.hasOwnProperty(\"__parent__\")) if (<><x><y/></x></>)))){let (constructor) { let (__count__ =  \"\"  + [z1], __proto__ = [<><x><y/></x></> if (<><x><y/></x></>)]) {  } } }");
tryItOut("try { let(__count__ = [11,12,13,14].sort) ((function(){yield prototype = *;})()); } catch(__noSuchMethod__ if (function(){return;})()) { try { __proto__ = function::prototype; } finally { with({}) for(let y in [5,6,7,8]) __parent__ = __iterator__; }  } finally { this -=  /x/g ['__proto__'] = prop; } ");
tryItOut("{if(<x><y/></x>) gc() else  if (1e+81) {const __iterator__; } else gc() }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(prop = #1=[#1#]; <x><y/></x>; <x/>) ({}).hasOwnProperty\n/*for..in*/for(var constructor in prototype) {break L; }\n");
tryItOut("switch((__count__ = ((p={}, (p.z = @foo)())).__lookupGetter__(\"__count__\"))) { case 2: /*for..in*/for(const [constructor, prototype] = <x/> if ((-1)).__defineGetter__(\"__proto__\"\f, /a/gi) in (new (yield <y><z/></y>)((<><x><y/></x></> instanceof null), <x><y/></x>))) {M:if([,]) { if (window) return; else { }} }break; case let (__iterator__ = null, constructor) <x/>: break; case 1: break; var __noSuchMethod__ = (function ([y]) { })(), constructor;break; export *;break; break; default: ( '' );break;  }");
tryItOut("if(<><>yield this</></>.__lookupGetter__(\"__parent__\")) { if (<><xxx>{prototype}</xxx></>) let __iterator__;} else {yield <x><y/></x>;const prop = *, prop =  /x/g ; }");
tryItOut("(new Function(\"(undefined);\"))");
tryItOut("<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>[4.];");
tryItOut("switch((new Date(this, ([15,16,17,18].filter(function  __iterator__ (__noSuchMethod__, __count__) { throw  \"\" ; } , <x><y/></x>) < [1,,].propertyIsEnumerable(\"__noSuchMethod__\"))))) { default: throw StopIteration;break; case [z1,,]: /*for..in*/try { yield; } finally { var __count__ =  /x/g , __count__ = window; } for(const __noSuchMethod__ in (((<x><y/></x>).call)(({ get __count__(__iterator__)<y><z/></y> })))){new Functionconst constructor, __parent__; }\nexport *;\nbreak;  }");
tryItOut("L: while((new (4..__defineGetter__(\"constructor\", eval))(([@foo if (this)]).hasOwnProperty(\"__noSuchMethod__\"))\f) && 0)prop setter: (new Function).apply");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] =  /x/  in  /x/ .__lookupGetter__(\"__parent__\")) /*infloop*/for(var __proto__ = ((RangeError())(<x><y/></x>.watch(\"constructor\", 'haha'.split))); Exception( /x/  ^ <><x><y/></x></>); [__iterator__].filter([1,2,3,4].map)) {return; }");
tryItOut("with({__noSuchMethod__: constructor =  \"\" }){export *; }");
tryItOut("yield 0/0.unwatch(\"prop\");");
tryItOut("return this;");
tryItOut("/*infloop*/for(<x/>; <><x><y/></x></>; function(id) { return id }) {prototype, __count__ = -3/0;{} }");
tryItOut("if((( /* Comment */1e-81.@foo) ? __proto__+=this-- : (\n@foo.isPrototypeOf(;)))) { if (((<x><y/></x>)[<><x><y/></x></>].throw((/a/gi).call({}, <><x><y/></x></>)))) (([1,2,3,4].map).call(@foo, )); else continue ;}");
tryItOut("let (__proto__) { gc() }");
tryItOut("if(<y><z/></y>) {__iterator__ = <y><z/></y>; } else  if (((prototype\n) || *::*.propertyIsEnumerable(\"prop\")) >= (((prop.yoyo(constructor)))).call((new (prop.(window))(__proto__ = prototype)), (-1), 'fafafa'.replace(/a/g, false))) /*infloop*/for(let ({ __parent__: ({ constructor: __noSuchMethod__ }) }) = ([11,12,13,14].sort); __iterator__ + <x><y/></x>; constructor+=<><x><y/></x></>.__defineGetter__(\"__iterator__\", (new Function(\"__parent__;\")))) return;");
tryItOut("do gc() while((0.1) && 0);");
tryItOut("<x/>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in ({a1:1})) {throw __iterator__; }");
tryItOut("/*for..in*/M:for(const constructor in (((1 for (x in [])))((4. - new (function(q) { return q; })()))))/*infloop*/for(const prop = ((function(y) { yield y; yield <x/>;; yield y; }).call(*::* %= constructor, )); constructor = __count__.(<x/>); (function  __count__ (__proto__, constructor) '' )()) /*for..in*/for(const prop = prop in  '' ) { }");
tryItOut("M:if((__parent__ = <x><y/></x>)) { if (this) {; } else {(null); }}");
tryItOut("yield ++( ''  .. __count__);");
tryItOut("L: {yield <><x><y/></x></>; }");
tryItOut("if(-0) yield 1e-81; else  if (*) gc()\nlet __noSuchMethod__ =  /x/g , __iterator__;");
tryItOut("throw *::*");
tryItOut("/*infloop*/while( ''  ^ true.isPrototypeOf(*::*))try { __iterator__ } catch(x::__count__) { throw [,,]; } ");
tryItOut("L:do ; while((eval(\"while(([z1]) && 0)try { (<y><z/></y>); } finally { (__iterator__) = __iterator__; } \", #1=[<><x><y/></x></>])) && 0);");
tryItOut(" const __parent__;");
tryItOut("M:if( /x/g ) {(<y><z/></y>);<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [1,2,3,4].map :: __noSuchMethod__ = 'fafafa'.replace(/a/g, prop = [<><x><y/></x></>])) {let (let = <y><z/></y>, __count__) { return;*::*; } }");
tryItOut("if((({a1:1}) ? [1] : true) * <><x><y/></x></>) { if ((this).call(1e-81,  /x/g , <x<y/)) break ; else {export __noSuchMethod__;let prototype, __parent__; }}");
tryItOut("\n/*for..in*/M:for(var __count__ in #3={a:#3#}) constructor\n");
tryItOut("/*infloop*/for((<xxx {__count__}={++<y><z/></y>} />.(((-0).yoyo(<x><y/></x> >>= undefined) ? [z1,,].constructor : [11,12,13,14].map))); [15,16,17,18].map(new Function, (function(y) { yield y; export __iterator__;; yield y; }).call(((1 for (x in []))).call(<x><y/></x>), null)); \fprop) {M:switch((#0=<><{prop}><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></{prop}></>)) { case __proto__.prototype: break;  } }");
tryItOut("[({ __parent__: ({ __parent__: __iterator__ }), __count__: function::prototype }), __parent__]");
tryItOut("try { __proto__ = prototype; } catch(prop) { for(let y in [5,6,7,8]) case 3: yield __parent__ } finally { continue ; } ");
tryItOut("for(let y in []);");
tryItOut("(({})); const __proto__;");
tryItOut("with({constructor: __iterator__})yield window;");
tryItOut("/*infloop*/L:do /*infloop*/L:do {__proto__; } while((prop .@*:: <y><z/></y>)); while(Iterator(<><bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb></>));");
tryItOut("\treturn;M:with({__proto__: --(-0)}){throw <><x><y/></x></>; }");
tryItOut("/*infloop*/while(constructor){}");
tryItOut("if((!false.hasOwnProperty(\"function::constructor\"))[__parent__( /x/ ) = ((yield null))]) { if (++ /x/g ) return;\nvar __iterator__ = <x/>;\n\nyield \nlet+=__proto__ = null; else {with({prototype\t: (Math.pow).call(, , ({ prop: constructor, constructor: constructor }) = <><x><y/></x></> >>>=<x><y/></x>)})return <><x><y/></x></>;\n;\n }}");
tryItOut("/*for..in*/L:for(const __count__ in ((function  constructor (constructor)this)(*::*))){let __noSuchMethod__ = {};const __iterator__; }");
tryItOut("M:if(; = <x><y/></x> if (<x><y/></x>)) { if (__parent__ >=  '' ) {yield; }} else {return constructor; }");
tryItOut("{if(@foo &= (*::* <<= true.__defineSetter__(\"__parent__\", ((<x/>).call).call)) &  /x/g ;) {L:do export prototype; while((*) && 0); } else  if ( /x/g  >>>=__count__) {return  '' ; } else {export __proto__;gc() } }L:switch(@foo) { default: yield;break;  } const prototype;");
tryItOut("/*for..in*/for([__proto__, prop] = <x/> in false) yield \ftrue;");
tryItOut("/*for..in*/for((__proto__) in ((eval)((prototype.__proto__))))yield;");
tryItOut("return (-0).__lookupGetter__(\"prop\") & ;");
tryItOut("let(__parent__ = window) ((function(){const __proto__ = -3/0, __noSuchMethod__ = <x><y/></x>;})());");
tryItOut("L:if(prototype) {constructor; }");
tryItOut("if(String(undefined) ? new Object() : constructor) { if ( /* Comment */<><x><y/></x></>.eval( /x/g )) {prototype }} else {gc() }\nwhile(((yield (gc))) && 0)(this);\n");
tryItOut("/*infloop*/M:do {/*infloop*/do gc() while(<><x><y/></x></>); } while((true)(<x><y/></x>));");
tryItOut("let ([__proto__, , [[, ]], constructor] = (undefined > ( ''  %= <x><y/></x>)), __iterator__) { if(([[]].hasOwnProperty(\"__proto__\")) ? __iterator__ = window : <xxx {prop}={constructor(false, prop)} />) {yield;/*for..in*/for(var prop in <x/>) {break ;export __parent__; } } else M:with((window ? undefined : <x><y/><///h\nx> << __noSuchMethod__.(true)))export *; }");
tryItOut("return;");
tryItOut("yield ((prop ? __proto__ : true).__noSuchMethod__ = [z1].@*);");
tryItOut("for(let y in []);");
tryItOut("gc() const __proto__;");
tryItOut("{(prototype);return; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = *::*.valueOf(\"number\") .@x:: <x><y/></x> - __parent__ in <y><z/></y>) {M:while((<x/>) && 0)export *; }");
tryItOut("if(function::function::prop = [<x/> for (__parent__ in __proto__)]) {{} } else return undefined;");
tryItOut("if((__noSuchMethod__.__noSuchMethod__ = <ccc:ddd><employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy</ccc:ddd>)) { if ((({__parent__: <x/>}))) export __parent__; else yield <x><y/></x>;}");
tryItOut("switch(eval) { case 8: case 1: case ( /x/ .*.watch(\"__parent__\", Function)): continue M;break; case 8: do throw <y><z/></y>; while((constructor.prop) && 0); }");
tryItOut("L:do  while((<x/>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in undefined) {@foo; }");
tryItOut("with({prototype: #2=[this]}){{} }");
tryItOut("constructor = __iterator__;");
tryItOut("/*infloop*/M:for(var ({ __iterator__: __count__ }) = ([__count__, , ] = ({ __count__: __proto__ })); window; ((#0=[[1]])(__parent__\n)))  { return constructor } ");
tryItOut("/*for..in*/for(let prop = ([15,16,17,18].some(<y><z/></y>, __iterator__)).propertyIsEnumerable(\"constructor\") in 'fafafa'.replace(/a/g, gc)) {L:while((window) && 0)if( '' ) __noSuchMethod__, __noSuchMethod__; else  if ({}) {export __proto__; } else export *\nconst __count__ = 0, prop;continue ;\nvar prop = this; const prototype;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <y><z/></y>.__noSuchMethod__ in ({a1:1})) {gc()__count__ }");
tryItOut("let (constructor) { (<x/>); }");
tryItOut("if(<x><y/></x>) yield; else  if ([,]) return __iterator__; else const prop;");
tryItOut("/*for..in*/for([[1]] in <x/>) export *;");
tryItOut("let (__proto__, __count__) { (<x><y/></x>)\n const __noSuchMethod__; }");
tryItOut("do default: case 5: ;break; this;break;  while(([,]) && 0);");
tryItOut("throw window;export *;");
tryItOut("__proto__ = (p={}, (p.z = <x/>)());\nreturn this;\n");
tryItOut("return (window.isPrototypeOf(<><x><y/></x></>));");
tryItOut("/*infloop*/for(const __iterator__; (__noSuchMethod__ = <x><y/></x>.isPrototypeOf(new (window)(#3={a:#3#})))\t; (this.__defineGetter__(\"constructor\", function(y) { yield y; export *;; yield y; }))) throw __noSuchMethod__ =  \"\" ;");
tryItOut("if( /x/g  ? 3/0 : <><x><y/></x></>) { if ([,].__defineSetter__(\"constructor\", (1 for (x in [])))) export __iterator__;} else {yield; }\n[,,z1]");
tryItOut("{while((__count__ = <x><y/></x>) && 0){const constructor, prop = 0x99;export *; }eval }");
tryItOut("/*for..in*/M:for(var prop.__count__ in ((Math.sin)(<x/>))){gc() }");
tryItOut("/*infloop*/do throw StopIteration; while((new String(({ __proto__: prop, __parent__: ({ __count__: __proto__, __parent__: __noSuchMethod__ }) }) = new (function(q) { return q; })([z1]) ? window ^ * : \ntrue, delete <x><y/></x>)));");
tryItOut("if((new Function(<x/>))) return; else  if ((window ? [1] : constructor)) continue L;");
tryItOut("switch( /x/g ) { case 1: function  prototype (__count__, prop) { ; }  }");
tryItOut("/*for..in*/for(var [prototype, constructor] =  \"\" .__noSuchMethod__ in <x/>) {const __count__ =  /x/g , __count__ = <><x><y/></x></>; }");
tryItOut("if(__parent__) return prototype; else  if (<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", Math.sin).isPrototypeOf([z1].eval(true))) export __iterator__;");
tryItOut("L:if(null .@*:: eval(\"true\",  '' )) /*infloop*/\fwhile( \"\" .constructor){break L; }");
tryItOut("with(undefined)export *;");
tryItOut("/*infloop*/M:for(*::* |= window - function(y) { yield y; __count__ = null;; yield y; }(<x><y/></x>).prototype = yield this; ({__noSuchMethod__: (prototype)}); new __parent__(-3/0).eval(<x><y/></x> | <x><y/></x>)) @foo;");
tryItOut("let([M:if((yield __parent__ ? true : __proto__)) { if (()) L: return <><x><y/></x></>; else {with({prop:  '' })/*infloop*/while(__iterator__){break M; } }}, ] = <><x><y/></x></>.@*, constructor) { yield (eval(\"let __proto__, __parent__;\", @foo)).call((<x><y/></x>.hasOwnProperty(\"prototype\")) -  '' , );");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*infloop*/do /*infloop*/for(1.3; <><x><y/></x></>; []) continue L; while(__proto__ = <><x><y/></x></>);");
tryItOut("L:switch(@foo) { case 0: {export *;export *; }break; default: with({}) throw __proto__;case 9: with({__count__: <x/>})/*infloop*/L:do export __noSuchMethod__; while(__iterator__);break; case (-1): L:if(new (function  __parent__ (__parent__)<><x><y/></x></>)(<x><y/></x>)) { if (undefined >= [,]) {export *; } else {yield;__iterator__; }}case (__iterator__ = false/*\n*/.hasOwnProperty(\"__noSuchMethod__\").__defineGetter__(\"__proto__\", ((*).__defineSetter__).apply)): Math.powbreak; /*for..in*/M:for([({ constructor: prototype }), ({ __parent__: prototype })] in [true]) {const __proto__ = <x><y/></x>; }break; break; case 6: let __noSuchMethod__, prop = arguments;break; case ( /x/g  = #3={a:#3#}):  }");
tryItOut("let(__parent__) { let(prop = constructor((this.__defineGetter__(\"constructor\", (new Function(\"null;\"))))) = [<><x><y/></x></>], __proto__ = eval(\"<x><y/></x>\", __iterator__)) { throw StopIteration;");
tryItOut("let (__proto__) { with({prototype: __iterator__})continue ;if([1,,].__noSuchMethod__ = [[1]]) {;<x><y/></x>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __iterator__) {yield; }");
tryItOut("yield ((~<x><y/></x>.(__proto__)).eval(this.__defineGetter__(\"__parent__\", function () { yield  \"\"  } )));");
tryItOut("switch( = #1=[#1#] | __noSuchMethod__.__parent__) { case (this.zzz.zzz): new (function  prop (constructor, __noSuchMethod__)__iterator__)(( '' .__noSuchMethod__ = arguments))(1.3);case 2: break; ");
tryItOut("L: {yield;; }");
tryItOut("/*for..in*/L:for(let (@foo.__noSuchMethod__) in (<><x><y/></x></> for each (__proto__ in <><x><y/></x></>))((this.__defineSetter__(\"prototype\", Math.sin))) = *.__lookupGetter__(\"__proto__\")) /*infloop*/for(var __proto__; __count__+=window; __noSuchMethod__.prop setter= 'haha'.split)  '' ;");
tryItOut("L:while((([1,2,3,4].map).call()++) && 0){/*for..in*/for(let [__count__, __count__] = 5.0000000000000000000000 in window) yield *; }");
tryItOut("/*infloop*/for(let prop; (*.__defineSetter__(\"prototype\", 'haha'.split)); ([__parent__, __noSuchMethod__, prototype, , constructor] = this.__defineGetter__(\"__count__\", function  constructor () { return window; } ))) {const __iterator__ = ({});yield; }");
tryItOut("(<>yyy</> >>> this.__defineSetter__(\"__iterator__\", (1 for (x in []))))");
tryItOut("let(__count__ = new (({__parent__: ({a1:1}) }))(constructor.__iterator__ = , prop++)) { try { throw constructor; } catch(__proto__) { for(let y in []); } finally { try { with({}) { with({}) ; }  } catch(__count__ if this.zzz.zzz) { with({}) constructor = prototype; } \tfinally { this.zzz.zzz; }  } ");
tryItOut("while(((<x><y/></x>.(<><x><y/></x></>))) && 0)if(prototype) let constructor; else \t if (*) throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(var ({ prop: prop }) = *::* if (window); \n__parent__.__proto__; ()) {*::*; }");
tryItOut("L: /*infloop*/M:while(<y><z/></y>){var __proto__ = undefined/*\n*/;export constructor; }");
tryItOut("/*infloop*/while([*::*.__count__ = constructor if ()])export *;");
tryItOut("M:with(<x/>)/*infloop*/L:do with({constructor: __noSuchMethod__})(<x><y/></x>); while((4..hasOwnProperty(\"__proto__\")) for (constructor in true) if ( \"\" ));");
tryItOut("/*for..in*/for(let [__count__, prototype] =  if (new new Function(<x><y/></x> > window /= (p={}, (p.z = <y><z/></y>)()))) in __parent__ = window = [<><x><y/></x></>].sort(function  __proto__ (__iterator__, __parent__) { return constructor } ).hasOwnProperty(\"constructor\")) {if(__parent__.__parent__ =  /x/g ) yield; else  if (1e4.throw( /x/ )) {function  __iterator__ () /x/ (<><x><y/></x></>).__defineSetter__ } else {} }");
tryItOut("{yield []; }");
tryItOut("let constructor, __count__;");
tryItOut("/*infloop*/while(function::__noSuchMethod__){{} }");
tryItOut("/*infloop*/for(const function::constructor = [({ constructor: __noSuchMethod__ }), [__proto__]] = __parent__; <x><y/></x>.(<x/>).@*; <><x><y/></x></> *= function ([y]) { }) {return (-0) }");
tryItOut("/*infloop*/for(#1#; (({prop: @foo, constructor: [,,z1] })); window) {yield; }");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("if(*::*) break M; else  if (__noSuchMethod__) { }");
tryItOut("/*for..in*/for(__iterator__ in ((function(q) { return q; })(<><{constructor}><ccc:ddd></ccc:ddd></{constructor}></>))){this.__defineGetter__(\"constructor\", new yield null((<x><y/></x>))), __count__.constructor = <y><z/></y> ? ([<x><y/></x>].some(function(y) { yield y; throw false;; yield y; })) : (__parent__ = __noSuchMethod__) }");
tryItOut("{\flet (constructor = [1,,], prototype) { ; }export __count__; }");
tryItOut("/*for..in*/M:for(let __proto__ in (([1,2,3,4].map)(new Object(__iterator__, ([11,12,13,14].some))))){let (prop, __noSuchMethod__ = true) { __count__ = [1,,], __iterator__; } }");
tryItOut("\fif( /* Comment */constructor) {break L; }");
tryItOut("M:while((new ((__proto__ = @foo))(((constructor).propertyIsEnumerable(\"__noSuchMethod__\").eval([window]())))) && 0){return  '' ; }");
tryItOut("__noSuchMethod__(true);");
tryItOut("{}");
tryItOut("if((__proto__ =  /x/ ).__defineGetter__(\"constructor\", [1,2,3,4].map)) break M; else  if (([15,16,17,18].sort((1 for (x in [])), [1,,]))) {yield 0/0;\ncontinue M;\n } else throw prop;\f");
tryItOut("/*for..in*/__iterator__for(prototype = (eval(\"[1,,];\", window).__parent__ = prototype = <x><y/></x>) in <x/>) { set __count__ __parent__ (__parent__, __parent__) { yield try { const constructor = 0.1; } catch(__noSuchMethod__ if (function(){var constructor = window, __parent__ =  '' ;})()) { export prototype; } catch(prop) { export __parent__; }  } return; }");
tryItOut("if(-0.eval(<x><y/></x>)) try { {} } catch(__count__ if <x/>) { ( \"\" ); } ");
tryItOut("<bbb xmlns=\"(p={}, (p.z = (yield *))())\">yyy</bbb>\nprop =  /x/g ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.prototype in true) {let prototype = __proto__, __noSuchMethod__;((new Function(\"export __count__;\"))).apply }export *;");
tryItOut("return <><x><y/></x></>;");
tryItOut("try { yield undefined; } finally { var constructor; } ");
tryItOut(" '' ;");
tryItOut("while((prop = <x><y/></x>) && 0){window; }\n");
tryItOut("if(prop--) ; else {export *; }");
tryItOut("if(<><x><y/></x></>) { if (__count__) { } else return @foo;}\n");
tryItOut("if(((__noSuchMethod__ setter: Math.pow.hasOwnProperty(\"__noSuchMethod__\")).__defineGetter__(\"__proto__\", ((\tprototype).watch).apply))((<y><z/></y> in var prop, __parent__;), #3={a:#3#})\t) {return __proto__ = <><x><y/></x></>;export __noSuchMethod__; } else  if ((<><x><y/></x></> && __count__.hasOwnProperty(\"prototype\"))) {;return [this].map(( /x/g ).__defineSetter__); } else {try { for(let y in [5,6,7,8]) <y><z/></y>.prototype = prop; } catch(__count__) { throw prop; } {} }");
tryItOut("gc()\nexport *;\n");
tryItOut("throw StopIteration;");
tryItOut("yield <y><z/></y>;\nif(__iterator__) ()gc()gc() } else {export __parent__; }\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __iterator__ in (( '' )(<x/>.__defineSetter__(\"__parent__\", ({}).__lookupGetter__))))continue ;");
tryItOut("/*for..in*/L:for(var prototype =  '' .yoyo([z1,,]) <= ((function  __count__ (__proto__, __noSuchMethod__) { prop, __parent__; } )(\f)) in prototype = window) {export __count__; }");
tryItOut("throw prop;\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in (((1 for (x in [])))(this >= __parent__, __proto__))) /*for..in*/for(const prototype.prototype in ((function(y) { yield y; let prototype, constructor;; yield y; })(new ((<x/>.eval(true).__defineSetter__(\"prototype\", <y><z/></y>)))((({__proto__: this.zzz.zzz}))))))switch(this) { default: yield [[]]; }\n");
tryItOut("__noSuchMethod__.prop = constructor;");
tryItOut("switch(new (prototype.constructor = null.watch(\"__parent__\", __noSuchMethod__))()) { default: if(<y><z/></y>) { if (<x/>) export constructor;} else {;{var __proto__, prop = 1e81; } }case new ((*.__lookupGetter__(\"__iterator__\")))(<><x><y/></x></> .. true * (return <y><z/></y>;)): case 0: case ((uneval(((@foo).apply)())) for each (prototype in (((Math.sin).apply).call\f(<><x><y/></x></>, ))) for (this.prop in undefined) for (constructor in __noSuchMethod__) for each (constructor in <x><y/></x>)): do throw  /x/g ; while((~<x><y/></x>) && 0);break; /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in __count__) yield __noSuchMethod__;break; case 9: break; case this ^ ({a2:z2}): break; case 7: export __iterator__;break;  }");
tryItOut("/*for..in*/for([__iterator__, prototype] = <x><y/></x>() in *) var __iterator__ = prop;");
tryItOut("constructor = __iterator__;");
tryItOut("{while(([15,16,17,18].some('haha'.split, @foo)) && 0)this }");
tryItOut("yield new [z1,,] %= this(constructor = <><x><y/></x>\f</>, -3/0) *= __iterator__ = 1e+81.constructor;");
tryItOut("yield @foo['__count__'];");
tryItOut("((prototype)) = __iterator__;");
tryItOut("while(((({ set prototype __count__ (__count__, prototype) {  }  }).valueOf(\"number\") | [[,,]].filter(new Function) >>= <x/>.__iterator__)) && 0)with({}) { return constructor = @foo; } ");
tryItOut("L:while((null in <y><z/></y>.watch(\"prop\", (1 for (x in [])))(new String(this, <x/>))) && 0)let(({ __count__: constructor, __count__: __proto__ })) ((function(){let(({ __noSuchMethod__: __count__, prototype: __iterator__ }) = [[]].__defineSetter__(\"constructor\", (new Function(\"<><x><y/></x></>;\"))), __count__) { return;})());");
tryItOut("yield -1\n(setter);");
tryItOut("do {return; } while((*::*.@foo) && 0);");
tryItOut("if( /* Comment */(p={}, (p.z = 1e81)()) ^= [15,16,17,18].map(function  __proto__ (__iterator__) { yield __noSuchMethod__ } , <x/>)\n) {L:if() export *; else  if (-3/0) {{}return; } }");
tryItOut("{}\nreturn;\n");
tryItOut("switch(this.isPrototypeOf(<x/>)) { default: gc }");
tryItOut("M:switch(eval(\"({a2:z2})\", this)) { default: /*infloop*/for(let constructor;  /x/  :: [[1]]; ({__parent__: [,] >> 0.1})) {const constructor = <x/>;finally { export *; }  }break; break; (window);case 8:  }");
tryItOut("throw StopIteration;");
tryItOut("if(this.__defineSetter__(\"constructor\", /a/gi)) { if (new (p={}, (p.z = *)())((<x><y/></x><ccc:ddd></ccc:ddd> =  /x/g ))) return constructor;} else var constructor;");
tryItOut("/*infloop*/while(eval(\"L:with(true)export __proto__;\", <y><z/></y>)){export *;const __iterator__ = <x/>, case 5: var prop, __iterator__ = <><x><y/></x></>;; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const *.__proto__ in (((new Function(\"var __proto__ = function(id) { return id }, __parent__;\")))( /* Comment */prop = window.@*))\f)__count__ = <><x><y/></x></>, __count__;");
tryItOut("{throw  /x/g .__lookupSetter__(\"prop\");/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 1e+81) throw <x><y/></x>; }");
tryItOut("var prototype, __count__; const constructor;<><x><y/></x></>");
tryItOut("if([__iterator__, , ({  '' : prop }), , ] = [{this }\f, __iterator__, prototype( /x/g ), ]) yield; else do return <x><y/></x>; while(((*.__defineGetter__(\"prototype\", [1,2,3,4].slice))) && 0);");
tryItOut("if(window) { } else  if ((__count__ = <><x><y/></x></>)) return <><x><y/></x></>; else {throw <><x><y/></x></>; }{}");
tryItOut("/*infloop*/for(const [, ({ prototype: __proto__ }), ({ __proto__: [, ({ __parent__: ({ prop: ({ __count__: ({ __noSuchMethod__: set, constructor: __parent__ }) }) }) }), ], getter: ({ delete: [__iterator__, , this.__defineGetter__(\"__parent__\", function  __count__ (__proto__)<x><y/></x>)['__noSuchMethod__'], (__count__), ({ prop: ({ __parent__: __count__, constructor: ({ __count__: prototype }) }) })] }) })] = ({yield: prototype}) ? (constructor = window)\n : typeof <><x><y/></x></>.isPrototypeOf((prototype.constructor.__defineSetter__(\"__parent__\", *::* !== 0x99))) *= __noSuchMethod__.__iterator__ = (prop.throw(__proto__)).@foo.eval([(prototype)].some(function (({ prototype: __count__\r }), __iterator__) { return (prototype = __iterator__) } )); @foo.unwatch(\"__count__\") for each (__proto__ in __iterator__ = <><x><y/></x></>) for (__count__ in [,,]) if (prop); undefined.(new ('fafafa'.replace(/a/g, (('haha'.split).apply(false, [z1,,])).__defineSetter__))())) {/*for..in*/for(prototype in <x><y/></x>) {throw false;<x><y/></x> }M:if({return;let __parent__ = 5.0000000000000000000000; }) {gc() } else return; }");
tryItOut("/*for..in*/M:for(var __iterator__ in (__parent__(this) = new Boolean())) switch(<><x><y/></x></>) { default: yield;break;  }");
tryItOut("export *;\nthrow prop;\n");
tryItOut("export prototype;");
tryItOut("/*infloop*/for(( \"\" .hasOwnProperty(\"__parent__\")); [[1]]; [(__parent__)].map(function ()(\f<x><y/></x>[ if (<><x><y/></x></>)])())) {yield <y><z/></y>;L: {{} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ constructor: constructor }) in window) {let (__noSuchMethod__, prop = null) { ; }/*for..in*/for(var [constructor, __proto__] = <x/> @ (-0).valueOf(\"number\") in __parent__) {} }");
tryItOut("let (__proto__, prototype) { (1e4); }");
tryItOut("L: throw  \"\" ;");
tryItOut("with({__noSuchMethod__: __iterator__ = 'fafafa'.replace(/a/g, new Function)})export __count__;");
tryItOut("[, prop, ({ constructor: __parent__ }), ]");
