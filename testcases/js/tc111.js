tryItOut("L: throw <><x><y/></x></>;");
tryItOut("x::__proto__, __count__;");
tryItOut("if((new function (constructor( '' .eval(<x><y/></x>))) { return *::* } ((let (prop = prototype) eval(\"[[]]\", undefined)), ((.2 - <x><y/></x>) > ({__iterator__: [,,z1],  set __parent__() { return @foo }  }))))) {export *;{yield .2;return prototype; } } else  if ((({}))(((uneval(window.eval(<x/>))))) + [({ __count__: constructor, constructor: constructor })] = new (<x><y/></x>)(({a1:1}))) eval else {let (__iterator__ = this) { export *; } }");
tryItOut("let(({ prop: ({ __count__: __noSuchMethod__, prototype: prop }) }) = (x::constructor = constructor)((default: if(1e4) { if (false) {{} } else {yield; }}break; case 6: var __iterator__;.unwatch(\"__iterator__\")))) ((function(){with({}) { for(let y in [5,6,7,8])  } })());");
tryItOut("if((p={}, (p.z = __proto__ = (-0))())) { if (3) {const constructor, __parent__;throw <x><y/></x>; } else {/*for..in*/for(getter in (( /x/  for (__parent__ in undefined)))) /*infloop*/L:for(<><x><y/></x></>; *::*; [1,,]) continue ; }}");
tryItOut("if(true.constructor) return; else  if (__noSuchMethod__) {export *; }\f else export *;");
tryItOut("/*infloop*/for(((uneval(((new Function(\"return;\"))).call(<><x><y/></x></>, <x><y/></x>, <>constructor</>)))); ((*)); (prototype = 1.2e3 for (__iterator__ in <x/>) for each (__iterator__ in <><x><y/></x></>) for each (__iterator__ in false)) && ({x::<xxx {__iterator__}={(@foo++)}\f />: __count__.(constructor) })) {\n }");
tryItOut("(<x><y/></x>);");
tryItOut("throw <x><y/></x>;");
tryItOut("switch(*--) { case <x><y/></x> &= undefined: (undefined);break; if(<x><y/></x>) { if (__count__) <x/>} else ; }");
tryItOut("if(window.__defineSetter__(\"__iterator__\", ([1,2,3,4].map).apply)) { if (({ function::__count__: ({ __count__: delete, __proto__: __parent__ }), __iterator__: ({ __count__: __count__, __iterator__: constructor }) }) = __iterator__.(undefined)) {const \f__parent__, constructor = undefined; } else if(prototype = __count__, prototype) {<x><y\n/></x> } else  if (this) {throw __noSuchMethod__; } else Function}");
tryItOut("with(*)(@foo).call\nreturn [[1]];");
tryItOut("{export prop; }");
tryItOut("{yield <x/>;yield <x/>; }");
tryItOut("if((throw undefined ? 0x99/*\n*/.constructor =  /x/  : prototype = false)) {yield window; } else {\t }");
tryItOut("switch(let (prototype = __proto__) <><x><y/></x></> << 1e-81) { default: break; case 0: L: { }break;  }");
tryItOut("/*infloop*/do {return <x><y/></x>; } while((prop = export prototype.prototype = eval(\"new ()((eval(\\\"throw ({a1:1});\\\", this)))\", Boolean(new Math.pow(), (new ([1,2,3,4].map).apply(function(id) { return id }, window))))));");
tryItOut("with((<><zzz>(Function).call(eval(\"/*infloop*/for(const constructor; [[]]; null) return;\", undefined), *::*).isPrototypeOf((function(y) { yield y; ;; yield y; })(prototype, window))</zzz></>.throw(true)))return;");
tryItOut("[1,2,3,4].slice");
tryItOut("{continue M; }");
tryItOut("/*infloop*/L:for(setter.constructor =  \"\"  | arguments; <><x><y/></x></> >>>=*; function  prop (__iterator__, __count__) { return <><x><y/></x></> } ) return prototype;");
tryItOut("/*for..in*/for(prop = 3/0 in <y><z/></y>) {let ?;; }");
tryItOut("/*infloop*/while( /x/ ){/*for..in*/for(const [prototype, __count__] = prototype.__noSuchMethod__ = __iterator__; in __noSuchMethod__) return true; }");
tryItOut("let __parent__; const __count__\n/*for..in*/for(constructor = <x><y/></x>.isPrototypeOf(033) in <x/>) {break M;yield; }");
tryItOut("continue L\nreturn 4.;");
tryItOut("yield");
tryItOut("if((yield @foo)) {return <><x><y/></x></>;throw  '' ; } else  if (( /* Comment */ '' ) <= (window for each (prototype in <x><y/></x>))) {yield; } else {export __proto__; }");
tryItOut("if(((({a1:1}).__lookupGetter__(\"constructor\")))()) { if (new ((p={}, (p.z = (function ([y]) { })())()))) /*for..in*/for(prototype in <x><y/></x>) {continue M;break ; }} else {return *::*; }");
tryItOut("/*for..in*/for(__count__ in (((1 for (x in [])))( \"\" ))){return; }");
tryItOut("if(1e81) { if (<x/>) {this;export __parent__; } else ;}");
tryItOut("do with(false){} while(((#2=null.hasOwnProperty(\"prop\"))) && 0);");
tryItOut("gc()\n");
tryItOut("/*infloop*/for(<y><z/></y>;  for ( { return *::*.__lookupGetter__(\"prop\") }  in <y><z/></y>); <><x><y/></x></>) {gc()<x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ = constructor; in 0/0) {yield;export *; }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::prototype in <><x><y/></x></> >>> <x><y/></x>.constructor = <><x><y/></x></>) L:if(__proto__ = <><x><y/></x></> & 1e81) throw  \"\" ; else  if (<x/>.__defineGetter__(\"__iterator__\", ( /x/g ).__defineSetter__))  if (({prop: (window.isPrototypeOf( '' )) })) else {(__count__);constructor = <y><z/></y>, constructor = *; }");
tryItOut("while((null || @foo) && 0)export __noSuchMethod__;");
tryItOut("gc()\n/*for..in*/for(const constructor in ) constructor\n");
tryItOut("L: yield  '' ;");
tryItOut("export constructor;");
tryItOut("with(<x/>){export *;return; }");
tryItOut("if(((yield ((__count__ = *).__parent__)))) /*infloop*/L:while(eval){} else  if ([15,16,17,18].filter(new Function, (<><x><y/></x></>.prop))) /*for..in*//* nogeckoex bug 349964 */ for  each(var {/*for..in*/for(const prop in ((Math.pow)(@foo)))__iterator__ = <x><y/></x>, prototype = false; }['constructor'] in (-0)) constructor;");
tryItOut("");
tryItOut("/*infloop*/for(*::*;  /x/  >= __proto__; new ()()) M:if(window) let __iterator__, __count__ = <y><z/></y>; else  if (<x><y/></x>) {let constructor, constructor = undefined; } else var __parent__ = null;");
tryItOut("if((__count__ = 0/0 -= <x/>)) L:with(<><x><y/></x></>.eval(this))constructor; else  if (yield  /x/ .valueOf(\"number\")) {yield <><x><y/></x></>;throw <><x><y/></x></>; }");
tryItOut("with(({__noSuchMethod__: window})){<><x><y/></x></>;return; }");
tryItOut("if(__proto__ = -0(@foo, <x/>)) { if (this.__defineGetter__(\"prop\", ((window for each (__noSuchMethod__ in __parent__))))) prop.__iterator__ = constructor;} else L: return constructor;");
tryItOut("/*infloop*/for([1].throw(<x><y/></x>).prototype = false; this.__defineSetter__(\"prototype\", eval); let (__noSuchMethod__, constructor) 1e81) yield;");
tryItOut("if(<y><z/></y> &= 1e81) var __proto__\nswitch(window) { case *:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__proto__) in *) {; }");
tryItOut("gc()");
tryItOut("yield; const constructor;");
tryItOut("if(constructor = <x/>) { if ( /* Comment */this) {export *; }} else {return false; }");
tryItOut("for(let y in [5,6,7,8]) with({}) this.zzz.zzz;");
tryItOut("(<x/>.return;) = __iterator__;");
tryItOut("throw constructor;");
tryItOut("prop = __proto__;");
tryItOut("if(__iterator__.prop) {throw ([get if ([[]])]) ? <><x><y/></x></> :  /x/g .propertyIsEnumerable(\"__proto__\");//h\n } else ({ __count__: ({ \fgetter: ({ constructor: ({ __noSuchMethod__: ({ __noSuchMethod__: __proto__, __parent__: __count__ }) }), __iterator__: ({ __iterator__: ({ __proto__: __parent__, __parent__: __iterator__ }), __noSuchMethod__: prop }) }), __proto__: [] }), #3={a:#3#}['__count__']: prototype })");
tryItOut("Math.sin const prop");
tryItOut("L: {yield; }");
tryItOut("var ({ __count__: function::prop, prop: constructor }) = prototype, __parent__ = (uneval((eval(\"[]\", <x><y/></x>)))), [, , ];");
tryItOut("gc()");
tryItOut("/*infloop*/for(let __count__; <x><y/></x>; <><x><y/></x></>) {(1 for (x in [])) }");
tryItOut("");
tryItOut("/*for..in*/for(((this)(-1)) in constructor %= 5.0000000000000000000000.unwatch(\"__parent__\")) /*for..in*/for(const prototype in ((((({a2:z2}) if (<x><y/></x>))).watch\t)([undefined if (__proto__)]))){prototype, @foo; }");
tryItOut("/*infloop*/for(prototype;  /x/ ; (-0)) return [z1,,];");
tryItOut("switch(eval(\"break ;\", @foo)) { default: case 8: if(constructor.prop getter=  '' ) var __parent__ = #1=[#1#]; else  if ( \"\"  .@ window) {; }break; case -0.prototype%=this.watch(\"__noSuchMethod__\", [,,]) ? __iterator__.prop = ({__noSuchMethod__: <y><z/></y> }) : 033 >>> <x/>: (<x><y/></x>);break;  }while(((let (__iterator__) <><x><y/></x></>)) && 0){/*\n*/<x><y/></x> }");
tryItOut("for(let y in [5,6,7,8]) if(<y><z/></y>) { if (<x/>) {return; }' else {return;return; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__//h\n in ({ prototype: ({ constructor: __noSuchMethod__, __proto__: prop }) }) = __proto__) {__iterator__; }");
tryItOut("throw window;");
tryItOut("if(yyy) {}");
tryItOut("/*for..in*/for(let __iterator__ in (((1 for (x in [])))(window['__count__'] = [].*)))var function::prop = *::*, __proto__ =  /x/ ;");
tryItOut("try { __noSuchMethod__ = ({a1:1}), __parent__; } catch(__iterator__ if (<x><y/></x> <<= <><x><y/></x></>)) { return; } finally { yield <x/>; } ");
tryItOut("let(__count__, __iterator__) { with({}) with({}) {}");
tryItOut("/*for..in*/L:for(const \f__parent__ in window) ;");
tryItOut("L: export *;");
tryItOut("export __noSuchMethod__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in #1=<x><y/></x>) {const set\n }");
tryItOut("with({prototype: function ()1e+81(__iterator__, <><x><y/></x></>)}){break ;function(q) { return q; } }");
tryItOut("for(let y in []);");
tryItOut("export prop\nyield this;");
tryItOut("switch( /* Comment */__parent__ >>=  '' ) { default: break; case 5: __parent__ = true, __noSuchMethod__;break; (<x/>).watchbreak; case [z1]: break;  }");
tryItOut("M:if((({if(<y><z/></y>) {export __noSuchMethod__;export __count__; } else  if (constructor) {return [1,,]; } })[let (__parent__, __count__ = <><x><y/></x></>) (({__proto__: prop}))])(this)) { if ((this.__defineSetter__(\"__proto__\", (({}).hasOwnProperty).call))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in window) export prototype;} else {with({prop: ((-0)).call(<y><z/></y>, false, <y><z/></y>)/*\n*/ -= -3/0 ? #1=[#1#] : @foo}) }");
tryItOut("/*infloop*/for(const __proto__; <><x><y/></x></> + 1e-81; \f(<x><y/></x>.__lookupSetter__(\"prototype\"))) {({}).__lookupGetter__ }");
tryItOut("L: {throw <y><z/></y>;{}yield; }");
tryItOut("(this);");
tryItOut("let (__parent__ = <y><z/></y>) {  }");
tryItOut("/*infloop*/for(let [, [, , __noSuchMethod__, [__parent__]], , __count__, [, ]] = [] = <y><z/></y>; ( ''  %= <x/> == ({__count__ setter: ({}).__lookupGetter__ })); Function.@*) {return  '' ;return <><x><y/></x></>; }");
tryItOut("export *;\nthrow export __proto__;/*\n*/;\n");
tryItOut("{var __parent__, prop;if({}) { if (prop.eval(window)) {const __iterator__;const constructor; } else const __noSuchMethod__ = <x><y/></x>, __parent__ = {return; };} }");
tryItOut("return;");
tryItOut("let(__iterator__, ({ __noSuchMethod__: prototype }) = setter) ((function(){({ __proto__: ({ prop: __noSuchMethod__, __noSuchMethod__: ({ prototype: __noSuchMethod__ }) }), constructor: [, , ] }) = __iterator__;})());");
tryItOut("break ;");
tryItOut("with({__noSuchMethod__: <x/>.yoyo(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)}){\fL: \fyield <x><y/></x>;(new Function(\"gc()\")) }");
tryItOut("if(undefined.throw(0.1) !== window((__parent__ = (__parent__)), constructor)) {{const __iterator__ = <x><y/></x>, constructor;var __noSuchMethod__; }; } else  if (((<x><y/></x>\t.(null)) :: __noSuchMethod__)) gc else return -3/0;");
tryItOut("M:do {if(( /x/g  ..  '' )) {{;let __iterator__; }if(__proto__ % null) {__count__;0x99 } else  if ((++<x/>)) {} else let }return; } while(((delete (prop = <><x><y/></x></> ? false :  /x/g ))) && 0);");
tryItOut("{continue ; }");
tryItOut("with({}) { let(constructor = __parent__ = __count__) ((function(){throw StopIteration;})()); } ");
tryItOut("let (__count__) { ; }");
tryItOut("let(__count__ = [z1]) ((function(){gc()})());");
tryItOut("while(((new <><x><y/></x></>)) && 0)var __iterator__;");
tryItOut("let __count__ = default: const __parent__;break; , prop;");
tryItOut("while((<><x><y/></x></>) && 0)");
tryItOut("/*for..in*/for(const __iterator__ = arguments[({a2:z2})] in ({ prop: [ /x/g ], prototype: ({ __iterator__: prop, constructor: __parent__ }) }).__proto__ =  \"\" ) {export __count__; }");
tryItOut("/*for..in*/for(var constructor in ((false)(( '' .yoyo(__parent__))))){} const prototype;");
tryItOut("break L");
tryItOut("throw prototype;");
tryItOut("(/\n");
tryItOut("do {export __noSuchMethod__; } while((-3/0) && 0);");
tryItOut("{__parent__ = (__parent__.__proto__ = <y><z/></y>);/*infloop*/for(var prop; [this += *::*].sort(eval); (yield <y><z/></y>).constructor) {Math.powyield; } }");
tryItOut("const __proto__;");
tryItOut("prop = window");
tryItOut("/*for..in*/M:for(const constructor =  '' \t in window) {default: return __parent__;break; break; case 0:  }");
tryItOut("<x><y/></x>");
tryItOut("L:with(__noSuchMethod__)continue ;");
tryItOut("if(//h\n<x><y/></x>) {; } else  if (<x/>) {return true;Math.sin }");
tryItOut("{break L;yield; }");
tryItOut("/*for..in*/for(var prototype = [1] in true) gc()");
tryItOut("if( '' ) {__parent__ } else {L: {yield;throw Math.sin; }__count__: <y><z/></y> }");
tryItOut("/*infloop*/for(let ({ __proto__: ({ __iterator__: ({ constructor: [({ prop: ({ x::__noSuchMethod__: ({ __iterator__: __parent__, __noSuchMethod__: prop }), __parent__: ({ prototype: prop, __proto__: prop }) }) }), ({ prototype: prop }), ], __parent__: __parent__ }), x::__parent__: ({ __parent__: ({ __count__: ({ __noSuchMethod__: ({ __iterator__: prototype, __proto__: [] }), __noSuchMethod__: [] }), constructor: [] }), prop: [[], , ({ prop: prototype }), ] }) }), __noSuchMethod__: [({ __parent__: [({ __count__: ({ __proto__: ({ prop: prototype }), __parent__: [prototype, __count__, prop, constructor, ] }), __iterator__:  { ; }  }), prop, , __proto__], __noSuchMethod__: ({ __noSuchMethod__: ({ constructor: [[, __noSuchMethod__], , , ], __noSuchMethod__: [({ __count__: constructor }), , __noSuchMethod__] }) }) }), ] }) = ('haha'.split)((yield __iterator__)); __proto__.prop; <{function::__count__}> </{function::__count__}>) switch(({ __iterator__: [({ __parent__:  for each (prop in [z1]), __noSuchMethod__: ({ prototype: constructor }) }), ({ __parent__: prototype }), , ({ __count__: ({ prop: prop, prop: function::function::__noSuchMethod__ }), __proto__: ({ __iterator__: __count__, x::__proto__: prototype }) }), [({ __iterator__: constructor, __noSuchMethod__: __noSuchMethod__ }), , prototype, ({ constructor: prop })]] })) { default: yield;break;  }");
tryItOut("let ([] = <y><z/></y> ^= @foo.__defineGetter__(\"__count__\", (1 for (x in [])))) { /*for..in*/for(let [__proto__, __parent__] = <x><y/></x>.@* in  '' ) {/*for..in*/for(var __iterator__ in ((__parent__)(null))){ '' ;; } } }");
tryItOut("with([ '' ].filter(function  __count__ (__proto__) { yield this.__defineSetter__(\"prop\", function(y) { yield y; var constructor = constructor;; yield y; } } ))L: {(false).watch }");
tryItOut("while(((prop.__count__)//h\n) && 0)/*infloop*/for(*::*; prototype; this) {const prop; }");
tryItOut("do return <x><y/></x>; while((*::*) && 0);");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] =  /x/  in #3={a:#3#}) /*for..in*/for(var __iterator__ in __proto__) {; }");
tryItOut("M:while((this) && 0)(false);");
tryItOut("let(({ __proto__: __parent__, prop: [, , ] }) = (this)[(-1)], prop = (<y><z/></y> if (window))) { continue L;");
tryItOut("for(let y in [5,6,7,8]) let(prop) { /*infloop*/for(var prop; <x><y/></x>; <x><y/></x>) {export *; }");
tryItOut("export constructor;");
tryItOut("if(1e81.__lookupSetter__(\"__count__\")) { if ([15,16,17,18].filter('haha'.split, *::*[window])) {switch([({ prop: prototype }), , \n__count__] = @foo) { case 7: throw this.propertyIsEnumerable(\"__parent__\");break; break; case 9: yield window;break; break;  } } else {if(__noSuchMethod__) { if (*::*) yield; else throw *;}/*infloop*/L:while(__iterator__.eval(new Function(1e+81, <x><y/></x>)))(1e-81); }}");
tryItOut(";");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) try { ; } catch(__count__ if this.__defineGetter__(\"prototype\", (new Function(\"gc()\")))) { this.zzz.zzz; } catch(prop if <x/>) { __iterator__.__count__ = prototype; } catch(constructor if (function(){for(let y in [5,6,7,8]) return /;})()) { for(let y in [5,6,7,8]) yield this.yoyo(<x><y/></x>); } ");
tryItOut("yield\n__noSuchMethod__, __proto__ = <x><y/></x>;");
tryItOut(";");
tryItOut("throw StopIteration");
tryItOut("yield (1 for (x in []))();");
tryItOut("<zzz>[,,]</zzz>");
tryItOut("while((*::*) && 0)return;");
tryItOut("if(((true).watch).call(window.@foo, )) { if ((function  prop () { yield __proto__ = window } )()) L:switch(\f({a1:1})\n) { case new (*::*)(<x><y/></x>, __parent__): [,,];break;  } else {/*infloop*/do {;continue ; } while(true.hasOwnProperty(\"prototype\"));function(y) { yield y; yield;; yield y; } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in  '' ) {return <x><y/></x>; }");
tryItOut("L:with(<><!--yy--></>){{return prototype;; }break ; }");
tryItOut("for(let y in [5,6,7,8]) yield __noSuchMethod__ = (__count__(__iterator__) = <x><y/></x> = <x><y/></x>);");
tryItOut("/*infloop*/do {yield <><x><y/></x></>;break ; } while(this.__defineSetter__(\"__iterator__\", \tfunction (prop, constructor) { continue L; } ));");
tryItOut("<x><y/></x>return 0;");
tryItOut("{return }");
tryItOut("{export constructor;yield; }");
tryItOut("/*infloop*/do  while((return));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <><x><y/></x></>) {yield;let __parent__, __parent__; }");
tryItOut("yield;\nreturn <x/>;\n");
tryItOut("if(<x/>) {const __proto__, __iterator__; }");
tryItOut("{M:if(new (new Function)()) {/a/gi } else  if (<y><z/></y>.__lookupSetter__(\"__parent__\")) {yield [[]];gc() } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in ([*::*].some(function(y) { yield y; ; yield y; })).throw(* || [[1]])) ");
tryItOut("{}");
tryItOut("/*for..in*/for(__iterator__ = (( /* Comment */1.2e3.__lookupGetter__(\"prop\")))() in ) {/*infloop*/L:for(var __proto__; ( /x/g .valueOf(\"number\")).prop; __iterator__ = <><x><y/></x></> in [*].prop) yield; }");
tryItOut("export __iterator__\nthrow <><x><y/></x\r></>;");
tryItOut("let __iterator__;");
tryItOut("with(\nwindow ^ ((window).watch)((new Number(<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\"))), (new Function(\"{}\"))))/*infloop*/do export __noSuchMethod__; while(window)\n");
tryItOut("/*for..in*/for(const __parent__ in (((true).watch)(window))){}");
tryItOut("/*for..in*/M:for(const prototype = new (<><x><y/></x></>)((1e+81 & window)) in (-1).unwatch(\"x::prop\") -= window !=  \"\" ) /*for..in*/for(var __count__ in *::*) {var constructor = __iterator__, prop;throw this; }");
tryItOut("if((* ? <x><y/></x> : window)) { if (*) var prop = window; else {<x><y/></x>; }}");
tryItOut("return;");
tryItOut("switch((({__noSuchMethod__: new (eval)(null, *::*) }))[window.isPrototypeOf(false)]) { case 3:  const getter;case (<>({a2:z2}) / <x><y/></x></>)(): default: return;while((<><x><y/></x></>) && 0)(<x><y/></x>);break; case (this /=  /x/g ).valueOf(\"number\"):  }");
tryItOut("switch((new default: L:if(window if (*::*) *= (Math.sin())) throw <><x><y/></x></>; else  if ((prototype = <y><z/></y>.__lookupGetter__(\"__count__\"))) {export *;const __noSuchMethod__ = <><x><y/></x></>; } else {const __proto__, prototype;({}).hasOwnProperty }(({a2:z2}));/*for..in*/L:for(const [prototype, constructor] = (({ get prototype __parent__ (__noSuchMethod__, __parent__) { {} } , __proto__: ((uneval( /x/g ))) })) in <x><y/></x>) L: {;return false; }break; {}case 1: return;break;  = (new Number(constructor.__proto__ setter= ([1,2,3,4].map).call)), [, , , ({ __iterator__: prop, __count__: __iterator__ })](!false, __iterator__.__proto__))) { default: break; case (this.zzz.zzz): /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  \"\" ) /*infloop*/for([[1]]; [[1]]; <x/>) {yield 1.3;gc() }break;  }");
tryItOut("if(setter =  '' ) { if ((false.valueOf(\"number\"))) {(window);(new Function(\"prototype;\")) }} else {gc() }");
tryItOut("/*infloop*/for((function ([y]) { })(); prototype; __iterator__) ( \"\"  if (null))");
tryItOut("/*infloop*/for(prop = <><zzz>__noSuchMethod__</zzz></>; Function(true); window.__parent__) {let(__parent__ = @foo, __noSuchMethod__ = <y><z/></y>) ((function(){throw null;})());if(<><x><y/></x></>) { if (__parent__) (Math.sin).call} else {{} } }");
tryItOut("constructor;");
tryItOut("return;");
tryItOut("/*infloop*/for(var ({ __parent__: ({ prop: [, ], __noSuchMethod__: prop }) }) = __parent__; prop = [];  '' ) yield;");
tryItOut("L: {yield;return; }");
tryItOut("return 033\nL: ");
tryItOut("yield  /x/g ;");
tryItOut("if( /x/ ) {yield false; } else (#1=[#1#]).__defineSetter__");
tryItOut("L:if() 'haha'.split else  if (--(0/0 .@ null.*)) (__parent__); else {export *;switch(__count__) { case 3: break;  } }");
tryItOut("/*for..in*/for([constructor, __count__] = (__noSuchMethod__ = (1e81.throw()).isPrototypeOf(prototype.prototype = 1e-81)) in  \"\" .isPrototypeOf([z1,,]).__lookupSetter__(\"prop\")) {/*for..in*/for(__proto__ in false -= 0) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x/>) {return; } } const prop; }");
tryItOut("/*infloop*/L:for(const constructor = (<x/>).call(*, ); (-0).valueOf(\"number\"); undefined) {continue ;export __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(__count__ in ((function (__parent__,  \"\" .constructor) { return  /x/  } )(__iterator__))){if(<x><y/></x>) {return <y><z/></y>; } else  if (<x><y/></x>) {gc() } }");
tryItOut("try { let(({ prop: ({ __noSuchMethod__: __iterator__ }), __proto__: prop }) = 1e+81) ((function(){return;})()); } catch(prop if (function(){('haha'.split());})()) { /*for..in*/for(var prototype in <y><z/></y>//h\n) yield; } ");
tryItOut("/*for..in*/for(let function::constructor = __noSuchMethod__[ /x/g ]\r === let (constructor)  /x/g  in (((undefined.__lookupGetter__(\"function::__iterator__\")) for (prototype in this) if (window)))) switch(<x><y/></x>) { default: break;  }");
tryItOut("/*infloop*/for(prototype = (undefined.(//h\nwindow)) !== ( /* Comment */window) .. <y><z/></y>; (0 < __iterator__ = @foo); ({prop: <y><z/></y>}).isPrototypeOf( /x/g .__defineGetter__(\"__proto__\", ({}).__lookupGetter__).throw( \"\" .__iterator__ =  '' ))) /*infloop*/do {export prototype;/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) ; } while(-1);");
tryItOut("if(( /x/g )[<y><z/></y>]) {(<x><y/></x>); } else  if (new function () { return __noSuchMethod__ } (new (new Function)(), <><x><y/></x></>)) continue ; else {export __count__; }\t");
tryItOut("do {switch(<x/>) { default: export *;break; case 5: yield ({});return  \"\" ;case this.__defineGetter__(\"prototype\", [1,2,3,4].map): /*for..in*/for(const __proto__ in ((<x><y/></x>)(3)))export __parent__;break; break;  }gc() const prototype; } while((prototype) && 0);");
tryItOut("if((([[]] for (__proto__ in window)) ? * == [[]] : __iterator__.hasOwnProperty(\"prop\"))) {{}yield null; }");
tryItOut("if([11,12,13,14].some >>>=(new window(null))) return\n");
tryItOut("L:switch(([1,,])) { case (<x><y/></x>\n): throw 1.2e3;break;  }");
tryItOut("with({__proto__: arguments.__parent__.watch(\"__proto__\", (*::*).__defineSetter__)})let prototype = ;");
tryItOut("L: {yield  \"\" ; }");
tryItOut("if(__proto__) { if (*) (true);} else export __count__;");
tryItOut("/*infloop*/L:do <x><y/></x>; while( \"\" )");
tryItOut("{with(* instanceof [[1]]){/*infloop*/M:do gc() while([z1,,]); } }");
tryItOut("L: { }");
tryItOut("with({function::__count__: this.__defineSetter__(\"__parent__\", Object(<><x><y/></x></>))}){\fthrow {}; }");
tryItOut("/*infloop*/for(null;  /x/ ; <x/>) var __proto__, prop =  /x/ ;");
tryItOut("if(((({}).hasOwnProperty)())) ({}).__lookupGetter__ else  if (let (constructor = <x><y/></x>, x::__count__ = __count__) this) -0;");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.([[1]])) {export *;(<><x><y/></x></>); } else  if (new (eval)(())) break ; else /*infloop*/while(){Function }");
tryItOut("throw StopIteration;");
tryItOut("M:if(([,] &= <><x><y/></x></>)) { if ({} if (0/0)) {export __proto__;let __count__ = *, __count__ = false; } else ;}");
tryItOut("__count__ = (p={}, (p.z = <x><y/></x>)())");
