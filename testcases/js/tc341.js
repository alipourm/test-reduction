tryItOut("prototype const __count__;");
tryItOut("if(<x><y/></x>.*) {return <><x><y/></x></>;({}); } else ");
tryItOut("throw ([[z1] >>> window]);\nif(__proto__) { if ((__iterator__ = <><x><y/></x></>.constructor)) return;} else export __parent__;\n");
tryItOut("for(let y in []);");
tryItOut("do /*for..in*/L:for(const constructor = <><x><y/></x></> in #1#) return window; while((({})) && 0);");
tryItOut("if( /* Comment */-1.prototype = <x/>[<><x><y/></x></>]) {; }");
tryItOut("if(({})) {const __proto__ = undefined; }");
tryItOut("/*infloop*/L:for(new Exception((yield @foo), <x><y/></x>); [this.__defineSetter__(\"prop\", (({}).hasOwnProperty).call)].map([1,2,3,4].map); (this.__defineGetter__(\"__proto__\", /a/gi) -= window['__noSuchMethod__'] = __parent__ = <><x><y/></x></> & <x><y/></x><x><y/></x>\f )) {}");
tryItOut("if((((true *= {}) /= __iterator__ = constructor))) { if (<><bbb xmlns:ccc=\"#2=* .@ [1,2,3,4].map()\"><ccc:eee></ccc:eee></bbb></>) /*for..in*/L:for(var __noSuchMethod__ in ((Math.pow)( '' )))return __count__; else {throw <x><y/></x>;<x><y/></x>; const __proto__; }}");
tryItOut("yield * @ setter;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in this = delete (<y><z/></y>)) /*infloop*/M:for(let __count__;  /x/ ; (<x><y/></x>.valueOf(\"number\"))) {const __iterator__ = <><x><y/></x></>, __count__;return window; }");
tryItOut("with(~*){; const prototype;return  '' ; }");
tryItOut("throw StopIteration;");
tryItOut("return  /x/ \n/*infloop*/L:while((__parent__.__parent__ setter= [1,2,3,4].map))yield;");
tryItOut("if(<bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb>/*\n*/) { if (({__noSuchMethod____count__, __proto__: *::* })) {const function::constructor = , __proto__ = <y><z/></y>;\f(<><x><y/></x></>); }} else ;");
tryItOut("with({prop: ({__noSuchMethod__: (#1=true)})}){return [];yield <x><y/></x>; }");
tryItOut("M:if(window) { } else {{; } }");
tryItOut("export prototype;");
tryItOut("/*infloop*/M:while(*::*){(true); }");
tryItOut("M:if(<y><z/></y>[undefined]) throw  /x/ ;");
tryItOut("if((*::*.prop = __parent__)) {gc()\n }");
tryItOut("let (__proto__ = <x/>, __noSuchMethod__ = .2) { \tlet __parent__; }");
tryItOut("/*for..in*/for([__iterator__, prototype] = (/a/gi)(__noSuchMethod__.watch(\"__parent__\", 'haha'.split), ~new ([1,2,3,4].map)(<><x><y/></x></>)) in (eval(\"*\",  \"\" ))) let ({ __count__: __iterator__, prototype: __iterator__ }), prop;");
tryItOut("if((new Function(\"{}\"))) { if (-constructor.__parent__) {([1,2,3,4].slice).apply__iterator__; } else 033;}");
tryItOut("if((null.__proto__ = <><x><y/></x></>)) {}");
tryItOut("L:if(new Function(1.3)) { if (prototype) { }} else {export *; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; Exception( '' ); (<><x><y/></x></> instanceof <y><z/></y> * (/a/gi))) this.prop");
tryItOut("M:switch((constructor = @foo)) { case 6: /*for..in*/for(let constructor in <><x><y/></x></>) <y><z/></y>; }");
tryItOut("/*infloop*/for(new (function  __parent__ (__iterator__, __iterator__)<y><z/></y>)(); (({prop getter: gc })); (({ prototype: __count__ }) = __noSuchMethod__ = __proto__)) return;");
tryItOut("/*for..in*/L:for(prop in ((1e+81)([1]))){export *; /x/g ; }\n");
tryItOut("if(<y><z/></y>) {yield constructor;{} } else  if (<x><y/></x>) (constructor);");
tryItOut("/*for..in*/M:for(__count__ = (<x><y/></x>.__lookupGetter__(\"__proto__\")) in <><x><y/></x></>) function(q) { return q; }\ngc()");
tryItOut("{/*infloop*/for(__parent__.([15,16,17,18].sort( /x/ , *::*)); __count__ = new (false)(); ((p={}, (p.z = prototype = __noSuchMethod__.prop)()))) __noSuchMethod__ = true;while((delete (({ __proto__: prop, __proto__: [] }) = undefined.hasOwnProperty(\"prop\"))) && 0){<><x><y/></x></>;export *; } }");
tryItOut("/*infloop*/do 3/0 while(<x><y/></x>);");
tryItOut("__proto__(new (window)(<x><y/></\fx> += __parent__)) = __proto__;");
tryItOut("L:if(*::*) (function(id) { return id })\f; else #1=");
tryItOut("return ( /* Comment */(.2 ^= <y><z/></y>).prop = @foo.@foo);");
tryItOut("/*infloop*/for(__noSuchMethod__.prototype; constructor.prop; (eval(\"export prototype;\", window .@x:: *::*))) {(undefined);var __count__ = <x><y\f/></x>; }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (window.propertyIsEnumerable(\"__parent__\")).prototype in (null)(false)) (constructor);");
tryItOut("yield __count__;");
tryItOut("M:if(this.__defineGetter__(\"( /* Comment */this)((new ( '' ).__defineSetter__(Math.pow, <x><y/></x>)))\", (<x><y/></x>).watch)) { if ((-3/0.prototype)) return null;} else {export *;let __count__; }");
tryItOut("with({}) let constructor = <><x><y/></x></>, __proto__;");
tryItOut("/*for..in*/for(var __proto__ in __count__ = (new  \"\" (__count__%=*::*))) continue ;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("yield  /x/ \n");
tryItOut("let(({ __iterator__: prototype, __iterator__: ({ __count__\f: prototype }) }) = (p={}, (p.z = undefined === #3={a:#3#})())) ((function(){yield  /* Comment */-1;})());");
tryItOut("yyy");
tryItOut("let (__parent__ = window) { yield (new 'haha'.split( /x/g )); }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/M:do {5.0000000000000000000000; } while(<x><y/></x>);");
tryItOut("let(prototype = prototype, prop = true) { ");
tryItOut("{export *; }");
tryItOut("/*for..in*/M:for(const [prop, constructor] = void <x><y/></x> in __count__) {let __iterator__;yield -0; }");
tryItOut("/*for..in*/for(let [prototype, __parent__] = (eval(\"return  '' ;\", [[]]).prop = <><x><y/></x></>.eval()) in <> </>) {/*infloop*/for(let ({ __count__: __parent__, x::prop: [({ __proto__: prototype })] }); (window .@x:: @foo) /= (Math.sin).call(4., undefined, this); window.throw(033.prototype)) export prototype;export *; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let [__count__, prototype] = (undefined ^ null @ prototype << arguments <<= undefined) in this.zzz.zzz) let(__proto__ = ) ((function(){<><x><y/></x></>;})());");
tryItOut("throw __proto__;");
tryItOut("{with({}) { return this; }  }");
tryItOut("/*infloop*/for([<><x><y/></x></> for each (constructor in <x><y/></x>)]; __count__; (true).call( /x/g ,  '' )) M:if([[]]) {__count__ =  '' , prototype } else \n__count__, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*infloop*/L:while((--<y><z/></y>)){yield  '' ; }");
tryItOut("M:with({__iterator__: Iterator(<x><y/></x>, arguments) ? this.zzz.zzz : yyy.@*})L: yield this;");
tryItOut("/*infloop*/L:for(__parent__; (1.2e3).call(({x::__parent__: *}), , window); (yield <y><z/></y>)) continue L;");
tryItOut("if([window for (__iterator__ in  /x/g )]) { if (null) var __noSuchMethod__, __noSuchMethod__;} else {<><x><y/></x></>;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in [,,]) {/*for..in*/for(var __noSuchMethod__ = 0x99 in <y><z/></y>) {gc(){} } }");
tryItOut("/*infloop*/for((__iterator__.__noSuchMethod__) = undefined; -this.zzz.zzz; @foo & this(this.isPrototypeOf(new (function (prototype, constructor) { return <x/> } )(0x99)))) (<x><y/></x>);");
tryItOut("with({__noSuchMethod__: set = <x><y/></x>}){yield; }");
tryItOut("/*for..in*/M:for(let __iterator__ in (((((function (__parent__, prop)<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>).apply).apply\f).call)(prototype['__noSuchMethod__'] = prop = __proto__ = __parent__))){(null); }");
tryItOut("export __parent__;");
tryItOut("if(yield 1.2e3) {/*for..in*/for(const prop = [(eval(\"throw <x/>;\", 1.2e3))].some(function (__iterator__) { break ; } ) |= ([1,2,3,4].map !=  < prop) in *\n) {{} } } else  if (((<x><y/></x>.yoyo(<y><z/></y>)))) {if([(new (undefined.__defineGetter__(\"__parent__\", function () { __iterator__ } ))(undefined.unwatch(\"constructor\"), <x/>))]) break ; else  if ((p={}, (p.z = ([11,12,13,14].filter))())) {export *; } else {let prototype; } } else /*infloop*/do {([1]).watchexport __noSuchMethod__; } while((([1,2,3,4].map).call(1e+81, )));");
tryItOut("if(window -= ( /x/  ? [1,,] : <><x><y/></x></>)) { if ( /x/  + <><x><y/></x></>) {throw constructor;let prop, __parent__ = true; } else /*infloop*/while(null in  '' ()){return <x/>; }}");
tryItOut(" for (__noSuchMethod__.__noSuchMethod__ in -({ get prototype __count__ ()(*::*.isPrototypeOf(this)) }))");
tryItOut("if([this for each (constructor in window)]) { if ( '' ) {return; }} else ;");
tryItOut("let ([] = (<y><z/></y>)(<><x><y/></x></>, 1.3) ^ [15,16,17,18].map(Math.sin, [,,z1])) { M:if(<><x><y/></x></> -= constructor) { if (void __proto__) var __iterator__ = *, __count__;} else gc() }");
tryItOut("if(*::*) { if (#1#) var constructor = undefined;} else {gc() }");
tryItOut("{continue \ncontinue ; }");
tryItOut("M:if((null +  /x/ )) {arguments;@foo; } else export *;");
tryItOut("with({__count__: ({})}){function::prop = *; }");
tryItOut("/*infloop*/L:for(__noSuchMethod__; let (prototype) this .@*:: prototype for each (__count__ in undefined); [,,]) {/*infloop*/M:do {/*for..in*/for(__iterator__ in ((__count__)(true))){gc() }<x/> } while(new (-1).__noSuchMethod__(new (({}).__lookupGetter__)(true))); }");
tryItOut("<bbb xmlns:ccc=\"~__parent__\"><ccc:eee></ccc:eee></bbb><zzz>(this.__defineGetter__(\"__count__\",  /x/ ))</zzz>");
tryItOut("let(prototype, prototype) ((function(){this.zzz.zzz;})());");
tryItOut("throw StopIteration;");
tryItOut("L:with({prototype: (4. *= window)})( /x/ );");
tryItOut("yield prop;");
tryItOut("with({}) __parent__ = __parent__;");
tryItOut("continue ;");
tryItOut("return eval(\"{}\", true).watch(\"__noSuchMethod__\", Math.pow) * 1e-81.eval( \"\" ).prototype;");
tryItOut("__proto__");
tryItOut("for(let y in [5,6,7,8]) try { throw __noSuchMethod__; } catch(__parent__ if window) { return; } ");
tryItOut("if(let (prop = __noSuchMethod__ = -1) __parent__) {{}\ngc() } else  if (.2) if(<><x><y/></x></>) { if (4.) yield;} else \n/*for..in*/L:for(let __iterator__ in (((1 for (x in [])))(3))){* }\n else {; }");
tryItOut("/*for..in*/for(__proto__ = 1.3 ? <x><y/></x> : true.watch(\"prop\", Math.sin) in (({__count__: undefined, __noSuchMethod__ setter: new Function }))) {switch(__count__) { default: break;  }return; }");
tryItOut("for(let y in []);");
tryItOut("\nexport *;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in []) const prototype = __parent__;");
tryItOut("if([11,12,13,14].map > (__proto__ = [1,,])) { if ([z1]) {{}; } else { }}");
tryItOut("(function(y) { yield y; export *;; yield y; }).call{}");
tryItOut("{[1,2,3,4].slice<y><z/></y> }");
tryItOut("L: {<><x><y/></x></>;<x><y/></x>; }");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("{gc() }");
tryItOut("/*for..in*/for([__parent__, prototype] = (\n([, [, , prop], , ({ prototype: ({ constructor: prop }) }), ])) in new (prototype)()) if(<x><y/></x> >= __parent__) break ; else {prop = <><x><y/></x></>throw prop; }");
tryItOut("/*for..in*/for(let __parent__ in yield *::*) return <>null</>;\nthis.zzz.zzz\n");
tryItOut("L:switch(this.hasOwnProperty(\"prototype\")) { case 2: __noSuchMethod__;break;  }");
tryItOut("with(([15,16,17,18].some(false, __noSuchMethod__.__count__ = this.__defineSetter__(\"__parent__\", (window).watch)))){{(<><x><y/></x></>);/*infloop*/L:for(window; 1e-81; this)  }/*for..in*/L:for(var prop = (__noSuchMethod__.@foo) .@*:: (1e4.__defineSetter__(\"__proto__\", Function)) in (-0)) /*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in this) const __iterator__ =  '' ; }");
tryItOut("/*infloop*/for(let [__iterator__, , ({ __iterator__: ({ function::__noSuchMethod__: [__proto__, , , ({ __parent__: ({ prototype: [prop] }), prototype: ({ constructor: ({ __iterator__: constructor, __proto__: __proto__ }) }) }), __count__] }) }), , ({ __count__: [({ __parent__: __iterator__, constructor: ({ \tdefault: let __noSuchMethod__;: 1.2e3, function::__iterator__: ({ __noSuchMethod__: ({ constructor: __parent__ }) })\f }) }), ({ (constructor)(__noSuchMethod__): [(<x><y/></x>)( '' )] }), ]\t, function::__noSuchMethod__: [] })] = +__iterator__ / ( if (undefined)) .. <x><y/></x> ? (yield 3.141592653589793) : __parent__.__defineGetter__(\"prototype\", gc); function  __iterator__ (__proto__) { return [<x><y/></x>].unwatch(\"__proto__\") }  << typeof ([<x/>].sort(<><x><y/></x></>)); (constructor.(this))) let(__noSuchMethod__, constructor) ((function(){__proto__ = prop;})());");
tryItOut("/*infloop*/do {break ;return; } while((({__proto__: true instanceof __count__})));");
tryItOut("__proto__ = <y><z/></y>;\n(<x/>);\n");
tryItOut("yield <x><y/></x>;\n(new Function);\n");
tryItOut("/*for..in*/for(const __count__ = __parent__ in __parent__) {export __count__; }");
tryItOut("let (constructor) { let prop = this, __iterator__ = <y><z/></y>\n }");
tryItOut("let (__iterator__ = this, __noSuchMethod__) { function::__count__, prop; }");
tryItOut("M:with(__parent__ = *::*)\fexport *;");
tryItOut("/*for..in*/for(var (--[15,16,17,18].filter(function (prototype) { return <y><z/></y> } , 033))['__iterator__'] in (function(q) { return q; }())) {(5.0000000000000000000000).watch }");
tryItOut("/*for..in*/M:for(const prop in <x><y/></x>) {(<x><y/></x>);return; }\n");
tryItOut("do do {/*infloop*/do {;return; } while(++<x><y/></x>); } while((this.__defineGetter__(\"x::__noSuchMethod__\", new Function)) && 0); while(([[1,2,3,4].slice].filter(((Exception(*))).watch).__defineSetter__(\"__parent__\", (<><x><y/></x></>.unwatch(\"__iterator__\")).call)) && 0);");
tryItOut("with(<y><z/></y>){(<><x><y/></x></>);/*infloop*/while(window){with( /x/ .__lookupSetter__(\"constructor\")){const __parent__ = null;let __parent__, prop; }gc() } }");
tryItOut("M:if(#0=[this]--) {L:if(({__parent__:  /x/ })) {break M; } else  if (()) <><x><y/></x></>;if(\n(__parent__+=<><x><y/></x></>)) { if (__iterator__.__parent__) export function ([y]) { };} else *::* }");
tryItOut("if(++ ''  < (uneval(arguments))) { if (-1) yield;} else \t{var __proto__, false = <x><y/></x>;var prop; }");
tryItOut("/*for..in*/for(let prop = yield <x/> in true) ;");
tryItOut("throw StopIteration;");
tryItOut("L: return;");
tryItOut("L: {{gc()if( '' ) {throw <x><y/></x>; } } }");
tryItOut("{{yield prop; } }");
tryItOut("if(0/0) <x/>; else  if (*) return;{'haha'.split }");
tryItOut("{var prop; }");
tryItOut("gc()\n");
tryItOut("with({__count__: __proto__.__iterator__ getter= /a/gi})gc()");
tryItOut("while((window ^ window) && 0){switch((true)[<x/>]) { default: break; case 6: /*infloop*/L:for(const __count__; <><x><y/></x></>; null) break;  } }");
tryItOut("{gc() }");
tryItOut("{for(let y in []); }");
tryItOut("/*infloop*/while((p={}, (p.z = ((\t__iterator__ = prototype for each (__iterator__ in false))))())){const __noSuchMethod__; }");
tryItOut("throw __iterator__;");
tryItOut("if(__proto__ = (new Date())) {if(window) {export *;/*infloop*/do {export constructor;<x><y/></x>; } while(undefined); } } else  if ( .(this.zzz.zzz)) return;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const   in <x/>\t.__defineSetter__(\"prop\", Math.pow)) \fthrow ({a2:z2});");
tryItOut("L: ;");
tryItOut("if(((/a/gi)(<y><z/></y>))) { if (typeof <x><y/><\t/x>) {continue ;let __count__ = , __parent__; } else throw __count__;}");
tryItOut("do {{} } while((prototype%=*::*) && 0);");
tryItOut("if(new Number()) {if( /x/g  .@*:: window) let __noSuchMethod__ = *; else  if (constructor) { } else return window; } else {{} }");
tryItOut("if((((033 >>>=[,]) for (__proto__ in  \"\" ) for each (__proto__ in <><x><y/></x></>)))) { if ((-0) == ({})) /*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in <><x><y/></x></>) gc() const prototype;} else {return; }");
tryItOut("return;");
tryItOut("with({function::__noSuchMethod__: (eval(\"/*infloop*/for(var prop; [1]; .2) {throw undefined;export *; }\", ({x::__proto__: __proto__, __proto__: undefined })))})if((this\n).__defineGetter__(\"__count__\", function  __iterator__ ()<x/>)) {var prototype = [,];gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {;/*for..in*/for(let __count__ = (new <x><y/></x>()).__parent__ in __noSuchMethod__) {(true);gc() } } while((yield window * prop = 0x99));");
tryItOut("/*for..in*/for(prototype in (((gc).call\r)(__count__.(*))))new (true)(<><x><y/></x></>, constructor).__lookupGetter__(\"prop\")");
tryItOut("L:with(new ( /* Comment */<><x><y/></x><\f/>[try { yield  \"\" ; } catch(__proto__) { const  /x/g ,  /x/ ; } ])(__noSuchMethod__ = __iterator__))continue ;");
tryItOut("/*for..in*/M:for([constructor, prototype] = ([1,2,3,4].map)(<><x><y/></x></>, yield null) in -1) {break L;{return;M:if(<y><z/></y>) { if (__proto__) { }} else {(__proto__); } } }");
tryItOut("-if((__count__|= /x/ )) {export __count__;export __count__; const prototype; }");
tryItOut("/*infloop*/while(<xxx>{prop}</xxx>){/*infloop*/M:for([0.1 if (<><x><y/></x></>)];  /x/g  ^= this.@*; (prototype.(((p={}, (p.z = this ||  \"\" )())))))  }");
tryItOut("/*for..in*/for(const __count__ = function ([y]) { } in window) <x/>;");
tryItOut("while((<><x><y/></x></>.__defineSetter__(\"constructor\", function(q) { return q; })) && 0){return; }");
tryItOut("/*infloop*/for(__iterator__; @foo; (false != @foo)) gc()");
tryItOut("if((__noSuchMethod__).call([], (window.isPrototypeOf(#1#)), <><x><y/></x></>)--) { if (((this.__defineGetter__(\"__parent__\", ({prototype: @foo }))).unwatch(//h\n\"prop\"))) __parent__ = __noSuchMethod__; else {/*infloop*/L:for(({ constructor: __proto__, prop: __iterator__ }) = __noSuchMethod__.__proto__; ((function(q) { return q; }).call(this, \f));  /x/ .unwatch(\"__count__\")) return null;/*infloop*/for(var __noSuchMethod__; null = ({a1:1}); (<><x><y/></x></> ? <x/> : <x/>)) __proto__ = __proto__, __iterator__; }}");
tryItOut("continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in constructor.__noSuchMethod__ = *::*) {}");
tryItOut("/*infloop*/for(let prototype; 3/0; * :: __count__) {export __noSuchMethod__;export *; }");
tryItOut("/*for..in*/for(var prototype = new ({}).__lookupGetter__(<x><y/></x>, ({a1:1})) in this) {return;yield this; } const \f__iterator__;");
tryItOut("/*infloop*/for(__parent__ = ((-0) >>> __parent__); __proto__.(null.hasOwnProperty(\"__noSuchMethod__\")); <x><y/></x> -= *) \fcontinue M;");
tryItOut("yield [,,]\n");
tryItOut("__noSuchMethod__ = prop.prop = <x/>\n\n");
tryItOut("/*infloop*/for([({ __parent__: constructor }), , , , ] = ; 3(); [15,16,17,18].sort(__proto__, ({ get __iterator__ __count__ (__iterator__, __iterator__) { return this }  }))) export *;");
tryItOut("switch(((<><x><y/></x></>)[undefined])) { default: /*for..in*/M:for(var [__noSuchMethod__, __count__] =  /x/g  in -0) export *; }");
tryItOut("{L:with({__iterator__: 3})continue ; } const __proto__;");
tryItOut("L:if(constructor = (({__proto__ getter: function(y) { yield y; {}; yield y; } }))((__iterator__ =  '' ), (new Error()))) {continue M; } else  if (eval(\"(*::* - <x/>)\", )) [1,2,3,4].slice else ;");
tryItOut("/*for..in*/for(var [constructor, let] = (new (eval)()) in ! \"\" ) (0x99);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__noSuchMethod__ in <x><y/></x>) <x/>;");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__ = __parent__;");
tryItOut("if(prototype(window).__count__) {export *; } else  if ([(-0) for each (__proto__ in true)]) /*for..in*/for(var __parent__ in ((new Function)(false))) else {/*for..in*/M:for(__proto__ in ((<><x><y/></x></>)(<><x><y/></x></>))){{} } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(((Math.sin)(@foo))){if( /x/g ) export ;; else  if (<x/>) {gc(); } }");
tryItOut("if((return)) @foo else let __parent__ = <><//h\nx><y/></x></>\n");
tryItOut("with({__parent__: 0x99}){export *; }");
tryItOut("/*for..in*/for(var [constructor, __count__] = (([1,2,3,4].slice)()) in (true++)) {gc()if(constructor.__defineSetter__(\"__iterator__\", function  prop (__count__, __noSuchMethod__) { yield false } )) { if ([<x><y/></x>].sort(function(y) { yield y; var __iterator__ = <><x><y/></x></>;; yield y; })) return;} else {throw true;__iterator__ =  /x/ ; } }");
tryItOut("/*infloop*/L:while(this.__defineGetter__(\"__noSuchMethod__\", ((<y><z/></y>).call).call)){export *; }");
tryItOut("/*for..in*/for(let  = 'fafafa'.replace(/a/g, (/a/gi).call) in new ((<x><y/></x>).watch)()) {throw  /x/ ; const __noSuchMethod__; }");
tryItOut("/*for..in*/for(let (<x><y/></x>)(<x/>) in ((gc)(__count__ = []/*\n*/))){/*for..in*/for(let (<y><z/></y>)(this) in [,]) {continue M;(@foo); } }");
tryItOut("if(@foo.unwatch(\"__proto__\")++) { if (window) {__parent__ } else {do export __parent__; while(() && 0); }}");
tryItOut("with({__noSuchMethod__: __iterator__ = (<y><z/></y>.prototype)++})/*for..in*/for(let [__iterator__, __parent__] =  /x/g  in <y><z/></y>) {yield;yield undefined; }");
tryItOut("return;");
tryItOut("break M;");
tryItOut("if((constructor = <><x><y/></x></>)) L: (<><x><y/></x></>); else  if (prototype = -0) gc()\n\n else {if(<><x><y/></x></>) {{} } else ; }");
tryItOut("let(__noSuchMethod__ = constructor) ((function(){export *;})());");
tryItOut("M:switch(@foo) { default: ;break; case 2: {} }yield;");
tryItOut("let (__count__ = setter = __iterator__) { /*infloop*/do {(-1); } while(this.__lookupSetter__(\"constructor\")); }");
tryItOut("return [1];const prototype, constructor\nexport __parent__;");
tryItOut("do (__noSuchMethod__); const __count__; while(((new (({prop: #1#}))())) && 0);");
tryItOut(";");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = <x/>, prototype) { let(__count__) { var prop = @foo;");
tryItOut("/*infloop*/for(__parent__; ( *= (true >>>=<y><z/></y>)[window .@*:: 1e+81]); RegExp()) {function  constructor (prop, prop) { yield * }  } const __count__;");
tryItOut("if((constructor =  \"\" ).constructor) {/*infloop*/for(let __parent__;  '' ; (#3={a:#3#}.__parent__)) {break M;return; } } else  if ((uneval(<><x><y/></x></> += [z1]))) M:do {{}export __count__; } while((@foo) && 0); else {{continue L;yield <><x><y/></x></>; } }");
tryItOut("L: {const __iterator__ = @foo, __parent__; }");
tryItOut("/*infloop*/for(let __count__ = <x><y/></x>; @foo; false) {*; }");
tryItOut("do __iterator__ =  /x/g  while((eval(\"return;\", __count__).@*) && 0);");
tryItOut("M:while((\n__iterator__ = ({a1:1})--) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <y><z/></y>) ");
tryItOut("/*infloop*/for(__parent__;  /* Comment */<><x><y/></x></>; ((<x><y/></x>)(1.3))) {throw <x><y/></x>;export *; }");
tryItOut("/*infloop*/while(new (1e+81 & __iterator__ in [15,16,17,18].filter('haha'.split, <y><z/></y>))([prototype] = ({ __iterator__: prop }))){return <x><y/></x>;return @foo; }");
tryItOut("yield  /x/g ;");
tryItOut("/*for..in*/M:\ffor(__count__ = <x><y/></x>.valueOf(\"number\").unwatch(\"__noSuchMethod__\") in <x><y/></x>) var function::__parent__, __parent__;");
tryItOut("(<x><y/></x>);/*infloop*/for(var __parent__ = prop; <x/>; <x><y/></x>) {(__iterator__);const __proto__ = <x><y/></x>, prop = this; }\nif(@foo) __iterator__ = , default: break;  =  /x/g ;");
