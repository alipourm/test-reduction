tryItOut("/*infloop*/for(var __iterator__; *::*; 1e+81) {if(<><x><y/></x></>.__defineSetter__(\"let\", \f({}).hasOwnProperty)) <></>; else  if (@foo.__proto__) throw prop; else {(new Function).call{} } } const constructor;");
tryItOut("(L:if(([* for each (prototype in ({a2:z2}))])) { if ()this.__defineSetter__(\"__count__\", function  prop (__parent__, prop) { return __proto__ } )) if(<y><z/></y>) { if (yield  \"\" ) let (__parent__, __noSuchMethod__) { if(<y><z/></y>) function(q) { return q; } }} else {var __noSuchMethod__, __proto__ = undefined; }} else {throw <x/>; }");
tryItOut("if((\n(let (prototype = <x><y/></x>, __count__ = *) ))) { if ((#1=__parent__.propertyIsEnumerable(\"__noSuchMethod__\"))) (<x><y/></x>.eval( '' )throw( /x/ ))} else {gc()var <x><y/></x>; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; __proto__; <x><y/></x>) yield;");
tryItOut("if(typeof __noSuchMethod__ = undefined) { if (#1=[<x><y/></x>].eval(@foo\n)) {var __iterator__ = @foo;gc() }} else {yield;return; }");
tryItOut("/*for..in*/M:for(var __count__.prototype in [,]) {yield <x><y/></x>\n;with(<x><y/></x>){} }");
tryItOut("{gc()function ([y]) { }; }");
tryItOut("if(prototype) {{}export *; } else var __proto__ = *::*, __count__ = <><x><y/></x></>;");
tryItOut("{throw <x><y/></x>; const __noSuchMethod__; }");
tryItOut("L: [[1]]");
tryItOut("{with(({prototype: prop }))switch(<x><y/></x>) { case 1: break; break; break; default: break;  } }");
tryItOut("if([,,z1]) { if ((this.zzz.zzz)) export __noSuchMethod__; else export prop;}");
tryItOut("return;");
tryItOut("with(++'fafafa'.replace(/a/g, [1,2,3,4].map)){gc() }");
tryItOut("([[1]]);");
tryItOut("with({}) return (1 for (x in []))((__proto__.constructor = this), true);");
tryItOut("break \tL;");
tryItOut("(3/0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in *::*) yield; const __parent__;");
tryItOut("/*infloop*/for(\tconst setter; ({ x::prototype: [, ], __count__: yield }) = (uneval(3.141592653589793)); 0.1) (window); const __iterator__;");
tryItOut("/*infloop*/for(__parent__; \nprop; __parent__.eval( '' )) {return;const function::__count__ =  \"\" , __iterator__; }");
tryItOut("/*for..in*/L:for(var [__parent__, __parent__] = \n<><x><y/></x></> in this) export *;");
tryItOut("if(this.__defineSetter__(\"__count__\", /a/gi)) {__count__, constructor = this;let prop = -1, constructor; } else  if ([1,,] <= <><x><y/></x></>) {/*for..in*/for(__iterator__ =  ''  in #2=[window])  { yield (Math.pow)() }  } else {this.zzz.zzz; }");
tryItOut("let (prop = <x><y/></x>, __parent__ = @foo) { const __count__, __parent__; }\nthis.zzz.zzz;\n");
tryItOut("L:if((<x><y/></x> for each (function::constructor in  '' ))) { if ((@foo .@x:: this)) (__proto__);} else __proto__;");
tryItOut("L: {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor.constructor in constructor) throw *;");
tryItOut("/*infloop*/while(-1)export __noSuchMethod__; const __count__;");
tryItOut("yield <x><y/></x>;\n/*infloop*/do throw <x/>; while([<x/>].sort(function  __iterator__ (prototype, constructor) { return null } ));\n");
tryItOut("/*for..in*/for(var __count__ in (((1 for (x in [])))([<><x><y/></x></>] - (__noSuchMethod__ = @foo)))){/*infloop*/for(window.__lookupGetter__(\"__parent__\") / this.zzz.zzz; ([1,2,3,4].map)(); (<x><y/></x>.__lookupGetter__(\"__parent__\")).prop.__noSuchMethod__ = (this.__defineSetter__(\"__count__\", <y><z/></y>))) export __count__\n/*infloop*/for(__proto__; <x><y/></x>; null) {throw undefined; } }");
tryItOut("if({} - this) {let constructor = x::prototype;continue M; } else  if ((Boolean()constructor)) {prototype = true;yield \f__iterator__; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(const __proto__ = <><x><y/></x></> *= * in undefined.prop = null.valueOf(\"number\")) __count__");
tryItOut("/*for..in*/for(let prop = #3={a:#3#}['__iterator__'] in ((((yield *::*)).__defineSetter__)(window))){export *; }");
tryItOut("if(yield __iterator__ >>> true) {if(((yield undefined) << undefined( /x/g ,  '' ))) let __parent__ = <y><z/></y>, prop; else throw <x><y/></x>; } else {M:if(({prototype: <x><y/></x> || *::* })) {L: ; } }");
tryItOut("/*for..in*/L:for(const [prop, prototype] = <x/> in (function (prototype, prop) { yield (new prop()) } )((__proto__ = prototype), <y><z/></y>)) {/*infloop*/L:for(let prop; <x><y/></x>; constructor) {export __proto__;(<><x><y/></x></>); } }");
tryItOut("break;");
tryItOut("return  /x/ \n");
tryItOut("/*infloop*/for((yield <><x><y/></x></>); <y><z/></y>; ()) let prop;");
tryItOut("return (window.__defineGetter__(\"prototype\", [1,2,3,4].map));");
tryItOut("with({[,,z1]: 0x99.unwatch(\"prop\")})return <x><y/></x>;/*\n*/");
tryItOut("if(constructor = 3.141592653589793.propertyIsEnumerable(\"__parent__\")) { if ((({prototype: this.__defineSetter__(\"__count__\", (#1#).watch).__noSuchMethod__\n.__proto__}))) {Math.powswitch(({}).hasOwnProperty) { default: break;  } } else {/*infloop*/for(var __parent__ = <x/>.__noSuchMethod__ = <x><y/></x>; (__iterator__.__noSuchMethod__ setter= (((new Function(\"prototype\"))).call).apply); <><zzz>false</zzz></>) {throw *;yield [z1,,]; }<y><z/></y>; }}");
tryItOut("this.zzz.zzz;");
tryItOut("let(({ __proto__: ({ __count__: constructor }), __count__: [__iterator__, ] }), [constructor, prototype, prototype]) { yield \f*::* ? <x><y/></x> : 0x99;");
tryItOut("let(__noSuchMethod__ = constructor) ((function(){yield <y><z/></y>;})());");
tryItOut("while((('fafafa'.replace(/a/g, (*::*).call).isPrototypeOf(delete __noSuchMethod__))) && 0)(this);");
tryItOut("/*for..in*/for(let [({ __noSuchMethod__: __parent__ }), ({ prop: __noSuchMethod__ }), , __proto__] in (({}).hasOwnProperty)) export *;");
tryItOut("do {let (__count__) { return; } } while((<x><y/></x>) && 0);");
tryItOut("if(prop.__proto__.propertyIsEnumerable(\"this['prop']\")) new Function else  if (((let (<y><z/></y>, __count__ = *::*) #1#).@*)) {{}<y><z/></y>; }");
tryItOut("if( '' \n) /*for..in*/for(let constructor in ((/a/gi)( \"\" )))let prototype = <x><y/></x>\nL:with(<x/>){throw prototype;\n;break ; } else  if ([,,]) {throw *::*; } else L:if(++this) { if (<><x><y/></x></>.propertyIsEnumerable(\"prototype\")) {{} }} else let prop;");
tryItOut("if(delete <x><y/></x>) ; else yield this;");
tryItOut("{if(eval(\"throw true;\", null)) (<><x><y/></x></>); else  if ((#0=[<><x><y/></x></>])) {__parent__ = __iterator__;return; }M:with({__proto__: default: let __iterator__;break; .eval(false)}){export *;if(true) ; else  if ( /x/g ) {gc() } } }");
tryItOut("if(<y><z/></y>) (3); else  if (__iterator__) break L;");
tryItOut("{throw [[1]]; }");
tryItOut("with({}) yield <x><y/></x>;");
tryItOut("L: ( '' );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__(yield <><x><y/></x></>) in yield (/a/gi)((yield *::*))) {if((__noSuchMethod__ & <x/>)) {[1,2,3,4].slice/*infloop*/for(let __parent__ = <><x><y/></x></>; <x><y/></x>;  '' ) yield; } else  if ((*.valueOf(\"number\") < constructor)) {;var prop; } else \t{gc()( '' ); }do [1,,]; while((([1].prototype)) && 0);if(<y><z/></y>) { if (<y><z/></y>) \ryield; else ({ __iterator__: prop, __noSuchMethod__: prop })} }");
tryItOut("/*infloop*/while(this)/*for..in*/for(let __iterator__ in (( /x/g )(window))){export *; }");
tryItOut("__proto__ = prop;");
tryItOut("let(constructor = constructor = [constructor, __noSuchMethod__], __proto__ = ({__parent__: true.@foo })) ((function(){export //h\n*;})());");
tryItOut("/*infloop*/M:for(-1; (-0); ({})) throw constructor;");
tryItOut("/*infloop*/for(true; ([constructor =  /x/ , __iterator__].map(/a/gi)); ( /x/g  ?  /x/g  : arguments)) yield;");
tryItOut("/*infloop*/for(var constructor; true; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {return; }");
tryItOut("while((* /= __iterator__) && 0){; }");
tryItOut("/*infloop*/while(<x><y/></x>){return;__iterator__ =  /x/g ; }");
tryItOut("export prototype;");
tryItOut("/*for..in*/for(const prop((__iterator__ = (function ([y]) { })())) in (({__count__: <><x><y/></x></>, __iterator__ getter: function  constructor (__noSuchMethod__)gc }) > __parent__.__count__ = (__parent__ = true))) var prototype = 1e+81;");
tryItOut("{if(4.) {/*infloop*/for(let __noSuchMethod__ = [[1]]; [1,,];  /x/ ) {; }\freturn try { break M; } finally { return __iterator__; } ; } else  if (({ get constructor __noSuchMethod__ () /x/g , \t get constructor __iterator__ (__parent__, prototype) { yield @foo }  }).watch(\"__noSuchMethod__\", Math.sin)) yield let; }");
tryItOut("/*infloop*/for(const prototype; (<x/>(('haha'.split()), ~ /x/ )); new /a/gi(__iterator__ = constructor)) {return;gc() }");
tryItOut("/*for..in*/for(let __iterator__ = [prototype] in 0/0 = prop+=@foo) {prop;(__iterator__); }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = this.* in  /x/ ) const __noSuchMethod__ = arguments, __count__;");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __noSuchMethod__] = (<y><z/></y>.propertyIsEnumerable(\"__proto__\")) in 1e+81) {Math.sin }");
tryItOut("/*infloop*/for(const [] = (let (constructor, let) <y><z/></y>); yield __iterator__ = window;; 1.3 in __iterator__) {; }");
tryItOut("if(prototype.__noSuchMethod__ setter= Function) {yield  '' ;{} } else  if ((([[]])(({function::__noSuchMethod__: this})))) export __proto__; else {{} }");
tryItOut("M:if([__iterator__, , prototype] = 0/0 >>  /x/ ) (__noSuchMethod__); else  if (([11,12,13,14].sort)) (*); else /*for..in*/for(let prop = (-1) in <><x><y/></x></>) {__proto__, __proto__ = <y><z/></y>;{} }");
tryItOut("let (__iterator__, prototype = (const __iterator__ = undefined for each (prototype in this) for (__proto__ in <><x><y/></x></>))) { /*for..in*/L:for(let +[].prototype in (([1,2,3,4].map)(+eval(\"throw  /x/ ;\", <x><y///h\n></x>))))export *; }");
tryItOut("switch(({ __iterator__: prop }) = <><x><y/></x></>.valueOf(\"number\").__lookupSetter__(\"__proto__\")) { case (({constructor: new  /x/ ()})): break; break; if(<y><z/></y>) return; else  if (*::*) {Math.sin }break;  }");
tryItOut("{}");
tryItOut("try { with({}) throw <x/>; } catch(__parent__ if (__parent__.*)) { return (p={}, (p.z = 0.1)()); } catch(__iterator__) { for(let y in []); } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(prop in 'fafafa'.replace(/a/g, ({}).hasOwnProperty)) {while((__parent__) && 0)const __iterator__ = *;L: yield 0.1;export __iterator__; }");
tryItOut("/*for..in*/for(let [prop, prototype] = [1] in 0x99) function(y) { yield y; return;; yield y; }");
tryItOut("/*infloop*/for(var prototype; (3.throw((__iterator__ = [z1,,] , #1#))); *::*) {export *;let (constructor, prop = <y><z/></y>) { if( '' ) let __proto__ = ({a2:z2}), prototype; else  if ( /x/ ) {\ncontinue ;var default: break; yield; = <><x><y/></x></>; } } }");
tryItOut("return\nreturn  /x/g ;");
tryItOut("yield \f<x><y/></x>;");
tryItOut("/*infloop*/L:do {{__parent__, __iterator__ = this;export prop\n }{} } while(3.141592653589793 % [z1].__defineSetter__(\"__parent__\", function(q) { return q; }));");
tryItOut("/*infloop*/for(0x99; (-1.__lookupGetter__(\"constructor\")); ({ __iterator__: __iterator__ }) = [15,16,17,18].filter(new Function, <x/>)) /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this) yield;");
tryItOut("/*infloop*/for(<xxx>{prop}</xxx>; (uneval(undefined)); new ((1 for (x in [])))( /x/ )) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>.unwatch(\"#3={a:#3#}\")) {}");
tryItOut("M:do {throw ;/*infloop*/while(0/0 >>= <x/>)return this; } while(( /x/g ) && 0);");
tryItOut("if(\n(this.zzz.zzz))  { yield (uneval((eval(\"\",  \"\" )))) }  else  if ([<x><y/></x>]) {L:if(*::*)  else  if ((new (<x><y/></x>).__defineSetter__(({__iterator__: [[]] })))) {} else const __parent__ =  /x/ , constructor; }");
tryItOut("/*infloop*/M:do {let __count__;{yield; } } while((__parent__.constructor));");
tryItOut("let(__parent__ = (__iterator__ = __noSuchMethod__)) ((function(){for(let y in [5,6,7,8]) let(__parent__, ({ prop: ({ prop: __noSuchMethod__ }) })) ((function(){with({}) { for(let y in [5,6,7,8]) throw StopIteration; } })());})());");
tryItOut("L:with({__count__: ({__count__: <y><z/></y>, delete:  /x/g  }).__defineGetter__(\"constructor\",  {  }  &= @foo).yoyo([11,12,13,14].sort)})__proto__ = .2, __noSuchMethod__;");
tryItOut("let (__parent__, __parent__ =  '' ) { {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (this.__defineGetter__(\"prop\", (prop).apply))) {let __parent__ =  /x/ ;(*); }");
tryItOut("if(prototype.__proto__ = undefined.hasOwnProperty(\"yield\")) {{} } else  if (this) {export __iterator__; }");
tryItOut("L:if(new (<><x><y/></x></>[(-1)])(<x><y/></x>)) { if (this.__defineGetter__(\"__iterator__\", <y><z/></y>)) {constructor =  /x/ , <x/> = <><x><y/></x></>;throw window; } else constructor, __proto__;}");
tryItOut("continue ;\nthrow  /x/g ;\n");
tryItOut("function::__parent__ = prototype;");
tryItOut("{__iterator__ = prototype, __iterator__; }");
tryItOut("(__count__ = (-0)) %= 1e+81");
tryItOut("/*for..in*/for(var prop in __noSuchMethod__) {return; }");
tryItOut("let __iterator__\nexport __count__;");
tryItOut("if(null) {yield ({});export *; } else  if (<><x><y/></x></>) {return; } else yield undefined;");
tryItOut("L: ");
tryItOut("with([15,16,17,18].filter(eval, <x><y/></x>))1e4;");
tryItOut("{for(let y in []);{/*infloop*/do {return; } while(<y><z/></y>); } }");
tryItOut("(<><x><y/></x></>)\n/*for..in*/M:for(const [__iterator__, __count__] = new 1e-81() in <x><y/></x>) throw function(id) { return id };");
tryItOut("/*infloop*/M:for([,,]++.__lookupSetter__(\"prop\"); [[1]]; [15,16,17,18].filter(({}).__lookupGetter__, undefined)) Function");
tryItOut("if((function ([y]) { })()-- >>= (({__count__:  '' ,  get __iterator__ constructor (prop, __noSuchMethod__) { yield new ( /x/ )(false) }  }))) /*for..in*//* nogeckoex bug 349964 */ for  each(let ({a1:1}).__iterator__ in true) yield; else {yield (({a2:z2}).valueOf(\"number\")); }");
tryItOut("with({__parent__: __parent__ = <y><z/></y>});");
tryItOut("/*for..in*/for(let __noSuchMethod__ in eval(\"function(id) { return id }\", [,,])) {if(<><x><y/></x></>) throw 1e4; else  if (window) {(3/0);function(id) { return id } } else {eval } }");
tryItOut("let(({ __noSuchMethod__: ({ __iterator__: [, , ], __proto__: ({ __count__: [constructor, function::__noSuchMethod__, __count__] }) }), __iterator__: constructor.propertyIsEnumerable(\"constructor\")['__parent__'] })) { with({}) { let __proto__; } ");
tryItOut("/*infloop*/for((new (RegExp(__iterator__, prop))++(\f__parent__)) !== true; __parent__.((({__iterator__: constructor}).watch(\"prop\", /a/gi).*)); __proto__ = <x><y/></x>) {}");
tryItOut("/*for..in*/for(const prop = [function ([y]) { }(0/0, this)].filter('haha'.split).hasOwnProperty(\"constructor\") in this.__defineSetter__(\"__noSuchMethod__\", new Function).__defineGetter__(\"constructor\", function  __parent__ (__iterator__, constructor)(eval(\"L:if(<y><z/></y>) {(<x><y/></x>); } else  if (5.0000000000000000000000) {yield;var __proto__, __parent__; }\", #0= '' )))) {export \f*;export *\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let function::prop in (({ constructor: __proto__, __proto__: __proto__ }) = __parent__[ { yield <><x><y/></x></>; } ])) for(let y in []);");
tryItOut("/*infloop*/for(let (<><x><y/></x></> >>= 3/0)(const __noSuchMethod__, __noSuchMethod__ = <x><y/></x>) = (uneval([,])); prototype = ({a2:z2}); ({__parent__ setter: function(y) { yield y; if(this.propertyIsEnumerable(\"yield\")) {return; } else  if ((<x><y/></x>)[<><x><y/></x></>]) return 3.141592653589793;; yield y; } })) {export *;((-0)); }");
tryItOut("if(([11,12,13,14].sort)[this]) if((<><x><y/></x></>++).isPrototypeOf((new Array(*, #1#)) == let (prop = *::*, constructor) 1.3)) do return; while((033) && 0); else {let __count__, __parent__; } else /*infloop*/for(Iterator(); <x><y/></x>; prop) return true;");
tryItOut("this.zzz.zzz;");
tryItOut("!prop = (<><x><y/></x></>.valueOf(\"number\")) << ({ get __proto__(prototype)<x><y/></x>, prop getter: function  __noSuchMethod__ () { return <><x><y//*\n*/></x></> }  })");
tryItOut("M:if(new Iterator(<><x><y/></x></>)) {M:if((<x><y/></x>++)) {let __count__, __noSuchMethod__;{} }function (__noSuchMethod__) { return (-1) }  } else  if ( { yield <y><z/></y> }  = (__iterator__ for each (prop in  \"\" )) ? *::* : ({__iterator__: *::* += <><x><y/></x></> })) {export __parent__;( /x/g ); }");
tryItOut("/*for..in*/for(var __parent__ in (-1)) {throw window; }");
tryItOut("Math.pow\n");
tryItOut("M:do throw <><x><y/></x></>; while((\n__noSuchMethod__) && 0);");
tryItOut("/*infloop*/for(window; <><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></>; ('fafafa'.replace(/a/g, prop))) export __iterator__;");
tryItOut("M:if(<><ccc:ddd><!--yy--></ccc:ddd></>) { if ((<x><y/></x>\n)) {var prop;(<><x><y/></x></>); } else {const prop = 3/0; }}");
tryItOut("continue ;");
tryItOut("if() Math.sin");
tryItOut("/*infloop*/for(prop\t; (this.__defineSetter__(\"set\", (function ([y]) { }))); (((<x/> >> <x/>)( /x/g .valueOf(\"number\"))) .@x:: \n[z1,,])) {{} }");
tryItOut("{1e4;export __noSuchMethod__; }");
tryItOut("\n/*infloop*/do {gc() } while(<><bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb></>);");
tryItOut("for(let y in [5,6,7,8]) let(__count__ = <x/> >>>=false != window(), prop) { for(let y in [5,6,7,8]) __proto__ = prop;");
tryItOut("/*infloop*/for(prop.__iterator__; ((\t /x/g .__count__) = constructor.throw(033)) >>>=this.__defineGetter__(\"__parent__\", gc); <x/>) /*for..in*/for(let  /x/  in (( '' )((-1))))M:if(prototype) { if (true) export prop;} else {yield [,,z1]; }");
tryItOut("with({__count__: __count__ = prop})__parent__, prototype = <y><z/></y>;export __count__;");
tryItOut("0.1; const prop;\n/*for..in*/L:for(const (//h\n__proto__) in ('fafafa'.replace(/a/g, <x><y/></x>))) {return;L: gc() }\n");
tryItOut("/*infloop*/L:for(const [] = (new <x><y/></x>( \"\" , prototype))[false .. 033]; let (__iterator__) __proto__.__count__; ({prop: @foo})) M:if((__noSuchMethod__.@*)) yield; else  if (((delete <x><y/></x>) .@ this.zzz.zzz)) {<y><z/></y>;[,,z1] }");
tryItOut("/*for..in*/for(prop = function(id) { return id } in __proto__) return window;\n<x><y/></x>;\n");
tryItOut("let ( =  /x/g ) { /*for..in*/for(let (#3={a:#3#})(033) in [,]) {var __proto__ = [z1], prop = [,,]; } }");
tryItOut("");
tryItOut(";");
tryItOut("L:with({__iterator__: constructor.constructor setter= function ()((function(y) { yield y;  /x/g ;; yield y; }).call(3, constructor))}){continue M; }");
tryItOut("if(@foo if (<><x><y/></x></>)) {export *; } else {throw @foo;{} }");
tryItOut("({ __count__: ({ prototype: __proto__, __count__: <x><y/></x> }), __parent__: [] }) = function::[[1]];");
tryItOut("if(({ setter\t: __count__, constructor: ({ __count__: __noSuchMethod__ }) }) = [4.].some(({}).hasOwnProperty)) {<x><y/></x>;/*infloop*/for(let setter = <y><z/></y>; [,]; <><x><y/></x></>) export *; } else  if ((prototype = __iterator__)) {{export //h\n*; }gc() } else <><x><y/></x></>;");
tryItOut("/*infloop*/do ([,,z1]); while(<y><z/></y>--);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let constructor in ((<y><z/></y>)(<><x><y/></x></>))){throw undefined; }");
tryItOut("/*for..in*/for(let [__iterator__, __proto__] = <{__iterator__}><x><y/></x><x><y/></x> </{__iterator__}>.(((++__parent__) || x::__proto__ = *)) in eval(\"<y><z/></y> instanceof <x/>\", <x><y/></x>)) gc()");
tryItOut("if(__noSuchMethod__ = (#0=({__count__: true})) >> __count__ = ( \"\" .__lookupGetter__(\"__parent__\"))) if(<><x><y/></x></>) { if (this) {export *; } else ;} else  if ([((false)[<><x><y/></x></>])].filter(\fdelete  '' )) ; else {M:while((<x/>) && 0) }");
tryItOut("");
tryItOut("/*infloop*/for(let ({ __parent__: __noSuchMethod__ }) = (let (__noSuchMethod__) 3/0).constructor; (((window).__defineSetter__).watch)(); this) \t{return;const prototype = undefined, prop; }");
tryItOut("{__noSuchMethod__ }");
tryItOut("L: {var prop = __noSuchMethod__;__noSuchMethod__; }");
tryItOut("do [1,2,3,4].map while(('fafafa'.replace(/a/g, ( /x/g ).__defineSetter__)) && 0);");
tryItOut("break M;");
tryItOut("export __noSuchMethod__;\nL: var __proto__ = <x/>, __count__;\n");
tryItOut("/*infloop*/for(const [] = [15,16,17,18].some(window, <x/>).propertyIsEnumerable(\"__parent__\"); [({  /x/ : ({ constructor: constructor, __parent__: __parent__ }) }), constructor] = (<x><y/></x>.(__proto__)); __parent__ = (__proto__.__noSuchMethod__;)) {/*for..in*/for(let prototype in ((eval)(true if (constructor))))throw *;/*infloop*/for(({ __proto__: __parent__, prop: __count__ }) = (Function)(*::*); (0 <=  /x/g ); __noSuchMethod__ =  /x/ ) {export prop; } }");
tryItOut("continue \nswitch(__iterator__) { default:  }");
tryItOut("/*infloop*/L:for(var [({ __iterator__: __iterator__ }), ({ __parent__: ({ prototype: [,  { return  /x/  } ], __iterator__: ({ __count__: ({ __parent__: ({ prop: prototype }), __noSuchMethod__: [prop, __noSuchMethod__, , ] })\f, constructor: ({ __count__: constructor, __noSuchMethod__: ({ __iterator__: __noSuchMethod__ }) }) }) }) })] = (yield ('fafafa'.replace(/a/g, new function(y) { yield y; const __proto__, __proto__ = <y><z/></y>;; yield y; }(<x><y/></x>)))); (this.zzz.zzz); [15,16,17,18].map(Math.pow, [window].filter(Function))) {gcthrow (\n#1=[#1#]); }\nreturn true\n");
tryItOut("/*infloop*/do {export *;(yield null/;)L:if((constructor.__proto__) ? (__noSuchMethod__ = window if (__proto__)) : ([[[]] if (<><x><y/></x></>)])) export *; else  if (([[]] for (__parent__ in <x><y/></x>).__lookupSetter__(\"__iterator__\"))) {let prototype; } else gc() } while((constructor = <x><y/></x>[(function(q) { return q; }).apply]));");
tryItOut("{if(window) { if (true) {function (__count__, __iterator__) { return null } {} } else {export constructor; }} {  }  } const __noSuchMethod__;");
tryItOut("continue ;");
tryItOut("/*for..in*/L:for([__iterator__, constructor] = (this.@*) in (1.2e3 = this)) {while(( \"\" .propertyIsEnumerable(\"__iterator__\")) && 0){const __iterator__, __noSuchMethod__ = function ([y]) { };break ; } }");
tryItOut("L: L: {throw (<><x><y/></x></>).call; }let prototype =  /x/g ;");
tryItOut("export function::__parent__;");
tryItOut("switch(\tfunction(id) { return id }.hasOwnProperty(\"__proto__\")) { default: export prop;case 9: break;  }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(constructor.({ prototype: prototype }) setter= (function (__proto__, constructor)-3/0).call % (new /a/gi())))  else  if (throw  '' ) export *; else {function(y) { yield y; ; yield y; } }");
tryItOut("/*for..in*/L:for(let ({ __noSuchMethod__: prop }) = {} in ((/*\n*/function () { continue L; } )((this.__defineSetter__(\"__parent__\", [z1])[ ''  |= <><x><y/></x></>]))))yield;");
tryItOut("/*infloop*/for(let __count__ = 1e-81; <><x><y/></x></>; <x/>) var prop = 1e81, __noSuchMethod__ = constructor;");
tryItOut("if(this) ");
tryItOut("while(((({__proto__: <x/>,  get __iterator__()4. })) || true) && 0){{yield window; }{} }");
tryItOut("/*infloop*/for(var <x><y/></x> = <y><z/></y>; (-1); prototype) function(y) { yield y; ; yield y; }");
tryItOut("(function(q) { return q; }).call");
tryItOut("/*infloop*/for(__count__; false.yoyo(<zzz>*</zzz>); (this.__defineSetter__(\"__parent__\", __iterator__))) {{continue ;let prop; } const __count__;/*for..in*/L:for(var __proto__ = ({prototype: (<x/> / @foo)}) in ({prototype getter: new Function,  get __parent__(prototype) { yield <x><y/></x> }  })) /*for..in*/for([prop, constructor] = *::* in <x><y/></x>) {yield  /x/g ; } }");
tryItOut("with({__count__: [,,]})return <x><y/></x>;");
tryItOut("if(eval >>>=new Array(({}),  \"\" )) {/*for..in*/for(let constructor = @foo in <y><z/></y>) {export *; }/a/gi } else {0x99; }");
tryItOut("/*for..in*/for(let  \"\"  in (((1 for (x in [])))(1e81)))/*infloop*/for(var prototype; true < window; (null.hasOwnProperty(\"__iterator__\"))) {let __noSuchMethod__ = prop; }");
tryItOut("{/*for..in*/for([__iterator__, __noSuchMethod__] = <><x><y/></x></> in __count__) {var constructor = <y><z/></y>; }; const prop; }");
tryItOut("/*for..in*/for(prototype in prototype) (this.__defineGetter__(\"__noSuchMethod__\", function  prop (__iterator__, __iterator__)[,,]).((new Exception(((this.zzz.zzz)(new <x/>()))))))");
tryItOut("{(null); }\n");
tryItOut("let (constructor, constructor) { /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in null) export *; }");
tryItOut("{throw __noSuchMethod__; }");
tryItOut("/*infloop*/while((yield __count__.prototype)){}");
tryItOut(";");
tryItOut("while(((<><{__proto__}><!--yy--></{__proto__}></>.__iterator__ = <x><y/></x>.propertyIsEnumerable(\"__iterator__\"))) && 0){return; }");
tryItOut("yield  /x/g ;");
tryItOut("/*infloop*/while(this.zzz.zzz){break ;\nreturn <><x><\ty/></x></>;\n }");
tryItOut("/*for..in*/for(let __parent__ in (__count__ ? <x/> : window)) {return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __count__] = (constructor = <y><z/></y>) in window) let __iterator__ = #1=[#1#];");
tryItOut("/*for..in*/for(var [constructor, __count__] = <x/> in (__noSuchMethod__%=\n0)) var __parent__, __count__ = false;\ngc()\n");
tryItOut("return;");
tryItOut("gc()");
tryItOut("/*infloop*/while(<y><z/></y>){(<x/>); }");
tryItOut("switch(<x><y/></x>) { case (new function  constructor (__proto__: *::*) { return  \"\"  } (this)): const __noSuchMethod__ = @foo, __iterator__; }");
tryItOut("/*infloop*/do {const yyy; } while(function::prop.__lookupSetter__(\"prop\") + constructor.(*::*));");
tryItOut("/*for..in*/M:for(var gc = prop in <><x><y/></x></>) {yield;window }");
tryItOut("L:with(0x99){var prop; }");
tryItOut("L:if(let (get = this, __proto__) void @foo) {export *;\nbreak ;\n } else  if (this.__defineSetter__(\"__parent__\", (function(id) { return id }).__defineSetter__)) return (({a2:z2}) if (true));");
tryItOut("{(1 for (x in []))const prop; }");
tryItOut("/*for..in*/M:for(const [__iterator__, __iterator__] = (<zzz>#3={a:#3#}</zzz>)[('fafafa'.replace(/a/g, function  prototype (__noSuchMethod__, __iterator__) { throw *; } ) in __parent__)] in __proto__.isPrototypeOf(__iterator__)) {[, , __count__, ] = __iterator__, ({ __iterator__: __count__, __noSuchMethod__: function::prototype }) = (<x><y/></x> if (this)), constructor }");
