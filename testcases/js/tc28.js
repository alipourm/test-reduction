tryItOut("if([[[]]].__defineSetter__(\"__parent__\", 4.)) {const prototype;0/0; } else  if (({prototype: -1 })) {return -3/0; } else continue ;");
tryItOut("return;");
tryItOut("if((void <x/>)) {gc(); }");
tryItOut("M:with({(<><\fx><y/></x></>).watch: null - [[]]})yield;");
tryItOut("if((__parent__.__proto__ getter= function (__iterator__) { yield (+<><x><y/></x></>) } )) { if ( /* Comment */yield window <=  \"\" ) {return <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in false) {throw  -1.*, thisnull;throw *; } }} else {yield false.__lookupSetter__(\"prototype\"); }");
tryItOut("throw -0;continue ;\nyield <x><y/></x>\t;\n");
tryItOut("let ((yield <><x><y/></x></>), [__proto__, prop, []]) { export __iterator__; }");
tryItOut("/*for..in*/for(let function::prototype((this.__defineGetter__(\"__count__\", <x><y/></x>))) in <><x><y/></x></>) {<y><z/></y> }");
tryItOut("/*infloop*/L:for(const [, __proto__, [], ]; delete (-1.__lookupSetter__(\"__noSuchMethod__\"));  ) {let __iterator__ = (function ([y]) { })();__proto__ = undefined, __noSuchMethod__; }");
tryItOut("/*infloop*/for(1e-81; (<x><y/></x>); ) {yield }");
tryItOut(";");
tryItOut("/*infloop*/while((new (function(y) { yield y; export __proto__;; yield y; })(<><x><y/></x></>).valueOf(\"number\"))){/*infloop*/for(true = new (<x><y/></x> ^ null)((constructor = __count__), __count__); __noSuchMethod__.__count__ getter= Math.pow; prop = prototype.eval(<><x><y/></x></>)) {return;continue M; } }");
tryItOut("L:with(<x><y/></x>.(try { continue M; } catch(__proto__) { export __iterator__; } finally { (@foo); } )){/*for..in*/for(const prototype in <x><y/></x>) export function::prop;with({__count__: null}){throw <><x><y/></x></>;'haha'.split } }");
tryItOut("/*for..in*/M:for(prototype = <>(this.__defineGetter__(\"prototype\", function(y) { yield y; yield;; yield y; }))</> in <x\n><y\f/></x>.unwatch(\"__proto__\")) {gc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(prop in @foo) yield <x><y/></x>;yield; } const prototype;");
tryItOut("try { yield this.zzz.zzz; } finally { return; } ");
tryItOut("L: return arguments;");
tryItOut("continue ; const constructor;");
tryItOut("export __proto__\n[,,];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__parent__(<><x><y/></x></>)) in (function(q) { return q; })(<y><z/></y>, undefined)) ");
tryItOut("{return;const __proto__, __iterator__ = *::*; }");
tryItOut("if((\tnew (1 for (x in []))( /x/ , ())) { if (eval(\"(({}));\", prop)) {(<x/>).watchlet __noSuchMethod__ = @foo; }} else __iterator__ = undefined\n1e81;");
tryItOut("with({}) throw new Function([[1]], <x/>);");
tryItOut("if(3\n) throw this;");
tryItOut("/*for..in*/for([prototype, prop] = 3.141592653589793 in <x/>) break L;");
tryItOut("L:switch(null.unwatch(\"constructor\")) { case 7:  }");
tryItOut(";");
tryItOut("if(* && __count__) { if (new new <y><z/></y>.valueOf(\"number\")++()(__parent__)) {/*infloop*/while(<><x><y/></x></>)const __proto__ = #3={a:#3#};{return prototype; } } else {/*infloop*/while([*::* if ( \"\" )]){function () { yield -3/0 }  }gc }\t}");
tryItOut("L:if() { if (new (( /* Comment */(new Function).call(true, window)))().__lookupGetter__(\"__iterator__\")) {__noSuchMethod__ = *::*, constructor = <y><z/></y>;__parent__; }} else {export *;yield;return; }");
tryItOut("/*for..in*/for(var prototype = <x><y/></x> in (-0)) (<x><y/></x>);");
tryItOut("{L:if(#3={a:#3#}) { if (window) {false;break L; } else throw true;} } const prop;");
tryItOut("/*for..in*/L:for(let __count__ in ((/a/gi)(prototype =  '' .isPrototypeOf((<x><y/></x>.(@foo, ([1,2,3,4].map).call(*::*, )))))))yield this;");
tryItOut("L: {default: throw <x><y/></x>; }");
tryItOut("with({}) { let __count__ =  '' ; } ");
tryItOut("/*infloop*/do if(constructor, __parent__) { if (0x99) continue ;} else {} while( \"\" );");
tryItOut("/*infloop*/for(new Object(); ; <x><y/></x>.valueOf(\"number\")()) const function::__proto__, __count__ = __parent__; const __proto__;");
tryItOut("with(.(window.isPrototypeOf(1e4)))prop, set");
tryItOut("if( '' ) (3/0); else  if ( /x/g ) {yield <y><z/></y>; }");
tryItOut("if(__noSuchMethod__ = break ;) { if ([z1] >= (5.0000000000000000000000).call(__noSuchMethod__, )) /*for..in*/for([__count__, __parent__] = <x><y/></x>.__lookupGetter__(\"__count__\") in <><x><y/></x></>) yield @foo; else {if([ \"\" ].some(<><x><y/></x></>)) { if (prop = [-0]) yield [,];} else /*infloop*/L:do {throw <><x><y/></x></>;return; } while(undefined); }}");
tryItOut("while((+(__iterator__ = <x><y/></x>)) && 0)while((<x/>) && 0)yield <y><z/></y>;");
tryItOut("@foo; const constructor;");
tryItOut("L:if(<y><z/></y>) { if () /*infloop*/while(constructor.(<x/>))L:if(<x/>) {var prototype = true;<y><z/></y>; } else {export __count__;export *; }} else let *::*, function::__count__ = <><x><y/></x></>;");
tryItOut("switch() { default: export *;case 4: L:if( /* Comment */--<><x><y/></x></>) { if ((this.__defineGetter__(\"prop\", (function (constructor)<x><y/></x>).call))) {#1=[#1#]; } else {export *;prototype }}\nL:switch( /x/ ) { default: (prop);gc()break; let __parent__;break; case __proto__: yield 0;break; case __noSuchMethod__: break ;break; return;case 7: return prop;break;  }\nbreak; break;  }");
tryItOut("with(++~null)if(<x><y\t/></x>) var __proto__ = #1#; else  if (null) {let prop =  \"\" ; }\n(<><x><y/></x>\f</>);\n");
tryItOut("return false\n");
tryItOut("/*infloop*/do __count__ while( '' );");
tryItOut("(__iterator__);");
tryItOut("/*for..in*/for(var  ''  in ((/a/gi)((__iterator__))))return -0;");
tryItOut("/*infloop*/for(let [, , ] = null.yoyo(.2); (({ window.__defineGetter__(\"prototype\", function(q) { return q; }): ({ __parent__: __iterator__, __noSuchMethod__: __iterator__ }) }) = #2=({constructor: 'fafafa'.replace(/a/g, (((({}).__lookupGetter__).apply).call).call)})); [11,12,13,14].map) let (prototype) { yield <><x><y/></x></>; }");
tryItOut("if([[1]]) {yield; } else  if ( \"\" ) {break L; } else export __proto__;");
tryItOut("M:while((prop) && 0)yield <><x><y/></x></>;");
tryItOut("{} const __parent__;");
tryItOut("L: {let (constructor = this) {  /x/g \n__iterator__ }let (({ prototype: __count__ }), ({ prop: __count__, __proto__: __proto__ })) { {} } }");
tryItOut("while(((@foo.__parent__) if (function(id) { return id })) && 0)yield;");
tryItOut("with(({__iterator__ getter: <x><y/></x>, prop: * })){let (__parent__) { export __parent__; }( /x/g );let __count__ = __proto__, __proto__ =  \"\" ; }");
tryItOut("export *\nif([[]]) gc() else  if \t(1e4.prototype) {gc(); }");
tryItOut("constructor = prototype;");
tryItOut("{__proto__ = __count__;return undefined; }");
tryItOut("if(Date((RegExp( /x/g )))) { if ((__count__ = prop = this)) {gc() }} else {export *; }");
tryItOut("if(<><x><y/></x></>(false /= 1e81, window)) var __noSuchMethod__ = <x/>;\ngc()\n");
tryItOut("L: {prototype = window, __noSuchMethod__ = __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const prototype = (*.__lookupGetter__(\"prop\")\t); #1=*::*; *::* ? constructor : <x><y/></x>) {throw null; }");
tryItOut("let(([<y><z/></y>])(), ({ \tprop: ({ __proto__: __iterator__, __iterator__: [] }), __iterator__: constructor })) { this.zzz.zzz;");
tryItOut("/*infloop*/for(var __count__; <x/> ? <><x><y/></x></> : <><x><y/></x></>; <zzz>eval(\"throw <x><y/></x>;\", )</zzz>) with({}) x::__count__;");
tryItOut("/*infloop*/M:for(({ __proto__: ({ prop: ({ constructor: constructor }) }) }) = <><{__parent__}> </{__parent__}></>; prototype.prototype setter= (Function).call; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) yield <><x><y/></x>\r</>.__defineGetter__(\"prop\", 'haha'.split);");
tryItOut("/*infloop*/M:for(var __proto__;  /* Comment */<y><z/></y>; (eval(\"@foo\", <x><y/></x>).unwatch(\"constructor\"))) yield  /x/ ; const prototype;");
tryItOut("gc()\n{}\n");
tryItOut("/*infloop*/L:for(++window.@*; __count__//h\n = <x><y/></x> != __count__ .@x:: window; window.watch(\"__parent__\", eval)) yield  \"\" ;\n(#1=[#1#]);\n");
tryItOut("with(this.isPrototypeOf(({a1:1}))){return; const constructor; }\nconst __parent__;\n");
tryItOut("var __count__ = <x/>, prototype; const __proto__;");
tryItOut("/*infloop*/do return #1#\nif(this)  else  if (__proto__) {let __iterator__ = <x><y/></x>; } else export __iterator__; while(({ set __iterator__(__noSuchMethod__, ({ prototype: [] })) { return (p={}, (p.z = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<x><y/></x>.valueOf(\"number\")))()) }  }));");
tryItOut("\nconst __count__ = __noSuchMethod__\n");
tryItOut("L: /*for..in*/for(let [prop, __iterator__] = __iterator__ = this(constructor = window, constructor) in <><x><y/></x></>) var constructor =  /x/g , __iterator__;");
tryItOut("/*for..in*/for(const __count__ = -1.yoyo(__parent__) in prop = __parent__) {return; }");
tryItOut("{return; }");
tryItOut("return;");
tryItOut("with({prop:  /x/g  .@*:: __proto__ =  /x/ }){(<x/>); }\n.2;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in this.__defineSetter__(\"constructor\", (1 for (x in [])))) {export *;return  '' ; }");
tryItOut("if(<><x><y/></x></>) { if (<y><z/></y>) {( '' ); }} else let prop, prototype = <x><y/></x>;");
tryItOut("__proto__.get = __count__;");
tryItOut("export constructor;return;");
tryItOut("/*infloop*/for(constructor; __parent__; true) export *;");
tryItOut("let __parent__ = 1.2e3;");
tryItOut("constructor.__parent__ = __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("let ([, ] = function  let () { <y><z/></y> } (x)) { throw false; }");
tryItOut("L:while(([11,12,13,14].sort) && 0){throw <><x><y/></x></>;throw <x/>; }");
tryItOut("yield <><x><y/></x></>;const prop, prop =  '' ;");
tryItOut("");
tryItOut("if( \"\"  = window) if(4.) { if (null) {let __iterator__ = @foo; }} else {throw window;break ; }\n");
tryItOut("if(__iterator__ = __noSuchMethod__) { if (( /x/  :: <y><z/></y>)[[<><x\f><y/></x></>]]) ;} else const constructor;");
tryItOut("/*infloop*/L:for(new Function((__count__ = <y><z/></y>)); ({}).hasOwnProperty([z1], __proto__); false <  \"\" ) {export *;yield  /x/g ; }\n");
tryItOut("let(constructor = null) ((function(){__parent__ = __proto__;})());");
tryItOut("L:if((/a/gi).call(<bbb xmlns:ccc=\"[]\"><ccc:eee></ccc:eee></bbb>, ((undefined.watch(\"__parent__\", Function)).hasOwnProperty(\"prototype\")), ([ '' ] >= (<x><y/></x> != *)))) { if ((new (gc)())) if((<y><z/></y> >>> <><x><y/></x></> >> <>prop = this</>)) { if ((Math.pow in <y><z/></y>)((/*for..in*/for(let setter = true in <x><y/></x>) {let __count__; })) = <> /x/g </>) {}} else { }} else {return -3/0;{{} }\t }");
tryItOut("/*for..in*/for(prop in ((function(y) { yield y; if(@foo) {return 3; }\nconst __count__ = <y><z/></y>, prototype;; yield y; })((prototype)))){/*for..in*/for(constructor in ((({}).hasOwnProperty)(constructor.__iterator__ setter= (new Function(\"(({}));\"))))); }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in this.__defineSetter__(\"constructor\", ({ __count__: __iterator__, __iterator__: __proto__ }), prototype)) {do yield <x><y/></x>; while((__count__.(((p={}, (p.z = <x><y/></x>.(return *;))())))) && 0);gc()\ngc() }");
tryItOut("break M\nlet (__count__, prop) { yield; }");
tryItOut("/*infloop*/L:do {(<x/>); /x/g ; } while( /x/  ..  /x/g );");
tryItOut("/*for..in*/for(__parent__ in <x/>.valueOf(\"number\").__defineSetter__(\"prototype\", (+<x><y/></x>).watch) && (p={}, (p.z = <x/>)())) M:switch(++5.0000000000000000000000) { case 9: break;  }\nvar __parent__ =  /x/ ; const __count__;");
tryItOut("(<><x><y/>\f</x></>).__defineSetter__\nL:if(prop = window) {return;constructor = __count__; }\t");
tryItOut("/*infloop*/M:do /*for..in*/for(const prototype in (((function (__noSuchMethod__, prototype) { return undefined } ).call)(__proto__.__iterator__))){yield [1,,]; } while((__count__ = __iterator__.__count__));");
tryItOut("try { export prototype; } finally { return; } ");
tryItOut("while((~<><x><y/></x></>) && 0)return window;");
tryItOut("L:if(-1.2e3) { if ((__iterator__ = <><x>y/></></>)) {with(function(id) { return id })throw prop;var \tprototype; }} else const __noSuchMethod__, prop;");
tryItOut("__count__ = prop;");
tryItOut("gc()\t\n\nwith({}) with({}) /a/gi");
tryItOut("if(this.__defineGetter__(\"prop\", [1,2,3,4].map)) {export x::__count__; } else  if ((({__proto__: <><x><y/></x></>,  get prototype function ([y]) { } (__parent__) { gc() }  }) instanceof [1] <=  /x/ )) {export constructor; }");
tryItOut("with({}) { {const prototype = this; } } ");
tryItOut("yield __parent__;");
tryItOut("/*for..in*/for(const [prototype, __parent__] = null ||  /x/g  in #3={a:#3#}) {yield <><x><y/></x></>;constructor = [1]; }");
tryItOut("/*infloop*/while(eval(\"<><x><y/></x></>\", <y><z/></y>)[[__count__]])/*infloop*/do {continue ; } while(prop = *);");
tryItOut("try { with({}) try { var __noSuchMethod__, __count__ = window; } catch(function::prop) { throw __parent__; } finally { throw StopIteration; }  } catch(__parent__ if ('fafafa'.replace(/a/g, eval) %= __noSuchMethod__, __parent__ = undefined(<><x><y/></x></>, @foo))) { try { with({}) for(let y in []); } catch(__iterator__) { let(__noSuchMethod__ = __count__ = <x><y/></x>, __parent__ = (new RangeError(false))) { this.zzz.zzz; } finally { throw StopIteration; }  } finally { return; } ");
tryItOut("var __count__ = this;");
tryItOut("let(prop, __parent__) { for(let y in [5,6,7,8]) export prop;");
tryItOut("M:if( '' ) (if(this) { if (#3={a:#3#} -1)  prop continue L;} else )export prototype; else  if () return; else {var __iterator__ =  \"\" ;\nyield false;\n }");
tryItOut("if(typeof prop) {yield <y><z/></y>; } else export *;");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("do {L:with({__proto__: 0/0}){function  prop (__iterator__)<x><y/></x> }return this; } while((__noSuchMethod__.isPrototypeOf(<x><y/></x>.__defineGetter__(\"getter\",  \"\" ))) && 0);");
tryItOut(";");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) with({}) { ; } ");
tryItOut("L: {var __parent__ = *;gc() }");
tryItOut("if(1e81.watch(\"prototype\", Function)\n) M:if(null) {throw  /x/ ; } else  if (*) yield case 0: default: ;; else throw null; else  if (let (__noSuchMethod__, __proto__) __count__.__iterator__ = [1].__iterator__ =  /x/g ) {gc() }");
tryItOut("let(prop = this) ((function(){for(let y in []);})());");
tryItOut("L:if('fafafa'.replace(/a/g, (<><x><y/></x></>).__defineSetter__).__defineGetter__(\"constructor\", ( \"\" ).watch)) { if (#1=({__parent__:  /x/ }) *= <x><y/></x> != <><x><y/></x></>) } else {throw [[]]\n }");
tryItOut("if(({ get __parent__ __count__ (__iterator__, __count__) { return __proto__ }  })) {<><x><y/></x></>;let __count__; } else if(this) { if (this) {([1,2,3,4].slice).\fapply }} else {{} }");
tryItOut("/*infloop*/for(__iterator__.@* <= (uneval(this)); let __proto__; new (<><><x><y/></x><!--yy--></></>.constructor = constructor%=prototype.prototype)([prototype.__parent__ = {} for (__count__ in prop) for each (prop in this) for each (__parent__ in window)], 3.141592653589793 %= <x><y/></x>.hasOwnProperty(\"__parent__\"))) return; const prototype;");
tryItOut("/*infloop*/for(var __parent__ =  = ; <x><y/></x> >>= -0.propertyIsEnumerable(\"__noSuchMethod__\"); <xxx {__iterator__}={\f__count__ |= ([[]].valueOf(\"number\"))} />) {{}\nyield <y><z/></y>; }");
tryItOut("L: {var __proto__;throw 1e+81; }return <y><z/></y>;/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in 3) {return window; }");
tryItOut("/*infloop*/L:for(this.zzz.zzz; <><x><y/></x></>.*; window .@x::  /x/ ) {export *; }");
tryItOut("/*for..in*/for(let prototype.__iterator__ in ((function  prop ()__proto__ = 3.141592653589793.hasOwnProperty(\"({ __parent__: __count__, prop: __count__ })\"))(new (function(q) { return q; }())()))){let __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/while((this.propertyIsEnumerable(\"__count__\")))");
tryItOut("prop");
tryItOut("{var __iterator__, \t<x><y/></x>;const prop = __count__ = 1e4, prop; }");
tryItOut("if((function ([y]) { })()) { if (<y><z/></y>) gc()} else yield *;");
tryItOut("/*infloop*/M:for(let __parent__; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (((1 for (x in []))).call(+<x><y/></x>, (window.__noSuchMethod__), <x><y/></x>)--)) {if((<>constructor</>.unwatch(\"__proto__\"))) switch({}) { case 4: export *;break; yield; } else  if ((yield [,].valueOf(\"number\"))) return <x><y/></x>; }");
tryItOut("/*infloop*/<bbb xmlns:ccc=\"this.unwatch(\"__proto__\")\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*for..in*/\tM:for(prop in ((__proto__ = arguments)\n)) return constructor.__proto__ = ( /* Comment */*);");
tryItOut("/*for..in*/for(let [prop, constructor] = prototype.prop =  ''  in this >= 4. .@x:: [var function::__parent__ =  '' ;__count__]) ;const prototype, __parent__;");
tryItOut("throw @foo\n");
tryItOut("switch(__iterator__.__lookupSetter__(\"__parent__\").valueOf(\"number\")) { case 5: /*infloop*/while(__proto__){throw  '' ;const /a/gi; }case (new <><x><y/></x></>)[(__noSuchMethod__ = #1#)]: /*infloop*/while(0)throw window\n if (function(id) { return id })break;  }");
tryItOut("/*infloop*/L:for(undefined; __noSuchMethod__.__parent__ =  &= false; (<x/> if (prototype)) & ~<><>+*</></>) {let try {  } catch(prop if (function(){yield <x/>;})()) { (window); } catch(__parent__) {  } finally { gc() }  }");
tryItOut("for(let y in [5,6,7,8]) (<x/>);");
tryItOut("/*for..in*/M:for(const __iterator__ in (((@foo).__defineSetter__)(((new Function(\"Math.pow\"))).call( '' .__defineGetter__(\"prop\", (new Function(\"throw <><x><y/></x></>;\"))), __parent__ = <y><z/></y>, yyy))))__count__");
tryItOut("L:if((@foo = [,,z1])) if(({prototype getter: Function, /*\n*/constructor getter: function  __proto__ (__count__, __iterator__)true })) {; }");
tryItOut("/*infloop*/while(.2.__defineSetter__(\"prototype\", ({a1:1})))export *;");
tryItOut("/*infloop*/M:do {(#1#); } while(this);");
tryItOut("with((({}).__lookupGetter__).call((eval(\"<y><z/></y>\", window)), )){default: ;eval }");
tryItOut("/*infloop*/M:while(0x99)break M;");
tryItOut("__iterator__ = prop;");
tryItOut("{if(#) { if ( '' ) gc() else {}}/*for..in*/for(var __proto__ = __iterator__-=false in ) {@foo;return -1; } }");
tryItOut("{M:with({prototype: this})(1e-81);var __parent__ = null; }");
tryItOut("switch(#1=[#1#]\f.__defineGetter__(\"__noSuchMethod__\", Math.sin)) { case (this.yoyo(((yield (new Iterator( /x/g )))))): break; case (yield <><x><y/></x></>[3.141592653589793]) > let (__iterator__, prototype) false ? ( '' \n).__count__ : export *: @foodefault: continue L;break; case 6: break; /*for..in*/M:for(var __iterator__ = __noSuchMethod__.__noSuchMethod__ =  \"\" .__lookupSetter__(\"constructor\") in <y><z/></y>) if(true) { if (<x/>) {const yield, prop = <y><z/></y>; }} else ([,,z1]);if(__proto__ = window) { if (__count__) {Math.singc() }} else ({ prop: prototype }) }");
tryItOut("if(null.(eval(\"undefined\",  \"\" ))) { if (([11,12,13,14].sort)) __noSuchMethod__} else {with({__iterator__: <><x><y/></x></>})const __parent__;do {yield; } while(([]) && 0); }\n/*for..in*/for(let [__count__, yield] =  /x/g  in <y><z/></y>) {let __parent__ = __count__;(false); }'");
tryItOut("throw StopIteration;");
tryItOut("with({__iterator__: [[( \"\" ++)].sort(function  __noSuchMethod__ (({ constructor: prop, __count__: prop })) { yield prop in <x><y/></x> } ) for ([1].constructor in __proto__.*) if (<x><y/></x>)]})var __count__ = __parent__\n const __count__;");
tryItOut("let __parent__;");
tryItOut("with({}) { return (eval(\"<x><y/></x>;\", __proto__.__proto__ getter= 'haha'.split)); } ");
tryItOut("let(__parent__ = (#0=<x/>)) { with({}) { __count__ = prototype; } ");
tryItOut("try { var __count__ =  /x/ ; } catch(*) { ; } finally { gc() } ");
tryItOut("M:while((<y><z/></y>) && 0){/a/gi }");
tryItOut("/*infloop*/for(__parent__; this.__defineSetter__(\"__count__\", 'haha'.split) -= ('fafafa'.replace(/a/g, (<x/>).watch) .@*:: window in __iterator__); (<x><y/></x>.__noSuchMethod__+=__count__ = __noSuchMethod__)) {function(y) { yield y; gc(); yield y; }var __count__; }");
tryItOut("with(<> </>)return;");
tryItOut("return function::constructor;");
tryItOut("L:do throw StopIteration; while((<><x><y/></x></>.__lookupSetter__(\"prototype\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <><bbb xmlns=\"[,]\"></bbb></>.hasOwnProperty(\"prototype\")) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in (<><x><y/></x></> >>= 1e4).__defineSetter__(\"__parent__\", (eval(\" '' \", __iterator__ = <x><y/></x>)))) return  '' ;");
tryItOut("let(prototype, __noSuchMethod__) { this.zzz.zzz;");
tryItOut("if( /x/ .throw(@foo) ? eval(\"const prototype = -0;\", <x><y/></x>) : let (__parent__ = \t<x><y/></x>) <x/>.throw(__count__ & <><x><y/></x></> == -0)) { } else yield <x/>;");
tryItOut("if(<><>(({ set <x><y/></x> prop (constructor, constructor) { yield <x><y/></x> }  }))</></>) /*for..in*/for(const prop in <x><y/></x>) {export *;export *; } else {let prototype, prototype; }");
tryItOut("L: break L;");
tryItOut("with({\f__count__: (yield <x/>)}){[1,2,3,4].map }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in __iterator__) ");
tryItOut("L: *;");
tryItOut("gc()\nwith({}) with({}) export x::__proto__\n/*infloop*/for(<x/>; [[1]]; this) {}");
tryItOut("{with({__iterator__: ({})})export __iterator__; }");
tryItOut("/*infloop*/do /*infloop*/L:while(@foo.*)yield this; while('fafafa'.replace(/a/g, 'haha'.split))\ngc()");
tryItOut("/*for..in*/L:for(var prototype in ((function () { return (-3/0)[<y><z/></y> ? <x><y/></x> : this] } )((Math.pow)((p={}, (p.z = this.zzz.zzz)())))))/*for..in*/for(let __noSuchMethod__ in ((({}).__lookupGetter__)(__proto__ = false))){export __count__; }");
tryItOut("while(((033)) && 0)export prop;");
tryItOut("M:switch(1e+81) { case yield ^ 1.3: gc()break; /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <><x><y/></x></>) {__proto__, __noSuchMethod__; }break; break; break; break; if(this) prototype = undefined; else  if ((function ([y]) { })()) {gc() } else break; default:  }");
tryItOut("L:while((this.__defineGetter__(\"__parent__\", 'haha'.split)) && 0){yield this; }");
tryItOut("if(*::*.hasOwnProperty(\"prototype\")) {} else  if ((prop = prop)) return <x/>\n");
tryItOut("do return 0; while((<><x><y/></x></>) && 0);\n{export each\nfunction(y) { yield y; continue M;; yield y; } }\n");
tryItOut("{}");
tryItOut("do ;return; while((null.isPrototypeOf((yield [1,2,3,4].slice))) && 0);");
tryItOut("with({}) let(constructor = <x/>) { export prop;");
tryItOut("if(this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice)) {yield; } else  if ((__noSuchMethod__ instanceof (-<><x><y/></x></>))) <><x><y/></x></>.__noSuchMethod__ else var __parent__;");
tryItOut("{\tvar __parent__ = 1e4, prototype;\treturn  /x/ ; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (-3/0 += <>__count__ getter: function  __count__ (__noSuchMethod__) { return this } </>)((<y><z/></y>.watch(\"prop\", /a/gi).__lookupGetter__(\"__noSuchMethod__\")), let (__parent__, __iterator__) <><x><y/></x></>\n)) /*infloop*/do 3/0; while((yield *::*.eval(<x><y/></x>)).0/0);");
tryItOut(" for (__proto__ in +this)");
tryItOut("switch((__proto__-=(__count__ for (prop in window)) | (new let __noSuchMethod__, __iterator__ = function ([y]) { };(try { return @foo; } finally { yield; } ))\n)) { case [1,,]: break; case new Number(<x><y/></x>.throw(false),  /x/  .@x::  '' ): break; default: gc()break;  } const __noSuchMethod__;");
tryItOut("let(prototype = prototype = let (__proto__ = window, __noSuchMethod__) 3.141592653589793, __count__) ((function(){*::*;})());");
tryItOut("gc()");
tryItOut("/*infloop*/for(const __proto__; ; (this.watch(\"__parent__\", Math.sin))) ");
tryItOut("switch(<><x><y/></x></>) { case true: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) {{}\n }");
tryItOut("/*infloop*/M:for(<x><y/></x>; <><x><y\f/></x></>; window) export *;");
tryItOut("/*\n*/do /*for..in*/for(\t[__proto__, function::__parent__] = @foo in null) {export __noSuchMethod__; } while((<><xxx {prototype}={(({ <xxx {constructor}={({constructor: <><x><y/></x></>}).propertyIsEnumerable(\"__proto__\")} /> __parent__({ prototype: __noSuchMethod__, __iterator__: __proto__ }) }) = __parent__.prop = __parent__).__defineGetter__(\"__noSuchMethod__\", 'haha'.split)} /></>) && 0);");
tryItOut("L:if((this[false])) { if (@foo.__noSuchMethod__) export *; else {return <><x><y/></x></>;continue ; }}");
tryItOut("{/a/gi(1 for (x in [])) }");
tryItOut("L: {with({prototype: <x/>}){window; } }");
