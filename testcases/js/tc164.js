tryItOut("/*infloop*/for(let __noSuchMethod__ = function (prop, each) { export prop; } ;  /x/g .propertyIsEnumerable(\"__parent__\").__lookupGetter__(\"__parent__\") >>>=__iterator__.constructor = *; new (function(q) { return q; })()\t) {}");
tryItOut("/*infloop*/for(([1,2,3,4].map)(); prop.__iterator__ getter= <x><y/></x> , [__count__.__defineSetter__(\"prop\", [1,2,3,4].slice) for each (__proto__ in 1e4) for (constructor in true)].hasOwnProperty(\"__proto__\"); (yield delete prop)) switch(<x/>) { window = [[1]] }");
tryItOut("L:if(__iterator__) \f{gc() } else  if (<x><y/></x>) {yield; } else null;");
tryItOut("with({__parent__: (/a/gi).apply})return 3/0;");
tryItOut("/*for..in*/M:for(var (window) in (p={}, (p.z = <><x><y/></x></>)())) {return this;export __noSuchMethod__; }");
tryItOut("/*for..in*/for(const __proto__ = {} in <x><y/></x>) {@foo; }");
tryItOut("L: let (__proto__ = <x><y/></x>, prototype) { const prototype; }");
tryItOut("with({__count__: 0}){const __count__ = __count__, __proto__;yield; }");
tryItOut("/*for..in*/L:for(let prototype = new eval() in ) if((<><x><y/></x></> for (constructor in this))) { if ((true !== __iterator__)) {yield; } else (({a2:z2}));}");
tryItOut("/*infloop*/for(let ({ prop: [] }) = (( /x/g )(, <><x><y/></x></>)); //h\n(<x/>.*).watch(\"constructor\", /a/gi); ([typeof (prop.(<><x><y/></x></>.*)) for each ([, __noSuchMethod__] in <><x><y/></x>\t</>.__lookupGetter__(\"prototype\"))])) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__count__ in __iterator__.( /x/ )) export constructor; }");
tryItOut("let (__count__) { __proto__ }");
tryItOut("let __noSuchMethod__, __noSuchMethod__\nbreak ;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in  \"\" ) __proto__");
tryItOut("/*infloop*/for((p={}, (p.z = (-{}))()); (new (new (<><x><y/></x></>)([[1]], <x><y/></x>)).throw(<y><z/></y>.__proto__)(*::*)); <x/>) gc()");
tryItOut("/*infloop*/do {gc() } while(yield this);");
tryItOut("with({}) with({}) var prototype = this, __count__;");
tryItOut("; const __iterator__;");
tryItOut("if((delete new (constructor = @foo)())) {/*infloop*/while(window.watch(\"constructor\", <y><z/></y>))__iterator__, __count__;with({__proto__: 4.})gc() } else {{return; } }");
tryItOut("/*infloop*/L:for(__iterator__; (prototype.(true)) ? (yield null.@*) : ((this.__defineSetter__(\"function::__proto__\", eval)) if (false)); new ((window).__defineSetter__)() ? [[1]].hasOwnProperty(\"__parent__\") : new Error()) ;");
tryItOut("export *;-0; const constructor;");
tryItOut("do return; while((__count__ = __count__) && 0);");
tryItOut("do /*for..in*/for(prop = <x><y/></x>.propertyIsEnumerable(\"__parent__\") ? ((<><x><y/></x></>).watch).call(each, window) : ('fafafa'.replace(/a/g, function () { return this; } )) in <x/>) {(window); } while(([11,12,13,14].map :: ({__iterator__ setter: function(q) { return q; } })) && 0);");
tryItOut("{/*infloop*/for(new ((constructor.( '' )))(); new Iterator(<><x><y/></\tx></>); #2=<x><y/></x>) {gc() }yield; }");
tryItOut("/*infloop*/do {(<y><z/></y>); } while(<><x><y/></x></>);");
tryItOut("yield <x><y/></x>;");
tryItOut("do return; while((null) && 0);");
tryItOut("/*for..in*/for(const constructor = (delete __count__) in RegExp()) {{;{} } }");
tryItOut("if(<x><y/></x>) {let __iterator__, __proto__; } else  if (true) continue ; else {return; }\nyield <x><y/></x>;\n");
tryItOut("with({__proto__:  \"\" .watch(\"prototype\", function(y) { yield y; constructor = [z1], __noSuchMethod__ = *::*;; yield y; })}){export __proto__; }");
tryItOut("/*for..in*/for(var constructor in ((({}).__lookupGetter__)(([*].eval((__iterator__ = <y><z/></y>))))))(window);");
tryItOut("/*for..in*/for(var x::prototype = prototype = <x/>.isPrototypeOf(0.1) in  { return ((0.__proto__ for each (__parent__ in <y><z/></y>))) } ) prototype");
tryItOut("with({constructor: <zzz>(#2=({prop: <x><y/></x>}) if (<y><z/></y>)()).__lookupGetter__(\"prop\")</zzz>})break M;return;");
tryItOut("\nwith({}) { export __count__; } ");
tryItOut("\n");
tryItOut("/*for..in*/M:for([prototype, __count__] = (constructor =  \"\" ) in -3/0) throw window;");
tryItOut("if(#0=[#1=[#1#]]) { if (function::__parent__ = (constructor(null)) || this.zzz.zzz) {M:with(\nprop = <><{prototype}></{prototype}></>, __noSuchMethod__ = export __count__;)break ;/*for..in*//* nogeckoex bug 349964 */ for  each(var [,] in *) var __count__; } else {with({__iterator__: this.zzz.zzz--})const __noSuchMethod__ = <y><z/></y>, prop;if( \"\" ) let __count__; else {return;yield; } }}");
tryItOut("let(prototype = this, __noSuchMethod__) ((function(){({}).__lookupGetter__})());");
tryItOut("L:if((Exception(<y><z/></y>, [,,]))) {break L;const __noSuchMethod__, __parent__;\n\n } else {const prop; }");
tryItOut("/*for..in*/M:for(var ({ __iterator__: [prototype, __count__, , ({ __iterator__: prototype, prototype: prop })] }) = __proto__.constructor = <y><z/></y> for each (__parent__ in <x/>).unwatch(\"__count__\") /= ({ get constructor prototype (constructor) { const __parent__ = 1e81, __proto__; } , __parent__ getter: (window).watch }) in default: break; case 2: gc()break; case 4: (#1#);case 7: break; break; if(__count__) export *;break; break; case 9: break; ) /*infloop*/L:do return <x/>; while(<y><z/></y> <<= [,,]);");
tryItOut("if(<x/>\tyield;) (<y><z/></y>); else  if (*::*) {var prototype = <y><z/></y>;yield [z1,,]; } else {[,,z1]; }");
tryItOut("/*infloop*/for(([this.__defineGetter__(\"__count__\", Math.pow) for each (prop in *::*) for (constructor in __parent__)]); prototype.__proto__ getter= function (__count__)*::* === <y><z/></y>.__count__ = @foo; ~*::*)  ");
tryItOut("with({constructor: [(arguments--)].filter(let (try { {} } catch(__parent__ if (function(){export *;})()) { throw window; } catch(constructor\r) { ; }  = __parent__, __noSuchMethod__ = true) this)})yield [,,];\nprototype = 3, prototype = <x/>;\n");
tryItOut("try { for(let y in []); } catch(prototype if __noSuchMethod__.hasOwnProperty(\"prototype\")) { with({}) { throw StopIteration; }  } catch( if (function(){yield eval(\"export constructor;\", window) += this.__defineGetter__(\"__proto__\", <y><z/></y>);})()) { return; } catch(__iterator__) { let(__count__ = 3, __iterator__) ((function(){yield <><xxx {__iterator__}={(#1=constructor)} /></>;})()); } ");
tryItOut("if(!__parent__.(*::*) * (Function)(<><x><\ty/></x></>, <><x><y/></x></>)) {(( \"\" )[<x><y/></x>]);*; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ((yield prototype))) {with({}) this.zzz.zzz;if(__iterator__ = [[1]] > __count__ = [z1,,]) { if ((<x/>).__defineSetter__) {return __proto__; }} else export *; }");
tryItOut("if(eval(\"L:with(*)<><x><y/></x></> = <y><z/></y>, prototype = 1.3;\", this.eval(#1=[#1#]))) throw this.__defineGetter__(\"__count__\", Function);");
tryItOut("if(eval(\"Math.sin\", *).__lookupSetter__(\"prop\").__lookupSetter__(\"prototype\")) { if ( /* Comment */<x/>) {yield <><x><y/></x></>;export *; }} else {yield  \"\" ; }");
tryItOut("__proto__");
tryItOut("{/*for..in*/for(let __iterator__ = <><x><y/></x></> in <x><y/></x>) ; }");
tryItOut("with({prototype: ( \"\" .watch(\"constructor\", this).hasOwnProperty(\"__parent__\"))}){{(3/0); }return; }");
tryItOut("if(<><x><y/></x></> == <x/>) { if ([__noSuchMethod__, __parent__, constructor] = null) {return C  /x/g ;export constructor; }} else {return <x><y/></x>;; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("{/*infloop*/while(*::*.unwatch(\"__iterator__\") , __iterator__.constructor)<bbb xmlns:ccc=\"prototype.__noSuchMethod__(Math.pow(),  '' )\"><ccc:eee></ccc:eee></bbb><!--yy--> }");
tryItOut("/*infloop*/while( /x/ ){__proto__; }");
tryItOut("M:switch(<y><z/></y>) { case 5: break; break; case 0: break; /*infloop*/do { } while(arguments.unwatch(\"prototype\"));break;  }");
tryItOut("/*for..in*/for(const __proto__ = __count__.eval(<><x><y/></x></>) in ( /x/  &= <><x><y/></x></>)) export *;");
tryItOut("/*for..in*/for(prototype in ((<><{__iterator__}></{__iterator__}></>.isPrototypeOf(typeof <x><y/></x>))(__parent__.__parent__))){gc() }");
tryItOut("do M:with((<><x><y/></x></> .@*:: <x/>)){let constructor, __count__ = (function ([y]) { })();{} } while((('fafafa'.replace(/a/g, Math.pow))) && 0);");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = 1.2e3 in __proto__) yield\n");
tryItOut("with((__proto__ = (prototype = prop)).__defineGetter__(\"prototype\", __parent__)){export getter; }");
tryItOut("if(null) { if ( /* Comment */this) {{export *; }let __proto__; } else {throw __parent__; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in false) export *;");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("if(<><x><y/></x></> :: false) { } else (@foo);");
tryItOut("return;");
tryItOut("with({prop: [<x><y/></x>]});");
tryItOut("if((((window).__defineSetter__).call(((*::* ? 1e4 : window)\n), (new Array(([[]].@foo if ( /x/ )))), ({prototype: __parent__, __parent__: <y><z/></y> })))) __count__; else  if (function::__proto__ = __proto__ ? \twindow : .unwatch(\"prototype\")) {yield  '' ; }");
tryItOut("this.zzz.zzz;");
tryItOut("switch((__count__--)) { case 3: break; default: export *;, prototypebreak;  }");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("if(RegExp(([15,16,17,18].sort(function () { return 1.3 } , (this.hasOwnProperty(\f\"__noSuchMethod__\")))), false.__defineSetter__(\"__iterator__\", <><x><y/></x></>)[[, , constructor, __parent__] = ({ prop: ({a2:z2}), __proto__: __noSuchMethod__ })])) /*for..in*/for(let constructor in ((function  __parent__ () { <x><y/></x> } )((set =  \"\" )))){gc()yield <y><z/></y>; } else  if (('fafafa'.replace(/a/g, Function))) return;");
tryItOut("for(let y in [5,6,7,8]) yield (1e+81 :: prototype);");
tryItOut("/*for..in*/for(let [prop, __iterator__] = ((yield  /x/g .__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))) in ([((__proto__ = <><\rx><y/></x></>) in __noSuchMethod__ = x::1.2e3)])\t) {/*infloop*/M:for(((yield *)/*\n*/); 0; window) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  /x/ ) {throw <x/>;({}).__lookupGetter__ } }__noSuchMethod__ }");
tryItOut("{gc() }");
tryItOut("let (__noSuchMethod__, ({ prop: function::__iterator__, __proto__: __count__ }) = __proto__.__iterator__) { let this = 1e81, __noSuchMethod__; }");
tryItOut("with({prototype: Iterator()}){yield <><x><y/></x></>;export prototype; }");
tryItOut("with({__count__: new (__iterator__.__parent__ setter= function  function::prototype () { return setter } )([[1]] -=  /x/g .__proto__ = (<x><y/></x>.__iterator__), prop.prop = __iterator__)})\n<x/>;\n");
tryItOut("{ const __parent__;if(__count__) {if( /x/ ) {continue ;let __noSuchMethod__ = *, __iterator__ = <><x><y/></x></>; }__proto__ = 1e+81; } }");
tryItOut("/*for..in*/for(var prototype in ((.2 + function(id) { return id })((<><x><y/></x></> ^= new /a/gi(<y><z/></y>)) % (function (__proto__) { return @foo } ).call(null, <x/>, #3={a:#3#})))){;if(__count__) { if ([z1]) {let prototype = window, __noSuchMethod__ = [z1]; } else __noSuchMethod__} }");
tryItOut("/*for..in*/for(var prototype = (()).call(__parent__, *::*) in __noSuchMethod__) return;");
tryItOut("/*for..in*/for(let __count__ in ((new Number())(<y><z/></y> instanceof 4.))){yield; }");
tryItOut("while((\ffunction::__parent__ = __parent__) && 0)let __parent__, __parent__ = [z1,,];");
tryItOut("switch(<><ccc:ddd><ccc:ddd><employee id=\"1\"><name>Joe</name><age>20</age></employee>\f</ccc:ddd></ccc:ddd></>) { default: if((<x><y/></x>)[<><x><y/></x></>] | #1=[#1#] += *::*) { if ( /* Comment */this) {\r{let __iterator__ = __iterator__; } }} else {yield __proto__;export *; }break; case (#2=({constructor: ({prototype:  '' , __count__: set }).constructor}).isPrototypeOf([window].filter((({}).hasOwnProperty).apply))): ({}).__lookupGetter__ }\n");
tryItOut("/*for..in*/for(var prop.__proto__ in ((({}).__lookupGetter__)( /* Comment */new new Array([1]).watch(\"__proto__\", ({}).hasOwnProperty)))){L: M:switch(null) { case <><x><y/></x></>[3]: break; case  \"\"  != window:  }if(window) { if ( @ yield; this.__defineSetter__(\"__proto__\", eval)) {this;yield; } else yield __noSuchMethod__;} }");
tryItOut("/*infloop*/do {return;var  = <y><z/></y>; } while((( /x/g .__lookupSetter__(\"__noSuchMethod__\")).prototype).__defineGetter__(\"constructor\", [__proto__ if (function(id) { return id })]));");
tryItOut("/*infloop*/for(*::* >>= new [1,2,3,4].map(); @foo; @foo for each (__noSuchMethod__ in <x/>)) ;");
tryItOut("");
tryItOut("while((__count__.(new /a/gi(this.zzz.zzz))) && 0)/*for..in*/for(const prop in ((/a/gi)(let (prototype = <x/>) __proto__.__lookupGetter__(\"__proto__\"))))/*for..in*/for(var prototype = <y><z/></y> in <x><y/></x>) {__noSuchMethod__, function::__count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  \"\" (<y><z/></y>)) {__proto__ = (uneval(__parent__));yield; }");
tryItOut("L: {return  /x/g ;const __proto__; }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee> ? -0\n : <><><x><y/></x></></>) /*for..in*/for(let [__proto__, __iterator__] = this in __iterator__ ? * : <x><y/></x>) {return 3/0;const prop = -1, __count__; }");
tryItOut("yield Number();\n/*for..in*/for(let __parent__ in 1e81) {gc() }\n");
tryItOut("with(<><x><y/></x></>){(<x><y/></x>); }__count__, prop;");
tryItOut("/*for..in*/for(const __parent__ for ((prototype.__parent__) in <><x><y/></x></>.throw(constructor))__count__|=<x/>/*infloop*/M:for(let <x><y/></x>.__lookupGetter__(\"__proto__\").__noSuchMethod__ = ([(__noSuchMethod__ << <><x><y/></x></>)]); false; [1] + __proto__) ((Function).apply\r).call");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, if(*::* ||  \"\" [@foo\n]) {if(*::*) {{}break ; }const __count__ = null, __iterator__;\nbreak M;\n } else return;] = (this.zzz.zzz) in [([<x><y/></x>])]\t) return;");
tryItOut("switch(*.__defineSetter__(\"prototype\", gc)) { default: break;  }");
tryItOut("/*infloop*/M:for(const ({ __proto__: __proto__ }) =  \"\"  + <><x><y/></x></>; (({}).__defineSetter__()); ({}).apply(null, <y><z/></y>)) {/*for..in*/for(const constructor = __count__: (<x><y/></x>.(__noSuchMethod__) % constructor >>= \t \"\" ) in <x><y/></x>.hasOwnProperty(\"prop\")) yield <x><y/></x>;throw StopIteration; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\nconst __parent__ in (((constructor.__iterator__).throw((<x>\f<y/></x> if (function(id) { return id })))) ? null.@* : <><ccc:ddd>yyy</ccc:ddd></>)) {if( /x/g ) { if () {var __noSuchMethod__, function::__count__ = function::prop;with([,,z1])yield <y><z/></y>; } else {__proto__;return; }} }");
tryItOut("var  /x/ , __count__ = @foo;");
tryItOut("");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = [1].__defineGetter__(\"__noSuchMethod__\", function (prototype, __count__)<y><z/></y>) in @foo) {gc() }");
tryItOut("/*for..in*/for(__noSuchMethod__ = [15,16,17,18].some((1 for (x in [])), new (gc)( /x/ )((__proto__ = <><x><y/></x></>))) in <xxx>{constructor}</xxx>) {var __count__ = this, prototype;if(prototype = -1) {L } else  if (<y><z/></y>.prototype) {return;throw <x/>; } }");
tryItOut("if(([<x><y/></x>])) {gc() } else let  /x/  = {};");
tryItOut("/*infloop*/do /*for..in*/for(let prototype =  in __noSuchMethod__.(__proto__ = <x><y/></x>)) {break L; } while(yield (__iterator__.__proto__ = window) |= (__count__.__iterator__ = #1#\n));");
tryItOut("/*infloop*/for(__parent__; <x><y/></x>; this) {}");
tryItOut("/*infloop*/for(function(id) { return id }.__defineSetter__(\"prototype\", function (prop) { yield  /x/g  } ); constructor; (({__noSuchMethod__: null >>= 0.1, __proto__ setter: eval }))) L:if((export *)) {return; } else { /x/ ; }");
tryItOut("this.zzz.zzz;");
tryItOut("try { let __iterator__, function::function::prototype = 3/0; } catch(constructor if (function(){export *;})()) { yield; } catch(__parent__) { yield; } finally { return *; } ");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", <><>1.2e3</></>)) { if (__count__.__parent__ = __noSuchMethod__ = @foo) throw #3={a:#3#};} else {{} }");
tryItOut("/*for..in*/for(prop = new RangeError(<x/>.valueOf(\"number\").prop) in __proto__.__count__ = Date(<x/*\n*/><y/></x>,  /x/ )) {(__parent__); }");
tryItOut("/*for..in*/for(__count__ = (yyy\n)[(<><x><y/></x></> .@*::  /x/g )] in eval(\"try { __proto__ = *::*, constructor; } catch(prototype) { continue ; } \", <x><y/></x>)) {/*infloop*/M:for([,];  \"\" ; <x/>) export *;<x/>; }");
tryItOut("{let __proto__; }");
tryItOut("prop = prototype;");
tryItOut("with((uneval(3.141592653589793)))yield;");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for((({ __proto__: prop, __parent__: [, , ({ prototype: prop })] })) in ((((({prototype: , prototype: (__iterator__ = <><x><y/\f></x></>) })).watch)())(({ get __noSuchMethod__() { yield; } , prototype: +<x/> }))))return (Math.sin).call(this, *::*, 5.0000000000000000000000);");
tryItOut("if((eval(\"\", []) for (__noSuchMethod__ in prototype) if ( '' ))) { if (__proto__.propertyIsEnumerable(\"__iterator__\") = eval(\"gc()\", false)) {({}).hasOwnProperty } else {export prop;__iterator__ = *::*, constructor = <><x><y/></x></>; }}");
tryItOut("if((yield prototype = <y><z/></y>)) yield <x><y/></x>; else  if (false === function(id) { return id }) (__noSuchMethod__);");
tryItOut("/*infloop*/do {__count__ = <><x><y/></x></>, __iterator__ = __proto__;yield; } while(<><x><y/></x></>);");
tryItOut("/*infloop*/M:for(var ({ function::prop: constructor }) = prop = ([1,2,3,4].map).call((('fafafa'.replace(/a/g, this))()), ); --(({}).hasOwnProperty).call((eval(\"var __noSuchMethod__, __iterator__;\", ({prop getter:  /x/g  }))), constructor = <x><y/></x>, [<><x><y/></x></> <= function::__count__].filter(/a/gi)); ) {/*for..in*/M:for(__parent__.\n__parent__ = __proto__ = yield <x/> in  \"\"  += false.unwatch(\"prototype\")) /*infloop*/L:for(const ({ __iterator__: prop, __parent__: function::__proto__ }) = ('fafafa'.replace(/a/g, Math.sin)); __proto__ = window; __iterator__) {{}export *; } }");
tryItOut("if(__noSuchMethod__.(new (undefined)(<x><y/></x>, prototype))) {return; } else {;continue ; }");
tryItOut("");
tryItOut("if(false) {yield constructor; } else  if (window) {yield <><x><y/></x></>; }");
tryItOut("switch(undefined) { case 8:  }");
tryItOut("{(<><x><y/></x></>); }");
tryItOut("{}");
tryItOut("L:if( { return (constructor.__parent__) } ) { if (*.throw(__noSuchMethod__+=\t \"\" )) with({}) try { try { /*infloop*/M:for(let __parent__; <><x><y/></x></>; <><x><y/></x></>) __parent__, __count__; } catch(__count__ if <x><y/>\r</x>.__lookupSetter__(\"prototype\") in __parent__ = <x/>) { yield 0/0.propertyIsEnumerable(\"prop\"); } catch(prototype if window < constructor) { prototype = prop; } catch(__proto__ if (function(){let([, , __parent__, constructor] = 0 instanceof  \"\" ) { this.zzz.zzz;})()) { yield (function(y) { yield y; __parent__ =  /x/ , __proto__;; yield y; })(false) = (yield <x><y/></x>); } catch(__parent__ if (function(){var __iterator__, __parent__ = 1e4;})()) { throw prototype; } catch(function::prototype if (function(){return (this.__defineSetter__(\"constructor\", [1,2,3,4].map).propertyIsEnumerable(\"constructor\"));})()) { prototype = prop; }  } catch(prop) { with({})  }  else {/*for..in*/for(let [constructor, prop] = 1e-81 in <x><y/></x>) {{} }{let (__count__ = <><x><y/></x></>) { L: {;return window; } } } }}");
tryItOut("/*infloop*/L:do if((this.zzz.zzz)) with(); else  if ((-<x/>)) {let __iterator__; } else 'haha'.split while(~(this.zzz.zzz));");
tryItOut("/*for..in*/for([__parent__, prototype] = __count__.prototype in *::*.__defineGetter__(\"__iterator__\", ([z1]).__defineSetter__)) L: {return;\f }");
tryItOut("{var __parent__ setter: /a/gi; }");
tryItOut("switch(( /* Comment */({}))) { case (++this): /*infloop*/L:do {gc() while( /x/ ); }\nreturn;");
tryItOut("L:switch(this.__defineGetter__(\"__noSuchMethod__\", window)[undefined -= @foo]) { case (__count__ = this).__defineSetter__(\"constructor\", 'haha'.split): if(this.__defineSetter__(\"x::__count__\", (new Function(\"( /x/g );\")))--)  else  if (({constructor: arguments })) return __count__; }");
tryItOut("/*infloop*/do eval while(default: break; break; case 4: var __iterator__;case 2: );");
tryItOut("if((@foo.unwatch(\"__parent__\"))) {let __noSuchMethod__; } else yield <y><z/></y>;");
tryItOut("{export *; }");
tryItOut("/*infloop*/for(this.zzz.zzz; __parent__%=new Function(0, @foo) ? [15,16,17,18].some(function  __count__ (__parent__, __noSuchMethod__)<y><z/></y>, null) : ({__noSuchMethod__ getter: gc }); <x><y/></x> / 1e81.__defineGetter__(\"__parent__\", (/a/gi).apply)) #2=({__proto__: ({a1:1})[[,,]]});");
tryItOut("{gc()var <><x><y/></x></>; }");
tryItOut("M:do <x/> while(((new (function(y) { yield y; const constructor = ({});; yield y; }).call(<x/> + null = __proto__ = <y><z/></y>))) && 0);");
tryItOut("/*for..in*/for(const @foo.__proto__ in gc()return 0/0; const get;) return __proto__;\n/*infloop*/while(true(*))yield;\n");
tryItOut("yield __parent__ = #1=[#1#];");
tryItOut("let prop");
tryItOut("/*for..in*/M:for(let [prototype, __count__] = (__count__.([1,,])) in [15,16,17,18].sort(prop = @foo, new Date(({})))) ");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = (eval(\"<x/>\", this).hasOwnProperty(\"__parent__\")) in constructor) {__count__; } const prop;");
tryItOut("if(<><!--yy--></>.yoyo(((<><x><y/></x></>.__iterator__) = ({}).__lookupGetter__))) undefined\n else  if (__iterator__ = 1e-81) {do {(<x><y/></x>);var __noSuchMethod__ =  '' , function::__iterator__; } while(((<><x><y/></x></> >> this)) && 0); }");
tryItOut("/*infloop*/L:for(({ set __iterator__ __parent__ () { return 4. } ,  get __noSuchMethod__ __iterator__ (__parent__, __iterator__) { yield <x><y/></x> }  }); ( \"\"  === <><x><y/></x></>); __count__+= /x/ ) {const __noSuchMethod__ = \t<x><y/></x>, __parent__;throw <y><z/></y>; }");
tryItOut("if([] = (prop)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  \"\" ) { }yield undefined; } else  if (__count__) {__noSuchMethod__;/*infloop*/M:while(.2){return; } } else continue M;\nreturn 3/0;\n");
tryItOut("M:switch(((#3={a:#3#} && ([1,2,3,4].slice).call(@foo//h\n, <y><z/></y>)).valueOf(\"number\"))) { case constructor.prototype\n: if(<bbb xmlns:ccc=\"[this].filter(gc)\"><ccc:eee></ccc:eee></bbb>) { if ( /x/ ) /*for..in*/M:for(__noSuchMethod__ = <><x><y/></x></> in @foo) continue ; else export __proto__;}break;  }");
tryItOut("{}\n");
tryItOut("with({}) { yield __parent__+=this.zzz.zzz.valueOf(\"number\"); } ");
tryItOut("if(([11,12,13,14].filter.__lookupSetter__(\"__count__\"))) { if (<><zzz>false.throw(*::*).__defineSetter__(\"__count__\", [1,2,3,4].slice)</zzz></>) {const __parent__; } else (033);}");
tryItOut("switch(Function) { case 1: <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(var [__iterator__, prototype] = *::* in function(id) { return id }) {return;const __iterator__ = __noSuchMethod__, prototype = <x/>; }");
tryItOut("let (constructor, __iterator__ = new ( /x/  |= <><x><y/></x></>)(<y><z/></y>)) { switch([11,12,13,14].sort) { case 8: break; return true;{}return constructor;default: if(this) {undefined;yield; } else  if (__parent__ for each (__iterator__ in this)) __count__; else case 7: throw #1=[#1#]; } }");
tryItOut("while(((uneval(([<><x><y/></x></> for each (__parent__ in *::*)])))) && 0)if((function(q) { return q; } &= <xxx>{__proto__}</xxx>.(<x><y/></x>))) \t;");
tryItOut("/*infloop*/do undefined; while( /x/g );");
tryItOut("/*infloop*/for(const __proto__ = (({__iterator__ getter: () { return <><x><y/></x></>; }  })) | __iterator__ = prototype;  /* Comment */1.2e3 >>= [z1,,]; ~window) {M:do { \"\" ; } while((__count__|=(({}).__lookupGetter__)()) && 0);false; }");
tryItOut("with({__iterator__:  /x/g }){{} }");
tryItOut("if((new <><x><y/></x></>)) {L:  }");
tryItOut("do {const __noSuchMethod__ = *; } while(( /x/ ) && 0);");
tryItOut("if((* @ false)) break L;");
tryItOut("/*for..in*/for(const [11,12,13,14].map['__parent__'] in this.__defineSetter__(\"constructor\", /a/gi)) \tbreak ;");
tryItOut("/*infloop*/for(let constructor; ({ get __count__ prop (prop)new ((<y><z/></y>).watch)(function(id) { return id }) }); (new ([,,])(this, __iterator__ = [11,12,13,14].map, prop = prototype.valueOf(\"number\")))) {/*infloop*/do  set __parent__ prototype () { let prop; const __parent__; }  while(); }");
tryItOut("/*infloop*/for((window - new RangeError((prototype.prototype))); __iterator__; <><bbb xmlns=\"*::*.__defineGetter__(\"prop\", new Function)\"> </bbb></> , <y><z/></y>.__parent__ = (this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split))) /*for..in*//* nogeckoex bug 349964 */ for  each(var  \"\" ['constructor'] in *::*) return\nif(({ prop: prototype, __proto__: [[, __count__, __count__, , ], []] }) = undefined.__defineGetter__(\"get\", ({}).hasOwnProperty)) export *; else throw 0/0;");
tryItOut("M:with((this .@x::  /x/ )){export prototype; }");
tryItOut("L:if(gc(#1=[#1#].__defineSetter__(\"prop\", Math.pow))) if(<x/> = true.isPrototypeOf(([1] .. function(id) { return id })\n)) {{} } else  if (<bbb xmlns:ccc=\" \"\" .propertyIsEnumerable(\"__proto__\")\"><ccc:eee></ccc:eee></bbb>) function  prototype (__iterator__) { return <x/> } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__.__proto__ in <><bbb xmlns:ccc=\"(-0)\"><ccc:eee></ccc:eee></bbb></>) /*infloop*/for(window = (<x><y/></x>\n); <y><z/></y>.__count__ = false; true) { }");
tryItOut("(\t[z1])\nlet prototype, __proto__;");
tryItOut("throw set;");
tryItOut("/*infloop*/for(var ({ constructor: ({ __parent__: prototype }) }) = (<x><y/></x>)(<x/>, <x><y/></x>); (yield <x/>);  \"\" ) {break M;function () { return <y><z/></y> }  }");
tryItOut("/*for..in*/for([<><x><y/></x> </>, prototype] = __parent__ = ({}) in <y><z/></y>) return <><x><y/></x></>\n/*for..in*/for(let constructor in ((/a/gi)(__noSuchMethod__))){var prop = 4., __iterator__; }");
tryItOut("return;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */M<!--yy-->: for  each(const __parent__ in window) return this; }");
tryItOut("/*infloop*/for( \"\" ; null;  \"\" ) {var __iterator__ = *, prototype = window;continue ; }\nif(<><x><y/></x></>) { } else  if (5.0000000000000000000000) prototype = @foo;");
tryItOut("switch(([__proto__]\f)) { case 1: break; default: /*infloop*/L:do with({__iterator__:  /x/g }){yield __proto__;<x><y/></x> } while('fafafa'.replace(/a/g, /a/gi));break; \fyield; const __proto__;break; throw (-1);break;  }");
tryItOut("while(((Function())) && 0)export __iterator__;");
tryItOut("/*for..in*/for(var [prop, function::__count__] = (new <><x><y/></x></>()()) in <><x><y/></x></> & 4.) let __count__ =  /x/g , __proto__;\n( /x/ );\n");
tryItOut("{export __count__;return  '' ; }");
tryItOut("if((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>).__defineGetter__(\"__count__\", eval)) {{} } else /*infloop*/while(@foo.eval(<x><y/></x>)){export *;yield; }");
tryItOut("\n5.0000000000000000000000\n");
tryItOut("do {return;throw <><x><y/></x></>; } while((new [1,2,3,4].slice(1e-81)) && 0);");
tryItOut("M:do if(__iterator__.prop = <y><z/></y>) (__iterator__); else return; while((undefined) && 0);");
tryItOut("L:with({__iterator__: this.zzz.zzz});");
tryItOut("L:with((x::__count__.__iterator__ = new Function(({a1:1})))){if(prop) {{} } else  if ( /x/ ) {__count__;yield; }[1,2,3,4].map }");
tryItOut("\t/*infloop*/do {let __count__ = [[]]; } while(({ prop: __count__, prototype: [, __iterator__, __count__] }));\nwith({__count__: (({ constructor: __parent__ }) = __count__)}){(*::*);const __iterator__ = this; }\n");
tryItOut("if(\r<><zzz>window</zzz></>) {return; }");
tryItOut("L:if((eval(\"<x><y/></x>\", <y><z/></y>))) {__count__.constructor = yield; } else constructor");
tryItOut("if(@foo\n) {var prop;return; } else {return <y><z/></y>; }");
tryItOut("/*infloop*/for(const __proto__ = ([11,12,13,14].some); String(); *::*) {__iterator__ }");
tryItOut("gc()\n");
tryItOut("with({__iterator__: .((new Function)())}){}");
tryItOut("const prototype, __noSuchMethod__;");
tryItOut("L:with({__proto__: (yield  ''  ? [undefined for (prop in <><x><y/></x></>)].__count__ : (new <><x><y/></x></>))}){while(((<x/> for (__proto__ in <x><y/></x>))[*::*\n]) && 0){/*for..in*/\tM:for(const [__parent__, __iterator__] = <x/> in <y><z/></y>) const prop = 1e+81;const prototype = <><x><y/></x></>; } }");
tryItOut("while((this.__defineSetter__(\"__iterator__\", gc)) && 0){throw true; }");
tryItOut("do {@foo;__noSuchMethod__ = <x><y/></x>, __count__; } while((__noSuchMethod__ = null) && 0);");
tryItOut("do /*for..in*/for(let prototype.__count__ in 3/0) (*::*); while(((__noSuchMethod__ = (-1)).isPrototypeOf(<{__noSuchMethod__}>yyy</{__noSuchMethod__}>.((prototype = __noSuchMethod__)))) && 0);");
tryItOut("/*infloop*/while(<><x><y/></x></>){({}).__lookupGetter__ }");
tryItOut("L: let prop, __count__ =  /x/ \n");
tryItOut("/*for..in*/for(let prop = ([__count__ = __proto__ =  /x/ ].some(({}).hasOwnProperty)) in this) /*infloop*/for(const __count__;  '' ; (__count__.__count__)) /*infloop*/for(3.141592653589793; <><x><y/></x></>; undefined) {function  __iterator__ (__proto__) { return constructor } continue ; }");
tryItOut("/*for..in*/L:for(const constructor in <x><y/></x>) {; }");
