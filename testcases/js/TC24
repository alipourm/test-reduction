
tryItOut("M:while(([,].prototype = (window if (*::*))) && 0){\tthrow (window if (*)); }");
tryItOut("/*for..in*/M:for(var __count__ in *::*.watch(\"__iterator__\", Math.sin)) {*::*gc() }");
tryItOut("/*infloop*/for([z1,,]; #1=[#1#]; 0x99) __count__\n");
tryItOut("yield __count__\n(<><x><y/></x></>);@foo ? 0/0 :  '' ");
tryItOut("do {yield <x><y/></x>;continue ; } while(('fafafa'.replace(/a/g, function(y) { yield y; return;; yield y; })) && 0);");
tryItOut("let(__iterator__ =  /x/ , __parent__ = __count__) ((function(){((undefined).watch).call})());");
tryItOut("/*for..in*/for(let [prop, __proto__] = /*\n*/<y><z/></y> in undefined) yield <x/>;");
tryItOut("/*infloop*/while(__proto__.__proto__ getter= (__proto__ = function (__iterator__) { yield this.valueOf(\"number\") } )){/*infloop*/for(let function::__noSuchMethod__ = [15,16,17,18].filter\t(({}).__lookupGetter__, <y><z/></y>.unwatch(\"__noSuchMethod__\")); (- '' ); __proto__ == ( /x/g  ? 1e81 : -1)) {Math.sinexport *\n{} }with((1e-81.propertyIsEnumerable(\"__parent__\"))){export __proto__;const constructor, __count__ = <x/>; } }");
tryItOut("M:if((gc)) { if (@foo) yield (function  __count__ () { yield <x><y/></x> } ());} else <ccc:ddd>yyy</ccc:ddd>");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = @foo in <y><z/></y>) {/*infloop*/for(const __count__; (p={}, (p.z = <><x><y/></x></>)()); <y><z/></y>) [[]], @foo }");
tryItOut("/*for..in*/L:for(const (<x><y/></x>.__parent__) in (__parent__.propertyIsEnumerable(\"__count__\"))) try { gc() } finally { return; } ");
tryItOut("L:while((-3/0) && 0)");
tryItOut("/*for..in*/for(let function::prototype = <xxx {__proto__}={<x><y/></x>.(__parent__)} />.(({ set prop(__proto__, __parent__) { return [15,16,17,18].some(/a/gi, false) }  })) in (Math.sin).call(((__parent__)()), )) {return null + []++;/*infloop*/for(__parent__; false === <x/>; prop) function () { yield @foo }  }");
tryItOut("M:while((@foo) && 0)return *;");
tryItOut("throw ({})\nwith({__iterator__: undefined}){gc() }");
tryItOut("do (__parent__); while(((Iterator(.2 * *))) && 0);");
tryItOut("/*infloop*/for(__count__ = (__iterator__+=(__iterator__ != <x/>)); (eval(\"let prop: eval(\\\"function ([y]) { }\\\", (function ([y]) { })());\", 3/0)).valueOf(\"number\"); yield (true , window)) {/*infloop*/M:for(<x/>; function(id) { return id };  /x/ ) export *; }");
tryItOut("switch(<x><y/></x>) { case 3: break; default: continue ;break;  }");
tryItOut("let(prototype = <x/>) { var __parent__;");
tryItOut("/*for..in*/for(let (@foo); = __noSuchMethod__ in false) {((-0)).apply }");
tryItOut("window;\nexport prop;\n");
tryItOut("if(<><{prototype}></{prototype}></>) {if((constructor = __iterator__ / __parent__ + __parent__)) { if ((p={}, (p.z = (constructor.prototype = __proto__ ? constructor = prop : (this.zzz.zzz)))())) gc()} else {export *;return [z1,,]; }do {var __noSuchMethod__ = true, __parent__; }\f while((((p={}, (p.z = export prototype;)()))) && 0); }");
tryItOut("with({__proto__: window}){ \"\"  = <y><z/></y>, prototype = *::*;{} }\nexport *;\n");
tryItOut("with(([false for (constructor in  /x/g )] if (<x/>))){export *;yield [1]; }");
tryItOut("return;");
tryItOut("{ }");
tryItOut("/*infloop*/for(@foo if (__parent__).__lookupSetter__(\"prop.__parent__\"); prototype; prototype =  '' ) {return <x/>;export *; }");
tryItOut("L:if( '' ) { if (<x><y/></x>) (0);} else {<><x><y/></x></>; }");
tryItOut("with(\f{__iterator__: 'fafafa'.replace(/a/g, /a/gi)}){}");
tryItOut("M:while((<x><y/></x>.yoyo(<y><z/></y>)) && 0){((new Function(\";\"))).apply }");
tryItOut("do do /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in undefined) export *; while((*::*) && 0); while(((prop = false == window)) && 0);");
tryItOut("do return <x/>; while((prototype.(this.watch(\"__parent__\", Math.pow))) && 0)\nM:with({__count__: false})export prop;\nexport *;\n");
tryItOut("{let (__iterator__, __count__ = 1e+81) { throw <><x><y/></x></>; }__count__ = (function ([y]) { })(); }");
tryItOut("/*for..in*/for(var [__proto__, __proto__] = (({ prototype: prop, prototype: ({ __proto__: prototype }) }) = [, ({ __parent__: prototype }), ({ constructor: __count__ })]) in [[1]]) {L:if((undefined.__defineGetter__(\"constructor\", 'haha'.split))) {;return; } else  if (prop.prototype = *::*) __parent__ }");
tryItOut("if((function ([y]) { })().__lookupGetter__(\"__iterator__\")) var __proto__; else {return; }");
tryItOut("yield <><x><y/></x></>\n\n");
tryItOut("/*infloop*/L:for(let prop = ({ prop: __proto__ }) = __noSuchMethod__; __noSuchMethod__.__noSuchMethod__ = __iterator__\f.(*::*); ({function::__iterator__ getter: <y><z/></y>,  set __proto__ prototype (__count__)this })[_\n]) (constructor)");
tryItOut("break M;");
tryItOut("const __proto__;");
tryItOut("/*\n*/L:with({__count__: @foo}){ }\nif(<y><z/></y>) { if (0) } else let prototype, __iterator__ = @foo;\n");
tryItOut("yield ([-1].filter(function  __proto__ (__iterator__, __count__) { return; } ));");
tryItOut("do {/*infloop*/M:while(([__count__] = <x><y/></x>))let *; } while(((__proto__)()) && 0);");
tryItOut("function(q) { return q; }\nlet (({ prop: ({ prototype: ({ __proto__: constructor, __count__: __iterator__ }) }), __proto__: ({ __iterator__: ({ __count__: get, __noSuchMethod__: yield })\f, __noSuchMethod__: [] }) })) { if((3.hasOwnProperty(\"__iterator__\")).unwatch(\"prototype\")) yield; else {return; } }\n");
tryItOut("if( /x/ .//h\n__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) { if ((<><x><y/></x></>)[ '' ]) /*infloop*/for(1e81; #1=[#1#]; constructor) return; else {return #1=[#1#]; }}");
tryItOut("with({__iterator__: [,,]}){({constructor: *}) }");
tryItOut("M:with(*)yield (undefined);");
tryItOut("/*infloop*/M:while( /x/ )/*infloop*/do export *; while(__count__); const __parent__;");
tryItOut("with(({__iterator__: 5.0000000000000000000000 })){/*infloop*/do { } while(__iterator__ = undefined); }");
tryItOut("/*infloop*/L:for(let __iterator__ = false; 1e+81;  '' ) ");
tryItOut("{/*infloop*/do {prop; } while(prototype = [[1]]) }");
tryItOut("{\nconst __proto__ = undefined, constructor = (-0);gc() }");
tryItOut("L: /*infloop*/for(var ({ prop: __proto__ }) = eval(\"return false;\", (yield  /x/ ) /= *.*); ({__noSuchMethod__: <y><z/></y> }); __iterator__ = prop.__parent__ setter= Math.pow) {( /x/ );__iterator__; }");
tryItOut("/*infloop*/M:for(const prototype = #1#; eval(\"1e-81\", prototype); (0.1())) {const prop = true, prototype; }");
tryItOut("/*infloop*/for((*::*.__defineGetter__(\"prototype\", (<x><y/></x>).__defineSetter__))(prop, (@foo for each (prop in <><x><y/></x></>))); __count__.(<><bbb xmlns=\"<y><z/></y>\">/*\n*/<x><y/></x><ccc:ddd><!--yy--></ccc:ddd></bbb></>); ((window , <><x><y/></x></>) for (__count__ in <><x><y/></x></>))) {var constructor;continue ; }");
tryItOut("let (prototype) { if((<x/> >>> ))  else  if ((new (true)(4., window))) {} }");
tryItOut("with({}) with({}) \ttry { const __proto__, prototype; } finally { gc() } ");
tryItOut("M:if((new (1 for (x in []))())) if(<y><z/></y>) {return; } else {let prototype =  '' ; }");
tryItOut("export *;\n{(<x/>); }\n");
tryItOut("export __count__\n");
tryItOut("with({}) yield window;");
tryItOut("let(__iterator__ = new gc(\t<><x><y/></x></> *= <><x><y/></x></>, (#3={a:#3#} >>> <x/>)), __noSuchMethod__ = -0) { __parent__ = prototype;");
tryItOut("with(__count__ += <y><z/></y>){/*infloop*/for((function ([y]) { })() .. 0.1.valueOf(\"number\"); new Iterator(.2, this); (this.zzz.zzz).hasOwnProperty(\"function::prop\"\t)) {export __iterator__;<><x><y/></x></>; } }");
tryItOut("for(let y in [5,6,7,8]) return prop.((switch(*::*) { default: break;  } =  '' ));");
tryItOut("switch(((({}).__lookupGetter__).call)) { default: while(((prop.constructor = true)) && 0){(false); }case prototype = __parent__.(__count__ = ({})):  }");
tryItOut("/*for..in*/for(({ prototype: __proto__, constructor: __parent__ }) in ((\n<x><y/></x>\n)(-0.yoyo( /x/g )))){export __iterator__; }");
tryItOut("if( /* Comment */1e81) gc() else  if ( '' .propertyIsEnumerable(\"constructor\") ? <x><y/></x>(window) : Object(<><x><y/></x></>, arguments)) throw __count__; else {yield;constructor = <><x><y/></x></>; }");
tryItOut("while((((p={}, (p.z = [z1,,].__lookupSetter__(\"constructor\"))()))) && 0)/*for..in*/L:for(var prototype = .2.propertyIsEnumerable(\"__noSuchMethod__\") in false) let __iterator__ = <x><y/></x>, __parent__ = 1e+81;");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = (yield __iterator__).@*.__lookupGetter__(\"prototype\") in this.__defineGetter__(\"__proto__\", /a/gi)) continue ;");
tryItOut("with({__proto__: ((uneval([,]))) if (window)}){return 0x99;prop = null; }\ntry { export *; } catch(__count__ if (function(){(<y><z/></y>);})()) { const function::constructor; } catch(prototype if eval(\"this\", __noSuchMethod__)) { yield this; } finally {  } ");
tryItOut("gc()");
tryItOut("if(constructor+= /x/g  ? null : window) this; else  if (( = __parent__)) gc()export *; else if(1e-81) { if (<x><y/></x>) prop else export *;}");
tryItOut("export *\n(0.1);");
tryItOut("{/*for..in*/for(let prop in ((gc)( /x/ )))#3={a:#3#};return; }");
tryItOut("\twith({prop: __count__ = @foo}){ '' {}\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in prototype .@  /x/ ) {/*for..in*/for(var [constructor, prop] = <y><z/></y> in null) { } { export *; }  }");
tryItOut("/*for..in*/for(const constructor in ((({}).__lookupGetter__)(\nyield 0.1.__lookupSetter__(\"__noSuchMethod__\"))))let constructor, __noSuchMethod__;");
tryItOut("with((constructor = )){/*infloop*/for(__iterator__; (@foo)(__iterator__) || true\n; (__count__.(yield <x><y/></x>\n))) __count__ = this, __parent__ = false;yield prop; }");
tryItOut("return;");
tryItOut("do {gc()let (constructor) { {} } } while(((prototype)(<x><y/></x>)) && 0);");
tryItOut("let (prototype = __proto__, __noSuchMethod__ = ) { __parent__ = <x><y/></x>, __noSuchMethod__ = [1,,]; }");
tryItOut("let prop, __iterator__ = this;");
tryItOut("/*for..in*/([(__proto__ = this) for each (get in 1.2e3)])");
tryItOut("{; }");
tryItOut("return;");
tryItOut("*::*");
tryItOut("/*infloop*/for(const __count__ = (({ __iterator__: __noSuchMethod__ }) @ this @ false) = eval(\"new Function\", <><x><y/></x></>); eval(\"((window) = (({ set prop(__proto__)constructor })))\", ((new (window)(prop)) > prototype)) ? <y><z/></y> & new Date(prop = <><x><y/></x></>, window).propertyIsEnumerable(\"__noSuchMethod__\") : let (__count__ = null, throw <x/>;) []; <><xxx>{prop}</xxx></>) {return;let prop; }");
tryItOut("/*for..in*/M:for(const this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }) in (((prop.(constructor))())(__count__.__parent__ = *))){if(__parent__) { if (__iterator__) {({}).__lookupGetter__let constructor, __proto__ = <x><y/></x>; }} else return; }");
tryItOut("prop = constructor;");
tryItOut("<y><z/></y> = constructor;");
tryItOut("throw __iterator__;");
tryItOut("while(( /x/ ) && 0)export *;");
tryItOut("if(<><x><y/></x></>) {(<><x><y/></x></>);__iterator__ }");
tryItOut("if(this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) {export *;break ; } else  if ( /* Comment */*::* || <y><z/></y>) var constructor = window; else /*infloop*/for\t(0x99; __noSuchMethod__; prototype) yield;");
tryItOut("const prototype = , constructor = #1#; const prop;");
tryItOut("thiswith(prop.__count__ = false == 0x99)const __proto__ = false, __count__ =  /x/ ;");
tryItOut("L:if((void  /x/ ))  else  if (<><x><y/></x></>) export *;");
tryItOut("if( '' ) {gc()return 0/0; } else  if (<x><y/></x>) ");
tryItOut("<x/>/*\n*/;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in this) __parent__, __parent__;");
tryItOut("if(new Math.pow(yield)++) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in window) {var __noSuchMethod__, __iterator__;(false); }\f else  if (prop.__noSuchMethod__|= \"\" ) {const __noSuchMethod__ = <><x><y/></x></>;throw (//h\n__noSuchMethod__.(null.propertyIsEnumerable(\"__parent__\"))); }");
tryItOut("let prototype = false, constructor\n; const __count__;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __parent__] = -3/0.unwatch(\"prototype\") in window.*) {{} }");
tryItOut("/*for..in*/for(__parent__ in <><x><\ty/></x></>) {return;yield; }");
tryItOut("/*for..in*/for(let [__count__, prototype] = new function () { return (gc).call(<x><y/></x>, false, false) } (function (prop, __parent__) { yield <x/> } , <y><z/></y>.yoyo(<x><y/></x>)) in 'fafafa'.replace(/a/g, function(y) { yield y; var __noSuchMethod__ = constructor, prop = [z1];; yield y; })) {/*infloop*/for(__noSuchMethod__; (function (__parent__, constructor) { const __count__ = <y><z/></y>;\f } ); <x/>) this; }");
tryItOut("with(prototype: *::*.valueOf(\"number\")})(/{yield; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = this.__defineGetter__(\"__proto__\", function  __parent__ (__count__)new (1.2e3.watch(\"prototype\", 'haha'.split))(constructor.constructor\t)) in (new *::*(((1.2e3)),  /x/g ))[<><x><y/></x></> ? <x/> : null]) {M:with(undefined)return;return null; const constructor; }");
tryItOut("if((uneval((- \"\" ).watch(\"__count__\", Math.pow)))) {/*for..in*/M:for(let [__count__, prop] = <><x><y/></x></> in <><x><y/></x></>) {[[1]]; }/*for..in*/for(var __iterator__ in <x><y/></x>) throw [z1]; } else  if (<x/>) return undefined\n else if(( /* Comment */__iterator__)) { if (#1=@foo) ;} else function  __iterator__ () { gc() } ");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <><x><y/></x></>; *; -1) {throw <y><z/></y>; }");
tryItOut("if([{}] /= ({__count__ setter: gc, __noSuchMethod__: *::* }) <= *::*.throw(__iterator__)) /*infloop*/for(prototype; 3.141592653589793; *) {<><x><y/></x></>;export __noSuchMethod__; } else  if (#0=[(prop.(#1=[#1#]))]) /*infloop*/do {do gc() while((__parent__) && 0); } while(1e81); else yield;");
tryItOut("__parent__ = __parent__;");
tryItOut("if((this.prototype)) (1 for (x in [])) else  if ((__proto__ = @foo)) Math.sin else var __proto__;");
tryItOut("switch(<y><z/></y>) { default: let (constructor) { {;export constructor; } } }");
tryItOut("/*for..in*/L:for(const constructor = this.zzz.zzz in 1.3) {yield; }");
tryItOut("export *;");
tryItOut("constructor; const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__.constructor in (throw ({ prototype: prototype }) = *::*.watch(\"__parent__\", [1,2,3,4].slice))) if((uneval(<><x><y/></x></> <= [,]))) { if (((yield <>{}</>))) {return <x/>; } else {export *; }}");
tryItOut("@foo = prop;");
tryItOut("/*infloop*/for([, __proto__, , , false] = <bbb xmlns=\"false .@ undefined\">yyy</bbb\f> && (prop.__parent__); __noSuchMethod__ = this.__defineGetter__(\"__iterator__\", eval); [prototype.prop = \n<x><y/></x>].some([1,2,3,4].map)) /*for..in*/L:for(var prop in 1.3) return;");
tryItOut("/*for..in*/for(const [__proto__, __noSuchMethod__] = [z1] in (<x><y/></x> * undefined)) let __parent__, __count__ = 5.0000000000000000000000;");
tryItOut("do export *; while(( /x/ ) && 0);");
tryItOut("gc()\nif( \"\" ) { if (prop) {{}var __proto__, prototype =  \"\" \t; } else let ;}\n");
tryItOut("yield (let (__iterator__) @foo);");
tryItOut("let(__count__ = constructor, constructor) { __count__ = prototype;");
tryItOut("if((function  __noSuchMethod__ (__count__, @foo;) { yield; } ).call(<x/>, __proto__)) { if (__iterator__ = [4.].filter(gc)) (new Function(\"return;\")) else }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <employee id=\"1\"><name>Joe</name><age>20</age></employee> in __parent__ = \t@foo) ");
tryItOut("throw __noSuchMethod__;");
tryItOut("try { break L; } catch(__count__ if (function(){yield;})()) { __iterator__ } catch(prototype if 3.141592653589793.*) { prototype = <><x><y/></x></>; } catch(__proto__) { var __count__ = @foo, __count__ = window; } ");
tryItOut("do {function(q) { return q; }yield  /x/g ; } while(((constructor = false)) && 0);");
tryItOut("/*infloop*/while(false ? *::* : *)let prop = true;");
tryItOut("gc const __proto__;");
tryItOut("break L;");
tryItOut("if(<><x><y/></x></>) {return;const __noSuchMethod__; } else  if (window) {{}yield; }");
tryItOut(" { {yield; } } ");
tryItOut("do {(window);let __parent__ = window; } while(((( '' ).call(3/0, undefined) <= window)) && 0);");
tryItOut("M:do {gc()/*for..in*/for(__proto__ = <><x><y/></x></> in  /x/g ) {return;var prop = <x><y/></x>; } } while(([__parent__, , __parent__, __proto__, ] = (null.prop)) && 0);");
tryItOut("if(this - 1e4) gc() else {( \"\" ); }");
tryItOut("if(new 0x99((new (this.zzz.zzz)(this,  '' )))) { if ([, , , __parent__] = new function(y) { yield y; L: {}; yield y; }((yield window))) {if((<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"))) return; else  if (<><x><y/></x></>.hasOwnProperty(\"prototype\")) {continue M; } else {{}{} } } else for(let y in [5,6,7,8]) return;}");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/for(var __count__ = ((gc)(1e+81, <x/>)) in (prop = null)) /*infloop*/for(const __parent__; (arguments if (<><x><y/></x></>)).propertyIsEnumerable(\"__noSuchMethod__\"); __iterator__, __proto__) {export prop;(*); }");
tryItOut("export *;\nif(this.__defineGetter__(\"set\", Function)) export __parent__; else  if (window.valueOf(\"number\")) {eval }\n");
tryItOut("let prop =  \"\" , __proto__; const __parent__;");
tryItOut("L:if(__noSuchMethod__.constructor getter= function(y) { yield y; const prototype, __iterator__ = [z1,,];; yield y; }) /*infloop*/M:do {continue M;M:switch(<><x><y/></x></>) { case 2:  } } while((new Boolean()));");
tryItOut("let prop = <><x><y/></x></>, prop\n");
tryItOut("{} const function::__parent__;");
tryItOut("let (prop) { ; }");
tryItOut("(({ __noSuchMethod__: []), prop: [, ] }') = eval(\"/*for..in*/for(<><x><y/></x></> in <><x>\\t<y/></x></>) {(new Function).callexport *; }\", __proto__.__parent__ = null), prototype");
tryItOut("let(__iterator__, function::prototype =  /x/  << ({a2:z2})) { prop = __count__;");
tryItOut("\nvar __count__ = __count__, __parent__;\n");
tryItOut("let(~true = [11,12,13,14].some, __proto__) ((function(){return <x><y/></x> ? <><x><y/></x></> : null;})());");
tryItOut("M:do export *; while(( '' ) && 0);");
tryItOut("if((constructor !== <><x><y/></x></>).constructor) { if (false +=  /x/g ) return <><x><y/></x></>; else {null;const __parent__ = [1,,]; }}");
tryItOut("");
tryItOut("let (__noSuchMethod__ = *::*) { /*infloop*/do {//h\n{} } while( /x/ ); }");
tryItOut("return\n");
tryItOut("let (__iterator__ = window.hasOwnProperty(\"__iterator__\"), [, ({ __iterator__: __noSuchMethod__, __iterator__: function::__iterator__ })]) { var \tconstructor, __noSuchMethod__; }");
tryItOut("if(<><x><y/></x></>.prop) { if (new (({}).__lookupGetter__)(([<x><y/></x> for each (__iterator__ in <><\fx><y/></x></>)]))) {/*for..in*/for(var [__count__, prototype] = [1] in function::__parent__) {let prototype = true, prop; } } else var __parent__, __iterator__;}");
tryItOut("continue ;");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in <><x><y/></x></>) {this; }");
tryItOut("let (__count__) { /*for..in*/for(let __parent__ = (<><x><y/></x></>.watch(\"__count__\", *)) in <><x><y/></x></>) {; } }");
tryItOut("/*infloop*/while([,]){export __iterator__; }");
tryItOut("L:if(__noSuchMethod__-=<x><y/></x>) { if ((p={}, (p.z = <x><y/></x>)())) gc() else const __proto__;}");
tryItOut("var prop, prototype;gc()");
tryItOut("with(const prototype = *::*;){return; /x/g ); }");
tryItOut("/*infloop*/L:for(var __proto__; <x/>; window) { '' ; }");
tryItOut("if(<x><y/></x>) {export *; } else  if (\tfunction::__proto__) {} else {/a/gi }");
tryItOut("{var __count__ = *, __noSuchMethod__;\tif(*) gc() }");
tryItOut("var constructor = #1=[#1#], prototype = *;\nexport *;\nreturn <x><y/></x>;");
tryItOut("yield \nexport getter;");
tryItOut("if(({prototype getter: , \fconstructor setter: Math.sin })) [, , ]");
tryItOut("/*infloop*/for(var prototype; yield __proto__ = 1e4.__lookupGetter__(\"__noSuchMethod__\"); (uneval((yield <y><z/></y>.isPrototypeOf(*::*))))) {__noSuchMethod__ }");
tryItOut("/*for..in*/for(__count__ = (__proto__.__count__ = <x><y/></x>.isPrototypeOf(4. % this.zzz.zzz)) in (//h\n<x><y/></x>.(true))) {export function::prototype; }");
tryItOut("/*for..in*/for(var __proto__ = __noSuchMethod__.(__parent__) in null.prototype = prototype) (new Function(\"return <x/>;\"))");
tryItOut("/*infloop*/for(var __parent__ = *::*; new (function(q) { return q; })(*, <x><y/></x>); (eval(\"export *;\", window)).'__defineSetter__(\"constructor\", [1,2,3,4].map)) {/*for..in*/for(__count__ in ((\t'haha'.split)(__noSuchMethod__ = __parent__)))/*for..in*/for(const __count__ in ((-0)([1,,]))){{}yield; } }");
tryItOut("if(prototype) return (-0); else  if (*::*) {} else {; }");
tryItOut("L:if(false)  else  if (window) {var __proto__;while(((--window.hasOwnProperty(\"__noSuchMethod__\"))) && 0){yield;throw <><x><y/></x></>; } } else (window);");
tryItOut("let (prop) { continue M; const __proto__; }\nthis;\n");
tryItOut("/*infloop*/for(const ({ __proto__: [] }) = ([(({<x/>: *::*})) for each (prop in undefined) for (function::__iterator__ in 1.3)]); prop.__lookupSetter__(\f\"__iterator__\"); [11,12,13,14].map) throw @foo;");
tryItOut("/*infloop*/do {{}with(undefined)yield ({a1:1}); } while(yield.__defineGetter__(\"x::__count__\", [1,2,3,4].slice));");
tryItOut("/*for..in*/for(let [({ __count__: ({ function::__noSuchMethod__: ({ __iterator__: [prop, [, , , __noSuchMethod__, ]], __count__: ({ __parent__: __proto__, __noSuchMethod__: prototype }) }), __noSuchMethod__: [[], ({ prototype: ({ prototype: __iterator__, prototype: __noSuchMethod__ }), __parent__: ({ prototype: prototype, prototype: __iterator__ }) }), ({ __parent__: __count__ }), [], ] }) }), prop] = <x/>++ in this) {try { prototype = constructor; } catch(__parent__ if [11,12,13,14].filter) { return (({__noSuchMethod__: (({__parent__ setter: (undefined).watch, __noSuchMethod__ getter: new Function })),  get __proto__  { (new Function(\"return <x><y/></x>;\")) }  (constructor) { return *::* }  })\t); } catch(__count__ if (function(){return;})()) { prototype = __count__; } catch(__parent__ if (function(){with({}) 0['__iterator__'] = prop;})()) { let(__parent__ = <><{__proto__}>yyy</{__proto__}></>) { for(let y in []); } catch(__parent__ if (__proto__.__lookupGetter__(\"__proto__\"))) { return; } catch(prop if (function(){__parent__ = prop;})()) { yield ((p={}, (p.z = ({ constructor: __noSuchMethod__ }) = new Exception())())); } catch(__iterator__ if (<><bbb xmlns:ccc=\"[]\"><ccc:eee></ccc:eee></bbb></> <<= (new (({}).__lookupGetter__)([[]])))) { return (yield <><x><y/></x></>).__defineGetter__(\"__count__\", (new Function(\"{}\"))); } catch(__iterator__ if (function(){return;})()) { return (__proto__ = __noSuchMethod__); } catch(__noSuchMethod__) { return; } finally { /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <><x><y/></x></>) function (prototype) { yield * }  } if((<x><y/></x>.throw(false))) {return;{} } }");
tryItOut("switch(function ([y]) { }) { default: if(new <x><y/></x>(#1#, true)) {; } else  if (\n1.3) throw __parent__; else gc()case 6: break; case 4: L:switch(this.__defineSetter__(\"constructor\", eval)) { default:  }export __proto__;case this.__defineSetter__(\"__iterator__\", <><x><y/></x></>): case 6: break;  }");
tryItOut("{L:switch([, ] = <y><z/></y>.isPrototypeOf(@foo)) { case 2: break; default: M:if([]) __iterator__, __iterator__ = 4.;; }if((__iterator__ = prop)) { if (({ get @foo __parent__ (constructor, __noSuchMethod__)({a2:z2}), __iterator__\f: this })) gc() else yield *::*;} }");
tryItOut("\rM:with(true in __noSuchMethod__.*.__lookupGetter__(\"__count__\"))if(null.__lookupGetter__(\"__parent__\")) { if (__iterator__) {<y><z/></y>; }} else (window).call");
tryItOut("continue M\n");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>; false; [,]) throw <><x><y/></x></>;");
tryItOut("throw *\n");
tryItOut("if(true.@foo) {/*infloop*/M:do {return [,]; } while(@foo); }");
tryItOut("let __parent__ = #1=[#1#]\n/*infloop*/for(const __proto__ = <x/>; prototype;  /x/g ) gc()");
tryItOut("/*infloop*/while((<><x><y/></x></>)[this]){if(eval(\"Function\", <x><y/></\fx>)) { if (eval(<><x><y/></x></>)) ;} else {throw <x><y/></x>; } }");
tryItOut("if(('fafafa'.replace(/a/g, (<x><y/></x>).__defineSetter__))) {export __iterator__; } else  if (<x/>) {var prototype = <><x><y/></x></>; const __iterator__; }");
tryItOut("/*infloop*/while(window)var __iterator__ = __noSuchMethod__, constructor = [];");
tryItOut("/*for..in*/for(const [prototype, __parent__] = #3={a:#3#}.__lookupSetter__(\"prop\") in *::*) {yield window;export *; }");
tryItOut("with( \"\" )export __count__;");
tryItOut("/*for..in*/for(const constructor(!*) in __parent__ = function(id) { return id }.__defineGetter__(\"__parent__\", <x><y/></x>)) {/*for..in*/L:for(let constructor = (({ __parent__: __proto__ }) = (<x><y/></x>.__defineSetter__(\"prototype\", new Function)) -= (-1.watch(\"constructor\", (true)\t.watch))) in  /x/ ) {return;while((<x><y/></x\f>) && 0){ /x/ ; } }yield; const prop; }");
tryItOut("with(typeof ({})){continue ;<x><y/></x>; }");
tryItOut("while((false) && 0)yield;");
tryItOut("/*infloop*/while(__count__ = [[1]]){/*infloop*/M:for(const __proto__ = [[]]; ; 3/0) const prop, __parent__;1e-81; }");
tryItOut("switch({}) { default: with({constructor: undefined @ <><x><y/></x></>}){if(__parent__) { if (<x><y/></x>) {yield; }} else gc() }break; //h\n({ prop: ({ __iterator__: constructor, constructor: __proto__ }) }) = [3/0];case 6: with(__noSuchMethod__%=@foo)return;break; case prototype = constructor: break;  }");
tryItOut("<x><y/></x>\n");
