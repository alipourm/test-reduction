tryItOut("switch( /x/g .propertyIsEnumerable(\"__parent__\")) { case this.__defineGetter__(\"__iterator__\", (1 for (x in []))): break; default:  }");
tryItOut("if('haha'.split((-1 /= <><x><y/></x></>), false)) { if ([,  { yield this -= window } , ] = (({ set __parent__() { yield <y><z/></y> } ,  get __parent__()function::prop }))) {yield this; } else /*for..in*/for(const __parent__ in *::*) {return; }}");
tryItOut("if(null) {{} }\n");
tryItOut("/*infloop*/for(__count__; prop; __noSuchMethod__) export *;");
tryItOut("/*for..in*/for(var [function::constructor, __parent__] = __iterator__ if (__iterator__, __iterator__) in new null(1.2e3).__noSuchMethod__) constructor");
tryItOut("gc()continue ;");
tryItOut("__count__ = setter;");
tryItOut("<><x><y/></x></>;");
tryItOut("if(({a1:1})) return; else {break ; }");
tryItOut("if() {switch((-3/0.yoyo(<x><y/></x>)) -= (({ __parent__: prop, prop: __proto__ }) = yield #1=[#1#])) { case ({}) != <><x><y/></x></>: break; case <x><y/></x>.(*): default: Math.sinbreak;  }Array(), -__count__|=<y><z/></y> } else {(3);break ;if((this == 1e4)) export prop; else  if ([false for (__iterator__ in 0/0)]) export *; }");
tryItOut("(<x><y/></x>)\n(this);");
tryItOut("if(+prop-=(4.--).__lookupSetter__(\"__count__\")) @foo; else {\n/*infloop*/L:for(let prop = true; window; *) \fyield <x><y/></x>; }");
tryItOut("/*infloop*/");
tryItOut("if(prop) { if ([1]) {let prop; }} else gc()");
tryItOut("while((eval(\"[1,2,3,4].map\",  /x/g )) && 0)with({constructor: __count__})__parent__ = __parent__;");
tryItOut("/*infloop*/for(this.__parent__ = ({ __noSuchMethod__: __iterator__ }) = this.zzz.zzz << (*::*)(); prop = 3.141592653589793\n; <bbb xmlns=\"false\"><ccc:ddd></ccc:ddd></bbb>.(<x/>) << window) {/*for..in*/for(var [prop, __proto__] = (undefined @ __count__) in this) {<><x><y/></x></>; }L:with({__proto__: #2=window})prototype = <y><z/></y>, __noSuchMethod__ = <x/>; }");
tryItOut("{L: {__parent__ = null, __iterator__;return arguments; } }");
tryItOut("do continue ; while(( '' ) && 0);");
tryItOut("switch( { /*for..in*/for(const __proto__ in ((gc)((@foo , <><x><y/></x></>) && ;))){yield; } } ) { case ((function (__parent__) { return new RangeError().__defineSetter__(\"__parent__\", function(q) { return q; }) } )(true)): if( /x/ ) gc() else {<x><y/></x>;return [,]; }case ((1 for (x in []))).call(<x/>, window): if(([,].__defineGetter__(\"constructor\", (3.141592653589793).watch))) { if ( /* Comment */*) {yield []; }} else {gc()export __count__; }yield <x><y/></x>;\nlet constructor, prototype = window;\ncase 2: while((function::__count__) && 0){}break; default: L:if(((<><><y<employee id=\"1\"><name>Joe</name><age>20</age></employee> /> ({ __count__: ({ constructor: prop }) })/x></>.propertyIsEnumerable(\"prototype\")).isPrototypeOf([__proto__]))) {gc() } else prop, __parent__ = *::*;break; case 0: /*infloop*/while(<x><y/></x>){yield <x/>; }break;  }");
tryItOut("/*for..in*/for(var constructor = (({}).hasOwnProperty)( /x/ ).isPrototypeOf(__iterator__ = this) in [,,z1] << @foo)  goto ");
tryItOut("with({}) { with({}) { for(let y in [5,6,7,8]) with({}) { with({}) break M; }  }  } ");
tryItOut("M:do return; while((*) && 0);");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ constructor: __count__ }//h\n), prop: ({ __proto__: prop, prototype: __count__ }) }) =  \"\" ; (<y><z/></y>)(true); (Function())) yield;");
tryItOut("/*for..in*/for(constructor in 033) gc()");
tryItOut("while((@foo) && 0){export function::__parent__;{} }");
tryItOut("{{} }");
tryItOut("constructor = null, __parent__;\nMath.pow\n{if(__proto__) {export __noSuchMethod__; } else  if (*) __count__;window }");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = (prop.(<x><y/></x>)) in []) {}");
tryItOut("/*infloop*/for(const __proto__; new Function().isPrototypeOf(([3/0.yoyo(3.141592653589793)].sort(function(y) { yield y; (3).__defineSetter__; yield y; }))); ) /*for..in*/for(__iterator__(1e+81) in ((<x><y/></x>)(delete))){throw *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in window) {yield  /x/ ;continue L; }");
tryItOut("with({(undefined)(*::*): [15,16,17,18].sort(Function, this) <= <><><x><y/></x></></>})yield;");
tryItOut("const constructor = prototype, prop = @foo;/*infloop*/for(let ({ __parent__: __proto__, __noSuchMethod__: __count__ }) = prop & 1e81; <><x><y/></x></>.isPrototypeOf(true); * for each (prop in window)) {break ;return; }");
tryItOut("return;");
tryItOut("export constructor;");
tryItOut("let (({ prototype: ((<x><y/></x>.watch(\"prototype\", (1 for (x in [])))).__defineSetter__(\"constructor\", gc).__defineGetter__(\"__count__\", ({}).__lookupGetter__))(Math.pow = -0.__defineGetter__(\"__iterator__\", <><x><y/></x></>)), __iterator__: prop }) = (yield undefined.isPrototypeOf(window))) { M:if( /x/g ) export *; }");
tryItOut("let(__iterator__, __iterator__ = __parent__ = ({ constructor: __count__ }) = yield  /x/g ) { throw StopIteration;");
tryItOut(" const constructor;\nexport prop;\nwhile((*::*) && 0){export *; }");
tryItOut("if(Function( /* Comment */__proto__).valueOf(\"number\")) /*infloop*/while(*){yield; }");
tryItOut("if((arguments ?  /x/g  : <x><y/></x>)) {__noSuchMethod__, function::__noSuchMethod__ = <x><y/></x>;if(([z1,,] >>> this)) { if ((window([1,,]))) (undefined); else {continue ; }} } else  if (prop.__parent__-=(this.zzz.zzz).propertyIsEnumerable(\"prop\")) {__proto__;(true); } else /*infloop*/do {} while((new ((__proto__ = [[1]]))(* << __parent__)));");
tryItOut("/*infloop*/do {;yield; } while(<bbb xmlns:\tccc=\" /x/g \"><ccc:eee></ccc:eee></bbb> = this);");
tryItOut("/*for..in*/L:for(let __parent__.prototype in ((function  __noSuchMethod__ ( '' ) { return ({a1:1}).__lookupSetter__(\"__iterator__\") } )((__proto__.__noSuchMethod__ = .__defineGetter__(\"prop\", function (prototype, __proto__) '' )))))throw (-1);");
tryItOut("if(~[constructor = <x><y/></x>]) {/*infloop*/do {break M;export __proto__; } while((yield <x/>)); } else  if ( \"\" ) {({ __count__: __count__ }){const __parent__; } } else {function(q) { return q; }gc() }");
tryItOut("L: const prop;");
tryItOut("with(__parent__ = <x><y/></x>)const prototype = constructor, __count__;");
tryItOut("if() { if ((Math.sin)(//h\n<y><z/></y>, <x><y/></x>)) ; else {prop; }}");
tryItOut("{/*infloop*/for(*::*; <><x><y/></x></>; window) {yield; } }");
tryItOut("");
tryItOut("if(yield <><x><y/></x></>) \r5.0000000000000000000000; else {gc() }");
tryItOut("with(([15,16,17,18].filter(gc, new (Array(*::*))((eval(\"<><x><y/></x></>\", prototype))))))with({}) { __iterator__; }  const __count__;");
tryItOut("L:if(*::* / 5.0000000000000000000000(<><x><y/></x></>.hasOwnProperty(\"prototype\"), __count__)) {(this); } else export __count__;");
tryItOut("export *;");
tryItOut("M:if(1e+81 @ 0x99) { if (([1,2,3,4].map).call(<y><z/></y>, constructor)) {__count__, __parent__ = @foo;return; } else {export __noSuchMethod__;var __parent__; }}");
tryItOut("/*for..in*/for(const (//h\n__noSuchMethod__) in null\n) {export __parent__; }");
tryItOut("with({}) with({}) __count__ = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in -1 & <><x><y/></x></>) for(let y in []);");
tryItOut("L: return constructor;");
tryItOut("throw StopIteration;");
tryItOut("with(<><x><y/></x></>){export *;const __parent__; } const __noSuchMethod__;");
tryItOut("/*infloop*/while(4.){if([z1,,]) <x/>; else  if (#1=[#1#] ::  \"\" ) {throw 033; '' ; } else {return;yield; }L: {export *;/*for..in*/L:for(var __noSuchMethod__ =  /x/  in window) {} } }");
tryItOut("with(([, __count__] = (new ([z1])(<x><y/></x>, <x/>))))continue ;");
tryItOut("do (new Function(\";\")) while((function::__parent__) && 0);");
tryItOut("var 3.141592653589793 = ({a1:1});");
tryItOut("/*infloop*/for(({a2:z2}); @foo; __noSuchMethod__) throw <x/>;");
tryItOut("if(\n /x/g ) {export *;(*::*); }");
tryItOut("throw StopIteration;");
tryItOut("{}\nyield;");
tryItOut("__count__ =  /x/g \n");
tryItOut("if((__noSuchMethod__ = window).yoyo(this.zzz.zzz)) {L: {return <y><z/></y>; } }");
tryItOut("if((new Exception()\n)) { if (()) {export *;M:with((this ? *::* : 0.1)){if(*::*) { if (<><x><y/></x></>) {export __parent__; } else {{} }} } } else {for(let y in []); }}");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = ({prototype: __proto__ setter: (gc).call\n}) in 0x99) {(({__proto__: <x/> }));/*for..in*/L:for(const __proto__ in <><x><y/></x></>) {export *; } }");
tryItOut("return @foo / 1.3/*\n*/;");
tryItOut("L:with({__noSuchMethod__: ([<y><z/></y>].map(<x/>))})var __count__, __noSuchMethod__ = 1.3;");
tryItOut("/*infloop*/for(const __proto__;  /x/ ;  /x/ ) {gc() }");
tryItOut("while((//h\nnew ([1,2,3,4].slice)()(new [[]](1.2e3))) && 0)const prototype;");
tryItOut("export *\nvar __noSuchMethod__ =  /x/g , __iterator__;");
tryItOut("{/*infloop*/for(const constructor; ({ __iterator__: prop }) = []; ({prop: RegExp(<><x><y/></x></>) })) {-0;let __iterator__, __noSuchMethod__; } }");
tryItOut("/*for..in*/for(const __count__.__iterator__ in ((({}).__lookupGetter__)((@foo %= [[]])))){<x/>;throw window; }\nM:if(window ||  /x/  != __iterator__.__parent__ = <x/>) <><x><y/></x></> else  if (((function(q) { return q; })(<><x><y/></x></>)).__lookupSetter__(\"__count__\")) let (__parent__, __noSuchMethod__) { return arguments; } else Function");
tryItOut("__count__, prototype = *::*;");
tryItOut("(({__parent__: <x><y/></x> >> false}));");
tryItOut("/*infloop*/for(__noSuchMethod__; this; <x/>) {return <x><y/></x>; }\ndo {const prototype;throw <x><y/></x>; } while((new RangeError(@foo, __parent__)) && 0); const __count__;");
tryItOut("if([11,12,13,14].some) { if (<><x><y/></x></>.__lookupSetter__(\"__parent__\") @ 'fafafa'.replace(/a/g, Math.sin)) gc() else {prototype = __parent__; }}");
tryItOut("if(constructor) {\f if (function::__proto__ = prototype = window.__parent__) {with({__count__:  \"\" })yield;(new Function(\"__iterator__;\")) } else {var prototype =  \"\" ;; }}");
tryItOut("L:switch(true) { default: break; break; break; case case 8: break; export __proto__;break; default: return;yield;break; case undefined: break; case window: {}yield  /x/ ;break; : gc()break;  }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = (({__count__: *.prototype = @foo })) in @foo) {export *; }!");
tryItOut("/*for..in*/for(const __count__ in <y><z/></y>) {/*infloop*/for(1.2e3; false; <>><y/></x>__parent__ </>) {return  '' ;; }if(!) gc() else  if ((@foo)) {return 0x99;yield; } }");
tryItOut("if(__noSuchMethod__-=<><x><y/></x></>) {} else {prototype; }");
tryItOut("L\r: eval(\"yield <x><y/>\\t</x>;\", 1.2e3++)");
tryItOut("/*infloop*/for(let [({ __parent__: __parent__, __parent__: constructor }), __count__, ({ function::__count__: __iterator__.prototype, __noSuchMethod__: [, ({ prototype: ({ prop: ({ __count__: ({ setter: prop, __count__: __noSuchMethod__ }), prototype: ({ prop: __iterator__, __iterator__: __parent__ }) }), __proto__: ({ __count__: [] }) }), __iterator__: ({ prop: __proto__ }) }), __noSuchMethod__, ] }), ] = 'fafafa'.replace(/a/g, ([1,2,3,4].slice).call); __count__ = ((yield [,])); (new (1 for (x in []))(__iterator__)).unwatch(\"__noSuchMethod__\")) {if(new [1](function::prop)) { if ([15,16,17,18].filter(false, 1e+81)) {}} else throw [,];/*for..in*/L:for(const __proto__ in null) /*infloop*/do ; while(*::*); }");
tryItOut("with((-1))yield;");
tryItOut("let(__count__, prop) ((function(){gc()})());");
tryItOut("if(false) { if (this) gc() else {return null;; }}");
tryItOut("M:if((uneval(1e+81))) { if (Date((*::* *= false), <><x><y/></x></> % *::*).valueOf(\"number\")) var __iterator__, __count__;} else {gc()L:do ; while((<x/>) && 0); }");
tryItOut("/*for..in*/M:for(var __iterator__ =  /x/ .propertyIsEnumerable(\"__proto__\")['prototype'] in ((/a/gi)((function(y) { yield y; __noSuchMethod__, __iterator__; yield y; }).call(({__iterator__: (-0).__defineSetter__(\"__parent__\", (( /x/g ).__defineSetter__).apply), delete: undefined }), (new <x/>()))))){let (<><x><y/></x></> ? *::* : [z1,,].__iterator__ = true, prototype = false .@*:: <x/>) { /*infloop*/L:for(__proto__; v; (function ([y]) { })()) (prop); } }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("let (constructor = 'fafafa'.replace(/a/g, {}).propertyIsEnumerable(\"constructor\"), constructor) { if(<><x><y/><//*\n*/x></>.default: export *;case 6: gc()break; case undefined: let __proto__ = <x><y/></x>; = * |= #3={a:#3#}) { if (((function::prototype)+=[,])) {{}export constructor; } else yield __parent__;} }");
tryItOut("with({prop: null}){if([z1,,]) {__iterator__, prop; } else  if ([[1]]) return; else {let __iterator__;return <x/>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__(--__proto__.(this)) in ([-0])) {var function::__parent__ = <><x><y/\t></x></>;/*for..in*/L:for(const prop = <y><z/></y> in <x><y/></x>) {{}(-1); } }");
tryItOut("with(([true] / (eval(\"('fafafa'.replace(/a/g, 1e4))\", new (function (__count__) { (<x/>); } )()))))/*for..in*/for(const __count__ in ((({}).hasOwnProperty)(({ prototype: __noSuchMethod__ }) = (yield <><x><y/></x></>)))){return; }");
tryItOut("/*infloop*/for(const __count__; __noSuchMethod__.__count__; (eval(\"return <x><y/></x>;\", [[]].sort(function(y) { yield y; export constructor;; yield y; })))) {__noSuchMethod__; }");
tryItOut("/*for..in*/for([__proto__, __parent__] = (<x/>.prototype) in 4.) /*infloop*/while(<><x><y/></x></>){break L; }");
tryItOut("if(new __noSuchMethod__)  else 033;");
tryItOut("");
tryItOut("L: {export __proto__; }");
tryItOut("/*infloop*/for(__iterator__ = ((Function())).apply((<xxx>{prop}</xxx>.(([11,12,13,14].filter))(prototype - @foo)), this.__defineGetter__//h\n(\"__iterator__\", function (constructor)true).yoyo(( /x/g ))); #1(__noSuchMethod__.yoyo(<x/>)); delete (Math.sin)(@foo, <x/>) = new RegExp()) __noSuchMethod__\n\nwith({__iterator__: constructor.constructor = (<y><z/></y>.unwatch(\"prototype\"))}){var setter = <x><y/></x>; }\n");
tryItOut("/*infloop*/for(var [({ __count__: ({ constructor: [] }) }), ({ __parent__\t: [, ], __noSuchMethod__: ({ constructor: ({ __noSuchMethod__: ({ prop: [] }), prototype: \t({ __proto__: [({ __iterator__: __proto__, __iterator__: constructor }), [__noSuchMethod__, , __parent__, , ]], prop: ({ prototype: [] }) })\t }), constructor: ({ throw StopIteration;: ({ __proto__: constructor, constructor: [__proto__, , [__iterator__, , <x><y/></x>;, ]] }), prototype: __iterator__ }) }) }), ] = false.propertyIsEnumerable(\"__iterator__\"); new ( /x/g )().valueOf(\"number\"); <y><z/></y>) {throw (__iterator__ = <x/>); }");
tryItOut("/*infloop*/do try { yield this.__defineGetter__(\"__count__\", ({}).hasOwnProperty); } finally { throw StopIteration; }  while(__parent__ = new 1e+81(([(--[,])])));");
tryItOut("with({prop: new Date(window)}){return 1.3; }let (case #1=[typeof ({})]: continue M;default: var <x><y/></x> = *, __parent__;gc()) { {} }");
tryItOut("if(prototype = <x><y/></x>) {yield;{} } else {/*infloop*/for(__iterator__; [z1,,]; ({a1:1})) return;/*\n*/export *; }");
tryItOut("if(<y><z/></y> > prototype) { if (<x/>.prop = 1.2e3) gc()} else {yield;\t }");
tryItOut("/*for..in*/for(const prop in ((gc)(<><x><y/></x></> @ *))){*::*break L; }");
tryItOut("__count__ = prop;");
tryItOut("");
tryItOut("L:if([,,] /= 4.) yield *; else {return <x/>;( /x/ ); }");
tryItOut("/*for..in*/for(var 1.3 ^= null.propertyIsEnumerable(\"__proto__\") %  \"\" .__count__['__iterator__'] in \f<><{prop}></{prop}></>.__proto__ = ([-3/0 if (__noSuchMethod__)]((function::constructor = #3={a:#3#})))) while((__count__ = (function ([y]) { })()) && 0){let __count__\nprototype = function(id) { return id }; }");
tryItOut("/*for..in*/for(__iterator__(<x/>) in @foo.throw(<x/>)) yield;\nconst constructor, __count__ = *::*;\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this.prop in this.__defineGetter__(\"__noSuchMethod__\", (-0))) {__parent__;/*for..in*/for(const prototype([]) in <><x><y/></x></>) continue ;'haha'.split } }");
tryItOut("let constructor, __count__ = @foo;");
tryItOut("/*for..in*/for(__iterator__ = __proto__ in true) gc");
tryItOut("if(*) {}");
tryItOut("while((null.__defineSetter__(\"__proto__\", (new Function(\"export *;\")))) && 0){if(<x/>) {var __count__ = [];{} } else export __proto__;throw  '' ; }");
tryItOut("/*for..in*/L:for(var __iterator__ = this.__defineGetter__(\"__count__\", function (__parent__) { return window } ) in *::*) {__parent__ = <x><y/></x>\n }");
tryItOut("/*for..in*/for(const 5.0000000000000000000000 in (*::*.eval([z1]) & ([1] != undefined))) {/*for..in*/for(const [__count__, __noSuchMethod__] = ((function(y) { yield y; ; yield y; }).call).call(<x><y/></x> |= __parent__, ) in this) /*infloop*/while(<y><z/></y>){var __proto__ = <x><y/></x>, function::__proto__;return; } }");
tryItOut("if(@foo) {yield undefined;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (each) in <bbb xmlns=\"((__count__)|=new __parent__(window))\"> </bbb>) {M:if((let (__proto__, constructor = [[1]]) -0)) gc() else  if (#1=[#1#].yoyo(true)) export *; else {{}(__proto__); } }");
tryItOut("var __iterator__, __proto__ = null");
tryItOut("/*infloop*/L:for(var constructor; constructor; prop) let __proto__ = __iterator__;");
tryItOut("/*for..in*/for(const [\tconstructor, __noSuchMethod__] = [15,16,17,18].map((new Function(\"return;\")), let (__count__, __count__) ({a2:z2})) in new (function (__iterator__) { return <><x><y/></x></> } )(null)) {{} }");
tryItOut("M:if((default: case <><x><y/></x></> <<= <><x><y/></x></>: throw [[1]]; ?  : null)) {constructor = constructor;L:while(((__iterator__.(<><x><y/></x></>))) && 0) if (this) } else  if ([ /x/ ] |= [(prototype = false)]) {{/*infloop*/for(__proto__;  /x/ ; window) gc() }([,]);\t }");
tryItOut("/*infloop*/{} while(");
tryItOut("M:if(( /* Comment */.2)) { if ((__iterator__.prototype getter= ({}).__lookupGetter__)(((<><x><y/></x></>)[1e4]))) function  __count__ (each) { const function::prototype = *::*; } } else {return  /x/ ; }");
tryItOut("if( '' ['__proto__'] = new ([1,2,3,4].slice)(<><x><y/></x></>)) {var __parent__;export *; } else  if (__proto__.prop) {const __iterator__; }");
tryItOut("let (({ __iterator__: [, ] }) = 3.141592653589793 !== 5.0000000000000000000000.throw(({a2:z2})), __parent__ = __parent__ = this) { break ; }");
tryItOut("do {continue ;{; } } while(((<><x><y/></x></>.__iterator__ = [1,,])) && 0); const __iterator__;");
tryItOut("gc()");
tryItOut("L:if((({}).__lookupGetter__).apply.__proto__) {yield; } else  if ((__noSuchMethod__.prototype setter= Math.sin)) (new Function).apply else {throw <x><y/></x>;(1e4).__defineSetter__ }");
tryItOut("/*infloop*/while((prototype.unwatch(\"__iterator__\")) >= ((function (__parent__, __parent__)<x><y/></x>).call(1e+81, ))[<x/>])var __count__, prop = true;");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __noSuchMethod__ }) = (const __proto__, __noSuchMethod__); ((if(#3={a:#3#}) { if (1.3)  else continue ;})); constructor =  '' ) {const prototype = <x><y/></x>;throw <><x><y/></x></>; }\nwith({__iterator__: -3/0}){; }");
tryItOut("yield;");
tryItOut("/*infloop*/do ; while((({constructor: <y><z/></y> })));");
tryItOut("while((window) && 0)break M;");
tryItOut("; const prototype");
tryItOut("/*for..in*/for(let prototype = __proto__.__proto__.((this += <x><y/></x>)) in <bbb xmlns:ccc=\"++var __iterator__, __noSuchMethod__\"><ccc:eee></ccc:eee></bbb>) {if(<x><y/></x>[<><x><\fy/></x></>]) {let ; } else  if (<x/>) {yield;throw prototype; } }");
tryItOut("yield undefined;");
tryItOut("{export prototype; }");
tryItOut("let(__proto__ = (new ({}).hasOwnProperty())) ((function(){try { prototype = prototype; } catch(prototype if (function(){let(__parent__) ((function(){__parent__ = <x><y/></x>, prop = __iterator__;})());})()) { switch(<x><y/></x>) { case 2: prop = prop, prototype; } } catch(__proto__) { return; } finally { \tfor(let y in [5,6,7,8]) yield <y><z/></y>; } })());");
tryItOut("export __count__; const __parent__;");
tryItOut("M:if(this.__defineSetter__(\"null\", 'haha'.split).yoyo(({ prototype: [], __parent__: [] }) = ([15,16,17,18].sort(4., window)))) {; }");
tryItOut("M:switch\f(this) { case 6: /*infloop*/for(constructor = (-1).@*; yield window; new (((Math.pow).apply\f).call)()) var constructor = (-1), __proto__ = <><x><y/></x></>;break; default: /*for..in*/for(const [__count__, prop] = undefined in 1e-81) prop = -0, prop; }\n");
tryItOut("constructor, constructor = 033;");
tryItOut("/*for..in*/for(let constructor = !*::* in []) ");
tryItOut("let (__count__) { export *; } const prop;");
tryItOut("/*for..in*/for(var [function::prototype, prop] = [11,12,13,14].some in (true <= .2 .@ 'haha'.split)) export *;");
tryItOut("yield (delete __noSuchMethod__ == constructor = *::* ? <><x><y/></x></>.yoyo(<x/>) : (__count__ - this.__defineSetter__(\"__parent__\", window)));");
tryItOut("( /x/ );");
tryItOut("const __noSuchMethod__, __iterator__ = window");
tryItOut("let(prop = __parent__ =  '' ) { {}");
tryItOut("switch(this.unwatch(\"__count__\").unwatch(\"prototype\")) { case this: break; break; with({__proto__: __iterator__})throw true;default: return gc() >= ((p={}, (p.z = <><x><y/></x></>)()));break; throw (<xxx>{__iterator__}</xxx>.( /x/g ));break;  }");
tryItOut("return ({ constructor: __proto__ }) = <><x><y/></x></>.hasOwnProperty(\"__proto__\");");
tryItOut("/*for..in*/M:for(var [__proto__, __proto__] = (<><x><y/></x></>)(<x><y/></x>) =  /x/  ? *::* : <x/> in this) {/*infloop*/do function  __parent__ (__parent__, __proto__)<x/> while(*::*);@foo; }");
tryItOut("/*for..in*/L:for(const constructor.prototype in (((new Function(\"null;\")))(eval(\"((new Function(\\\"__iterator__\\\")))()\", (({__noSuchMethod__: <x><y/></x>, __parent__: [[]] }))).valueOf(\"number\"))))\r{if(([__noSuchMethod__.propertyIsEnumerable(\"__count__\") for each (__count__ in function(id) { return id }) if (1.2e3)])) { if ( '' .yoyo([1,,])++) var prototype = window;} else {__parent__, constructor =  \"\" ; }var prop, __iterator__ = *::*; }");
tryItOut("continue ;");
tryItOut("yield (<y><z/></y>.hasOwnProperty(\"__proto__\"));");
tryItOut("with(<><xxx>{__iterator__}</xxx></>)throw __noSuchMethod__ = /*\n*/<bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb>;");
tryItOut("throw StopIteration;");
tryItOut("const __parent__ = undefined, constructor\n/*infloop*/for([]; @foo; 0x99) {var prototype;yield; }");
tryItOut("/*infloop*/M:for(var ({ __parent__: [, , ({ __noSuchMethod__: [[], , prop, , ({ __noSuchMethod__: prototype, __proto__: __count__.__parent__ })] }), ] }) = 5.0000000000000000000000; new String((<x><y/></x>.(1.3)), @foo); <x><y/></x>.@*) {<><x><y/></x></>;yield <x><y/></x>; }");
tryItOut("/*for..in*/for(prototype in (((1 for (x in [])))((__count__ =  /x/ ).unwatch(\"__iterator__\") >= #0=({prototype: window}))))/*infloop*/do {var __count__, constructor = true; } while([1,,] &=  /x/g );");
tryItOut("{return; }");
tryItOut("/*for..in*/for(var prop in this) {prototype = @foo; }");
tryItOut("continue ");
tryItOut("let (__noSuchMethod__, __proto__ = function  prop (prototype, constructor) { return  /x/  } ) { with({constructor: (#3={a:#3#}.__count__)}){export __count__;const __iterator__, __count__ = window; } }");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {@foo; }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: constructor, constructor: function::__noSuchMethod__ }) = let (__iterator__, __iterator__ = ({}))  /x/g ; new (__parent__)[function ([y]) { }].yoyo({})(); typeof prop) __noSuchMethod__ = [,,];");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = ({a2:z2}), __iterator__) ((function(){export *;})());");
tryItOut("let (__noSuchMethod__, ({ constructor: __iterator__ })) { __noSuchMethod__ = <x/>; }");
tryItOut("{continue ; }");
tryItOut("/*infloop*/for(let __proto__; false; false) ");
tryItOut("return;");
tryItOut("/*infloop*/for(var ({ __iterator__: constructor, prop: ({ __proto__: ({ __parent__: __proto__, __iterator__: __noSuchMethod__ })\r, prop: [, __iterator__, __parent__] }) }) = (*::*.eval(__iterator__)); __count__ = this + this @ null; window) {break ; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(const ({ __proto__: __parent__, __proto__: __noSuchMethod__ }) = this.hasOwnProperty(\"__iterator__\"); <x/>;  \"\" .watch(\"__parent__\", 'haha'.split)) {{}let constructor; }");
tryItOut("let(__count__ = ) ((function(){this.zzz.zzz;})());");
tryItOut("with(({ __proto__: constructor }) = new (/a/gi)(__noSuchMethod__, window)){(prop); }");
tryItOut("for(let y in [5,6,7,8]) with({}) { for(let y in [5,6,7,8]) yield this.__defineGetter__(\"constructor\", function (prop, __count__) { yield 1e-81 } ) | (<x/>.prop =  /x/ ); } ");
tryItOut("/*infloop*/for((<x><y/></x>.unwatch(\"__parent__\")).__iterator__; *; (@foo)([z1], window)) yield;");
tryItOut("/*for..in*/for(const __parent__.__iterator__ = [11,12,13,14].some in (this.__defineGetter__(\"prop\", function  __parent__ (__noSuchMethod__, __noSuchMethod__)#3={a:#3#}))) {gc()return; }");
tryItOut("with((({__proto__: (.2.valueOf(\"number\"))})))throw <><x><y/></x></> & 3.141592653589793;");
tryItOut("let (__parent__, __proto__) { M:switch(5.0000000000000000000000.__lookupGetter__(\"@foo\")) { default: break; case 1: undefinedcase 2: break; case 3: ;case 9: break; case ({prototype: #3={a:#3#} }): M:switch(-1) { default:  }break; yield; } }");
tryItOut("if(([<x/>])) { if (new RangeError(yield __iterator__)) yield .2;} else {}");
tryItOut("while((this.__defineGetter__(\"__parent__\", <x><y/></x>)) && 0){; }");
tryItOut("{throw false;let __proto__, prototype = 0.1; }");
tryItOut("/*for..in*/for([__count__, prototype] = __proto__ in ({ prop: prop, __iterator__: __proto__ }) = undefined = [,,]) {while((new Boolean(__iterator__.prop = false)) && 0) }");
tryItOut("if(prop.(-3/0)) { if (([1,2,3,4].slice).call(<><\nx><y/></x></>, undefined).__count__ >>>=([15,16,17,18].some([1,2,3,4].slice, arguments for each (prop in  /x/g )))) {L: {let constructor, __iterator__;break ; }/*for..in*/for(let prop in ((function (__count__, constructor)[])(__proto__)))(__proto__.__proto__)(this.zzz.zzz), prototype = <x/> &= <x/>.eval(constructor = 4.) }} else ;");
tryItOut("if(-eval(\"__parent__.constructor = <x><y/></x>\", (__noSuchMethod__ = <x><y/></x>))) {continue ; } else  if (true /  \"\" ) export prop; else {yield <><x><y/></x></>; }");
tryItOut("do var prop, prototype; while(((-1)) && 0);");
tryItOut("M:if(return <!--yy--><y><z/></y>; <xxx {__proto__}={(window.hasOwnProperty(\"__noSuchMethod__\"))} />  -= ((__iterator__)[@foo])) { if (<><x><y/></x></> ? window : constructor) (window).__defineSetter__} else {gc() }");
tryItOut("{{}export prototype; }");
tryItOut("L:if(0/0) {export __iterator__;export *; } else {export __iterator__;{} }");
