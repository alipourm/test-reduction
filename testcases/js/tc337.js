tryItOut("M:while((<><x><y\f/></x></>) && 0)const __proto__ = <x/>, __proto__;");
tryItOut("\fL:if(({}).hasOwnProperty()) {let __parent__, __noSuchMethod__;.2; } else  if (__count__|=<x/>) {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in constructor) ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var  /x/ .prop in (prop%=eval(\"return;\", @foo))) {do {<x><y/></x>({}); } while((undefined[<x><y/></x>]) && 0); }");
tryItOut("yield new (<><x><y/></x></> !== this.eval((__count__ = __count__)))( \"\" , yield  '' );");
tryItOut("do __iterator__ while((* ^ -3/0) && 0);");
tryItOut("L:if(( /x/ .yoyo(export prototype;))) { if ((<x/>.__defineSetter__(\"__noSuchMethod__\", window))) <x><y/></x>\t;} else {; }");
tryItOut("{}");
tryItOut("/*infloop*/while(prop.eval(<x><y/></x>))/*for..in*/L:for(prototype = {throw @foo; } in __proto__) {yield <x><y/></x>; }");
tryItOut("return (String());");
tryItOut("let(__noSuchMethod__ = ( /* Comment */<xxx {__iterator__}={<x/>.unwatch(\"break ;\")} />), __count__) ((function(){for(let y in []);})());");
tryItOut("M:if(__parent__) { if (window .@ <><x><y/></x></>) gc()} else export __iterator__;");
tryItOut("if(let (prop =  /x/g , __parent__)  '' .__count__) {throw *::*;yield;\nyield;\n } else break M;");
tryItOut("let (prop, prototype) { return; }");
tryItOut("export *\nif((((1 for (x in []))).call(<y><z/></y>, *::*))) (<><x><y/></x></>);");
tryItOut("/*infloop*/L:for(let __count__ = ({ prototype: __count__ }) = __noSuchMethod__.__proto__ = <x/>; (({__parent__: arguments, __count__: this.__defineGetter__(\"prototype\", 033) }))[yield return;]; __iterator__) {{{throw  /x/ ;@foo; } } }");
tryItOut("/*for..in*/for(__count__ in  /x/ ) const __count__ = <y><z/></y>;");
tryItOut("__proto__export __iterator__;");
tryItOut("if(null) { if (window) {break L;<><x><y/></x></>; }} else gc()");
tryItOut("const constructor, __noSuchMethod__; const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <x><y/></x>) const __iterator__, constructor = this; const __iterator__;");
tryItOut("return;");
tryItOut("/*for..in*/for(var new (null)()['__count__'] in ((Function)(<x><y/></x>.(<y><z/></y>))))return prop;");
tryItOut("yield");
tryItOut("/*infloop*/do *\n while([] = ({ prop: ({ prototype: __noSuchMethod__, __count__: ({ prop: function::prop, each: prop }) }), prop: ({ __parent__: __iterator__ }) }));");
tryItOut("/*infloop*/L:for((<><x><y/></x></>.__defineSetter__(\"__proto__\", (1 for (x in [])))); (eval(\"export __proto__;\", <y><z/></y>)); Function((function ([y]) { })(), @foo)) throw <><x><y/></x></>\t\nthis");
tryItOut("with({}) throw __proto__;");
tryItOut("/*infloop*/do {( '' ).watch/*for..in*/L:for(__parent__ = this.__defineSetter__(\"prop\",  /x/g ) in ) yield; } while(__iterator__.__count__);");
tryItOut("try { export constructor; } finally { gc() } ");
tryItOut("for(let y in [5,6,7,8]) ([[1]]);");
tryItOut("gc()\n{}\n");
tryItOut("with(1e4)");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__: ((p={}, (p.z = <x/> .@x:: *::*)()).prototype)");
tryItOut("if(<x><y/></x>) { if (true) 1.2e3; else yield;}");
tryItOut("/*for..in*/for(const [constructor, constructor\r] = (~prop) in ( ''  for each (__parent__ in 0x99))) /*infloop*/while(( /x/  <<= 0.1)){yield;__parent__ = __iterator__, <><x><y/></x></> = __iterator__; }");
tryItOut("switch((void *::*)) { default: if(033) { if (0/0) __iterator__, __parent__; else {return  /x/ ;var __proto__ = null; }}break; break;  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in [3.141592653589793]) {M:if(<x><y/></x>) yield; else return  '' ;(<x><y/></x>).call }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in let (__parent__ =  '' , __noSuchMethod__ = <><x><y/></x></>) (<x><y/></x>.prototype)((uneval(<x><y/></x>)), (let (__noSuchMethod__, __iterator__ = __count__) 1e4))) L:while((<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\") .@ __noSuchMethod__.__noSuchMethod__) && 0){continue ;yield; }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>; <><x><y/></x></\n>;  /x/g ) throw @foo;");
tryItOut("(<x/>);function (1e-81, __iterator__) { yield 3 }  const __noSuchMethod__;");
tryItOut("L:if(__noSuchMethod__.unwatch(\"prop\")) { if ([11,12,13,14].sort) var __noSuchMethod__, __noSuchMethod__ = <><x><y/></x></>; else {export *; }}");
tryItOut("with(((uneval(false)))){function  prototype () { yield (-1) }  }");
tryItOut("{return true; }\t");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <x><y/></x>) {( /x/g ).watch }");
tryItOut("/*infloop*/for(0.1; window; __iterator__) {return constructor;return; }");
tryItOut("/*for..in*/M:for(var constructor = /a/gi(eval(\"<y><z/></y>\", <x><y/></x>)(),  /x/g .hasOwnProperty(\"prototype\")) in (uneval(<><x><y/></x></>))\n) {/*infloop*/for(prototype = (-0);  /x/ ; prototype) {new Functiongc() }\nyield true;\nif(this ? [1] : *::*) {break ;return; } else  if (prototype = __iterator__) {yield; } }");
tryItOut("while((<y><z/></y>) && 0);");
tryItOut("constructor = constructor;");
tryItOut("gc()");
tryItOut("L: yield;");
tryItOut("/*for..in*/L:for(const x::__proto__ in ((<><x><y/></x></>)(@foo))){yield <><x><y/></x></>; }");
tryItOut("function(q) { return q; } const __iterator__;");
tryItOut("/*for..in*/L:for(const __iterator__ in ((function (prop, __parent__) { return prop } )([,]))) {{yield;var let = <y><z/></y>, function::prop = <y><z/></y>; } }");
tryItOut("/*for..in*/for(const let = <><x><y\t/></x></> in *) constructor =  /x/ , constructor;");
tryItOut("M:do /*infloop*/for([] =  /x/g  .@x:: this; [15,16,17,18].some([1,2,3,4].slice, @foo); -0) var __count__, constructor = <y><z/></y>; while((prototype.__proto__ = (<><x><y/></x></>.eval(undefined)).unwatch(\"prop\")) && 0);");
tryItOut("/*for..in*/for([prop, prop] = __iterator__ in ( \"\" .unwatch(\"function::__proto__\"))) yield [1];");
tryItOut("/*infloop*/L:for(let __proto__; (\n#2=[ /x/g ]); 1e+81 -= this.__lookupGetter__(\"prototype\")) ");
tryItOut("M:if('fafafa'.replace(/a/g, <y><z/></y>).hasOwnProperty(\"__count__\")/*\n*/) L: export constructor;");
tryItOut("while((export prop; = @foo) && 0){const constructor = (-0); }");
tryItOut("__iterator__ = prop;");
tryItOut("if(__iterator__\n) return;");
tryItOut("/*for..in*/for(var prototype = <y><z/></y> for (constructor in <x><y/></x>).__defineSetter__(\"function::constructor\", Math.sin) in <><x><y/></x></> === ) {throw <x><y/></x>; }");
tryItOut("if(( /* Comment */<x/>)([ \"\" ].filter(function  __proto__ ()<><x><y/></x></>))) { if ( /* Comment */this.__defineSetter__(\"prototype\", (1 for (x in [])))) {if(constructor) { if ([1]) export *;} else export *;export *; }} else window;");
tryItOut("with(<y><z/></y>)return <><x><y/></x></>\n");
tryItOut("/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = window in this) ");
tryItOut("with({__noSuchMethod__: eval(\"<x/>\", this) || Error(<><x><y/></x></>.__lookupGetter__(\"prop\"))})/*for..in*/for(const __proto__ in (('haha'.split)(\n*)))<><x><y/></x></>;");
tryItOut("/*infloop*/this");
tryItOut("{while((this) && 0) }");
tryItOut("/*for..in*/for(var __iterator__ = ~this.throw(__parent__) in <bbb xmlns=\"(__count__ = undefined.__defineSetter__(\"constructor\", (-1)))\"><bbb xmlns=\"__noSuchMethod__ = constructor\"> </bbb>yyy</bbb>) {if(<y><z/></y>) {export __iterator__;Math.pow } }");
tryItOut("M:switch( '' ) { default:  /x/g case *: break; case 1: break; case constructor: break ;break; case /*\n*/__noSuchMethod__ = 5.0000000000000000000000: let constructor = function ([y]) { };break;  }");
tryItOut("/*infloop*/while(3 ^= 1e-81.isPrototypeOf(<x><y/></x>))/*infloop*/M:do {yield; } while(undefined.__noSuchMethod__)\n");
tryItOut("let(__parent__, constructor = gc()) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/M:while(([15,16,17,18].filter(function (__iterator__, __proto__) { return <y><z/></y> } , <x><y/></x>) | .2).watch(((p={}, (p.z = (__proto__))()).__parent__),  /x/g  ? [1,,] : false))while((({a2:z2}).throw(prototype)) && 0){ }");
tryItOut("with({constructor: false})/*for..in*/for(var [__count__, __iterator__] = window in <y><z/></y>) {(<x><y/></x>); }");
tryItOut("with({function::x::__parent__\f: \nwindow}){{export constructor; } }");
tryItOut("while((yield (this > window)) && 0)gc()\n");
tryItOut("{with(__parent__ | <x><y/></x>)export __count__; }");
tryItOut("/*infloop*/L:for(const __count__; <><x><y/></x></>; <x/>) {throw  \"\" ;yield; }");
tryItOut("{return <y><z/></y>;; }");
tryItOut("/*infloop*/while(+ \"\" ){{} }");
tryItOut("prototype;");
tryItOut("/*for..in*/L:for(const [__iterator__, __proto__] = (prop.(#1#) instanceof ((yield (p={}, (p.z = null)())))) in 1.3) {gc() }");
tryItOut("/*infloop*/M:for([<y><z/></y> for each (__parent__ in ((yield .2))) if ( /x/ .throw(this))]; (<x><y/></x> != <x><y/></x>); __noSuchMethod__ =  '' ) (<><x><y/></x></>);");
tryItOut("with({}) with({}) throw __noSuchMethod__");
tryItOut("while((()()) && 0)const __count__ = 0x99;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ __proto__: __parent__ }) }) = --[,]; this.zzz.zzz; 3/0) {if() yield; else  if (1.2e3) (__iterator__)(1e4) else {return arguments;function(y) { yield y; break ;; yield y; } } }");
tryItOut("for(let y in [5,6,7,8]) yield __iterator__ = __noSuchMethod__ >  \"\" .watch(\"constructor\", __count__: <><x><y/></x></>);");
tryItOut("do {(<>\r<x><y/></x></>); } while((-@foo) && 0);");
tryItOut("/*infloop*/for(var __noSuchMethod__; ((uneval('fafafa'.replace(/a/g, undefined)))); ( '' .isPrototypeOf(window)\n)) {constructor = <x/>, constructor; }");
tryItOut("if( /x/g ) {__iterator__ = <x><y/></x>;(null).__defineSetter__ } else export *\n");
tryItOut("({a2:z2})");
tryItOut("if((*::*.__defineSetter__(\"prop\", gc)) * [1,2,3,4].slice(constructor, __noSuchMethod__)) { if (({ prototype: ({ __count__: prototype, __proto__: [] }), __noSuchMethod__: ({ __proto__: __parent__ }) }) = let (function::__iterator__ = yield  \"\" , __noSuchMethod__) !true ..  \"\" ) /*for..in*/for(var [__iterator__, __iterator__] = prototype.__noSuchMethod__ setter= new Function in x::__noSuchMethod__) {yield; } else export prop;}");
tryItOut("do {throw constructor; } while(((prototype([z1]) = <x><y/></x>.(<x><y/></x>)).__lookupGetter__(\"prop\")) && 0);");
tryItOut("{let (__count__ = *) { /*infloop*/for(var __proto__ = <x/>;  /x/g ; <x><y/></x>) {gc()return; } } }");
tryItOut("L: ");
tryItOut("if((eval(\"let (__noSuchMethod__ = 0x99, constructor = 033) { let __parent__ = 0.1; }\", (__noSuchMethod__ = <><x><y/></x></>)))) {yield @foo;yield; } else  if (([(<x/>)(null) for ((<><x><y/></x></>)( '' ) in 1.3)])) let __noSuchMethod__;");
tryItOut("with({}) return <><bbb xmlns=\"try {  /x/ ; } finally { (<x><y/></x>); } \"><!--yy--></bbb></>;");
tryItOut("throw <x/>;");
tryItOut("yield 5.0000000000000000000000");
tryItOut("/*infloop*/for(<><x><y/></x></> === this.constructor; ({ constructor: prototype }) = __proto__.prototype setter= <><x><y/></x></>.valueOf(\"number\"); (Number())) {var __iterator__, constructor; const __iterator__; }");
tryItOut("if(<y><z/></y>) {return;(<x><y/></x> - 1.2e3); } else  if (([11,12,13,14].map ? new  \"\"  : prototype.__parent__ = this.__defineGetter__(\"constructor\", Math.sin))) {/*infloop*/M:do {throw window; } while(!(prop = __count__));L: {yield  /x/g ; } } else {new Functionthrow Function(@foo); }");
tryItOut("/*infloop*/do {gc() } while(((function(y) { yield y; throw *::*;; yield y; }).call(<x/>, ))); const __count__;");
tryItOut("do {} while((((p={}, (p.z = __parent__ = (typeof (return)))()))) && 0);");
tryItOut("(@foo['constructor']) = prop;");
tryItOut("/*infloop*/do yield ((({}).__lookupGetter__).call((-0), <x><y/></x>, <><x><y/></x></>)); while(((1 for (x in []))).call((p={}, (p.z = (window >>>=<>const __iterator__, __iterator__;</>))()), ((yield window) :: false), __iterator__ = ((<x><y/></x>.(({a1:1}))) == __count__.__count__)).@*);");
tryItOut("{{}gc() }");
tryItOut("{/*infloop*/do {let __parent__; } while( /x/ ); }");
tryItOut("L:if(void [1,2,3,4].slice(<y><z/></y> <  '' , 4.) ? window : (<x><y/></x> | <x><y/></x>) % ( /x/g )()) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in prop) /*infloop*/M:while(null)export *; }");
tryItOut("/*for..in*/for(var constructor in (((let (__count__ = @foo) window).__defineSetter__)((uneval(<x><y/></x> instanceof  '' ))))){let constructor = this, __count__ = <><x><y/></x></>;\nlet __count__ = this;\nreturn @foo; }");
tryItOut("/*infloop*/for(let __proto__; @foo !== <y><z/></y> ? * : @foo; <x><y/></x> .@x:: this) gc()");
tryItOut("/*infloop*/M:for(var (yield <y><z/></y>)['__parent__'\f]; (this.valueOf(\"number\")) ^= * in <x><y/></x>; ([1,2,3,4].slice)()) {/*infloop*/M:do {let prop = prop, __noSuchMethod__ = @foo;__noSuchMethod__; } while(1e81); }");
tryItOut("if(<><x><y/></x></>) __proto__ = undefined, __noSuchMethod__; else  if (* >>> .2) ; else ;");
tryItOut("{(<><x><y/></x></>);/*for..in*/for(let [prop, function::prop] = *::*[__parent__] in window) {export *; } }");
tryItOut("with(this.__defineSetter__(\"__count__\", 'haha'.split).__defineSetter__(\"__noSuchMethod__\", (1 for (x in [])))){/*for..in*/M:for(const __parent__ in <y><z/></y>) yield;with({prop: (function(y) { yield y; __noSuchMethod__ getter: Math.pow; yield y; }(__noSuchMethod__, window))}){;if(1e81) {break M;throw function ([y]) { }; } else  if *::*function ([y]) { } } }");
tryItOut("/*for..in*/L:for(let __proto__ = 5.0000000000000000000000 in  '' ) with(0x99)continue ;");
tryItOut("throw StopIteration;");
tryItOut("if(({ __proto__: __count__ }) = (<x><y/></x> + <y><z/></y>)) export __parent__;");
tryItOut("M:if([ /x/ ] % Error(window)) {return this;const __iterator__ = ({}); }");
tryItOut("while(([15,16,17,18].sort(eval, [,])) && 0){return; }");
tryItOut("let (prototype = <y><z/></y>, prop) { return (-0); }");
tryItOut("{}");
tryItOut("/*infloop*/M:for(let __noSuchMethod__ = new (p={}, (p.z = )())() * ; prop.__iterator__ = (__count__ = undefined); *) while((eval(\"<y><z/></y>\", __proto__)) && 0){/*infloop*/for(this; [z1]; false) {break M;prototype = 0.1; } }");
tryItOut("gc()");
tryItOut("var __iterator__, __noSuchMethod__;");
tryItOut("do ; while((<x/>) && 0); const ({ __parent__: ({ __iterator__: __parent__ }), prop: [] });");
tryItOut("{/*infloop*/for(const [, ({ __iterator__:  set __iterator__(__iterator__, __count__) { yield <><xxx {__parent__}={false ? prototype : <><x><y/></x></>} /></> } , __parent__: constructor })] = eval(\";\", __count__ = [z1,,]) <<= (yield [ \"\" ]); <x/>.__defineGetter__(\"__iterator__\", function(y) { yield y; ; yield y; }); ( '' (function ([y]) { }, window)) -= (window)[*::*]) {return  '' ;eval } }");
tryItOut("if([15,16,17,18].sort(Function, 1e4)) {{gc }if(*) {export *; } } else  if (({__parent__: this.__defineSetter__(\"constructor\", (false).watch) })) /*for..in*/M:for(let [__noSuchMethod__, __iterator__] = (({ __noSuchMethod__: __iterator__ }) = window) in <x><y/></x>) /*for..in*/for(let __iterator__ in @foo) __iterator__ else export __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var [([15,16,17,18].sort((new Function(\"gc()\")), <><x><y/></x></>))].__count__ in (new <><x><y/></x></>([,,z1])//h\n & \f(this << <><x><y/></x></>))) let prototype;");
tryItOut("/*for..in*/for(let __iterator__ = <><><ccc:ddd></ccc:ddd></></> in this) { }\ngc()\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(prototype; <><x><y/></x></>.throw(<y><z/></y>); (function(y) { yield y; {}; yield y; }).call(window.eval(window), )(new (undefined)(<x/>),  '' --)) var __noSuchMethod__ = 3/0;");
tryItOut("\nwith(true != <><x><y/></x></>){if(new Iterator()) {__iterator__ = <><x><y/></x></>, __parent__; } }");
tryItOut("do {} while((<x/>.watch(\"prototype\", function (__noSuchMethod__, ({ __noSuchMethod__: __count__ })) { return gc(<x/>, <x/>)-- } )) && 0);");
tryItOut("/*infloop*/for((<x><y/></x>)[<x><y/></x> ? null : 3/0]; <x><y/></x> -= <x/>; ({prototype: false })) /*for..in*/for(prop = 3 in  \"\" ) break ;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(__parent__ in ((eval)(<y><z/></y>(<y><z/></y>, __noSuchMethod__))))yield return true;;");
tryItOut("{with({__count__: new (({}).__lookupGetter__)()}){export prop;return; } }");
tryItOut("{/*for..in*/for(const [__count__, __iterator__] = <x/> in window) gc()yield null; }if(__iterator__.(prototype = <><x><y/></x></> >= __noSuchMethod__.__parent__ getter= function(q) { return q; })) {export *; } else continue L;");
tryItOut("/*infloop*/for(let __proto__; [ /x/g ].map(arguments); [11,12,13,14].map) var __proto__ = <x>\f<y/>\t</\fx>;");
tryItOut("/*infloop*/for(var __parent__; (function (constructor) { yield <x><y/></x> } ); (-3/0.@foo) = undefined.yoyo(window)) {}");
tryItOut("M:with({prop: <x/>})M:if(#1=({__noSuchMethod__: (<x><y/></x>.( /x/ ))})) while((this) && 0)export prop; else  if (this.__defineGetter__(\"__count__\", null)) if(__parent__) \f else  if (prototype) {(033); } else {export prop;( /x/ ).watch } else {throw  '' ;L: [[]] }");
tryItOut("__parent__;<><x><y/></x></>\n");
tryItOut("__parent__ = prop;");
tryItOut("return;");
tryItOut("yield <y><z/></y>");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut(";");
tryItOut("do default: yield; while(((eval(\"set, prop = __count__;\", this.unwatch(\"__noSuchMethod__\") += [1].eval(<x><y/></x>)))) && 0);");
tryItOut("let (__proto__, prop) { gc() }");
tryItOut("break M;");
tryItOut("for(let y in [5,6,7,8]) let(__count__ = ({__parent__: <><x><y/></x></> }) in [] ? __proto__: <y><z/></y> : window) ((function(){let(prop = ( /x/g ), constructor) ((function(){for(let y in []);})());})());");
tryItOut("if((__parent__.(window))) <y><z/></y>; else {var constructor; }");
tryItOut("M:if(__parent__ | *.watch(\"constructor\", 3.141592653589793)) {{} } else  if (false) {/*for..in*/__count__ in <x/>) {gc(){} } }");
tryItOut("with(eval(\"1.3\", <y><z/></y>.hasOwnProperty(\"setter\").throw((yield *))))/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <x><y/></x>) {let __count__, prototype = <><x><y/></x></>;(1e81); }");
tryItOut("switch(0x99 .@ (*.__count__ = <><x><y/></x></>)) { case 9: break;  }");
tryItOut("switch([,] !== <y><z/></y> > [,,z1]) { default: case  /* Comment */constructor .@x:: __iterator__: export *;break; break;  }");
tryItOut("if(__noSuchMethod__.__count__ = (String())) { if ((<x/>.hasOwnProperty(\"constructor\"))) {{} }} else { '' ;; }");
tryItOut("if('fafafa'.replace(/a/g, <x/>).yoyo((<><!--yy--></> .@*:: [15,16,17,18].sort(eval, constructor) >= ([(new ({}).__lookupGetter__())].some(({}).hasOwnProperty))))) {return; } else  if ((<bbb xmlns=\"*::*\"><x><y/></x><ccc:ddd><!--yy--></ccc:ddd></bbb>.__proto__.throw(((#3={a:#3#} -= constructor) .. 5.0000000000000000000000.__count__)))) switch(__proto__) { default: break M; }");
tryItOut("let (prototype = Number(1e4, 3) @ \ndelete undefined[prop.prototype setter= (false).__defineSetter__], __iterator__ getter: ({}).hasOwnProperty) { ;\f }");
tryItOut("/*for..in*/for(let function::__parent__ in (([1,2,3,4].slice)((yield undefined)))){var __iterator__ =  /x/ , __count__; }");
tryItOut("with({}) { yield (#3={a:#3#} / #1#); } ");
tryItOut("/*for..in*/for(constructor = * in @foo) {yield null; }");
tryItOut("/*infloop*/do gc() while(({ prototype: ({ __count__: prototype, __noSuchMethod__: ({ __iterator__: prototype, prototype: __iterator__ }) }), __parent__: ({ prop: [, __parent__, ], __parent__: __proto__ }) }) = [<x><y/></x>.constructor, ]);");
tryItOut("do (window); while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (((Function).call(__proto__, -0, [,,z1])) & 0/0).prototype in (<x><y/></x>).__defineSetter__()) ;");
tryItOut("if(*) { if (__noSuchMethod__) {( /x/ );throw <x><y/></x>; } else return *::*;}");
tryItOut("/*for..in*/for(let prop = new Boolean(<x><y/></x>).__defineGetter__(\"__parent__\", (new Function(\"<><x><y/></x></>\"))) in <><x><y/></x></> |= 3/0) gc()");
tryItOut("<x><y/></x>");
tryItOut("M:switch(prop && *::*) { case 5: switch(<><x><y/></x></> ^= undefined) { default: break L;break;  }var __parent__, __iterator__ = @foo;break;  }");
tryItOut("/*for..in*/for([__iterator__, constructor] = ((-3/0\n)[new ( /x/ )(<><x><y/></x></>, <x><y/></x>)]).hasOwnProperty(\"__count__\") in [z1,,] for each (__count__ in null)) {L:do export prop; while((<x/>) && 0); }");
tryItOut("if(* > undefined) {{} } else  if (window.__lookupSetter__(\"__proto__\")) ; else  for (prototype in __noSuchMethod__)");
tryItOut("let (__parent__) { ; }");
tryItOut("with(false){__iterator__ = *::*;@foo; } const constructor;");
tryItOut("switch((__iterator__ = ({a2:z2}))[eval(\"throw <y><z/></y>;\", <x><y/></x>)]) { case 5: break; yield (<x><y\r/></x>).watch; }");
tryItOut("with(window.valueOf(\"number\").@foo)L:do {/*for..in*/M:for(let [__parent__, __count__] = <x><y/></x> in <><x><y/></x></>) {let __parent__ = <x/>;gc() } } while(( /* Comment */*::*) && 0);");
tryItOut("{with({prototype: <x><y/></x>})export __noSuchMethod__\n/*infloop*/do eval while(undefined); }");
tryItOut("try { return; } catch(__iterator__ if (function(){window;})()) { var constructor = window, __parent__; } catch(__noSuchMethod__) { return <><x><y/></x></>; } finally { (undefined); } ");
tryItOut("Function");
tryItOut("M:if(gc() >>> (({setter: *::*}))) /*infloop*/L:for(__parent__ = <x><y/></x>;  \"\" ; false) {this;var __parent__ = *::*, prop = <x><y/></x>; } else /*for..in*/for([__proto__, __count__] = undefined in <!--yy-->) ;");
tryItOut("export *;");
tryItOut("function  __count__ (prop, __count__) { export *; } ");
tryItOut("/*infloop*/L:do ; while(<x/>);");
tryItOut("{<x/>;Math.sin }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in (__proto__.prototype setter= eval)) {const prop, prop; }");
tryItOut("for(let y in [5,6,7,8]) <><x><y/></x></> / true << <x/>");
tryItOut("{[1,2,3,4].map }");
tryItOut("/*infloop*/for(let prop\f; ([11,12,13,14].sort); this) {if((*--)) { if (__noSuchMethod__) {}} else {let __count__, __iterator__; } }");
tryItOut("try { let(prototype, __noSuchMethod__) { {} } catch(__noSuchMethod__ if (function(){for(let y in [5,6,7,8]) false})()) { with({}) { {} }  } catch(__iterator__) { let(__count__ = const __proto__ = <x/>, __parent__;) ((function(){{}})()); } finally { let(__parent__ = window) ((function(){(false);})()); } ");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: prop }) = undefined; <x><y/></x>.(prototype); ( \"\" .throw(*))) {break ; }");
tryItOut("with(([z1,,] ^= (-0)))return;");
tryItOut("let (__proto__ = window) { yield; }");
tryItOut("{continue ;export __proto__; }");
tryItOut("break ;");
tryItOut("/*for..in*/for(let __proto__ = new Function() in ++ \"\" , constructor = null) return;");
tryItOut("while(((p={}, (p.z = ({__noSuchMethod__: <x><y/></x>}))())) && 0);");
tryItOut("/*infloop*/do if((this +=  \"\" )) {\f if ((*.isPrototypeOf(window))) throw <x/>;} else let prop, __noSuchMethod__ = #1#; while(false ? [z1] : <><x><y/></x></>);");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ((__noSuchMethod__ = <x><y/></x>)) in __count__ = <><x><y/></x></> *= (<><x><y/></x></> != ({}))) /*infloop*/M:for([[, __count__], , constructor, ] = (delete prototype = __iterator__); true ? *::* : false; (false)(window, -1)) return;");
tryItOut("{{export *; }/*infloop*/for(const ({ __proto__: __count__ }) = new new Function(5.0000000000000000000000, #3={a:#3#}); 1.2e3 = window; prop, function::__noSuchMethod__ = *::*) {(null); } }");
tryItOut("if( \"\" ) { if (false) var constructor, __parent__;} else yield;");
tryItOut("/*infloop*/for(var prop;  /x/g ; [,,]) {}");
tryItOut("if(RangeError(<x><y/></x>)) { if (({a2:z2})) {(<><x><y/></x></>); } else eval}");
