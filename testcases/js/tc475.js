tryItOut("{with([[]]){gc()const __count__, prototype; }return #1#; }");
tryItOut("(@foo)\n;\n");
tryItOut("(({ __proto__: __count__ })) = prototype;");
tryItOut("/*infloop*/for(delete null['__noSuchMethod__']|=(__iterator__-=RangeError(@foo,  /x/ )); <><xxx>{prop}</xxx></>; __parent__ = [15,16,17,18].some(Math.pow,  \"\" )) {gc()return; }");
tryItOut("{with({__parent__:  '' })return;if( { yield [(<x><y/></x> ? <><x>\f<y/></x></> : constructor)].map(({a1:1})) } ) { if (__parent__ = window) {yield <><x><y/></x></>;return; }} else {[1,2,3,4].slice(__noSuchMethod__); } }");
tryItOut("with({prop: undefined})var prototype;");
tryItOut("<y><z/></y>;");
tryItOut("yield\n");
tryItOut("M:if(new ((prop.(constructor).eval((__count__. getter= ({}).hasOwnProperty)).__defineSetter__(\"__count__\", (((new Function(\"throw <x><y/></x>;\"))).call).call)))((new (function ( { yield __parent__ } ) { prop; } )(this.constructor)),  '' )) {; }");
tryItOut("/*for..in*/for(const __parent__ = new [1,2,3,4].map(yield  \"\" ) in __iterator__.(<><x><y/></x></>.yoyo( /x/ ))) {let (prototype = this, __count__) { /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in window) let __proto__ = 1e-81; } }");
tryItOut("switch(<x/>) { default: /*infloop*/M:for(<y><z/></y>; constructor; *::*) new __proto__ getter: (Function).applyfunction () { throw <y><z/></y>; } (((uneval(#3={a:#3#}))), <><x><y/></x></>)break; gc()break;  }");
tryItOut("/*infloop*/while((__count__(function::__iterator__) = this.__defineGetter__(\"prototype\", (<y><z/></y> !== <><x><y/></x></>).__defineSetter__))){Math.sin const prop; }");
tryItOut("if(delete ((__parent__) = ([this for (prop in this)]))) {return @foo; } else  if ((new (<x><y/></x>--))) {this; } else {/*for..in*/L:for(__proto__ = <y><z/></y> in this) {} }");
tryItOut("*;");
tryItOut("false;");
tryItOut("M:if(({delete: (<bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>++)})) /*for..in*/for(let __parent__ in (((yield 0x99))((new function (__proto__, constructor) { break L; } (let (__count__ =  /x/g , __noSuchMethod__ = this) #3={a:#3#}, function::__parent__))))){export __noSuchMethod__;; } else  if ((yield @foo)) {return 3;throw null; }");
tryItOut("do { } while(((prototype = (-3/0++ /= false))) && 0);");
tryItOut("/*infloop*/for(__parent__+=constructor; eval(\"window\",  /x/g ); [<><x><y/></x></> for each (__proto__ in [1])]) {throw {};function::constructor = <><x><y/></x></>, __parent__; }");
tryItOut("/*infloop*/for(const prop = -1; constructor; window) {__count__ }");
tryItOut("let (({ __noSuchMethod__: ({ constructor: ({ __count__: ({ __count__: __noSuchMethod__, __count__: (\f{ prototype: [] }) }) }), __parent__: ({ __noSuchMethod__: ({ __parent__: ({ prop: <x><y/></x> }) }) }) }), constructor: ({ __iterator__: __count__ }) })) { /*for..in*/for(var __noSuchMethod__ = ( /x/g .__defineSetter__(\"__count__\", /a/gi)) in ( /x/ )) gc() }");
tryItOut("/*for..in*/for(let <xxx {__iterator__}={ '' } /> in ((true .@ __proto__)((new (__parent__ = ({ prototype: __iterator__, prototype: constructor }))(yield <x/>))))){*::*export *; }");
tryItOut("/*for..in*/for(__count__ in constructor = [[1]]) /*for..in*/for(let [__proto__, __count__] = <x><y/></x> in *::*) ;");
tryItOut("L:with((({}).hasOwnProperty).call(({}), this, <><x><y/></x></>)){var __count__, __proto__ = <x><y/></x>; }");
tryItOut("with({}) (<x><y/></x>);");
tryItOut("export __proto__; const __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("M:if((yield ({__parent__: __parent__ = , __iterator__: (yield <><x><y/></x></>) }))) /*infloop*/for(yield __proto__; (prototype(<y><z/></y>) = ({__count__ setter: (<x><y/></x>).__defineSetter__, constructor: undefined })); (\n[11,12,13,14].some)) function  __parent__ ()<x/> else  if (<x/>) gc()\nreturn;");
tryItOut("return <><x><y/></x></>;/*for..in*/for(var [__parent__, __iterator__] = this in (-0)) export __count__;");
tryItOut("if(<><x><y/></x></>.@*) {{}/*infloop*/for(__parent__ = undefined; [,]; <y><z/></y>) let __parent__ = <><x>\t<y/></x></>; } else  if ((function  __parent__ (__count__, __iterator__) { yield (true << __count__) } )) {if(true) return; else {export __proto__; } } else {while((__parent__) && 0)throw <x/>; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <><x><y/></x></>) (this);");
tryItOut("return;");
tryItOut("/*for..in*/for(var prop.__parent__ in (((-(yield __iterator__)))(({}).watch(\"__count__\", function (__noSuchMethod__) { yield; } ) << <x/>\n ^ 'fafafa'.replace(/a/g, <x><y/></x>)))){__proto__ = prototype;{} }");
tryItOut("/*infloop*/while(constructor = prop)(<x><y/></x>); const prop;");
tryItOut("{for(let y in [5,6,7,8]) for(let y in []);L: if(<><x><y/></x></>) { if (__proto__) {const prototype = this; }} else {gc()let __parent__; } }");
tryItOut(";\n/*for..in*/for([__proto__, __noSuchMethod__] = [1,,].unwatch(\"__iterator__\").__lookupGetter__(\"prototype\") in (@foo if (<y><z/></y>))) {//h\n;yield @foo; }\n");
tryItOut("/*infloop*/L:for((<><x><y/></x></>.__parent__-=({prototype getter: <x/> })); new ( /x/ ).__defineSetter__(); function ([y]) { }.__iterator__ === undefined << null) break ;");
tryItOut("M:if(^) {let __count__, prop; } else  if (function (constructor, prototype) { let __parent__; } ) {export *;<><x><y/></x></>; } else export constructor; const prop;");
tryItOut("yield <x><y/></x>;\n__noSuchMethod__;\n");
tryItOut("if( /x/g .__defineSetter__(\"__noSuchMethod__\", 3/0)) { if (-0--) {break ; }} else {;return <x><y/></x>; }");
tryItOut("if(__noSuchMethod__ = this) {if(.2) {return <x><y/></x>; } else const prototype; } else  if ([11,12,13,14].filter) {prototype;gc() }");
tryItOut("/*infloop*/M:for(5.0000000000000000000000; __iterator__ = window; (({a2:z2}) & @foo)) {yield __count__;window; }");
tryItOut("/*infloop*/while((undefined ? window : *\n))let <{__noSuchMethod__}></{__noSuchMethod__}>;");
tryItOut("L: ");
tryItOut("/*for..in*/for(let prototype = __count__ in ) switch(this) { default: (<><x><y/></x></>); }");
tryItOut("/*for..in*/for(({ __count__: __noSuchMethod__ }) in [z1]) {{} }");
tryItOut("M:if() { if ( /* Comment */[1]) new  /x/ ( /* Comment */1e4, <x><y/></x>)} else yield;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(constructor; (0x99.propertyIsEnumerable(\"__proto__\")); (prototype = 3)) const prototype;");
tryItOut("if(__parent__ = __count__ &  /x/ ) { if (--.__defineSetter__(\"prop\", Math.sin)) /*for..in*/M:for(var <><x><y/></x></> in ((new Function)(undefined.__lookupSetter__(\"__noSuchMethod__\")))){function(y) { yield y; var __iterator__, __count__ = undefined;; yield y; }var __count__; }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(\tlet this['prop'] in false) {export prototype;return; } }");
tryItOut("<x><y/></x>\n");
tryItOut("L:with({prop:  /x/ .unwatch(\"__iterator__\")}){return 1e+81;return <><x><y/></x></>; }");
tryItOut("with({__count__: window})throw __count__;");
tryItOut("if(__iterator__+=*) gc() else  if (eval(\"__parent__;\", --*::*)) break ; else {const prop, prototype; }");
tryItOut("with({__noSuchMethod__: <x/>})export *;");
tryItOut("let (__proto__) { /*for..in*/M:for([__parent__, (__proto__)] = ([<><x><y/></x></>].eval((p={}, (p.z = <y><z/></y>)()))) in __noSuchMethod__ = [,]) return __count__; }");
tryItOut("/*for..in*/for(prop.prop in ((function (__noSuchMethod__, __iterator__) { yield __noSuchMethod__ } )(({__proto__ setter: function  __parent__ (get) { yield 0/0 } , function::__parent__: (this.zzz.zzz) }))))/*for..in*/for(const [prototype, __parent__] = <><x><y/></x></> in <><x><y/></x></>) {return __count__; }switch( /* Comment */(eval)(window,  /x/ )) { default: __iterator__break; case @foo: break; gc()break; case this--.valueOf(\"number\"):  }");
tryItOut("/*for..in*/for(var constructor in {}) {<x><y/></x>return @foo; }");
tryItOut("with(this){constructor = 033; }\nconst __parent__ = this, __proto__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var getter in [,]) return <x><y/></x>;");
tryItOut("{M:if(-0) { if (*::*) {export constructor; }} else {return; }export prop }\nconst ({ prototype: prop, prop: __parent__ }), __noSuchMethod__ = window;\n");
tryItOut("L: {yield; }");
tryItOut("L: {<><x><y/></x></>; }");
tryItOut("if(window.__defineSetter__(\"__parent__\", ((this).watch).call) >>> prototype) {throw 0.1;export *; } else  if (<x><y/></x>++) const __count__ = [,];");
tryItOut("/*for..in*/M:for(let constructor in ((__parent__ = window).*)) {return;\n__count__: this\n }");
tryItOut("gc()\n\fthrow true;\t /x/ ;");
tryItOut("for(let y in [5,6,7,8]) let(prototype = 033.yoyo(0.1)) ((function(){for(let y in [5,6,7,8]) export __count__;})());");
tryItOut(" if ((prototype = this.__defineGetter__(\"__parent__\", Function)))");
tryItOut("export __proto__;");
tryItOut("");
tryItOut("/*for..in*/for(var __proto__ = prototype ^= <x><y/></x>.eval((<x><y/></x>)) in arguments) {/*for..in*/L:for(var prototype = this in get) export *; }");
tryItOut("M:if( \"\"  == <y><z/></y>) {yield this;yield; } else  if (((p={}, (p.z = <x><y/></x>)()))) throw @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor(*::*) in __count__) yield <x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in [1]) yield window;");
tryItOut("/*infloop*/for(const __proto__; 'fafafa'.replace(/a/g, function  constructor (__count__, prototype) { yield __noSuchMethod__ getter: [1,2,3,4].slice } ); __count__ = this.__defineSetter__(\"__count__\", /a/gi)) return;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ) export constructor;");
tryItOut("/*infloop*/for(let prototype; @foo; <x><\ty/></x> << *.eval(__iterator__ = *.yoyo(*))) if((<x/>.__parent__)) { if (true\n) yield; else {\fprototype = 4.;export prop; }}");
tryItOut("if(__parent__.__count__ = prop) yield; else {export __iterator__; }");
tryItOut("export *;");
tryItOut("let (__proto__ = <x/>) { <><x><y/></x></> }");
tryItOut("switch((({ prop: [, ({ prototype: __parent__, __noSuchMethod__: ({ __count__: x::__iterator__, prototype: prototype }) }), __parent__, , ({ prop: x::function::__iterator__, \f__proto__: [] })], __count__: __proto__ }) = __proto__ = (prop &= @foo) .@x:: [].unwatch(\"__parent__\"))) { default: /*for..in*/for(prop in this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) yield;break; break; case window.__noSuchMethod__ setter\f= (1.3).watch: for(let y in []);break; (uneval(<>__count__</>));case <y><z/></y>: {}break; for(let y in []);break; case 0: (<><x><y/></x></>); /x/ ;case  \"\"  + <x/>: L: { } }");
tryItOut("M:if(@foo) yield");
tryItOut("if((function  prototype () { yield __noSuchMethod__.throw(this) } )( /x/ , <><x><y/></x></>.*)) {} else export prop;");
tryItOut("/*infloop*/for(false; (function () { yield @foo } )(<><x><y/></x></>); prop.prop = *::*) *;");
tryItOut("L:if(*) {export __count__; }\f else  if (<><x><y/></x></>) {;yield; } else  ");
tryItOut("switch((__parent__.prop = ({a2:z2}))) { case window: break;  } const __iterator__;");
tryItOut("/*for..in*/for(const [__proto__, __count__] = false.__lookupGetter__(\"__proto__\") in  /x/g ) {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var __parent__ = 1e81; function(id) { return id } .@*:: __iterator__; (<y><z/></y> += 1e4)) yield;");
tryItOut("/*infloop*/M:for(let constructor; [ if (1.3)]; [new ((new Function(\"(*::*);\")))(delete ({}), <x/>)].map('haha'.split)) <x><y/></x>;\n(this);\n");
tryItOut("while((((__iterator__))) && 0)/*for..in*/for(const prototype in -3/0) {<x><y/></x>var __proto__ = window, __parent__; }");
tryItOut("if(<>yyy</>) ; else  if (({ prop: ({ __noSuchMethod__: ({ __noSuchMethod__: constructor }), prototype: [, ({ __parent__: __proto__ }), ({ prototype: __parent__ }), __parent__] }), function::__iterator__: __noSuchMethod__ }) = *) ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const (__count__) in ((Math.sin)(<x/>))){let prototype;throw <><x><y/></x></>;/*\n*/ }");
tryItOut("yield <><bbb xmlns:ccc=\"(new Date( \"\"  << function ([y]) { }, <><x><y/></x></>))\"><ccc:eee></ccc:eee></bbb></>;");
tryItOut("/*for..in*/M:for(prop = this in __proto__.(prop) <<= <y><z/></y>) {@foo\n/*infloop*/for(#1=[#1#]; __iterator__; <y><z/></y>) let __proto__ = *, prop; }");
tryItOut("throw __count__;");
tryItOut("while((window) && 0){(<><x><y/></x></>); }");
tryItOut("switch((*::*.watch(\"__parent__\", <y><z/></y>))) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in ([<><x><y/></x></>])) {/*infloop*/M:while(<><x><y/></x></>)export *; }var constructor, __parent__ = <y><z/></y>;break;  }");
tryItOut("/*infloop*/while(window){__proto__, __iterator__; }\nlet (__proto__, __parent__) { const prototype = prototype; }\n");
tryItOut("throw __count__;");
tryItOut("/*infloop*/do {yield;return; } while(((1 for (x in []))).call(window, .2));");
tryItOut("if(<><><y><z/></y></></>.__defineGetter__(\"__proto__\", [[]] / <y><z/></y>)) /*infloop*/for(constructor; window; __proto__) {var constructor;return  \"\" ; } else yield;");
tryItOut("for(let y in [5,6,7,8]) continue L;");
tryItOut("L: {(<y><z/></y>); }");
tryItOut("/*for..in*/for(let prop in ((function(q) { return q; })(( /* Comment */* for each (* in false)))))var __iterator__;<><x><y/></x></>.prop");
tryItOut("/*for..in*/L:for(var prop = (p={}, (p.z = 1e81)()) in (() *= (((gc).apply).apply).call(new (( '' ).call)(null, 1.3), <y><z/></y>.throw(null), <><x><y/></x></>))) {yield (new (this)(<y><z/></y>, window));break M; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const [15,16,17,18].some(function () { return __iterator__ } , <y><z/></y>).__iterator__ in (RegExp())) const prop;");
tryItOut("/*for..in*/for(let prop = prop = 1e+81 in __iterator__) ;");
tryItOut("/*infloop*/for(({prop = --<x/>.__count__, __iterator__ getter: function () { return window\f.watch(\"constructor\", /a/gi) }  }); 'fafafa'.replace(/a/g, new Function); (function  [,] (__iterator__) { yield __proto__ } ).call(window, [[]]).__defineSetter__(\"__noSuchMethod__\", (-0))) ;");
tryItOut("with(((uneval(eval(\"(*::*.__defineGetter__(\\\"__count__\\\", <><x><y/></x></>))\", #1#))))){let constructor = 0.1, __proto__; }");
tryItOut(";");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = (<><x><y/></x></> >>= <><x><y/></x></>) in this) {; }");
tryItOut("this.zzz.zzz;");
tryItOut("return ({a2:z2})");
tryItOut("with({__parent__: (new (function(q) { return q; })())}){{} }");
tryItOut("L: /*infloop*/M:do {gc() } while((return));");
tryItOut("{let (__proto__, prop) { yield <><x><y/></x></>; }export prop; }");
tryItOut("<x><y/></x\t>, __iterator__\n;  ");
tryItOut("/*for..in*/for(const <><x><y/></x></> in [,,]) {{}{} }");
tryItOut("return;");
tryItOut("switch([this for each (prototype in @foo)]) { case 0: break; gc() }");
tryItOut("/*for..in*/M:for([__parent__, each] = [1,2,3,4].map(<x><y/></x>,  /x/g \r) in (-0)) {}");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*for..in*/for(let constructor.constructor in (this.__defineGetter__(\"prop\", Math.sin))) {/*for..in*/for(var ({ __proto__: prop }) in <y><z/></y>) \f{ }yield <><bbb xmlns=\"((window)[//h\nthis])\"></bbb></>; }");
tryItOut("if(new ({}).hasOwnProperty(let (constructor, prop = @foo) window, <x><y/></x>.(<x/>))) L: {(0x99); } else  if ([[1]]) yield this; else const set, prop;");
tryItOut("switch(null) { case 0: yield;break;  }");
tryItOut("/*for..in*/for(var __parent__ in ((function  __proto__ (({ __proto__: prototype })) { yield ({}) } )((*::* > __count__).__count__)))var prop = this;");
tryItOut("/*infloop*/do {continue ;do (this); while((constructor+= '' ) && 0); } while((+<x/>.watch(\"prop\", (1 for (x in []))).__proto__ = <> </>));");
tryItOut("__count__\nL:do return; while((<y><z/></y>) && 0);");
tryItOut("/*for..in*/for(prop in typeof <y><z/></y>) export *;");
tryItOut("prop = #1=[#1#];");
tryItOut("/*for..in*/for(const prototype = (3/0).watch(__noSuchMethod__ = 033, true).isPrototypeOf(__proto__) in prop) L: {gc()export __parent__; }");
tryItOut("/*infloop*/do {prototype: __noSuchMethod__.prototype setter= (function\t  __noSuchMethod__ (__parent__, function::prop) { return <x/> } ).call/*infloop*/M:for(<x><y/></x>\f; false; 3/0) {} } while(__proto__.(#3={a:#3#})[undefined << <x/>]\f);");
tryItOut("/*infloop*/do with({prop: #3={a:#3#}}){const constructor = null;(<//h\n><x><y/></x></>); } while(.2.__lookupSetter__(\"__parent__\"));");
tryItOut("return <y><z/></y>;");
tryItOut("L: {return prop.__iterator__ setter= function(y) { yield y; const prototype;; yield y; }; }");
tryItOut("if( /x/g ) {if(((uneval(__proto__.__noSuchMethod__ = <><x><y/></x></>)))) { if ((__count__\n for (__parent__ in ({a2:z2})) for (__count__ in (-0)))) return __iterator__; else var __proto__ = <x><y/></x>;//h\n} } else  if (*) {return  /x/g ;{throw <y><z/></y>; } }");
tryItOut("if(this) { if (4. ^=  '' ) const prop, __iterator__ = <x/>; else {throw __proto__; }}");
tryItOut("return ([15,16,17,18].map(constructor, true));");
tryItOut("/*infloop*/for(constructor = undefined; .2.eval(*); yield <y><z/></y>) {const throw 0x99;; }");
tryItOut("L: export *;");
tryItOut("[, (: __proto__, prop: ({ prop: __noSuchMethod__, prop: [, ({ __count__: prop }), prop, __iterator__, ] }) }), __iterator__] = [,,]");
tryItOut("/*infloop*/for(const __proto__.__proto__ = (void window.__lookupSetter__(\"constructor\")); ( \"\" .yoyo( \"\" )--); __proto__.__defineGetter__(\"__parent__\", ([1,2,3,4].slice).apply).unwatch(\"__proto__\")) return  /x/ ;");
tryItOut("while((({prop setter: /a/gi })) && 0)let __proto__ = true, __noSuchMethod__ = window;");
tryItOut("/*for..in*/for(let (null)(__count__) in ((({}).hasOwnProperty)(<y><z/></y>.valueOf(\"number\"))))export *;");
tryItOut("break L\n");
tryItOut("/*infloop*/for(const constructor; window; \f<y><z/></y>) 1.2e3\n");
tryItOut("/*infloop*/L:do while(([@foo].map(gc)) && 0){yield #1=[#1#]; /x/g ; } while((new (true)( /x/g )--));");
tryItOut("try { with({}) throw StopIteration; } catch(__noSuchMethod__) { prop = prop; } ");
tryItOut("/*infloop*/for([11,12,13,14].some; (eval(\"gc()\", #2=window)); ) ");
tryItOut("if(++__noSuchMethod__) {const __count__ = undefined, prop; } else  if (((uneval(((<x><y/></x>).watch)( /x/ , __iterator__))))) /*for..in*/L:for(var __iterator__ = <y><z/></y> in @foo) ( \"\" );");
tryItOut("/*for..in*/for(const __parent__ in ((eval)(({ constructor: ({ __parent__: prop, __proto__: ({ prototype: __noSuchMethod__, constructor: prototype }) }) }) = (return <x><y/></x>)()))){with((<x><y/></x>.@foo)()){throw <><x//h\n><y/></x></>; } }");
tryItOut("<>new ((<x/>).watch)((typeof function(id) { return id } >> (<x><y/></x>)[/*\n*/undefined]))</>");
tryItOut("if(this) {export __parent__;; } else {throw __count__;* }\nif() yield 033; else  if (new Boolean( /x/g , null)) continue L; else {; }\n");
tryItOut("gc");
tryItOut("/*infloop*/do <x><y/></x>; while(({}));");
tryItOut("L:if(((p={}, (p.z = <><x><y/></x></>[4.].*)()))) {(function::__proto__);/*for..in*/for(prop in <x><y/></x>) yield; } else  if (continue M) {[1,2,3,4].slicereturn <x/>; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(function::prop in (window).call) try\f { yield 3.141592653589793; } catch(__proto__ if (function(){var __iterator__ = *, __iterator__ = this;})()) { {} }  }");
tryItOut("switch(()) { default: ; }");
tryItOut("L:if((-0)) var __noSuchMethod__;");
tryItOut("/*infloop*/for(prototype; ((<x/>)[<x><y/></x>].throw((<><x><y/></x></> >= __parent__)).unwatch(\"__iterator__\")); (this.__defineGetter__(\"__count__\", eval) += ([<y><z/></y> for (__parent__ in  /x/g )]))) {(__count__); }");
tryItOut(";");
tryItOut("__count__ = prototype;");
tryItOut("with({__noSuchMethod__: (([,](__count__))(-[], [<y><z/></y>].sort(/a/gi)))}){return 3.141592653589793;constructor, __noSuchMethod__ = @foo; }");
tryItOut("/*for..in*/for(let <x/> in (((<><x><y/></x></>).watch)(({a2:z2})++))){gc()var __proto__ =  '' , __parent__; }");
tryItOut("/*infloop*/M:while(<x><y/></x>)return;");
tryItOut("gc() const prototype;");
tryItOut("do with(undefined){return;'haha'.split } while(( /x/ ) && 0);");
tryItOut("/*infloop*/while((__parent__.__noSuchMethod__ = <x><y/></x> == <><x><y/></x></>)){yield *::*;throw *::*; }");
tryItOut("if(yield *::*) {<y><z/></y>\n } else {return\nreturn;{} }");
tryItOut("try { return <><x><y/></x></>(); } finally { __iterator__ = prototype; } ");
tryItOut("L:if(<x><y/></x>.eval(__proto__.__iterator__).eval()) {export *;{} }");
tryItOut("if(var __iterator__) {window;; } else  if (prop = (().call(<><x><y/></x/*\n*/></>, ))) {var __noSuchMethod__, __iterator__ = prototype;let prototype; } else if( /* Comment */window) { if (<x><y/></x>.(({a2:z2}))) throw <y><z/></y>;} else {[1,2,3,4].slicefunction  __parent__ (yyy) ''  }");
tryItOut("var constructor, [, __parent__];");
tryItOut("throw StopIteration;");
tryItOut("L: {yield;var <!--, __proto__ = <><x><y/\f></x></>; }");
tryItOut("__iterator__.__iterator__ = __noSuchMethod__;");
tryItOut("{export prototype; }");
tryItOut("throw StopIteration;");
tryItOut("M:if((delete undefined)) /*infloop*/do {} while(constructor);");
tryItOut("/*infloop*/for(var prototype; <><></></>.*; ~window() &&  /x/g ) {if([<><x><y/></x></>].filter(<x><y/></x>)) ; else ;with((prototype = (function ([y]) { })()))/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  /x/ ) {export *;export __parent__; } }");
tryItOut("{function::__count__ =  \"\" , __proto__;; }");
tryItOut("try { ; } catch(prototype if __count__ = __parent__) { __iterator__ =  /x/ ; } __proto__ getter: ((1e81.unwatch(\"__parent__\") <= 0x99)).__defineSetter__");
tryItOut("=\nexport *;");
tryItOut("L: {}");
tryItOut("new Function\n");
tryItOut("/*for..in*/L:for([__iterator__, __parent__] = <><x><y/><\r/x></>.hasOwnProperty(\"__parent__\").eval(()) in <y><z/></y> >>= (this.@*)) for(let y in []);");
tryItOut("with(this.__defineGetter__(\"constructor\", Function))M:if(true)  else  if ( '' ) {export *; }");
tryItOut("throw StopIteration;");
tryItOut("{gc()let (__proto__ = *) { constructor, __parent__ = [[]]/; } }");
tryItOut("{\nwith({__parent__: (__noSuchMethod__.throw//h\n(<><x><y/></x></>))}){continue M;throw  '' ; } }\nlet (constructor = (#3={a:#3#})) { var __noSuchMethod__, __noSuchMethod__; }");
tryItOut("// const prototype;");
tryItOut("return window;");
tryItOut("/*for..in*/for(const __count__ = this in [11,12,13,14].map) {}const __iterator__ = @foo;");
tryItOut("/*infloop*/do yield (new ([[]])(<x/>, {})); while(prop.__proto__);");
tryItOut("/*infloop*/for(<x><y/></x> < @foo; let (prototype, __parent__) this; <x><y/></x>.__defineGetter__(\"__noSuchMethod__\",  /x/ )) {return; }");
tryItOut("L:if(0) { if ((-0)) {prop } else {(<x><y/></x>);__count__ }}");
tryItOut("L:if(this.__defineGetter__(\"__proto__\"\n, function  constructor (__noSuchMethod__) { return <>constructor x><y/constructor><x></> } )(this.zzz.zzz, <x><y/></x>)) { if ((new ('haha'.split)())) true} else \nthis");
tryItOut("yield;");
tryItOut("/*infloop*/do default: if((<x><y/></x> += <x><y/></x>) &= __parent__.__iterator__) { if ((void <x/>)) {return <x><y/></x>;export __parent__; } else return <y><z/></y>;} while(({ set __iterator__ __noSuchMethod__ (yield;, prop) { return yield @foo } ,  set prop __proto__ (({ function::__parent__: __noSuchMethod__, x::__noSuchMethod__: yield }))window.__noSuchMethod__ = <y><z/></y> }));");
