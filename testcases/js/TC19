
tryItOut("if( '' ) { if (<x><y/></x>) {continue ; } else const prop;}");
tryItOut("switch(__parent__.hasOwnProperty(\"__proto__\").constructor) { case [eval(\"throw <><x><y/></x></>;\", (undefined <<= @foo))]: break; throw __iterator__; const constructor; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] =  /x/g  in this) return;");
tryItOut("{(undefined);\nexport *;\n }");
tryItOut("switch(<><>(prototype+=(@foo.throw(this)))</></>) { case __iterator__: case ((eval(\"(\\n /x/ )\", ((uneval(*))))))(((function ([y]) { })())) for each (__parent__ in (yield window)) for (prop.__count__ in *::*) for each (__iterator__ in <x><y/></x>) for each ( for each (__proto__ in <><x><y/></x></>) if ( \"\" ) in >): break; default: yield;break; case 6:  }");
tryItOut("if([] = (((-0) << <x><y/></x>.@foo).__iterator__ = /*__iterator__.__count__ = <><x><y/></x></> ? 1.2e3 :  /x/ )\r) {{new Function{\n} }continue M; } else  if ( ''  .@*:: 1.3 .@x:: [[]]) {} else {(__proto__);do {const __parent__ = __proto__, __noSuchMethod__; } while((window) && 0); }");
tryItOut("new Function");
tryItOut("/*infloop*/for(#0=[3/0]; Number(({ __proto__: prototype })).prototype; (new <y><z/></y>(false))) {yield [,,];continue L; }");
tryItOut("if((__count__ = [[]])(++(function(q) { return q; }))) while(([,,] === <><x><y/></x></>.unwatch(\"__noSuchMethod__\")) && 0){return; }");
tryItOut("/*infloop*/for((__parent__ =  /x/ ); (this.__defineSetter__(\"__noSuchMethod__\", [[]])); ( /* Comment */__noSuchMethod__)) /*infloop*/for(__iterator__/*\n*/.__noSuchMethod__ setter= Math.sin; ((( /x/g ).__defineSetter__)(1e4 * <x/>, <x/>)); this.__defineSetter__(\"constructor\", ({}).__lookupGetter__)) ");
tryItOut("M:if(@) {return <x><y/></x>; } else {continue ;return constructor; }");
tryItOut("/*infloop*/for(constructor; <bbb xmlns=\"(#1=[#1#].eval(<x><y/></x>))\"> </bbb>; constructor.prototype) {M:switch(4.) { default: break;  } }");
tryItOut("M:while(((__count__ = true)) && 0){return; }");
tryItOut("yield;");
tryItOut("/*infloop*/while(function ([y]) { }){throw false; }\nlet constructor;");
tryItOut("while((( /x/  / *::*)) && 0)export *;");
tryItOut("/*infloop*/for(({ __parent__: prop, prop: __noSuchMethod__ }) = (this.zzz.zzz); ((Function).call(1e+81, )); <y><z/></y>) export __iterator__;");
tryItOut("L:if((__noSuchMethod__(true))) { if (-this @ constructor = @foo .@x:: (-this)) {(<x/>);gc() } else {return;let prop = @foo; }}");
tryItOut("/*for..in*/for(var [ /x/ ]['__count__'] in  /x/ ) {true; }\n/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in __parent__) gc()\n");
tryItOut("if(__count__ = RegExp(<y><z/></y>, 1e-81)) { if ((__parent__.(null.__lookupGetter__(\"__parent__\")))) {export *; } else yield;}");
tryItOut("throw constructor;");
tryItOut("return;");
tryItOut("{if(1e81)  else prop, prop;with/*\n*/({__proto__: <x/>})export *; }switch((__iterator__.watch(\"__parent__\", <><x><y/></x></>)), 0.1.__count__ =  \"\" ) { default: break; case (new ('haha'.split)()): continue L;break; case <x/>.isPrototypeOf(null): gc()break; if(<x><y/></x>) {prototype = <x><y/></x>, __count__ = null; } else  if (#3={a:#3#}) gc() }");
tryItOut("/*for..in*/for(const __iterator__ = new ( '' )(__noSuchMethod__ = __proto__, __parent__:  /x/g ) in [[]]) {yield this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [15,16,17,18].some(function(q) { return q; }, \nnew (function(q) { return q; })())) {with({}) { yield <><x><y/></x></>; }  }");
tryItOut("/*infloop*/for(let \f({ prop: prop, __noSuchMethod__: function::__iterator__ }) = ('fafafa'.replace(/a/g, (undefined).watch)).__defineGetter__(\"prop\", (<x><y/></x>).apply); ((({}).__lookupGetter__ = __noSuchMethod__) ^ ><xxx>{function::__iterator__}</xxx></>');  \"\"  >> (-0)) export *;");
tryItOut("if(window) {throw <><x><y/></x></>;0.1; } else  if ([,]) new Function");
tryItOut("if([15,16,17,18].sort(Function, (window >  /x/g \f) -= constructor.__noSuchMethod__ getter= Function)) {{}throw [,,]; } else  if ((yield <><x><y/></x></>.__lookupGetter__(\"__proto__\"))) prop; else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in (prototype =  \"\" ) << (this @ \f<><x><y/></x></>)) {gc() }");
tryItOut("{let (__count__ =  /x/ , __parent__) { function (prototype, prototype)({a2:z2}) } }");
tryItOut("let prototype\n");
tryItOut("var __iterator__ = <><x><y/></x></>;");
tryItOut("(@foo)");
tryItOut("/*infloop*/M:do export *; while((__count__[' for each (__count__ in function(id) { return id })'] = ({__noSuchMethod__: <x/>, __iterator__: window })));");
tryItOut("switch(true) { default:  }");
tryItOut("/*for..in*/for([__iterator__, constructor] =  /x/g  in ('fafafa'.replace(/a/g, [1,2,3,4].slice))) {export *;L:while((constructor.constructor setter= 1.3) && 0)if(1.2e3) export *; else x::__noSuchMethod__ }");
tryItOut("with({}) prototype = __proto__;");
tryItOut("/*infloop*/M:for(var __noSuchMethod__ = __iterator__;  \"\" ; <x><y/></x>) __parent__ = *::*/*infloop*/M:do return; while(<x/>);");
tryItOut("/*infloop*/while(((yield undefined)))export prop;");
tryItOut("for(let y in []);\n/*for..in*/M:for(let [ /x/g , __iterator__] =  /x/g  in [[]]) gc()\n");
tryItOut("do {} while((*::*) && 0);/*infloop*/L:for(var __proto__; (<x><y/></x> -=  /x/ ); let (__noSuchMethod__ = {}) 3) throw 0;");
tryItOut("/*infloop*/M:while((__noSuchMethod__ = \n<x/>))return (-0);M:if(((window)(<><x><y/></x></>, <><x><y/></x></>))) {gc()export *; } else export *;return;");
tryItOut("switch(( '' .__lookupGetter__(\"__count__\").unwatch(\"prototype\"))) { case {} ? ((<y><z/></y>)[__count__])['fafafa'.replace(/a/g, function(y) { yield y; yield;; yield y; })] : #0=undefined .@x:: (p={}, (p.z = window)()): break;  }");
tryItOut("/*infloop*/L:for(var __parent__; 033; <><x><y/><\f/x></>) yield");
tryItOut("{return;return; }");
tryItOut("return;");
tryItOut("return [,,].watch(\"__count__\", Function);");
tryItOut("if(<><x><y/></x></>) continue M; else {gc() }");
tryItOut("L: return;");
tryItOut("new Function");
tryItOut("with({}) let(__parent__ = (<xxx>{__proto__}</xxx>.(<><x><y/></x></>.__iterator__ = <><x><y/></x></>)), __count__ = <x/> .@ 0) { let(__count__) { return __iterator__;");
tryItOut("with({}) { break ; } ");
tryItOut("if( /x/ .valueOf(\"number\")) {return; }\t else  if (@foo.__lookupGetter__(\"__count__\")) let __noSuchMethod__ = -1;");
tryItOut("(3);");
tryItOut("{throw <><x><y/\f></x></>; }");
tryItOut("/*for..in*/for(let __count__ in .2) continue M;");
tryItOut("if(({ set prototype __noSuchMethod__ () { yield __parent__.constructor = (constructor = __proto__).valueOf(\"number\") }  })) {(1 for (x in [])){} } else  if (*) Math.sin");
tryItOut("/*infloop*/do window; while(let (prototype = 0, __proto__ = <x/>) prototype = *);");
tryItOut("while((++([<><x><y/\n></x></>.throw(this)]).@foo) && 0){/*infloop*/for(const prop; prototype.__iterator__ getter= Function; new ((p={}, (p.z = false)()))()) {/*infloop*/for(let ({ constructor: __count__, __proto__: __proto__ }) = @foo =  '' ; #0=[this]; *::* == ({a2:z2})) let prototype = window,  /x/g  = this;{}\n } }");
tryItOut("if([undefined].watch(\"__iterator__\", function  prop ([]) { yield <x><y/></x> .. this//h\n } )) {Math.sin } else  if ((String(<x><y/></x>.propertyIsEnumerable(\"__count__\")))) (<x><y/></x>); else __parent__;");
tryItOut("/*for..in*/M:for(var constructor = (p={}, (p.z = ('fafafa'.replace(/a/g, ((1 for (x in []))).call)))()) in {export __noSuchMethod__; }) {__parent__ = __count__; }");
tryItOut("/*for..in*/for(const [__count__, __proto__] = new (3)() in ({})) {gc()break ; }");
tryItOut("/*for..in*/L:for(const [__iterator__, [[({ __parent__: prop, prototype: ({ function::constructor: ({ __noSuchMethod__: prototype, constructor: [, ({ __noSuchMethod__: each, constructor: __count__ }), , , prop] }), __count__: ({ __parent__: ({ getter: __count__ })\f, __count__: ({ prop: prop }) }) }) })]]] = ((this != <x><y/></x>) < [11,12,13,14].map[4. , try {  } finally { each, prototype =  ''  } ] *= const __parent__, __parent__ = window for (__parent__ in __proto__) for each (__noSuchMethod__ in __parent__).throw(constructor)) in constructor( '' )) {with(case (<x><y/></x>(*::* > prototype, @foo)): /*for..in*/for(let prototype in <x><y/></x>) gc()case 1: let (__parent__ = null, prototype) { throw @foo; }break; )/*infloop*/for(({function::__noSuchMethod__:  /x/ }); ((( '' ).__defineSetter__)(window)); __proto__ = <><x><y/></x></>) {yield <><x><y/></x></>;export prop; } }");
tryItOut("/*infloop*/for( /* Comment */(<><x><y/></x></>\ntry { return true; } catch(__iterator__ if []) { throw window; } catch(prop) { break ; } finally { {} } ); prop.prop = <y><z/></y>; (delete <><x><y/></x></>)) export *;");
tryItOut("/*infloop*/for(__iterator__; ; __noSuchMethod__ !== this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty) | __noSuchMethod__.__proto__ = false .@ ) {L: {gc() } }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = <><x><y/></x></> in @foo) throw <x><y/></x>;");
tryItOut("/*for..in*/for(var (__iterator__) in ((function(q) { return q; })((this.zzz.zzz))))__proto__;");
tryItOut("while((([15,16,17,18].filter(/a/gi, 033))) && 0)let (__proto__, __count__) { throw 3.141592653589793; }");
tryItOut("if(3--) {yield;(null); } else {export *; }");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = (<x><y/></x>)[#3={a:#3#}].watch(\"__noSuchMethod__\", [1,2,3,4].map).valueOf(\"number\") in (eval(\"return  /x/g ;\", (constructor)[<x/>])).__lookupSetter__(\"prototype\")) {export *; }");
tryItOut("{let (__proto__ = 0/0) { return @foo;/*\n*/ }return; }");
tryItOut("while((null) && 0)L:switch(typeof *::*.__defineSetter__(\"prototype\", [1,2,3,4].slice)) { case 3: export *; }");
tryItOut("/*infloop*/for([15,16,17,18].filter(function (__noSuchMethod__) { yield <><x><y/></x></> } , (@foo.isPrototypeOf(-3/0))); .2--; new <x><y/></x>.propertyIsEnumerable(\"prototype\")) export __parent__;");
tryItOut("/*infloop*/while([[<><x><y/></x></>].some(/a/gi) for (constructor in (-1)) for (__parent__ in true)]){gc()if(<x><y/></x>) { if (window) {{}return  /x/g ; }} else {} }");
tryItOut("do /*for..in*/for(var __parent__ = <y><z/></y> in window) let each = window, constructor = this; while((new Exception(false *=  \"\" )) && 0);");
tryItOut("prop = __proto__;");
tryItOut("L:do {} while((@foo) && 0);");
tryItOut("/*for..in*/for(const ((!<x/>))([15,16,17,18].filter(this, @foo)['__parent__'] = ( ? (new (true)(null, undefined)) : new Boolean(<x/>, null))) in (((return).apply)(((<x><y/></x>)[*]))))while(((constructor.prop).valueOf(\"number\")) && 0){return;/*infloop*/for(var __count__; <x/>; [,]) {{}export __count__; } }");
tryItOut("this.zzz.zzz\n");
tryItOut("/*infloop*/while(__noSuchMethod__)export *;");
tryItOut("/*infloop*/for(const prop = @foo; false; true) {(<x><y/></x>); }");
tryItOut("/*for..in*/for([prototype, __proto__, ] in <x><y/></x>.isPrototypeOf(this)) throw prop");
tryItOut("with({}) for(let y in [5,6,7,8]) throw prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop(0.1) in eval(\"gc()\", *)) __noSuchMethod__ = \n<><x><y/></x></>");
tryItOut("{let __parent__ =  '' ;gc() }");
tryItOut("const __noSuchMethod__\n\f");
tryItOut("/*for..in*/for(const [__count__, __proto__] = __iterator__.__count__ = null >= #1#.__defineGetter__(\"__noSuchMethod__\", function (prototype) { return -1 } ) in <x><y/></x> for each (__parent__ in <y><z/></y>)) {var __proto__ = #3={a:#3#};/*for..in*/for(const __proto__\t in <y><z/></y>) gc() }");
tryItOut("/*for..in*/for(const (Math.pow).__noSuchMethod__ in ((({}).__lookupGetter__)((__iterator__() ? <x><y/></x>.__defineGetter__(\"prototype\", function  __parent__ () { return <x><y/></x> } ) : (*).propertyIsEnumerable(\"__count__\")) .@*:: new (this for (x::__count__ in <><x><y/></x></>)).watch(*::*, ((p={}, (p.z = <><x><y/></x></>)()))))))(4.).__defineSetter__\nyield;\n const constructor;");
tryItOut("{{__noSuchMethod__; }{export __noSuchMethod__; } }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in ((function () { return (__noSuchMethod__ = <y><z/></y>) } )(#1=[ /x/g ])))throw __count__;");
tryItOut("for(let y in []);");
tryItOut("{gcexport __noSuchMethod__; }");
tryItOut("if(__parent__, *) {const constructor; } else  if (prop) *::*;");
tryItOut("return (__proto__ && this);");
tryItOut("M:while(((constructor =  \"\" )) && 0)/*infloop*/while(-3/0.__lookupSetter__(\"__parent__\"))({});");
tryItOut("with({}) { for(let y in [5,6,7,8]) yield new  /x/ (); } ");
tryItOut("if(@foo) continue ; else  if (<><x><y/></x></>) {<><x><y/></x></>; }");
tryItOut("switch((\n(uneval(prototype)).*)) { default: case 7: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in __proto__) ;");
tryItOut("with(<y><z/></y>.constructor.watch(\"__count__\", Math.sin)){yield <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:do {var constructor =  /x/g ;throw false; } while((new [<x><y/></x>].some(Function)(<xxx>{__noSuchMethod__}</xxx> &= true)[eval(\"return false;\", ((-0)\n)) % __proto__.__noSuchMethod__ = window]) && 0);");
tryItOut("if(<><x>< /*><//x><\t/>)  else  if (<><x><y/></x></>) {#3={a:#3#}; } else return;");
tryItOut("if((yield __count__)) { if ([<><x><y/></x></>]) {return;; }} else {(true); }");
tryItOut("(window)\n");
tryItOut("/*infloop*/for(let constructor; new prop.*(); [eval(\"[,,];\", <><x><y/></x></>)].some((null).watch)) throw prototype;");
tryItOut("L:if(yield  \"\" ) { if (0) {export prototype; } else var __proto__ = <x><y/></x>, prototype = 033;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in 'fafafa'.replace(/a/g, function(q) { return q; })) L: {throw __proto__;(<x><y/></x>); }");
tryItOut("/*infloop*/M:do {(window); } while();");
tryItOut("/*infloop*/for(const window['__iterator__'] = (((function  prop (__count__, prototype) { yield window } )/*\n*/(false)).__defineSetter__).call((this.zzz.zzz)(<><x><y/></x></>.watch(\"constructor\", function (__iterator__, prototype) { export prop; } )).propertyIsEnumerable(\"__parent__\"), (\n \"\" )); .2.throw(*::*).watch(\"constructor\", function (prototype) { yield  \"\"  } ).propertyIsEnumerable(\"__parent__\"); (new function ()<><x><y/></x></>(__noSuchMethod__ =  '' )).throw(((<x><y/></x>.isPrototypeOf([1,,])).*))) {__iterator__ = __parent__; }");
tryItOut("/*for..in*/for(let __count__ in ((Function)(null))){return; }");
tryItOut("/*for..in*/M:for(let __parent__ = ((yield 'fafafa'.replace(/a/g, Math.pow))) in ( ''  << <x><y/></x>.valueOf(\"number\"))) throw <y><z/></y>;");
tryItOut("{with(3/0) }");
tryItOut("if(<y><z/></y>) { if (<bbbxmlns:ccc=\"#1#/*\"><ccc: null eee></ccc:eee></bbb>.(({}))) {/*infloop*/for(__iterator__; window; 3.141592653589793) return  /x/g ; }} else /*for..in*/for(const [ for /*\n*/(__count__ in this), __count__] = this in this) let try { let prop; } finally {  } ;");
tryItOut("[1,2,3,4].slice");
tryItOut("M:with({__count__: [z1,,]}){false; }");
tryItOut("/*for..in*/for(const ({ __parent__: __noSuchMethod__ }) in <x><y/></x>) /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in null) ");
tryItOut("M:\fif(((<><x><y/></x></>).__defineSetter__() @ (window.eval(<y><z/></y>) ^= __count__ = window))) yield ({});");
tryItOut("/*infloop*/M:for(let ({ prototype: __count__, prototype: constructor }) = prototype = *; gc; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> >>> __proto__.__parent__ >>>=(({ prop: [], __proto__: ({ constructor: constructor, prop: prop }) }) = __iterator__)) L: {export constructor;continue L; }");
tryItOut("/*infloop*/M:for(<>((\n{__proto__: __proto__, __parent__:  ''  }))</>.((p={}, (p.z = \nundefined)())); ( = (<x><y/></x>.__lookupGetter__(\"__count__\")) = <y><z/></y> / __count__); (-0)) {throw (1.3 for each (__parent__ in true)); }");
tryItOut("with({__iterator__: (prop.__proto__ getter= [undefined])}){throw (-1); }");
tryItOut("if(null) { if (this * (\n1e81)) {throw *;let __iterator__;throw __proto__; }} else export constructor");
tryItOut("/*infloop*/M:while(__iterator__ = (<x/> .@*:: <y><z/></y>)){yield; }");
tryItOut("while((({__parent__: false})) && 0){{}{} }");
tryItOut("/*for..in*/for(prototype in ((<x><y/></x>)(1e4)))return undefined;let (__parent__ = *::*) { eval }");
tryItOut("/*for..in*/for(const prop in undefined) {throw undefined;{switch(false) { default: throw __parent__; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in window) \t{;__count__, __noSuchMethod__; }");
tryItOut("/*infloop*/ get __noSuchMethod__(__proto__, constructor)this");
tryItOut("if((x::__count__ = prop) instanceof prototype = 033) {/*infloop*/for(let prop; 5.0000000000000000000000; ({__parent__ getter: /a/gi })) [setter, , , , __proto__] } else {/*for..in*/for(const ({ __proto__: prototype, __parent__: ({ __parent__: __count__ }) }) = [,] .@ true in  \"\" ) gc()export __count__; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((((this).isPrototypeOf(this.__defineSetter__(\"__iterator__\", [1,2,3,4].map))).valueOf(\"number\")).apply)((function(q) { return q; }).call\t))){if((<x/> ^ __proto__.unwatch(\"__proto__\"))) {let __count__; } else {/*\n*/export *; }new Function }");
tryItOut("constructor");
tryItOut("[, prop]");
tryItOut("/*infloop*/while(<{constructor}> </{constructor\f}>){ }");
tryItOut("export __noSuchMethod__; const prop\n{ }");
tryItOut("/*infloop*/for(window ? (__iterator__.valueOf(\"number\")) : ((<><x><y/></x></> for (constructor in 5.0000000000000000000000))); (#2=5.0000000000000000000000).valueOf(\"number\"); ([__parent__.prop = this /= @foo].sort('haha'.split))) {if(#1# >>> prototype)  else yield *::*;{with({__iterator__: getter})(<><x><y/></x></>); } }");
tryItOut("let(constructor = window.__defineSetter__(\"__parent__\", [1,2,3,4].map).hasOwnProperty(\"prop\"), __proto__ = new new window(<><x><y/></x></>)(<x/>)) ((function(){with({}) { return; } })());");
tryItOut("if([] = prototype%=(true != 1.2e3)) ({)var __iterator__;\n }");
tryItOut("yield;*, prototype = false;");
tryItOut("while(((*::*(window))\n) && 0)/*for..in*/for(let [__iterator__, __count__] = (yield function ([y]) { }.__count__ = <y><z/></y>) in __noSuchMethod__.prototype setter= 'haha'.split >>> Math.pow) {return true;{} }");
tryItOut("yield <x/>.__defineGetter__(\"__parent__\", (<y><z/></y>).watch);");
tryItOut("M:switch(new ((1 for (x in [])))(null, -0)) { case 6: case 6:  /x/ ;break ;break;  }");
tryItOut("/*infloop*/while((((typeof (false[null])))(prop, constructor.__defineGetter__(\"prototype\", ({}).hasOwnProperty)))){yield }");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] in constructor =  /x/ ) (<><x><y/></x></>);");
tryItOut("__proto__");
tryItOut("let (__parent__) { continue ; }");
tryItOut("M:if(new __parent__([z1,,], null)) {__proto__ = [,,], __iterator__ = <x><y/></x>\n/*infloop*/for(constructor = this;  '' ; false) throw true;yield; } else  if ((( \"\" ).call((return), )--)) {return false;Math.pow }");
tryItOut("/*infloop*/for(var __count__; ((yield true)); --<y><z/></y> ^= window) {if(__parent__) {(@foo); } else  if (arguments.constructor = 4.)  else export *; }");
tryItOut("{yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <y><z/></y>) {export setter; }");
tryItOut("yield *::*;");
tryItOut("{}M:do (function(q) { return q; })(__proto__, *::*); while((({a1:1})) && 0);");
tryItOut("return;");
tryItOut("if([,]) {yield;yield; } else  if ([1]) ([z1]); else function(q) { return q; }");
tryItOut("if(([try { yield; } catch(prototype) { throw <><x><y/></x></>; }  = @foo].some(null))) { if ((( '' ).apply).call(*, ).__defineGetter__(\"__parent__\", (/a/gi).call)) {break ; }} else continue ;");
tryItOut("\t{}");
tryItOut("/*infloop*/for(__parent__; ((eval(\"this\", prototype))(__noSuchMethod__.__parent__ = <><x><y/></x></>, <x/>)); new (function ()undefined)()) switch((__noSuchMethod__.prop = <x/>)) { case (__count__): ;break; export prop;break; case 4: break;  }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(const __count__ in ((((* ^ 0.1)).__defineSetter__)(eval(\"<x/>\", undefined)))){({}).__lookupGetter__yield  /x/g ; }");
tryItOut("L:if(this) { if ((({__noSuchMethod__ getter: function  __iterator__ ()@foo, constructor: (3/0 >= <x><y/></x>) }))) {{;export __parent__; } } else /*infloop*/L:for(let ({ prototype: __parent__ }) = (<x><y/></x>.valueOf(\"number\")); [*]; typeof 1.2e3.__noSuchMethod__) {/*for..in*/for(prop in (((constructor).watch)(false))) }}");
tryItOut("let (__noSuchMethod__ = ( /x/g [(/a/gi).call(this, )++]), prop = prop(<x><y/></x>)%=) { prototype }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = void  (.2\n), prototype = [1,,] <x/>(<x><y/></x>.__proto__)  in new undefined(__count__) += <x/>.throw(*)) /*for..in*//* nogeckoex bug 349964 */ for  each((((new Function(\"var __count__;\"))).call(<x><y/></x>, true)) in  /x/g ) export *;");
tryItOut("if(true--) L: {throw prop;{} }");
tryItOut("while((<><x><y/></x></>) && 0){yield;3/0; };");
tryItOut("throw ({a1:1});");
tryItOut("/*infloop*/L:for(undefined; <x><y/></x> @ constructor; function(q) { return q; }(@foo)) continue M;");
tryItOut("/*for..in*/M:for(var [prop, prop] = ((typeof <y><z/></y>) != ({}).__lookupGetter__) in false) yield constructor;");
tryItOut("/*for..in*/for(var [__iterator__, prop] =  = __iterator__ = <x/> in <x><y/></x>) break ;");
tryItOut("if((undefined.constructor)\n) { if (1e+81) {return;return undefined; }} else {}");
tryItOut("/*for..in*/for(var __count__ in @foo) __noSuchMethod__(5.0000000000000000000000) const x::__iterator__;");
tryItOut("/*for..in*/for(const __parent__ = window.__count__.throw(this.__defineGetter__(\"__proto__\", Math.sin)) in constructor) let __noSuchMethod__ = <y><z/></y>, __noSuchMethod__ = set;");
tryItOut("if((({ constructor: __proto__, constructor: prototype }) = __iterator__.prop)) {__noSuchMethod__, __iterator__ = [1,,];__parent__ = *, __count__ = __noSuchMethod__\t; } else {}");
tryItOut("/*for..in*/L:for(var \f(-3/0.__count__)((uneval(prototype)) *= <x/>.*) in __parent__ = <y><z/></y>) const constructor;");
tryItOut("/*infloop*/for(((this if ([,,]))); window; null ,  ''  ? *-- : *::* = <x/>) M:if(('fafafa'.replace(/a/g, ({}).__lookupGetter__))) {; } else  if (eval(\"(__parent__ = ( /x/ [*]))\", [<><x><y/></x></>] << eval(\"<>\\n<x><y/></x></>\", <><x><y/></x></>))) let prop = <><x><y/></x></>; else ");
tryItOut("do  while((0.1) && 0);");
tryItOut("{null; }");
tryItOut("let (prop = new (function (__count__) { return [z1] } )(<x><y/></x>)) { yield <x><y/></x>; }\n/*infloop*/while(<x/>){}\n");
tryItOut("each = __noSuchMethod__;");
tryItOut("if(([[__iterator__].some(undefined)].sort(Math.pow))) (this); else  if (<><x><y/></x></> -  '' [prop = ]) /*for..in*/L:for(const __iterator__ in prototype) {}return 033;");
tryItOut("export __proto__;\nconst __noSuchMethod__ = __parent__, prototype;\n");
tryItOut("/*infloop*/M:for(<y><z/></y>; (({__count__: <><x><y/></x></> })\n);  '' ) {}");
tryItOut("export __count__;gc()");
tryItOut("yield\n");
tryItOut("/*infloop*/for(const [] = 'fafafa'.replace(/a/g, Function); \nprototype = <x><y/></x>; [,,z1].__iterator__) {M:while(((#2=[<y><z/></y>])) && 0){(<y><z/></y>); }let __noSuchMethod__, __parent__ = 1.3; }");
tryItOut("/*for..in*/for(let  /x/ ['prop'] in ((function(y) { yield y; yield  \"\" , <x/>;; yield y; })(__count__ ? *::* / [1,,].__iterator__ : <x><y/></x>))){do yield (function ([y]) { })(); while((this) && 0); }");
tryItOut("if(<x/>) { if (<><x><y/></x></>) {return prop;export *; } else var __noSuchMethod__ = undefined;}");
tryItOut("L: {__parent__let constructor = <x><y/></x>, prop = 0.1; }\ncontinue ;\n");
tryItOut("if([(<x><y/></x> *= \t /x/g )--]) {;[1,2,3,4].map const (1 for (x in [])); } else  if ( /* Comment */(<x><y/></x> > window)) {L: {var  { yield <x/> } ; }with({prop: __proto__}){<><x><y/><\f/x></>; }\nif(__iterator__) yield; else  if (yield 0x99;) {gc() }\n } else /*for..in*/for(const prototype = 3/0.propertyIsEnumerable(\"constructor\") in <><x><y/></x></>) ;");
tryItOut("/*for..in*/for(var __parent__ = .2 in <x/>) var prop;");
tryItOut("{M:if(@foo) __parent__; else  if ((<x><y/></x>.hasOwnProperty(\"prototype\"))) export *; else {return; } }");
tryItOut("/*infloop*/for(let [, [__parent__, __proto__, ], __noSuchMethod__] = prop%=this; <xxx>{__proto__}</xxx>.(<x/> <= true); __proto__.unwatch(\"__parent__\").valueOf(\"number\")) throw  /x/g ;");
tryItOut("<><x><y/></x></>;");
tryItOut("if([false in <y><z/></y>.__iterator__].sort('haha'.split)\t) {yield [,,z1]; } else  if ((eval(\"export *;\", (yield <x/>.watch(\"function::prop\", true))))) __count__ = this, __parent__; else /*infloop*/M:for([[]]; window; ) gc()");
tryItOut("/*infloop*/while(__noSuchMethod__ = <x/>){/*for..in*/L:for(__proto__ in <><x><y/></x></>) <x><y/></x>return; }");
tryItOut("break ;");
tryItOut("with({__parent__: ()}){if([function::constructor].filter(0/0)) ; else  if ((<><x><y/></x></> .@x:: constructor)) export *; else return; }\t");
tryItOut("if([11,12,13,14].some) gc() else var __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("if(__proto__) {var __count__ =  \"\" , __count__; }");
tryItOut("this.zzz.zzz;");
tryItOut("while(([,]) && 0){(undefined);export *; }");
