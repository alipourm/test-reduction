tryItOut("L:if((\f((prototype.(<x><y/></x>)) if (constructor = true)))) { } else {\t;constructor, __parent__ = prototype; }");
tryItOut("if(@foo) {(window); } else let __proto__ = <x><y'/></x>, prop;");
tryItOut("if(( \"\"  |= <x/>)) {throw <y><z/></y>;if(this) gc() else  if (undefined) {export constructor; } } else  if ({} in <x/>) Math.sin else {/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype in <x><y/></x>) yield prop;/*infloop*/while(window)continue ; }");
tryItOut(" get __count__()(p={}, (p.z = ([1,2,3,4].map)(<x/>[ /x/ ]))())");
tryItOut("switch(<x/>) { case (prototype = (function ([y]) { })().isPrototypeOf(__count__)): if((++prop)) export prototype;break; case <> </>(((new Function).call( '' , <><x><y/></x></>, <x><y/></x>).yoyo((yield \ftrue))) .. __parent__, [this]): break;  }");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("if(<x><y/></x>) {gc()export *; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const (eval(\"function(q) { return q; }\", <y><z/></y>))(null.__defineSetter__(\"__iterator__\", eval)) in prop = function ([y]) { }) const __noSuchMethod__ = ({});yield; }");
tryItOut("let prototype = @foo, __noSuchMethod__");
tryItOut("prop = 1e-81\nvar __proto__ = <><x><y/></x></>;");
tryItOut("/*infloop*/do {continue ;yield window; } while(-1.__noSuchMethod__ || function(q) { return q; }());");
tryItOut("/*for..in*/for(const __iterator__ in (((gc).apply)((function (__noSuchMethod__, prop) { yield 1.3 } ())())));");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {/*infloop*/for(((yield window)); false.isPrototypeOf(*::*); const __noSuchMethod__, prototype) const __iterator__ = <y><z/></y>, prop; } while(-0);");
tryItOut("/*for..in*/for(var prop in ((function (__count__) { yield 0; } )([,]))){gc()export *; }");
tryItOut("with({__count__: eval(\"yield;\", *).__lookupSetter__(\"prototype\")})for(let y in []);");
tryItOut("if([3 for (prop in window)]) return; else throw <y><z/></y>;");
tryItOut("L:if(eval(\"arguments\", (<x/>.__defineGetter__(\"__proto__\", new Function)))) { } else  if (prop.throw(*::*).watch(\"__parent__\", function(q) { return q; })\r) {}");
tryItOut("if(([<x/>].sort((new Function(\";\"))).__count__ = window.prop = @foo\n)) var __noSuchMethod__, __iterator__; else  if ( '' ) {return __count__;throw  /x/ ; const prototype; } else /*infloop*/L:while([z1]){ continue ; } const prop;");
tryItOut("while((#0=({__proto__: -0.isPrototypeOf(prototype).watch(\"prototype\", new (gc)((-0)))})) && 0)gc()");
tryItOut("with({}) let(__count__ = (null.throw(undefined)) >>= @foo, __proto__ = function  prototype (__parent__, prototype) { return  /x/  }  ^=  /* Comment */<x><y/></x>) { ");
tryItOut("M:if(-1) {export prototype; } else  if (this) break M; else {(<x><y/></x>);export *; }");
tryItOut("if([] ^= [[1]]) {if(0/0) {throw null; } } else  if (__noSuchMethod__) break L; else {gc()export prototype; }");
tryItOut("let(__iterator__) ((function(){throw StopIteration;})());");
tryItOut("{(@foo);const constructor = __parent__, __iterator__ = this; }");
tryItOut("if(*::*.propertyIsEnumerable(\"__parent__\").hasOwnProperty(//h\n\"constructor\")) { if ( '' ) {}} else {return; }");
tryItOut("switch((([15,16,17,18].filter(function (prototype, prop) { continue ; } , <x><y/></x>)) >= true)) { case (<{prop}><!--yy--></{prop}>.(++arguments)): export *;break; let (__proto__) {  }break;  }");
tryItOut("/*infloop*/M:do {return <x><y/></x>; } while(<x><y/></x>);");
tryItOut("constructor = constructor;");
tryItOut("return ({});continue ;;");
tryItOut("with(this)for(let y in []);return;");
tryItOut("while((typeof  /x/ ) && 0){}");
tryItOut("/*for..in*/for(const constructor(#1=[#1#]) in *::* for each (__noSuchMethod__ in (-0))) {export *;export *; }");
tryItOut("/*for..in*/for(let ({ __parent__: __proto__ }) in constructor) {var yield;; }");
tryItOut("if(({__count__: 1.2e3})) 1e-81; else  if (new ({}).hasOwnProperty()) gc() else {export prototype; }");
tryItOut("; const __proto__;");
tryItOut(";/*infloop*/M:while(({a1:1}))( \"\" );");
tryItOut("while(((('haha'.split).call)) && 0){export constructor; }");
tryItOut("L:if(#2=[z1] < this) { if (<><xxx>{constructor}</xxx></>) /*infloop*/while(<><x><y/></x></>)export *;} else var prop = constructor;");
tryItOut("/*for..in*/L:for(let <x><y/></x>['constructor'] in (('haha'.split)(\t#1=({__iterator__: null})))){var __proto__, __count__; }");
tryItOut("if((\n0.1)) {return;let __count__ = @foo, __iterator__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for(__proto__ = (); *; new gc(__proto__.eval(<x/>),  \"\" )) __count__");
tryItOut("/*infloop*/for(let __count__; this\t.__defineSetter__(\"__noSuchMethod__\", __count__ = 1e-81); (__proto__.__iterator__ = function(y) { yield y; ; yield y; })) (undefined.__defineSetter__(\"prop\", 'haha'.split));");
tryItOut("try { __iterator__ = __iterator__; } //h\nfinally { let([] = ( \"\" .__defineGetter__(\"prototype\", ({}).__lookupGetter__)), ({ __parent__: [, , , [], ({ __noSuchMethod__: __proto__, __noSuchMethod__: __parent__ })] })) { this.zzz.zzz; } ");
tryItOut("export *;");
tryItOut("M:while((<y><z/></y> * *) && 0)return;");
tryItOut("M:with(<><bbb xmlns:ccc=\"('fafafa'.replace(/a/g, Math.pow))\"><ccc:eee></ccc:eee></bbb></>){var __noSuchMethod__; }");
tryItOut("yield;");
tryItOut("let (__iterator__) { return; } const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(({ prop: __parent__, __parent__: __parent__ }) in ((p={}, (p.z = <x/>)()))()) {var __iterator__, __count__ = let __parent__, constructor;;if((<x><y/></x> for each (__count__ in window))) {;yield; } else  if (__count__ =  '' ) {let prop; } else (window); }");
tryItOut("; const prototype;");
tryItOut("/*infloop*/for(let [, [constructor, __parent__]] = __parent__.yoyo(this).valueOf(\"number\"); ((null)(1e+81.throw(function ([y]) { }))); prop) ");
tryItOut("/*for..in*/for(var __iterator__ in #1=[#1#]) {continue M; }");
tryItOut("with({prop:  /x/g })return;");
tryItOut("let x::__noSuchMethod__;");
tryItOut("M:if(new Math.sin(new Math.sin(<x><y/></x>), @foo)) const __count__, prop = ({a1:1});");
tryItOut("L: L:with({__noSuchMethod__: [[]]})export *;");
tryItOut("{return; }");
tryItOut("/*for..in*/M:for(({ __proto__: constructor, prototype: prototype }) in ((({}).hasOwnProperty)((yield <><x><y/></x></>).<x><y/></x>))){/*infloop*/for(const [__count__, prototype, __parent__, __iterator__] = 'fafafa'.replace(/a/g, function(id) { return id }); [@foo if (this)]; <x><y/></x>) while((true) && 0)break L; }");
tryItOut("/*infloop*/while(0x99.hasOwnProperty(\"__proto__\").throw(\ftrue.isPrototypeOf(<x/>))){const setter = 1e81, __iterator__ = this;break ; }\r");
tryItOut("/*for..in*/M:for(__parent__ = 0.watch(\"__count__\", (1 for (x in []))) in false) __iterator__ = __parent__, __noSuchMethod__;");
tryItOut("do {let (__count__ = <x/>, prototype = <><x><y/></x></>) { export __noSuchMethod__; }export *; } while((constructor = @foo) && 0);");
tryItOut("with(__count__ = <x><y/></x>){/*for..in*/for(let [prototype, __iterator__] = <><x><y/>\n</x></>\t in  /x/ ) throw  ''  }");
tryItOut("/*infloop*/while((new function (__parent__) { M:if([,,] for each (prop in 5.0000000000000000000000)) ; else  if ([ /x/ ]) {{}return; } } ())){var prop = [,,z1]; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(__proto__ = ({ __noSuchMethod__: [, prototype, __count__, ], __proto__: [__count__, constructor, prototype] })+=(p={}, (p.z = true | __proto__)()) |= (({constructor: *::* }))){/*infloop*/for(( /* Comment */[1,,]((__parent__.([])), [z1,,])); ((<x/> & 1e81).isPrototypeOf(window)); (-1)) break ;export *; }");
tryItOut("for(let y in []);");
tryItOut("with({constructor: <y><z/></y>})/*for..in*/for(__count__ in <><x><y/></x></>) export prototype;");
tryItOut("let (__parent__) { yield; }");
tryItOut("{while((<x/>) && 0)const __count__, __noSuchMethod__; }");
tryItOut("/*infloop*/while(({ __proto__: (throw __iterator__;)(<x><y/></x>), __proto__: [prop] }) =  /x/g  .@*::  /x/  -= try { yield  \"\" ; } finally { function(q) { return q; } } )do yield; while((prop.__count__ = (p={}, (p.z = <><x><y/></x></>)())) && 0);");
tryItOut("/*for..in*/\ffor(var prop in (('haha'.split)(\n__parent__)))throw <x><y/></x>;");
tryItOut("<x><y/></x>;");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = * in  /x/g ) {throw 1.2e3; }\nthrow <x><y/></x>;\n");
tryItOut("break ;");
tryItOut("this.zzz.zzz;");
tryItOut("if((__noSuchMethod__ = prop.__proto__ getter= (1 for (x in [])))) ; else  if (prototype.__noSuchMethod__ getter= Math.pow) {__count__; }");
tryItOut("with(( /x/g .@*.__iterator__ = [this].some(([1,2,3,4].slice).apply)))const prototype, __proto__;");
tryItOut("throw null");
tryItOut("__noSuchMethod__;");
tryItOut("if(<x><y/></x>) {;//h\n } else (<><x><y/></x></>);");
tryItOut("if(window - __proto__) throw true; else  if (<y><z/></y>(<x><y/></x>, *)) { /x/g ; }");
tryItOut("{if(()) /*for..in*/for(prototype = <x/> in #1#) return this; else  if (*::*.hasOwnProperty(\"__iterator__\").throw(gc(false, window))) export *\n<x/>;return; }");
tryItOut("/*for..in*/for(let constructor in __count__ =  get __noSuchMethod__()<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) {/*infloop*/do {\texport __iterator__;__iterator__, __parent__ = prop; } while((<><x><y/></x></>)()); }");
tryItOut("/*for..in*/for(var __count__ in (([,] != (function ([y]) { })())((#1# <=  /x/g ))))export __noSuchMethod__\n");
tryItOut("return;const prop, __proto__ = false;");
tryItOut("M:if((.2( for each ()__proto__/ in  \"\"  .2 ))) { if (([11,12,13,14].filter)) __parent__, __parent__;} else let __noSuchMethod__, __iterator__ = this;");
tryItOut("/*for..in*/M:for(var prototype = <y><z/></y> in <x><y/></x>) {(undefined);yield; }");
tryItOut("\tswitch(__iterator__ = constructor >>>=(__iterator__ = <x/>).throw(prototype = <><x><y/></x></>)) { case 9: break; break; break;  }");
tryItOut("if(prop = (let (__parent__ = __iterator__, __count__) .2.eval([,] >> constructor setter: (*::*).watch))) { if (__parent__) {M:with(false){throw <><x><y/></x></>; } } else { }}");
tryItOut("if(__proto__ = [1,,]) { if (prop = __noSuchMethod__) {gc() }} else yield;");
tryItOut("L: \tvar __proto__;");
tryItOut("/*infloop*/for(__count__.getter= .2;  \"\" ; 3.141592653589793) <x/>;");
tryItOut("let (__proto__ = function ([y]) { }\n) { yield #2=({__count__:  \"\" });\f }");
tryItOut("/*for..in*/M:for(const  '' ['__noSuchMethod__'] in __parent__) {yield; }");
tryItOut("switch(({__iterator__: prop%=<x><y/></x>.__defineSetter__(\"prototype\", (function  prototype (__count__, __iterator__) {  } ).call) })) { default: L: {export prototype;gc }break; case *::*: let prototype = 4., __parent__;break; export __count__; }");
tryItOut("if(new (({__noSuchMethod__ setter: new Function, prototype: [,,] }))()--) {if((__count__ = <><x><y/></x></>)) {do {gc() } while((null) && 0); } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee> ? *.__parent__ : <y><z/></y>) (undefined); } else  if (.throw(__parent__.__parent__ = true)) {(function(y) { yield y; ; yield y; }).applyreturn [[1]]; } else throw [11,12,13,14]\t.sort;");
tryItOut("/*infloop*/for(const __count__; (true[ \"\" ])[(__noSuchMethod__.__count__ getter= [1,2,3,4].slice.__lookupSetter__(\"prototype\"))]; [11,12,13,14].map) ;");
tryItOut("for(let y in [5,6,7,8]) with({}) { with({}) { (this)(<x/>) = prototype; }  } ");
tryItOut("let __noSuchMethod__;\n{let prop, constructor =  '' ; }\n");
tryItOut("/*for..in*/for(const constructor = __iterator__ = __proto__.__parent__ in  /* Comment */<y><z/></y>) Math.pow\nL: export __count__;\n");
tryItOut("\n");
tryItOut("with({}) { with({}) __noSuchMethod__ = __count__; } ");
tryItOut("switch((( /x/g )(*.@*, <><x><y/></x></>))) { case 5: break; case 1: /*for..in*/for(__noSuchMethod__ in (([1,2,3,4].slice)( \"\" )))(<x><y/></x>); }");
tryItOut("while((__parent__) && 0){L: prototype, __parent__;yield; }");
tryItOut("while((({prototype setter: function  prop (__proto__) { yield this.propertyIsEnumerable(\"prop\") }  })) && 0){throw prop; \"\" ++ }");
tryItOut("const \fprototype;");
tryItOut("/*infloop*/do {/*for..in*/for(const __proto__ = __noSuchMethod__ in this) {;return constructor; }\nexport *; } while(new [1,2,3,4].slice(*, <><x><y/></x></>));");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(let prop in (((prototype = prop).watch)(({}) .. <><xxx {__parent__}={.__defineSetter__(\"__count__\", function (__parent__, __count__) { (function ([y]) { })() } )} /></>)))/*for..in*/for(let __iterator__ = ({ function::prop: __iterator__ }) = (<x><y/></x>[3/0]) in .2) { }");
tryItOut("/*for..in*/for(prototype in (([15,16,17,18].some(gc, undefined).unwatch(\"Date()\"))((eval(\"const prototype, prototype;\", (RegExp(__parent__,  \"\" ) != RegExp(__proto__, <x><y/></x>))))))){continue M;if(<x/>) { if (window) {<x><y/></x>;; }} else {continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in eval(\"\", <x/>)) gc()");
tryItOut("L:with(__parent__ %= __iterator__.yoyo(new (gc)()))return <x><y/></x>;");
tryItOut("while(( \"\" ) && 0){const prop = undefined, __count__ = ({a1:1});const prototype; }");
tryItOut("/*infloop*/for(var ({ prototype: ({ constructor: prototype, constructor: [({ __iterator__: ({ __iterator__: ({ __count__: ({ __count__: prop, __noSuchMethod__: __iterator__ }) }), prototype: ({ __parent__: [] }) }) })] }), __parent__: [, , ] }) = new ( '' )(((3.141592653589793).__defineSetter__), false); (p={}, (p.z = <{__count__}><ccc:ddd>yyy</ccc:ddd></{__count__}>.(window\f))()); (constructor)) if(3/0--) {0/0; } else  if (/*infloop*/for(var prototype; <y><z/></y>.hasOwnProperty(\"__noSuchMethod__\"); ()) { /x/g ;; }) {throw true;(<y><z/></y>); } else return;");
tryItOut("throw StopIteration;");
tryItOut("return new (1e81)(<y><z/></y>,  \"\" ) = prop = __count__;");
tryItOut("{/*infloop*/do  while(Exception( \"\" ));\f( ''  == <y><z/></y>); }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = [[]] in this) *;\n/*for..in*//* nogeckoex bug 349964 */ for  each(const (prop.__iterator__) in -0.yoyo(window)) /*for..in*/L:for([__noSuchMethod__, prop] = <x/> in (-0)) {continue ;(3.141592653589793); }\n");
tryItOut("if(<x/>) return <x><y/></x>; else  if (((yield __iterator__))) {var yield = <><x><y/></x></>;let __count__; } else {033; }");
tryItOut("if((({__parent__:  /x/ , prototype: this })) @ export *;) do yield; while((__noSuchMethod__ = <x/>) && 0);");
tryItOut("eval(\"true\", [1]).__proto__");
tryItOut("if(__proto__.__iterator__ = <x/>) {var prop = {};let __proto__ = <><x><y/></x></>, __iterator__ = 1e-81; }");
tryItOut("L: do {gc()continue ; } while((new (__iterator__)(<y><z/></y>)) && 0);");
tryItOut("yield [,]\n");
tryItOut("do {return;yield <><x><y/></x></>; } while(() && 0);export constructor;");
tryItOut(";\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in function ([y]) { }) {; }\n");
tryItOut("switch(*::*\f) { case 1: {\t }break; case ({a1:1}): break; break; break; case 2: break;  }");
tryItOut("throw <><x><y/></x></>\nlet (constructor, __count__ =  /x/ ) { (__parent__); }\nreturn setter;\n\nyield 1.2e3;");
tryItOut("{(new Function(\"let __noSuchMethod__ =  '' , __parent__ = false;\"))/*for..in*/for(prototype in this) {export *; } }");
tryItOut("L: {var prototype = [[1]], __proto__ = [1,,];var __parent__ = this, __count__; }");
tryItOut("let(constructor = undefined, prototype) ((function(){return <><x><y/></x></>;})());");
tryItOut("throw __count__;");
tryItOut("if(<><x><y/></x></>.prop) const function::__count__;");
tryItOut("export * const __iterator__;");
tryItOut("/*for..in*/M:for(let [__count__, constructor] =  ''  in [1]) {{}; const  /x/ ; }");
tryItOut("/*for..in*/for(var [function::__noSuchMethod__, __parent__] = false |= constructor in __count__|=__proto__ = this) {L: break L\nthrow true\n }");
tryItOut("/*infloop*/__parent__, __iterator__");
tryItOut("/*infloop*/for(const prototype = <x><y/></x>; <x><y/></x>; __proto__) {throw <x/>;<><x><y/></x></>; }");
tryItOut("constructor =  \"\" ;\f");
tryItOut("let \f(yield) { prototype }");
tryItOut("for(let y in [5,6,7,8]) try { return; } catch(prototype) { return; } finally { yield  /x/g ; } ");
tryItOut("if((new ({}).hasOwnProperty((yield prototype = void __iterator__), <bbb xmlns:ccc=\"[1]\"><ccc:eee></ccc:eee></bbb>.*))) { if ((p={}, (p.z = constructor = __noSuchMethod__)()) || (-1)) {__parent__ = true, __count__;export prototype; } else { }} const prototype;");
tryItOut("throw constructor\n");
tryItOut("/*for..in*/for(const [__proto__, prop] = -0 ||  /x/  in  /x/ ) {const __noSuchMethod__, prop = __proto__; }\nyield;");
tryItOut("/*infloop*/while([[]])export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in (uneval(({a1:1}) > <x><y/></x>))) L:while((constructor) && 0){({__noSuchMethod__ getter: (([[1]]).watch).call, __parent__ getter: function(y) { yield y; throw (function ([y]) { })();; yield y; } }) }");
tryItOut("/*infloop*/for(var [] = new ((1 for (x in [])))(); (<y><z/></y> if ( /x/ )); __proto__) __proto__;");
tryItOut("L: {(<><x><y/></x></>);var constructor = <x/>, __parent__; }");
tryItOut("/*for..in*/M:for(var __proto__ in ((((prop = __proto__)).watch)(this.zzz.zzz)))break ;");
tryItOut("throw prototype;");
tryItOut("if(<x><y/></x>) { if (( \"\"  ? 1.3 : <><x><y/></x></>)) {throw *::*;let __noSuchMethod__; } else throw function ([y]) { };}");
tryItOut("/*for..in*/for(const __proto__ in ((Function)(*))){L:with(window.__lookupGetter__(\"constructor\")){return;gc() } }");
tryItOut("if(+<x/>) {export prop;( /x/g ); } else gc()");
tryItOut("if(3) {(1 for (x in []))export prototype; } else {yield;yield arguments; }");
tryItOut("{__parent__ = __iterator__;while(((((<><x><y/></x></> for each (prop in null)))(<x><y/></x> for (__proto__ in  '' ), <x/>))) && 0) }");
tryItOut("let([] = [11,12,13,14].map[<y><z/></y> ===  /x/ ], constructor) { throw constructor;");
tryItOut("L:if( /x/g ++ for ((__iterator__) in *) if (<x/>)) { { yield let (__iterator__ = <><x><y/></x></>, prototype) * + <y><z/></y> }  } else  if (__parent__.(3/0))  else {@foo; }");
tryItOut("M:if((yield ( \"\"  /= ([__noSuchMethod__, , , __proto__, ] = (constructor))))) __count__ = <x><y/></x>, prototype;throw <x/>; else  if (__noSuchMethod__) {export *;let prop = <x><y/></x>, __proto__ = __count__: *::*; }");
tryItOut("with(({ prop: __noSuchMethod__ }) = __iterator__.throw((__parent__//h\n = this.__defineSetter__(\"constructor\", ({}).hasOwnProperty))))(new Function(\"export __noSuchMethod__;\"))");
tryItOut("do {(null);; } while((delete = ) && 0);");
tryItOut("if((__noSuchMethod__ = __noSuchMethod__.__iterator__ getter= <x/>)) { if ([1].eval( '' ) & <x><y/></x> <<= <y><z/></y>) continue ; else {/*for..in*/for(let __count__ in (((this).__defineSetter__)(*::*)))__count__, prototype = window;Math.sin }}");
tryItOut("if(( /x/  > {}).eval(this.__defineGetter__(\"prototype\", function(y) { yield y; yield;; yield y; }))) return null; else  if (prop = arguments()) yield; else if(1e4) {yield ({});((-1)); } else  if (<y><z/></y>) export *; else return null;");
tryItOut("/*for..in*/for(let [ get __parent__(constructor, __iterator__) { return <y><z/></y>.isPrototypeOf(this.__defineSetter__(\"__noSuchMethod__\", 1.3)++) } , __iterator__] = false in *::*) gc()");
tryItOut("if(this) {(-0);throw <x><y/></x>; } else {; }");
tryItOut("/*for..in*/for(let __iterator__ in (-1)) {this; }");
tryItOut("L:while((eval(\"throw <x/>;\",  /x/ ())) && 0){;/*for..in*/for(const __noSuchMethod__ in <x><y/></x>) (({})); }");
tryItOut("while(([{}__noSuchMethod__, prop for (__noSuchMethod__ in false) if (function(id) { return id })]) && 0){if(<y><z/></y>) {Math.powconst constructor; } else  if ( \"\" ) ; else {function ([y]) { };return; }do {export *;var __proto__ = <><x><y/></x></>, __proto__; } while((let (__proto__ = false) __proto__) && 0); }");
tryItOut("/*for..in*/M:for(__parent__ in ((new Function)(<><><x/></></>))) ");
tryItOut("L:while((@foo) && 0)export prop;");
tryItOut("/*infloop*/L:for(const constructor; (\n[__proto__ for each (__count__ in true)]); ~([<x><y/></x>].some(function  prop (__count__)<x/>))) {const constructor; }");
tryItOut("/*infloop*/do {gc(){} } while(((uneval([z1,,]))));");
tryItOut("M:if((__noSuchMethod__ = <x><y/></x>)) {break M; } else  if (__proto__ = <x/>) {(window); }");
tryItOut("/*infloop*/for(let ({ __parent__: constructor }) = (\nwindow); __iterator__ = *; ({__iterator__: <><x><y/></x></> })) export *;");
tryItOut("/*for..in*/for(let __proto__ in arguments <= <><x><y/></x></>()) {return window;Math.pow }");
tryItOut("L:with({prototype: 1e-81})(<y><z/></y>);");
tryItOut(" /x/ ");
tryItOut("let (prop) { {} }if( /x/g .yoyo(window)) { if (__count__ = 0/0([1])) { }} else <><x><y/></x></>");
tryItOut("\ngc()");
tryItOut("gc()");
tryItOut(";");
tryItOut("if(constructor = __parent__, delete / <x/>\n) {yield  /x/g ;(undefined).watch }");
tryItOut("yield;");
tryItOut(" for (__iterator__ in function(id) { return id }) const __parent__;");
tryItOut("{export __parent__; }");
tryItOut("L: { }");
tryItOut("if('fafafa'.replace(/a/g, (Math.sin).call)) { if (null) {(-1); }} else prototype, __iterator__ = <><x><y/></x></>;");
tryItOut("if((<xxx {__count__}={Date(window)} />.(0.1 ? false : *::*))) { if (function::constructor = __proto__) {return; } else {var prop = window; }}");
tryItOut("/*for..in*/L:for(__count__ = (prop = 1e81) in (@foo ? __count__ : <x><y/></x>)) {{ \"\" ;yield this; }\ngc() }");
tryItOut("/*for..in*/for(prop in ((@foo)(<x><y/></x>)));");
tryItOut("with({__noSuchMethod__: (<x/>)})( /x/ ).__defineSetter__");
tryItOut("M:if(__count__.@*) yield;");
tryItOut("/*infloop*/do {throw (undefined)(1.3, <y><z/></y>); } while((this.__defineSetter__(\"constructor\", <x><y/></x>))++);");
tryItOut("\nconst __noSuchMethod__;\n");
tryItOut("/*for..in*/M:for(const __proto__ = <x><y/></x> in <><x><y/></x></>) yield (-1);");
tryItOut("if(__noSuchMethod__.constructor%=[, ] = __count__;) yield;");
tryItOut("/*infloop*/for(({ __parent__: __noSuchMethod__.__proto__, __parent__: __iterator__ }) = ; @foo; __count__) gc()");
tryItOut("/*for..in*/for(const prop in (new 0x99) != (window.__lookupGetter__(\"__iterator__\"))) M:with(eval(\"const __iterator__ = @foo, __proto__;\", {}))yield;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in this) {\fconst prop = [[]];; }\n");
tryItOut(";while(([1]) && 0){gc()yield window; }");
