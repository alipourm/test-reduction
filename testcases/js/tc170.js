tryItOut("L:do {/*infloop*/while(K.yoyo(null.prototype))yield; } while((({ __noSuchMethod__: prototype }) = __noSuchMethod__) && 0);");
tryItOut("try { return; } catch(constructor) { with({}) { throw <><x><y/></x></>; }  } ");
tryItOut("{__count__ = getter; }");
tryItOut("{yield #1#;\nreturn;\n( /x/g .__lookupGetter__(\"prop\")//h\n *= (new ((<y><z/></y>).watch)(this, window))); }");
tryItOut("switch(undefined) { default: case 6:  }");
tryItOut("with({}) { try { throw StopIteration; } Ucatch(prototype) { let(prop, __count__) { export *; }  } ");
tryItOut("if(false) {continue L; } else  if ([] = null.prop = <x/>) return (-0);\t else {{};export __iterator__; }");
tryItOut("if(--eval(\"<x><y/></x>\\t\", <x/>)) ({}).__lookupGetter__ else  if (__iterator__ = *::*) __iterator__");
tryItOut("if(((yield ((<x/>\n))()))) { if ((eval(\"this.__lookupGetter__(\\\"__count__\\\")\", (({prop: *, __parent__: 0x99 }))))) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in #3={a:#3#}) ;{ } } else {@foo }}");
tryItOut("let (({ __count__: constructor, __noSuchMethod__: __noSuchMethod__ }), prop = <y><z/></y>) { var __iterator__ =  \"\" , prop = <x><y/></x>; }");
tryItOut("{}\n");
tryItOut("L: {export __parent__; }");
tryItOut("if(<x><y/></x>) { if (false) export *;} else let prototype = __parent__, __parent__;");
tryItOut("/*for..in*/for(const [prop, prototype] = <><x><y/></x></>.constructor in #1#) return;");
tryItOut("continue M;");
tryItOut("M:if(function  prop (prototype, prototype)033.__noSuchMethod__ = arguments if (eval(\"<x><y/></x>\", export __count__;))) Function\nyield;");
tryItOut("/*for..in*/for(var constructor = ( /* Comment */( ''  == __iterator__)) in <y><z/></y>) {let __noSuchMethod__ =  \"\" ; }");
tryItOut("M:switch([window]) { case 1: throw @foo;break;  }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (prototype = ({ null: __iterator__ })); 1.2e3) gc()");
tryItOut("{}");
tryItOut("M:with(__count__ = __count__ = <><x><y/></x></>)if(<x><y/></x>) __parent__; else  if ( /x/ ) return;");
tryItOut("while((undefined) && 0){yield;/*for..in*/for(const __count__ in constructor) {{} } }");
tryItOut("if((p={}, (p.z = <x><y/></x> %= <x><y/></x>)())) { if (arguments.hasOwnProperty(\"__iterator__\")) return window; else with(*::*)let __proto__ = <x><y/></x>;}");
tryItOut("if(__parent__.prop = (<x><y/></x\f>).unwatch(\"__proto__\")) {if(window) { if (<x/>) {(<><x><y/><\f/x></>);throw <x><y/></x>; }} else {let __count__ =  /x/g , __proto__; }\n } else  if (( /x/  ? 0.1 : prototype)) yield prototype;");
tryItOut("");
tryItOut("return;\nprototype;\n");
tryItOut("\fif(this.__defineSetter__(\"prop\", @foo)) {{export __count__ }; } else {if([<y><z/></y>]) continue L; else  if (undefined ^ //h\n<><x><y/></x></>) function (prop) { yield false }  }");
tryItOut("constructor = *, constructor = <x><y/></x>;");
tryItOut("{with(undefined)export *; }");
tryItOut(" with \n/*infloop*/for(var ({ __parent__: <x><y/></x>.(this), this }) = eval; __parent__ = this; <x><y/></x> <= 1.3) {return; }");
tryItOut("<><!--yy--></><ccc:ddd>this<ccc:ddd><> /x/  != __count__</> </ccc:ddd></ccc:ddd>");
tryItOut("if(<xxx>{__proto__}</xxx>) return *;");
tryItOut("yield 3/0;");
tryItOut("if(<x/>) {return undefined; }//h\n else  if ((1e81)(prop)) {; } else {({}).__lookupGetter__ }");
tryItOut("(constructor);");
tryItOut("/*for..in*/M:for(let __count__ in <><x><y/></x></>) let __parent__, constructor = <y><z/></y>;");
tryItOut("{}");
tryItOut("return (new Function)(__proto__) in  ''  /  '' ;");
tryItOut("var __iterator__;");
tryItOut("let(({ constructor: __iterator__, prototype: __proto__ }) = <><x><y/></x></>, prototype) ((function(){yield constructor;})());");
tryItOut("if((false.__lookupSetter__(\"__proto__\")) << __iterator__(window)|=((uneval(<x><y/></x>)))) { if ((.2.propertyIsEnumerable(\"__proto__\"))) {export *;yield\n } else (this);}");
tryItOut("");
tryItOut("return");
tryItOut("{if(new new Function(__noSuchMethod__) in __iterator__.(<x><y/></x>)) {yield <y><z/></y>;do {export prop;/*infloop*/while(<><x><y/></x></>)[1,2,3,4].map } while((4.) && 0); } }");
tryItOut("M:if(true) { }");
tryItOut("{return; }");
tryItOut("if(.2) {yield @foo; } else  if ((function ([y]) { })().isPrototypeOf(@foo)) gc()");
tryItOut("let __iterator__ =  '' , function::__proto__;;/*infloop*/for(var __count__; prop.__defineSetter__(\"__iterator__\", function(q) { return q; }); (true++)) {}");
tryItOut("/*infloop*/L:for(; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (Math.sin)) {return;yield <x/>; }");
tryItOut("/*infloop*/while((uneval()))<x/>");
tryItOut("/*for..in*/L:for(var ({ __proto__: __parent__ }) in ((/a/gi)(true().unwatch(\"({ prototype: __noSuchMethod__, __iterator__: prop })\").eval([11,12,13,14].some))))yield;");
tryItOut("export __count__");
tryItOut("L:switch(<x><y/></x>) { case 9: (<y><z/></y>);break;  }");
tryItOut("with(new (__noSuchMethod__ = *)(this if (this), <><x><y/></x></>)++){; }");
tryItOut("/*for..in*/for(__iterator__ = 0.1 in ((Math.sin)((__iterator__ = <y><z/></y>)))){yield __iterator__ getter: function () { export constructor; } ; }");
tryItOut("let __parent__ = *, constructor = @foo\n");
tryItOut("if((<x/>)) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [1,,]) {[var constructor = <x/>; } else  if ((new function  __parent__ () { yield let (__parent__) ({a1:1}) } (*::* || <y><z/></y>))) {/*infloop*/for(let __iterator__; (__noSuchMethod__ = window); (__parent__.__iterator__)) {export prop; } }");
tryItOut("return true;\f const __noSuchMethod__;");
tryItOut("{let __noSuchMethod__, __proto__ =  /x/ ; }");
tryItOut("L:if(void 033) { if ((((({ set __proto__(prop, function::prop) { var __iterator__, __count__; } ,  get __noSuchMethod__(__count__) { yield prototype }  })))(__noSuchMethod__.valueOf(\"number\")) = (* ? * : <x/>++)) && this) continue ; else {/*infloop*/for((constructor = __noSuchMethod__.unwatch(\"prototype\")); \nundefined.__noSuchMethod__; new Date(false, undefined) += try { export __count__; } catch(prop if <><x><y/></x></>) { /a/gi } catch(__iterator__) { const function::constructor = <y><z/></y>, constructor = <x><y/></x>; } finally { 'haha'.split }  !== <x><y/></x>) function(y) { yield y; gc(); yield y; } }}");
tryItOut("/*for..in*/for(const __iterator__(__count__ = constructor) in (((new Function(\"throw <><x><y/></x></>;\")))(new (<><x><y/></x></>)()))){yield 4.;export __parent__; }");
tryItOut("/*infloop*/for((3/0\n.*); *::*['__parent__']; 0/0) if(__parent__ = (let (__count__) __noSuchMethod__)) { if (yield 0.1) {export *; } else let __parent__;}");
tryItOut("with({}) var __noSuchMethod__ = <x><y/></x>;");
tryItOut("L:if(__proto__ = <x>\f<y/></x>) export *; else  if ((1e-81 || \r<><x><y/></x></>)) {return [z1,,];throw ({a1:1}); } else {(<><x><y/></x></>);{} }");
tryItOut("L: {(<x><y/></x>);yield; }");
tryItOut("M:if(null( /x/g , 1e4).@foo) __proto__, prop");
tryItOut("{continue M;{}throw {}; }");
tryItOut("M:with({__proto__:  /x/g  ? <x><y/></x> : <x/>})throw this; const prototype; const prop;");
tryItOut("const prop = <><x><y/></x></>;");
tryItOut("/*infloop*/do {yield;let prototype; } while(this ?  /x/  : (__iterator__|=__iterator__));");
tryItOut("/*infloop*/M:for(__parent__; ( '' ())[( \"\" .__parent__ = <><x><y/></x></>)]; ({prop:  /x/ }).__lookupSetter__(\"__count__\")) export __count__;");
tryItOut("while(((+@foo <<  '' )[(new RangeError() - (function ()<x><y/></x>).call(null, <>\f<x><y/></x></>))]) && 0){if(<x/>++) export prototype; else  if (__noSuchMethod__ = <y><z/></y>) export *; }");
tryItOut("L: {{{}yield 3/0; } }");
tryItOut("while(( /x/ ) && 0)export constructor;");
tryItOut("/*infloop*/M:for(var __count__; 3\t; false) {prop; }");
tryItOut("/*infloop*/M:for([15,16,17,18].map(function(y) { yield y; yield function ([y]) { };; yield y; }, *::*) % <y><z/></y>.__lookupGetter__(\"__parent__\"); false for each (__parent__ in <y><z/></y>) for (__count__ in <><x><y/></x></>); true !== prop) {constructor }");
tryItOut("L:with((prop = prop))__parent__;");
tryItOut("let(constructor = (prop.valueOf(\"number\")), prop = ({__count__: <y><z/></y>}).hasOwnProperty(\"__iterator__\")) { return;");
tryItOut("with({}) return this.__defineSetter__(\"constructor\", ({}).__lookupGetter__);");
tryItOut("{export *;;{/*for..in*/for(const [prop, constructor] = 1.2e3 in window) (\nfunction ()<><x><y/></x></>).apply(<x/>); } }");
tryItOut("/*infloop*/for([0x99]; (*::*.unwatch(\"__iterator__\")); 'fafafa'.replace(/a/g, Math.sin))  /x/g ;");
tryItOut("(prop)");
tryItOut("<x><y/></x>.(0)['__proto__'] = __count__;");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*infloop*/for(null; new (({__noSuchMethod__: this, constructor: __parent__ }))(false); (new (function(y) { yield y; {}; yield y; })( '' ))) {__iterator__ = @foo, prop; }");
tryItOut("/*infloop*/for(prop = #1=[#1#]; constructor; 1e-81) {return [,,]; }");
tryItOut("if(<><x><y/></x></>) { if (window) {continue M; }} else const constructor = __count__, __iterator__\nwindow = [[]], __parent__ = <x><y/></x>;");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/M:for(((gc)(<x/>, ({a1:1}))); new (function(q) { return q; })(<><x><y/></x></> >>> null .@ (prototype = this) >= <><x><y/></x></> , this.zzz.zzz, ({__noSuchMethod__ getter: function ()<x><y/></x> }) = this gc).eval((__parent__.__iterator__ = ({__iterator__: *}))); __noSuchMethod__) /*infloop*/for(const constructor; (function ([y]) { })(); function ([y]) { }) L:with({__noSuchMethod__: this}){throw undefined; } const __parent__;");
tryItOut("{/*infloop*/for(constructor; *; (function ([y]) { })()) {this;yield #1=[#1#]; }/*for..in*//* nogeckoex bug 349964 */ for  each(const window.__count__ in <><x><y/></x></>) export *; } const __parent__;");
tryItOut("/*for..in*/for(var [prototype, __proto__] = <x><y/></x> in <x><y/></x>) {continue M; }");
tryItOut("{constructor = __noSuchMethod__, __iterator__;const constructor = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const false.__noSuchMethod__ = __iterator__.__parent__.eval(prop = <x><y/></x>) in <><x><y/></x></>) {throw *::*;return; }");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = <y><z/></y> in <><ccc:ddd> </ccc:ddd></>) {/*infloop*/for(__proto__ = <x><y/></x>; prop; prop) {return;( /x/g ); } }");
tryItOut("this.zzz.zzz;");
tryItOut("L: function  function::constructor (__noSuchMethod__) \"\" ");
tryItOut("gc() const constructor;");
tryItOut("/*infloop*/L:while(new ([1,,])()){( /x/ ); }");
tryItOut("let(__proto__ = ;%=*) ((function(){yield ( ''  >>>=<><x><y/></x></>);})());");
tryItOut("L:do {return; } while((({}).hasOwnProperty) && 0);");
tryItOut("/*infloop*/for(__proto__; (try { yield  '' ; } catch(__iterator__) {  } ) =  /* Comment */[,,]; new (new (@foo)())([[1]], 1e4)) /*infloop*/M:for(({ __noSuchMethod__: __noSuchMethod__ }) = <x><y/></x>.watch(\"__proto__\", /a/gi); <x><y/></x>; __count__ = __noSuchMethod__) {const __parent__; }");
tryItOut("with({__proto__: *::*})*::*;");
tryItOut("do {throw this; } while(((<xxx {__proto__}={this.__defineGetter__(\"__proto__\", 'haha'.split)} /> ? (let (constructor = *::*) (prop.__proto__ setter= [1,2,3,4].slice)) : __iterator__ = *::* >>>=<y><z/></y> .@ (uneval(__parent__.__noSuchMethod__ getter= function (__proto__) { export prototype; } )))) && 0);");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = ((p={}, (p.z = prop)())) in <y><z/></y>) {export *;yield; }");
tryItOut("L:with([[]]++){__parent__ = false;var constructor, prototype; }");
tryItOut("do {gc() } while((~__noSuchMethod__ = 0) && 0);");
tryItOut("do ; while((({__iterator__: <x><y/></x>.propertyIsEnumerable(\"prop\") })) && 0);");
tryItOut("{gc() }/*for..in*/for(setter = <x><y/></x>.yoyo(-0) in <><x><y/></x></>) let prototype;");
tryItOut("/*for..in*/for((prop) in true >>> arguments) {export *;throw @foo; }");
tryItOut("M:if(<><xxx>{constructor}</xxx></>) export *; else export __noSuchMethod__;");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("with(((@foo) === <><x><y/></x></> ? <x/> : [z1]).__lookupGetter__(\"__parent__\")){}");
tryItOut("/*for..in*/for(constructor = (new Function((<><x><y/></x></>[<x><y/></x>] > <> /x/g </>))) in new RegExp(*)) /*for..in*//* nogeckoex bug 349964 */ for  each(let <y><z/></y>.__iterator__ in  \"\" ) const prop = <x><y/></x>;");
tryItOut("M:if(__parent__ = <><x><y/></x></>) {try { yield __iterator__; } finally { const __parent__, __count__; } if([<x><y/></x>].map(gc)) {throw <><x><y/></x></>; } else var prototype; } else {L:if(yield function ([y]) { }) { if (null for each (prop in __proto__)) (*);} else gc() }");
tryItOut("do continue ; while((<x/>) && 0)\f;");
tryItOut("/*infloop*/while(__proto__)return (function ([y]) { })();");
tryItOut("{{}export prototype; }");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {continue ;throw @foo; } else  if ([15,16,17,18].filter(function () { return <x><y/></x> } , new ({}).__lookupGetter__())) {{<x><y/></x>;continue ; } } else /*infloop*/do gc() while((this.zzz.zzz));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({}.constructor).__parent__.prototype in ('fafafa'.replace(/a/g, /a/gi))) export *;");
tryItOut("/*infloop*/for(({a2:z2}); prop; <x/>) {var __parent__ =  /x/ ;*::*; }");
tryItOut("{}");
tryItOut("with({}) { Math.sin } ");
tryItOut("{}\n");
tryItOut("with({\tconstructor: yield (let (__count__, prop = <x><y/></x>) (__parent__ = 3.141592653589793))})__iterator__\nyield *::*;\n");
tryItOut("/*infloop*/while([<x><y/></x>].sort(function (__count__) { gc() } ).yoyo(new Math.sin(undefined)))do yield this; while((this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; throw <x><y/></x>;; yield y; })) && 0);");
tryItOut("/*for..in*/for(__parent__ in false || null) {let prop, constructor; }");
tryItOut("with({}) { export *; } ");
tryItOut("L: {(window);break ; }\n");
tryItOut("return;");
tryItOut("return __count__ = window;");
tryItOut("{return; }");
tryItOut("return;");
tryItOut("switch(constructor = <y><z/></y>) { default: case 3: while(() && 0){throw  get __count__(__noSuchMethod__) { break ; } ;; }case new (({ __proto__: __iterator__ }) = <x><y/></x>)((__noSuchMethod__%=constructor)): break;  }");
tryItOut("return;");
tryItOut("throw <><x><y/></x></>;");
tryItOut("if(window) {throw undefined; } else  if ( /x/g ) {const prop = [,], __proto__;return __iterator__; } else ");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] = null\f.yoyo(<x/>) .@*::  '' \n in ('fafafa'.replace(/a/g, (true).watch))) ();");
tryItOut("{/*infloop*/for(new Object(<x><y/></x>, ); <x><y/></x>.(@foo); __iterator__ = 1e81) {throw <x/>; }\n{} }");
tryItOut("if(Number()) {{}with((yield <x><y/></x>))yield <x/>; }");
tryItOut("if(<x/>) {throw 1.3; }");
tryItOut("{gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ( get constructor(prop, __proto__)('fafafa'.replace(/a/g, function \t constructor () { return function::__proto__ } ))) in (get = false.yoyo('fafafa'.replace(/a/g, Function))) :: (({ get __parent__()undefined }))) {{} }");
tryItOut("/*for..in*/for(const ({ __iterator__: ({ setter: ({ prop: prototype }), __parent__: ({ __proto__: ({ __parent__: x::prototype, __noSuchMethod__: prop }), __iterator__: prototype }) }) }) in new Exception(4.)) \n{}");
tryItOut("with(<x/>){let constructor = <x><y/></x>; }\n");
tryItOut("M:if((({a1:1}) for (__count__ in function::constructor)null)) export __iterator__;");
tryItOut("/*infloop*/M:for(const constructor; eval(\"return 033;\", __parent__.(*::*)); <xxx {__noSuchMethod__}={*::*} />) export __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in true) {with({constructor: <x><y/></x>.(this)}){{} }export set; }");
tryItOut("if(<x/>) @foo else  if (__count__) {gc(){} } else gc()");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__noSuchMethod__; false; <x/> ? null : 3) \r{({ __iterator__: __noSuchMethod__, prototype: __noSuchMethod__ }) = (__proto__ = __noSuchMethod__);/*for..in*/for(const constructor = (new Function)(<y><z/></y>, window) in yield = __proto__) var __count__ = null, __proto__ = constructor; }");
tryItOut("if((({__noSuchMethod__: __count__}))) {(1 for (x in [])) } else  if ((prop.__parent__ = *::* <<= eval(\"<x/>\", null)\n)) const __count__;");
tryItOut("if(((({}).__lookupSetter__(\"prop\")) if (window))) { if ((new [1,2,3,4].map())) {if(__parent__) {var __proto__ = <><x//h\n><y/></x></>, __count__;gc() } else {let __proto__ = <x/>, prototype;throw @foo; } }} else /*infloop*/M:while(__iterator__.__iterator__){}");
tryItOut("if(new function(q) { return q; }()) throw <><x><y/></x></>; else  if ([z1,,]) {return;export *; } else yield constructor;\ngc()\n");
tryItOut("M:if(false) {let prototype; } else  if (*) (0x99);");
tryItOut("return;");
tryItOut("/*infloop*/M:do yield <x><y/></x>; while(*::*);\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in *) <x><y/></x> ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in ([, constructor] = <y><z/></y>.__defineGetter__(\"__iterator__\", (window).__defineSetter__))) {var prop = false, constructor;return prototype;with({constructor: __iterator__ = Error()})yield; }");
tryItOut("/*infloop*/L:for(var __count__ = __noSuchMethod__+=1e81; undefined; [15,16,17,18].some((<><x><y/></x></> &&  '' ).__defineSetter__, new Function())) {prototype.constructor }");
tryItOut("/*for..in*/for(let prop =  /x/g .unwatch(\"prototype\") in <x><y/></x>) ( '' ).watch");
tryItOut("L:if(//h\n'fafafa'.replace(/a/g, [1,2,3,4].map)) { if (((__proto__ = __parent__ for (constructor in  /x/ ) for (<><x><y/></x></> in __proto__) for each (__count__ in <x/>)))) yield;} else {with( /x/ (<x><y/></x>))throw window; }");
tryItOut("L: {1.3; }");
tryItOut("throw <x><y/></x>;");
tryItOut("if( '' .__defineSetter__(\"prototype\", /a/gi)) break ; else {/*infloop*/do constructor; while(<x><y/></x>); }");
tryItOut("gc()if(*) return *::*; else  if ((function ([y]) { })()) throw <x/>; else ");
tryItOut("with((-0)){}\n/*for..in*/M:for(let __noSuchMethod__ in ((<y><z/></y> %= <><x><y/></x></>)(({a2:z2}).propertyIsEnumerable(\"__iterator__\")))){return;([]); }");
tryItOut("/*infloop*/do throw StopIteration; while((1 for (x in [])) , (null.__defineGetter__(\"__count__\", prototype)) *= (({__iterator__ getter: *::*, __iterator__: 0/0 })).__noSuchMethod__)");
tryItOut("while((new var prop()) && 0)if(<x/>) { if (this) {const __parent__; } else {(({a1:1}));function(id) { return id }; }}\n");
tryItOut("if(\n<x/>) {var prototype;yield; } else  if (({ __iterator__: ({ __iterator__: constructor }), __noSuchMethod__: __proto__ }) = new #3={a:#3#}()) <x><y/></x>");
tryItOut("{yield; }");
tryItOut("return; const prototype;");
tryItOut("/*for..in*/for(const [__iterator__] = __proto__ in this) {__noSuchMethod__ }");
tryItOut("case new try { try { ( \"\" ); } finally { export __iterator__; }  } catch(prototype if (function(){__noSuchMethod__ = __parent__;})()) { for(let y in []); } finally { throw StopIteration; } (): with({prototype: void arguments}){ /x/ ;const __iterator__, function::prop = @foo; }break; case 3: with(*::*){yield;(*); }break ;break; /*infloop*/do throw <x/>; while((\n__iterator__|=<><x><y/></x></>.propertyIsEnumerable(\"prototype\")));");
tryItOut("/*for..in*/for(constructor = (([[1]] >>> window[__count__ = <><x><y/></x></>].@foo))(window, new RegExp(window, <x><y/></x>)) in __proto__) each = 5.0000000000000000000000, __proto__;");
tryItOut("if(<y><z/></y> /  /x/g  .. (-0 .@x:: <y><z/></y>)) { if (new (([1,2,3,4].map).call)(~[[]])) try { {} } {}catch(function::__proto__ if (function(){return <><x><y/></x></>;})()) { (<><x><y/></x></>); }  else {throw 1e81; }}");
tryItOut("L: var prototype = <x>\t<y/></x>, __parent__;");
tryItOut("Math.sin\nexport //h\n*;");
tryItOut("__proto__");
tryItOut("/*infloop*/L:for(let prototype; function(y) { yield y; if(__count__) { if (window) var __noSuchMethod__;} else {;return <><x><y/></x></>; }; yield y; }; this.__defineSetter__(\"__parent__\", (new Function(\"const __iterator__ =  /x/ , __parent__;\")))) L:with(<x/>)const constructor = 1e-81, prototype;");
tryItOut("/*infloop*/M:do yield; while( \"\" );");
tryItOut("/*for..in*/for(__proto__['prop'] in ((function () { yield this } )(window))){let prop = 0/0;{} }");
tryItOut("let(prototype = ((new Function(\"export *;\")))()) ((function(){let(__proto__) ((function(){{}})());})());");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = (this.zzz.zzz) in constructor &= <x><y/></x>) yield;\n*::*\n");
tryItOut("with({constructor: eval(\"export (-0);\", @foo)}){\rL:if(({ __parent__: constructor, __iterator__: [__proto__, , __count__, prototype, __count__] }) = new null()) throw  /x/ .__proto__; }");
tryItOut("/*for..in*/for(var [prop, prototype] = *::* in 0x99) 3, prototype");
tryItOut("yield\n");
tryItOut("let (constructor) { do yield *; while((*::*) && 0); }");
tryItOut("with(new RangeError((new Boolean(1e81))) >= new (function(q) { return q; })(window /= <x><y/></x>)){export prototype;do {} while(( \"\" ) && 0); }");
tryItOut("if() {__count__, prop =  /x/g ; } else  if (new (function (__parent__, __noSuchMethod__)<x/>).apply(undefined, this)) { } const __parent__;");
tryItOut("yield ({__proto__ getter: Function }); const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in __count__) constructor");
tryItOut("/*for..in*/M:for(var __parent__ = __noSuchMethod__ in <x><y/></x>) {(false);export *; }");
tryItOut("(<x/>);");
tryItOut("switch((__parent__.(3.141592653589793))) { default: return; }");
tryItOut("if(({} if (<><x><y/></x></>))) { if ([1,2,3,4].map()) with({constructor: __proto__.__parent__ getter= function  __proto__ () { return <y><z/></y> } })return; else continue ;}");
tryItOut("yield undefined;");
tryItOut("/*for..in*/for(var [constructor, __count__] = (__count__ = <y><z/></y>.prototype) in -3/0.__lookupGetter__(\"__proto__\")) if(__count__) { if (constructor.__noSuchMethod__ setter= Math.sin\f) gc() else {var prop, function::constructor; }}");
tryItOut("with({__iterator__: this.__defineGetter__(\"__parent__\", [1,2,3,4].map) /= (true / #1#)}){throw  /x/ ;yield <><x><y/></x></>; }");
