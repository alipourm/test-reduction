tryItOut("if(<><x><y/></x></>) return; else  if ( /x/ ) {null; } else let __count__, __proto__; const __count__;");
tryItOut("throw __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in Object()) gc()gc() const __iterator__;");
tryItOut("if((__proto__.__noSuchMethod__ getter= false > .2))  else {/*for..in*/for(const prototype = constructor in window) @foo; }");
tryItOut("throw __iterator__;");
tryItOut("L: {/*infloop*/for(__noSuchMethod__; __count__;  /x/ ) {gc() } }");
tryItOut("let ([], __count__ = function ([y]) { }) { if( /x/g ) {} }");
tryItOut("/*for..in*/L:for(let <x><y/\f></x>\n['__count__'] in ((function (__iterator__)(#1=<x><y/></x>.(<x><y/></x>)))((this.zzz.zzz))))L:if((prop = <y><z/></y>)) { if ({return;throw  '' ; }.eval(new ((new Function(\"Function\")))(@foo))) export __iterator__;} else {gc() }");
tryItOut("{throw 0x99;const __noSuchMethod__; const get; }");
tryItOut("L: {/*for..in*/for(var constructor =  \"\"  in <><x><y/></x></>) {( /x/g ); }let __proto__;\n{}\n }");
tryItOut("return;");
tryItOut("/*infloop*/\twhile(((this).watch).call(<x/>,  /x/g ))if(<><x><y/></x></>) { if (prop) {yield this;\r }} else export __noSuchMethod__;");
tryItOut("{{export prop; }(__count__) = constructor; }");
tryItOut("L: {{}export *; }");
tryItOut("try { __noSuchMethod__ = __iterator__; } catch(__proto__) { throw constructor: <x><y/></x> <<= <><x><y/></x></> & new <y><z/></y>.eval(eval(\"(*::*.*)\", [11,12,13,14].sort)); } ");
tryItOut("while((-@foo) && 0)throw <>var __noSuchMethod__;</>;");
tryItOut("switch(constructor = <x/>) { default: break;  }");
tryItOut("L:if(<><x><y/></x></>(*)) {{yield *::*; }yield; }");
tryItOut("if(__iterator__ = __proto__) {export __parent__;\f } else  if ((function(id) { return id }).valueOf(\"number\").__lookupGetter__(\"prototype\")) /*for..in*/for(let __iterator__ in (((1 for (x in [])))(null)))var __parent__ = undefined; else {with({\f__count__: __count__.__parent__.__iterator__}){([1,2,3,4].slice).call/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <y><z/></y>) gc() } }");
tryItOut("with(String(false, <y><z/></y>).*){function  yield (@foo, prototype) { return __noSuchMethod__ } export *; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var x::prototype in ([ /x/g  for each (__proto__ in function(id) { return id })]) = <y><z/></y>) {gc() }");
tryItOut("let(__noSuchMethod__, [prototype, __proto__, __parent__, ]) ((function(){function::<ccc:ddd>(let (__count__, __parent__) (<x><y/></x>.([,,]))) </ccc:ddd> = constructor;})());");
tryItOut("while((({ prop: try {  } catch(__iterator__ if (function(){return #1#;})()) { yield prototype; } finally { return; } (#1#) }) = constructor.__defineSetter__(\"__parent__\", (new Function(\"\\treturn true;\")))) && 0)__proto__ = prop;");
tryItOut("let (__count__) { do __noSuchMethod__ = 1.3, prop; while(( \"\" ) && 0); }");
tryItOut("/*infloop*/for(*; (function ([y]) { })() .@ ((yield  \"\" )); let (prototype = <y><z/></y>) <x/> !==  \"\" ) __count__, prop = <y><z/></y>;");
tryItOut("/*for..in*/for(const prop = ({a2:z2}) in [11,12,13,14].map) break M;\nlet __noSuchMethod__, __iterator__;\n");
tryItOut("with({}) { let(__proto__) ((function(){var __noSuchMethod__ = __noSuchMethod__;})()); } ");
tryItOut("while((<x/>) && 0)gc()");
tryItOut("/*for..in*/for((({a1:1}))(<y><z/></y>) in ((prop( for , true))((<x><y/></x>.eval(*))))){return <y><z/></y>; }");
tryItOut("{propconstructor; }");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = [(false)[function (constructor, prototype) { yield <x/> } ]].filter([this if (0/0)]) in eval(\"*::*\", <x><y/></x>)) L:with(__proto__){throw undefined; }");
tryItOut("G");
tryItOut("M:if((<><x><y/></x></> | <><x><y/></x></>)) { if (__count__ = <x/>) {(.2); } else let __count__;}");
tryItOut("L: yield false;");
tryItOut("let(__count__ = true, prototype) ((function(){throw StopIteration;})());");
tryItOut("L:with(prop = ({a2:z2})){ const prop; }");
tryItOut("/*infloop*/while(<><x><y/></x></>)return;");
tryItOut("/*for..in*/L:for(var __count__ = ([ '' ].map(Math.pow).throw([<x><y/></x>].map(eval)) @ [11,12,13,14].filter) in __count__) {while((__proto__ ? <><x><y/></x></> : [z1,,]) && 0)throw __noSuchMethod__;if( /x/ ) { if \t(<y><z/></y>) {(4.);var __proto__, __iterator__ = {{}; }; } else null;} }");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = (if(<y><z/></y>) {return;return arguments; }) in #1=[#1#]++) {gc() }");
tryItOut("break M;\nvar __parent__;\n");
tryItOut("{with(false)throw *;return; }");
tryItOut("/*for..in*/for([__count__, __parent__] = constructor in [1,,]) {yield;continue M; }");
tryItOut("if(prop) { } else { }");
tryItOut("/*infloop*/M:while((gc).call((window).call(0 += <x><y/></x>, <x><y/></x>, <x/>), function  __noSuchMethod__ () { yield  ''  } (<y><z/></y>), [(<><x><y/></x></>.__lookupGetter__(\"__parent__\"))].filter(Math.pow))){export __count__;if((<y><z/></y>)(~<><x><y/></x></>)) {const  set prototype __noSuchMethod__ (__proto__) { yield [,,z1] }  = window, constructor = __noSuchMethod__; } else  if (__proto__ = prototype(*::*).isPrototypeOf(null[__count__])\r) {export *; } else {{break ; } } }\f");
tryItOut("/*infloop*/L:do {export __iterator__;let __noSuchMethod__ = <x/>; } while(this.__defineSetter__(\"__proto__\", (new Function(\"gc()\"))));\nM:with({constructor: *}){throw  \"\" ;<x><y/></x> }/*infloop*/M:for(var [] = __proto__ =  '' ; <x><y/></x>.__lookupGetter__(\"__parent__\"); ('haha'.split)()) export __noSuchMethod__;\n");
tryItOut("undefined");
tryItOut("L:if(<y><z/></y>) {<ccc:ddd><!--yy--></ccc:ddd> } else  if (*) {function (__noSuchMethod__, __count__\f) { let constructor; }  } const prop;");
tryItOut("do var __count__ = window; while((((this)())) && 0);");
tryItOut("if(*::*) let  /x/g  = <><x><y/></x></>; else {export constructor;export *; }");
tryItOut("if((({ __proto__: ({ constructor: prototype, __proto__: __iterator__ }), setter: ({ __noSuchMethod__: prototype, __iterator__: __parent__ }) }) = [, __proto__])) { if ((false.valueOf\f(\"number\"))) {throw this;break ; } else {constructor = undefined, get = .2;/*infloop*/while( \"\" )var __noSuchMethod__ = window, prototype = <x/>; }}");
tryItOut("/*for..in*/for(let get = (p={}, (p.z = <><>yyy</></>)()) in new ({}).hasOwnProperty(__parent__, <y><z/></y>)) {prototype, __count__ = this;yield; }");
tryItOut("for(let y in []);");
tryItOut("this.zzz.zzz;if(eval(\"/*for..in*/for(const prototype = <x/> in #1=[#1#]) return null;\", 1.3)) {try { yield (-1); } catch(__proto__ if (function(){continue\r L;})()) { yield; } finally { throw <x/>; } ; } else  if (export *) Math.sin else {const __parent__ = <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) const __iterator__, __count__;");
tryItOut("/*infloop*/for(prop; prop; __count__) {return;return null; }\ntry { export *; } catch(__count__ if (function(){__noSuchMethod__})()) { throw null; } catch(constructor if (function(){<x><y/></x>;})()) { return; } \tfinally { ().__defineSetter__ } with({}) let(__count__) { ;\n");
tryItOut("/*infloop*/for(prop; *;  \"\" ) let prototype, set;");
tryItOut("L:with(@foo){L:if(*::*.__lookupSetter__(\"__proto__\")) { if (eval(\"/*for..in*/for(let __noSuchMethod__ in []) {throw window;constructor = <><x><y/></x></>, __iterator__; }\", #1#)) var __parent__, __proto__; else {export *; }} }");
tryItOut("with({}) { try { let([__count__, __parent__, ] =  '' , prototype =  /x/g ) { __iterator__ = __parent__; } finally { this.zzz.zzz; }  } ");
tryItOut("throw [z1,,]; const __proto__;");
tryItOut("with({prototype: (__iterator__ = __count__)}){return; }");
tryItOut("/*infloop*/L:for([new Array(({a1:1}))] .@ [(new <x/>(__count__, *::*)) for each (prop in <x><y/></x>) if (@foo)]; __parent__ = prop =  /x/g ; <x/>) let (continue M;, __parent__) { const __parent__, __proto__; }");
tryItOut("/*infloop*/for(const __count__; ({a1:1}); new (function  __noSuchMethod__ (__noSuchMethod__) { yield [[1]] } )(<x><y/></x>)) {3(3.141592653589793); }");
tryItOut("prop.__count__ = __proto__;return 0x99\n");
tryItOut("export *\n");
tryItOut("L: return undefined;");
tryItOut("/*infloop*/for(( = ); [__count__.throw(<x><y/></x>)++]; __count__.__count__) {throw __iterator__;((p={}, (p.z = function  constructor (prototype, constructor) { var prop = <y><z/></y>; } )())) }");
tryItOut("while(((-3/0 if (1e4))) && 0)/*infloop*/for(this; [,,z1]; -1) return;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in *::*) throw <x><y/></x>;");
tryItOut("return;");
tryItOut("/*for..in*/for(var with({}) with({}) if(<x/>) export __proto__; else {/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in @foo) {gc }export *; } in (new (function (constructor, __iterator__)__count__)())) {export *;; }");
tryItOut("with({__proto__: <x><y/></x>}){{} }");
tryItOut("/*for..in*/L:for(var [__count__, __iterator__] = <x/> in 0/0.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) {prop = @foo;break L; }");
tryItOut("M:if( /x/ ) {throw 3;\nyield;\n } else \t if (window) while((yield this) && 0){(<><x><y/></x></>); }");
tryItOut("if(<y><z/></y>) __proto__");
tryItOut("M:if(window.valueOf(\"number\")) export constructor; else  if (new RegExp(__parent__%=<x><y/></x>, <x><y/></x>)) /*for..in*/for(prototype = 1e-81 in *) {prototype = <x><y/></x>, __iterator__; }");
tryItOut("let \f(constructor = *::*, prop) { /*for..in*/for(let [__iterator__, prop] = prototype = *::* in #2=({__count__: (null.yoyo(constructor))}\f)) let (constructor = __noSuchMethod__, constructor) { export __parent__ } }");
tryItOut("L:if((undefined if (1.2e3))) {{let prototype, __proto__ = -3/0; } }");
tryItOut("if(this.__defineGetter__(\"constructor\", (this).__defineSetter__)) { if (__count__ = <x><y/></x> <= undefined) { /x/  }} else {this; }");
tryItOut("return;");
tryItOut("const __parent__;");
tryItOut("([]);;");
tryItOut("{/*for..in*/L:for(const function::__noSuchMethod__ = [z1] in @foo) {false;(function(q) { return q; }).call }/*for..in*/for([__parent__, __parent__] = (((1 for (x in []))).apply)(<x/>, <y><z/></y>) in __iterator__)  '' ; }");
tryItOut("with({}) { export *; } ");
tryItOut("L: {return;var prop; }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("/*for..in*/for(const __count__ in (((1 for (x in [])))(-1)))((function ([y]) { })()).watch");
tryItOut("while((+0/0.eval(__count__)) && 0){yield  /x/ ;yield <x><y/></x>; }");
tryItOut("with({}) yield;");
tryItOut("{const __count__; }");
tryItOut("if(<><x><y/></x></>) yield;");
tryItOut("do export __proto__; while(( /x/ ) && 0);");
tryItOut("with(__count__ for each (prototype in window))/*infloop*/M:while((new ((<x><y/></x>--)((this.zzz.zzz)))()))do {break L;) } while(([11,12,13,14].filter) && 0);");
tryItOut("L: {\f{}yield; }\n");
tryItOut("/*infloop*/L:for(__parent__.__noSuchMethod__; this.@*; (yield function(id) { return id })) {gc()return 1e4; }");
tryItOut("if(()) /*infloop*/while(<x/>){yield;prototype, function::prototype; } else  if (prototype = __iterator__) var __parent__, constructor = <><x><y/></x></>; else {let (prototype = this, __noSuchMethod__ = <x><y/></x>) { yield #1=[#1#]; }__parent__, prop = ({});yield null; }");
tryItOut("if(*) {return;return; } else throw __noSuchMethod__\n/*for..in*/for(function::prototype in (([1,2,3,4].map)( /x/ ))){continue ;(function::set); }");
tryItOut("/*infloop*/M:do {{} } while((<x><y/></x\t>.__defineSetter__(\"prop\", ({}).hasOwnProperty)) |= (constructor).call(<y><z/></y>, ));");
tryItOut("gc()\n/*for..in*/for([prototype, __noSuchMethod__] = (this) in <x><y/></x>) if(@foo) <x><y/></x>; else  if (<x/>) x::__iterator__, __parent__ = <><x><y/></x></>;");
tryItOut("with((yield window)){;export *; }");
tryItOut("/*infloop*/do (<y><z/></y>); while(*::*);gc()\n(-0);");
tryItOut("/*infloop*/M:for(const __parent__; constructor; __parent__) throw <x/>;");
tryItOut("L:switch(@foo) { default: export constructor; }");
tryItOut("{export *; }");
tryItOut("throw StopIteration;");
tryItOut("L:if(function::__count__ = window) {gc() } else  if () {gc() } else continue M;");
tryItOut("/*infloop*/for(const (prop <x><y/></x>: __count__, __parent__: [__noSuchMethod__, __count__, ] }) = [constructor, __proto__, , __proto__] = \n{*;export prop; }; __count__ <<= window; [].__parent__ = <x/>) {var __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in ({})) {continue M; }");
tryItOut("M:if(window >= <x><y/></x>) { if (try { throw <x><y/></x>; } catch(__proto__) { let __count__, __proto__; } ) let prop; else {continue M;[,]; }}");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = ({ \t__parent__: __noSuchMethod__, __iterator__: __proto__ }) =  if ([,]) in false) {gc() }");
tryItOut("yield;");
tryItOut("if(( ''  / true += 4..__defineGetter__(\"prop\", new Function))) export *\n else gc()");
tryItOut("return;");
tryItOut("M:if((<><x><y/></x></> if (<x/>))[<y><z/></y>]) { if (this) let ((prop)) { export *; }} else {/*infloop*/M:while((({ get prototype(__count__, __parent__) { throw 1.3; } , __parent__: undefined.__lookupGetter__(\"prototype\") }))){throw <y><z/></y>; }return (yield  '' ); }");
tryItOut("while(( /x/ ) && 0)/*infloop*/<bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb><!--yy-->for(prototype; true; this) ;");
tryItOut("throw prototype;");
tryItOut("let (prop = __iterator__ = true <<= <x><y/></x>) { /*for..in*/M:for(<!--yy--> in ((function  __parent__ (__noSuchMethod__)(-0))(<y><z/></y>)))export *; }");
tryItOut("with(<{constructor}><!--yy--></{constructor}>){export constructor;this; }");
tryItOut("for(let y in [5,6,7,8]) return (<><x><y/></x></>).call(false, );");
tryItOut("switch(((({constructor: (window ? -1 : *)})).@*)) { default: function(y) { yield y; throw  \"\" ;; yield y; }case eval(\"constructor;\", (__count__ = __iterator__ for (__iterator__ in true) for each (__proto__ in [,,]))): __count__ = constructor;case  /* Comment */1e81: /*for..in*/M:for(let [__proto__, constructor] = __parent__ &&  ''  in #3={a:#3#}) {return; }break; break;  }");
tryItOut("L:if(#3={a:#3#} ^= ((__noSuchMethod__ ^ 3/0 <<= @foo).__defineSetter__(\"__count__\", Function))) { if ([15,16,17,18].some((1 for (x in [])),  \"\" [<><x><y/></x></>])) {export *;/*infloop*/while(window){prototypeexport *; } }} else with({prop:  '' })(*::*);");
tryItOut("{}");
tryItOut("if((\n*.__lookupSetter__(\"__parent__\"))) throw 1e81;");
tryItOut("with({}) { export *; } ");
tryItOut("{/*infloop*/\tdo yield null; while(constructor = __parent__); }");
tryItOut("/*infloop*/do if( /x/g ) { if (-3/0) return  \"\" ; else {yield <x><y/></x>; }} while(window--);");
tryItOut("{}");
tryItOut("/*for..in*/for(let __count__ in ((new Function)((new /a/gi()))))let constructor = <x><y/></x>, __noSuchMethod__;");
tryItOut("try { return <><x><y/></x></>; } catch(__proto__) { {} } ");
tryItOut("{/*infloop*/M:while(false){ } }");
tryItOut("yield window");
tryItOut("if(<x/>) with(null){throw window; } else  if (null) {break yield; } else break M;");
tryItOut("/*infloop*/for(var __count__; (yield -3/0.unwatch(\"__count__\")); ((this.__defineSetter__(\"prototype\", function (__noSuchMethod__\t) { return -1 } )).@* &  = yield constructor)) {/*infloop*/M:do yield function ([y]) { }; while(false); }");
tryItOut("if((eval(\"({ get constructor prototype (prop, __proto__) { yield  /x/ .__lookupGetter__(\\\"__proto__\\\") }  })\", <><x><y/></x></> >>= ({a1:1})))[ \"\" ]) {yield;let (__proto__) { export __count__; }/*for..in*/3.__defineGetter__(\"__count__\", gc) } else  if ([11,12,13,14].filter) {L:if(window) { if (<y><z/></y>) yield __iterator__; else {({}).__lookupGetter__gc() }}__noSuchMethod__(null) = constructor; } else var prop = false, ({ prop: __count__ });");
tryItOut("with({__proto__: __noSuchMethod__ = \n}){{let ([({ prototype: ({ __parent__: ({ __noSuchMethod__: __parent__, __noSuchMethod__: prototype }), __proto__: [] }), __proto__: prop }), ], __iterator__ = (uneval(<x><y/></x>)).__defineGetter__(\"__count__\", eval)) { /*infloop*/while(this)const prop =  /x/g , __iterator__; }/*infloop*/while(null){return; } } }");
tryItOut("{throw this; }\n");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = 0x99 in __proto__) export *;");
tryItOut("throw __parent__;");
tryItOut("M:if(.2) { if (__parent__) break ;} else let __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__.__noSuchMethod__ in false) {const ; }");
tryItOut("/*infloop*/for([, __iterator__] = (prop = @foo); (yield function(id) { return id }); <x><y/></x>.eval(<x/>)) {break L;return; }");
tryItOut("");
tryItOut("/*for..in*/for(let __iterator__ = each = undefined in (({ \tset: ({ constructor: ({ __noSuchMethod__: \t__noSuchMethod__ }) }) }) = constructor = ({ : ({ __iterator__: prototype, prototype: __count__ }), prop: ({ __parent__: __parent__, constructor: constructor }) }))) {\rif(new ([1,,]).__defineSetter__( catch , __parent__)) {yield @foo;yield; }gc() }");
tryItOut("export __noSuchMethod__;");
tryItOut("switch(({__proto__: (({prop getter: [1,2,3,4].map, constructor setter: *::* }).@*)})) { case typeof (<x/> if (@foo)).hasOwnProperty(\"prop\"): /*for..in*/for( = (function  __iterator__ (__parent__, __noSuchMethod__) { yield __noSuchMethod__ >= __noSuchMethod__ } ).call(__noSuchMethod__(prop).constructor, ) in [, __parent__] = 033.yoyo(window)) {export __count__; }break; yield __parent__+=<><x><y/></x></> if (<><x><y/></x></>);break;  }");
tryItOut("if((\fnew [,].hasOwnProperty(\"__parent__\")(( /* Comment */[,,])) if (([1,2,3,4].slice)(<x><y/></x>)))) { if (__iterator__ = <x/>) with({__noSuchMethod__: -0}){{} }} else /*for..in*/for(var __noSuchMethod__ in prop) {}");
tryItOut("yield -1;");
tryItOut("if() { if (h) ((@foo ? prop : __iterator__));} else if(eval(\"let __parent__;\", this)) {export *; } else  if (true.@foo) return");
tryItOut("[continue ], (Date(__parent__)).__defineGetter__(\"__parent__\", function  constructor (__noSuchMethod__, __parent__) { yield (__iterator__.prop) } )");
tryItOut("L:if(#1=[#1#]) {yield [,,z1]; }");
tryItOut("M:switch(<><x><y/></x></>.unwatch(\"prototype\")) { default: let (__noSuchMethod__ = __proto__) { if(<><x><y/></x></>) { if (__proto__) prototype;} else {__parent__ = <y><z/></y>, __count__;constructor =  { return <><x><y/></x></\f>; } , __proto__; } }break;  }");
tryItOut("if(<x><y/></x>) {'haha'.splityield <><x><y/></x></>; } else  if (1e+81) {*; }");
tryItOut("{M:if(false) export constructor\n else  if ((*-=((undefined)()))) const prototype = <y><z/></y>, __parent__ = [,,]; else {while((<><x><y/></x></>) && 0){(<x><y/></x>);continue L; } } }");
tryItOut("/*infloop*/M:do if( \"\" ) {<y><z/></y>; } while(<y><z/></y>.valueOf(\"number\").isPrototypeOf(({a2:z2}).__lookupSetter__(\"__iterator__\")))");
tryItOut("if((<y><z/></y> ^ <x><y/></x>).eval(yield <><x><y/></x></>)) { if (<x><y/></x> += false) export *;} else gc()");
tryItOut("/*infloop*/for(RegExp((eval(\"let (__noSuchMethod__, prop) 3/0\", __noSuchMethod__))); ((())()); (prototype = <y><z/></y>)) 1e81;");
tryItOut("const prop;");
tryItOut("/*for..in*/for(const (constructor) in ((function(y) { yield y; throw this;\nexport *;\n; yield y; })(((1e+81 for each (__parent__ in try { let __count__ = window, __count__ = constructor; } catch(__noSuchMethod__) { {} } ))))))return;");
tryItOut("/*infloop*/do {\nreturn;let __proto__; } while(prop);");
tryItOut("do {break M; } while(( \"\" .hasOwnProperty(\"prototype\") *= (__proto__ = true) %= (typeof <><x><y/></x></>)) && 0);");
tryItOut("let *, prop");
tryItOut("return  /x/g ; const __iterator__;");
tryItOut("/*for..in*/for(var __parent__ = [constructor for each (prop in <x/>)] in <y><z/></y>) {{}var __parent__ = <x><y/></x>, __parent__ = this; }");
tryItOut("if((new Error(<x/> , *::*))) { if (<x><y/></x> ? this : __noSuchMethod__) {if(<x><y/></x>) { if (<><x><y/></x></>) const __noSuchMethod__, prop;} else {const __iterator__ = *;{} } } else prop\n}");
tryItOut("undefined.watch(\"prototype\", /a/gi);");
tryItOut("/*for..in*/for(const prop in (( /x/ )(*::*)))return <y><z/></y>\n");
tryItOut("while((\n \"\"  @ 0x99) && 0){if([[]]) {export *; } else {export *;(eval).call } }");
tryItOut("/*for..in*/for(let __proto__ in new (((yield <y><z/></y>)))(1e81 || __parent__, <><x><y/></x></>)) {/*infloop*/while(<><x><y/></x></>)/a/gi }");
tryItOut("/*for..in*/for(const __parent__ in new Array()) {if((033.__lookupGetter__(\"__iterator__\"))) export *; else  if (<x/> instanceof -1) {throw window;export __proto__; } }");
tryItOut("M:with({__parent__: 1e+81})[1];");
tryItOut("L:if(window) {return; }");
tryItOut("throw constructor;");
tryItOut("L:if([11,12,13,14].filter) export *; else  if (__iterator__+=4..constructor = (--({prototype: __count__}))) return (-1);");
tryItOut("M:if(__noSuchMethod__) {export __proto__; }");
tryItOut("do const __noSuchMethod__; while((null.__parent__ = __count__) && 0);");
tryItOut("L: yield <x/>;");
tryItOut("3/0");
tryItOut("M:if(({__proto__: {}, __noSuchMethod__ getter:  \"\"  })) { if ((null.prop = (function::__count__%=-1.valueOf(\"number\"))).prototype = ((++#3={a:#3#})(prototype = false, prototype)())) export *; else {Math.singc() }}");
tryItOut("L:if(({ __count__: ({ prototype: __count__ }), __noSuchMethod__: ({ __iterator__: __parent__, __count__: ({ __parent__: constructor }) }) }), ({ x::__iterator__:  })) return; else  if (<><zzz>prototype</zzz></>) M:while((__parent__) && 0){<x><y/>\f</x>; } else \n");
tryItOut("with({__iterator__: *::*})(true);");
tryItOut("let (({ __noSuchMethod__: __iterator__, __parent__: try { {} } catch(prop) { yield; }  }) = #0=({function::__proto__: <x><y/></x>}), __parent__) { L: __proto__; }");
tryItOut("((yield @foo));");
tryItOut("with({__count__: [15,16,17,18].filter((#1#).watch, <><x><y/></x></>)}){export prototypeexport *; }");
tryItOut("prop = __iterator__;");
tryItOut("eval(\"*::*\", <x><y/></x>);");
tryItOut("{L: export *; }");
tryItOut("let yield = <x/>, prototype;");
tryItOut("/*infloop*/do //h\n{.2; } while( \"\" .eval(null));");
tryItOut("/*infloop*/L:for(const __count__; (this ? <x><y/></x> : *); __noSuchMethod__ = this) ;");
tryItOut("/*infloop*/for(var [function::__parent__, ] = new Object((__parent__ = <x><y/></x>), <x/>); (__parent__ || function ([y]) { }.hasOwnProperty(\"prototype\"\f)).@*; ((prototype)[(-1)]) :: *.eval(<><x><y/></x></>)) export *;");
tryItOut("if(<x><y/></x> ^ *) return; else  if (prop = this / __count__) {; } else {yield;export *; }");
tryItOut("L:do {yield;return; } while((<x><y/></x>) && 0);");
tryItOut("throw <y><z/></y>");
tryItOut(";");
tryItOut("do /*for..in*/for(var __count__ in (([1,2,3,4].map)(*::* <<= @foo))){yield;let prop, __iterator__; } while((new function(q) { return q; }()) && 0);");
tryItOut("if(({constructor: <>*::* - 1.3 &= let (__proto__ = 3.141592653589793, __noSuchMethod__) undefined</> })) { if (prototype = constructor.__iterator__ setter= (function(q) { return q; }).call(__noSuchMethod__(undefined))\r) \n__iterator__} else {const __iterator__; }");
tryItOut("const __proto__ = null, prototype = <x/>;");
tryItOut("while((#1=__parent__) && 0){yield;return  /x/ ; }");
tryItOut("if(let (prop, __iterator__) 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) return <x>/*\n*/<y/></x>.hasOwnProperty(\"prop\");");
tryItOut("{export *; }");
