tryItOut("if( \"\" .__defineSetter__(\"prototype\", function ()window)) {gc()yield <x/>; }");
tryItOut("/*infloop*/L:while(([15,16,17,18].filter([1,2,3,4].slice, function(id) { return id }))){([,,].@foo); }");
tryItOut("switch('fafafa'.replace(/a/g, function(y) { yield y; break L;; yield y; })) { case (\n /x/g .hasOwnProperty(\"prototype\")) %= {}(window): \n/*for..in*/for(var __proto__ = @foo in {}) __iterator__break; /*for..in*/for(const prop = null in window) <x><y/></x>function  __proto__ () { continue ; } case (uneval(new this( \"\" , <><x><y/></x></>))): ;break; break;  }");
tryItOut("__count__ = __proto__\n/*for..in*/for(__parent__.__iterator__ in ((eval)([,,]))){[11,12,13,14].filter; }");
tryItOut("if((constructor = this === #0=[prop])) {<y><z/></y> += true; }");
tryItOut("/*infloop*/while(null){gc()throw <x><y/></x>; }");
tryItOut("yield  \"\" ;");
tryItOut("export constructor;");
tryItOut("{return;new Function }\nyield *::*; const constructor\nL: {set =  /x/ ;continue M; }");
tryItOut("if(prop) {let __noSuchMethod__;__count__, prototype = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"); window.yoyo(__count__); <><x><y/></x></> *  \"\" ) let __parent__ =  /x/ ;");
tryItOut("L:if(this) { if (<x/>) {throw null; } else {export __iterator__;yield <x><y/></x>; }\f}");
tryItOut("if((let (__count__ = [1,,], prop)  /x/ /*\n*/)) { if (__iterator__.__iterator__ = #1=({__noSuchMethod__: <x/>})) {/a/gi } else {/*infloop*/L:for(let __parent__; <><x><y/></x></>; __proto__) export *; }}");
tryItOut("do false; while((new (yield (yield <><x><y/></x></>))(__count__ = <y><z/></y>).__defineSetter__(\"prop\", (Math.pow).call)) && 0);");
tryItOut("(this++).isPrototypeOf(__iterator__%=4.).__noSuchMethod__ = prop;");
tryItOut("throw StopIteration;");
tryItOut("if(<x><y/></x>.(prop)) {(__noSuchMethod__); } else /*for..in*/for(let [prototype, __parent__] = <x><y/></x> in (-1)) {yield *; }");
tryItOut("/*infloop*/M:do continue ; while(<y><z/></y>.hasOwnProperty(\"__noSuchMethod__\"));\n/*infloop*/L:while(<><x><y/></x></>)throw __count__;\n");
tryItOut("if(<><x><y/></x></>((true <<=  /x/ ), this)) return; else  if (constructor.__proto__.isPrototypeOf(<><x><y/></x></>)) ({}).__lookupGetter__ else return @foo;\n/*for..in*/M:for(prototype in  /x/g ) {{} }\n");
tryItOut("if(().call(++#0=[[11,12,13,14].some], )) { if (((__proto__) = [[, , [, constructor, ({ __proto__: prop })]], __iterator__, [], [, ({ constructor: __iterator__ }), __count__]])) /*infloop*/\ndo break L; while(new  '' (@foo, []));} else {{/*infloop*/while(function ([y]) { }){export __count__; }return; } }");
tryItOut("/*infloop*/while((<x><y/></x> in 0/0\n.__count__ = new @foo .@*::  '' (++<><x><y/></x></>, <x><y/></x> , *::*) % \f /x/g .prop))return;");
tryItOut("/*infloop*/for(let __noSuchMethod__; (function::prototype = __parent__.(<x/>)); *.*.propertyIsEnumerable(\"__iterator__\"))  /x/ \n\f");
tryItOut("{__count__ = <x><y/></x>;const ; }");
tryItOut("if(<x><y/></x>) { if (4.) {return;__noSuchMethod__, __proto__; (uneval((<x><y/></x>.(window)))) } else yield function ([y]) { };}");
tryItOut("/*for..in*/for(const constructor, __iterator__['prototype'] in (((function  prop (__proto__, __iterator__) { return <x><y/></x> } ).call)((<>x><<x><y/></x> ></'></>.__count__ = @foo)))){continue ; }");
tryItOut("if(__count__ = <x/>.watch(\"__proto__\", gc)) { if (eval(\"new  /x/ ()\", (typeof <x><y/></x>))) { const __count__;var __parent__ = <x><y/></x>; } else {this; }}");
tryItOut("\nthis;\n");
tryItOut("if(eval(\"0.1\", <y><z/></y>)) yield; else Function");
tryItOut("/*for..in*/for(let __iterator__.__iterator__ in ((function  setter () { return ( /x/ \n) } )(this.zzz.zzz)))((eval(\"0/0\", function(q) { return q; })));");
tryItOut("/*for..in*/for(let [__parent__, __proto__] =  /x/  in <x><y/></x>) __count__ =  '' ");
tryItOut("try { __proto__, __iterator__; } finally { yield  \"\" ; } ");
tryItOut("L:if(-0 >> -0 | <x/>.*) {export prototype;return <y><z/></y>; } else  if (let (prop) __count__.(({a1:1})) , ([,,z1].prop)) throw this;");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("/*infloop*/for(prop; __parent__; String()) const __iterator__;");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = prop = null in __parent__) {gc()throw StopIteration; }");
tryItOut("let(__noSuchMethod__ = [<x><y/></x>]) { prototype = __iterator__;");
tryItOut("{{}(0); }");
tryItOut("do {/*for..in*/for(const [__noSuchMethod__, prototype] = this.yoyo(<x/>) in this) {function () { (<x><y/></x>); } yield false; }{} } while((({__proto__ getter: (Function).apply })) && 0);");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = ( /x/ .__lookupSetter__(\"__parent__\") / (prototype = [z1])).watch(<y><z/></y>, *::*) in [window.__lookupGetter__(\"__noSuchMethod__\")]) ");
tryItOut("return __iterator__;");
tryItOut("/*for..in*/for(__parent__ = new (<x><y/></x> ^= <y><z/></y>.propertyIsEnumerable(\"__count__\"))() in new (<><x><y/></x></>).watch(1e-81)) {with({(<><x><y/></x></>).call<x/>, __count__): (1 for (x in [])).propertyIsEnumerable(\"__parent__\")}){export prop; } }");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = null.propertyIsEnumerable(\"prop\")\t in <><x><y/></x></>) /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in ({a2:z2})) export __noSuchMethod__;");
tryItOut("0\n(p={}, (p.z = window)()).constructor = String();\n");
tryItOut("with((this /= @foo).*){if(undefined) <x><y/></x>; else  if (__iterator__.__parent__ = function ([y]) { }) {([]);; } else {throw {}; } }");
tryItOut("/*infloop*/do throw <x><y/></x>; while(<x/>);");
tryItOut("while(( ''  :: <><x><y/></x></>) && 0)export *;");
tryItOut("L:with({__parent__: (<x><y/></x> .@*:: *::*) ? this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty) : <y><z/></y>}){L:if((<x/> *= *)) {var __count__ = undefined, x::__iterator__;gc() }let (__proto__ = 0x99) { if(__count__ = <><x><y/></x></>) { if (new .2\t) {yield; } else throw <x/>;} } }");
tryItOut("/*infloop*/while(<x/>){}");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(const eval(\"<x><y/></x>\", false)\f.__parent__ in __noSuchMethod__ = get) L: break ;");
tryItOut("let (__iterator__) { __noSuchMethod__ }");
tryItOut("with({}) for(let y in [5,6,7,8]) throw __iterator__;");
tryItOut("L:if(typeof <y><z/></y>) { if (--4.) break ;} else {/*infloop*/for(const __iterator__;  \"\" ; true) gc() }");
tryItOut("try { return; } finally { throw <y><z/></y>; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <><x><y/></x></>) yield ({a2:z2});");
tryItOut("let(__count__, __iterator__) { throw <><x><y/></x></>;");
tryItOut("let (__parent__ = ({prop:  \"\" })[(#0=({__iterator__: __parent__: __noSuchMethod__.eval(__noSuchMethod__.prototype getter= Function)}))]) {  try \n/*infloop*/for(<>3</>; <x><y/></x>; __noSuchMethod__) (window); }");
tryItOut("/*for..in*/M:for(let prototype = delete null in  \"\" ) export *;");
tryItOut("if((({__parent__: <y><z/></y>}))) {export prototype; } else  if (this += window) {(*::*); }");
tryItOut("L:if(prop.prototype getter= (new Function(\"return;\"))) { if ((constructor.__count__ = window)\n) {let __iterator__;(<x/>); }} else /*for..in*/for(let __parent__ in prototype) {(({}).__lookupGetter__).applyreturn; }");
tryItOut("");
tryItOut("if(<xxx {set}={__proto__} />) let function::__iterator__; else  if (<y><z/></y>) let __count__; else var __count__;");
tryItOut("let (constructor, [] = ( /* Comment */*::*) |= __proto__) { /*for..in*/for(let [__count__, ({ __parent__: ({ __noSuchMethod__(setter): [({ constructor: [__iterator__, , constructor, __iterator__], __proto__: prop }), __proto__] }), __iterator__: [, , , ({ __count__: ({ constructor: [set, ] }), __proto__: __noSuchMethod__ })] })] = (new  '' ) |= (__proto__).prototype in prototype.__noSuchMethod__) {function(id) { return id }\nyield prop;\n } }");
tryItOut("with({__parent__: (new String( /x/ ))})( '' );__noSuchMethod__;");
tryItOut("let(({ __count__: prop, prop: each }), __parent__) ((function(){throw StopIteration;})());");
tryItOut("with({}) __proto__ = __parent__;");
tryItOut("/*for..in*/for(__count__ = <><x><y/></x></>++ in new (eval)([({ prop: ({ __noSuchMethod__: __proto__ }), __proto__: [] }), , ({ __iterator__: __iterator__ }), ] = let (({ __proto__: prop }) = *) <><x><y/></x></>--)) {if(<y><z/></y>(window)) { if (__proto__) __parent__;} else {const __noSuchMethod__;let __parent__, __proto__; }const prototype = [1,,], __noSuchMethod__ = 1e+81;/*infloop*/for(const constructor = <><x><y/></x></>; [1]; <x><y/></x>) {continue ;[1,2,3,4].slice } }");
tryItOut("(undefined)\nreturn;\n");
tryItOut("/*infloop*/M:for(((window)(window, prototype)++); @foo << <x><y/></x>; constructor) (*);");
tryItOut("let (__proto__) { L:do export *; while((<x><y/></x>.(this)) && 0); }");
tryItOut("/*infloop*/for(((-0)[window])(<><x><y/></x></> >> __count__, (__proto__.__proto__ setter= 'haha'.split)); <\t><xxx>{prop}</xxx></> *=  \"\" ; (new (0)(<x><y/></x>))) export *;");
tryItOut("/*infloop*/do export prototype; while(<><x>//h\n<y/></x></> * <x><y/></x>)\n");
tryItOut("throw  /x/ ;");
tryItOut("M:do export constructor; while((<x><y/></x>) && 0);");
tryItOut("/*for..in*/L:for([__noSuchMethod__, __iterator__] = __parent__ in (__parent__.(<><x><y/></x></>))) M:if((true\n)) {var __noSuchMethod__; }");
tryItOut("/*infloop*/while(<x><y/></x>){[,,z1] }");
tryItOut("for(let y in [])");
tryItOut("{let __iterator__ = 1e-81, __iterator__ = *::*; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in  /* Comment */window) {}");
tryItOut("/*infloop*/while(<y><z/></y>);");
tryItOut("");
tryItOut("do throw null; while(([15,16,17,18].filter(<y><z/></y>, this <<= undefined)) && 0);");
tryItOut("return ({ prototype: prototype, __proto__: prop }) = 0.*;");
tryItOut("/*for..in*/L:for(\t__count__ = (new ({ prop: .2['__count__'], __count__: ({ __proto__.__parent__ = false: __iterator__, __count__: prototype }) }) = __iterator__\r.prototype getter= <y><z/></y>.__lookupSetter__(\"__noSuchMethod__\")(0, <y><z/></y>)) in window) {gc()(1e+81); }");
tryItOut("with({__noSuchMethod__:  \"\" \n.watch(\"__count__\", 0)})<><x><y/></x></>\n/*\n*/yield (<><x><y/></x></> .. window); const prototype.prototype;");
tryItOut("/*infloop*/L:for(let \f__iterator__; prop.(@foo); (__proto__ === @foo)) break ;\nvar 1.3;\n");
tryItOut("/*infloop*/for(const __parent__; ((1 for (x in []))); ({ __iterator__: ({ prop: ({ x::__iterator__: [, , , __proto__, prop] }), constructor: __parent__ }), __proto__: ({ constructor: ({ __proto__: __iterator__, prototype: ({ __count__: ({ prop: [] }) }) }) }) }) = [15,16,17,18].sort((1 for (x in [])), yield  /x/  .@ null for each (prop in <><x><y/></x></>) for each (__count__ in [z1]) for each (__parent__ in <x><y/></x>))) L:if((*--)) \f{true; } else  if (this.zzz.zzz) {do function (__parent__) { return prototype }  while((<x><y/></x>) && 0); }");
tryItOut("L:if(<x><y/></x> @ *::*) if(prototype = .2.propertyIsEnumerable(\"__proto__\")) { } else  if (this < null) {continue M;throw <><x><y/></x></>; } else M:with({__iterator__:  '' })let __proto__, __proto__ = <><x><y/></x></>;\n{}\n");
tryItOut("return <><x><y/></x></>.throw( \"\" );");
tryItOut("try { let(__noSuchMethod__ = [1,,] ? this : <x><y/></x>, prop = 0/0) { throw __proto__; } catch(__noSuchMethod__ if <x/> &= <x><y/></x>) { for(let y in []); } finally { return; } ");
tryItOut("__parent__ = __parent__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(<x><y/><\r/x>) { if (*::*) ; else {return; }}");
tryItOut("if(<><{constructor}> </{constructor}></>) return 0.1 -= 5.0000000000000000000000;");
tryItOut(";");
tryItOut("/*for..in*/M:for([prototype, <y><z/></y>] = constructor in this) {break ;continue ; }");
tryItOut("/*infloop*/for(let prop; <x/>; this) {function  __iterator__ (__iterator__, prototype) { yield undefined }  }");
tryItOut("if((prototype for each (function::__proto__ in *::*) for (prop.__iterator__ in *::*) for (__count__ in false))) {if(<y><z/></y> @  /x/ ) {return;[1,2,3,4].slice } else  if (true.prop = <><x><y/></x></>) return;return  '' ; } else {with({: ((Function).call)(({a1:1}),  '' )})return this;/*for..in*/M:for(let [__iterator__, prop] = (this.__defineGetter__(\"prop\", (({}).__lookupGetter__).call)) in @foo) break ; }");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("L: {const __noSuchMethod__ =  /x/g , prop = <x><y/></x>;var constructor, __parent__; }");
tryItOut("if(({})) {( '' ).watch } const function::prototype;");
tryItOut("switch(<y><z/></y>.@*) { default: break; break; ({ constructor: __iterator__, prop: prop }) = [z1,,], __parent__break;  }");
tryItOut("with({}) { return * *= (typeof <y><z/></y>); } ");
tryItOut("/*infloop*/do with({prop: <>window++</>}){} while([, ({ __iterator__: [], __noSuchMethod__: prop }), , ] = (__noSuchMethod__-=<><x><y/></x></>.eval(prototype = false)));");
tryItOut("Math.sin");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = this in prop%=<x><y/></x>) ;");
tryItOut("/*for..in*/for(let constructor = ([15,16,17,18].filter([1,2,3,4].map, __count__ <<= <><x><y/></x></>)) in  /x/ .__defineSetter__(\"prototype\"/*\n*/, (new Function(\"throw true;\"))) .. window | @foo.unwatch(\"__count__\")) {if(<x/>) { if (@foo) {return [,];__noSuchMethod__ = *::*; }} else  '' (<x><y/></x>); }");
tryItOut("export constructor;");
tryItOut("L:if((uneval(<bbb xmlns=\"false.yoyo(<!--yy-->)\"><!--yy--></bbb>))) { if (new Math.pow((undefined.constructor = __count__ = -1), #1=[#1#]).@foo) gc()} else {break L; }\f");
tryItOut("L: {break ; }");
tryItOut("if([prop]) {[z1,,];return; } else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in  /x/ ) {return <y><z/></y>; }");
tryItOut(" '' \n");
tryItOut("var prototype = 3.141592653589793, __count__; const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(([15,16,17,18].sort(new Function, x::prop))['__count__'] in (__count__ = *::* ? 1.3 : * == <y><z/></y>.propertyIsEnumerable(\"prototype\"))) {gc() }");
tryItOut("gc()\nexport *\ngc()");
tryItOut("if(new (function  prototype () { M:if(<><x><y/></x></>) break L; else  if (<x><y/></x>) {const __iterator__;(-0); } else {gc()const __iterator__ = <><x><y/></x></>, __parent__ = 3.141592653589793; } } )()) {try {  } finally { export __count__; }  }");
tryItOut("with({constructor: (<y><z/></y>.valueOf(\"number\").unwatch(\"__noSuchMethod__\"))}){throw  \"\" ;M:switch( /x/g ) { case 6: (<y><z/></y>);case 1: __count__;break; case 2: yield null;default: var prototype, constructor;case #1#: window;break; throw __proto__;case __noSuchMethod__: return  '' ;break;  } }");
tryItOut("if(({})) {<x><y/></x>; } else  if (window) yield; else {let __noSuchMethod__;(this); }");
tryItOut("/*for..in*/for(var __count__ in __noSuchMethod__ = <><x><y/></x></>) {({}).__lookupGetter____iterator__ }");
tryItOut("/*for..in*/for(var [__iterator__, __count__, ] in (__count__.__noSuchMethod__ = <><x><y/></x></>)) return;\nreturn this;\n");
tryItOut("/*for..in*/for(let prop = new (#1=[#1#])() in  /x/ ) {yield *::*; }");
tryItOut("if(false) /*for..in*//* nogeckoex bug 349964 */ for  each(const {; } in <x><y/></x>) {const prototype;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in null--) {yield function(id) { return id };; }\f");
tryItOut("L:if(*.unwatch(\"__iterator__\")) { if (((033.__lookupSetter__(\"__iterator__\")))[(({a1:1}).__lookupSetter__(\"__iterator__\"))]) {function  __proto__ (prop, prop)__iterator__export *; }} else {(<x><y/></x>);each; }");
tryItOut("let __iterator__ = this\n");
tryItOut("/*infloop*/M:for(const [, __iterator__] = constructor =  /x/ ; this; window in <x/>) {;(<x><y/></x>); }");
tryItOut("L:if(null) export __noSuchMethod__; else  if (undefined *= undefined) export __noSuchMethod__; const __parent__;");
tryItOut("{break M; }");
tryItOut("let(__count__ = <x/>) ((function(){yield;})());");
tryItOut("with([1,2,3,4].map)if(<><x><y/></x></>.prop) { if (([each%=prop])) yield window;} else continue L;");
tryItOut("L:do return #1=[#1#]; while((\t<><x><y/></x></>) && 0);");
tryItOut("M:if(<x><y/></x>.__defineSetter__(\"prototype\", this)) {const yield = 0/0, constructor;function  function::prototype () /x/  } else export *;");
tryItOut("/*infloop*/for((#0=[__noSuchMethod__]); __proto__.propertyIsEnumerable(\"prop\"); new (Math.pow)(window)) (<><x><y/></x></>);");
tryItOut("/*for..in*/L:for(let prototype = __iterator__.__iterator__ = *::*.throw([11,12,13,14].sort) in ((yield  '' ))) ;");
tryItOut("'haha'.split");
tryItOut("/*for..in*/L:for(let [function::__parent__, prop] = new (new Function)(@foo.yoyo(__proto__), (uneval(<x><y/></x>))) in this.__defineGetter__(\"__proto__\", [1,2,3,4].slice)) {function(q) { return q; }continue M; }");
tryItOut("/*for..in*/for(const __parent__ in (prop = [ /x/g ]).throw((__noSuchMethod__.__parent__ = (<x><y/></x>.(__iterator__))))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <><x><y/></x></>) var __iterator__ = window;/*for..in*/for(let (__noSuchMethod__ = <><x><y/></x></>).prop in this) if(<x/>) {(window); } else  if ((-1)) yield <x><y/></x>; }");
tryItOut("yield;yield this;L: throw  '' ;");
tryItOut("/*for..in*/for(__count__ = #1=[window] in \f<><x><y/></x></>) {throw  \"\" ;*::*; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((#\t2=(return __noSuchMethod__; = constructor))) { if ((window)[[z1]]) {throw <x><y/></x>;const constructor =  /x/g ; }} else return;");
tryItOut("with(-1)var __proto__;");
tryItOut("let(prototype, constructor) { return;");
tryItOut("if(<bbb xmlns:ccc=\"<><x\f><y/></x></>.prop = *::*\"><ccc:eee></ccc:eee></bbb>) {if(-1) { if (window) {export *;; }} else {}yield; }");
tryItOut("L: {(({a2:z2})); }");
tryItOut("/*for..in*/M:for(let [prototype, __iterator__] = (uneval(eval(\"new Array(<x><y/></x>.(<><x><y/></x></>), <x/>).watch(\\\"prototype\\\", gc)\", <><{__count__}><!--yy--></{__count__}></>))) in (<><x><y/></x></>.@*)) /*for..in*/M:for(let __noSuchMethod__ in (((-0))( /x/g )))yield;");
tryItOut("break M;");
tryItOut("switch(({ __parent__: ({ __iterator__: __iterator__, __iterator__: __proto__ }) }) = (__proto__ = 1.2e3)) { default: break; case this.hasOwnProperty(\"constructor\"):  }");
tryItOut("{gc() }");
tryItOut("yield (<x><y/></x>)(undefined, <><x><y/></x></>)\n");
tryItOut("gc()");
tryItOut("__count__ = prototype;");
tryItOut("for(let y in [5,6,7,8]) try { let constructor = window; } catch(__noSuchMethod__ if constructor.propertyIsEnumerable(\"__noSuchMethod__\")) { export *; } finally { @foo; } ");
tryItOut("throw StopIteration;");
tryItOut("if((#2=[<x><y/></x>[@foo]])) {yield;/*infloop*/for(function(id) { return id }; <x><y/></x>; [,])  /x/g ; } else  if ( ''  & window) let(prop) { gc()");
tryItOut("(window);");
tryItOut("if(this) {M:with({prototype: 1.2e3}){{} } }");
tryItOut("return;");
tryItOut("if((__count__.(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) >>> 3/0)) { }");
tryItOut("if(__iterator__) {yield constructor; } else {gc()<x/>; }\n");
tryItOut("yield window;");
tryItOut("with(__proto__-=new (function(q) { return q; }).call(this)){; }");
tryItOut("/*for..in*/for(const __count__ in  /x/g ) (({}));");
tryItOut("/*for..in*/M:for(let __parent__ in ((function  __iterator__ ()++((p={}, (p.z = @foo)())).hasOwnProperty(\"__noSuchMethod__\"))((__count__ = [,,] - .unwatch(\"__noSuchMethod__\"))))){/*infloop*/M:for(__proto__.prototype = __noSuchMethod__ = __count__; (__count__.prototype getter= eval.*); \ntrue :: <x><y/></x>) /*infloop*/for(*::*; <y><z/></y>; <><x><y/></x></>) { /x/ ; } }");
tryItOut("return;");
tryItOut("M:do {export *; } while((<x><y/></x>) && 0);");
tryItOut("{do /*infloop*/for(__noSuchMethod__.(__proto__); * if (<y><z/></y>); *) const prototype; while((window) && 0);M:if(((#3={a:#3#} , <y><z/></y>))()) {yield; } else yield; }");
tryItOut("let (constructor = ({__proto__: {}}), __count__)\f { <x><y/></x>; }");
tryItOut("while((<x/>.*) && 0){export __proto__; }");
tryItOut("/*infloop*/while(@foo)__parent__;");
tryItOut("throw __iterator__\n");
tryItOut("/*for..in*/for(const prop = prototype = ({ __proto__: __count__ }) in (__proto__)(false) = __proto__) let (prop, prototype = (__noSuchMethod__.__proto__ = <x/>)) { ; }");
tryItOut("M:if(<><x><y/></x></> / <x><y/></x>) {continue L; } else  if ( /x/g ) yield;");
tryItOut("for(let y in [5,6,7,8]) yield this;");
tryItOut("L:if((this.@foo).isPrototypeOf((let prop))) { } else  if (__proto__) yield; else {with({prototype:  \"\" }){return;; }yield; }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("with({}) break L;");
tryItOut("do {( } while((this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) && 0);");
tryItOut("/*infloop*/L:for(({ constructor: ({ prototype: ({ __count__: prop, __noSuchMethod__: set }) }), __noSuchMethod__: [] }) = (this.__defineGetter__(\"function(q) { return q; }\",  /x/ .@foo)); ([null].some(function  prop (__count__, __noSuchMethod__) { __iterator__; } )).@*; ((function  each (prop, prop) { return <><x><y/></x></> } )(<x><y/></x>, <x><y/></x>)).eval(*.__noSuchMethod__)) break L;");
tryItOut("/*infloop*/do {let(__iterator__, constructor) { return; } while(eval(\"__noSuchMethod__\",  '' ).__defineGetter__(\"__noSuchMethod__\", <>constructor.__count__ setter= function ( /x/ , __noSuchMethod__)__parent__</>));");
tryItOut("{gc() }");
tryItOut("let(prop, ({ __count__: prop, __iterator__: [] }) = ()) { with({}) { for(let y in [5,6,7,8]) throw prop; } ");
tryItOut("/*infloop*/for(true; false; window) {yield ({a2:z2}); }");
tryItOut("/*for..in*/M:for(__parent__ in (new 1e81())) {yield;/*for..in*/for(var __iterator__ in *) return; }");
tryItOut("do /*infloop*/for(const __noSuchMethod__ = null; <><x><y/></x></>; __noSuchMethod__) {var prop = [,,]; } while((({ get __parent__ set () { return 3/0 }  }).yoyo((true ^= __iterator__))) && 0);");
tryItOut("prop, prototype\nconst __proto__, __noSuchMethod__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ =  \"\"  instanceof __proto__ > (({})\n) >>> ([<><x><y\f/></x></> for (prop in <y><z/></y>)]) in (new Function(\";\"))(1.2e3)) {prop = constructor; }");
tryItOut("return;\nexport *;\n");
tryItOut("/*infloop*/while((prototype = <><x><y/></x></>, __proto__.yoyo(__count__).__proto__))__iterator__, function::__count__ = <x/>\n");
tryItOut("with({__proto__: @foo})default: ;break; break; case  '' : break; function ()nullcase 7: break; case 2: break; {}[z1];");
tryItOut("return 3/0;");
tryItOut("switch(( /x/ .hasOwnProperty(\"__iterator__\").hasOwnProperty(\"prop\"))) { case 4: break; case ({ get __proto__ __proto__ () { yield 0/0 } , setter setter: gc }) >= new ( /x/g )(<x><y/></x>, __count__)(): break; break; case ({prop: __parent__ }): default: break;  }const __noSuchMethod__;\n{}\n");
tryItOut("const __count__;\nreturn <x/>;\n");
tryItOut("/*infloop*/M:do throw undefined; while((#2=[this]));");
tryItOut("/*infloop*/M:for((prop.([,,]) .. new #1=[#1#](prototype, 1e+81));  '' ; (({__count__: undefined}))) false;");
tryItOut("/*for..in*/M:for(var [x::prototype,  '' ] = (<{prototype}><x><y/></x><\f/{prototype}>.(({}))) in <><x><y/></x></>) const __iterator__;");
tryItOut("/*infloop*/M:do {return; } while(@foo);");
