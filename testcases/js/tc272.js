tryItOut("/*for..in*/for(__iterator__ = __noSuchMethod__ in (<><x><y/></x></> != [[1]] ^ <><x><y/></x></>)) {throw <x/>;if((@foo / <><x><y/></x></>) *= this.__defineGetter__(\"constructor\", Math.sin)) {<x/>; } else  if \t(window) throw 3/0;\nlet __noSuchMethod__;\n }");
tryItOut("__parent__ = yield, __noSuchMethod__ = function::__noSuchMethod__");
tryItOut("/*infloop*/for(<><></></>; (uneval([[]])); constructor = new null()) var prop = false;");
tryItOut("throw false;export *;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((([]).__defineSetter__)(*::*)))gc()");
tryItOut("if(\n /x/g ) {__parent__ =  /x/g {\f} } else let __parent__ = <x/>;");
tryItOut("break M;\nreturn;\n");
tryItOut("with({}) <x/>;");
tryItOut("if(__proto__ = __proto__) throw function(id) { return id }; else  if (<><x><y/></x></>.propertyIsEnumerable(\"__parent__\")) gc()");
tryItOut("L:if((Array(<><x><y/></x></>)) === try { /*\n*/export *; } catch(constructor if (function(){var __iterator__, __parent__;})()) { var __noSuchMethod__, __iterator__; } catch(yield if (function(){})()) { let function::__iterator__ = window; } catch(constructor if this) { <x><y/></x>; } finally { @foo } ) let constructor; else {const __iterator__ = *;L:if([1]) {yield  /x/g ;{} } else yield; }");
tryItOut("const __count__ = window, __iterator__ = ({})\nwith(__noSuchMethod__ = false)/*for..in*/for(var __proto__ in <><x><y/></x></>) break ;");
tryItOut("/*infloop*/for(yield constructor = <x><y/></x>; (uneval(<y><z/></y> ^= <x><y/></x>)); this.zzz.zzz) ;");
tryItOut("var __proto__, prototype; const __noSuchMethod__;\f");
tryItOut("return;");
tryItOut(";");
tryItOut("break M");
tryItOut("/*infloop*/for(const __count__; ([<y><z/></y>].sort(function  prototype (__proto__)<x><y/></x>.hasOwnProperty(\"prototype\"))); (1e-81.__lookupGetter__(\"__iterator__\")) -= eval(\"var prop, prototype = (-0);\", @foo.eval(-0))) {/*infloop*/for(const __iterator__ = (<><x><y/></x></> && <><x><y/></x></>); this.*; (({__count__: [<x/>]\f}))) return  /x/ ; }");
tryItOut("L: {return this; }");
tryItOut("M:if([];) var prototype, __noSuchMethod__; else  if (<x/>) {yield; } else yield prototype;");
tryItOut("if((new (function  prop () /x/ )((eval(\"<><x><y/></x></>\", true)), this))) {if((@foo.unwatch(\"constructor\"))[true]) {__parent__ =  /x/ , constructor;; } else  if ((-0) >= <><x><y/></x></>[(<><x><y/></x></>\n)]) {throw __count__;return; }continueM; } else {( /x/ .__defineGetter__(\"__parent__\", (constructor).__defineSetter__));prototype = -1, __count__; }");
tryItOut("/*infloop*/M:while(null.__defineGetter__(\"__parent__\", eval))export __count__;");
tryItOut("if(window) {export *; }");
tryItOut("export *;");
tryItOut("M:if(false >  /x/g ) { if (++<><\tx><y/></x></>) gc() else if(let (__iterator__, __noSuchMethod__ =  /x/g ) []) [1,2,3,4].slice else  if (prototype.prototype = __proto__) {return \n<y><z/></y>;; }}");
tryItOut("L:if(( ''  @ <><x><y/></x></>) /= #2=[\tnull]) //h\n<><zzz><x/></zzz></> else  if ((1e4 if (__noSuchMethod__))) {(<x><y/></x>);<x/> }");
tryItOut("let(prototype = null, __iterator__ = 3/0) { return;");
tryItOut("/*for..in*/M:for(const prototype = ( /* Comment */*::*).valueOf(\"number\") in (function(y) { yield y; const __iterator__, __parent__ = [1,,];; yield y; })((yield <><x><y/></x></>), prop) .@ (<ccc:ddd></ccc:ddd> &= .2)) /*for..in*/L:for(constructor in *) throw <><x><y/></x></>;");
tryItOut("if(this) return <x/>; else  if ((({<x><y/></x>['__noSuchMethod__']: (new 1.3 @ function(id) { return id }(__parent__.__parent__, #3={a:#3#}))}))) __count__ = <y><z/></y>, prop =  /x/g ;");
tryItOut("for(let y in []);");
tryItOut("with({__iterator__: typeof new false()})(<x><y/></x>); const constructor;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = new Number(this.constructor) in 1e+81) {/*infloop*/do return; while(__noSuchMethod__ = <x/>);/*for..in*/for(const [constructor, constructor] = const prototype = function(id) { return id }, prototype = <x><y/></x>; = <x><y/></x> in ( '' .*)) L:if((true)) export __iterator__; else  if (prototype.(false)) {__proto__throw  '' ; } }");
tryItOut("prototype = <><x><y/></x></>, __count__;");
tryItOut("/*infloop*/for(var prototype = <><><x><y/></x></></>.( \"\"  for (__count__ = <x><y/></x> in this)); (<><x><y/></x></>)[ /x/g ]; (<><x><y/></x></>)( \"\" ) = <x/>.propertyIsEnumerable(\"function::__count__\")) {const prototype, __proto__;/*infloop*/do  while(<x><y/></x>); /x/g \n }");
tryItOut("let (__count__ = (<x><y/></x>.(<x/>)).hasOwnProperty(\"__parent__\")) { __iterator__ = __parent__; }");
tryItOut("/*infloop*/for(*::* || (<y><z/></y> &= ({a2:z2})); __count__|= \"\" .eval(<><x><y/></x></>); ((function (__parent__, __proto__) { continue M; } )(constructor, 0/0))[(Object( /x/g ).__lookupGetter__(\"__parent__\").hasOwnProperty(\"__noSuchMethod__\"))]) M:while(((uneval(true))) && 0)yield;");
tryItOut("export __iterator__;");
tryItOut("M:if(window.watch(\"prototype\", (1 for (x in [])))) ; else {return  /x/ ; }");
tryItOut("{gc(){return []; }\n }");
tryItOut("yield (<x><y/></x> for each (__count__ in true));");
tryItOut("for(let y in [5,6,7,8]) return *;");
tryItOut("/*infloop*/for(const prototype = (p={}, (p.z = <x><y/></x>)()); [({ __noSuchMethod__: [], prop: __noSuchMethod__ }), ] = *; (__noSuchMethod__ = __parent__)) {do M:with({constructor: this})var window, yield =  /x/ ; while((((<><x><y/></x></>))) && 0);while(((<><x><y/></x></> % false)) && 0)var __parent__, __proto__; }");
tryItOut("if( \"\" ) { if ([z1]) {continue L;var get = <y><z/></y>; } else yield 0;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__.__iterator__ in  /x/ .__parent__) continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */<x/> for  each(var constructor in \n([15,16,17,18].sort((<y><z/></y>).__defineSetter__, <x/>))) /*infloop*/for(var prototype/*\n*/ = ((eval(\"yield __proto__;\", @foo)) ? [true] : null) ? (constructor) : ; let (<><x><y/></x></> = false) *::*; __count__.constructor = -<x><y/></x> -  '' ) ;\t const prototype;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __count__ = 0.1 in new ( '' )(undefined)) {M:with({get: <><x><y/></x></> / [z1]}){const prototype;let prototype = 1.3, prop = #1#; }let constructor; }");
tryItOut("if(3.141592653589793) { if (null) {(__noSuchMethod__);export __count__; } else export __proto__;}");
tryItOut("<x><y/></x>");
tryItOut("M:if(__noSuchMethod__.function::__noSuchMethod__) {continue ; }");
tryItOut("{let (<><bbb xmlns=\"\r(__parent__ = new ([z1,,]).watch())\"> </bbb></>) { yield 1e-81; const __proto__; } }");
tryItOut("/*infloop*/L:for(<y><z/></y>;  /* Comment */false([], <><x><y/></x></>) ? __count__ : new Number(__iterator__).isPrototypeOf([false if (window)]); (+<><x><y/></x></> < eval(\"[1]\", [z1,,]))) {[,,];\t }");
tryItOut("M:if(<> </>) { if (((new Function(\"{__proto__\\n(prototype); }\")))) {\texport __iterator__; }} else export *;");
tryItOut("/*infloop*/for(new <x><y/></x>(0, arguments).__defineSetter__(\"__count__\", (1 for (x in []))); __noSuchMethod__ % [[]]; (\ngc)) {throw *::*;if(<x><y/></x>) {({}).hasOwnPropertynew Function } else return \f<x><y/></x>; }");
tryItOut("while((<y><z/></y>) && 0){((new function (__noSuchMethod__, __proto__) { return * } ())); }");
tryItOut("switch( /x/g  <= ([1e-81 for (__iterator__ in <y><z/></y>)])) { default: /*for..in*/for(let prop in ((function () { /*infloop*/do {var __count__ = __parent__, __parent__;throw <><x><y/></x></>; } while(__count__); } )((*)()))){<x><y/></x>; }case  /x/g : break;  }");
tryItOut("if(window) {{} } else  if (3/0) t else yield <y><z/></y>;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in true) {@foo }\n");
tryItOut("M:if(__noSuchMethod__ = false) {return; } else (prop);");
tryItOut("continue M;\nreturn;\n");
tryItOut("yield window\n/*for..in*/for(var [constructor, constructor] = 1e81 in this) var __proto__, __proto__ = __count__;");
tryItOut("/*infloop*/for(let constructor = __proto__; ((__proto__.(-<x/>)).watch(\"__parent__\", [1,2,3,4].map)); 0\n) {/*infloop*/while(<x><y/></x>){({}).__lookupGetter__ } }");
tryItOut("let(break ;) ((function(){<><x><y/></x></>;})());");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("let(__proto__) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return;");
tryItOut("let(prototype, constructor) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(<x><y/></x>; (undefined); [15,16,17,18].map(function (__noSuchMethod__) { yield <y><z/></y> } ,  \"\" )) {prototype, constructor; }");
tryItOut("{with({each:  /x/ }){return __iterator__;(*::*); }{ } }");
tryItOut("");
tryItOut("switch((('haha'.split).call(<x><y/></x> + <y><z/></y>, <x/>\n, *))) { case 1: throw prop;break; break; case 2: yield #1=[#1#];case <y><z/></y>: case Exception(<x><y/></x>):  }\n(4.);\n");
tryItOut("let (__parent__, function::__parent__) { ; }");
tryItOut("with((function  __noSuchMethod__ (constructor, __iterator__) { __noSuchMethod__; } ).call([1], 1.2e3)){/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  '' ) export *;break ; }");
tryItOut("/*for..in*/L:for(let prototype in ((function(y) { yield y; throw undefined;; yield y; })(({} | @foo))))return (__noSuchMethod__.__iterator__);\nyield <x><y/></x\n>;\n");
tryItOut("while((this) && 0){with(1e-81){return 3; } }");
tryItOut("with(false)");
tryItOut("/*infloop*/while(this)var __parent__, each;");
tryItOut("({ __proto__: ({ __noSuchMethod__: (null <= false)['__parent__'], constructor: ({ constructor: (this)(function ([y]) { }), __count__: ({ prototype: __proto__ }) }) }), __count__: __iterator__ })");
tryItOut("/*infloop*/do export *; while((null.__defineSetter__(\"__count__\", (window).watch)));");
tryItOut("/*infloop*/while(<x><y/></x>){var __proto__;\fyield @foo; }");
tryItOut("L: {{}break ; }");
tryItOut("throw StopIteration;");
tryItOut("yield ( '' --);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in #1#) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("if( /x/  @ this) {function  prototype (__proto__, __parent__) { return this } export __noSuchMethod__; } else  if ([15,16,17,18].map(<x><y/></x>,  '' )) {yield __noSuchMethod__; } else throw window\n{{} }");
tryItOut("if(<><x><y/></x></>.unwatch(\"__parent__\")) {break ; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/for(const *::* in (((new Function(\"yield;\")))(__count__.__noSuchMethod__|=(window || prop))))return  \"\" ;");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(var prototype in ((function(q) { return q; })(\rcase 7: break; case  /x/ .throw(constructor): {}break; case (true + \tconstructor): )))(__count__);");
tryItOut("while(((new Function).call(prototype, \f<><x><y/></x></>) ? * : true) && 0)L: export prototype\nswitch(({a1:1})) { case 2: yield null;yield true;break; export *;break; let __parent__, __iterator__ = this;__iterator__;break; default: (<><x><y/></x></>).__defineSetter__return;break; break; case 9: case 7: throw __proto__ = <y><z/></y>;break; dcase 9: ( /x/g ); }");
tryItOut("let (({ constructor: ({ prop: [, , ({ prototype: ({ __noSuchMethod__: [] }) }), ], constructor: ({ __noSuchMethod__: ({ constructor: prototype, __proto__: ({ constructor: __count__ }) }), __noSuchMethod__: __noSuchMethod__ }) }) }), __parent__ = [11,12,13,14].filter) { export *;with({}) this.zzz.zzz; }");
tryItOut("constructor;");
tryItOut("if(3.141592653589793 |= <x/>) {function  __noSuchMethod__ () { yield <y><z/></y> }  } else  if (({ set prototype __iterator__ (return false;) { yield <><x><y/></x></> } ,  set __proto__ __parent__ () { <><x><y/></x></> & 3/0, __parent__ }  })) var prop; else return;");
tryItOut("if(<x/>) { if (new (((__count__ = __iterator__)()))()) {gc() } else {__count__; }}");
tryItOut("with((let (prototype, __iterator__ = this) *::* + this >= this.__defineGetter__(\"__noSuchMethod__\", Math.sin))){return <x><y/></x>;/*infloop*/do return @foo; while( /x/g ); }");
tryItOut("if(<x><y/></x>) {\treturn *;throw window; } else  if (<x><y/></x>) {throw *::*;yield; } else export *;\nexport __noSuchMethod__;\n");
tryItOut("/*infloop*/M:do {return (function ([y]) { })();; } while(let (constructor = __noSuchMethod__, __parent__) <><x><y/></x></>);");
tryItOut("/*for..in*/L:for(var constructor in this.zzz.zzz) /*for..in*/for([__noSuchMethod__, constructor] =  \"\"  << <x><y/></x> in <>__noSuchMethod__ = .2</>) {return;return; }");
tryItOut("/*infloop*/L:for(prototype = <><x><y/></x></>; #1#; window) return  /x/g ;");
tryItOut("#1#");
tryItOut("/*infloop*/L:for(let __iterator__; new (4.)( '' );  '' ['prop'] = (eval(\"let (__parent__, __count__ = undefined) { __proto__; }\", <x/>))) {null; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  \"\" ) {[1,2,3,4].map }");
tryItOut("M:if(new (<><x><y/></x></>)()) { if ((*::* < <><y/></x>)) __count__; else constructor = <><x><y/></x></>;}/*for..in*/for(const __parent__ in --<x><y/></x>) {{export __proto__;export prototype; } }");
tryItOut("/*for..in*/M:for(const [prototype, __noSuchMethod__] = false * window .@ eval(\"<x><y/></x>\", true) in {}) export __noSuchMethod__;");
tryItOut("/*for..in*/for(var __noSuchMethod__.prop in 'fafafa'.replace(/a/g, (function () { constructor; } ).apply\f)) {return; }");
tryItOut("L:if(([z1,,].eval((prop = true)))++) {export constructor; } else  if (this.zzz.zzz) {}");
tryItOut("for(let y in []);");
tryItOut("var __count__ = 3;");
tryItOut("with(true){{; }((uneval( \"\" ))); }");
tryItOut("const prototype, let = <x><y/></x>\n");
tryItOut("if([1] |= 1e4) {with({__noSuchMethod__: <><x><y/></x></>}){{} } } else  if ((__iterator__)[<x><y/></x>] , <x><y/></x>.hasOwnProperty(\"__parent__\").hasOwnProperty(\"__proto__\")) {let __parent__ = <y><z/></y>;return *::*; } else {yield; }");
tryItOut("with({prototype: (function ([y]) { })()}){-1 }");
tryItOut("switch(('fafafa'.replace(/a/g, function  __iterator__ (__noSuchMethod__, undefined) { yield (({ __proto__: constructor, __proto__: __parent__ })) } ))) { default: break; case 4: break; switch(((true.hasOwnProperty(\"__proto__\")(( /x/g .__lookupGetter__(\"constructor\")), *::*)).__noSuchMethod__ = (1.3.*)) ? (new Array([[1]])) : [1,2,3,4].slice()) { case 4: break;  }break; case false[<><x><y/></x></>]:  }");
tryItOut("/*infloop*/while([15,16,17,18].map((new Function(\"\")), window))export __count__\nthrow StopIteration;");
tryItOut("{@foo; }\n; const __count__;\n");
tryItOut("/*for..in*/for(var ({ __noSuchMethod__: __count__, constructor: [, , , ] }).prototype in ((new ({a1:1}) *= (__iterator__ = prop))([15,16,17,18].some(/a/gi, (\t__proto__ *  \"\" ))))){break ; }");
tryItOut("return (-1);var __proto__ = __proto__, __proto__ = function ([y]) { }\n\nyield -3/0 * __proto__;");
tryItOut("let (prop = (<><x><y/></x></>.throw(__noSuchMethod__))) { {return <x/>\n; } }");
tryItOut("/*infloop*/while(__noSuchMethod__ = <><x><y/></x></>)*");
tryItOut("with({}) { yield .2; } ");
tryItOut("if(__count__) gc()");
tryItOut("/*infloop*/for(let ({ this: [, , , ({ __iterator__: ({ function::__proto__: __proto__, prop: function::__count__ })\t })], __iterator__: [] }) = (<x><y/></x>.isPrototypeOf(<y><z/></y>)).unwatch(\"__noSuchMethod__\") .. []; constructor.__defineGetter__(\"constructor\", ({}).hasOwnProperty) .. x::__parent__.__iterator__ getter= <x><y/></x>; <><>window.watch(\"__noSuchMethod__\", function(q) { return q; })</></>)  const constructor;");
tryItOut("{export *; }");
tryItOut("yield;");
tryItOut("(__iterator__);");
tryItOut("L:if(__noSuchMethod__) { if (<> =  \"\" </>) {export *; }} else {Function const __proto__;<><x><y/></x><\f/> }");
tryItOut("/*for..in*/L:for(const constructor in (((1 for (x in [])))((null\n)))){continue L; }");
tryItOut("yield;");
tryItOut("/*for..in*/for(const prototype = __iterator__ = __parent__: (throw  /x/g ;\n) in  \"\" ) {export *;export prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x/>) return constructor;");
tryItOut("L:with({__noSuchMethod__: *::*.__lookupGetter__(\"prop\")}){var __noSuchMethod__ = arguments;return  \"\" ; }");
tryItOut("/*for..in*/for(const prop = void __count__ in *) {gc()yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (true.__proto__ = [[1]]).prop in <><x><y/></x></>) ( '' );");
tryItOut("/*for..in*/for(let __count__ in ((function  setter \n(prop, prototype) { return <><x><y/></x></> % function () { return <x/>; } () } )(prototype - null.isPrototypeOf((this.zzz.zzz))))){{}M:while((<x><y/></x>) && 0){export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in new Function()) {L: {(false).watch } }");
tryItOut("L: break L;");
tryItOut("return");
tryItOut("with({}) { return; } ");
tryItOut("return (-0);\n;\n");
tryItOut("M:\fwith({__proto__.prototype = false: *::*}) \"\" ;");
tryItOut("if((uneval(null))) { if (([z1]++)) {return 3; } else export *;}");
tryItOut("export *");
tryItOut("__parent__ = constructor, __noSuchMethod__ = *; const __proto__;");
tryItOut("return;");
tryItOut("let __iterator__ = 5.0000000000000000000000, __proto__\n/*infloop*/for(<y><z/></y>; true; \fundefined) {export *;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in <><x><y/></x></>) {export *;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(constructor; __iterator__;  '' ) {(-0); }");
tryItOut("let (__count__, delete) { export constructor; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for( if (\t({__noSuchMethod__: <y><z/></y>})), ({ prop: [] }) in <y><z/></y>) break M;");
tryItOut("{let __parent__ = window;export constructor; }");
tryItOut("/*infloop*/for(let constructor; this; __noSuchMethod__ ? new (new (/a/gi)( /x/g , prop))((this.zzz.zzz)) : (this)(<y><z/></y>) = <y><z/></y> >> -3/0) {;(*::*); }");
tryItOut("with({}) prop = __proto__;");
tryItOut("/*infloop*/for(constructor; (); -0) /*infloop*/do prototype = <x><y/></x>, __parent__; while(window);");
tryItOut("with(__noSuchMethod__ = *::*)throw *;");
tryItOut("/*infloop*/M:do var __noSuchMethod__ = <><x><y/></x></>; while(*::*); const __proto__;");
tryItOut("{if((this.__defineGetter__(\"x::__noSuchMethod__\", function(q) { return q; }))) { if (((<x><y/></x> = <x/>).__lookupSetter__(\"__parent__\"))) {(/; } else throw <x/>;} }");
tryItOut("/*infloop*/do {/*for..in*/L:for(const (this <= <y><z/></y>).apply in (((({}).__lookupGetter__).apply)(this.__defineGetter__(\"__iterator__\", function (__count__) { export *; } ))))M:do {(window); } while((this) && 0);/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) const constructor, constructor; } while([window] if (<><x><y/></x></>));");
tryItOut("[1] >>>=@foo['__proto__'] = __parent__;");
tryItOut("((uneval(5.0000000000000000000000)));");
tryItOut("yield (prototype = __parent__ = __proto__.( /x/ ));");
tryItOut("if(({prototype: <><x><y/></x></>.__iterator__})) export *;return; else  if (__count__ = [[1]]) /*for..in*//* nogeckoex bug 349964 */ for  each(const setter in <y><z/></y>) ({}).hasOwnProperty else (null);");
tryItOut("if(__proto__ = __iterator__, __noSuchMethod__) { }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(setter in __iterator__) {<><x><y/></x></>; }");
tryItOut("if(({}).hasOwnProperty) var __proto__; const __noSuchMethod__; else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {gc()let prop = __iterator__, constructor; } else {let constructor =  \"\" , x::prototype = 033;yield __iterator__ =  /x/ .eval( '' ), constructor; }");
tryItOut("/*infloop*/while(\n({prototype setter: [1,2,3,4].map, __parent__ setter: ((<><x><y/></x></>).__defineSetter__).apply })){var __count__ = true;; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in (p={}, (p.z = ({a2:z2}))())) if(<><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></>) { if (prototype) {yield <><x><y/></x></>; } else {yield;break ; }}");
tryItOut("if((({__noSuchMethod__: null, __parent__: <x/> }))) {function::constructor = *;; } else  if (3) /*for..in*/for(var __parent__ in <x/>) {(*::*); } else {return <><x><y/></x></>;{} }");
tryItOut("export constructor;(*::*);");
tryItOut("const constructor;");
tryItOut("/*for..in*/for(var prototype in ((function  __proto__ (__iterator__) { yield <><x><y/></x></> } )( \"\" )))let __noSuchMethod__;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:while( /x/ .prototype = -3/0){ }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", ([1,2,3,4].slice).apply\t)) { if ( \"\" .eval(((({a2:z2}))(<y><z/></y>) *  /x/g .yoyo(yield;))).hasOwnProperty(\"__count__\")) {L:if(1.3) {break ; } else  if (( '' .__defineGetter__(\"__count__\", __count__))) {return this;throw -3/0; } else {<><x><y/></x></>;; } }} else {{let __iterator__ = <><x><y/></x></>, __noSuchMethod__ = <><x><y/></x></>; }/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in @foo) let __proto__ = j; }");
tryItOut("{/*for..in*/for(var __parent__ in ({})) yield; }");
tryItOut("/*infloop*/for(([1,2,3,4].slice)((-1) ? <x><y/></x> : null, #3={a:#3#}); this.zzz.zzz; ((undefined)())) {export __parent__; /x/ ; }");
tryItOut("{if(__proto__) return; else {return \f /x/ ;function(y) { yield y; gc(); yield y; } }let (({ __count__: __count__, __count__: __count__ }), __parent__) { {} }\n }");
tryItOut("/*infloop*/for(const __parent__ = constructor--\t; this.__defineGetter__(\"__count__\", Function); [15,16,17,18].filter(<><x><y/></x></>, this)\t) /*infloop*/for(<><x><y/></x></>; <x/>; prototype) __noSuchMethod__ = <y><z/></y>, constructor = <x/>;");
tryItOut("let ([, , ] = null) { (<y><z/></y>); }");
tryItOut("export __noSuchMethod__\nvar __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/for(let __count__; 3 :: .2; (~__parent__.__noSuchMethod__ = <x/> instanceof [this].sort((1 for (x in []))).__defineSetter__(\"constructor\", <><x><y/></x></>) .@x:: )) {/*infloop*/do var prop =  /x/g , prop = arguments; while(new ((1 for (x in [])))([this].map(new Function), *::*));let(__count__ = <><> /x/g </></>) { throw StopIteration; }");
tryItOut("let (prototype, __parent__) { /*for..in*/for([__count__, __iterator__] = (__noSuchMethod__ = __iterator__) in <y><z/></y>) return __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>) export constructor;");
tryItOut("L:if(({@foo: [null for each (__count__ in ({a1:1}))\r]\r, delete: __parent__.__parent__ })) {var __count__ = <y><z/></y>, constructor = prop;with((window = 0/0))if(function(id) { return id }) throw @foo; } else  if ((__count__ = window)) {{}L:while(((this ? @foo :  /x/g )) && 0){; } }");
tryItOut("/*for..in*/for(let [prototype, __noSuchMethod__] = this.__defineSetter__(\"__iterator__\", __noSuchMethod__ = __count__;) in void ) {switch(__count__ = __count__) { <><x><y/></x></> } }");
tryItOut("/*infloop*/for(let constructor;  \"\" ;  '' ) yield false;");
tryItOut("if(( /* Comment */(((<><x><y/></x></\n>).call(true, function ([y]) { }, -3/0)) % ({__iterator__ getter: ( '' ).__defineSetter__ })))) __count__ = __noSuchMethod__; else  if ((__noSuchMethod__.(<x><y/></x>))) if(<y><z/></y>) { if (<><x><y/></x></>) return getter; else prototype = constructor;}\n\n");
tryItOut("return;");
tryItOut("L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <y><z/></y>) {gc()return; } const prop;gc() } while((new prop(<x/>, this)) && 0);");
tryItOut("var prototype, __proto__ = prop");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in  /x/ ) ([1]);");
tryItOut("/*infloop*/for(var __noSuchMethod__; ({__noSuchMethod__: (({__noSuchMethod__ getter: __proto__,  set __proto__ __count__ (__noSuchMethod__) { {}; }  }))}); ([([1,2,3,4].slice(new Function)) for each (__count__ in null) for ((__proto__) in []) for (__iterator__ in 033)])) gc()");
tryItOut("/*infloop*/M:while((1e-81.prop = __noSuchMethod__ = false)){return;yield <x/>; }");
tryItOut("/*infloop*/do /a/gi while( /x/g );");
tryItOut("/*for..in*/for(var __parent__ = constructor.prototype = @foo in 1e4) {gc() }");
tryItOut("with\n({__noSuchMethod__: [ /x/g ]})L:if(#1#) { if (<>\r<x><y/></x></>) export prototype; else {yield *; }}");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/do return undefined; while(0/0);");
tryItOut("with({__iterator__: #0=-3/0}){(new Function(\"yield;\")) }");
tryItOut("L: let (__parent__, prototype =  /x/ ) { export __noSuchMethod__; }");
tryItOut("/*infloop*/for(const __count__; (__parent__ = <><x><y/></x></>.( '' .__defineSetter__(\"constructor\", (1 for (x in []))))); this.zzz.zzz.@foo) {export *;throw StopIteration; }");
