tryItOut("L:switch(((__parent__) = *::*)) { default: var prop; const __iterator__; }");
tryItOut("throw window;");
tryItOut("{/*for..in*/for([__iterator__, __noSuchMethod__] = constructor.__iterator__ = __parent__ in ({a1:1})) {break M;gc() } }prototype = prop;");
tryItOut("L:with({__parent__: [[]].(({a2:z2})).propertyIsEnumerable(\"__parent__\")}){/*infloop*/for(let __noSuchMethod__; prototype; *::*) break ; }");
tryItOut("let (__parent__ = *::*) { break L; }");
tryItOut("let(__count__ = __noSuchMethod__ %= <y><z/></y>.hasOwnProperty(\"prototype\"), prop = <employee id=\"1\"><name>Joe</name><age>20</age></employee>) { yield (__count__+=(new Date(<x><y/></x>)));");
tryItOut("with({constructor: let (let = constructor, __noSuchMethod__ = <x><y/></x>) [z1,,]}){{}yield; }");
tryItOut("/*infloop*/M:while( \"\" ){var prototype = <><x><y/></x></>; }");
tryItOut("{var constructor;function(y) { yield y; gc(); yield y; } }");
tryItOut("with({}) return;");
tryItOut("/*infloop*/while(let (({ prop: constructor }) = this, prop = __noSuchMethod__.((yield 0))) this.zzz.zzz.__defineSetter__(\"prop\", ({}).__lookupGetter__)){export __count__;with({}) {  }  }");
tryItOut("/*infloop*/M:for(var function::__noSuchMethod__; (\f0x99 instanceof *::*); undefined.__lookupGetter__(\"__iterator__\")[((<><x><y/></x></>)[ /x/g ])]) {const __proto__; }");
tryItOut("if(this.__defineSetter__(\"__iterator__\", Math.pow) && ({a1:1})) { if (new Iterator((__noSuchMethod__-=null), <x><y/></x>)) {export __proto__;{} }} else [1,,]");
tryItOut("L:if([new __iterator__(@foo) for each (__iterator__ in {}) if (<x><y/></x>)]) {if(<x><y/></x>) let __count__; else  if ( '' ) {throw __count__; }const __noSuchMethod__ = #1#; }");
tryItOut("/*for..in*/M:for(__parent__ in <x><y/></x>) {let (__iterator__ = [[1]], function::__noSuchMethod__) { ; }-1; }");
tryItOut("/*infloop*/for(void __parent__; this; default: [__parent__, , , prototype, prop]if(window) export *; else  if (prop) break; return;break; case 9: /*infloop*/for(var prototype = ;  \"\" ; <x><y/></x>) {<x/> }.yoyo((__proto__ =  \"\" ))) export __proto__;");
tryItOut("with({constructor: (prop ? <><x><y/></x></> : <><x><y/></x></>)}){}");
tryItOut("/*for..in*/for(var __iterator__.prop in __iterator__+=window) const constructor;");
tryItOut("let (__proto__ = (Function())) { /*infloop*/do <y><z/></y> while(new (@foo)( \"\" , false)); }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("throw <y><z/></y>\n");
tryItOut("let (({ constructor: constructor, __parent__: __iterator__ }), __noSuchMethod__)/*\n*/ { /*for..in*/for(const [__parent__, __iterator__] = <x><y/></x> in undefined) var __parent__ =  '' ; }");
tryItOut("if(([((<x><y/>\n</x> * undefined))].sort(gc))) {[1,2,3,4].map } else  if (([[1]][<><x><y/></x></>].yoyo())) {} else { }");
tryItOut("continue L;");
tryItOut("if(undefined) {throw <y><z/></y>; }");
tryItOut("L: \nexport prototype\nexport *;\n");
tryItOut("gc()");
tryItOut("L: return;\nexport __parent__;\n");
tryItOut("/*infloop*/for(const [, ] = <y><z/></y> | <><x><y/></x></>; this.__defineGetter__(\"__parent__\", <y><z/></y>); this ^= try { return; } catch(__count__ if new  /x/g ) { const getter = this, __proto__; } finally { let __noSuchMethod__, undefined; } ) function ([y]) { };");
tryItOut("/*for..in*/for(const __proto__ in ((<><x><y/></x></>)((p={}, (p.z = <y><z/></y>)()))))return  '' ;");
tryItOut("if(constructor) { if (true) {function () { throw <x><y/></x>; } export *; } else export __proto__;}");
tryItOut("if((<><x><y/></x></>[false])) {{} } else  if ([eval(\"<><x><y/></x></>;\", window)]) export __proto__;");
tryItOut("try { with({}) { return __parent__ = @foo; }  } catch(prototype) { throw __noSuchMethod__; } ");
tryItOut("/*infloop*/M:for( /* Comment */window; new #1=[#1#]();  \"\" ) /*for..in*/for(let <y><z/></y>['constructor'] in this.zzz.zzz) return;");
tryItOut("gc()\nthrow prototype;\n");
tryItOut("do yield (__parent__ = undefined); while((\n) && 0);");
tryItOut("<><x><y/></x></>/*for..in*/for(var [get, __count__] = this in <><x><y/></x></>) {{} }");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = #3={a:#3#} in this.__lookupGetter__(\"__noSuchMethod__\").@*) {const @foo = 3;let prop; }");
tryItOut("M:if(true) window else  if (0/0) {{}{} }if(((({}).hasOwnProperty).apply).call((<x><y/></x> | constructor), (({} if (<x/>))))) { if ((undefined.__count__ = <><x><y/></x></>.@*)) {continue ;yield window; }} else continue ;");
tryItOut("{switch([1,,]) { case 6:  }{} }");
tryItOut("prop, prototype;/*infloop*/for(var ({ __noSuchMethod__: constructor, prototype: __noSuchMethod__ }) = (window.unwatch(\"__proto__\")); __iterator__.(<><x><y/></x></>); __parent__.( '' )) {/*infloop*/do continue L; while({}); }");
tryItOut("if(({}).__lookupSetter__(\"__parent__\")) { if (eval(\"null\", <x/>)) {const __count__; } else throw this;}");
tryItOut("constructor = constructor;");
tryItOut("with({}) { return <y><z/></y>; } ");
tryItOut("{L: 4.; }");
tryItOut("M:switch(Boolean()) { case 3: case typeof (this.zzz.zzz): L: 'haha'.splitbreak; if(__proto__ = __proto__) { if (__proto__.__noSuchMethod__ = window) {(<x><y/></x>); } else {return; }} }");
tryItOut("if(__count__.((!<x><y/></x>))) {gc() } else  if ((yield function  constructor ()undefined)) default: with(/*\n){@foo;(<y><z/></y>); }break; break; L:with( ''  | <><x><y/></x></>){export __iterator__;export constructor; }return <><x><y/></x></>;break; case 8: if(<><x><y/></x></>) {gc() } else {[1,2,3,4].slice__iterator__; }break; /*for..in*/L:for(const __noSuchMethod__ in <><x><y/></x></>) Function<x/>case 1:  else {yield; }");
tryItOut("L:if(this.zzz.zzz || *::*) {throw <x><y/></x>;export __noSuchMethod__; } else  if ([<x/> for each (prop in @foo) for (( '' )( /x/g ) in  /x/ )]) export prop;");
tryItOut("while((prop = ([<><x><y/></x></> if (<x><y/></x>)]) .@ (<x><y/></x>.__lookupGetter__(\"__count__\") < *.yoyo(<x/>))) && 0){L:if(arguments) {{} } else  if (<x><y/></x>) {{} } }");
tryItOut("{}");
tryItOut("M:if(new ((Function).call).call((~[1] >>>=<><x><y/></x></>))) throw [,,z1]; else  if (yield <><><!--yy--></></>) {yield window;export __iterator__; } else {function(y) { yield y; return {};; yield y; } }");
tryItOut("{/*infloop*/for(__noSuchMethod__; __noSuchMethod__.( /x/g .yoyo(__parent__)); (<zzz>true</zzz>.(*::*.__iterator__))) {<><x><y/></x></>; }/*infloop*/for(constructor = *::*; 0/0; [1]) {gc()export __parent__; } }");
tryItOut("with({__parent__: window})");
tryItOut("{(@foo);(__noSuchMethod__); }");
tryItOut("{throw <x><y/></x>;/*for..in*/for(var constructor in ({prototype: 1e81 })) if(window) { if (window) throw <x><y/></x>;} else case window: export *;break; export *;break;  }");
tryItOut("if(yield 1.3[this.__defineSetter__(\"delete\", function (__iterator__, __parent__)__iterator__).__lookupGetter__(\"__noSuchMethod__\")]) {} else  if ((this.__defineGetter__(\"prop\", function  prototype (prototype)~undefined * this))) {with(case 6: let prototype;){let prop = window;/*for..in*/for(let \t__parent__ in \n((function(q) { return q; })(false)))yield constructor; } }");
tryItOut("{export *;with(@foo); }");
tryItOut("var prototype;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("if(<x/>) return prototype; else {return; }false\n");
tryItOut("/*for..in*/for(let prop in ((<x><y/></x>)([[1]]))){thisconst constructor, __noSuchMethod__ = -3/0; }");
tryItOut("let (__proto__) { /*for..in*/for([__count__, __proto__] = function::__iterator__.prototype in true) yield <y><z/></y>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __noSuchMethod__ = this + ([__noSuchMethod__].some((*).call)) in this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) gc()");
tryItOut("let(__noSuchMethod__ = #1#) { \n");
tryItOut("return");
tryItOut("/*for..in*/for([__noSuchMethod__, __parent__] = window\n in  \"\" ) let __iterator__, prototype;");
tryItOut("/*for..in*/for(let __count__ = (new ( /x/g )(constructor, <><x><y/></x></>)) ^ (this.zzz.zzz)[((1e+81) if ([1,,]))] in (#1=[#1#](3).valueOf(\"number\"))) {return; }");
tryItOut("/*for..in*/for(var arguments in ((function (__parent__, prop)[this])(yield <x/>)))export __noSuchMethod__;");
tryItOut("/*for..in*/for\f(const (<x><y/></x> .@x:: <y><z/></y>.__defineGetter__(\"constructor\", (__noSuchMethod__).watch))(((arguments.valueOf(\"number\"))[__count__]).*) in this.__defineSetter__(\"constructor\", ({}).hasOwnProperty).__defineGetter__(\"constructor\", ({}).hasOwnProperty)) /*infloop*/do break M; while(this.throw(<x><y/></x>).__defineSetter__(\"function::constructor\", ).@*);");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) let(prop = this.hasOwnProperty(\"__parent__\"), __proto__) ((function(){yield __parent__ = [,,];})());");
tryItOut("{(<x/>);let __count__ = true; }");
tryItOut("with({}) { with({}) (<y><z/></y>)(#3={a:#3#}) } ");
tryItOut("/*for..in*/for(let __parent__ = #1=__proto__ ^= false in __noSuchMethod__ =  '' ) {gc()\nL:do  while((prop) && 0);constructor = <y><z/></y>; }");
tryItOut("L: yield *::*;");
tryItOut("throw StopIteration\n\n");
tryItOut("this.zzz.zzz;");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(const ({ prop: prototype, __noSuchMethod__: __count__ }) = *::*.__defineGetter__(\"__proto__\", Math.sin); (<x/>.propertyIsEnumerable(\"constructor\")); <><x><y/></x></>.watch(\"prop\", [1,2,3,4].map)) {{} }");
tryItOut("let(__count__ = @foo, __count__) { gc()\n");
tryItOut("/*for..in*/for(const __count__ in ((gc)(true))){if(0 >> {}) {yield; } else { /x/g ; }/*infloop*/while(__noSuchMethod__ = function ([y]) { }){{}L:if(<x><y/></x>) yield; } }");
tryItOut("M:with(#1#)return __iterator__;");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("let(__parent__ = *, __count__) { var __noSuchMethod__ = [z1];");
tryItOut("let(__parent__, prototype) ((function(){if(@foo) { if (<x/>) return #1=[#1#]; else __count__ = 0, prototype = null;}})());");
tryItOut("yield;");
tryItOut("/*infloop*/for([(<><x><y/></x></>.valueOf(\"number\"))].filter(({}).hasOwnProperty); __proto__.prop;  '' ) /*for..in*/for(var [prop, prop] =  /x/  in  { ({a1:1}) } ) yield @foo;");
tryItOut("if(<><bbb xmlns=\"(({__iterator__ setter: (<x><y/></x>, __noSuchMethod__).watch, __parent__: -3/0 }).throw(<x><y/></x>))\"><{__noSuchMethod__}> </{__noSuchMethod__}></bbb></>) {yield; } else  if ((<x><y/></x>.(window)) || ) {/*infloop*/for(({ __noSuchMethod__: __iterator__, constructor: constructor }) = [11,12,13,14].sort; __noSuchMethod__ = -0; (\n)) export *; }");
tryItOut("{return __proto__;L:do throw window; while((yield <y><z/></y>) && 0); }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [], __iterator__: ({ prototype: [__proto__, , __iterator__, prototype, __iterator__] }) }) = function::prototype; <y><z/></y>; (this.throw(<y><z/></y>))) {(<y><z/></y>(<><x><y/></x></>)) } const prototype;");
tryItOut("if(new ({}).__lookupGetter__()) { if (([15,16,17,18].sort((1 for (x in [])), let (prop, __count__) *::*)) % <><x><y/>\f</x></> > undefined) L:do .2; while(((({ prop: __count__, \f__proto__: constructor }) = (gc()))) && 0); else {/*for..in*/for(let [__iterator__, __proto__] = new Exception(function::__noSuchMethod__,  /x/ ) in *) export __proto__;M:with(undefined); }}");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(__noSuchMethod__) { if (<x/>) {return; }} else export prototype;");
tryItOut("if(this) ([]); else  if (* >>= (this.__defineGetter__(\"__iterator__\", function  __count__ (constructor) { (*::*).call } ))) {return (p={}, (p.z =  /x/ )()); }\ntry { let __noSuchMethod__; } catch(prop if (function(){gc()})()) { export *; } catch(__parent__) { yield <x/>; } finally { yield <x/>; } ");
tryItOut("/*infloop*/for((prototype = (function ([y]) { }\t .@ <y><z/></y>)); ((<><x><y/></x></>.*)[ /x/ .__defineSetter__(\"prop\", ({}).hasOwnProperty)]).prop; (yield @foo.__defineSetter__(\"prototype\", <><x><y/></x></>))) {__iterator__ = window, prototype =  \"\" ;export *; }");
tryItOut("\n");
tryItOut("{let __proto__ =  '' , __parent__ = <><x><y/></x></>; }\n");
tryItOut("L: switch(undefined) { default: break;  }\nreturn;");
tryItOut("if(([,,] >>= <x><y/></x>)()) break ;");
tryItOut("{; }");
tryItOut("\tif(<x><y/></x>) {\t; } else  if (this) {throw 1e-81; }");
tryItOut("/*infloop*/for(let ({ prototype: ({ prop: prop }) }) = __parent__ = [1,,]; \f__noSuchMethod__.constructor; ((new Function(\"yield;\"))(<><x><y/></x></>))) {let __parent__; }");
tryItOut("/*infloop*/for(prop; this.__defineGetter__(\"__noSuchMethod__\", @foo); __parent__ = __proto__.__iterator__ = this.__defineSetter__(\"prototype\", (true).__defineSetter__)) /*for..in*/for(var [__count__, __iterator__] = <><x><y/></x><\f/> in <><x><y/></x></>) yield  /x/g ;yield (*::*++);");
tryItOut("prototype = __count__;");
tryItOut("throw __parent__;");
tryItOut("break M\n");
tryItOut("(@foo); const prototype; const ;");
tryItOut("export __noSuchMethod__;\n{}\n");
tryItOut("while((<{__noSuchMethod__}>yyy</{\f__noSuchMethod__}>) && 0){gc()/*infloop*/M:for(false; #1=[#1#]; __iterator__) __count__; }");
tryItOut("with((<><x><y/></x></>.__lookupSetter__(\"prop\") ?  : __noSuchMethod__.(0x99)))/*infloop*/for(function ([y]) { }; this;  '' ) yield;");
tryItOut("continue M;");
tryItOut("/*for..in*/for(const [__proto__, __count__] = #2=[*::*] in <x><y/></x>) <x><y/></x>;");
tryItOut("yield;\n/*infloop*/for(const __proto__; (\t({ get prop __iterator__ () { gc() }  })); yield ({a2:z2})) {export __noSuchMethod__; }\n");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __proto__ = [1,2,3,4].map) /*infloop*/while(eval(\"const __parent__ = <x/>;\", <x><y/></x>).__lookupGetter__(\"constructor\")){throw null; }");
tryItOut("this.zzz.zzz;");
tryItOut(";\n;\n");
tryItOut("var __noSuchMethod__; const prop;");
tryItOut("return <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("yield this(-0);");
tryItOut("with( \"\" ){/*infloop*/while(__noSuchMethod__.__defineGetter__(\"__parent__\", (function  prototype (constructor, prop) { yield this } ).call)){/*infloop*/for(({ get null prototype (__parent__, __parent__) { return 0.1 } , prop: 0/0 }); window.throw(prototype); return) {const __iterator__ = <x><y/></x>; } } }");
tryItOut("/*for..in*/for(var __noSuchMethod__.prototype in this.eval((-1))) /*for..in*/for(constructor = (*.throw(<><x><y/></x></>) if (<><x><y/></x></>)) in <x/>) if(constructor) {return; } else  if (<><x><y/></x></>) <><x><y/></x></>;");
tryItOut("with({}) try { let __parent__ = function(id) { return id }; } finally { return [,,z1]\n; } ");
tryItOut("let (function::prototype, constructor) { const prototype; }");
tryItOut("M:switch(null) { case 3: break; {}break; M:if(null) yield __noSuchMethod__; else  if (*) ;break; return 1e81;break;  }");
tryItOut("L:do {M:if(null) ({});\t else gc() } while(([[1]].hasOwnProperty(\"prototype\").yoyo((<x/>)(null, <y><z/></y>))) && 0);");
tryItOut("while((((<x><y/></x>)[@foo]).constructor = __parent__) && 0){ { yield <><x><y/></x></> } ; }");
tryItOut("gc()");
tryItOut("/*infloop*/for( /* Comment */constructor;  /x/ .@foo; ()) {throw false;; }");
tryItOut("/*infloop*/for(((prototype) = (new window())); constructor = <x><y/></x>; ((gc)(<x/> == this ^ (\nnull)))) {export *; }");
tryItOut("if(true) {return;'haha'.split } else ((function ([y]) { })()).__defineSetter__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) {gc()__proto__ }\n");
tryItOut("yield [__noSuchMethod__.constructor setter= ({}).__lookupGetter__.propertyIsEnumerable(\"prop\").constructor for each (__count__ in (!<x/>)) for (__parent__ in ([11,12,13,14].sort != window)) for each (prototype in (new 1.3)) for ((<><x><y/></x></>)(0x99) in #1=[#1#])__iterator__];");
tryItOut("/*for..in*/L:for(const prop = window in (-0)( \"\" )) \treturn;");
tryItOut("throw function::__noSuchMethod__;");
tryItOut("return function(id) { return id };");
tryItOut("__parent__ = <x><y/></x>\nbreak M;");
tryItOut("if(<><x><y/></x></>.prototype = true) throw <x><y/></x>; else  if (#1=[#1#]) return 033; else {\tprototype, __proto__ = 0x99; } const __iterator__;\nexport *;\nfor(let y in [5,6,7,8]) with({}) export *;");
tryItOut("\texport *;\nvar __iterator__ = 1.2e3;\n");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in window) break ; while((.prototype) && 0);");
tryItOut("break L;");
tryItOut("this.zzz.zzz;");
tryItOut("do let prototype =  /x/g , __iterator__; while(((1 for (x in [])) | (*::*)[ /x/g ]) && 0);");
tryItOut("/*infloop*/for(const <x><y/></x> >> -0.prototype; (function ([y]) { })(); (function ([y]) { })().unwatch(\"__proto__\")) {{}let __noSuchMethod__, __proto__ = <x/>; }");
tryItOut("this.zzz.zzz\n");
tryItOut("prototype = __parent__;");
tryItOut("{return;while((\f[1]) && 0)export *;\nreturn\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop.__proto__ in [z1,,]) (__parent__);");
tryItOut("/*for..in*/for(let function::__count__(prop) in <><x><y/></x></>) return;");
tryItOut("yield (__proto__ = <><x><y/></x>//h\n</>);");
tryItOut("{break L;yield; }");
tryItOut("with(__count__ ? <y><z/></y> : *)return [z1,,];");
tryItOut("{throw  /x/g ;;export *; }");
tryItOut("export constructor;");
tryItOut("if(delete [[z1,,]] >  /x/g .hasOwnProperty(\"__count__\")) {[1,2,3,4].map } else  if ((new ((Math.sin).call)((prototype.@foo)))) continue L;");
tryItOut("yield this;");
tryItOut("with({prototype: new this().throw(<>__count__</> % [z1,,])})while((__iterator__: __count__[window]) && 0)var __count__;");
tryItOut("return (this.zzz.zzz);");
tryItOut("if(([15,16,17,18].map((true).watch, <><x><y/></x></>) <<= <><zzz> /x/ </zzz></>.throw(let (__noSuchMethod__ = 0/0) [1] === .2.yoyo(__parent__)))) { if (( /x/  <= *::*)) {'haha'.split }} else {return <x><y/></x>; }");
tryItOut("if( \"\" ) {throw prototype; } else  if /*\n*/(1.3) break L;");
tryItOut("let (__iterator__) { {} }");
tryItOut("/*for..in*/for(let constructor = ({prop\f: [z1] -= <y><z/></y>}) ? (null =  get __proto__ prop (prototype, constructor) {  } \t) : new String() in new Object(this)) \f{/*infloop*/do ; while(yield  '' );; }");
tryItOut("/*for..in*/for(let (<x><y/></x>)[4.] in *) return <x><y/></x>\n;");
tryItOut("/*for..in*/M:for(const constructor = (this.__defineGetter__(\"__parent__\", @foo)) in <><x><y/></x></>) var __parent__ = 033;");
tryItOut("\nconst __count__ = <y><z/></y>, __count__;\n");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/L:while((<x><y/></x>.hasOwnProperty(\"constructor\")))const prototype, __iterator__;gc()");
tryItOut("\tyield (prototype|= /x/ );");
tryItOut("/*for..in*/L:for(let prototype in <><x><y/></x></>) {{} }");
tryItOut("\n");
tryItOut("if(this.__lookupGetter__(\"__parent__\")) { if (<x><y/></x> -= <x><y/></x>) {(prop); } else {const prop, __proto__;gc() }}");
tryItOut("switch(this) { default: break;  }return  '' ; const prop;");
tryItOut("{/*infloop*/do gc() while((yield (function ([y]) { })())); }");
tryItOut("let(prop = function  __parent__ (prop, __iterator__) { yield  \"\"  } (*, undefined), constructor = [z1,,]) { const __count__ = @foo, __iterator__ = __noSuchMethod__;");
tryItOut("if(*::*) { if (undefined) {continue L; } else {while(((__parent__ = prototype)) && 0)export *; }}");
tryItOut("switch(1e81) { case (uneval(prototype.__count__ setter= (function (constructor, __iterator__)*).apply)): break M\ncase new (((1 for (x in []))).apply)(__count__) ? new (constructor.@*)('fafafa'.replace(/a/g, [1,2,3,4].map), 1.2e3) : *-- % ([#1# if (window)]): export __proto__case <><ccc:ddd></ccc:ddd></>.(\n-0): throw <y><z/></y>;break; prototype, __proto__ = (function ([y]) { })();break; case ( '' .hasOwnProperty(\"__noSuchMethod__\")): break; case 3: __proto__, __iterator__;break; break;  }");
tryItOut("if( /* Comment */this.__defineGetter__(\"function::__noSuchMethod__\", (1 for (x in [])))) { if ((@foo , 0.1).propertyIsEnumerable(\"prototype\")) export __iterator__; else {gc()if(<><x><y/></x></>) {break ;1.2e3;\f } else  if (<><x><y/></x></>) \f{} }}");
tryItOut("do export *; while(((__parent__.__proto__ setter= gc).watch(\"constructor\", Function) !== *::*.__defineSetter__(\"__count__\", (1.3).call)) && 0);");
tryItOut("/*for..in*/for(const prototype = (p={}, (p.z = <x/>)()) in __parent__) yield 0.1\n{}");
tryItOut("switch((function(id) { return id } .@*:: [1,,])) { default: ;break; do {(1e81);return; } while((<>x<y/></*infloop*/do ; while(this); /x></>) && 0);return ({a2:z2});case this.__defineSetter__(\"__count__\", function  prototype (__parent__, constructor) { yield window } ): export __iterator__;break; case [,,z1]\n .@*:: 1e81: let try {  } catch(__parent__ if (function(){;})()) { yield this; } , __proto__ = <x><y/></x>;break;  }");
tryItOut("if( '' ) return;\nexport constructor;\n");
tryItOut("return\nthrow *;");
tryItOut("let (__noSuchMethod__ = (([<x><y/></x>]) &= *::* >>>=false), constructor = [,]) { {{} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (__count__)) {export *;throw *; }\t");
tryItOut("/*infloop*/while((new (( \"\" ).__defineSetter__)(*::*) .. (<x/> for each (prop in <x><y/></x>)).yoyo(+ \"\" ))){M:with([15,16,17,18].sort(({}).__lookupGetter__, <x><y/></x>))<x/>; }");
tryItOut("let (__iterator__ = (prop) = <x>\t<y/></x>.( /x/ )(#0=({__iterator__:  /x/g }), <x/>), constructor = ([11,12,13,14].sort)) { if(<x><y/></x>) {;throw window; } else  if (<><x><y/></x></>) (null) else var __iterator__, prop; }");
tryItOut("gc()\nbreak ;\n");
tryItOut("with(({ set: __noSuchMethod__ }) = yield {})return;");
tryItOut("L: return;/*infloop*/L:while( /x/g )continue ;");
tryItOut("/*for..in*/L:for(var prop = #1# for each (__iterator__ in ()) for (__proto__ in <y><z/></y> ^ true) in (this < window) > //h\nset = __count__( :: <><x><y/></x></> != this)) {this\n(__parent__); }");
tryItOut("L: yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.prototype in #1=[<x><y/></x>].__lookupGetter__(\"__parent__\")) {constructor;__iterator__ = prototype; }");
tryItOut("return;");
tryItOut("/*infloop*/L:while(<><x><y/></x></> += window)");
tryItOut("let(constructor = null, prop) { let __parent__ = *::*, __count__ = <><x><y/></x></>;");
tryItOut("with({prototype: [prop, constructor, , , prototype] = (-0.isPrototypeOf(true))})/*infloop*/for(@foo; <x><y/></x>; <x><y/></x>) ;");
tryItOut("while(((__iterator__-=prototype)) && 0)set;");
tryItOut("({}).__lookupGetter__\nthrow 1e81;\nL:if(1e81) { if (__iterator__) gc() else {return; }}\n");
tryItOut("M:switch(this.zzz.zzz) { case ((*::*.__proto__ = *)[(((p={}, (p.z = [[1]])())))[__noSuchMethod__ = __proto__]]): return <x/>;\nthrow <x/>;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var each in __proto__) return window;");
