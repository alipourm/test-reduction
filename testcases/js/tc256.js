tryItOut("switch((__proto__ = *::*).unwatch(\"prop\")) { case 0: with((<x><y/></x> if ([z1]).isPrototypeOf(null()))){throw <><x><y///h\n></x></>;continue L; }break; break;  }");
tryItOut("return;");
tryItOut("yield\n__count__ = <><x><y/></x></>");
tryItOut("M:if(<><x><y/></x></>) {prototype = true, __noSuchMethod__;(1 for (x in [])) } else export *;");
tryItOut("export __iterator__; const __count__;");
tryItOut("if(1.2e3) {if(((window.@foo) += ([z1,,] for (__proto__ in @foo))).x::__proto__) { if ((([z1] >>= undefined).yoyo(3.141592653589793)\t)[(p={}, (p.z = (<x><y/></x>.(<y><z/></y>)))())]) /*for..in*/for(let [0x99, __parent__] = <y><z/></y> in false) {(<x><y/></x>);export __iterator__; }} else {export *;var __proto__ = *; } }");
tryItOut("L: {return;do + while((<x><y/></x>) && 0); }");
tryItOut("with({__count__:  /x/g  in *::*.constructor}){__iterator__var prop = <y><z/></y>; }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = false; 1.2e3; prop) {;export *; }");
tryItOut("yield @foo.__parent__ = window.throw(([z1,,])[(function ([y]) { })()]);");
tryItOut("while((__count__.__count__ =  \"\" ) && 0)let (true) { yield this; }");
tryItOut("/*for..in*/L:for(Function = ({ __parent__: constructor, prop: constructor }) = this.__lookupSetter__(\"__parent__\") in __proto__) {/*for..in*/for(var < in <><x><y/></x></>) {Function } }");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*infloop*/while(3.141592653589793){yield; }");
tryItOut("L:if(<>({ __iterator__: ({ __noSuchMethod__\f: function::prototype }) }), __parent__ = __proto__ = __noSuchMethod__</>) (false);yield;");
tryItOut("yield; const prototype; const __proto__;");
tryItOut("M:if((<x/> += @foo).@foo) { if ([15,16,17,18].map(/a/gi, \t[window].map([1,2,3,4].slice))) {export *; } else const constructor = <><x><y/></x></>, __count__ = 3; var __parent__, __proto__ = <y><z/></y>; }");
tryItOut("if(({ set __noSuchMethod__ __proto__ (prototype, constructor){}, prop: @foo })) return;");
tryItOut("if(.__defineGetter__(\"__iterator__\", new Function)) {;(prop); } else  if ( \"\" [constructor]\n) {; } else {let __noSuchMethod__;(<x><y/></x>); }");
tryItOut("do yield constructor; while((eval(\"<><x><y/></x></> in this\", (Math.sin)())) && 0);");
tryItOut("/*infloop*/for(var __parent__; <x/>.constructor = new 0/0(); ({ prop: __noSuchMethod__, __proto__: __noSuchMethod__ }) = constructor) ;");
tryItOut("if(<{__noSuchMethod__}>yyy</{__noSuchMethod__}\r>.(__count__ = <x><y/></x>)) break ; else {prop, __noSuchMethod__ = function(id) { return id }; }");
tryItOut("yield;");
tryItOut("if(this--) { if (new window()) ({}).__lookupGetter__} else {gc()yield this; }");
tryItOut("/*for..in*/M:for(let (prop.__parent__) in  '' ) {this.zzz.zzz;/*for..in*/M:for(const prototype = <><x><y/></x></> in undefined) {{} } }");
tryItOut("L: throw *::*;let constructor = {}, __count__ = prop: [,,];");
tryItOut("{return;({}).hasOwnProperty }");
tryItOut("/*infloop*/while(this)/*for..in*/for([__parent__, prop] = new function  __noSuchMethod__ (__proto__, __parent__) { yield  /x/  } (*) in ({a1:1})) yield;");
tryItOut("try { return new ((yield 4.))(<x><y/></x> in window, <x/>); } catch(constructor) { let(__parent__ = prop = [[1]]) ((function(){for(let y in []);})()); } ");
tryItOut("/*for..in*/M:for([default: break; , prop] = __parent__ = [1,,] in ((yield 4.)).__lookupGetter__(\"__proto__.__proto__\")) {var __parent__ = 0.1;L:with({__count__: \f<y><z/></y>}){throw <><x><y/></x></>;; } }");
tryItOut("throw __iterator__;");
tryItOut("do gc() while(((<x><y/></x>.(<><x><y/></x></>))) && 0);");
tryItOut("with(5.0000000000000000000000 /= this.watch(\"__proto__\", [1,2,3,4].slice)){break ;{;\nexport *;\n{{}; } } }");
tryItOut("/*infloop*/for(var ({ __parent__: __noSuchMethod__ }) = (#0=({__parent__: (x::__iterator__ = prop)}) if (<><x><y/></x></>)); <y><z/></y> .@*:: <><x><y/></x></> %= <y><z/></y>; new ((((prototype.__parent__ = <x><y/></x>))[(prototype .. 0.1)]) /= __noSuchMethod__.prototype setter= @foo)(033 in <x><y/></x>, [<><x><y/></x></>\t].sort(eval))) while((@foo.watch(\"constructor\", [1,2,3,4].map)) && 0){;export *; }");
tryItOut("if(gc()) { if (__noSuchMethod__.__iterator__) {[1] } else {(<x><y/></x>);yield; }}");
tryItOut("yield undefined;");
tryItOut("L:do const constructor = @foo\nexport *; while((((p={}, (p.z = window.__lookupGetter__(\"prop\"))()))) && 0);");
tryItOut("if([15,16,17,18].filter((yield <y><z/></y>), (prototype|=0/0.__lookupSetter__(\"__parent__\")))) var function::prototype, __iterator__;");
tryItOut("{{; } }");
tryItOut("/*for..in*/for(const __count__ = arguments in  '' ) function (__parent__)prop");
tryItOut("/*infloop*/L:for(function  __proto__ (({ __count__: prototype, prop: prop })) { export *; } ; yield ([yield 0/0]); (__proto__.((new Function)(<x/>, <x/>)))) yield;");
tryItOut("/*infloop*/for(var x::prototype; __parent__+= \"\" ; (__count__ = <y><z/></y>)) ;");
tryItOut("/*for..in*/for(let __parent__ = <y><z/></y> in .2) {(*);var __parent__ = __noSuchMethod__; }");
tryItOut("(<x><y/></x>)(window) = \t__parent__;");
tryItOut("yield");
tryItOut("try { let([] = __iterator__.unwatch(\"__count__\")) { with({}) prototype((({prototype:  ''  })/*\n*/)) = __proto__; } finally { true['prototype'] = __iterator__; } ");
tryItOut("/*infloop*/for(const __noSuchMethod__; null; undefined) return;");
tryItOut("");
tryItOut("if([1,,] *= null) ");
tryItOut("return\nnew Function");
tryItOut("M:if(__iterator__.isPrototypeOf(<><x><y/></x></>)\n) {export *;(@foo); } else export __iterator__;");
tryItOut("try { let __noSuchMethod__ = *::*, __iterator__ = ; } catch(__parent__ if (function(){( \"\" );})()) { <y><z/></y>; } catch(__proto__ if (function(){yield;})()) { const  \"\" , __parent__ = @foo; } catch(__count__ if <x/>) { yield constructor; } catch(prototype) { yield ({}); } finally { __iterator__, __proto__; } ");
tryItOut("L: export __noSuchMethod__;");
tryItOut("try {  } catch(prototype\f) { undefined; } ");
tryItOut("throw StopIteration;");
tryItOut("break ;");
tryItOut("__iterator__ = __proto__;");
tryItOut("return;");
tryItOut("with({prototype: ((<x/>)[<><x><y/></x></>])})<x/>;");
tryItOut("while(( '' ) && 0){return <x/>; }");
tryItOut(";");
tryItOut("M:if(window) {const prototype = <x><y/></x>; } else  if (<><x><y/></x></>) {export *;return __proto__, __parent__; }");
tryItOut("with({prop: <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>}){__iterator__;yield \f__iterator__; }");
tryItOut("/*infloop*/M:for(true; <><x><y/></x></>; <y><z/></y>) {gc()let __count__, constructor = #3={a:#3#}; }");
tryItOut("throw __count__;");
tryItOut("throw __count__;");
tryItOut("{/*infloop*/for(0/0; <x><y/></x>; <><x><y/></x></>) {(*);*::* }\n }");
tryItOut("/*infloop*/do {let constructor, __iterator__;\nbreak M;\nreturn; } while((-1));");
tryItOut("with({}) /*for..in*/L:for(var <x><y/></x> in 3/0.watch(\"__count__\", ({}))) //h\n");
tryItOut("if((false.yoyo(__iterator__))) {<x><y/></x>; }");
tryItOut("if(false) { if (<x><y/></x>) {yield;yield prop; } else {export \f*;const prop, __iterator__ = (function ([y]) { })(); }}");
tryItOut("/*infloop*/for(var [, prototype, __count__, __parent__, constructor] = window > *; (__proto__ = @foo); <y><z/></y>) {throw arguments;const __count__; }");
tryItOut("if(__proto__.constructor) { if (null = [] ? <><bbb xmlns=\" '' \">yyy</bbb></> : (__parent__ = prototype) instanceof (uneval(__iterator__)) , 'fafafa'.replace(/a/g, gc)) return @foo; const __count__; }} else with(@foo)");
tryItOut("/*infloop*/for(@foo.constructor; (yield  /x/ ); ([,,z1]())) {1.3{} }");
tryItOut("if(#1=({__parent__: prototype})) const __noSuchMethod__ = __noSuchMethod__, prop = *; else {export *;{} }");
tryItOut("L: export __iterator__;");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/while((__noSuchMethod__))switch(({ prop: prop }) = ({ __proto__: prototype, __proto__: __proto__ })) { default:  const prototype;case window: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [, , , __noSuchMethod__] = prototype) {{export __proto__; }return false; }");
tryItOut("if(*) return 0x99; else ;");
tryItOut("/*infloop*/for(__count__ = __parent__. ; (this * #3={a:#3#}); this++) yield;");
tryItOut("L:if(constructor)  else  if (([__count__ for (__iterator__ in @foo) if (0/0)])) return <><x><y/></x></>\nif(\n(#0=({constructor: <x><y/></x>}))) { if ((constructor = window).__defineGetter__(\"__parent__\", new Function)) /*infloop*/while(3/0){return; }} else export *;");
tryItOut("export *;");
tryItOut("if(function  constructor (__proto__, __parent__)constructor(__proto__).prop) {<><x><y/></x></> } else  if ([,,z1].prototype) if(arguments) { if (function ([y]) { }) {throw <x><y/></x>;return arguments; } else \t{export *;export *; }} else {{}gc() }");
tryItOut("with({__iterator__: __count__}){return *::*; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in __iterator__) {;export *; }");
tryItOut("let(prototype) { return;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*for..in*/for([[, ], ] in 1e4) {/*for..in*/for(var __iterator__ in  \"\" ) (false).watch }");
tryItOut("L:do {__iterator__ = __parent__;/*for..in*/for(let __parent__ in <x><y/></x>) export __parent__\n } while((((({prop: <y><z/></y>.__defineSetter__(\"__proto__\", ({}).hasOwnProperty) }/*\n*/)) /  '' .watch(\"constructor\", [(function  constructor (__count__) { yield try { return this; } finally {  }  } )(({}), *) if ( /x/g )]))) && 0);");
tryItOut("if(__parent__.constructor = [15,16,17,18].map((1 for (x in [])), <x><y/></x>)) (<><x><y/></x></>).apply else {(constructor = prototype); }");
tryItOut("yield; const prototype;");
tryItOut("if(void Object(null /= <y><z/></y>, true) ? __proto__ = (0 ? window : <x><y/></x>) : (__iterator__ = 4.)) { if (<>([1,,], .2)</>.(prototype << Iterator( \"\" , <x/>)).hasOwnProperty(\"prop\")) {(<x><y/></x>)let prop, constructor = this; }} else let (({ __iterator__: (__count__) })) { var prototype; }");
tryItOut("do {__parent__ } while((__proto__.(window)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("{continue L; }");
tryItOut("/*for..in*/for(const constructor = new Exception(__parent__.(try { \fyield; } catch(prototype if (function(){return;})()) { __iterator__; } catch(__noSuchMethod__) { function(y) { yield y; ( /x/g );; yield y; } } finally { (({a1:1})); } ) < (undefined >>>=@foo)(), (1e+81.eval(false))) in (-3/0.throw(.2))) {new (<><x><y/></x></>)( '' ) }");
tryItOut("<x><y/></x>;/*infloop*/for(({ __proto__: [constructor, function::prototype, __count__, ] }) = let (__proto__) window; <x><y/></x>.(arguments); (function::prop.__noSuchMethod__ getter= (__count__).__defineSetter__)) {export __count__; } const constructor;");
tryItOut("yield 1.3\nexport __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("throw prototype");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((yield <x><y/></x>))) {if(({ prop: ({ constructor: __count__, prop: function::__iterator__ }), __noSuchMethod__: [] })) {; } else  if \r(typeof /a/gi) {yield <x><y/></x>;return; }<x><y/></x>; }");
tryItOut("with({__parent__: (<x><y/></x> / <><x><y/></x></>)})@foo;return (function ([y]) { })();");
tryItOut("L:while((#1=[true.valueOf(\"number\")]) && 0){L: yield __proto__;switch([(({ prototype: __noSuchMethod__ }) = [var prototype = <x><y/></x>, __iterator__;])]) { case (__count__.('fafafa'.replace(/a/g, ({}).hasOwnProperty))).isPrototypeOf(__proto__ = 033): default: case 0: break;  } }");
tryItOut("prop;");
tryItOut("{function(y) { yield y; ;; yield y; } }\n/*infloop*/for(var __noSuchMethod__; <><x><y/></x></>; function ([y]) { }) (@foo).watch\n");
tryItOut("/*infloop*/M:do {yield <><x><y/></x></>;throw undefined .@*:: <y><z/></y>; } while(prototype = *::*);");
tryItOut("L:if((this.__defineSetter__(\"prop\", (eval).call)))  { {} }  else /*infloop*/M:do {(<><x><y/></x></>); } while(<><x><y/></x></>);\nwith([,,z1] !== (new ({})())){L:if(<><x><y/></x></>) yield; else {; }try { {} } catch(__noSuchMethod__) { (<><x><y/></x></>); } finally { continue M; }  }\n");
tryItOut("if( { let (__noSuchMethod__, [__noSuchMethod__, , __noSuchMethod__]) { throw (undefined);; } } ) {let __count__gc() } else {gc()<x><y/>/*\n*/</x> }");
tryItOut("/*for..in*/for(var [__count__, __proto__] = constructor = <y><z/></y> in <y><z/></y>) prop, __noSuchMethod__ = delete <x/>");
tryItOut("with({constructor: (-(__parent__)).__proto__})yield [,];");
tryItOut("/*infloop*/for(true; new true :: prop\f(__noSuchMethod__, prop); function::prop+=<x><y/></x>[1.2e3.unwatch(\"__count__\")] !== eval(\"([11,12,13,14].map)\", this)) {if(new Error()) { if ((this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty))) {return; }} else /*infloop*/M:while(<x><y/></x>){throw [[]]; }L: {; } }");
tryItOut("/*for..in*/for(var __iterator__ = <x/> in (Math.pow).call(__proto__, 'fafafa'.replace(/a/g, __parent__))) if(undefined()) {} else var constructor, constructor;");
tryItOut("/*for..in*/L:for(let (__parent__) in ((new (())(__noSuchMethod__, window))(3.141592653589793)))export __count__;");
tryItOut("/*infloop*/while(<><x><y/></x></>.__lookupSetter__(\"__count__\")){L:if((default: throw * *= <x><y/></x>;break; case 7: return 1e-81;break; )) const constructor; else {__noSuchMethod__ = window; } }");
tryItOut("/*for..in*/M:for(let [constructor, __noSuchMethod__] = -1 in #3={a:#3#}) yield [1];");
tryItOut("continue ");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(let [__iterator__, prop] = ('fafafa'.replace(/a/g, function (each) )) in __iterator__: <x><y/></x>) export __parent__;");
tryItOut("M:switch(this.zzz.zzz) { default: if(1e+81) falsebreak;  }");
tryItOut("if(((({}).__lookupGetter__)())) break ; else {export __count__;function (x::prop) { yield  ''  }  }");
tryItOut("/*for..in*/for(__proto__ = ( /x/  ^ @foo) in <x/>) return;");
tryItOut("if((prop)) gc() else  if ((yield <><x><y/></x></>) |= -3/0 - <y><z/></y>) {if(Function( \"\" , false)) { if ( /x/  .@ null) yield -0;} else {return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in false) {\f<x><y/></x>; }");
tryItOut("/*for..in*/for(__proto__ = null === <><x><y/></x></> in <x><y/></x>) {L:with(window){return; } }");
tryItOut("M:if(new /a/gi()) {export *; } else  if (prototype = ('fafafa'.replace(/a/g, Math.sin))) var __proto__ = __proto__;; else yield this.isPrototypeOf(<x/>);");
tryItOut("/*for..in*/for(var constructor in new Function) {;let __parent__ = window; }");
tryItOut("/*for..in*/M:for(let [__parent__, __parent__] = (p={}, (p.z = ((1 for (x in []))\f).call().throw(<x><y/></x>.hasOwnProperty(\"__proto__\")))()) in ([11,12,13,14].map)) yield this\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in null) {yield <><x><y/></x></>; }");
tryItOut("if(window()) {gc()3/0; } else  if (\nnew ((<x><y/></x>).__defineSetter__)().__defineSetter__(\"constructor\", function(y) { yield y; ; yield y; })) {function () { yield null }  } else throw __count__;");
tryItOut("/*for..in*/for(constructor in undefined) const prototype, __iterator__ =  \"\" ;");
tryItOut("while((<x><y/></x>) && 0)yield;/*for..in*/for(let __parent__.__noSuchMethod__ in function(id) { return id }) /*for..in*/yield <y><z/></y>;");
tryItOut("this.zzz.zzz;\n{continue  }\n");
tryItOut("let ([({ prop: __noSuchMethod__, __proto__: [] }), constructor, ]) { {return 0; } }");
tryItOut("L: throw <y><z/></y>;\ngc()");
tryItOut(";\n__noSuchMethod__ = undefined;\n");
tryItOut("/*infloop*/for(const <!--yy-->; ; (__count__ = <x><y/></x>.(false)).__defineGetter__(\"__count__\", (yield __noSuchMethod__\n).watch)) {{}/*for..in*/M:for(var __iterator__ in this) ((function ([y]) { })()); }");
tryItOut("for(let y in []);");
tryItOut("{return; }");
tryItOut("{return (__count__ .@ -3/0); }");
tryItOut("return ({ __parent__: __noSuchMethod__ }) = (function ([y]) { })();");
tryItOut("let __iterator__ = [1,,]; const __noSuchMethod__;");
tryItOut("if( '' .__lookupSetter__(\"prototype\")) throw __proto__; else  if (( /x/g .eval(<x/>))) null;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = __count__.prototype = *::*.__noSuchMethod__ in <y><z/></y> <= <x><y/></x> && (function ([y]) { })() &= *) /*infloop*/for(const ({ __iterator__: [] }) = ([[] = ([11,12,13,14].some) if (( /* Comment */this))]); null *  '' ; #3={a:#3#}) {{<><x><y/></x></>; }{}\n\n }");
tryItOut("/*infloop*/M:for(var [] = __parent__ = ({ prop: ({ __proto__: prop }), __noSuchMethod__: ({ __count__: __proto__, __proto__: prototype }) }); *; __count__ = (__count__ =  /x/ ) ^= (({ get __count__ __noSuchMethod__ ( \"\" , __count__) { return <y><z/></y>; }  }))) {(window); }");
tryItOut("if((({}).__lookupSetter__(\"__proto__\")) > constructor = prototype) {(constructor);; } else { }\n");
tryItOut("/*for..in*/for(let __count__ = [((eval).call)() for each (prototype in ((Function)())) for (prop in (-1)) for each (__iterator__ in []) if (<><x><y/></x></>)] in [,,].hasOwnProperty(\"__iterator__\")) (\f '' );");
tryItOut("with({__count__: this}){}");
tryItOut("for(let y in [5,6,7,8]) yield new (<><x><y/></x></>)(<y><z/></y>, this);");
tryItOut("/*infloop*/while(<employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--> & ({__proto__: (__iterator__ = __noSuchMethod__) })){throw prototype = window;export __parent__; }");
tryItOut("M:while((constructor) && 0)if(0) gc() else  if (prototype) {;throw <x><y/></x>; }");
tryItOut("with({}) { with({}) yield; } ");
tryItOut("/*infloop*/do {yield; } while((false.propertyIsEnumerable(\"__count__\") for (prototype in <x><y/></x>)) >>> ((new Function(\"yield;\"))).call((<><x><y/></x></> ? [[1]] : function ([y]) { }), ));");
tryItOut("{let (__noSuchMethod__ = window, constructor = ) { return; }{}; }");
tryItOut("switch( '' .__proto__) { case 3: break; default: yield __proto__; }");
tryItOut("/*infloop*/do {(<x><y/></x>); } while(({constructor getter: [1,2,3,4].slice }) >>= eval);");
tryItOut("if(+null - window) { if (__parent__ = undefined @ this.__defineSetter__(\"prop\", function  __proto__ () { yield  ''  } )) {break ; }} else {export __proto__; }");
tryItOut("if(.2) let constructor, __iterator__ = *; else  if (<x/>) {\t; } else {{} }");
tryItOut("if(function ([y]) { }) { if ( \"\" ) prop, constructor = *} else let (prop, constructor = ((<x><y/></x>)[null])) { throw <x><y/></x>; }");
tryItOut("if(*::*) if((yield this)) if(<x><y/></x>)  else {return try { throw 5.0000000000000000000000; } finally { null; } ; } else  if (__proto__ = <x/>.unwatch(\"__noSuchMethod__\")) continue ;");
tryItOut("M:if(constructor) { if (new function () { /*for..in*/for(var prop in ((Math.sin)(<x><y/></x>)))yield <y><z/></y>; } (prototype)) return; else {default: export __proto__<x><y/></x> }}");
tryItOut("L:with((eval(\"constructor\", *::*)))M:do gc() while((yield  /x/g ) && 0);");
tryItOut("let(__noSuchMethod__ = this.zzz.zzz) { try { const __proto__; } catch(__parent__ if prop) { {} } catch(__proto__ if []) { {} } catch(prototype if (function(){var __iterator__;})()) { const __iterator__ = 033, constructor; } finally { [1,2,3,4].slice } ");
tryItOut("switch(4.[<x><y/></x>]) { default: break;  }");
tryItOut("if( /x/g ) let (prop, constructor) { /*infloop*/while(new <x/>)return; }");
tryItOut("while((__count__.__noSuchMethod__) && 0){if(this) {} else {let __proto__, __parent__ = [1]; } }");
tryItOut("throw StopIteration;");
tryItOut("M:if((__proto__.(prop))) {export *; }");
tryItOut("if(this.zzz.zzz) yield  '' ; else  if ((uneval(<x/>))) ");
tryItOut("break L;");
tryItOut("/*for..in*/M:for(const __proto__ in ((eval)(yield *::*))){return; }");
tryItOut("if(__proto__ = ) {if(<x><y/></x>) { if (<><x><y/></x></>) {__iterator__, __parent__; }} else let __proto__, __noSuchMethod__;if([,,]) ; } else  if (((Math.pow)(prototype |= new (function(y) { yield y; break ;; yield y; })(this, null) &= (case 8: return;break; default: return;)))) {export prototype;(RangeError()); }");
tryItOut("{return; }");
tryItOut("switch(<><x><y/></x></>) { case <x><y/></x>: {}break;  }");
tryItOut("if(<><x><y/></x></>) { if ( /x/g ) {gc()__iterator__; }} else {var __iterator__; }");
tryItOut("do {let __iterator__, constructor;prop, <><x><y/></x></>; = undefined; } while(((__noSuchMethod__.prop)) && 0);");
tryItOut("do {; } while((true) && 0);");
tryItOut("let(__iterator__, __iterator__) { ((new Function).call(constructor, <x/>).__lookupSetter__(\"prototype\")).__lookupSetter__(\"constructor\").prop = {if(constructor|=<x><y/></x>) {} else  if (this.__defineSetter__(\"prototype\", function  __parent__ (__noSuchMethod__)<x><y/></x>)) yield * >= <x><y/></x>; };");
tryItOut("throw prop;");
tryItOut("/*infloop*/do prop while([constructor, , , __count__] = (__proto__.constructor = #3={a:#3#}));");
tryItOut("let(__parent__ = <><x><y/></x></>.hasOwnProperty(\"constructor\").isPrototypeOf(<ccc:ddd>yyy</ccc:ddd> -= {}).__defineSetter__(\"function::constructor\", (1 for (x in [])))) { let(({ __parent__: __count__, __proto__: ({ prototype: prop }) }) = <><!--yy--></>, prototype = ({__iterator__ setter:  /x/ , __noSuchMethod__: <><x><y/></x></> })) { for(let y in []);");
tryItOut("if( '' ) { if (#3={a:#3#}) break ;} else {{} };");
tryItOut("M:if(yield  /x/g .isPrototypeOf(new Date(undefined, window))) \t{__count__ = [,], __proto__ = 0.1;prototype; } else  if ([new  /x/ (({ prototype: __noSuchMethod__ }) = <y><z/></y>.watch(\"__noSuchMethod__\", [1,2,3,4].map), let (constructor) <><x><y/></x></>)]) throw __count__; else break L;");
tryItOut("/*for..in*/M:for(([ /* Comment */window].sort(true)) in ((function ()(3.141592653589793(false, <x/>)).*)(<y><z/></y>.__lookupSetter__(\"__iterator__\"))))");
tryItOut("/*infloop*/do ; while(4..yoyo(<x><y/></x>))");
tryItOut("with(this.__defineSetter__(\"prop\", [function(q) { return q; }])){/*for..in*/for(const __noSuchMethod__.__iterator__ in (((1 for (x in [])))(this.__defineSetter__(\"prototype\", [1,2,3,4].slice)))){prop: windowexport *; } }");
tryItOut("M:while((*) && 0) { yield this for each (let in  /x/g ) } ");
tryItOut("/*infloop*/for(yield <x/> << <x/>.__defineSetter__(\"__parent__\", Math.sin).__proto__; [[1]]; prop.({}.@*)) {yield ; }");
tryItOut("with({__count__: this})prop, prop;");
tryItOut("\tswitch(<x/>) { default: break;  }");
tryItOut("M:do {{}/*infloop*/for(prototype.(<y><z/></y>.__noSuchMethod__); this; (yield true)) yield; } while(((uneval(__iterator__ = -0))) && 0);");
tryItOut("let(constructor =  '' ) { let __iterator__;");
tryItOut("yield <><x><y/></x></> for (prototype in <x/>);");
tryItOut("/*infloop*/L:for(constructor = <><x><y/></x></>; prop((function ([y]) { })()); (__count__)([[1]])) ");
tryItOut("if(( \"\"  ? __parent__ : 1.2e3)) export prop; else  if ((constructor = <><x><y/></x></>)) { }");
tryItOut("{var constructor = <y><z/></y>;/*for..in*/M:for(const [__iterator__, prototype] = <x><y/></x> in <x/>) {yield  \"\" ; } }");
tryItOut("const __parent__ = 3/0;\nthrow .2;\n");
tryItOut("export constructor;\nvar __count__, __count__ = <x><y/></x>;\n");
tryItOut("(__noSuchMethod__.(0/0).valueOf(\"number\")).watch\n");
tryItOut("if(((yield <x/> >= __iterator__[<x><y/></x> if (window)]))) {continue L; } else  if (let (__proto__ = <x><y/></x>) each = false) {L: let __iterator__ = #3={a:#3#};if(<x><y/></x>) {const <x><y/></x> = 033, __proto__ = <x><y/></x>; } else  if (<x><y/></x>) return  '' ; } else {L: throw  /x/g ; }");
