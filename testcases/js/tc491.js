tryItOut("([(new (Math.pow)(prototype)) if ((0x99.@foo.@foo)\n)]).__defineSetter__");
tryItOut("/*for..in*/for(var prop(new (__noSuchMethod__)(function ([y]) { }, *) * (( /x/ )(__proto__, <><x><y/></x></>))) in [11,12,13,14].filter) {continue L; }");
tryItOut("switch((([prop]).isPrototypeOf([false for (prototype in __iterator__)]) .. false)) { default: if(break M) throw __count__ getter: function  __iterator__ ()null; else break ; }");
tryItOut("while(( '' ) && 0){__noSuchMethod__ }");
tryItOut("if((constructor.(<y><z/></y>))) /*for..in*/for(__noSuchMethod__ = @foo in constructor) {;\n } else  if (<x><y/></x> === __parent__) /*infloop*/for(null; window; <x><y/></x>) *; else {let __iterator__ = 1e+81;const __iterator__ = 1.2e3, __proto__ = null; }");
tryItOut("{while(( /x/ ) && 0)return 1e81;(function ([y]) { })(); }\n");
tryItOut("/*infloop*/for(__noSuchMethod__ = this.__defineSetter__(\"__count__\", [1,2,3,4].map);  /* Comment */<x/>; __iterator__ = #3={a:#3#}) ");
tryItOut("/*infloop*/for(__noSuchMethod__; (throw StopIteration;)[<y><z/></y> |= __iterator__]; ((function  __count__ (__proto__)<><x><y/></x></>) & ([1,,].hasOwnProperty(\"prototype\")))) export __iterator__;");
tryItOut("\n");
tryItOut("throw __parent__;");
tryItOut("if( \"\" \n) {yield 1.2e3(<x/>); } else {/*for..in*/for(prop = (<><x><y/></x></>)[<x/>] in prop & this) {yield; } }");
tryItOut("return;L:switch(null.__lookupSetter__(\"__count__\")) { default: {/*infloop*/do {constructorreturn __noSuchMethod__; } while(#1=[#1#]);return <x><y/></x>; }break;  }");
tryItOut("M:");
tryItOut("/*for..in*/for(let prototype = String(__count__, <x/>) in *::*) {let __parent__ = <y><z/></y>, __proto__;__iterator__; }");
tryItOut("L:with( \"\" ){; }");
tryItOut("{this.zzz.zzz; }");
tryItOut("while(( /x/g ) && 0)(window);");
tryItOut("/*infloop*/for(var prototype =  '' ; *; *) {export __count__; }");
tryItOut("return *::*;");
tryItOut("/*for..in*/for(let constructor in (((1 for (x in [])))((p={}, (p.z = constructor = <x/>)())))){var __iterator__ = 1e81; }");
tryItOut("continue L;\nreturn;\n");
tryItOut("do {if(__proto__ = 4.) {yield <><x><y/></x></>;{} } else  if ([11,12,13,14].filter) {yield; } else {prototype = <x><y/></x>, __count__ = <y><z/></y>; }yield window\f; } while((<x/>) && 0);");
tryItOut("if(<x/> |= (prototype)) {export *; }");
tryItOut("M:if((([11,12,13,14].sort))((<x><y/></x>.(<><x><y/></x></>)))) export *; else  if (this.__defineSetter__(\"yield\", (<><x><y/></x></>).watch) ^ (<y><z/></y>.__lookupSetter__(\"__noSuchMethod__\"))) {{} } else var setter = <x><y/></x>, __iterator__;");
tryItOut("/*infloop*/do {throw <x><y/></x>;\n { return <x><y/></x>; } \nexport *; } while(([(-0)].filter(eval)) %= (*.eval(window)));");
tryItOut("export __iterator__;");
tryItOut("if(new <><x><y/></x></>.isPrototypeOf(Date([z1,,], [1]))) { if ( \"\" ) {\fthrow <x><y/></x>; }} else export *;");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = ((({ __parent__: prototype, __parent__: __parent__ }) = [__parent__, prop, , , ]).isPrototypeOf(([11,12,13,14].filter))) in [11,12,13,14].some) {if(prop) {function(q) { return q; } } else  if ( /x/ .__lookupGetter__(\"__count__\")) return; }");
tryItOut("{throw __count__;let __parent__; }");
tryItOut("do {/*for..in*/L:for(var [__iterator__, __proto__] = (this)( ) in  /x/ ) {new Function }throw StopIteration; } while(((*::*)(#3={a:#3#})) && 0);");
tryItOut("let (({ __proto__: [, __count__, __proto__] })) { (this); }\nif( /x/  ? 3 : <x><y/></x>) {const __count__;throw 1e+81; }");
tryItOut("/*for..in*/for(var __count__ = (({ __count__: [] }) = prototype.constructor getter= [1,2,3,4].slice) in \n<><x><y/></x></>.__count__ = ((__noSuchMethod__: @foo for each (prop in window)))) {return; }");
tryItOut("L:with({prop:  '' }){yield;{} }");
tryItOut("prototype");
tryItOut("undefined;");
tryItOut("with({__proto__: __proto__}){export *; }");
tryItOut("if( \"\"  instanceof window) { if (\f#2=({function::__count__: <><x><y/></x></>})) {return *; } else {yield; }}");
tryItOut("for(let y in [5,6,7,8]) return (constructor.prototype =  /x/g .unwatch(\"__noSuchMethod__\"));");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) {yield *::*;yield <x><y/></x>; } else {return;let constructor; }}");
tryItOut("let(constructor = [z1].valueOf(\"number\")\f) ((function(){return ({ __proto__:  }) = __proto__.();\r})());");
tryItOut("switch(\n__count__ = (yield [11,12,13,14].map)) { default: /*for..in*/M:for(const prototype.__noSuchMethod__ in (__proto__.((3)))) { }break; case (this.__defineSetter__(\"__count__\", (window).watch) <<= (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)).@*):  }");
tryItOut("/*infloop*/for(let function::prop = *::*; null; <><x><y/></x></>) {export *; }");
tryItOut("{export *;gc() } const each;");
tryItOut("while(('fafafa'.replace(/a/g, Function)) && 0){if(__proto__.(({}).hasOwnProperty *= yield @foo)) {yield; } else  if (__proto__.__noSuchMethod__ = *.prop = (__iterator__(true))) {yield;__iterator__ =  '' , __iterator__; } else export *; }");
tryItOut("export *;/*infloop*/M:for(<x><y/></x>; *::*; <x/>) <><x><y/></x></>;");
tryItOut("if(this.__defineSetter__(\"__count__\", /a/gi)) {\t } else  if (this) {L: yield <><x><y/></x></>; } else {yield window;throw <><x><y/></x></>; } const constructor;");
tryItOut("gc()gc()");
tryItOut("/*infloop*/while( /* Comment */ \"\" )/*for..in*/for(const __noSuchMethod__ in __proto__) break ;");
tryItOut("{{}const __noSuchMethod__ = [,,z1]; }");
tryItOut("if((window)) export prototype; else yield __iterator__;");
tryItOut("yield (-1);\n;\n\nif((++*::*)[yield]) { if (*) /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) ; else yield new (<><x><y/></x></>)(<x/>);}");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in [1,,]) {yield this;yield this; }");
tryItOut("export prop;");
tryItOut("if(-1) {throw this;{} } else L:do {break ;export *; } while((window) && 0)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in *) {export __noSuchMethod__;prototype; }");
tryItOut("__noSuchMethod__(null) = __proto__;");
tryItOut("switch(({}).__lookupGetter__) { default: (new Function(\"let __noSuchMethod__ = <x/>, constructor;\"))break; case 5: ([z1])//h\ncase (this for (prototype in 5.0000000000000000000000)): var constructor = <><x><y/></x></>, prototype = <x><y/></x>;break; case (p={}, (p.z = ([<y><z/></y>]))()): case 3: case 6: export __iterator__;break; throw <><x><y/></x></>;case -3/0: break;  }");
tryItOut("gc()\n");
tryItOut("L:while(((#2=[*]).watch(\"constructor\", function(q) { return q; })) && 0)/*for..in*/for((prop) in __proto__) {return;var __proto__ = undefined; }");
tryItOut("with({}) let(__proto__ = (__count__ ? 0 : <x/>.hasOwnProperty(\"__noSuchMethod__\")), prop = [<x/>.isPrototypeOf([,,])].filter([1,2,3,4].slice)) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/for([({ __count__: ({ __iterator__: ({ __parent__: ({ prop: ({ [, , __iterator__]: [prototype], constructor: [constructor, , __iterator__, //h\n] }) }) }) }) }), , ] = <x><y/></x> .@*:: true.constructor; [<x/>]; <></>) /*for..in*/M:for(__noSuchMethod__ in <><x><y/></x></>) for(let y in []);");
tryItOut("/*infloop*/for(let __iterator__; [15,16,17,18].some((window).__defineSetter__, *::*); \nwindow) export *;");
tryItOut("/*infloop*/L:for(var ({ __noSuchMethod__: ({ __parent__: __iterator__ }) }) = __noSuchMethod__.__parent__ getter= Math.pow; *::*; #2=Boolean( { break ; } )) __noSuchMethod__ = [,,z1]\n");
tryItOut("let (prototype = <><x><y/></x></>, prototype = <x><y/></x>) { ; }");
tryItOut("{/*infloop*/for( /* Comment */0x99; (/a/gi); Number(<><x><y/></x></>)) (*::*); }\ngc()");
tryItOut("/*for..in*/for(prototype = __noSuchMethod__ = __parent__ = <><x><y/></x></> -= --<y><z/></y>.__lookupSetter__(\"__proto__\") in (\n(__parent__ =  /x/ ))) {return  /x/ ;return; }");
tryItOut("/*for..in*/for(let __iterator__ in ((function(id) { return id })((uneval(<x><y/></x>))))){__iterator__ = <x/>;var __parent__; }");
tryItOut("let (prop, prototype) { /*infloop*/L:do {throw __count__; } while(<><x><y/></x></>); }");
tryItOut("/*infloop*/for((__noSuchMethod__) = <x><y/></x>; @foo.hasOwnProperty(\"__iterator__\") = eval(\"this.zzz.zzz\", yield <y><z/></y>); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {gc/*for..in*/for(let __iterator__ in ((function ()<x><y/></x>)(@foo)))gc() }");
tryItOut("return void <x><y/></x>;");
tryItOut("/*for..in*/for(const __count__ = new (__iterator__ = __iterator__)(<x/>, 0) in *::*) {if( /x/g ) {var __parent__; } else {yield  '' ; } }");
tryItOut("try { throw <y><z/></y>; } finally { var __count__ = *; } \n;\f");
tryItOut("<bbb xmlns:ccc=\"#1#\"><ccc:eee></ccc:eee></bbb>\nif(#0=[this]) {/*infloop*/for(__count__ =  /x/g .@foo; (new window()); prop = true) {let prop;{}' }{}<><x><y/></x></>; }\n");
tryItOut("/*for..in*/for(x::__parent__ in ((function  __count__ () { let __iterator__ = undefined, prop; } //h\n)(<><xxx {__iterator__}={3/0} /></>))){L: {{}return ({a2:z2}); }var prototype = true; }");
tryItOut("/*for..in*/for(var __count__ in (1e81.watch(\"__iterator__\", ({}).__lookupGetter__))) {return *;throw <x/>; }\n");
tryItOut("yield\n");
tryItOut("__iterator__, __iterator__ = arguments;");
tryItOut("let (__parent__, prop) { (<y><z/></y>); }");
tryItOut("while((__parent__.prototype = \n(uneval(<x><y/></x>))) && 0)/*infloop*/for(__count__ = __parent__ @ *::*; (window /= <><x><y/></x></>); <x/>(<><x><y/></x></>)) { }");
tryItOut("var __parent__ = [[]], __noSuchMethod__;");
tryItOut("{throw  ''  }");
tryItOut("/*infloop*/do {export prop;export *; } while((uneval(<x><y/></x>)));");
tryItOut("const constructor = __count__, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__count__) in /a/gi(new Array(<x/>))) {/*infloop*/M:while(false){/*infloop*/L:while(<x><y/></x> for (__proto__ in  \"\" )){(this);( \"\" ); }continue ; } }");
tryItOut("if((p={}, (p.z = <><x><y/></x></>)())) {const constructor;/*infloop*/M:do ; while( /x/g .isPrototypeOf(<><x><y/></x></>)); }");
tryItOut("let __parent__ = __noSuchMethod__, prop; const __noSuchMethod__;");
tryItOut("L: {; }");
tryItOut("if(<><zzz>#2=({prop: (p={}, (p.z = 0/0)())})</zzz></>) { if (__iterator__ = this) {if(prototype if (<x><y/></x>)) ; else  if (<x><y/></x> if (<><x><y/\t><\f/x></>)) {break ;( '' ); } } else export __proto__;}");
tryItOut("/*for..in*/for(const constructor = [11,12,13,14].some in __count__.constructor =  /x/g  in this.__defineGetter__(\"constructor\", [1,2,3,4].map)) prototype");
tryItOut("__iterator__;");
tryItOut("/*for..in*/M:for(let __count__ = <><x><y/></x></> in true) {break ; }");
tryItOut("M:if([[1]]) { if (<y><z/></y>) export *; else {[1,,]; }}");
tryItOut("/*for..in*/for([__noSuchMethod__(this.__defineSetter__(\"prop\", [[]])), prototype] = constructor.__lookupGetter__(\"get\")-- in 1e-81) {if(@foo) ([[]]); }");
tryItOut(":");
tryItOut("/*for..in*/for(var __parent__ in this) {; }");
tryItOut("return;");
tryItOut("with(__count__.eval( /x/g ))");
tryItOut("if(this) yield ( /x/g )[3]; else throw typeof true;");
tryItOut("__parent__ = *, __iterator__ = 1e4");
tryItOut("let (__noSuchMethod__ = 'fafafa'.replace(/a/g, (<y><z/></y>).__defineSetter__) !== ( /* Comment */ /x/g )) { /*infloop*/for(prop; \n<x><y/></x>; (new RegExp())) {yield; } }");
tryItOut("return;");
tryItOut("L:switch(window = ({__proto__: true &= window})) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(const <y><z/></y>['prototype'] in *::*) {/*infloop*/while(<x/>)__noSuchMethod__ = window, __count__ = <x><y/></x>; }break;  }");
tryItOut("for(let y in []);");
tryItOut("L: {L: {return this; } }");
tryItOut("if(( '' \n)) { if (({ __noSuchMethod__: __iterator__ }) = 3/0.__defineSetter__(\"prop\", ({}).hasOwnProperty) * @foo.__parent__) L:if(<><x><y/></x></> == <><x\t><y/></x></>) {throw  /x/ ; } else yield; else export __proto__;}");
tryItOut("{}");
tryItOut("/*infloop*/do const __parent__; while(true);if(__proto__.(Number(prototype))) { if (<><x><y/></x></>.valueOf(\"number\")) {return; }} else throw 0;");
tryItOut("with( /x/ )let /*\n*/__iterator__;");
tryItOut("/*infloop*/for(new ((new window))(); let (prototype = false) #1#; *::*) {(\r /x/ ); }");
tryItOut("if(<x><y/></x>) { if (*) {continue ; }} else {export *;yield; }");
tryItOut("M:if(function () { return #1# } \t) { if (( ''  <= (-1)).hasOwnProperty(\"constructor\")) export prop;} else export *;");
tryItOut("with({}) { return; } ");
tryItOut("if(false.valueOf(\"number\")) { if (new <y><z/></y>(<><x><y/></x></>)) continue M; else {(const __noSuchMethod__;);return; }}");
tryItOut("/*for..in*/L:for(const __parent__ in __noSuchMethod__|=(null for each (prop in window))) try { __count__ = false; } catch(__count__ if (function(){(<x><y/></x>);})()) { false; } catch(__proto__) { yield <y><z/></y>; } finally { export *; } ");
tryItOut("\nswitch(false , *(()[ \"\" ])) { case <><x><y/></x></> .@*:: ({setter:  \"\" , __proto__ setter: ((this).watch).apply }): ;default: export constructor;if(case 1: function (__proto__) { export __count__; } break; default: continue M;break; ;) {; } else  if ([z1]) return; else {( '' );break L; }break; case 2: const __iterator__ = function(id) { return id }, __parent__ = *::*;break;  }\n");
tryItOut("L: {yield; }\n(<y><z/></y>);");
tryItOut("let (__proto__ = (__noSuchMethod__.@foo)) {  '' ;\n{}\f\n }");
tryItOut("L: {export *; }");
tryItOut("return;");
tryItOut("if(prototype = [*.propertyIsEnumerable(\"__noSuchMethod__\")].map(function(q) { return q; })) { if (prototype) {prop = arguments; }} else return [__iterator__ = __noSuchMethod__];");
tryItOut("let(({ __count__: ({ __parent__: [] }), __iterator__: ({ constructor: ({ __parent__: __parent__ }) }) })) ((function(){throw __proto__;})());");
tryItOut("{{} }");
tryItOut("while((<><x><y/></\tx></>) && 0){return;return; }");
tryItOut("#1#;");
tryItOut("<><x><y/></x></>\nexport *;");
tryItOut("with((#1=(function ([y]) { })().isPrototypeOf(<y><z/></y>)))/*for..in*/for(let prop in ((({}).__lookupGetter__)(this)))continue ;");
tryItOut("/*infloop*/for(let prototype = constructor; <y><z/></y>; __parent__) {L:with(<x/>){; /x/g  } }");
tryItOut("return;");
tryItOut("if(({a2:z2})--) {switch(this) { default: case  '' : break;  }yield <y><z/></y>; } else {;export *; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in [,]) {continue ; }");
tryItOut("while(({}.yoyo(<y><z/></y>)) && 0)const constructor;");
tryItOut("if(window) {<><x><y/></x></>yield; } else  if ((yield (let =  /x/g ))) {(<x/>); }");
tryItOut("var __parent__;\nif(function ([y]) { }) { if (undefined) <x><y/></x>; else { /x/ export prototype; }}\n");
tryItOut("/*infloop*/M:for(new (gc)( /x/g , prototype) ^ (<><x><y/></x></> == <><x><y/></x></>); __iterator__ = eval(\"[[]];\", true .. *)(); [] = (uneval(this.zzz.zzz))) {/*infloop*/for(*;  \"\" ; <x><y/></x>) \fconst __parent__ = window, __proto__; }");
tryItOut("switch((prop.__count__ setter= <x><y/></x>)) { default: ;\n(this);\nbreak; case 6: case 1:  }");
tryItOut("(new <>\f<x><y/></x></>(({a1:1}), -3/0));");
tryItOut("/*for..in*/for(let *::*['prop'] in 1e4.__defineGetter__(\"__parent__\", function ()1.3)) if(<x/> %= ({a1:1}).throw(__noSuchMethod__)) export *; else  if (String()) /*for..in*/for(__iterator__ = null in undefined) {throw 3/0; }");
tryItOut("return new (<><x><y/></x></>)(*, *) for each (prop in <x><y/></x>) for (prototype in [,,]) for each (__iterator__ in null);");
tryItOut("L:if('fafafa'.replace(/a/g, 1e4)) {const __count__ = prototype = <x><y/></x>, constructor = prop; } else  if (RangeError( /x/g , this.zzz.zzz)) /*infloop*/L:for((null.@*); function  __proto__ (constructor) { return null } (); (/*\n*/*::*)(4.)) {; undefined  }");
tryItOut("if((#2=[[11,12,13,14].sort].__lookupGetter__(\"__proto__\"))) /*infloop*/for(--\t[,,]; this.zzz.zzz; (yield <y><z/></y>)) const __noSuchMethod__ else  if ((yield ({}))) return\n{}");
tryItOut("/*infloop*/for(-0.__defineGetter__(\"constructor\", function(y) { yield y; (this);; yield y; }); *::*; null +  /x/g ) {__proto__ = <x><y/></x>;yield; }");
tryItOut("let (__proto__ = (function::function::__parent__.yoyo((<x/>.__defineSetter__(\"__parent__\", (*).watch)) :: eval(\"true\", <x/>))/*\n*/), constructor) { do {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in true) {return; }export *; } while((constructor) && 0); }");
tryItOut("/*infloop*/for(var prop; 1.2e3 = constructor; (uneval(<x><y/></x>))) return;");
tryItOut("throw 0\nthrow *::*;");
tryItOut("prop.constructor = __parent__;");
tryItOut("while((__parent__ = (-0) === *::*) && 0)function(q) { return q; }");
tryItOut("L: {;; }");
tryItOut("export *; const __parent__;");
tryItOut("<xxx {w}={(yield <><x><y/></x></>)} />const __parent__, constructor;");
tryItOut("export __proto__; const __noSuchMethod__;");
tryItOut("try { constructor = prototype; } catch(__proto__ if Iterator(undefined, (function ([y]) { })().constructor)) { with({}) for(let y in []); } catch(__proto__) {  } ");
tryItOut("M:switch((<y><z/></y> - *::*)) { case (@foo.__lookupGetter__(\"__proto__\")): break; /*for..in*/for(const prop in <x><y/></x>) {export *; }break; default:  }");
tryItOut("{{} }\n");
tryItOut("L:if( '' ) { if (undefined) {; } else {return;let __parent__; }}");
tryItOut("/*for..in*/for(let __iterator__.prop in ((eval)(window))){/*for..in*/for(const <><x><y/></x></>['prop']\f in (([1,2,3,4].slice)((constructor = getter = false, __iterator__ = true))))export constructor; }");
tryItOut("if(({}) =  \"\" ) {return (function ([y]) { })(); }");
tryItOut("var prop = function(id) { return id }, __count__;\nreturn;\n");
tryItOut("{return  \"\" ; }");
tryItOut("/*for..in*/for(var prototype in ({__parent__: null})) {if(__parent__|=<>__noSuchMethod__</>) { if ((\n<y><z/></y>)) {yield; }} else {yield;var __proto__ = arguments, prototype = <x><y/></x>; } }");
tryItOut("L:do {__iterator__;{} } while((new String(((eval(\"__proto__ = __noSuchMethod__\", (eval(\"export function::__noSuchMethod__;\", this)))).yoyo(({constructor: typeof  /x/g  })))) / [0x99 for (__parent__ in window)] .. \r((uneval(*::*)))) && 0);");
tryItOut("{do let constructor; while((constructor.__defineSetter__(\"__parent__\", )) && 0);yield; }");
tryItOut("do <x/>; while((constructor.prop = __iterator__) && 0);");
tryItOut("M:if(1.3.yoyo( /x/g )) { if ((#1=({prototype: @foo}))) {constructor __count__; } else const constructor, __iterator__;}");
tryItOut("([,,z1]); const __proto__;");
tryItOut("throw prototype;");
tryItOut("throw __proto__;");
tryItOut("\fM:if((@foo.watch(\"__noSuchMethod__\", (1 for (x in []))))) {return;return <x><y/></x>; } else  if () yield window;");
tryItOut("let(__proto__) ((function(){prop = __parent__;})());");
tryItOut("try { export *; } catch(prototype) { break ; } finally { /*\n*/; } ");
tryItOut("if(({__noSuchMethod__ getter: false, __proto__: * })) { if ( /* Comment */(function  prototype (constructor, __noSuchMethod__)*).call(let (__proto__ = constructor)  \"\" , )) let (constructor, function::(@foo); = {}) { yield; }} else ([z1].__defineGetter__(\"__parent__\", 'haha'.split));");
tryItOut("while((new Function()) && 0)with({__proto__: -0 =  /x/g }){break L; }");
tryItOut("/*infloop*/do yield; while((((<x><y/></x>.prop).watch)(*['prop'] = constructor)));");
tryItOut("while((<><bbb xmlns=\"({__proto__: 0})\">yyy</bbb></>) && 0)function(q) { return q; }");
tryItOut("M:switch(<> </>.yoyo(((.(false++)).__lookupSetter__(\"__noSuchMethod__\"))[<x/>])) { case <employee id=\"1\"><name>Joe</name><age>20</age></employee>: /*infloop*/do L: export *; while( /x/g );default: return arguments\n;/*for..in*/for(\f__iterator__ = ((((1 for (x in [])))(__iterator__)) , prop = @foo) in (function ([y]) { })()) yield;function  __iterator__ () { (function(y) { yield y; @foo;; yield y; }).call } break; break; case ({ __proto__: ({ __count__: __proto__ }), prototype: __noSuchMethod__ }) = <y><z/></y>.__lookupSetter__(\"__proto__\"): case 3: break; case 3: break; {}\n{}\n }");
tryItOut("__count__;");
tryItOut("do {<><x><y/></x></>;(1e81); } while((@foo) && 0); const __parent__;");
tryItOut("/*infloop*/\rwhile(<x><y/></x>){gc() }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.__noSuchMethod__ = (-0) < window) let(constructor) { this.zzz.zzz;");
tryItOut("do var __count__ = <y><z/></y>, __count__ = []; while(( /x/g  << <y><z/></y>) && 0);");
tryItOut("{var __parent__ = constructor; }");
tryItOut("/*for..in*/M:for(__iterator__:   = this.__defineSetter__(\"__parent__\", [1,2,3,4].map) in (p={}, (p.z = window)())) {if((function (__noSuchMethod__) { return  } )) { if (((__iterator__ = <x><y/></x>)[false.propertyIsEnumerable(\"prototype\")])) const __iterator__; else {return <y><z/></y>; }} }");
tryItOut("/*for..in*/for(const __count__ in __proto__) {var constructor = <y><z/></y>, constructor = [,]; }\n/*for..in*/for([__count__, prop] = ((yield \n<><x><y/></x></>)).prop = +prop in []+=(__iterator__.__proto__)) throw 1e-81;\n;\n");
tryItOut("if(__count__.__parent__ setter= function (__iterator__) { return; } ) /*infloop*/M:for(let prop = (this.zzz.zzz); __parent__ = null; {}) const constructor;");
tryItOut("{if(new ([[1]])(1e-81, <y><z/></y>)) {__parent__ = window; } else  if (([11,12,13,14].sort)) {__iterator__;var __noSuchMethod__; } else <x/>; }");
tryItOut("/*infloop*/do  const __proto__; while((--(<x/> ^ <><x><y/></x></>).watch(\"__count__\", Function)));");
tryItOut("yield\n");
tryItOut("yield\n");
tryItOut("/*infloop*/for(const constructor; 3/0; <x/>) {Functionexport *; }");
tryItOut("(1 for (x in []))\n;\n");
tryItOut("/*infloop*/for((<x><y/></x>'__lookupSetter__(\"constructor\")  ); @foo.__lookupGetter__(\"prop\"); [ /x/g ]) var prop, prototype;");
tryItOut("if(__count__ = window) {return; }");
tryItOut("if(try { yield; } catch(constructor if <><x><y/></x></>) { var __parent__; } catch(constructor if <x/>) { return false; } catch(__count__ if <x/>) { throw <></x></>; } catch(__count__ if *) { constructor; } ) throw <><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("(<y><z/></y>); const __proto__;");
tryItOut("export __count__;");
tryItOut("with({}) { let __parent__ = <y><z/></y>; } ");
tryItOut("if(void __iterator__ || (__count__ = null).__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) { if ([((uneval([1,,]))) if (<x/>)]) {const __iterator__ = <><x><y/></x></>; }} else {const constructor;with({__noSuchMethod__: ( instanceof )})gc() }");
tryItOut("throw prototype;");
tryItOut("{{throw *; } }");
