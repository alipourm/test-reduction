
tryItOut("(<x><y/></x>);");
tryItOut(";");
tryItOut("/*infloop*/for(const ({ <y><z/></y>: ({ constructor: __count__, __noSuchMethod__: __noSuchMethod__ }), prototype: ({ <x><y/></x>: constructor, __iterator__: prototype }) }) =  /* Comment */__parent__( \"\" , __proto__); [1].yoyo([[1]]); this.*) { }");
tryItOut("do function(q) { return q; } while(( /x/g  ::  /x/g ) && 0)");
tryItOut("L:if(window) { if (<x/> += <x><y/></x>) {}} else {var constructor;continue L; }");
tryItOut("if(*::* .@*:: window) gc() else gc()");
tryItOut("/*for..in*/for(var __parent__ = this in ((Math.sin)(true == this))){return; }");
tryItOut("/*infloop*/for(if( \"\" ) {} else  if ((Object(__count__, {}))) export *; else default: /*infloop*/while(constructor === *.@foo)(null).__defineSetter__yield;; --undefined; this.zzz.zzz) yield;\n/*for..in*/for(let [constructor, prop] = (eval(\"(__parent__);\", <x><y/></x>)) in null) {export __proto__; }\n");
tryItOut("with({prop: this})\nbreak ;");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = this.__defineSetter__(\"__noSuchMethod__\", eval) in \n\f({}).__defineSetter__(\"__proto__\", let(({ constructor: __iterator__ }), __noSuchMethod__ = constructor) ((function(){constructor = prototype;})());)) throw __iterator__ ^ <y><z/></y>;");
tryItOut("while(((this.eval(((uneval(prop)))))) && 0){<y><z/></y>; }");
tryItOut("if(( /x/ )(true).__defineSetter__(\"constructor\", /a/gi)) (({}).__lookupGetter__).apply else  if ( '' ) {break ; }");
tryItOut("with({}) { let(prop, __proto__ = <y><z/></y>) ((function(){gc()})()); } ");
tryItOut("do throw <x/>; while((yield  /x/g  + <x><y/></x> %= (false for each (constructor in true))\n) && 0);");
tryItOut("/*for..in*/for(let __parent__ = ({__noSuchMethod__: yield arguments}) in this) yield  '' ;");
tryItOut("{/*infloop*/do {{}const __proto__; } while(<><x><y/\t></x></>.__lookupGetter__\f(\"function::prop\")); }");
tryItOut("L:if((<y><z/></y>.((-1)))) {return ({a2:z2});(const __noSuchMethod__); } else /*infloop*/for(let __count__; ((uneval(((p={}, (p.z = <><x><y/></x></>)()))))) if (*); eval(\"*::*.isPrototypeOf( '' )\", constructor.__parent__ setter= function () { yield prototype } )()) /*for..in*/for(const prop in (((true).watch)(({}))))export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in 'fafafa'.replace(/a/g, ({}).hasOwnProperty).__proto__) {if((<><x><y/></x></> > [z1])++(true if (*::*))) { if (#2=({__noSuchMethod__: <x><y/></x>})) {gc() }} else {export __proto__\n }{} }");
tryItOut("if(false) { if (function(id) { return id }) {return; }} else var __iterator__ = 5.0000000000000000000000, function::__count__ =  /x/g ;");
tryItOut("let (__iterator__) { let prop }");
tryItOut("/*infloop*/for(let setter; * !== window; <x><y/></x>.isPrototypeOf(<y><z/></y>)) {}");
tryItOut("if(<bbb xmlns:ccc=\"(0/0)()\"><ccc:eee></ccc:eee></bbb>) {[1,2,3,4].map } else  if ((\ndelete (@foo.__defineSetter__(\"prop\", (<y><z/></y>).__defineSetter__)))) yield <x/>.valueOf(\"number\"); else {export __iterator__; }");
tryItOut("/*for..in*/L:for(const [__count__, constructor] = new ( /x/g )() in this) ;");
tryItOut("if(((<x><y/></x>.(<x></><ccc:ddd>yyy</ccc:ddd></<></> x>) .@ Array()))()) { if (__noSuchMethod__ <<= -new ((1e+81).watch)()) {{} }} else L:do {gc()L:if(this) {return; } else {[1,2,3,4].slice } } while(((let (__parent__ = <x/>, prop = true)  '' )) && 0);");
tryItOut("with({constructor: 'fafafa'.replace(/a/g, *::*)})switch(<x/>) { default: case <x><y/></x>: break; return null; }");
tryItOut("return <><x><y/></x></>;{}throw undefined;");
tryItOut("if(#0=({constructor: __iterator__}) - (*::* & undefined)) { if (typeof __proto__.watch(\"__count__\", ((Math.pow).apply).call)) __count__} else yield;");
tryItOut("/*infloop*/while(<y><z/></y>){let __noSuchMethod__; };\nL: yield;\n");
tryItOut("with({__count__: (prototype.(*::*)) != this.__defineSetter__(\"__count__\", eval)})/*infloop*/for(.constructor; __count__ , (<x><y/></x>.(033)); <><x><y/></x></>()) gc()");
tryItOut("do {with((({ __parent__: __noSuchMethod__, prop: __parent__ }) = (this.__defineGetter__(\"__noSuchMethod__\", (gc).apply)))){export \tconstructor;{yield;yield; } } } while(((function(id) { return id } & null)) && 0);");
tryItOut("{M:do return true; while((([11,12,13,14].map != prototype-=prop-=<><x><y/></x></>)) && 0); }");
tryItOut("/*infloop*/L:do {M:with({__count__: <x/>})({}).__lookupGetter__/*for..in*/for(var ( '' )(window) in ((Math.pow)(prop(<x><y/></x>)-=0/0))){__iterator__ = <><x><y/></x></>, prop, continue ;; } } while(x::prototype-=eval(\"Function\", ([1,,].__defineGetter__(\"constructor\", eval))));");
tryItOut("/*for..in*/L:for(const prop = ([<x/>]) for each (__iterator__ in <x><y/></x>) if (<y><z/></y>) in !*::*) {<x><y/></x>;{} }\n{}\nreturn;\n");
tryItOut("export *;");
tryItOut("L:while((this.zzz.zzz) && 0)*::*;\nwindow;\n");
tryItOut("let (__noSuchMethod__, prop) { let prototype = arguments; }");
tryItOut("/*infloop*/for((function::prop) =  for (__proto__ in <><x><y/></x></>)({__noSuchMethod__: <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>}); function  __iterator__ (constructor, prototype)this .@x:: *::*; try { with({}) { yield null; }  } catch(({ constructor: ({ prop: __noSuchMethod__((__iterator__ = __iterator__)), get: [] }), constructor: [__parent__, , , ] })) { __noSuchMethod__ = __noSuchMethod__; } ) throw function(id) { return id };");
tryItOut("if(false) { if ([15,16,17,18].map(({}).__lookupGetter__, <y><z/></y>)) {let set; } else L:if(__proto__\n) {yield function(id) { return id }; }}");
tryItOut("with( /* Comment */[, , ])Math.sin");
tryItOut("if(\n*) [[]];");
tryItOut("L: return *;");
tryItOut("/*infloop*/M:for(window * ({} for each (__parent__ in undefined)); ((( /* Comment */__parent__) - function  __proto__ (__noSuchMethod__, __proto__) { return (({})).apply(.2, [1,,]) } (window, undefined)).__defineSetter__(\"__proto__\", )); this.zzz.zzz) eval\n");
tryItOut("/*for..in*/for(let prototype = \n<x/> in this) {var __parent__ = <y><z/></y>;<><x><y/></x></>; }");
tryItOut("L: ( /x/g );");
tryItOut("{try { __iterator__ = __proto__; } catch(__iterator__) { with({}) throw __parent__; }  }");
tryItOut("/*for..in*/for(__parent__ = -1 :: ({a1:1}) in 0.1.@foo) {return; }");
tryItOut("/*for..in*/L:for(let [prototype, constructor] = Function in Function()) if([15,16,17,18].filter( '' , *)) (case 6: break; break; function(q) { return q; }break; break; default: return;break; case undefined: return;case 0: break; const window, prototype = false;break; ).__defineSetter__ else  if (let (__parent__, __iterator__ = <x><y/></x>) <x/>.hasOwnProperty(\"(<x/>)(<><x><y/></x></>)\")) {yield null;constructor; }");
tryItOut("throw StopIteration;");
tryItOut("throw <x/>\n/*for..in*/for(let __count__ in function::__parent__) {__iterator__, __noSuchMethod__; }");
tryItOut("if(#2=({__parent__: __noSuchMethod__})) { if ((let (__count__) 1.2e3)) {(new Function(\"<><x><y/></x></>;\"))function (prop) { return function ([y]) { } }  } else if(<><x><y/></x></>) const prop = prop, prop; else (this);}");
tryItOut("for(let y in [5,6,7,8]) yield this.eval(__parent__);");
tryItOut("var __iterator__ =  '' ;");
tryItOut("L: {~ }");
tryItOut("with({}) { throw <x/>; } ");
tryItOut("/*infloop*/for(var __noSuchMethod__ = 3.throw(function ([y]) { }); <x/>;  \"\" .isPrototypeOf( '' )) {export __count__;(<x><y/></x>) }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((prop = window).watch)(<x><y/></x> < (-1))))return;");
tryItOut("/*for..in*/M:for(const __parent__ = (constructor.prop = constructor = <x><y/></x>--) in (-0 for each (constructor in this))) gc()");
tryItOut("/*infloop*/for(({ prototype: ({ constructor: constructor, prop: ({ __proto__: ({ __noSuchMethod__: [({ constructor: __count__, constructor: __noSuchMethod__ }), , ({ __count__: constructor, prop: prop }), , ], function::prototype: ({ prototype: [constructor, \r, __iterator__, prop, __parent__] }) }), constructor: __noSuchMethod__ }) }) }) = <x/>; __iterator__; ((new Function(\";\")))(<x><y/></x>.__defineSetter__(\"__iterator__\", gc) @ <x><y/></x>, 'fafafa'.replace(/a/g, /a/gi))) L: {}\n");
tryItOut("{export *; }");
tryItOut("{let prototype, constructor; }");
tryItOut("/*infloop*/L:for(const __count__; <><zzz>*</zzz></>.isPrototypeOf((this())); constructor\t+=(<><x><y/></x></\t> ? window : <x/>).__noSuchMethod__) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((constructor) in (Math.sin)(*::*, <x><y\t/></x>)) {{throw <x><y/></x>; } }");
tryItOut("L:while(((<\fx><y/></x> ? undefined : [1]) ? (__count__ = __count__) : ({__noSuchMethod__: (*::*.__defineSetter__(\"prop\", (new Function(\";\")))), prop })) && 0)gc()\n\f");
tryItOut("if(((yield <><x><y/></x></>))) { if ((((({prototype getter: function (__parent__) { yield <x><y/></x> }  })) instanceof (break )).prop)[ if (<><><!--yy--></></>).@*]) return;} else {throw <><x><y/></x></>[<y><z/></y>];;const __noSuchMethod__; }");
tryItOut("switch((__iterator__ = <x/>) * [[]]) { default: const prototype, __iterator__;\nexport *;\nbreak;  }");
tryItOut("/*infloop*/do {/*infloop*/M:while( /x/ ){throw this;return; } } while([15,16,17,18].map((eval).call,  '' ));");
tryItOut("{/*for..in*/M:for(var [prototype, prop] = window in undefined) {return  /x/ ;let __noSuchMethod__; } }");
tryItOut("let (({ __iterator__: [({ __count__: [({ __count__: __parent__ }), ] }), , __iterator__], (yield 3)(*::* & @foo): [, __iterator__] })) { {/*infloop*/for(let prop = @foo; null; <x><y/></x>) {yield;export prototype; }/*for..in*//* nogeckoex bug 349964 */ for  each(function::__proto__ in this) {(<x/>);{} } } }");
tryItOut("if(__parent__.__proto__ getter= function  __parent__ (__count__)) { if ('fafafa'.replace(/a/g, function (prototype, __parent__) { return  \"\"  } )) const __iterator__, __count__; else {; }}");
tryItOut("if(<x><y/></x>) (<><x><y/></x></>); else {yield this; }\n");
tryItOut("with({}) { throw __count__; } ");
tryItOut("/*infloop*/for(__count__ = ~__parent__; *::*; new prop((eval(\"this\", <x><y/></x>)), <x><y/></x>)) throw undefined;");
tryItOut("M:if(({__iterator__: ({})})) {\texport prototype;{} } else  if (4.)  else yield;");
tryItOut("(prop);");
tryItOut("M:switch(<y><z/></y>) { case 6: break; break; case 2: return  /x/g ;break; let (__iterator__) { (<><x><y/></x></>)\ncontinue M; }break; case (({__parent__ getter: ([1,2,3,4].slice).apply,  for (prototype.__iterator__ in <y><z/></y>) for (__iterator__ in constructor) })): ((Math.sin).call(<x><y/></x>, ));break;  }");
tryItOut("with([(<><x><y/></x></> ^= <x><y/></x> ? (__noSuchMethod__.constructor) : ({__count__: __count__}))]){if((__count__)) { if ('fafafa'.replace(/a/g, ({}).__lookupGetter__)) {throw  \"\" ;throw __noSuchMethod__; } else continue M;}/*infloop*/while((({ get constructor __iterator__ (__count__, constructor) { <><x><y/></x></>; }  }))){throw true;(<x><y/></x>); } }");
tryItOut("__parent__.prototype = *::* = prop;");
tryItOut("/*for..in*/M:for(var [prototype, __count__] =  ''  in  /x/ ) ; const function::__iterator__;");
tryItOut("if(window) function () { var __iterator__, __count__ = <><x><y/></x></>; }  else {/*for..in*/for( /x/g  in this) {(<y><z/></y>); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in null) yield;");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(const __iterator__ = eval(\"(({ prototype: [, prop] }) = constructor)\", (new Function())); yield 1e4; ({ constructor: [__noSuchMethod__, __parent__], constructor: __noSuchMethod__ }) = (<><x><y/></x></>.valueOf(\"number\")) += * ? null : window , __count__.__defineSetter__(\"__proto__\", ({}).hasOwnProperty)) {with({__count__: ( /x/ ( \"\" , *::*))(<x><y/></x>.__defineSetter__(\"function::this\", (<x/>).apply), this.__lookupSetter__(\"constructor\"))})/*infloop*/do {return;yield; } while(); }\f");
tryItOut("/*for..in*/for(let prototype in this) {var __count__ = -1, __proto__; }");
tryItOut("if(prototype.prototype setter= Math.sin) <><x><y/></x></>, window else  if (<><x><y/></x><\f/>.yoyo(this)) ; else {__proto__;; }");
tryItOut("/*infloop*/do {/*for..in*/for(let __parent__ = @foo &= constructor .. this.zzz.zzz in (__parent__ .@x:: null >>= <x><y/></x>.(this))) \f{do {} while((([11,12,13,14].some)) && 0); } } while(//h\n(p={}, (p.z = )()));");
tryItOut("do {continue L; } while(((\f__parent__ in window.__lookupGetter__(\"constructor\"))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\rlet constructor.__proto__ in ([z1][null])) undefined;");
tryItOut("do {export prop\nyield; } while(((\n([(({}) === <x><y/></x>)].filter((function(q) { return q; }).call)))) && 0);");
tryItOut("if((function ([y]) { })(__parent__)) const __parent__ = *::*;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("let (constructor, __count__ =  \"\" ) { var __noSuchMethod__ = __noSuchMethod__, __count__; }");
tryItOut("while((new Boolean(({a1:1}), this)) && 0){return;{} }");
tryItOut("/*infloop*/do {/*infloop*/for((<x><y/></x> ,  '' ); gc(); <><x><y/></x></>;) this;return [1,,]; } while(null.hasOwnProperty(\"__iterator__\"));");
tryItOut("(<x/>);");
tryItOut("/*for..in*/L:for(const __iterator__ =  ''  in __count__) {export *;continue L; }switch(;.__noSuchMethod__ = this) { case 6: default: break;  }");
tryItOut("<x><y/></x>; const __proto__;");
tryItOut("/*infloop*/do const __parent__ =  '' ; while(this.zzz.zzz);");
tryItOut("yield <><x><y/></x></>;");
tryItOut("throw prop;");
tryItOut("const prototype = undefined, constructor;<><x><y/></x></>;");
tryItOut("let (constructor, constructor) { export *; }");
tryItOut("(<x><y/></x>)\n\ntry { let(__iterator__ = <x><y/></x>) { gc() } finally { with({}) function::__noSuchMethod__ = prop; } ");
tryItOut("/*infloop*/\tL:for(const __iterator__ = <x/>; *; this) export __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("with({prop: new ({__proto__: undefined,  get (-0)() { yield true }  })(({ set __proto__ __noSuchMethod__ (__iterator__, __iterator__) { gc() } , __proto__ setter: (new Function(\"export *;\")) }), [,,z1])})export constructor;");
tryItOut("{break ;gc() }");
tryItOut("with(<><x><y/></x></>)const function::constructor, __proto__ = true;");
tryItOut("let (prop) { {break L; } }");
tryItOut("/*infloop*/for(const __iterator__; (eval(\"<x><y/></x>.__noSuchMethod__ = <><x><y/></x></>\", new Array(*::*,  \"\" ).@foo)); (new Function)) yield;");
tryItOut("{prototype = prop; }");
tryItOut("/*for..in*/for(__count__ in \t<>5.0000000000000000000000</>) \t{yield  '' ; }");
tryItOut("/*for..in*/for(var prototype = ((p={}, (p.z = 5.0000000000000000000000)())) in -0) {yield @foo;continue M; }");
tryItOut("L: {export __count__; }");
tryItOut("/*infloop*/while(((([({a2:z2})].sort(function \r __noSuchMethod__ (__iterator__) { yield this } )))\n))/*for..in*//* nogeckoex bug 349964 */ for  each(const (constructor) in *::*) {return; }");
tryItOut("let (__count__) { const __count__, constructor; }");
tryItOut("M:if(<y><z/></y>) {export constructor; } else  if (<x/>) {constructor, __count__ = window; }");
tryItOut("with({__noSuchMethod__: <><x><y/></x></> >>> (-0)}){\nlet __proto__ = <x/>; }");
tryItOut("return (yield [11,12,13,14].map);");
tryItOut("if(<y><z/></y>) { if ((function ([y]) { })()) __proto__ = *::*, __count__ = .2;} else {__noSuchMethod__ }");
tryItOut("/*for..in*/for(prototype in (new (new Function)((\t*::*.@*),  '' .__defineGetter__(\"prop\", (1 for (x in [])))))) {var __iterator__ = <x><y/></x>, constructor = *;L:if(__noSuchMethod__) this; else {yield <><x><y/></x></>;gc() } }");
tryItOut("/*infloop*/do {__count__; } while( '' );");
tryItOut("/*infloop*/for(constructor.__proto__ = prototype.prototype getter= 1e81; this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty).throw([,,z1].__defineSetter__(\"constructor\", Math.sin)); function ([y]) { }( '' ))  if (window)");
tryItOut("<><x><y/></x></>");
tryItOut("with({__count__: (uneval((~<><x><y/></x></>\n.watch(\"__count__\", __proto__.prop = <><x><y/></x></>))))}){gc() }");
tryItOut("while((new (<><>__count__</></>)((Y instanceof prototype = *), ([1,2,3,4].map).call(<><x><y/></x></>, .2))) && 0)return;\nvar __proto__, __count__ = <x/>;\n");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] = (#1=({constructor: <x><y/></x>}) &= (<x><y/></x> , *::*) >>>=__iterator__) in <><xxx>{__count__}</xxx></>) {yield;\n\n__noSuchMethod__; }L:if(<x/>) { if (true) {throw 3.141592653589793; } else continue M;}");
tryItOut("if((\n({ __noSuchMethod__: constructor }) = (__parent__ = *))) { if () {{continue ;; } }} else with({function::prop: this})do <x/>; while((this) && 0)\n");
tryItOut("/*for..in*/for(var __parent__ = prop = 0/0 ? (({}).__lookupGetter__).call(undefined, 0) : RangeError() in this.zzz.zzz) {Math.pow }");
tryItOut("L: {const __parent__, __noSuchMethod__;let __proto__ = -0; }");
tryItOut("if([15,16,17,18].sort(Function, *::* ^ window.isPrototypeOf((<y><z/></y> ? 1e+81 : [[1]])))) {with({__count__: })return  /x/g ; } else {with('fafafa'.replace(/a/g, new Function) < ( /* Comment */this))let __parent__, __iterator__ = prototype;with({__iterator__: <x><y/></x>.propertyIsEnumerable(\"constructor\")})/*infloop*/for(#1=[#1#]; [1]; <x><y/></x>) {yield window;yield *; } }");
tryItOut("/*infloop*/while(([15,16,17,18].filter( '' , <x/>) *= \n(-1))){return 1e+81; }");
tryItOut("/*for..in*/L:for(const prototype = ((__noSuchMethod__.yoyo(<y><z/></y>).watch(\"__count__\", function  [, , __count__, __proto__, ] (function::__parent__, __parent__) { return constructor.__parent__ getter= Math.sin.hasOwnProperty(\"(__proto__)\") } )).__defineGetter__(\"prototype\"\t, eval)) in (prototype = <><x><y/></x></>)) {{} }");
tryItOut("/*for..in*/L:for( \"\"  in ((return <x/>;function(prop(<y><z/></y>), break ;) { return  } )(__proto__ = 1e4))){const prototype, __count__ = <><x><y/></x></>;yield <x/>; }");
tryItOut("new Function const constructor;");
tryItOut("const prototype = <x/>;");
tryItOut("do export //h\nprop; const prop; while((new Boolean(true).__defineGetter__(\"__proto__\", /a/gi)) && 0);");
tryItOut("gc() const constructor;");
tryItOut("with(<>(( \"\" ))</>)/*for..in*/for(let setter in ((Math.pow)(__count__.__defineGetter__(\"__parent__\", function  prop (constructor) { return undefined } ))))throw <><x><y/></x></>;");
tryItOut("with('haha'.split){; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__\t, __iterator__] =  in <bbb xmlns:ccc=\"false\"><ccc:eee></ccc:eee></\nbbb> || this.__defineGetter__(\"__proto__\"//h\n, (new Function(\"continue ;\")))) {(false); }");
tryItOut("{gc()gc() }");
tryItOut("switch((false.isPrototypeOf([(<x><y/></x>.__defineGetter__(\"__proto__\", function(q) { return q; })) for (__parent__ in this)]))) { default: break; throw <><x><y/></x></>;case [z1,,].__lookupSetter__(\"__iterator__\"): continue L;break; case Iterator( { yield this } ): export __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in null) {export *;{} }");
tryItOut("/*for..in*/L:for(const __proto__ = __parent__ = this in <x><y/></x>.isPrototypeOf(<><x><y/></x></>)) let __proto__ = <x/>;");
tryItOut("L:switch((\n( '' [([11,12,13,14] <ccc:ddd><!--yy\f--></ccc:ddd> .some)]))) { case 7: ;default: {}break; case 8: break;  }");
tryItOut("/*infloop*/for(new (new Function)(<><y/>x>); eval(\"(<x/>);\", 1e-81); [11,12,13,14].filter) {var __proto__;{} }");
tryItOut("/*for..in*/for(const __count__ in <x><y/></x>) {M:with({__proto__: <x><y/></x>})false; }");
tryItOut("[1] const prop;");
tryItOut("while(([,,z1] ? 3/0 :  /x/g ) && 0){/*infloop*/L:do {return <x><y/></x>;{} } while(undefined); }");
tryItOut("/*infloop*/for(var __proto__; constructor; (false | ( /* Comment */true))) {constructor = [];const __iterator__, prop;\nyield, prototype = -0;\n }");
tryItOut("if( /* Comment */prop['(prototype['prop'])'] = __count__.function::prop setter= let (__noSuchMethod__) 1e4) throw 1e4; else  if (({ __iterator__: ({ __proto__: \t__count__, prototype: prototype }) }) = __iterator__) 1e-81 else {L: {;export *; } }");
tryItOut("/*for..in*/for(var [z1]['__noSuchMethod__'] in ((Function)(([15,16,17,18].sort(([1,2,3,4].slice).apply, prop))))){let constructor = false, __proto__; }");
tryItOut("if(__noSuchMethod__) return; else const ;");
tryItOut("{throw 3/0;yield; }");
tryItOut("let (({ constructor: __count__, constructor: prototype }), __proto__) { export *; const prop; }\nlet(prop) ((function(){var constructor;})());");
tryItOut("M:while((<y><z/></y> <<= <x><y/></x>) && 0)export *;");
tryItOut("if(new (({}).hasOwnProperty)( /x/ )) const __count__, prop;\t\n;\n else /*\n*/{export __iterator__; }");
tryItOut("/*infloop*/while(*)/*for..in*/for([constructor, \rprop] = <x/> in prop) let __count__ = <y><z/></y>, __parent__;");
tryItOut(";\nconst prop;\n");
tryItOut("M:if(this.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) {__count__ }");
tryItOut("L:switch([('fafafa'.replace(/a/g, function   /x/g  (__iterator__) { ({}); } ))].map(-1)) { default: null;break;  }");
tryItOut("let(__proto__ = <x/>, __noSuchMethod__ = constructor) ((function(){var __proto__, __count__;})());");
tryItOut("/*infloop*/M:for(const __proto__ = (yield 'fafafa'.replace(/a/g, ({}).hasOwnProperty)); (new (function () { return ({}) } )(((<x/>).watch).call( /x/ , <><x><y/></x></>), <y><z/></y>)); ((p={}, (p.z = ((p={}, (p.z = undefined)())))()))) ");
tryItOut("3\n");
tryItOut("try { for(let y in [5,6,7,8]) for(let y in []); } finally { this.zzz.zzz; } while((export *) && 0){const __parent__, __count__ = 033; }");
tryItOut("/*infloop*/M:for(const __iterator__; arguments.prototype = <y><z/></y>; ((uneval((*[ /x/g ]))))) ;");
tryItOut("if([,,z1]) {yield <y><z/></y>;return; } else  if (__count__) export *;");
tryItOut("__count__");
tryItOut("/*for..in*/for(var __proto__ in  /x/g )  { {gc()const prop = -3/0; } } ");
tryItOut("return __noSuchMethod__.constructor = <xxx {__parent__}={yield 033} />.(<y><z/></y>);");
tryItOut("__proto__");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __iterator__\f in ({constructor: prop, function::__parent__: this })) with(prototype){/*for..in*/for(const __noSuchMethod__ = *::* in [z1,,]) export __iterator__; }");
tryItOut("return 5.0000000000000000000000;/*infloop*/for(const ({ prototype: __proto__, __proto__: prototype }) = <><x><y/></x></> .@ prop; [[1]]; constructor) {/a/gi__count__, try {  /x/  } catch(__noSuchMethod__ if (function(){})()) { gc() } finally { prototype; } ; }");
tryItOut("");
tryItOut("throw prop;");
tryItOut("L: {;return; }");
tryItOut("M:if(this.__defineGetter__(\"__parent__\", (1 for (x in [])))) { if (null) {yield window; }} else prop;");
tryItOut("if([15,16,17,18].some(function(y) { yield y; throw window;; yield y; }, @foo)) {(<><x><y/></x></>\t);if([]) { if (<><x><y/></x></>) {__iterator__ = <><x><y/></x></> } else {<y><z/></y>yield; }} } else  if (__iterator__.__count__ setter= [1,2,3,4].slice) {([z1,,]);gc() } else {L:if((window.hasOwnProperty(\"prop\"))) { if (({__count__: __noSuchMethod__ }) >>> (__iterator__.yoyo<x><y/></x>))) {; }} else return; }");
tryItOut("try { gc() } catch(__proto__) { ( /x/ ).__defineSetter__ } finally { yield window; } ");
tryItOut("/*for..in*/M:for(var __parent__ in @foo) {}");
tryItOut("throw 0/0function (__iterator__)undefined");
tryItOut("M:if((({__proto__: 0.1 }))) { if (<><x><y/></x></>.prop) ;} else {gc() }");
tryItOut(";");
tryItOut("switch((( /x/g )(({a2:z2})))++) { case 2: {throw *::*; }break; default: break; case 5: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (@foo)( \"\" , __count__)) {with({prototype: *::* |  /x/ }){return; }/*infloop*/while(1e-81)throw true; }");
tryItOut("if(({ set __iterator__() { with({__iterator__: (<x><y/></x> += *::*.hasOwnProperty(\"prototype\"))})({}).hasOwnProperty }  __noSuchMethod__ })) {export __proto__; } else  if (window) {throw StopIteration; }");
tryItOut("let (prototype = ((p={}, (p.z = new ([1,2,3,4].map)())())), __noSuchMethod__ = 'fafafa'.replace(/a/g, (-0))) { <><x><y/></x></>; }");
tryItOut("return;/*infloop*/do const __count__; while(<zzz>(__proto__)</zzz>);");
tryItOut("{}\n__iterator__ = <x><\ty/></x>;");
tryItOut("try { __count__ = prototype; } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/M:for(const [, , ] in __noSuchMethod__.prop) {return this; }");
tryItOut("if((yield new (null)())) {yield;/*for..in*/for(var __proto__ in false) {[1,2,3,4].slice } } else  if (([[1]] ? undefined : window)) {(undefined); }");
tryItOut("/*infloop*/L:do {/*for..in*//* nogeckoex bug 349964 */L: for  each(var var constructor, __count__ = <><x><y/></x></>; in @foo) \fgc() } while(<><x><y/></x></>.__noSuchMethod__ = (__noSuchMethod__ =  '' ));");
tryItOut("__noSuchMethod__.constructor = __count__;");
tryItOut("/*infloop*/while(((yield (p={}, (p.z = <x/> +=  '' )())))){export *;let __iterator__ = <x><y/></x>, prop;yield 3.141592653589793; }");
tryItOut("L: {export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__count__ in new <x><y/></x>.yoyo(__count__)( \"\" .eval([[]])) instanceof __noSuchMethod__ =  /x/g ) {var __count__ = [z1];return;\n{}\n }");
tryItOut("/*for..in*/for(var prop = (__count__) in  \"\" ) { }\nL:if(__iterator__ = [,,z1] .. 3) {( '' );export prop; } else  if ([false if ([z1,,])]) {{} } else let constructor;");
tryItOut("with({}) with({}) { this.zzz.zzz; } ");
