tryItOut("/*for..in*/for(var prop in ((((new Function(\"\"))).call)(__parent__ = __proto__))){}");
tryItOut("(undefined); const __proto__;");
tryItOut("(1e-81 >>= [,])['__parent__'] = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <></>) {;/*infloop*/for(<><x><y/></x></>;  '' ; @foo) {yield 033 } }");
tryItOut("{throw <x/>;return; }\nlet __parent__;");
tryItOut("let constructor;");
tryItOut("switch(prototype.*::*) { case (new Exception(<y><z/></y>, <><x><y/></x></>)): /*for..in*/for(const __proto__ in __parent__ = x::<y><z/></y>) { } }");
tryItOut("var __proto__ = window, constructor = <x><y/></x>\n{}\n");
tryItOut("/*for..in*/for([__count__, constructor] = *::* % [[]] in @foo) ");
tryItOut("__proto__ = __count__;");
tryItOut("switch(prop.__count__\n) { case (( /x/g .unwatch(\"prop\")) << __proto__): __noSuchMethod__, function::__parent__ = undefined;break; default: /*for..in*/for(const [prop, prototype] = <{__count__}></{__count__}> in this) let constructor = *;break; case 7: case <x><y/></x>.(__count__): continue M;gc()break L;break; case 5: throw #; }");
tryItOut("if(__count__) ;");
tryItOut("{prototype.__parent__ = prototype; }");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) { { yield @foo }  } else /a/gi}");
tryItOut("{__proto__ }");
tryItOut("{throw export *;; }");
tryItOut("{export __noSuchMethod__; }");
tryItOut("/*for..in*/for([(<y><z/></y> %  /x/ )((function  prop () { return this } .watch(\"__parent__\", function (constructor, __count__) { yield undefined } ))), __proto__] = (this.__defineSetter__(\"__parent__\", gc)) ? __parent__ : new (this)() in __proto__.*) {export __noSuchMethod__;return <><x><y/></x></>; }");
tryItOut("/*infloop*/while(#3={a:#3#})");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in  '' ) (new Function(\" '' ;\"))");
tryItOut("L: {/*infloop*/for(const each; (++ '' ); @foo) return;return; }");
tryItOut("/*for..in*/for(let __count__ = (/a/gi) in function::__iterator__ = false) /*for..in*/for(let [__noSuchMethod__, __proto__] = {} in window) export __proto__;");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] =  \"\"  ? <><x><y/></x></> : <x><y/></x>\r.watch(\"prototype.__noSuchMethod__\", Math.sin) in (prop = (-0))) {function ([y]) { }; }");
tryItOut("if(window.valueOf(\"number\")) {if(* & true) <x/> } else {export function::__count__; }");
tryItOut("while((<x><y/></x> *=  /x/g ) && 0){/*for..in*/for( '' .__proto__ in false) {export *; } }");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/for( /x/ \t; [1,,]; <><x><y/></x></>) const __parent__ = undefined;");
tryItOut("<x><y/></x>");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in function::__iterator__.__noSuchMethod__ = __proto__.@foo) /*infloop*/for(__count__ = <x/>; (function ([y]) { })(); false) {gc() }/*infloop*/for(let prototype; window; [[1]]) {{} }");
tryItOut("{with(window){Function }switch(new String(__iterator__)) { case 1: break;  } }");
tryItOut("M:if([15,16,17,18].sort(function ([y]) { }, [1])) { if ((let (__noSuchMethod__, __iterator__) (uneval(3/0)) instanceof __iterator__.(null))) {export *;/*for..in*/for(var __iterator__ in <x/>) return; } else {throw undefined;let __count__ = prop; const __proto__; }}");
tryItOut("if(<><x><y/></x></>) gc() else  if ( /x/ ) (1 for (x in []))");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (__proto__)) {continue ; }");
tryItOut("/*infloop*/M:for( '' ; (__count__ = new ((033).__defineSetter__)(window === *::*)); __parent__ = <><x><y/></x></>) export prototype;");
tryItOut("/*infloop*/M:for(constructor = @foo; this; undefined) {\nyield window; }");
tryItOut("with({}) with({}) { prop, __noSuchMethod__; } ");
tryItOut("if(({ set prototype(__count__, __parent__) {  } , __iterator__: false }) for (__proto__ in  '' ) for (__iterator__ in prototype)) { if ([undefined].filter(window)) {return [z1]; } else {constructor;var __noSuchMethod__ = 033, __count__ = <y><z/></y>; }}");
tryItOut("/*for..in*/for(let prototype in (((1 for (x in [])))((__parent__ =  '' ) ? prototype = #1# : [15,16,17,18].some\f(function(q) { return q; }, [,])))){<><x><y/></x></>;arguments; const each; }");
tryItOut("function  prototype (__noSuchMethod__)[[]]\n");
tryItOut("L:if((window.eval(true.__lookupGetter__(\"prototype\"))) &= (let (true = __proto__) <y><z/></y> if (3))) with(undefined for (__proto__ in prop))return; else  if (({prototype: <y><z/></y>})) /*infloop*/for(const __iterator__ = 3.141592653589793; <x><y/></x>; <x/>) ; else gc()");
tryItOut("with({__proto__: (gc(prototype))})with((3.141592653589793.__lookupSetter__(\"__count__\")))(*::*);");
tryItOut("let(__iterator__ = \fthis.__defineSetter__(\"prototype\", Function) , (new *::*())) ((function(){prop = <><xxx {prototype}={__count__(<><x><y/></x></>.watch(\"__parent__\",  '' )) = prop.__iterator__ setter= Math.pow} /></>;})());");
tryItOut("return");
tryItOut("with(constructor){ }");
tryItOut("yield (function ([y]) { })()__proto__;");
tryItOut("yield\nthrow *");
tryItOut("const __parent__ = <y><z/></y>;\nyield;\n");
tryItOut("/*infloop*/for([11,12,13,14].sort; __count__ = window; <> </>.(((true)(<y><z/></y>, __count__)))) const each\n");
tryItOut("with({}) with({}) { (<x/>); } ");
tryItOut("while((<><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb><\f/>) && 0)export prop;");
tryItOut("{__noSuchMethod__ = undefined, __parent__;; }");
tryItOut("{export __noSuchMethod__;export __parent__; }");
tryItOut("/*for..in*/for(let *.__count__ in <x><y/></x>) {yield;(Math.sin).apply }");
tryItOut("return;{}");
tryItOut("switch(<x><y/></x>) { default: if(__count__) { if (<><x><y\f/></x></>) {case function(id) { return id }: break; default: case <x/>: __parent__ = <y><z/></y>, __noSuchMethod__ = <><x><y/></x></>; } else {throw <><x><y/></x></>; }}break;  }");
tryItOut("if(-0) export *; else {yield this;return window; }");
tryItOut("return;");
tryItOut("/*for..in*/for(__parent__ in (undefined.eval(<x><y/></x>))) function(y) { yield y; break ;; yield y; }");
tryItOut("if((__proto__.eval(this))) {; } else  if ((#3={a:#3#} for each (__count__ in 3/0))) yield; else {yield;export *; }");
tryItOut("with(<y><z/></y>)yield null;");
tryItOut("M:while((undefined) && 0){return;gc() }\nyield;\nlet prototype;\n");
tryItOut("for(let y in []);");
tryItOut("{prop, __proto__; }");
tryItOut("/*infloop*/M:while((__proto__)){with((uneval( '' )))yield; }");
tryItOut("");
tryItOut("let (prototype = *::*.prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x><y/></x>.(this)) {yield this;return <x><y/></x>; } }");
tryItOut("if(*) function::prop = [z1,,]; else  if ((<x/> .@ <y><z/></y> &= (yield <x/>)).hasOwnProperty(\"__iterator__\")) {yield; }");
tryItOut("export __count__;export *;");
tryItOut("while((((-0) .@*:: __proto__++)) && 0)return;");
tryItOut("if((*::* & this)(<y><z/></y>)) export *; else  if (this.__defineSetter__(\"__proto__\", (new ((<x><y/></x> >> true))((__noSuchMethod__ =  /x/g ), @foo)).watch)) {break ; } else {break ;\nconstructor, prototype\nexport prop; }");
tryItOut("/*infloop*/do {throw __parent__; const __iterator__; } while(this.zzz.zzz .@x:: <y><z/></y>);");
tryItOut("/*infloop*/while(4.)yield *; const constructor;");
tryItOut("let(__parent__ = (<x><y/></x>--)) ((function(){return -3/0;})());");
tryItOut("/*infloop*/for(const prototype; __proto__; ((new Function)())) {yield;(this); }");
tryItOut("if(__iterator__.(__count__.__iterator__)) return; else {export __parent__; }");
tryItOut("L:if(prop.constructor = true ? <x><y/></x> : <y><z/></y>) { if (this) (<x/>);} else let (__proto__ = prototype) { (<x><y/></x>); }");
tryItOut("L: {let __noSuchMethod__ = <y><z/></y>;gc() }");
tryItOut("export *;with(this){continue M; }");
tryItOut("const __proto__, prototype; const prototype;");
tryItOut("if(\tthis.__defineGetter__(\"prototype\", new Function) - 0) { if ((yield <x><y/></x> * <y><z/></y>)) {return;let __iterator__ = <><x><y/></x></>, __noSuchMethod__; } else @foo}");
tryItOut("yield; const *['constructor']");
tryItOut("try { __iterator__ = (1 for (x in [])); } finally { return eval(\"var __parent__ = null;\", 0x99);\f } ");
tryItOut("/*infloop*/for(var prop; (({a2:z2}) & __proto__.__defineGetter__(\"prototype\", ({}).__lookupGetter__).@foo); <x><y/></x> == __iterator__\n) ");
tryItOut("/*infloop*/while(eval(\"(new (null)( /x/g , @foo))\", (* ? <><x><y/></x></> : <><x><y/></x></> |= ([11,12,13,14].sort))))(prototype);");
tryItOut("/*for..in*/for((prototype) = ((p={}, (p.z = <><x><y/></x></>)()))['__parent__'] in [11,12,13,14].sort) {true\n }");
tryItOut("with({__parent__: (-0)}){const prop =  /x/g , let = __parent__; }\n");
tryItOut("for(let y in []);");
tryItOut("yield");
tryItOut("/*for..in*/for(constructor in <x/>) /*infloop*/while((<y><z/></y>)(false))");
tryItOut("/*for..in*/for(constructor = <x/>['__parent__'] = (prop for each (__proto__ in this)) in [11,12,13,14].filter) {/*for..in*/for(var [__iterator__, __count__] = <x><y/></x> in  '' ) gc()export constructor; }");
tryItOut("/*for..in*/for((__noSuchMethod__) in ((((yield this)).__defineSetter__)((p={}, (p.z = <x><y/></x>\n)()))))(1e+81);");
tryItOut("let (__noSuchMethod__ = this, __proto__) { throw <x><y/></x>; }");
tryItOut("return true");
tryItOut("{/*infloop*/M:for(const [__count__, ] = (<><x><y/></x></> < <><x><y/></x></>); #1=[({})];  \"\" ) {{}return true; }export *; }");
tryItOut("export let;");
tryItOut("/*infloop*/for(~constructor; (1e+81 :: <><x><y/></x></>); new 1.2e3( \"\" )) { }");
tryItOut("/*for..in*/for(let prop.__iterator__ in window) export prop;");
tryItOut("L:if(eval) break ; else {return [1];return; }");
tryItOut("L: ");
tryItOut("return -0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in __iterator__) {do {;yield; } while((#1#) && 0);<employee id=\"1\"><name>Joe</name><age>20</age></employee> }");
tryItOut("if(this.__lookupSetter__(\"prop\") .. (* * [1])) return; else  if ((x::__parent__ = )) L:while(( \"\" .__lookupGetter__(\"__parent__\")) && 0)continue M; else ({}).__lookupGetter__");
tryItOut("/*for..in*/for(let x::prop = <y><z/></y> in this) return;");
tryItOut("/*infloop*/do {let(__proto__ = <x><y/></x>) ((function(){;})());if(<x><y/></x>) {{} } else  if ((yield 3/0)) yield this; else {gc()export *; } } while(<><!--yy--></>);");
tryItOut("");
tryItOut("/*infloop*/for(Array(); prop = #1=[#1#] * prop.propertyIsEnumerable(\"__proto__\"); __parent__ = false = prototype) if((yield ({a2:z2}))) {export *; } else  if (<x><y/></x>.throw(<x/>)) {{} } else {; }");
tryItOut("if((-=-0 /= *::*)) {yield  /x/ ; } else  if ([[]]) {prototype = <y><z/></y>, __count__ = <y><z/></y>; } else return\ngc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([__count__.__lookupSetter__(\"__iterator__\")].prototype in RegExp(*)) {{let try { return __noSuchMethod__; } finally { yield; } ;yield  \"\" ; } }");
tryItOut("/*infloop*/while(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prop = <x><y/></x>) != )/*infloop*/while(@foo(<><x><y/></x></>, <><x><y/></x></>))__noSuchMethod__");
tryItOut("yield @foo;");
tryItOut("({a2:z2})\n");
tryItOut("M:if((this.__defineSetter__(\"__parent__\", function(y) { yield y; switch(null) { default: <x><y/></x> }; yield y; }) .@x:: (constructor = 4.))) {switch(<x><y/></x>.(this)) { case __parent__ = window:  } }");
tryItOut("M:if(prototype = function ([y]) { }) {if(@foo) {window;prop = <x><y/></x>; } else {yield <><x><y/></x></>; } }");
tryItOut("if((yyy['__count__'] = new ('fafafa'.replace(/a/g, ( '' ).watch))())) { if ((RangeError())) __parent__, constructor; else /*infloop*/for(let __count__ = ((p={}, (p.z = this)())); .*; new (undefined).watch(<x/>\n)) const __iterator__;}");
tryItOut("yield (gc(\t));");
tryItOut("L:with({__noSuchMethod__: <y><z/></y>}){if(<x><y/></x>) getter, __count__; else  if ((function ([y]) { })()) {throw <x/>; }\n; const __parent__;export __iterator__; }");
tryItOut("M:if(__count__) {return undefined; }\n");
tryItOut("/*infloop*/for(__noSuchMethod__.__iterator__|=__iterator__.prop; (yield eval(\"<x><y/></x>\", *::*));  /x/  , 3.141592653589793 <<= new Date(undefined)) {gc(){} }if([__count__, __iterator__, __proto__, , ] = {}.watch(\"prop\", function (prototype)this)) {return undefined; } else  if ((( '' )(({a2:z2})) = (p={}, (p.z = [,,z1])()) , 'fafafa'.replace(/a/g, Math.sin))) if(<x><y/></x>) ; else {let function::constructor, __iterator__; }");
tryItOut("/*infloop*/do {L:if(false) { if (null) var prototype, __noSuchMethod__ = *; else {yield; }}constructor; } while(yield [15,16,17,18].sort(this,  /x/g ));");
tryItOut("if(<y><z/></y>) {} else  if (({prototype: prototype, __parent__: this })) ");
tryItOut("");
tryItOut("/*infloop*/for(0/0 .@*:: <x/>; (p={}, (p.z = <x><y/></x>)()); (__parent__.(__iterator__))) return;");
tryItOut("/*for..in*/for(constructor in ((<x><y/></x>)(<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")))){return; }");
tryItOut("{}\n");
tryItOut("let __iterator__, __noSuchMethod__ = #3={a:#3#}\n");
tryItOut("while(((-1)) && 0){throw <><x><y/></x></>;__parent__ }/*for..in*/M:for(let __noSuchMethod__ in [z1,,]) {let prototype, <x><y/></x>; }");
tryItOut("M:if(false.__iterator__) {each; } else {M:switch([[]]) { case @foo: (*::*);break;  } }");
tryItOut("/*infloop*/for(this ?  /x/  :  ''  % [*].map(({}).__lookupGetter__); window; ) {export *; }");
tryItOut("/*for..in*/for(let __iterator__ = <x><y/></x> ? function ([y]) { } :  /x/g  in new (#1=[#1#])(undefined, <y><z/></y>) :: <x><y/></x> instanceof 1e81) return (eval(\"<><x><y/></x></>\",  '' ));");
tryItOut("let (constructor, prop = (uneval(new (Function)()))) { {while((<><x><y/></x></>) && 0){break ; } } }");
tryItOut("{}\nyield *;");
tryItOut("if(this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__) != [11,12,13,14].sort[undefined / this]) { if (--__noSuchMethod__ = __iterator__ < [z1,,]) ([]);} else ");
tryItOut("for(let y in []);");
tryItOut("gc()");
tryItOut("with((1e-81).yoyo( \"\" ))if(__parent__ = function ([y]) { }) return null");
tryItOut("if(function(id) { return id }) {(arguments); } else var __iterator__, __noSuchMethod__ = <x><y/></x>;");
tryItOut("with({}) return;");
tryItOut("L:if((__parent__.prototype getter= Function.propertyIsEnumerable(\"function::__parent__\"))) { if (<><>constructor</></>) {; } else throw @foo;}");
tryItOut("if((( /x/  + @foo).__noSuchMethod__)) return <x><y/></x>;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in ((function  __parent__ (({ __parent__: __count__ }))(this.zzz.zzz))((__parent__ = prop)[(new function  prototype () { return  /x/g  } ().__count__ = window & <x><y/></x>)])))if(( \"\" .__lookupSetter__(\"prototype\"))) {if( '' ) { if (this) {(undefined); }} else throw __proto__; } else {export prop; }\r");
tryItOut("let (prototype) { yield <x><y/></x>; }");
tryItOut("");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *)  }");
tryItOut("new Function(@foo).__parent__ = __parent__;");
tryItOut("try { throw (({__iterator__: null})); } finally { throw StopIteration; } ");
tryItOut("L: { }");
tryItOut("gc()");
tryItOut("M:while(( /x/g ) && 0){with(*::*)__parent__/*for..in*/for(const function::constructor = ()(3/0,  \"\" \n) in  \"\" ) throw 1e4; }\n");
tryItOut("L: {}");
tryItOut("/*infloop*/for(var ({ __iterator__: __count__, __proto__: prototype }) = (__iterator__.__count__); __count__.prop; \n /x/ ) {export *;export __noSuchMethod__; }");
tryItOut("with((({}).hasOwnProperty()))(true if (false));");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("throw StopIteration;");
tryItOut("L:if((prototype = <y><z/></y>, __noSuchMethod__ = <><x><y/></x></> >= <y><z/></y>++)) {if(-1) gc()/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in 1.2e3) {} }");
tryItOut("let(constructor = {} for each (__iterator__ in window), constructor = (__proto__ = undefined)) ((function(){for(let y in [5,6,7,8]) let(prop, prop = window) { let prototype;})());");
tryItOut("/*infloop*/for(var __parent__ = (__proto__.__proto__.watch(\" { ; } \", ('fafafa'.replace(/a/g, (1 for (x in [])))).__defineSetter__)); this.__defineGetter__(\"__count__\", __parent__); __noSuchMethod__) L:with(window >> <><x><y/></x></>)with(prop){var __proto__ = prop; }");
tryItOut("L: {export *;; }");
tryItOut("let (prototype, prop) { yield <><x><y/></x></>; }");
tryItOut("{continue M;gc() }");
tryItOut("L:if(([[]] = true).prototype.__defineGetter__(\"prototype\", function  prototype () { yield [[1]].unwatch(\"__count__\") } )) {/*infloop*/while(yield this)/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in function(id) { return id }) const __noSuchMethod__ =  /x/ , prototype = <><x><y/></x></>; } else  if (([<x/>])) /*infloop*/for(__count__.hasOwnProperty(\"constructor\"); (p={}, (p.z = __proto__)()); false) {return window; }");
tryItOut("return;");
tryItOut("while((++<><x><y/></x></>) && 0)/*for..in*/for(var [__parent__, constructor] = <x><y/></x> in *) {prototype, constructor }function  __iterator__ () { yield <x/> } ");
tryItOut("/*infloop*/while((prototype.__noSuchMethod__) >>>=typeof -3/0){for(let y in [5,6,7,8]) with({}) (5.0000000000000000000000);for(let y in [5,6,7,8]) throw __iterator__; }");
tryItOut("try { gc() } finally { var __noSuchMethod__ = @foo, __iterator__ = <x><y/></x>; } \n");
tryItOut("yield ({prop:  /x/ (__parent__)});");
tryItOut("if((*::* == [z1])) {gc()export __iterator__; } else export __noSuchMethod__;");
tryItOut("/*infloop*/L:for(var __iterator__; <><xxx>{prototype}</xxx>//h\n</> if (this); (prototype+=delete __iterator__ *= ( '' .__defineSetter__(\"__count__\", Math.pow)))) {/*infloop*/for(const prototype = __proto__;  \"\" ; false) {gc() }{} }");
tryItOut("with(function(y) { yield y; {}; yield y; }){export x::__iterator__;with(<x/>){return;export *; } }");
tryItOut("let (__iterator__ = this) { (@foo); } const __noSuchMethod__;");
tryItOut("/*for..in*/for([__proto__, __iterator__] = (<y><z/></y> && __parent__) in undefined(<><x><y/></x></>.__count__)) {L: return; }");
tryItOut("/*for..in*/for(let __count__ in  '' ) {gc()export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (*.__noSuchMethod__)) {true; }");
tryItOut("M:switch(__parent__ = (yield <x/>)) { case 6:  }");
tryItOut("L:switch(((-0).valueOf(\"number\"))) { case 5: let ([], ({ __proto__: __noSuchMethod__ }) = (function::__iterator__.__proto__.propertyIsEnumerable(\"__parent__\"))) { continue M; }break; case 8: break; case new ([11,12,13,14].map)(): (__parent__).__defineSetter__\ncase 7: break; default: L:if( /x/g \n += [15,16,17,18].some(function(y) { yield y; prototype; yield y; }, <><x><y/></x></>).__count__) ({}).__lookupGetter__yield;break; case 1.2e3.__proto__: continue ;break; prop = <y><z/></y> >=  \"\"  }");
tryItOut("/*infloop*/do {constructor, __parent__; } while((__count__.__parent__));");
tryItOut("return;");
tryItOut("/*for..in*/for(__noSuchMethod__ = ([<y><z/></y> .@ 033]['prototype'] = false.__noSuchMethod__) in __iterator__) /*infloop*/for(__parent__ = <y><z/></y> |= false++; __count__.__proto__ = <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", function (__count__, __proto__/*\n*/) { prototype = constructor; } ); (__iterator__.prototype)) let(({ __noSuchMethod__: __proto__ }), constructor = null) ((function(){yield;})());");
tryItOut("if(<ccc:ddd><!--yy--></ccc:ddd>.(__parent__.__proto__ getter= <x><y/></x>)) { if (((-1))) gc()} else with({__iterator__: <x><y/></x>}){export *; }");
tryItOut("return 0/0;");
tryItOut("while((__proto__) && 0)/*infloop*/for(let __proto__; false || __iterator__; ([11,12,13,14].sort)) let ( = (new ([1,2,3,4].map)(false, 0.1))) { (eval).call }");
tryItOut("if(true) { if ((this ? constructor = __noSuchMethod__ = constructor : __count__|=<x/>)) ; else {export prop;{const __iterator__;return constructor; } }}");
tryItOut("L:switch((\f'fafafa'.replace(/a/g, eval)) @ *) { case 3: break;  }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(const __parent__; eval(\"this;\", __noSuchMethod__); eval(\"L:with(*::*){export prototype;const prototype, __proto__ = <y><z/></y>; }\", arguments.prototype = <x/>)) {{let constructor;continue ; } }\n");
tryItOut("{var __count__, prototype; }");
tryItOut("do return; while(((-0) == <y><z/></y>) && 0);");
tryItOut("{}\n");
tryItOut("with({__iterator__: eval}){return  \"\" ;yield @foo.eval(<><x><y/></x></>); }");
tryItOut("this.zzz.zzz;");
tryItOut("if( \"\"  @ <x/>)  else  if (<x><y/></x>.constructor) yield  '' ; else {this } const prototype;");
tryItOut("M:if( for each (__count__ in <x/>) for ((__parent__) in #1=[#1#]) for (constructor in prototype)) { if (--*)  else {;__iterator__, __count__; }}");
tryItOut("with({prototype: prototype = <><x><y/></x></>}){gc()function(y) { yield y; gc(); yield y; }\f }");
tryItOut("with((<y><z/></y>)){if((({__parent__: prototype }))) { if (__iterator__.throw(*)) gc() else {export *; }} }");
tryItOut("for(let y in [5,6,7,8]) return <!--yy-->.((((({prop: window })) if (<><x><y/></x></>))));");
tryItOut("L: {/*for..in*/for(__iterator__( \"\" ) in (((1 for (x in [])))(({ prototype: __iterator__, prototype: prop = <x><y/></x> }) = constructor))){let __iterator__, __iterator__ = false;const prop; }return @foo }");
tryItOut("if( \"\"  :: <x/>) return; else  if (prop) var __parent__ = <x><y/></x>, __proto__ = [,]; const prototype;");
tryItOut("M:while((~(1e81)(<><x><y/></x></>)) && 0){; }");
tryItOut("{if(__iterator__) { if ([z1]) {__iterator__throw constructor; } else {evalreturn (new Function(\"return;\")); }} }");
