tryItOut("L:switch((((function () { yield *\t } ).apply).call( '' , ))) { default:  }");
tryItOut("L: return;");
tryItOut("yield ({ __iterator__: __parent__ }) = @foo.__defineGetter__(\"__noSuchMethod__\", #3={a:#3#});");
tryItOut("/*for..in*/for(var [__proto__, __proto__] = __count__ = constructor = false in __noSuchMethod__.(@foo)) {export __count__; }");
tryItOut("if((void undefined)) return *; const prop; else  if ((((-0)[*].throw(true)) !== (let (__parent__ = <><x>\f<y/></x></>, prop = <x><y/></x>) null))) e else {yield  /x/g ; }");
tryItOut("L:if(this.__defineSetter__(\"__proto__\", Math.sin)) const __noSuchMethod__, prop = constructor; else { }");
tryItOut("while((({ prop: __noSuchMethod__, __parent__: __count__ }) = <><x><y/></x></>) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in  \"\" ) /*infloop*/while(<x><y/></x>)export __iterator__; }");
tryItOut("/*infloop*/for(__count__; ((function () { return this } ).apply)([,,], <><x><y/></x></>); [] = (void *)(new (__count__)(window, <x/>),  \"\" ), __noSuchMethod__ = [<><x><y/></x></>].__defineSetter__(\"__proto__\", gc)) {throw <><x><y/></x></>; }");
tryItOut("if(yield <><x><y/></x></> = *::*) { if ((({}).__lookupGetter__((true + prop.__defineGetter__(\"__noSuchMethod__\", (undefined).__defineSetter__) @ (uneval(-3/0)) === __parent__|=<><x><y/></x></>)))) {let (function::prototype = 1e-81, __proto__) { export *; }let (__iterator__) { export prototype; } } else {/*infloop*/while( /* Comment */true){ }if((p={}, (p.z = __noSuchMethod__)())) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x/>) <bbb xmlns:ccc=\"([1,2,3,4].map).call(\n[[1]] instanceof undefined, )\"><ccc:eee></ccc:eee></bbb> } else  if (__proto__ = new (<x/>)()) export *; }}");
tryItOut("while(((constructor = @foo;.yoyo((Array(*::*,  /x/g ))))) && 0){(3/0); }");
tryItOut("default: M:if(constructor) export *; else {yield; }break; yield null;break; yield prop;break; ");
tryItOut("return ((uneval(function ([y]) { })));");
tryItOut("gc()\nbreak//h\n M; const prop;\nconstructor, __iterator__ = <y><z/></y>;");
tryItOut("yield; const prop;");
tryItOut("var prop = (function ([y]) { })();");
tryItOut("yield;");
tryItOut("for(let y in [5,6,7,8]) \fthrow this;");
tryItOut("if(eval(\"__proto__\", null)) { if (return;.hasOwnProperty(\"__count__\")) {export prop;\n{}\n }} else let (constructor = [[1]], __iterator__) {  }");
tryItOut("L: (<x><y/></x>);");
tryItOut(" if ( /x/g  for each (prop in true))\n");
tryItOut("let (__proto__) { {} }");
tryItOut("/*for..in*/for(let __count__ = [15,16,17,18].some((1 for (x in [])),  \"\" ) in undefined) throw __noSuchMethod__;");
tryItOut("const __noSuchMethod__ = false;");
tryItOut("for(let y in []);");
tryItOut("if(\nconstructor) {var __noSuchMethod__, __noSuchMethod__ = -0;export *; }");
tryItOut("if(this.zzz.zzz;) { if (({prop: *::*.__lookupSetter__(\"__proto__\")})) {gc()( '' );\nexport *;\n }} else {throw undefined\n }");
tryItOut("L:do {var constructor = <><x><y/></x></>, prototype = <y><z/></y>;return; } while((this) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x><y/></x>) {({}).hasOwnProperty }");
tryItOut("while((*.yoyo(<x><y/></x>).__count__ = <><x><y/></x></>++ +=  /x/  /= false >> new <x/> >>>=[1]() !== *[<x><y/></x>]) && 0){return (constructor = export __proto__;); }");
tryItOut("/*for..in*/for(let [prop, __proto__] = <bbb xmlns:ccc=\" /x/g .propertyIsEnumerable(\"prototype\")\"><ccc:eee></ccc:eee></bbb> in (yield <><x><y/></x></>)) export *;");
tryItOut("if(__iterator__ >= *) <x><y/><\f/x> else  if ((~<><x><y/></x></>)) {export ; }");
tryItOut("let (__proto__) { gc(); }");
tryItOut("/*infloop*/L:for(\rlet function::__proto__; <y><z/></y> <<= <y><z/></y>; (<><x><y/></x></>)()) {/*for..in*/M:for([__proto__, __noSuchMethod__] = <x/> in this) {const prop =  /x/g , __iterator__;@foo } }");
tryItOut("/*infloop*/for(const prop; @foo == true; (*::*[3.__defineGetter__(\"__parent__\", eval)])) /*infloop*/for(let ({ __noSuchMethod__: __count__, __iterator__: __noSuchMethod__ }) = null; 'fafafa'.replace(/a/g, [1,2,3,4].slice); *::*.unwatch(\"prop\")) {;throw [z1]; }");
tryItOut("{}");
tryItOut("{/*for..in*/L:for(const prop\t in ((this.__defineGetter__(\"prop\", null))(<x><y/></x>.((-0)))))yield arguments;{[,,z1]; } }");
tryItOut("with({}) prop = __iterator__;");
tryItOut("yield new (function  constructor () { yield <><x><y/></x></> } )(window, this);");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = eval(\"<y><z/></y>\",  '' ) in <y><z/></y>) {/*for..in*/for(__iterator__ =  ''  in window) {export __parent__;<x><y/></x>; }yield constructor, __iterator__; }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("with({}) { with({}) let prototype = this, __proto__; } ");
tryItOut("__parent__");
tryItOut("var __count__ = <><x><y/></x></>;\nthrow ({});\n");
tryItOut("/*infloop*/for(const prop; (<x><y/></x> >= new <><x><y/></x></>(<x><y/></x>,  /x/ )); (((<x/>.isPrototypeOf(<x><y/><\f/x>)), undefined))) {let __proto__ = this;function (prop, prototype) { yield  /x/  }  }");
tryItOut("M:with\f(function () { {} } )break ;");
tryItOut("yield (\nnew (new Function(\"throw function ([y]) { };\"))(<y><z/></y>, null)\r);");
tryItOut("M:do with({prop: []})if(<y><z/></y>) {var __iterator__ = <x><y/></x>;yield; } else (__parent__); while(((~(this() = -(1e81.unwatch(\"prop\"))))) && 0);");
tryItOut("function  __proto__ () { return <x><y/></x> } ");
tryItOut("prototype, constructor = true");
tryItOut("{export __noSuchMethod__;<x/>;\n(function  <x><y/></x> (__count__, __count__) { return <><x><y/></x></> } ).call\n }");
tryItOut("let(__noSuchMethod__ = [[1]] !== window) ((function(){return;})());");
tryItOut("try { let(constructor) ((function(){__noSuchMethod__ = __iterator__;})()); } catch(prop if __noSuchMethod__.(this)) { export __iterator__; } ");
tryItOut("return [z1];");
tryItOut("/*infloop*/while((<x><y/></x>--)){ { yield (({prototype setter: /a/gi })) } yield; }");
tryItOut("/*for..in*/for(const __iterator__ in this.__defineSetter__(\"__count__\", (function ([y]) { }).watch)) <y><z/></y>");
tryItOut("if(<xxx {constructor}={<><x><y/></x>prototype, window </>} />) { if (yield @foo) return <y><z/></y>; else (__noSuchMethod__);}");
tryItOut("if(1e-81) while((__count__ :: *) && 0){}");
tryItOut("/*infloop*/for(const [, /*\n*/[], ({ __proto__: prototype, __iterator__: [, , , __proto__, ] })] = (<><x><y/></x></> &= function ([y]) { } if (<><x><y/></x></>)); (p={}, (p.z = __count__ = this)()).isPrototypeOf( '' ); #1=(<x><y/></x>.( '' ))) {{} }");
tryItOut("if(<y><z/></y>) return; else yield  /x/ ;");
tryItOut("export __proto__;/*infloop*/L:while(undefined)export prop;");
tryItOut("with(<y><z/></y> - function  constructor () { yield *; } \n){let __iterator__;yield; }");
tryItOut("/*infloop*/for(-__count__.(prototype); (constructor.__parent__ getter= [1,2,3,4].slice instanceof (<y><z/></y>.eval( /x/ ))); new (-1)(function::__parent__, false)) {/*infloop*/__proto__(undefined) }");
tryItOut("throw ({}); const prototype;");
tryItOut("with((new Date()))yield ({a1:1});");
tryItOut("/*for..in*/for(this['__parent__'] in [z1,,]) {({}).hasOwnPropertyM:with((undefined === ({}))){throw <y><z/></y>; } }");
tryItOut("let (__count__) { {__count__, constructor = <><x><y/></x></>;gc() } }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const function::__iterator__ = (({ prop: __noSuchMethod__, __proto__: __proto__ }) = ({ __proto__: constructor, __proto__: __noSuchMethod__ })) in prop = @foo) {switch(true.yoyo(@foo)) { case 2: return;break; yield;break; case (([1,2,3,4].slice).call)(@foo): break; case __count__ = true: return 1e+81;break; /*infloop*/M:for(const ({ __noSuchMethod__: __parent__ }) = <y><z/></y>; (__proto__)(<><x><y/></x></>, undefined); *::*( /x/ , function ([y]) { })) throw true; } }");
tryItOut("{(5.0000000000000000000000);@foo; }");
tryItOut("L: export *;");
tryItOut("throw StopIteration;");
tryItOut("let(__parent__ = 0/0.unwatch(\"__count__\")) { (.2);");
tryItOut("L:with({__parent__: [, ({ __count__: [prop]//h\n, prop: ({ __noSuchMethod__: __iterator__ }) }), [({ constructor: __noSuchMethod__, __noSuchMethod__: constructor }), ({ prototype: __count__, prototype: __parent__ })], ] = ({ prop: function::prototype, __noSuchMethod__: ({ __parent__: try { const __noSuchMethod__ = <><x><y/></x></>, constructor = [z1,,]; } finally {  }  }) })}){export __proto__;yield; }");
tryItOut("/*for..in*/M:for(const __count__ in (prop.(null))) {export prototype;prototype, __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in undefined) {try { function  __iterator__ (prototype) { export __proto__; }  } catch(prototype) { yield  /x/ ;\t }  }");
tryItOut("/*infloop*/do L:if(<x/>) {return;yield; } else  if (\nthis) {yield *::*; } while([* if (constructor = <y><z/></y>)]);");
tryItOut("if(__count__.__count__ = #3={a:#3#}) continue M; else  if ((each >>> [,,]))  /x/  else {evalprop, __parent__; }");
tryItOut("switch(delete window) { default:  }");
tryItOut("{}\nreturn __parent__;");
tryItOut("let __parent__ = arguments, __proto__;");
tryItOut("let(__count__ = 3, prop = undefined) ((function(){return <><x><y/></x></>;})());");
tryItOut("/*infloop*/for((__iterator__)(@foo) = <><x><y/></x></>; prototype = prototype.__defineGetter__(\"prototype\", 'haha'.split); (([1,,]++)\n)) /*for..in*/for(<><x><y/></x></>['__iterator__'] in (([1,2,3,4].map)(this.__defineGetter__(\"__parent__\", function  __iterator__ (prototype, __parent__) { return  /x/  } )))){(undefined); }");
tryItOut("L:switch(({ __iterator__: [[, ]], constructor: [] }) = __count__) { default: throw StopIteration;break; break;  }");
tryItOut("/*infloop*/while(new prototype(@foo)){[1,2,3,4].slice }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (__count__ = *::*.eval(((this).__defineSetter__).call(-3/0, <x/>)\t))) {with(__count__) }");
tryItOut("if((new RegExp(try { var __parent__ = false; } catch(prototype if @foo) { ; } catch(__parent__) { return __parent__; } finally { return; } , <><x><y/></x></>))) {yield -0; } else  if (<><ccc:ddd><x><y/></x> === <><x><y/></x></></ccc:ddd></>) throw __count__; else continue ");
tryItOut("/*infloop*/do return ([11,12,13,14].map); while(((window)[true]));");
tryItOut("/*infloop*/for(__proto__; 4..yoyo(*).__defineSetter__(\"constructor\", 1e81); <{prototype}>yyy</{prototype}> + new Array(__noSuchMethod__ = \t<><x><y/></x></>)) {break M;/*for..in*/for(let [__parent__, constructor] = <x/> in this) var <x/>, __iterator__ = this; }");
tryItOut("{}\n");
tryItOut("let(__parent__, __proto__) ((function(){throw __noSuchMethod__;})());");
tryItOut("return <x><y/></x>");
tryItOut("export __count__;");
tryItOut("if(((true &= 0x99))) { }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("with({constructor: (uneval( /* Comment */<><x><y/></x></>.yoyo(#3={a:#3#})))})Math.sin");
tryItOut("with({__iterator__: window}){var __noSuchMethod__ = <y><z/></y>;(*); }");
tryItOut("with({}) { function::prototype(prototype = <y><z/></y>) = __proto__; } ");
tryItOut("/*for..in*/for((__proto__) in ((new Function)(((function ([y]) { })())))){gc() }");
tryItOut("/*for..in*/L:for(const [prototype, constructor] = ([1,2,3,4].map).call((\n(yield 0/0).prototype = <x><y/></x>.( \"\" )).__count__ = +(p={}, (p.z = <x/>)()), ) in (--)()) eachdelete;");
tryItOut("{L:while((5.0000000000000000000000) && 0){throw *;[1,2,3,4].map } }");
tryItOut("M:if(undefined) let __count__; else {return -1; }");
tryItOut("/*infloop*/\tL:for(let __iterator__; __noSuchMethod__; undefined) function::__proto__;");
tryItOut("with(@foo)throw <x><y/></x>;");
tryItOut("{}");
tryItOut("if() export *; else  if (window) gc()");
tryItOut("if(null) {{function(id) { return id };let prop; }yield false; } else /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) {yield; }");
tryItOut("/*for..in*/M:for((__iterator__.constructor) in (false in 1.2e3)) ((__proto__: *::*).call).apply");
tryItOut("let __count__ = prop;\nwhile((-0) && 0)yield;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__count__) in >) {([z1]);const __count__; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; <y><z/></y>; ((yield <x><y/></x>.(null)))) throw [1];");
tryItOut("L:with({__noSuchMethod__: ([ /x/ ])}){return undefined;yield __parent__; }<><x><y/></x></>;");
tryItOut("yield let (constructor) 3/0;");
tryItOut("{};");
tryItOut("constructor setter:  '' ");
tryItOut("/*infloop*/for(let [[1]] :: <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\"); <x/>.hasOwnProperty(\"__noSuchMethod__\"); ((\n<y><z/></y>).__lookupGetter__(\"prop\"))) {if( '' .*) { if (new Number()) { } else [,,]}if( '' ) {return; } }");
tryItOut("if(({constructor: new Boolean() })) /*infloop*/for(const __count__ = null; window; *) {[,,z1]{} } const __parent__; else  if (({ __parent__: prototype }) =  /x/g --) false;");
tryItOut("/*infloop*/for(let ({ __count__: __count__, __noSuchMethod__: __proto__ }) = Boolean(<><x><y/></x></>); prototype = 0x99; [15,16,17,18].map(Math.sin, false)) ");
tryItOut("let (({ function::__noSuchMethod__: ({ __iterator__: ({ __count__: prop, __count__: ({ __noSuchMethod__: <x><y/></x> }) }) }) })\t = *) { /*infloop*/for(__count__; *::*;  /x/g ) yield 1.3; }");
tryItOut("/*for..in*/for(prop in (yield  for (prop in (<x><y/></x>.__count__)) if (__noSuchMethod__))) {yield <><x><y/></x></>; }");
tryItOut("switch(this &= [1]) { case 6: return 033; }Math.powexport *;\n\n");
tryItOut("L:while((prop = (<><x><y/><\t/x></>.hasOwnProperty(\"prototype\"))) && 0){/*infloop*/for(<x><y/></x>; this; (function ([y]) { })()) Math.sinreturn <><x><y/></x></>\n; }");
tryItOut("<x><y/></x>; const __proto__");
tryItOut("return  /* Comment */ '' ;");
tryItOut("<x><y/></x>.(false);(<x><y/></x>)( '' ), [, , prop, [__parent__, , , ]] = (delete null) == <y><z/></y>.eval(<y><z/></y>);");
tryItOut("__proto__, [1,2,3,4].map;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ prototype: __count__ }) }) = (-1); (prop = <><x><y/></x></>).isPrototypeOf(function  __noSuchMethod__ (__count__, __noSuchMethod__)\f { return  /x/g  } ); -0.yoyo(@foo)) <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <y><z/></y>) {{}{} }");
tryItOut("while((<x/>.__defineGetter__(\"constructor\", /a/gi)) && 0){return @foo;; }");
tryItOut(";\n/*infloop*/while(new  \"\" ())([z1,,]).apply\n");
tryItOut("/*infloop*/for(let [] = ({__count__ setter: ({}).__lookupGetter__, gc }); null; ()) {with({}) var __parent__, __proto__; }");
tryItOut("let __iterator__ = [z1], __proto__;\nexport *;\n");
tryItOut("if((({ __noSuchMethod__: __iterator__, constructor: prototype }) =  '' .@*) .. (false ? 5.0000000000000000000000 : <y><z/></y>)) {L: <x><y/></x>; }");
tryItOut("/*for..in*/L:for(const Error((-0)) in ((function () { ; } )(constructor.constructor))){\nprototype = 1.3; }");
tryItOut("{M:if((this.zzz.zzz)) { if (<bbb xmlns=\"#1=[#1#]\">yyy</bbb>) gc() else gc()} }");
tryItOut("var __count__ = <y><z/></y>, __parent__;L:while((null) && 0){{} }");
tryItOut("return setter;\f const __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("{ continue  }");
tryItOut("/*infloop*/for(var constructor;  ; ((yield <x><y/></x>.__defineGetter__(\"__parent__\", function  constructor (__count__, __iterator__)0.1).yoyo(<x><y/></x>.__count__ = 5.0000000000000000000000)))) {break ; }");
tryItOut("L:if(<> </>) prop; else  if (-1) {var __parent__; }");
tryItOut("L:if(<{__count__}><ccc:ddd> </ccc:ddd></{__count__}>.([11,12,13,14].filter)) {return;export constructor; } else export *;");
tryItOut("for(let y in [5,6,7,8]) let __noSuchMethod__ = window;");
tryItOut("with(* <= <y><z/></y>)with({__noSuchMethod__: 'fafafa'.replace(/a/g, gc) @ ({ set prototype() { yield * }  })})var __proto__;");
tryItOut("Math.sin{}");
tryItOut("/*infloop*/while(function (__parent__) { yield <x/> } (false))yield __count__;");
tryItOut("L: {gc; }");
tryItOut("if(__proto__ = __count__) if((undefined.__defineGetter__(\"prop\", function  constructor (constructor, __parent__) { yield window } ))) {__proto__, prototype = __iterator__; } else {gc() } else *::*;");
tryItOut("with({__count__: prototype|=*::*})if( /x/g ) { if (<x><y/></x>) {return;(function  __proto__ (__count__, prototype) { return <y><z/></y> } ); }} else {window; }");
tryItOut("try { throw StopIteration; } catch(constructor if (function(){for(let y in []);})()) { __noSuchMethod__ = prop; } ");
tryItOut(" '' ;");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/while(*::*)throw *;");
tryItOut("if(@foo) ; else ( '' );");
tryItOut("");
tryItOut("/*infloop*/L:for(let __iterator__; __proto__ = <><x><y/></x></>; (( /x/g .throw(4.))((window)()))) let __count__;");
tryItOut("M:if(true) Math.pow else {this; }");
tryItOut("/*for..in*/for(var false in ((\nfunction () { return ('fafafa'.replace(/a/g, [1,2,3,4].slice)) } )(get =  /x/g )))let __iterator__;");
tryItOut("if(#3={a:#3#}) {return; } else  if (__iterator__)  else {yield @foo;break ; }");
tryItOut("M:do M:if(<x><y/></x>) {;; } else  if (*::*) (<><x><y/></x></>); else export *; while((new Iterator(__iterator__ = arguments, (yield <><x><y/></x></>))) && 0);");
tryItOut("/*infloop*/for( /x/g ; <><bbb xmlns:ccc=\"(new (this)( /x/ ).prototype)\"><ccc:eee></ccc:eee></bbb></>; (constructor = 1e+81)) {L: {return 1e4;gc() } }");
tryItOut("{continue M;yield; }");
tryItOut("L: {return 1e81; }");
tryItOut("/*infloop*/while(<x/>){return <><x><y/></x></>;<><x><y/></x></>; }");
tryItOut("return (Exception());");
tryItOut("if(({__parent__: __iterator__ / <x><y/></x>,  set prototype  () { return (__iterator__ = <x/>) }  })) { if (@foo * window.__lookupGetter__(\"prop\")) {while((*::*) && 0) } else throw <><x><y/></x></>;}");
tryItOut("return (-0);");
tryItOut("L: {yield <y><z/></y>;{export prototype; }\n }");
tryItOut("(new Function(\"{}\"))");
tryItOut("while(([]) && 0){gc()return; }");
tryItOut("switch(\rgc) { case arguments: yield [,];break;  }");
tryItOut("__iterator__, __noSuchMethod__ = #1=[#1#];\nyield <x><y/></x>;\n");
tryItOut("(<x><y/></x>);[1,2,3,4].map");
tryItOut("L:with(#3={a:#3#}){; }\n");
tryItOut("L: yield;");
tryItOut("with({function::yield: prop = function ([y]) { }})");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((\f__iterator__ =  '' )((__parent__ = <x/> * ( \"\" .isPrototypeOf(null)))) in (([1,2,3,4].slice).apply).call(\f<bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>, )) export *;");
tryItOut("if(Math.pow(__noSuchMethod__, <x><y/></x>)) \f{ if ( \"\" .isPrototypeOf(undefined)) {export *; }} else /*infloop*/for(0/0; *::*; 1e+81) {yield;{} }");
tryItOut("with({__proto__: 3})function(y) { yield y; gc(); yield y; }");
tryItOut("if(function  __parent__ (__count__, __iterator__) { yield <x><y/></x> } (window, [,,])) { if (()) let __count__ = <x><y/></x>, __noSuchMethod__ = <x/>;} else {var __proto__; }");
tryItOut("{return; }");
tryItOut("let (constructor) { (eval).call }");
tryItOut("{;export prop; }");
tryItOut("L:if(1e81) export *; else {}");
tryItOut("default: break; {gc() }case export *: do {/*infloop*/for( ''  +=  /x/g ; [15,16,17,18].map(function(q) { return q; }, *::*); *::*) {{} }{;constructor = undefined; } } while(((*::*.@foo)) && 0);case 3: L: {}break; case 3: ");
tryItOut("if((( ''  +=  /x/ ) .@x:: @foo-=false.__lookupSetter__(\"__proto__\")) < __iterator__.(<y><z/></y>).__lookupGetter__(\"__count__\")) L:if((this ? [z1,,] : [])) { if (__iterator__.__proto__ = __iterator__) {let delete =  \"\" , __noSuchMethod__ = this; }} else {return <><x><y/></x></>; } else  if (prototype(((-0)(false, -0))) = this.zzz.zzz.__noSuchMethod__ = new (window)()) /*infloop*/do {; } while((getter = * .. .2)); else {export __iterator__; }");
tryItOut("let __iterator__ = 0, constructor = undefined;");
tryItOut("/*infloop*/for(~[undefined] .. this.zzz.zzz; (__parent__.__iterator__ = ([undefined for (function::__proto__ in 1e81)]), \fthrow *)[prop = window.prototype]; (yield <y><z/></y>) !== [[]] <= <x><y/></x> | function(id) { return id }) {; }");
tryItOut("function (__noSuchMethod__, __noSuchMethod__) { ; } ");
tryItOut("return 1.3\ngc()");
tryItOut("undefined\n");
tryItOut("if([11,12,13,14].map) { if (this.__defineGetter__(\"__proto__\", __count__ = prototype)) {export prototype;\nlet prototype = 0;\n__proto__; } else {<y><z/></y>; }}");
tryItOut("/*infloop*/for(let __parent__ = (( /x/ .unwatch\f(\"prototype\")).__lookupSetter__(\"__count__\")); yield  /x/  if (<y><z/></y>); (( /x/g .__lookupGetter__(\"__iterator__\")\t))()) ({}).hasOwnProperty\nvar prop, __count__ = 3.141592653589793;\nbreak \ncontinue M;");
tryItOut("while((('fafafa'.replace(/a/g, 1e81))) && 0){export *; }");
tryItOut("([[]]);");
tryItOut("/*infloop*/L:for((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.valueOf(\"number\")); (({ __iterator__: __iterator__ }) = true.__defineGetter__(\"prop\", eval)); false\f < <y><z/></y>) throw __parent__;");
tryItOut("if([11,12,13,14].sort.__proto__) __proto__ = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in (({__proto__: this.__defineSetter__(\"__proto__\", <x><y/></x>), __iterator__ getter: (1 for (x in [])) }))) if(((yield ( /x/g  ? delete <x><y/></x> : (prop.__parent__) && ([0/0]))))) { if ((__count__ = <y><z/></y>)) {const constructor = <><x><y/></x></>;return\nreturn; } else {return undefined;/*for..in*/for(let [__noSuchMethod__, prop] = function(id) { return id } in <y><z/></y>) {yield undefined; } }}");
tryItOut("/*infloop*/for(const [prototype, , __count__] = window || arguments; __parent__ = __iterator__; (((this).apply).call(@foo, [,,]) .@*:: <><bbb xmlns:ccc=\"0\"><ccc:eee></ccc:eee></bbb></>)) {export __count__\n }");
tryItOut("prop = prop;");
tryItOut("break L;/*for..in*/L:for(([,,z1].throw(#3={a:#3#}))((prop.(*))[new @foo]) in (constructor = new function (__noSuchMethod__) /x/g \n())) {/*for..in*/for(var constructor in <><x><y/></x></>) {(<><x><y/></x></>); } }");
