tryItOut("L:with(yield constructor){(<x><y/></x>); }");
tryItOut("/*infloop*/do {yield;let __noSuchMethod__ = <x/>, prototype; } while();");
tryItOut("if(<><xxx {prototype}={function::prop = (<x><y/></x> if (<><x><y/></x></>))} /></>) {;\n{}\n }");
tryItOut("/*for..in*/for(let prototype in (eval(\"export *;\", new Function(@foo, <x/>)))) (window);");
tryItOut("/*infloop*/do {return <><x><y/></x></>; } while(<><x><y/></x></>['constructor'] = {}(\r<><x><y/></x></>, true));");
tryItOut("let ([constructor]) { while((eval(\"export *;\", true)) && 0){export *;var __iterator__ = null, prototype; } }");
tryItOut("return new Exception((window)(new (false).__defineSetter__(#1=[#1#]), (<x><y/></x>(<><x><y/></x></>).__lookupGetter__(\"constructor\"))), (__parent__ = undefined));");
tryItOut("/*infloop*/L:for((((p={}, (p.z = <y><z/></y>)()).hasOwnProperty(\"__count__\")) ? [prop] = constructor : 'fafafa'.replace(/a/g, function  prototype ()<><x><y/></x></>)); ({ __proto__: __parent__, __proto__: __parent__ }) = (*::*.yoyo(1e81)); <x><y/></x>.prop = 1e+81) gc()");
tryItOut("for(let y in []);");
tryItOut("return 1e+81");
tryItOut("var __iterator__, __proto__;\nif((case  /x/ [<x><y/></x>]: break; /*infloop*/do {return; } while(1e+81);return;{export __count__; }break;  for each (prototype in <x><y/></x>) if (false))) return <x><y/></x>; else {let prototype, prototype = *::*;return 4.; }\n");
tryItOut("__noSuchMethod__\n");
tryItOut("let (__parent__, prop) { break ; }");
tryItOut("function::__count__ = __noSuchMethod__;");
tryItOut("M:with({prop: *}){export *; }");
tryItOut("/*for..in*/for(__parent__ in @foo.__defineSetter__(\"<><x><y/></x></>\", /a/gi)) ");
tryItOut("if(new *(<x><y/></x>, <><x><y/></x></>).throw(#3={a:#3#} &= __parent__)) export constructor;");
tryItOut("if(__count__|=trueconstructor-=Date()) { if () {var __iterator__, __count__;gc() } else {constructor;export *; }}\n");
tryItOut("{{} }");
tryItOut("/*infloop*/for(prop; <y><z/></y>; -1) prop = constructor, __proto__");
tryItOut("if((function(y) { yield y; yield <x><y/></x>;; yield y; })()()) { if (~(<><x><y/></x></> % window))  else export constructor;}//h\n");
tryItOut("with({}) <x/>;");
tryItOut(";\nyield <><x><y/></x></>;\n/*for..in*/for(let __iterator__ = (new *()) in 4.) {let __iterator__ = false, __proto__ = {}; }");
tryItOut("/*for..in*/L:for(let __proto__ in __proto__ = prototype) gc()");
tryItOut("/*for..in*/for(var ({ constructor: ({ __iterator__: __noSuchMethod__, __iterator__: __count__ }), __noSuchMethod__: prop }) in ((function(q) { return q; })(-3/0))){return;/*\n*//*for..in*/for(const __count__ in <><x><y/></x></>) let __count__ = this; }");
tryItOut("/*infloop*/do yield eval(\"({prop setter: function (__count__, __count__) { return <x><y/></x> }  })\", [15,16,17,18].filter(gc, <x/>))\n while(((this)(@foo, <><x><y/></x></>).valueOf(\"number\")) .@*:: let (__parent__, constructor = window) 4..eval(<><x><y/></x></>) >> (this.unwatch(\"prototype\").constructor = <><x><y/></x></>));");
tryItOut("if((new (1 for (x in []))())) {return; } else  if ((__parent__.(0x99))) break ;");
tryItOut("let (__parent__) { yield; }");
tryItOut("yield 4.;\nlet prototype;\n");
tryItOut("/*infloop*/do gc() while(*);");
tryItOut("if(new /a/gi()) /*infloop*/for(let __noSuchMethod__ = (__count__.constructor); (<x><y/></x>.unwatch(\"prototype\")); <x><y/></x>) yield [1];");
tryItOut("if(Exception(prototype = ({a1:1}), this)) __parent__ else {let constructor;return; }");
tryItOut("/*infloop*/while(__proto__ = <x/>){yield <y><z/></y>;throw <; }\t\n/*infloop*/do let constructor = *; while([z1,,]);\n");
tryItOut("throw <><x><y/></x></>;\nreturn;\n");
tryItOut("/*infloop*/for(([1] .@ window); (<x><y/></x> <=  \"\"  ? (prop = (new new Function())) : <xxx>{__parent__}</xxx>.(false)); new [[z1,,]]()) __count__;");
tryItOut("");
tryItOut("/*for..in*/L:for(var __count__ in (prop.constructor)) {{}const __count__; }");
tryItOut("M:if(*.unwatch(\"prototype\")) {export __parent__;\f } else {yield <x><y/></x>; }");
tryItOut("if(1.2e3) { if ((function (prototype, ({ prototype: __count__ }))[1]--).call((yield this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice))--, __iterator__ = <x/>)) export function::__iterator__; else {return; \"\" ; }}");
tryItOut("/*infloop*/L:while({}.__defineSetter__(\"__proto__\", function  delete ()[,,]))M:with(<><x><y/></x></>)");
tryItOut("/*for..in*/for(let __iterator__ in  \"\" ) {{}; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let constructor; ((function  constructor () { return (({ get constructor()<x><y/></x>, function::prop: <x><y/></x> })) } ).call)( /x/  >>> [z1,,], ++__noSuchMethod__); 1.2e3) {M:if(#0=[[null]]) { if (prop) {const __noSuchMethod__ = this }} else {{yield  /x/ ; } } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do (__proto__); while((<\fx><y/></x>.__proto__).isPrototypeOf({gc() }));");
tryItOut("while((<><x><y\f/></x></>) && 0)__parent__ = window, prop;");
tryItOut("if(1.2e3) { if (<><x><y/></x></>) {yield false; } else {return 033; }}");
tryItOut("/*infloop*/L:for(let ({ __parent__: ({ prototype: __noSuchMethod__ }) }) = ([z1,,] ^= 1e-81) / (<><x><y/></x></>.watch(\"__count__\", <><x><y/></x></>)); [({ prop: __proto__, __count__: __iterator__ }), , ], __parent__ = \n[z1] = (__noSuchMethod__ = *::*); (.).throw(/*\n*/.__defineGetter__(\"prototype\", (<y><z/></y>).__defineSetter__))) M:if(((033.__count__))[(false)(this, *::*)].watch(\"__noSuchMethod__\", function(y) { yield y; let __noSuchMethod__ = <><x><y/></x></>, __iterator__ = <y><z/></y>;; yield y; })) ([1,2,3,4].slice).apply else  if (null) const ;");
tryItOut("L: return *::*;");
tryItOut("__proto__ = __iterator__;");
tryItOut("with({__parent__: this.zzz.zzz})do {return;export __iterator__; } while((__count__ = undefined) && 0);");
tryItOut("/*for..in*/for(let __parent__ in 0.1) export *;");
tryItOut("for(let y in [5,6,7,8]) return  \"\"  .@x:: 1e+81;");
tryItOut("/*infloop*/for(this.zzz.zzz; @foo; __proto__ = __iterator__) {continue ;var constructor = <x><y/></x>; }");
tryItOut("/*infloop*/M:do return [[]]; while(({ __iterator__: prop }) = (function ([y]) { })());");
tryItOut("/*infloop*/for(__iterator__; -0; 0) yield;");
tryItOut("let (__proto__) { throw <x><y/></x>; }");
tryItOut("while(((((<x\r><y/></x>)[0x99]) for (prototype in <><x><y/></x></>) for (__noSuchMethod__ in  /x/g ))) && 0){(<><x><y/></x></>); }");
tryItOut("{yield <x><y/></x>;function ([y]) { }; }");
tryItOut("{with(#0=((uneval(new (function  __noSuchMethod__ () { yield prop } )())))){} }");
tryItOut("if(<xxx {__parent__}={<x><y/></x>} />.( \"\" )'fafafa'.replace(/a/g, function (prototype, __parent__) { return [1]; } ), +[ \"\"  if (<x/>)] .__lookupSetter__\"__noSuchMethod__\") __count__, prototype = null; else  if (*::*.eval(<x/>).__lookupGetter__\f(\"__noSuchMethod__\")) yield @foo; else {try { throw *;/*\n*/ } catch(__iterator__) { export __count__; } finally { x::prototype, __parent__ = [z1]; }  }");
tryItOut("switch(-0) { case 5: /*for..in*/for(let __noSuchMethod__ = <><x><y/></x></> in <><x><y/></x></>) __iterator__ = <x><y/></x> }");
tryItOut("if(<x/>) let prototype = this; else  if (delete true &= (__proto__.( /x/g ))) { } else throw [,];");
tryItOut("if(constructor.__noSuchMethod__ = eval(\"let __iterator__ = ;\", [,])) { } else {var prop = __iterator__; }");
tryItOut("L:with({__parent__: #3={a:#3#}})yield;");
tryItOut("/*infloop*/while(true){gc()continue ; }");
tryItOut("/*for..in*/for(let __proto__undefined in <y><z/></y>) ");
tryItOut("/*infloop*/\rL:for(prop = (yield <><x><y/></x></>.hasOwnProperty(\"__count__\")); __noSuchMethod__.((\n<x><y/></x>)); [11,12,13,14].sort) {continue//h\n L;let (__proto__ = <x><y/></x>) { true; } }");
tryItOut("/*infloop*/while( /x/g )throw <><x><y/></x></>;;");
tryItOut("/*infloop*/for(function(id) { return id }; (__proto__ = 1.2e3 .@x:: false( '' )); (yield this).propertyIsEnumerable(\"__count__\")) let (constructor = <x/>) { return; }");
tryItOut("/*infloop*/while(yield __count__ >= *){if(<y><z/></y>) ;let (__noSuchMethod__, prototype) { yield (this ? window : 3); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prop) in __parent__ = window) if((({__parent__ setter: new Function }))) { if (__noSuchMethod__ = function ([y]) { }) @foo else {var prototype =  '' , {let __proto__ = ({a2:z2});function  __noSuchMethod__ (__count__, setter) { __iterator__ = *::*, constructor; }  };yield 1.3; }}\n");
tryItOut("if((constructor.constructor)) gc() else do {yield; } while((prop) && 0);");
tryItOut("if(this.__defineSetter__(\"function::__iterator__\", constructor)) ;");
tryItOut("if((new true\n())) { if (#3={a:#3#} >> null !== ((\r{__iterator__:  '' ,  set __proto__(__count__, __iterator__) { export __iterator__; }  }))) {var __count__;yield; } else {;gc() }}");
tryItOut("L:if(<y><z/></y>.propertyIsEnumerable(\"constructor\")()) { if (this.hasOwnProperty(\"constructor\")) {yield <x/>;let constructor; }} else {continue ;return <><x><y/></x></>; }");
tryItOut("/*\n*/do const __iterator__, __proto__ =  '' ; while((<x/>) && 0);");
tryItOut("/*infloop*/do yield; while((prop) = window);");
tryItOut("return (prototype = {});");
tryItOut("with({__parent__: window}){throw StopIteration;export *; }");
tryItOut("/*infloop*/for(__count__; prop = null; <><x><y/></x></>) <><x><y/></x></>;");
tryItOut("return [window if (this)];");
tryItOut("/*infloop*/for(var ({ prop: prototype }) = gc(<y><z/></y>, window); <><x><y/></x></>.yoyo( /x/g ).__defineGetter__(\"constructor\", eval); new (<x><y/></x>)()) throw 1e4;");
tryItOut("__count__ = __count__;");
tryItOut("M:with({__parent__: ({__iterator__: ({a1:1})}) ? (-yield true)[<>({})</>.((prop.function::__proto__))] : (eval(\"this.__defineSetter__(\\\"__iterator__\\\", [1,2,3,4].slice)\", ))}){L: { }(--<><x><y/></x></>); }");
tryItOut("/*for..in*/for(var prototype = undefined in function(id) { return id }) {break ; }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("gc()\n\n");
tryItOut("while(((<><x><y/></x></> ? <y><z/></y> : prop)) && 0)/*infloop*/for(((<x><y/></x>()) , <><x><y/></x></>[0/0]); <x><y/></x> == <x><y/></x> |= prop['__count__']; (this.zzz.zzz)\t) if(this\f) { if (3) const __proto__; else {break ; }}");
tryItOut("if(Function(<x><y/></x>)) { } else  if ((<bbb xmlns:ccc=\"__iterator__ - @foo\"><ccc:eee></ccc:eee></bbb>.(__proto__ = prop))) L:if(<><x><y/></x></>--) let prop, function::__iterator__; const prototype;");
tryItOut("{while((function(id) { return id }) && 0)yield window;/*infloop*/do export *; while(<y><z/></y>); }");
tryItOut("prop");
tryItOut("/*for..in*/throw <><x><y/></x></>;");
tryItOut("L:if() let prop = <x/>, prop;");
tryItOut("(<y><z/></y>); const __parent__;");
tryItOut("/*infloop*/while(((true & __parent__\n))[-.2])return;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("{return gc();{return;var __noSuchMethod__; } }");
tryItOut("{}");
tryItOut("return;");
tryItOut("if((__noSuchMethod__).call(prototype, <y><z/></y>.propertyIsEnumerable(\"prototype\"))) { if ((((({constructor:  /x/g })))()) < <><bbb xmlns:ccc=\"(typeof <y><z/></y> > <><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb></>.watch(\"__noSuchMethod__\", (new Function(\"/*for..in*/M:for(__noSuchMethod__ = true in [,,z1]) {var __iterator__ = <y><z/></y>;{} }\")))) {{}with({prototype:  /x/g })\t{; } }} else /*infloop*/for(prop; __proto__ =  /x/g ; <><x><y/></x></> throw null;) export *;");
tryItOut("if((<x><y/></x>.(window\f))) { if ([<x/> for ( { export *; }  in *::*)])  else {[1,2,3,4].slice }}");
tryItOut("let (__iterator__) { let (constructor, prototype = <x><y/></x>) { gc() } }");
tryItOut("{let (__noSuchMethod__ = window) { yield; } }");
tryItOut("let ([, , ], __count__) { do yield; while((yield constructor) && 0);\n }");
tryItOut("/*infloop*/do {__parent__, __proto__gc() } while((1e-81.__noSuchMethod__ = <x><y/></x>));");
tryItOut("if((function(q) { return q; }).call(<y><z/></y>, __parent__)) (window); else  if ((prop|=this.@foo)) {\fvar __parent__, __parent__; } else if(window) {const prototype; } else ;");
tryItOut("export *;");
tryItOut("throw  '' ;");
tryItOut("/*infloop*/M:while(#2=[function::__noSuchMethod__]){const __parent__ = <x><y/></x>, prop; } const __noSuchMethod__;");
tryItOut(";");
tryItOut("/*infloop*/M:for(const __parent__; (<zzz><x/></zzz> &= <xxx>{__iterator__}</xxx>); #1# in *) {L: {//h\ngc() }let (__parent__) {  } }");
tryItOut("try { this.zzz.zzz; } catch(__count__ if this.__defineSetter__(\"__proto__\", 'haha'.split)) { prop = undefined['__proto__']; } catch(prop if (function(){with({}) { setter; } })()) { throw constructor; } ");
tryItOut("L: if(true) {<x><y/></x>;return; } else  if (prop) {return;return __iterator__; }");
tryItOut("for(let y in [])\ngc()");
tryItOut("\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in [1,,]) {(<y><z/></y>); }\n");
tryItOut("/*infloop*/for(__iterator__; #1=({__proto__: this}); eval(\"((constructor.prototype setter= 'haha'.split).yoyo(#1=[#1#]))\", )) /*infloop*/for(let constructor.__proto__; <><x/></>; (true.hasOwnProperty(\"__parent__\"))--) gc()");
tryItOut("if(<x><y/></x>) { if (__iterator__.valueOf(\"number\")) {gc() } else {(*::*).__defineSetter__ }}");
tryItOut("{ /x/g ;export * }");
tryItOut("/*for..in*/for( get prototype()(yield <><x>\t<y/></x></>.eval((-0))) = 3/0 in false.__lookupSetter__(\"__proto__\") | <x><y/></x>.()) {export __iterator__ }");
tryItOut("/*for..in*/for(var <x><y/></x>.prototype in ((eval)(__parent__))){return @foo;const __noSuchMethod__; }");
tryItOut("with({__noSuchMethod__: (this.__defineSetter__(\"__iterator__\", function(q) { return q; }) ^ ({ __proto__: __count__ }) = this.__defineGetter__(\"__iterator__\", Math.pow))})with({__proto__: <><ccc:ddd>yyy</ccc:ddd></>}){throw  '' ; }");
tryItOut("/*infloop*/L:do return  /x/g ; while(case  /x/ : const __count__ = window, __proto__ =  '' ;default: return;break;  >> <x><y/></x>);");
tryItOut("do {if( /x/ ) (@foo); else  if ((new false([[1]]))) {export __iterator__;<x><y/></x>; } else {0x99;const __iterator__ = constructor; } } while((eval(\"<><x><y/></x></>\", constructor)) && 0);");
tryItOut("M:switch(([5.0000000000000000000000].map(({}).__defineSetter__)).__lookupSetter__(\"__parent__\")) { case new 1.2e3(*::* ? __noSuchMethod__ : *): break; case (-0 !==  ''  .. this): export __parent__;default: return (<><x><y/></x></>);break; case __iterator__ = __count__.watch(\"prop\", 3): break; case 0: M:if(__iterator__) {let __iterator__, __noSuchMethod__ = 5.0000000000000000000000;continue M; } else __iterator__\n*;\nreturn;break; case 0: with((eval(\";\", <><\fx><y/></x></>)))yield <><x><y/></x></>;break; case 9: ;return; }");
tryItOut("L:if(()) {gc()throw false; } else {export constructor;continue L; }");
tryItOut("/*for..in*/for(let __iterator__ = (<><x><y/></x></> .@x:: 3).@foo in #1=[#1#]) ");
tryItOut("let(constructor = this, __count__ = <x><y/></x>) { with({}) { gc() } ");
tryItOut("return __iterator__;");
tryItOut("return;");
tryItOut("{if(new Date()) {const prop = <x><y/></x>; } else  if (this) continue ; else {yield [,,z1];{} } }");
tryItOut("let (prop = this, prop = __parent__) { yield window; }");
tryItOut("if( \"\" ) {}");
tryItOut("M:with({__iterator__:  /x/g  instanceof [1,,]})throw window;");
tryItOut("M:if(*.__defineSetter__(\"__count__\", function (__count__, each) { continue L; } )) const prototype, __parent__; else  if ((-1) ? 5.0000000000000000000000 : <x/>) return <x><y/></x>;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = prototype; __noSuchMethod__.__defineSetter__(\"__noSuchMethod__\", (new Function(\"throw  \\\"\\\" ;\"))); ([15,16,17,18].some(new Function, *::*))) {/*for..in*/for(let constructor = <x><y/></x> in @foo) {{} } }");
tryItOut("/*for..in*/for(var __parent__ = constructor.__count__ = -1 in ( /x/ )) {var __count__ = undefined;gc() }");
tryItOut("do {yield __proto__;return; } while(((void undefined(<x><y/></x>, prototype))) && 0);");
tryItOut("\tbreak \nyield null;");
tryItOut("/*infloop*/for(const (__noSuchMethod__) = function (__proto__, constructor)<x/>; [__proto__].some(function ( { return prop =  /x/  } )<y><z/></y>);  \"\" ) {L: {var __noSuchMethod__ = @foo; } }");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = <y><z/></y> in <y><z/></y>) __parent__;");
tryItOut("{this.zzz.zzz;export __proto__;yield <x><y/></x>; }");
tryItOut("L:if(\nconstructor = this) {throw @foo; } else  if (#1=({__parent__: let (__noSuchMethod__ = <y><z/></y>, prop = <><x><y/></x></>) <><x><y/></x></>})) <x/>; else export *;");
tryItOut(" const __proto__;if(([(-1)].sort(*::*))) { if (throw window) yield 3/0; else <x><y/></x>;}");
tryItOut("/*infloop*/M:for(var prototype; <>(yield  /x/ )</>; [11,12,13,14].filter) yield <y><z/></y>\n");
tryItOut("L:with(window)yield <x/>;");
tryItOut("if( /* Comment */(\n)) { if (((<x/>)[1e4].throw((({a1:1}) > this)))) ;} else {var prototype; goto  }");
tryItOut("if((<x><y/></x>.eval(prototype))) { if (\ffunction::__proto__ = window) } else {yield *::*;(@foo); }");
tryItOut("export *;");
tryItOut("if(((new 0/0))(((yield __proto__))) = constructor.__iterator__ getter= (-0)) { if (this.__defineSetter__(\"__proto__\",  /x/ )['__noSuchMethod__'] = function ([y]) { }.throw(<x><y/></x>)) { } else {let __proto__ = window;export delete; }}");
tryItOut("throw  '' \n");
tryItOut("while((undefined) && 0){ }");
tryItOut("L: export constructor;");
tryItOut("/*infloop*/for(const __count__; (prototype = <x><y/></x>); true.yoyo(*)) {var __proto__ = #3={a:#3#}, __noSuchMethod__;return <x><y/></x>; }");
tryItOut("/*infloop*/for(const ({ __count__: __iterator__, __proto__: constructor }) = (<y><z/></y> in @foo); __noSuchMethod__;  '' .__lookupSetter__(\"constructor\")) {with({prototype: __count__}){throw <x><y/></x\n>; } }");
tryItOut("do (this); while(((yield (<x><y/></x>.@*))) && 0);");
tryItOut("with(true.@foo)return;");
tryItOut("if( /x/ \n.eval(+<x><y/></x>)) { if ((__iterator__ = window).__defineSetter__(\"prop\", (1 for (x in []))) >= null) (<><x><y/>\f</x></> %= <x><y/></x>);} else {yield;export __iterator__; }");
tryItOut("/*for..in*/for(var __proto__ in )  \"\" ");
tryItOut("(__count__.constructor = prop = new Function(0\n).__lookupSetter__(\"__iterator__\")).__lookupGetter__(\"__count__\")");
tryItOut("if(((__parent__ = <y><z/></y>).@foo)) with((prototype.__noSuchMethod__ = [[]])) else {export *;\nexport prop;\n }");
tryItOut("{export *;return; }export *;");
tryItOut("/*infloop*/for(var __proto__ = constructor; __noSuchMethod__;  \"\" ) {yield *::*;continue ; }");
tryItOut("M:if(<x><y/></x> |  /x/g ) return <x/>; else  if (__iterator__) export __parent__/*for..in*/for(let prototype = ({__noSuchMethod__: [],  set __noSuchMethod__()* })\r in constructor.__noSuchMethod__ getter= function (__count__) { yield <x/> } ) /*for..in*/for(__iterator__ in <x><y/></x>) export __iterator__;");
tryItOut("/*for..in*/for(let [prop, constructor] = <x/> for (constructor in <x><y/></x>) in __proto__.prop =  \"\" ) {return; }");
tryItOut("M:while(((true < <x><y/></x>)) && 0){const constructor = *::*;\texport *; }");
tryItOut("/*infloop*/for(let prop; (<x><y/></x>.__defineSetter__(\"__iterator__\", [1,2,3,4].map)); (__parent__.__iterator__ = <x\n><y/></x>)) {export *;yield window; }");
tryItOut("let(constructor, __count__) { throw  \"\" ;");
tryItOut("/*for..in*/for(var [__proto__, __count__] = yield  /* Comment */this ^= prop.__lookupGetter__(\"__proto__\") in ((uneval([[]] | prop.yoyo(3))))) if( /x/g ) {continue L;break L; } else  if (<><x><y/></x></>\t) (1 for (x in [])) else {__iterator__ = __noSuchMethod__break ; }");
tryItOut("/*infloop*/L:for(let ({ __count__: ({ __proto__: __count__ }) }) = (<><x><y/></x></> === <x><y/></x>); (<y><z/></y>.hasOwnProperty(\"constructor\")); (<><x><y/></x></>\n)) throw undefined;");
tryItOut("/*for..in*/for(true @ *::* in <x/>) const __proto__ = [1];");
tryItOut("null;");
tryItOut("/*for..in*/for(const prototype in (([1,2,3,4].slice)('fafafa'.replace(/a/g, function (undefined\f) { return <x/> } )))){{}*::* }");
tryItOut("/*infloop*/L:for(const ({ constructor: ({ constructor: ({ __count__: prototype }), constructor: ({ __noSuchMethod__: ({ prototype\t: [] }), prototype: ({ __parent__: ({ __noSuchMethod__: ({ prototype: __noSuchMethod__ }), constructor: ({ __count__: ({ constructor: delete }) }) }), __noSuchMethod__: ({ prop: ({ __count__: ({ __count__: prototype, prop: __count__ }), __proto__: ({ __parent__: __noSuchMethod__, __parent__: __parent__ }) }), __count__: ({ __proto__: ({ __proto__: __proto__, __noSuchMethod__: prop }), __parent__: ({ __iterator__: __parent__ }) }) }) }) }) }), __count__: ({ x::__noSuchMethod__: constructor }) }) = #2=({prototype: (__proto__ = *) ^ 0}).__defineGetter__(\"prop\", ({ get *::*['function::prop'] __parent__ () { ( /x/g \n)/*\n*/ }   get __proto__ __iterator__ (__proto__, prop)__count__ })); 1e4; constructor.__iterator__ = (.2.hasOwnProperty(\"(__iterator__)\"))) {return; }");
tryItOut("\ndo *::* while(((<y><z/></y>.prop)) && 0);");
tryItOut("/*infloop*/L:for(constructor = this; this.watch(\"prototype\", [1,2,3,4].map); <x/>) {yield <><x><y/></  x</>;gc() }");
tryItOut("/*infloop*/for(yield <y><z/></y> for each (__iterator__ in <x/>) for each (__proto__ in <x/>)['fafafa'.replace(/a/g, try { export constructor; } catch(__proto__) { *; } )].__proto__; <><xxx {__proto__}={__count__.@*} /></>; delete (constructor = __iterator__)) {}");
tryItOut("/*infloop*/for(let __count__; (*)(); eval(\"(<{prop}><!--yy--></{prop}>.unwatch(\\\"__noSuchMethod__\\\"))\", \n<x><y/></x> % *)) return window;");
tryItOut("break M;");
tryItOut("while((033) && 0){yield; } const constructor;try { constructor = <x><y/></x>; } catch(__iterator__) { ; } finally { gc() } ");
tryItOut("if(<y><z/></y> ? prop : *::* :: <x><y/></x>) { if ([,,z1])  else {; }}");
tryItOut("/*infloop*/do if(<><x><y/></x></>) { if ( '' ) } else 0; while((new (*)(<><x><y/></x></>, true)));");
tryItOut("/*for..in*/for(let constructor = [z1] in ({__count__: __count__})) let __iterator__ =  /x/g , prop = <><x><y/></x></>");
tryItOut("if(window) export __count__;/*\n*/ else  if (<x><y/></x>) constructor, __proto__ = <x><y/></x>");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/L:for(__parent__; new ({}).__lookupGetter__(let (__noSuchMethod__, __proto__) __count__ = <><x><y/></x></>); ((uneval(<x/>)))) {__proto__ =  /x/g ;export *;\n'haha'.split\n }");
tryItOut("if(eval(\"/*for..in*/M:for(<><x><y/></x></> in ((((\\ffunction  __parent__ () { return this } ).apply).call)(undefined))){continue L; }\",  /x/g )) {(<y><z/></y>); } else  if (__parent__ = \f__noSuchMethod__) {return; } else /*for..in*//* nogeckoex bug 349964 */ for  each(prop in <><x><y/></x></>) let prototype = __iterator__, __count__;");
tryItOut("/*infloop*/throw ([15,16,17,18].sort((<><x\t><y/></x></>).watch, 0x99));");
tryItOut("let (__parent__ = new (function  prop (__count__)__noSuchMethod__)(null), __parent__) { {export *; } }");
tryItOut("with({__count__: this}){function(q) { return q; }/*\n*/ }");
tryItOut("with((<x/>)(*))throw <><x><y/></x></>;");
tryItOut("if(undefined) {(Math.pow(this, <y><z/></y>).__lookupGetter__(\"constructor\"))  else {(.2);yield; }}");
tryItOut("var constructor;(1e-81);");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("M:do yield <y><z/></y>; while((*::*) && 0);");
tryItOut("{with(yield <x><y/></x>\n){{} } }");
tryItOut("/*infloop*/while(let (/*\n*/[({ constructor: __count__, __parent__: prototype })] = //, prototype = new ({})(this)) (null\t)[<><x><y/></x></>])/*for..in*/L:for(let prototype in ((function  prop (({ prop: __iterator__, __proto__: prop }), prop)Function(__iterator__ = *))(this.__defineGetter__(\"__parent__\", Function)))){{} }");
tryItOut("/*infloop*/for(const constructor; <x><y/></x>; <><x><y/></x></>) {}\nreturn;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x><y/></x> >>= <><x><y/></x></>) ({ __noSuchMethod__: __noSuchMethod__, __iterator__: prototype })");
tryItOut("/*for..in*/for(var [prop, prototype] = -1 ? [[1]] : constructor in false .@ <x><y/></x>) if(false) yield <><x><y/></x></>; else {new Function__parent__ = (function ([y]) { })(); }");
