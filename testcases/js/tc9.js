tryItOut("{if(prop.prop) { } }");
tryItOut("throw function ([y]) { }; const __iterator__;");
tryItOut("if(new <y><z/></y>) {return <x/>;__iterator__ } else  if (<><x><y/></x></> << <x><y/></x>) {export function::prop;let __parent__, prop; }");
tryItOut("/*infloop*/L:do {/*for..in*/for(var __count__ = [1,2,3,4].map in <><x\r><y\t/></x></>) [1,2,3,4].map } while((__proto__ = *).propertyIsEnumerable(\"__iterator__\"));");
tryItOut("/*infloop*/for(__noSuchMethod__ = <x><y/></x>[<y><z/></y>]; *::*; ((p={}, (p.z = (true.isPrototypeOf( '' )))()))) M:do {new Function } while((__proto__.prop setter= <x><y/></x>) && 0);");
tryItOut("if((eval(\"__iterator__\",  /x/g ))) { if ((({constructor: 5.0000000000000000000000, __proto__: null }))) /*infloop*/do {\tconst constructor = <x/>; } while( { return <x><y/></x> }  = constructor);} else M:if(({constructor: prop})) {export __noSuchMethod__; } else  if (RangeError(<><x><y/></x>/*\n*/</>, this).unwatch(\"__noSuchMethod__\")) {yield <x/>; } else {break L;gc() }");
tryItOut("try {  } catch(__proto__) { throw prop; } ");
tryItOut("/*infloop*/for(let x::__proto__; (((void arguments))(__proto__, <x><y/></x>\n)); (__proto__.watch(\"__proto__\", null))) {L: throw @foo;gc() }");
tryItOut("{throw *::*;throw  '' ; }");
tryItOut("/*for..in*/for(var <x/> in this) const prototype, __proto__;");
tryItOut("<x/>");
tryItOut("if([15,16,17,18].map(function  function::__noSuchMethod__ (prototype)1e4 in true, 'fafafa'.replace(/a/g, function(q) { return q; }))) {const prop = function(id) { return id }{(<y><z/></y>);, __proto__; } }");
tryItOut("L: yield;");
tryItOut("{export *;{} }");
tryItOut("null;");
tryItOut("{if(#1=[#1#] >>> <y><z/></y>) { if (([window])) {/*infloop*/L:for(let __iterator__ = [window].sort(eval); (function  __parent__ (prototype)<x/>)\t(*::*, <x><y/></x>); (((*::*).__defineSetter__).call(<\tx><y/></x>, <><x><y/></x></>))) {continue ; }break M; }} else with({prototype: constructor = <><x><y/></x></>.@foo}){export constructor;yield; } }");
tryItOut("/*for..in*/for(let [__iterator__, prop] = __noSuchMethod__ = <y><z/></y> in <x><y/></x> /= window) if(this.zzz.zzz) { if (yield 0.1 === 3/0 ? <x><y/></x> : 3) {return this; }} else /a/gi");
tryItOut("with(<><x><y/></x></>){const prop = @foo, __parent__;__proto__, __noSuchMethod__ }");
tryItOut("with({__parent__: <x><y/></x>.watch(\"delete\", (new Function(\"export *;\"))).throw(eval(\"yield  \\\"\\\" ;\", let (__proto__, __noSuchMethod__ = true) 1.2e3))}){(1 for (x in [])); }");
tryItOut("L:with({__count__: ({a1:1}) = <><x><y/></x></>})");
tryItOut("if((<><x><y/></x></>().prop)) {with({__iterator__: (__parent__|=false)})var constructor, __proto__; } else prototype =  \"\" ;");
tryItOut("/*infloop*/for(const __proto__ = prototype = *::* , (__count__++).propertyIsEnumerable(\"__parent__\")\t(['fafafa'.replace(/a/g, 'haha'.split)]); ; (#1=[#1#] :: 0.1).__lookupSetter__(\"__noSuchMethod__\")) /*infloop*/M:for(<x><y/></x>.yoyo( /x/ ); prototype.(function::prototype); 3) {__iterator__const constructor; }");
tryItOut("if(new (prop)(true, this)) {;; } else  if (__parent__ = new Array(window, <><x><y/></x></>)) export constructor; else {throw __noSuchMethod__; }");
tryItOut("L: yield ({__iterator__: <><x><y/></x></>,  set prop prototype () { yield @foo }  });\nswitch([15,16,17,18].some(({}).__lookupGetter__, <><x><y/></x></>)) { default: export *;export *;(new Function(\"Math.sin\"))this;break; break;  }\n");
tryItOut("/*for..in*/M://h\nfor(let __count__ in ((function () { yield (new ({})(function ([y]) { })) } )((-0)))){export prop; }");
tryItOut("let (__proto__ = (<x><y/></x>.unwatch(\"__parent__\").eval((constructor.(<><x><y/></x></>))))) { with({delete:  \"\" }){const __noSuchMethod__; } }");
tryItOut("M:if(true += false) { if (__proto__ = prototype) {throw this; }} else {gc() }/*for..in*/for(let [__parent__, __noSuchMethod__] = [] in *) return <x><y/></x>;");
tryItOut("/*for..in*/for([prop, __proto__] = * in <x\f><y/></x>) prop, __proto__ = <x><y/></x>;");
tryItOut("yield <x/>;");
tryItOut("throw StopIteration;");
tryItOut("{if(this.zzz.zzz) const prototype, constructor = <x><y/></x>; else return 5.0000000000000000000000; }");
tryItOut("if(this.zzz.zzz) {export *; } else  if (([, constructor] = (this.__defineGetter__(\"prop\", <x><y/></x>).__lookupGetter__(\"__proto__\")))) ({}).__lookupGetter__");
tryItOut("L: {; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ((new this :: 0.1(yield+=[z1,,])).propertyIsEnumerable(\"__parent__\")); 1e-81) M:if(this.__defineSetter__(\"__noSuchMethod__\", /a/gi)) { if ((<bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb>.unwatch(\"__noSuchMethod__\"))) yield;} else {let (prototype =  '' ) { throw @foo; } }");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = <><x><y/></x></> in prop) {; }");
tryItOut("if(function ([y]) { } >>> --({ set prop __proto__ (__noSuchMethod__, __proto__)*, __proto__: window })) { if () {(*);let (constructor = <><x><y/></x></>) { {} } }} else return");
tryItOut("switch( '' .watch(\"prototype\", ( \"\" ).__defineSetter__)) { case 0: __parent__ = window;case 1: var constructor;let ( { return  /x/g  }  = (function ([y]) { })(), prop = __noSuchMethod__) { yield; }break;  }");
tryItOut("export *;");
tryItOut("if((Function)) yield <><x><y/></x></>; else  if (0/0.hasOwnProperty(\"constructor\")) /*for..in*/for(__noSuchMethod__ in true) {return this; } else ;");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></>) (<><x><y/></x></>); const __proto__\nswitch(this .@  /x/g .__count__) { case -<x><y/></x>: <x/>;break; case 0: break; default:  }\nv\n");
tryItOut("/*infloop*/for(*::*; false; -0.throw(__parent__)) {/*infloop*/for((window.hasOwnProperty(\"__iterator__\")); this.__defineSetter__(\"__noSuchMethod__\", window); [window]) {__parent__ = <><x><y/></x></>, prop =  '' ;yield; }if(__parent__) { if ((({ get __noSuchMethod__ prototype () { export __proto__; }  }))) {M:if(<x><y/></x>) export __iterator__; else \t if (<x><y/></x>) {; } }} else prototype; }");
tryItOut("switch(this.zzz.zzz) { default: var __parent__, __count__;break; break; let prototype, __count__ = null }");
tryItOut("/*infloop*/L:for(let [[], , ({ __proto__: prototype })\f, __count__] = ; __proto__ = constructor.prototype; Iterator(Date(<bbb xmlns=\"( \"\" .yoyo(this))\">yyy</bbb>, void [[1]]))) {let(<><x><y/></x></>, constructor) ((function(){for(let y in [5,6,7,8]) const __noSuchMethod__ = __iterator__;})()); }//h\n");
tryItOut("L: {/*for..in*/for(const __count__ = this :  in <><x><y/></x></>) {continue M; } }");
tryItOut("/*infloop*/M:for(const prototype; new RegExp(<x><y/></x>); <><x><y/></x></>.__iterator__) yield;");
tryItOut("if(window|=({__parent__: <y><z/></y>}).watch(\"constructor\", ({}).hasOwnProperty)) { if ((({ __count__: ({ __count__: [] }) }) = constructor.__parent__+=__count__ = [null].some(function () { yield @foo } )) ? (function  prototype (__parent__, __noSuchMethod__) { return (this <<  /x/g ) } ).call(void 3/0 | (__iterator__ += @foo), ) : this.throw(*)) while((this.__defineGetter__(\"__noSuchMethod__\", @foo)) && 0){let __iterator__ = this;export *; }} else {/*for..in*/for(var prop in -3/0) export __count__; }");
tryItOut("/*for..in*/for(var prop in ((((*.@foo) .@*:: this.__defineSetter__(\"prop\", [1,2,3,4].map)).__defineSetter__)((uneval(\n1.3)) , __proto__ = *)))export *;");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/do {function::prop =  '' , __count__ = <x/>;M:with({__iterator__: <x><y/></x>}){{}throw <x><y/></x>; } } while(<x>\f<y/*\n*//></x>.(constructor));");
tryItOut("if( /x/g ) { if (false.__lookupSetter__(\"__iterator__\")) with({}) { let __count__ = this, __count__ = <><x><y/></x></>; } } else {export *; }");
tryItOut("let prototype = ({a1:1}), prototype = window;\nconst __noSuchMethod__ = __noSuchMethod__;\n");
tryItOut("L:with(eval(__iterator__,  \"\" ))export *;");
tryItOut("for(let y in [5,6,7,8]) try { return undefined\n; } catch(prototype) { with({})  { throw <x><y/></x>; }  } ");
tryItOut("prop\n");
tryItOut("do {if(false) { if ( \"\" ) {yield; } else <y><z/></y>;\t} } while((this.__defineSetter__(\"__iterator__\", (new Function(\"<><x><y/></x></>;\")))) && 0);");
tryItOut("M:if((__noSuchMethod__.__iterator__)) const __count__, __proto__ =  /x/ ; else {break ; }");
tryItOut("/*infloop*/for(let __proto__; ({constructor setter: (constructor).__defineSetter__, prototype: window }); this.__defineSetter__(\"constructor\", (new Function(\"export __noSuchMethod__;\")))) {'haha'.split }");
tryItOut("let (__count__ =  /x/ ) { /*infloop*/for(  = this; ({a1:1}); [,]) break M; }");
tryItOut("if(prop--) let __proto__, constructor; else  if (~null) {export constructor; }");
tryItOut("return .valueOf(\"number\");");
tryItOut("/*for..in*/for([, ] in ((/a/gi)(([1,,] ? <y><z/></y> : 3.hasOwnProperty(\" \\\"\\\" \"))))){if(-3/0) {gc().2; } else  if ((window instanceof  \"\" )) {yield prototype; } else {{} } }");
tryItOut("with({__parent__: <>__iterator__.__proto__ setter= gc</>})/*infloop*/L:do {var __proto__ = [z1], constructor = <><x><y/></x></>;if(__count__) return undefined; else  if (null) let __count__; else var __iterator__, constructor =  /x/ ; } while(this.__defineSetter__(\"__parent__\", function(q) { return q; }));");
tryItOut("L:with({__parent__: new RangeError()}){while((__iterator__) && 0)constructor, constructor = window;__count__, __iterator__; }");
tryItOut("if(window) M:switch( { return prototype } ) { case ({a1:1}): case true: [1,2,3,4].mapbreak; case <><x><y/></x></>: default: let prop; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in -0) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in  %= __iterator__ = @foo) /*for..in*/for(prototype = <x/> in <y><z/></y>) export __proto__;\nM:switch(3/0) { default: \t }\n");
tryItOut("L: try { break L; } finally { (true); } \n");
tryItOut("if((prop = ((function ([y]) { })().constructor = [[1]])) == ({a2:z2}).eval(this)) yield;\nconst __proto__ = <y><z/></y>, constructor = *::*;\n else  if (yield (prop = ({a2:z2}))) {prototype = prototype; }");
tryItOut("try { ; } finally { for(let y in []); } ");
tryItOut("let (prototype) { L:do {/a/gi } while((function(id) { return id }) && 0); }");
tryItOut("/*infloop*/for(<x><y/></x>; <y><z/></y>; <x><y/></x>) return;");
tryItOut("return;");
tryItOut("L: return undefined;\n{\t}\n");
tryItOut("/a/gi");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut(";");
tryItOut("if(((prop)(<x><y/></x>, false)).hasOwnProperty(\"__parent__\")) {/*for..in*/L:for(var ([z1])(constructor) in -0) /*infloop*/\nfor(([<x/>].some((*::*).call)); ([ /x/ ].sort(Math.pow)); (<x><y/></x>.( /x/g ))) yield;/*infloop*/M:for([,,z1]; false; <><x><y/></x></>) return; }");
tryItOut("L:if(let __iterator__, __noSuchMethod__) gc()\n");
tryItOut("let(__parent__) ((function(){return;})());");
tryItOut("if([this].filter((function(y) { yield y; export constructor;; yield y; }).call)) { if ('fafafa'.replace(/a/g, function  prototype () { return prop } )) yield this; else {{}(<><x><y/></x></>); }}");
tryItOut("export __proto__; const __count__;");
tryItOut("if(return >> window + <x/>.propertyIsEnumerable(\"__proto__\")) throw (function ([y]) { })()\n else ");
tryItOut("with({__parent__: (let (setter) __parent__)})/*infloop*/for(constructor = [,,z1]; __noSuchMethod__; <><x><y/></x></>) {}");
tryItOut("L:if(this) (@foo);");
tryItOut(";\nfor(let y in [5,6,7,8]) export *;\n");
tryItOut("M:if((({__count__ setter: 'haha'.split,  set __noSuchMethod__(__count__, prop) { return (prop).call(false, <x><y/></x>) }  }))) { if (new (<x><y/></x>.(undefined)--)( /x/ -- if ([1,,]), __iterator__ = __proto__;)) {export prototype; } else {\t<x><y/></x>; }}");
tryItOut("if((constructor.( /x/g ).hasOwnProperty(\"prototype\"))) { if (this) {if(#2=[__count__ =  /x/g ])  else prop;__proto__; }} else {/*infloop*/while((true @  /x/g )){continue ; }continue L; }");
tryItOut("/*infloop*/for(let ({ constructor: __iterator__ }) = (uneval(this));  /x/g ; (this[<><x><y/></x></>])) [z1,,];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const Math.sin() | (eval(\"true\", (function ([y]) { })())).prototype in <x><y/></x>\n.unwatch(\"__proto__\")) {/*infloop*/do {/*infloop*/for(let __iterator__ = \f<x><y/></x>; <><zzz> /x/ </zzz></>; <y><z/></y>) (<x><y/></x>).watch } while(__proto__.(__parent__) @ (__noSuchMethod__ =  /x/ )); }");
tryItOut("if((function () { return this } ).call([11,12,13,14].sort, <><x><y/></x></> !== __count__)) (true); else  if (((0).watch)['prop'] = (new Math.sin(__count__ { yield undefined }   = __count__))) {break ;throw [z1,,]; } else yield;");
tryItOut("if( /x/g ) (<x><y/></x>); else  if (undefined) L: {yield [[]];gc() } else if(constructor) return <><x><y/></x></>; else {({}).__lookupGetter__ }");
tryItOut("let __noSuchMethod__;");
tryItOut("if(((false / 1.2e3).propertyIsEnumerable(\"__count__\"))) \u2028;");
tryItOut("let (__proto__) { /*infloop*/do {gc() } while(new (this)(false)); }");
tryItOut("null\n");
tryItOut("gc()\n[z1,,];<x><y/></x>;");
tryItOut("with(<><x><y/></x></>\n)continue ;");
tryItOut("do {let __proto__ = window, __count__;yield; } while((([(this.__defineGetter__(\"__iterator__\", (#1#).watch) in (({__noSuchMethod__: \tthis.__defineSetter__(\"prop\", ([[1]]).__defineSetter__), __parent__: (((this).__defineSetter__).call)(*::*) })))])) && 0);");
tryItOut("throw StopIteration;");
tryItOut("L:with({__parent__: (p={}, (p.z = (-0).hasOwnProperty(\"__noSuchMethod__\"))())})with({prop: <x><y/></x>}){/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <><x><y/></x></>) {{} } }");
tryItOut("if(((function ( for (__noSuchMethod__ in <x><y/></x>)) /x/ ).call.throw([]).watch(\"__count__\", gc))(void return null;, @foo.__lookupSetter__(\"prototype\"))) {L: ; } else  if (\n<><x><y/></x></>) ({ __count__: [, prototype, , constructor], __noSuchMethod__: [prototype, __noSuchMethod__, , __parent__] })");
tryItOut("with({constructor: prop})function(y) { yield y; (getter);; yield y; }\n");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, __parent__] = __noSuchMethod__ = <x><y/></x> in ((Math.pow)())) {L:do yield window; while((<><x><y/></x></> if ( '' )) && 0); }");
tryItOut("return;");
tryItOut("if([11,12,13,14].map) gc() else  if (this.__defineGetter__(\"prototype\", 0.1)) { }");
tryItOut("/*for..in*/for(let <><x><y/></x></> in <x><y/></x>) yield;");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = \n({ prop: prop }) = <><x><y/></x></>() in Function) {L:with(<x/>)yield;export *; }");
tryItOut("prototype = __parent__;");
tryItOut("with((null.__iterator__)--)break ;/*\n*//*infloop*/M:for(const ({ prototype: __noSuchMethod__ }) = this\n; (\nthis); <x><y/></x>.hasOwnProperty(\"__iterator__\")) break ;");
tryItOut("/*infloop*/for(let __proto__; let (__parent__ = *, __count__ = __noSuchMethod__) [,]; <x/>) {L:if([,,z1]) {<><x><y/></x></>yield; } else  if (({a1:1})) {(__noSuchMethod__);__noSuchMethod__; } else constructor = <x/>, constructor = *::*; }");
tryItOut("with({prototype: (new (Function)).unwatch\f(\"__parent__\")}){(({a2:z2})).__defineSetter__if((constructor = 1e4)) { if (('haha'.split)) __iterator__, prop =  '' ; else prop;} }");
tryItOut("/*infloop*/for(const ({ prototype: __iterator__ }) = ([15,16,17,18].some(function (prop) { return ([11,12,13,14].map) >>>=(<x/> -  ''  == (* @ *::*)) } , (* if (null)))); __proto__.__proto__; ) {;{/*infloop*/L:for(const __proto__ = 1e4; <><x><y/></x></>; null) {throw __count__; }if(window.hasOwnProperty(\"__count__\")) {var prop = true; } else  if ((__proto__.hasOwnProperty(\"__parent__\"))) <x/> } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in (this.zzz.zzz)) this.zzz.zzz;");
tryItOut("(<x/>); const __parent__;");
tryItOut("yield; const prototype;");
tryItOut("return <><ccc:ddd>__count__</ccc:ddd></>; const __proto__;");
tryItOut("__parent__ = <x/>, constructor; const constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__iterator__( '' )) in (-1)) {/*for..in*/for(var prop in this |= ({a2:z2})) new Function }");
tryItOut("if(__proto__.prototype) { if (constructor.constructor setter= /a/gi) /*infloop*/while((prototype.prototype = ({a1:1})))throw <x><y/></x>; else <><x><y/></x></>}");
tryItOut("throw <><x><y/></x></> *= 1e+81; const each;");
tryItOut("/*infloop*/do {__count__\nwindow; } while(((p={}, (p.z = <><x><y/></x></>)()).__lookupSetter__(\"prop\")));");
tryItOut("{return;(<x/>); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const prop in ([({prop: constructor }) for each (prop in <x/>)])) __parent__");
tryItOut("throw StopIteration;");
tryItOut("if(<y><z/></y>) {yield new (true)(1.2e3,  '' );__noSuchMethod__, prototype }");
tryItOut("{if(__count__) const constructor; else  { yield 1e-81 ? (-0) : <x><y/></x> } /*infloop*/for(*::*; false; __parent__) {return <x><y/></x>; } }");
tryItOut("let (prototype = __parent__|=-1//h\n) { if(( \"\" --)) {export *; } else  if (<x><y/></x>) {({}).__lookupGetter__function  __count__ (__count__, prototype) { return  \"\"  }  } }");
tryItOut("if(<><x><y/></x>\r</>) gc()");
tryItOut("(<><x><y/></x></>);");
tryItOut("if('fafafa'.replace(/a/g, function(q) { return q; })) {return (prototype = this); }");
tryItOut("(let) = __iterator__;");
tryItOut("with({}) yield ((new Function(\"export __parent__;\"))).call(*, );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((<x/>)(false) in (({__parent__ getter: [[1]], __iterator__: (prop.__defineGetter__(\"__iterator__\", <y><z/></y>)) }))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <y><z/></y>) {const prop, constructor = *::*;return; }");
tryItOut("/*infloop*/while(__parent__ = prop)yield undefined;");
tryItOut("export prop\n\n");
tryItOut("L:do ; while((__iterator__ = prototype.__parent__ = <x/>.__defineSetter__(\"prototype\", /a/gi)) && 0);");
tryItOut("with({constructor: [(<x><y/></x> === <x/>)].filter(function  __noSuchMethod__ () { return [15,16,17,18].some((*).watch, ()) } )}){if((__iterator__ =  /x/ )) yield;continue M; }");
tryItOut("let (__count__ = <x><y/></x>, __count__) { prototype = @foo; }\n/*infloop*/do throw 3.141592653589793; while((constructor = <><x><y/></x></>))var __count__, __iterator__;");
tryItOut("/*for..in*/for(const prototype = constructor in yield <x><y/></x>) /*infloop*/for(var __noSuchMethod__; true; *) let prop = <><x><y/></x></>;");
tryItOut("");
tryItOut("/*infloop*/M:while(false){constructor }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in function(id) { return id }) {}");
tryItOut("/*for..in*/for(__iterator__ in ((new Function)(prop)))yield __noSuchMethod__;");
tryItOut("L:while(([11,12,13,14].sort % (<x/> ? undefined :  /x/ ).__lookupGetter__(\"__proto__\")) && 0){do { } while((this.zzz.zzz) && 0);return; }");
tryItOut("return (5.0000000000000000000000 = (window <<=  '' ));");
tryItOut("let (prop) {  }");
tryItOut("let(constructor = true, __count__) ((function(){{}})());");
tryItOut("/*for..in*/L:for(var [<x><y/></x> for (constructor in this)].__iterator__ in (((1 for (x in [])))(1e81 %  \"\" )))var __parent__, __proto__; const __proto__;");
tryItOut("{/*for..in*/for(var [prototype, __proto__] = prototype = this in <y><z/></y>) {{}yield <><x><y/></x></>; }/*for..in*/for(let [__count__, __iterator__] = (({}).__lookupGetter__)() in prototype) break ; }");
tryItOut("L:with(({__proto__: ((new Function).call(<x/>, [,,z1], undefined))}))const constructor = <x><y/></x>, __proto__");
tryItOut("M:if(null) { if (-<x><y/></x>) yield <x/>;} else return prop;\n { yield <><x><y/></x></> } \n");
tryItOut("/*for..in*/for(prop = [z1,,] in __count__ = ({ prototype: __proto__ }).hasOwnProperty(\"__proto__.__proto__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in __count__ setter: eval) export __count__;");
tryItOut("/*for..in*/for(const prop in ((function(y) { yield y; ;; yield y; })(.))) '' ");
tryItOut("with({__noSuchMethod__: (__noSuchMethod__)[033]}){/*infloop*/for(getter; this.zzz.zzz; (__proto__)) {export *;const __proto__; } }");
tryItOut("let prop = null, __noSuchMethod__ =  /x/g ");
tryItOut("__count__ setter: ({}).hasOwnProperty");
tryItOut("try { with({}) { yield (this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)); }  } finally { __iterator__.prototype = prop; } ");
tryItOut("export *;\neach, prop;\n");
tryItOut("{L: prop =  /x/g ; }");
tryItOut("do {throw StopIteration; } while((x::__count__ = <><x><y/></x></> .. \nfalse) && 0);");
tryItOut("M:switch(([15,16,17,18].some((1 for (x in [])), [[1]])) |= (*.__lookupGetter__(\"__count__\"))) { case (Function).apply: break;  }");
tryItOut("/*infloop*/for(const prop; <><x><y/></x></>.__parent__; ((uneval((*::*.propertyIsEnumerable(\"__noSuchMethod__\"))))) & (<x><y/></\fx>).call(, -3/0.__lookupGetter__(\"__noSuchMethod__\"))) {export *; }");
tryItOut("switch((({ constructor: prop, prototype: [, []] }) = *::*)[([1] >>>=#2=[prototype.constructor = false] > true.constructor.hasOwnProperty(\"constructor\"))]) { case __proto__.__proto__ setter= (Math.pow).call.yoyo((p={}, (p.z = <x><y/></x>)())): case 5: {var __proto__; }break; {if(\nwindow) {<x><y/></x>;(null).watch } }break; default: gc()case void ++function::prop.__count__: break; /*for..in*/for(const [__noSuchMethod__, __iterator__] = yield  /* Comment */*::*.__proto__ in <x><y/></x>\n) {function::__iterator__;export prototype; }break;  } const prototype;");
tryItOut("__iterator__ = __parent__;");
tryItOut("if((eval(\"<y><z/></y>\",  /x/g )--)) {yield;yield window; } else  if ((*::* -= 033)[new (1e4)(null,  const )]) return; else { instanceof  }");
tryItOut("switch([]) { case ((('haha'.split).call( \"\" , <x/>, true)) < this.zzz.zzz).__defineGetter__(\"constructor\", [1,2,3,4].slice): if(this & this) {((this).__defineSetter__).apply }break; case (/a/gi)(): yield;break; default: with(new (({ let: __noSuchMethod__ }) = ({ __iterator__: __proto__, __noSuchMethod__: __count__ }))()){__parent__, __parent__; }break; case 4: case 3: propbreak; case 1: gc() }");
tryItOut("let prototype = <x><y/></x>;/*for..in*/for(const prototype = (<x><y/></x>).__defineSetter__ in *::*) {return true; }");
tryItOut("[({ __count__: __proto__, prototype: __noSuchMethod__ }), __iterator__, ] = (RangeError().__lookupSetter__(\"prototype\")), __parent__ = ()");
tryItOut("if(__noSuchMethod__.__iterator__ setter= function  __iterator__ (__iterator__, __proto__)/*\n*/ { return *::* }  &= ({__iterator__: <><x><y/></x></> }) >= window) { if ((\n<y><z/></y>)) {let __proto__, prototype; }} else {var __count__ = undefined, __iterator__ = case 6: ;export __proto__; }");
tryItOut("M:switch(false) { case constructor.constructor = window for (__noSuchMethod__ in false): 1.3;break; default: export *;break; case [\f__noSuchMethod__ = this, __count__ = this]: if( '' .yoyo( /x/g )((prototype.__proto__), window)) { if (<x/>) {throw [1,,];(-1); }\r} else throw constructor;break; if(constructor = <x><y/></x>) {export *;throw __count__; } else  if (__count__ = #1=[#1#]) gc()break; case 'fafafa'.replace(/a/g, eval): break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <><x><y/></x></>) {({}).__lookupGetter__ }");
tryItOut("if(<x><y/></x>++) {gc()gc() } else {let __parent__ = \t<><x><y/></x></>, __iterator__; }");
tryItOut("/*infloop*/do M:if((<><x><y/></x></>)(<><x><y/></x></>)) { if ((function::prop) - <x><y/></x> >>> true.propertyIsEnumerable(\"prop\")) {export __count__;(*); } else yield;}\t while(((this.*) in <><bbb xmlns:ccc=\"true = *::*\"><ccc:eee></ccc:eee></bbb></>));");
tryItOut("do {prototype } while((* = (function ([y]) { })()) && 0);");
tryItOut("( /x/g )");
tryItOut("let (prototype = (<x><y/></x>.propertyIsEnumerable(\"__count__\")).call(<x><y/></x>.__parent__-=(prop), new __proto__([[1]], __parent__), ([[1]].throw(#3={a:#3#}))[prop.__noSuchMethod__ =  /x/g ]), __proto__) { (x).apply }");
tryItOut("L:if(<><bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb></>) { if (<x/>.@foo)  else /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x/>) {{}continue ; }}");
tryItOut("L: {/*for..in*/for([constructor, __count__] = *::* in this) {({a2:z2}) }/*for..in*/M:for([__count__, prop] = <><x><y/></x></> in ({}))  }");
tryItOut("if((__noSuchMethod__ = <x><y/></x>)) {let prototype = 1e-81; } else gc()");
tryItOut("M:if((prototype <><x><y/></x></>)(<y><z/></y>')) ; else {let (prototype = <x><y/></x>, __noSuchMethod__ = @foo) { yield <x/>; }gc() }");
tryItOut("L: {return null;<><x><y/></x></>; }");
tryItOut("do {with({constructor: (this.__defineSetter__(\"__parent__\", /a/gi).__count__ = <x><y/></x>.watch(\"prototype\", null))})break L; } while((yield this.zzz.zzz) && 0);");
tryItOut("/*infloop*/for(({__noSuchMethod__ setter: Function,  set constructor() { return true }  }); (__iterator__); *::* || __count__) {; }");
tryItOut("/*infloop*/for(({ __proto__: ({ __parent__: (__iterator__) }), prop: ({ constructor: prop }) }) = ((uneval(#0=(__proto__ = null.yoyo(\nthis))))); 'fafafa'.replace(/a/g, function(y) { yield y; __parent__;; yield y; });  instanceof __parent__|=<x/>) {if(<x><y/></x>[<><x><y/></x></>]) {yield;return; } else  if (__proto__.(#3={a:#3#} .@*:: 3.141592653589793)) __count__ }");
tryItOut("if({return window; }) if((new String(<x><y/></x>))((__count__.__lookupSetter__(\"__noSuchMethod__\")),  /x/  ? [z1,,] : window)) { if (let (prototype =  /x/ ) <x/>) {__count__ = <><x><y/></x></>;; } else {if(<><x><y/></x></>) export constructor; else  if (this) {; } else { } }} else  if (prototype = prototype) {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(<x/>){export *; }");
tryItOut("do {;  } while((.2.*) && 0)\n/*infloop*/M:for(__noSuchMethod__; undefined; \fwindow) constructor, prototype = 1e81;");
tryItOut("/*for..in*/M:for(__count__ = ((uneval(<x/>.propertyIsEnumerable(\"prop\")))) in this.__defineSetter__(\"prop\", function  __parent__ (__count__, prototype)<><x><y/></x></>)) {L: var __iterator__ = *::*, prototype; }");
tryItOut("/*for..in*/for(var [__iterator__, prototype] =  in __iterator__.getter getter= Math.sin.*) /*for..in*/for(var __parent__ = <x/> ^= <y><z/></y> in window) {{} }");
tryItOut("{export __count__;; }");
tryItOut("let(__iterator__ =  /x/g ) ((function(){{}})());");
tryItOut("throw StopIteration;");
tryItOut("yield ({ get prototype __proto__ (__proto__) { return <x><y/></x> }  });");
tryItOut("if() { if (null++) *;} else /*for..in*/for((-0) in (\f(function(y) { yield y; return;; yield y; })(<><x><y/></x></>))){yield; }");
tryItOut("{yield; }");
tryItOut("switch(\n<x><y/><\t/x>.__defineGetter__(\"yield\", ([1,,]).watch)) { default: break; break; case (__proto__ = *::*)[(eval(\"/*infloop*/for(let __parent__; <y><z/></y>; *) yield <x><y/></x>;\", <x><y/></x>))]: var constructor = 3, __parent__;break;  }");
tryItOut("let (prop = <><x><y/></\tx></>, prop = 3) { gc() }");
tryItOut("return; const __noSuchMethod__;");
tryItOut("/*infloop*/for((\n3.141592653589793.__lookupGetter__(\"prop\")); @foo >= <><x><y/></x></>;  /* Comment */<x/>) {gc()return; }\t");
tryItOut("/*for..in*/for(var prop in (((eval(\"return;\", 1.3)))(window(window).prop = 033)))<x><y/></x>");
