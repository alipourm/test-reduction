tryItOut("let(prototype =  /x/ , __parent__ = ({})) ((function(){let __parent__ = <><x><y/></x></>, __parent__ = [,];})());");
tryItOut("M:if(function(id) { return id } ? <><x><y/></x></> : __parent__) { if ((-0)) return; else {return case 0: export __parent__;break;  '' break; ;{} }}");
tryItOut("/*infloop*/M:while(<><xxx {__count__}={{}()} /></>){L:if([[1]]) {return 1.3; } else  if (<><x><y/></x></>) throw [[1]];(<x><y/></x>); }");
tryItOut("/*infloop*/while(.2){new Function; }");
tryItOut("do {if(#2=[__iterator__]) {return <y><z/></y>;function  constructor (__parent__, function::__count__) { return <><x><y/></x></> }  }if( /* Comment */3) {return  /x/g ; } else  if (<x><y/></x>.(-3/0))  /x/ ; } while((yield [#3={a:#3#}].filter(this) += ({ set __noSuchMethod__ __proto__ () { return (4. != this) } , prop setter: function  prototype (__count__, __iterator__) { throw function ([y]) { }; }  })) && 0);");
tryItOut("{break M; }");
tryItOut("L: /*for..in*/for(const [constructor, prop] = <><x><y/></x></>.__noSuchMethod__|=(({__iterator__: this, __noSuchMethod__: <><x><y/></x></> })) in __count__ = <x><y/></x>) <><ccc:ddd><!--yy--></ccc:ddd></>\n__noSuchMethod__ = @foo, prop;");
tryItOut("/*for..in*/for(var prop = undefined in <y><z/></y>) { /x/g ; }");
tryItOut("if( /x/g .propertyIsEnumerable(\"__iterator__\")) {;{} } else  if (*::*.__defineGetter__(\"__noSuchMethod__\", )) {export *; } else {gc()var set =  /x/ ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var window.__noSuchMethod__ in <x/>) {yield;let (prop = window) { var __count__ = [z1,,]; } }");
tryItOut("return constructor.((p={}, (p.z = <><xxx {__parent__}={this.@*.__lookupSetter__(\"__count__\")} /></>)()));");
tryItOut("{[1,2,3,4].slice }");
tryItOut("L:if((<x><y/></x>)[true]) { if (__count__.__count__ setter= (function  __noSuchMethod__ (__proto__)@foo).call) {return;(<x/>); }} else {/*for..in*/for(__parent__ in @foo) {yield; }(<x><y/></x>); }");
tryItOut("/*infloop*/for(let (*::*)((4.);) = (prop.constructor getter=  /x/g  != undefined); (({__iterator__: (<><x><y/></x></> if (<><\tx><y/></x></>)), constructor: (let (constructor = <x><y/></x>) (__iterator__.__parent__ = window)) ||  /x/  })); ([[new (function (__parent__, prototype) { return  /x/g  } )() if (<x><y/></x>)]].some(Math.pow))) {function (__count__)__parent__/*infloop*/while(__proto__){;return; } }");
tryItOut("/*for..in*/L:for(let prop in ((gc)(window))){break ;return; }");
tryItOut("L:if((yield [15,16,17,18].filter( \"\" , *))) gc() else  if (new (if(__proto__)  else {__proto__;(<x><y/></x>); })(({__iterator__: __proto__ = (-0), __iterator__: (window); ? __count__ = __count__ : __noSuchMethod__ }), ((3.141592653589793.throw(<x><y/></x>)) ? (({<x><y/></x>: null, __parent__ setter: *::* })) : 0/0--\f))) export *;(<y><z/></y>); else yield @foo;");
tryItOut("with(3.141592653589793[({a2:z2})]){export *;{} }");
tryItOut("{/*for..in*/for(var __iterator__ = <x/> in #1#) {return; } }");
tryItOut("do {; } while((eval(\"(__noSuchMethod__ =  '' )\", eval(\"return <x/>;\", <x><y/></x>))) && 0);");
tryItOut("let([({ __count__: constructor, prop: prototype }), ({ prototype: __iterator__ }), ]) { let(__count__ = (#2=({prototype: {}}))) { let(__noSuchMethod__ = undefined, __noSuchMethod__) ((function(){return;})());");
tryItOut("/*infloop*/while([(<x/>.__iterator__ = *.@foo).throw(eval)]){if((this.zzz.zzz)) {({}).hasOwnPropertyyield; } else {yield; }<><x><y/></x></>; }");
tryItOut("/*infloop*/for(const ({ prototype: __parent__ }) = (prop.__defineSetter__(\"prop\", function  __proto__ ()<x><y/></x>) <= (@foo %= 1.2e3)); __proto__.__noSuchMethod__; (__iterator__.constructor = <><x><y/></x></>)((<x/> || <y><z/></y>)\f)) /*infloop*/do { get __count__(prop, __count__) { <x><y/></x>; }  } while(let (__noSuchMethod__ = <><x><y/></x></>, prop = <><x><y/></x></>) ());");
tryItOut("/*infloop*/for((( /* Comment */<x/>).__defineGetter__(\"__proto__\", eval)); ((p={}, (p.z = [<x/> for (__iterator__ in *)])())).@foo; (undefined.valueOf(\"number\")).valueOf(\"number\") < ({\fprototype: (__count__ = <><x><y/></x></>), __count__: (__count__ = -0) })) /*infloop*/for('fafafa'.replace(/a/g, (new Function(\"return;\"))); new Date(Function); this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) {/*infloop*/for(var prototype/*\n*/; this; <><x><y/></x></>) {var __parent__, prototype =  \"\" ; } }");
tryItOut("with({__noSuchMethod__: 1.2e3.*})yield true;");
tryItOut("break L;");
tryItOut("with({__noSuchMethod__: export __count__}){if(#3={a:#3#}) {return;yield; }({}); }");
tryItOut("break L;");
tryItOut("if(__noSuchMethod__) { if (constructor) {false; }} else export *;");
tryItOut("{__iterator__ }");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = \n<x><y/></x> -  in undefined) {gc()const __iterator__; const prototype; }");
tryItOut("L:if(@foo) {return this; } else  if (*::*) continue M; else {__parent__ = this, prop = #3={a:#3#};return; }");
tryItOut("/*for..in*/for(var prototype in (( /x/g )(<y><z/></y>)));");
tryItOut("(\n<x><y/></x>);");
tryItOut("/*for..in*/for(const __iterator__ in 1e81) {gc()} }");
tryItOut("{{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in (new Date())) {break M\n<><x><y/></x></> }");
tryItOut("throw <x><y/></x>;\ngc()\n");
tryItOut("if((new new (<x><y/></x>)(*::*,  \"\" )())) { if (window\n) ((throw *)); else {/*for..in*/for(prototype in 0x99) (undefined);\r \"\" \ngc() }}");
tryItOut("with({}) { {} } ");
tryItOut("L:do {({}).__lookupGetter__ } while((<x><y/></x> for (__count__ in <><x><y/></x></>)constructor getter: function(y) { yield y; throw <y><z/></y>;; yield y; }) && 0);");
tryItOut("M:if((function(q) { return q; })(this.__defineSetter__(\"__proto__\", function  __iterator__ () { yield 1e4 } )).__defineGetter__(\"prop\", (1 for (x in [])))) {true; } else (__iterator__ = true)");
tryItOut("yield null;");
tryItOut(" /x/g  = __proto__;");
tryItOut("for(let y in []);");
tryItOut("if((p={}, (p.z = ((yield ({a1:1}))))())) <x/>; else __proto__, prop\ngc()\n");
tryItOut("/*for..in*/for(var ((prop\f--))(new function ()(-1)()) in ((eval)((export __parent__))))/*infloop*/for(({a2:z2}).throw(@foo); <x><y/></x>; (\n[z1])) {export __noSuchMethod__;; }");
tryItOut("if([,,z1]) {__proto__ = <><x><y/></x></>;{} } else yield [,,];");
tryItOut("M:if(*::*.prop.__lookupSetter__(\"constructor\")) { if (new (__parent__)([function ([y]) { } &= (-0)].filter(<><x><y/></x></>))) /*infloop*/do { } while((export prop));} else /*for..in*/for(var __parent__ = #1# in <x><y/></x>) throw ({a2:z2});");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = [15,16,17,18].sort((([1,2,3,4].map).apply).call, (new (function(q) { return q; })(\t@foo, <><x><y/></x></>))) in ((function ([y]) { })([], <x><y/></x>)).hasOwnProperty(\"constructor\")) M:if(*::* instanceof __iterator__) throw @foo; else {yield; }");
tryItOut("/*for..in*/for(let __iterator__ in ((/a/gi)((__proto__.valueOf(\"number\")))))/*for..in*/for(const prototype in ((gc)(prop)))prop, prop = null;");
tryItOut("return;\nif(({a1:1})) { if (true) {__iterator__;; }} else {}\n");
tryItOut("{__count__, __iterator__;yield; } const constructor;");
tryItOut("([1,,]);");
tryItOut("if(((uneval(__iterator__)))) {yield; } else  if ((Math.sin)()) {gc() } else {yield  /x/ ; }");
tryItOut("if(<><>yyy</></>) { if (\r__iterator__) {return *\nyield this;export *; } else try {  } catch(x::__proto__) { for(let y in [5,6,7,8]) constructor = __proto__; } finally { this.zzz.zzz; } }");
tryItOut("{__iterator__ = <><x><y/></x></>;break L; } const prop;");
tryItOut("/*for..in*/M:for(const [__iterator__, __parent__] = this.zzz.zzz in [z1,,]) {throw ({});gc() }");
tryItOut("const __count__, constructor = prop;yield this;");
tryItOut("let (function::prototype = yield this, prop = (__proto__.((function::__iterator__.__count__ = eval(\"export *;\", prototype))))) { \n{} }");
tryItOut("const __iterator__ = 0x99;gc()");
tryItOut("if(([11,12,13,14].some) ^ function ([y]) { }.eval()) { if (this.__defineGetter__(\"__parent__\", (({}).__lookupGetter__).call)) } else let (__iterator__ =  \"\" .watch(\"__iterator__\", function () { export *; } ).__parent__) { return; }");
tryItOut("M:if(*::*) { if (__proto__ = #3={a:#3#})  else  \"\" ;}");
tryItOut("prop = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in 0.1) L:do {yield;yield; } while((({a2:z2})) && 0);");
tryItOut("let(__parent__) ((function(){__iterator__ = function::__count__;})());");
tryItOut("L: {{};return this; }");
tryItOut("/*for..in*/M:for(var ({ __count__: ({ __iterator__: function::constructor }), __parent__: prototype }) in window) /*for..in*/for(__count__ = -0 in window) {({}).__lookupGetter__yield @foo; }");
tryItOut("/*for..in*/for(var [__parent__, __noSuchMethod__] = __noSuchMethod__ = true.eval([15,16,17,18].some(function (prototype) { return 0x99 } , <x/>)) in [__proto__ for (__parent__(0.1) in 1.3) for (constructor in <><x><y/></x></>)]) yield  /x/ ;");
tryItOut("/*infloop*/for((eval(\"yield <x><y/></x>;\", {}) * <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(@foo.watch(\"__parent__\", [1,2,3,4].map))); (undefined >= <y><z/></y>)((this.__defineSetter__(\"constructor\", gc)) * __noSuchMethod__); constructor.propertyIsEnumerable(\"__count__\")) __noSuchMethod__, prototype;");
tryItOut("return;");
tryItOut("/*for..in*/M:for(let __proto__ in <><x><y/></x></>) {[1,2,3,4].slicelet __proto__; }");
tryItOut("if(@foo) { if ([11,12,13,14].sort :: <{__noSuchMethod__}><ccc:ddd><!--yy-->\f</ccc:ddd></{__noSuchMethod__}>.(new ((1 for (x in [])))())) return; else {{{} } }}");
tryItOut("continue ;\nexport *;\n");
tryItOut("/*for..in*/\nfor(var [__iterator__, constructor] = (function ([y]) { })() in <x><y/></x>) const constructor = __noSuchMethod__;");
tryItOut("{}\n; const __proto__\ntrue;");
tryItOut("if(false) {{} }");
tryItOut("/*for..in*/for(const prop in ({a1:1})) {throw __parent__; }");
tryItOut("{return <x><y/></x>; /x/g ; }");
tryItOut("__proto__");
tryItOut("if(({get: (uneval(1e+81))})) {/*infloop*/for((<x><y/></x> for each (prototype in 3) for (__noSuchMethod__ in @foo)); ((p={}, (p.z = this.valueOf(\"number\"))())); prop ^= constructor) *; } else {[,].__count__ = constructor; }/*infloop*/do {export __noSuchMethod__;(<y><z/></y>); } while(this);");
tryItOut("do continue ; while(((({prototype: <x><y/></x> >= <><x><y/></x></> }))) && 0);");
tryItOut("yield new (function(y) { yield y; var __iterator__ = this;; yield y; })();");
tryItOut("/*infloop*/for(let prototype = (window.eval(this)) -= __count__|=window[(window.valueOf(\"number\")--)]; *::*.__count__; @foo) let __count__, prop = *::*;");
tryItOut("@foo |= <><zzz>(__iterator__ = <x><y/></x>)</zzz></>");
tryItOut("/*infloop*/\fdo {throw <><x><y/></x></>return __count__; }\t while(<xxx {__parent__}={this} />.(new Boolean()));");
tryItOut("M:if(__iterator__.__iterator__ = <><x><y/></x></>.*)  else  if (('fafafa'.replace(/a/g, function  __parent__ (<y><z/></y>) { let __count__; } ))) export *; else continue L;");
tryItOut("{if(window.eval(#1=[#1#])) { if (#2=({__count__: #0=({__noSuchMethod__: window})})) var __parent__ = <x><y/></x>, prototype; else yield <><x><y/></x></>;} }");
tryItOut("/*for..in*/M:for([__count__, prototype] = 0.1.isPrototypeOf(window) in eval(\"true\", <x><y///h\n></x>)) {;return ({}); }");
tryItOut("/*infloop*/L:do yield; while(true);");
tryItOut("{export __proto__; }");
tryItOut("if(<><{prototype}> </{prototype}></>) { if (eval(\"prop\", new ((1 for (x in [])))().*)) {export *;(5.0000000000000000000000);yield window; } else let __iterator__ = [1], __iterator__;}");
tryItOut("/*infloop*/for(((\fyield  \"\"  ^ false)); this.__defineSetter__(\"__iterator__\", __iterator__); (<><x><y/></x></>.throw(({a2:z2})) == /a/gi(((#1= \"\" ) << delete undefined), (#1=[#1#] for each (__iterator__ in  /x/ ))))) {yield <><x><y/></x></>;(prototype); }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(var __proto__ = ~<><bbb xmlns:ccc=\"prototype = window\"><ccc:eee></ccc:eee></bbb> </>.((*::* &= prop)) in [[]]\n.throw(( /* Comment */let))) { }");
tryItOut("switch(undefined) { default: with( /x/ ){yield;yield; }break; yield <x><y/></x>; }");
tryItOut("{}");
tryItOut("this.zzz.zzz;");
tryItOut("yield prototype.__proto__;var constructor = <x><y/></x\f>;");
tryItOut("\f;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in ((<><x><y/></x></>).watch())) ");
tryItOut("if(true[(1e-81.__proto__)] += [({__iterator__: this, constructor: this }) if (__parent__)]) {if(<><x><y/></x></>) {( /x/ ); } else break ;constructor = this, __count__ = true; }");
tryItOut("export *;");
tryItOut("/*infloop*/for(__count__ = ({a1:1}); ({__noSuchMethod__ setter: <x/>, __count__ getter: (<y><z/></y>).__defineSetter__ }).__defineSetter__(\"__parent__\", Math.pow); function(id) { return id }) {__noSuchMethod__: (<x/> in <><x><y/></\fx></>) }");
tryItOut("if((prop = <><x><y/></x></>++.watch(\"__parent__\", prop = this.__defineSetter__(\"__count__\", function  constructor (__iterator__, __count__) { yield this } )))) let [__proto__, function::prop, , , ], __proto__ = [1]; const __noSuchMethod__;");
tryItOut("with({prototype: })yield this;");
tryItOut("/*for..in*/for(const __count__ in (((1 for (x in [])))(typeof  /* Comment */+<><x><y/></x></>)))yield");
tryItOut("(false);");
tryItOut("return <x><y/></x>;");
tryItOut("if((eval(\"@foo\", *::*).propertyIsEnumerable(\"__iterator__\")) %= (__noSuchMethod__.prop setter= Function === constructor =  \"\" )) { if (__iterator__ & <x><y/></x> =  /x/ .@foo) {prototype, prototype = undefined;for(let y in [5,6,7,8]) __proto__ = __noSuchMethod__; } else while((<y><z/></y>) && 0){let __iterator__ = this; }}");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("while((new RangeError(.2, 1e81)) && 0)const constructor = ({}), prop = <><x><y/></x></>;");
tryItOut("; const __count__;");
tryItOut("let (constructor) { case 5: return (<>)<x><y/><\t/x><>;break; default: if(({__count__: @foo, __noSuchMethod__: this })) {} else  if ((new /a/gi(<><x><y/></x></>, <><x><y/></x></>))) var constructor, __parent__;break; const __proto__ = 033, constructor;break; case 7: return this\f;break; break;  }");
tryItOut("{let (({ prototype: __proto__\t, prototype: __noSuchMethod__ }) = undefined, prototype = {}.watch(\"__proto__\", (1 for (x in [])))) { const prop; } }");
tryItOut("[1]\n;");
tryItOut("L:while(([<bbb xmlns:ccc=\"@foo &= <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb> if (<x><y/></x>.(null))]) && 0)Function");
tryItOut("(window)\n");
tryItOut("let(constructor) { throw function::constructor;");
tryItOut("while((delete [z1,,]) && 0)continue \n");
tryItOut("/*infloop*/while(prop.(get)){{{}yield  /x/ ; }return; }");
tryItOut("return;");
tryItOut("L:if((constructor)) { if ( /* Comment */ /x/ ) constructor, prop else {({}) }}");
tryItOut("/*infloop*/do throw *; while(__count__ = [,,z1].valueOf(\"number\"));prototype;");
tryItOut("constructor: #1=[new function(q) { return q; }() ? [[1]]./*\n*/__noSuchMethod__ : function () { yield <x/> } ]");
tryItOut(";\n__noSuchMethod__, __count__\n");
tryItOut("/*for..in*/L:for(const __iterator__ in [,,]) throw __noSuchMethod__;");
tryItOut("let");
tryItOut("/*for..in*/M:for(let prop in (([1,2,3,4].slice)(prototype = #3={a:#3#}.yoyo(1e81) || <x><y/></x>.isPrototypeOf(this)))){throw this.__defineSetter__(\"constructor\", undefined); }\f");
tryItOut("throw __parent__;");
tryItOut("do ; while((((new Function(\"export __proto__;\"))).call((<x><y/></x>.prop = @foo), #1=[*::*])) && 0);");
tryItOut("with({__noSuchMethod__: ([15,16,17,18].map((new Function).call, +false))}){[,,z1]if(* / *) { if (([(-0)])) } else const __iterator__ = this; }");
tryItOut("with({prop: this.__defineGetter__(\"__noSuchMethod__\", Math.sin).propertyIsEnumerable(\"__noSuchMethod__\").unwatch(\"prop\")}){let (__count__, prototype) { yield  \"\" \n }return this; const prop; }");
tryItOut("/*for..in*/for(var setter in ((constructor &=  '' )(this))); const __noSuchMethod__;");
tryItOut("if(({ constructor: (\n{ __parent__: ({ prototype: constructor }) }) }) = [15,16,17,18].sort(({}).__lookupGetter__, typeof <y><z/></y>)) { if () {<x><y/></x>;gc() } else {var __proto__, constructor = this;; }}");
tryItOut("/*for..in*/for(var prototype in ((<><>window</></>)(@foo >> false))){break ;({}).__lookupGetter__ }");
tryItOut("yield [z1]\nexport *;");
tryItOut("/*for..in*/for(const __parent__ in new <y><z/></y>((Math.pow).call(-1, true, <x><y/></x>), true)) ");
tryItOut("L: ;");
tryItOut("with((this.zzz.zzz))(0x99);");
tryItOut("/*infloop*/while((__parent__ = true /= <x><y/></x> <= [,,])){{} }");
tryItOut("{/*for..in*/for(__count__ in ((Function)(#1=[#1#]))){continue ; } }");
tryItOut("if(<x/>(<><x><y/></x></>, <x/>)) break L; else  if ((uneval(( /x/g  in true)))) {Math.sin }L:while((<x><y/></x>) && 0)return false;");
tryItOut("M:do {prop = undefined;const __proto__; } while((<y><z/></y>[null] ^ prop = false) && 0);");
tryItOut(";gc()");
tryItOut("let (__count__ = (eval(\"*;\", <y><z/></y>)), prop) { function(y) { yield y; const __iterator__ = <y><z/></y>, __noSuchMethod__;; yield y; } }");
tryItOut("/*for..in*/for(__parent__.__iterator__ in false) return ((uneval(@foo)));");
tryItOut("throw -1; const __count__;");
tryItOut("if(((Math.sin((-1))) >>> (new *()))) export prop; else continue ;\nwith({}) throw StopIteration;\n");
tryItOut("/*infloop*/for([__parent__, , constructor, , __count__] = <x><y/></x>++; this.zzz.zzz; new (__parent__)(*)) {}");
tryItOut("M:if(1.3. return  /x/ ;__lookupSetter__()) throw @foo; else  if (new Date(@foo, setter)) {export prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in (yield .2)) 1e4;");
tryItOut("/*for..in*/for(let __iterator__ in (__noSuchMethod__.hasOwnProperty(\"constructor\"))) if((this).call([,,], )) ");
tryItOut("for(let y in []); const __proto__;");
tryItOut("export prototype;\nconst __count__\n");
tryItOut("");
tryItOut("switch([[1]]) { default: {}break;  }");
tryItOut("return;");
tryItOut("/*infloop*/for(<>this[<x><y/></x>.__lookupGetter__(\"__iterator__\")]</>; [__proto__ = <x><y/></x>].sort(((~4..@*) < prototype.__parent__ setter= function  __proto__ (constructor, __count__)<><x><y/></x></>).__defineSetter__); <zzz>[11,12,13,14].some</zzz>.((yield new String(033, window)))) {}\nif(__proto__) { if (true) {export constructor;Math.sin } else {export __parent__; }}");
tryItOut("yield <x><y/></x>;");
tryItOut("with([<x/> for each (constructor in (yield <x/>)) for (__proto__\f in <>function(id) { return id }</>) for each (__count__ in null) for each (prototype in __parent__ = prop, __noSuchMethod__)]){export *;do { } while((window) && 0); }");
tryItOut("{if(window.propertyIsEnumerable(\"__parent__\")) {throw ({a2:z2});return; } else  if ((new  \"\" )) {yield window; } }");
tryItOut("/*for..in*/for(__iterator__ = (new RegExp((((-1))(this, __iterator__)), function  __count__ () { return  case  = this.__defineSetter__\t(\"prop\", function(y) { yield y; {}; yield y; }) } )) in (yield <x><y/></x>) - (new (function(id) { return id })(<y><z/></y>, <x><y/></x>) || <employee id=\"1\"><name>Joe</name><age>20</age></employee>)) /*for..in*/for(var [__iterator__, prop] = (#0=*::* -=  '' ) in <y><z/></y>) undefined;");
tryItOut("/*for..in*/for(const __iterator__ in  /x/ ) {{}var __noSuchMethod__ = 0x99, __proto__; }");
tryItOut("/*infloop*/\fwhile(delete yield __iterator__)/*for..in*/L:for(const __count__ = window in false) {var __count__, __noSuchMethod__;(eval).apply }");
tryItOut("function::__parent__ = __count__.constructor;");
tryItOut("/*infloop*/for(const __noSuchMethod__; {switch(__count__ = false) { default: break; break; export *;window;case function ([y]) { }.__defineGetter__(\"__iterator__\", function(q) { return q; }):  } }; (constructor--).*) function(q) { return q; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x><y/></x>) {Functionyield __noSuchMethod__; }");
tryItOut("L:if(#1=[#1#].__defineGetter__(\"__proto__\", function(q) { return q; }) for (prop in <x><y/></x>)) M:if(<y><z/></y>.yoyo(<x><y/></x>)) {var __noSuchMethod__, prop = 0/0; } else {} else  if (<>/a/gi.throw(undefined.valueOf(\"number\") ? <x><y/></x>.__lookupSetter__(\"__proto__\") : (__proto__)[__noSuchMethod__])</>.(#1='fafafa'.replace(/a/g, window))) {if(window) { if (__proto__) {gc() } else export *;}export __noSuchMethod__; }");
tryItOut("{if( /* Comment */new false()) { if (\n<x><y/></x>.unwatch(\t\"each\")) {return;export *; } else {{} }}yield (uneval(*)); }");
tryItOut("/*for..in*/L:for(let __count__ = ((Math.sin)((<x/>.watch(\"prototype\", [,,])))) in try { gc() } finally { export *; }  = [,,z1].constructor = __noSuchMethod__, __iterator__) {export *;with(<y><z/></y>) }");
tryItOut("{M:if(0.1) { if (<x/>) {const __noSuchMethod__ = __iterator__, __noSuchMethod__ = [,]; } else yield true;}break ; }");
tryItOut("/*infloop*/while(window){export __parent__with({prop: let (prototype = [[]]) <x><y/></x>}){if(x::__noSuchMethod__) { if (undefined) return; else prototype} } }");
tryItOut("let (prototype = prototype.__parent__ getter= Math.pow) { var constructor =  '' ;var constructor, prop = <y><z/></y>; }");
tryItOut("yield 1e4;");
tryItOut("with({}) { try { constructor } catch(prop) { try { let let = <><x><y/></x></>; } catch(constructor if [this].map([1,2,3,4].slice)) { return; } finally { {} }  }  } ");
tryItOut("if((this.__defineSetter__(\"prop\", Math.pow)++))  else  if (@foo -= __noSuchMethod__ @ __parent__+= /x/ ) {{}return; } else ({ __count__: ({ __count__: ({ prototype: constructor }), __noSuchMethod__: [, []] }), prop: ({ __proto__: ({ __noSuchMethod__: ({ __noSuchMethod__: __iterator__, prop: __noSuchMethod__ }), __parent__: prototype }), __parent__: [__count__, [], , ({ constructor: __iterator__ })] }) }), __parent__");
tryItOut("with({}) { return <x><y/></x>.(<y><z/></y>) ? constructor : <x><y/></x>.unwatch(\"prototype\"); } ");
tryItOut("/*for..in*/for(const prototype = __iterator__ = ([11,12,13,14].sort).((uneval(<x><y/></x>))) in setter = <x/>) if((uneval(<y><z/></y>))) export constructor; else  if (prop %= <x/>[Boolean( /x/g )]) __proto__ =  '' ;");
tryItOut("/*infloop*/M:while((prop-=this.__defineSetter__(\"__count__\", (new Function(\"gc()\")))))if((this.__defineGetter__(\"__iterator__\", function(y) { yield y; break L;; yield y; }).__lookupGetter__(\"__iterator__\"))) #1#; else  if () {export *;\n\n } else { { yield __parent__ } if(undefined) { if () export __count__;} else {gc() } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const ({ __parent__: __parent__ }) in yield #2=[(let (constructor = <x><y/></x>)  /x/g //h\n)]) {{if(false) gc() else  if (@foo) {yield; } } }");
tryItOut("/*infloop*/M:do gc() while(( /* Comment */<y><z/></y>));");
tryItOut("L:do {var prototype = window, __proto__ = this; } while((<x><y/></x> | <y><z/></y>.propertyIsEnumerable(\"[, __noSuchMethod__, __iterator__]\")) && 0);");
tryItOut("L: <><x><y/></x></>\f");
tryItOut("/*for..in*/for(const [constructor\t, __proto__] = this.zzz.zzz in \n<><x>\r<y/></x></>) {yield <x><y/></x>;(<x/>).\twatch }");
tryItOut("/*for..in*/for(__noSuchMethod__ in this) var __iterator__, __parent__ = true;");
tryItOut("if(((p={}, (p.z = 5.0000000000000000000000)()))) __proto__, __count__; else  if ((p={}, (p.z = <x><y/></x>.yoyo(window))())) {{/*for..in*/for(let function::prototype in  /x/ ) {{}yield; }export __noSuchMethod__; } }");
tryItOut("if((__parent__.(constructor = -3/0))) {throw <><x><y/></x></>; const prop;with\t(prototype){(window); } } else __proto__");
tryItOut("/*infloop*/for(var constructor; @foo !== <x><y/></x>; <y><z/></y> .. *::*) gc()");
tryItOut("M:if(<x/>) {const __count__, __iterator__ = *; } else  if (0/0) {null }");
tryItOut("while(([] = [(-1) for (constructor in __parent__)].valueOf(\"number\")) && 0)(window);");
tryItOut("/*for..in*/for(var __proto__-=*.valueOf(\"number\") === this['__iterator__'] in ((/a/gi)((window += k))))if(*::*) { if ([z1,,]) {throw 0; } else {throw  /x/g ; }}");
tryItOut("if(this.__defineSetter__(\"prototype\", function  __parent__ (__iterator__, __proto__) { return 1e+81 } )) {if(({__iterator__:  '' ,  get __parent__ prop () { throw <y><z/></y>; }  })) ; else  if (({prop: <y><z/></y>, __iterator__: window })) {throw __proto__; } else {var try { var __iterator__ = prop, __noSuchMethod__ = undefined; } finally { prototype }  = this; } } else while(( /* Comment */*::*.__defineGetter__(\"constructor\", ((__count__).watch).apply)) && 0){return;gc() }");
tryItOut("M:if(([(uneval(@foo)) >= [constructor = 033 for each (__proto__ in __count__)] for each (function::__count__ in this) for (prototype in <x/>) if (<x/>)])) { if ((((window for each (__noSuchMethod__ in <><x><y/></x></>))).*.__iterator__)) ((-1) >>= 3/0)} else {;function  __proto__ (__iterator__) { return @foo }  }");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("let (__count__ = ( /x/ )) { gc() } const __proto__;");
tryItOut("/*for..in*/for(var [__parent__, prototype] =  \"\" ++ in false) gc()");
tryItOut("/*infloop*/for(Function(__noSuchMethod__+=<x><y/></x>); ({ prop: __proto__, prototype: prototype }) = ({ __count__: prop, __parent__: function::prop }); (this.__defineGetter__(\"prototype\", (function  __iterator__ () { (*::*); } ).call).watch(\"__noSuchMethod__\", (1 for (x in []))))) {continue L; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = [15,16,17,18].sort(function (get, __proto__) { yield; } , <><x><y/></x></>) *= window ? *::* : <y><z/></y> in __iterator__ = 'fafafa'.replace(/a/g, Math.sin)--) if([, ]) {;return <x/>; }");
tryItOut("if( /x/ ) { if ([]) ; else return;}");
tryItOut("let (({ __noSuchMethod__: [, window[''], ({ __proto__: __proto__, __count__: __count__ }), prop, ] }) = (__iterator__ for (__parent__ in ()) if (<x><y/></x>))) { with({}) __count__ = constructor; }");
