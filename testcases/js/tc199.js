tryItOut("with({__iterator__: null /= <><x><y/></x></> .@x:: ++<><x><y/></x></>}){/*for..in*/for(var [__iterator__, __noSuchMethod__] = prototype = ((yield __proto__)) in window) {break ;continue M; }/*for..in*/for(let [delete, __count__] = () in {}) {return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [, ({ prototype: __count__, __iterator__: __parent__ }), , prototype, ] = prototype) {/*infloop*/L:for(var __parent__; eval(\"({__iterator__: window})\", *::*.__defineGetter__(\"prototype\", #1#)); this * (constructor.function::delete getter= function(y) { yield y; yield;; yield y; })) yield; }");
tryItOut("if([[]]) {;continue ; } else {var __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __iterator__: ({ __parent__: __count__, __count__: prop }), prototype: ({ prop: constructor, prop: __count__ }) }) in new (Math.sin)((function ([y]) { })(), #1#)) prop = __iterator__;");
tryItOut("switch([(__noSuchMethod__ = <><x><y/></x></>) if (<><x><y/></x></>)]) { case \n0/0: return;break; default: break;  }");
tryItOut("return -3/0");
tryItOut("/*infloop*/for(const __noSuchMethod__ = (\n/a/gi()); (yield <><x><y/></x></>); ((__noSuchMethod__.__count__) <<= ([ /x/  for (__iterator__ in window)]) += ((<><x><y/></x></>)[[]]))) {__parent__ = 1.2e3;(<x><y/></x>); }");
tryItOut("if(<y><z/></y>) break ; else {yield;yield <y><z/></y>; }");
tryItOut("/*infloop*/for(const __parent__; (( .watch(\"constructor\", 'haha'.split)).__lookupSetter__(\"constructor\")); <y><z/></y> === this) {with({__count__: this.__defineSetter__(\"prototype\", gc)})L: {yield; } }");
tryItOut("let([, ], prop) ((function(){with({}) for(let y in [5,6,7,8]) this.zzz.zzz;})());");
tryItOut("throw prototype;");
tryItOut("gc()");
tryItOut("switch(@foo.throw( '' )) { default: case (({ yield window;: __parent__, __proto__: [__iterator__, , , ({ __count__: __noSuchMethod__, prop: prop })] }) = prototype)[#\t0=[(yield <x><y//h\n/></x>) ? @foo.unwatch(\"__proto__\") : __iterator__]]: /*infloop*/L:do <><x><y/></x></>; while((yield  '' ) .@*:: * .. *);break;  }");
tryItOut("M:if(function(id) { return id }) {gc(); } else  if (__iterator__.( /x/ )) var constructor, __count__ = constructor");
tryItOut("return *::* >>= this;");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*/for(const __count__ in [1,,]) {return *;window; }\n/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in ( \"\" .hasOwnProperty(\"__parent__\"))) {throw  '' ;yield (<y><z/></y> ? <y><z/></y> :  /x/ ); }");
tryItOut("{export prop; }");
tryItOut("L: prop = window, __iterator__;");
tryItOut("if(new (__proto__)((({a2:z2}))([z1,,], 0/0))) { if (((eval(\"prototype, __parent__;\", __parent__)).eval((__proto__.x::__proto__ setter= function(q) { return q; })))) {return @foo;return null; }} else export __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in __noSuchMethod__) {{}\t }");
tryItOut("export prop;false, 1e4return;");
tryItOut("yield");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = (p={}, (p.z = #1#)()) in <x/>\t) {export *;var __noSuchMethod__ = {, __count__; }");
tryItOut("if(({ prop: ({ __iterator__: prop }) }) = ((@foo ? 1e4 : <y><z/></y> if (1.3))).__iterator__ = (p={}, (p.z = <x/>)())) {let __noSuchMethod__; }");
tryItOut("let(__noSuchMethod__, __noSuchMethod__) ((function(){for(let y in []);})());");
tryItOut("let(__parent__ = __parent__+=new window(constructor), constructor = ({}).hasOwnProperty) ((function(){yield yield __proto__;})());");
tryItOut("if([__proto__ = 1.3]) { if (eval(\"((gc)( /x/g , true))\",  /* Comment */prototype.__lookupSetter__(\"__proto__\"))) {const __parent__ =  ''  }} else /*for..in*/for(constructor in <x><y/></x>.(__iterator__)) return __proto__;");
tryItOut("/*for..in*/for(var __count__ =  /x/g  in function(id) { return id }) {__iterator__ = __noSuchMethod__;return; }");
tryItOut("/*for..in*/for([prototype, function::prop] = this in <><x><y/></x></>) {__noSuchMethod__with({__proto__: true}){;const __parent__ = false; } }");
tryItOut("/*infloop*/L:do \t{ } while((yield __count__ = 1e4)\t);");
tryItOut("with({}) let(__parent__ = <><x><y/></x></>) ((function(){throw prop;})());");
tryItOut("with({__proto__: 'fafafa'.replace(/a/g, <y><z/></y>)}){export *;\ngc()\n }");
tryItOut("if(typeof constructor = <x><y/></x>.throw(__proto__ = [1,,])) { if (({a2:z2})) /*for..in*/for(let constructor in this) yield ({a2:z2});} else M:if(new (function  constructor ( { return prototype } )()) { if (<x><y/></x> ?  ''  : [1]) \t{return; } else let __iterator__;}");
tryItOut("/*infloop*/for(\nnew RegExp(<><x><y/></x></>); (prototype = <y><z/></y>); __proto__ = (<x><y/></x>.__count__).__iterator__ = (0x99.__parent__ = <><x><y/></x></>).__lookupSetter__(\"prop\")++) continue L; const constructor;");
tryItOut("/*infloop*/L:for(\n \"\"  - *::*.hasOwnProperty(\"prop\"); null.constructor; this.zzz.zzz) yield;");
tryItOut("/*for..in*/for(let (__parent__) in (((constructor = <x><y/></x> if (<x><y/></x>)))((* < <x><y/></x>)))){ } const __noSuchMethod__;");
tryItOut("if((function ()<y><z/></y>.propertyIsEnumerable(\"__iterator__\"))((undefined\n), prop+=prototype.prop = -3/0)) if( '' ) yield <><x><y/></x></>;");
tryItOut("if(default: break; case /*for..in*/for(let __parent__ in true) return\n: case (false)[__proto__]: ) { if ([<x><y/></x> ^ (-1)].some((1 for (x in [])))) {export *; } else {export __parent__;/*infloop*/L:for(let __count__; let (prop = <><x><y/></x></>) *; ({prop setter: [1,2,3,4].map, constructor: __noSuchMethod__ })) __iterator__ = this, __proto__ = function ([y]) { }; }}");
tryItOut("/*for..in*/for(const __parent__ in (((new Function(\"/*infloop*/for([, ] = window >> 033; new (delete #1=[#1#])(void undefined, 033); (uneval(@foo))) {yield undefined; }\")))(({__proto__: ({}).unwatch(\"__proto__\"), __parent__ getter: function(q) { return q; } })))){var prototype = <x/>; }");
tryItOut("yield <employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("let(prototype) { __iterator__;");
tryItOut("if((prototype.valueOf(\"number\"))) yield; else {return; }");
tryItOut("let(__proto__ = (eval).call()) ((function(){for(let y in [5,6,7,8]) yield true.prototype;})());");
tryItOut("/*infloop*/for(const ({ constructor: constructor }) = __parent__%=this; window; (__parent__+=<x><y/></x>)) {yield;continue ; }");
tryItOut("var __iterator__ =  '' ;\nthrow null;\n");
tryItOut("if([(<><x><y/></x></> ^ prop)\t for (__iterator__ in <x><y/></x>.(<y><z/></y>)) for each (function::constructor in *::*) if ( /x/g )]) if((prop(*::*,  /x/g ))) \f{ if ((this.zzz.zzz) = <x><y/></x>) {return <x/>;#1#; } else { }}");
tryItOut("/*infloop*/for(this.__defineSetter__(\"prototype\", function(y) { yield y; throw null;; yield y; }); function  __iterator__ () { return [z1] } ; __iterator__.(set = (eval(\"0/0\", constructor)) >>> [prototype for (__count__ in <><x><y/></x></>)])) /*for..in*/M:for(var prop in (window);) throw prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for \t each(prop(<><zzz>(function ([y]) { })()</zzz></>) in __parent__ ? __noSuchMethod__ : constructor) break L\n/*infloop*/while(eval(\"yield  /x/g ;Function\", ([11,12,13,14].some)))return ( ''  >>>=<><x><y/></x></> .@x:: (-0));");
tryItOut("/*infloop*/while((<><x><y/></x></> ? this : <y><z/></y> .@ (<><x><y/></x></>.__defineGetter__(\"__proto__\", [[1]])).@*))/*for..in*/M:for(const \t '' ['__parent__'] in <y><z/></y>) export *;");
tryItOut("/*infloop*/M:for(((@foo)(*)); (__parent__.arguments setter= Math.pow); [z1].unwatch(\"__iterator__\")) {L:if((prop = __count__)) continue M;export prototype; }");
tryItOut("if((eval(\"(~4.)\", this.__defineSetter__(\"constructor\", function  x::__parent__ (__count__, function::prototype) { return ({}) } )) ? (__noSuchMethod__ = <><x><y/></x></>) : __iterator__ for each (__iterator__ in <x/>))) yield <x/>; else gc()");
tryItOut("__noSuchMethod__\t: <x><y/></x>\n { return <x/> } ");
tryItOut("let ([, , [], __count__], ({ constructor: constructor })) { yield ( /x/  if (r)); }");
tryItOut("L:if(\tnull) export *\n");
tryItOut("with({__proto__: [,,]}){}");
tryItOut("/*infloop*/L:do {if(window , (<x><y/></x>.((function ([y]) { })()))( \"\" , __parent__)) {yield constructor; } else  if ((({}).hasOwnProperty)(@foo).yoyo(-1 |= <y><z/></y>)) {const setter = <><x><y/></x></>, constructor =  \"\" ;gc() } } while([, , , ({ __noSuchMethod__: ({ prop: prop }), __iterator__\f: __noSuchMethod__ }), ] = __proto__.(true != <y><z/></y>));");
tryItOut("M:if(eval(\"export *;\", 0/0)) {throw __parent__; }L: switch(this) { case 6: break; break; __parent__break; export *; }");
tryItOut("if( \"\" ++) {gc()( \"\" ); } else  if (return export *; >>>=<x><y/></x>;) {yield 1e+81; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(var constructor = (#0=({__parent__:  '' })) in <x/>) {({}).hasOwnPropertyreturn  /x/ ; }");
tryItOut("/*infloop*/for( <<= *::*.propertyIsEnumerable(\"__noSuchMethod__\"); [new Function(3, <><x><y/></x></>)].some([1,2,3,4].map); this) {/*infloop*/for(const ({ __iterator__: ({ prototype: __proto__, __noSuchMethod__: __parent__ }), __parent__: ({ __iterator__: __count__ }) }) = ((function  __proto__ () { return *::* } ).apply)(__parent__ = prop, <><x><y/></x></>); \f((prop)( /x/g , prototype)) << prototype =  \"\" ; eval(\"*::*.yoyo(5.0000000000000000000000)\", __iterator__ = constructor)) return;let (prop) {  } }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (eval(\"const prototype;\", .2 in -0 >>> __iterator__.([,,]))) in -3/0.__count__ = __count__) ;");
tryItOut(";gc()");
tryItOut("M:if(((Math.pow).call(yield __parent__.__proto__ = (this &  '' ), ))) /*for..in*/for(__noSuchMethod__ in ((new Function)( '' ))){ } else  if ((uneval([] = \nnull.*)).__count__ = *::*) {let (({ __iterator__: prop }), __iterator__) { const prototype = undefined; }/*infloop*/do {yield prototype; } while(this); } else const __count__;return;");
tryItOut("/*for..in*/for(const __parent__ in 3) yield;");
tryItOut("with({prototype: (<x><y/></x>.(window)).isPrototypeOf((<x><y/></x>)(@foo))})const prop;");
tryItOut("do {}yield <x><y/><\f/x>; while((~__noSuchMethod__) && 0);");
tryItOut("L:if( /x/ ) { if (<x><y/></x>.([[1]])) } else yield <x/>;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("{*::* }");
tryItOut("M:do {@foo;export __count__; } while(((p={}, (p.z =  '' )())) && 0);");
tryItOut("{} const __noSuchMethod__;");
tryItOut("L: {/*infloop*/for(var __noSuchMethod__; 3/0; (-0)) {} }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = [,,] in (__noSuchMethod__ = <><x><y/></x></>)) {gc() }");
tryItOut("/*infloop*/L:for(const __count__ = (__count__ != *); __parent__ = <><x><y/></x></>; (undefined\t.*)) {yield; }");
tryItOut("let __count__ = [[]];");
tryItOut("let(({ prototype: __count__ }), constructor = <x><y/></x>) { try { break M; } catch(__parent__ if (function(){export __parent__;})()) { __proto__; } finally { throw this; } ");
tryItOut("M:if(true) prop = true; else gc()");
tryItOut("with({__parent__: __count__}){return window;return <x><y/></x>; }");
tryItOut("L: __count__ = [1,2,3,4].slice();");
tryItOut("/*for..in*/for(let __count__ in ((function(y) { yield y; 0\nM:switch(<x><y/></x>) { default: prototypebreak; constructor }; yield y; })( for (__proto__ in window)))){/*infloop*/M:while((constructor.__lookupSetter__(\"__parent__\"))){gc() }this; }");
tryItOut("/*for..in*/for(var __count__ = ({ set __proto__ __proto__ ()@foo.eval( /x/g ).isPrototypeOf(__count__), prop: (-1) }) in (({ __noSuchMethod__: __proto__, constructor: __parent__ }) = (*::*.yoyo( \"\" )))) {( /x/g );return;{yield 1e-81;export x::__parent__; } }");
tryItOut("const prototype\n");
tryItOut("throw prop");
tryItOut("switch(({__parent__: (prop in T)})) { default: case (__noSuchMethod__.__defineGetter__(\"__noSuchMethod__\", window)): (eval).apply }");
tryItOut("L: prototype.prop: <x><y/></x>");
tryItOut("__proto__ = __parent__;");
tryItOut("/*for..in*/for([prototype, __iterator__] = ([,,z1].*) in (p={}, (p.z = 033)())) {null;(window); }");
tryItOut("M:if('fafafa'.replace(/a/g, gc)) throw <x><y/></x>; else  if ([<><x><y/></x></>]) <><x><y/></x></>; else {return #1=[#1#]; }");
tryItOut("with(((uneval(*::*.constructor))))export __proto__;");
tryItOut("with({__iterator__: <><x><y/></x></> += [[1]]}){; }");
tryItOut("/*infloop*/M:for(let prop; <x/>; <x><y/></x>) {export *; }");
tryItOut("__parent__ = __parent__;");
tryItOut("/*infloop*/for(window; (@foo.prop); window.hasOwnProperty(\"prototype\") ? (new (function () { export __noSuchMethod__; } )()) : constructor|=({})) yield;");
tryItOut("return;");
tryItOut("with(((yield false))){{yield <x><y/></x>;const  with  = -3/0, __iterator__ =  '' ;/* } }");
tryItOut("/*infloop*/L:for((throw __proto__); <><x><y/></x></> = <><x><y/></x></>[(<x/> , 0x99)].__defineGetter__(\"prototype\", function  __noSuchMethod__ (__parent__)\t(-1) & <x><y/></x>, (p={}, (p.z = <x/>)())); ([15,16,17,18].filter(Function, __count__.valueOf(\"number\")))) <><x><y/></x></> const __proto__; const function::constructor;");
tryItOut("with(null){L: 0/0;<><x><y/></x></>; }");
tryItOut("/*infloop*/for(([1,2,3,4].slice).call((yield ({})), )(new (Function)(1.2e3, -1)); undefined; this @ \t /x/ ) yield;");
tryItOut("/*for..in*/for(__proto__ in ((Function)((Array(<y><z/></y>)))))export __proto__;");
tryItOut("if(<x/> .@ #1=[#1#]) { if (constructor.__lookupGetter__(\"constructor\")) {const __noSuchMethod__;const __iterator__,  = __proto__; }} else yield <x/>;");
tryItOut("gc()\nconst __proto__, prop = -1;");
tryItOut("L: prototype");
tryItOut("switch( /x/ .__defineGetter__(\"__count__\", function  __proto__ (__noSuchMethod__) { return <x><y/></x> } )) { default: break; case 6:  }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <bbb xmlns:ccc=\"[[1]].eval(*)\n\"><ccc:eee></ccc:eee></bbb>; (({ __proto__: (__proto__), __count__: (prop) }) = constructor); [15,16,17,18].sort(/a/gi, (3 if (<x><y/></x>)))) /*infloop*/M:for((true()); __count__ = __parent__; <x><y/></x>) {yield; }");
tryItOut("if(#2=({__proto__: __parent__})) {var constructor; } else  if ((<><x><y/></x></>.__noSuchMethod__ = *)) /*infloop*/do {} while(--__parent__ = #1#);");
tryItOut("while((delete <><x><y/></x></>()) && 0)export __noSuchMethod__;");
tryItOut("/*infloop*/for(var __count__; __iterator__;  '' ) with(({__noSuchMethod__: (<><x><y/></x></> - [[1]]) }) >>= __iterator__. = ){;return; }");
tryItOut("L:while((this.__defineGetter__(\"prototype\", <x><y/></x>.prop[eval(\"*::*\", true)])) && 0){this.zzz.zzz; }");
tryItOut("L:if(this.__defineGetter__(\"__count__\", <x/>).__iterator__ = (true & *::*)) { if ( =  /x/g ) {;throw @foo; }} else if(function ([y]) { }) { if (<><x><y/></x></>) {; } else const prop = <y><z/></y>;}");
tryItOut("/*infloop*/do M:if(__parent__.constructor) {return this; } else  if (<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")) {export __count__; }\r while(([__noSuchMethod__, , ] = ));");
tryItOut("L: __parent__");
tryItOut("if(delete (<x/> ? * : <x/>)) { if (([<x><y/></x>].filter(function (prop, constructor) { \tyield <x><y/></x> } ))) (prop); else {throw <x><y/></x>; }}");
tryItOut("/*for..in*/for(var prop = false in  '' ) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((__noSuchMethod__)) in eval(\"return;\", __iterator__ = *::*)) L: {yield; }");
tryItOut("L: {var __noSuchMethod__ = <x><y/></x>, prop; }");
tryItOut("export __proto__; const __noSuchMethod__;");
tryItOut("let (__parent__, __noSuchMethod__) { continue ; }");
tryItOut("let(prop) { __count__ = __noSuchMethod__;");
tryItOut("yield;");
tryItOut("with((this.zzz.zzz))__iterator__ = __count__;");
tryItOut("/*infloop*/while(4.)export constructor;");
tryItOut("L: ;");
tryItOut("let(__iterator__ = function::prototype.__proto__ = new (<y><z/></y>)() ? ((uneval( /x/g ))) : (<><x><y/></x></> <= <><x><y/></x></>++)) ((function(){with({}) __noSuchMethod__ = constructor;})());");
tryItOut("/*infloop*/for(const ({ yield: __parent__, __count__: prototype }) = this.zzz.zzz; gc([,,z1]); 4. |= *) ({}).hasOwnProperty");
tryItOut("L:if(* ? (1 for (x in [])) : <x><y/></x>.watch(\"prototype\", (1 for (x in [])))) { if (new Array(__count__)) let __noSuchMethod__ = -__noSuchMethod__; else /*infloop*/while(window){yield; }}");
tryItOut("while(((prototype|=__noSuchMethod__.__noSuchMethod__)) && 0)return;");
tryItOut("/*for..in*/for(let Error((-0), false).__lookupGetter__(\"__noSuchMethod__\")['__noSuchMethod__'] in (<><x><y/></x></>.*)) let __count__ = null, __noSuchMethod__ = *::*;");
tryItOut("/*infloop*/for(const [prop, , , ({ __noSuchMethod__: prototype, __parent__: __noSuchMethod__ })] = prop; <y><z/></y>; (<><x><y/></x></> = __iterator__)) ;");
tryItOut("try { yield; } finally { break L; } ");
tryItOut("switch(<x><y/></x>) { case 1: export *\nbreak; break;  }\n(4.);");
tryItOut("/*infloop*/for(const constructor; prototype.constructor getter= function () { yield <x/> } ; this.__defineGetter__(\"__proto__\", (function  __proto__ () { yield; } ).apply)) {do continue ; while(((p={}, (p.z = *)())) && 0); }");
tryItOut("");
tryItOut("do { catch  } while((this .. (<x><y/></x> -= <x><y/></x>)) && 0);");
tryItOut("gc()");
tryItOut("throw 1.2e3;gc()");
tryItOut("yield; const prop\n");
tryItOut("/*for..in*/for(prototype.this\t in __count__.__parent__) ((null.throw(*::*)));");
tryItOut("continue ;");
tryItOut("if(this) {__noSuchMethod__; } else ;");
tryItOut("yield ((<y><z/></y>.unwatch(\"prototype\"))());");
tryItOut("/*infloop*/while( /x/ .__defineGetter__(\"prototype\", [1,2,3,4].slice)){; }");
tryItOut("/*for..in*/for(const constructor in ((function  __proto__ (__parent__, __proto__)(function(q) { return q; }) - ({}))(([, , , ({ prototype: __count__ })] = *::*)))){{} }");
tryItOut("let(prototype = __iterator__ = <y><z/></y>) ((function(){let __noSuchMethod__ = constructor;})());");
tryItOut("return constructor.prop = __count__.unwatch(\"__proto__\");");
tryItOut("for(let y in []);");
tryItOut("do {{}let __noSuchMethod__ = constructor; } while((<><x><y/></x></> != window) && 0)\n");
tryItOut("/*infloop*/for(const constructor = [1,,]; *; [1,,]) {yield constructor; }\n");
tryItOut("/*for..in*/for(var prop in ((/a/gi)([11,12,13,14].map === (yield function  get (constructor) \"\" ).prototype = ({ __proto__: __proto__, constructor: [constructor, __count__, ] }) = prop.__proto__ =  ''  == 'fafafa'.\rreplace(/a/g, function  __noSuchMethod__ (__iterator__, __noSuchMethod__) { gc() } ) ^ ((((uneval(*))))())))){switch(*::*) { case 1: yield @foo;case constructor: break L;break; yield;break; case 5: default: break; case 4: ;break; ;break;  }with((this & window))let __count__ = <><x><y/></x></>, __noSuchMethod__; }");
tryItOut("switch(new ([1,2,3,4].map)()) { case 9: if(arguments) throw window; else throw  }");
tryItOut("L:if(new (function  __parent__ (prop, prop) { yield <x/> } )(([[]] for each \t(__proto__ in this)), <y><z/></y>)) {} else  if (/*\n*/<x/>.__defineGetter__(\"__count__\", function  __iterator__ (__noSuchMethod__, __noSuchMethod__)<x><y/></x>)) {if(__iterator__ = <x><y/></x>(--<x/>) * [z1,,].unwatch(\"__iterator__\")) {L:if(*::*) {gc()<y><z/></y>; } else {new Function; } } } else case true: for(let y in []);case __proto__(<x/> @ [,,]) = <y><z/></y>: { }break; case (([1,2,3,4].slice).call(, ((1 for (x in []))(constructor = this, [1])), (eval(\"( { do {export __parent__;(<x><y/></x>); } while(( } \\n)\", __parent__)))): break; ");
tryItOut("switch(({ __iterator__: prop }) = (eval(\"\",  /x/g ))) { case ( /* Comment */[,,z1]): default: ; }");
tryItOut("/*for..in*/for(var [__iterator__, prop] = let __proto__, __proto__ in this) {gc(){ }");
tryItOut("continue M;");
tryItOut(";");
tryItOut("{if(({a1:1}) % window ? (__proto__.(<x><y/></x>)) : 1e81 || ({})) \t{/*for..in*/for(var __count__ = function(q) { return q; } in false) {;@foo; } }{continue ; } }");
tryItOut("var __iterator__;");
tryItOut("return;yield 1.2e3;");
tryItOut("L: {(1 for (x in [])) }");
tryItOut("/*for..in*/for(const __count__ in ((function (__count__) { return  \"\"  } )( \"\" )))var __parent__, __noSuchMethod__;");
tryItOut("/*infloop*/L:for(const let; <x/> , window; 1e4) {export constructor; }");
tryItOut("L:if(@foo.__defineSetter__(\"__proto__\", gc).throw([<><x><y/></x></>[this.__defineGetter__(\"__count__\", <><x><y/></x></>)]].filter(function(q) { return q; }).watch(\"__iterator__\", [1,2,3,4].map))) {-3/0\nthrow *::*;return; } else  if ((new (constructor)(prop)/*\n*/ ? (({}).hasOwnProperty)(<><x><y/></x></>, <><x><y/></x\t></>) : #2=\f /x/g  :: true)) yield; const prototype;");
tryItOut("constructor = __parent__;");
tryItOut("let ([[]] = ({ __noSuchMethod__: [({ __proto__: prototype }), , , , [__noSuchMethod__]] }) = prop) { yield  /x/g  & __parent__ = <x><y/></x>; }");
tryItOut("M:if( /* Comment */<x><y/></x>.(@foo)) \n/*infloop*/do {export *; } while( /x/ );");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = undefined in (void .unwatch(\"prototype\"))) M:if(1e-81) ;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in @foo)  in ");
tryItOut("L: /*infloop*/for(window; undefined; <><x><y/></x></>) m");
tryItOut("{with(window){return;let prototype; } }");
tryItOut("/*infloop*/for((++constructor = prop); 1e4; new RangeError(<x><y/></x>)) {({}); }");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(const [__parent__, __proto__] = ((prototype)) + [__iterator__, prototype, , , prop] = __iterator__ in *(<x/>)) /*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  /x/ ) {break ; }");
tryItOut("M:if((- /x/ )) { if (function ([y]) { }.__lookupGetter__(\"__iterator__\")) yield <x><y/*\n*//></x>; else { /x/ ;(<x/>); }/*\n*/}");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = prototype.__count__ =  ''  in 1e4) {yield; }");
tryItOut("for(let y in [5,6,7,8]) <x><y/></x>;");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, let prototype = ([<x><y/></x>].__parent__), __count__;] = [z1,,].watch(\"__parent__\", (new Function(\"return <x><y/></x>;\"))).eval(this.zzz.zzz) in eval(\"<><x><y/></x></>\", __noSuchMethod__ = <><x><y/></x></>)) {L: {gc() } }");
tryItOut("if(<x><y/></x>) {export prototype;return; } else  if (<x><y/></x>) {throw __proto__; }");
tryItOut("with({constructor: prop = <x><y/></x>})prop;");
tryItOut("const __noSuchMethod__ = <y><z/></y>, prop;");
tryItOut("/*infloop*/\fdo /*infloop*/M:for(var prop; __iterator__; this.__defineSetter__(\"__parent__\", function  __noSuchMethod__ (__proto__, __count__) { return true } )) ; while((this.__defineGetter__(\"prop\", ({}).hasOwnProperty)));");
tryItOut("/*infloop*/for(var prop; (__proto__ = ( /x/ .isPrototypeOf(undefined))); ((__proto__.__parent__ getter= (new Function(\"#3={a:#3#};\")) for (null['prototype'] in *::*) for (__parent__ in <><x><y/></x></>)))) <{__count__}></{__count__}><!--yy-->\n/*for..in*/for(const __iterator__ in <x/>) /*infloop*/do {(*::*); } while(window)");
tryItOut("L: return\n");
tryItOut("/*infloop*/do {{<x/>;let __parent__; }const constructor, __proto__; const constructor; } while(*);");
tryItOut("let ( in , __noSuchMethod__) { /*for..in*/for(let constructor = (__noSuchMethod__) = <><x><y/></x></> && <x><y/></x> ? (function::__parent__ = 4.) : __count__.( \"\" ) in (@foo != __iterator__)) /*for..in*/for([__parent__, __count__] = window in *::*) let __parent__ = <x/>, constructor; }");
tryItOut("(this); const prototype;yield;");
tryItOut("with(constructor.__noSuchMethod__){const __count__;/a/gi }");
tryItOut("with({}) throw constructor;");
tryItOut("(<x/>);");
tryItOut("let(__noSuchMethod__ = @foo) ((function(){__proto__.__proto__ = new ([1] && window)(prop = <><x><y/></x></>,  /x/ );})());");
tryItOut("M:switch(constructor) { case let (__iterator__ = prototype) (__proto__.__proto__ getter= window): default: break;  }");
tryItOut("\fexport prop\n");
tryItOut("/*infloop*/while([<><x><y/></x></>]){var __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/do Math.pow while(~__parent__ = <x><y/></x>);");
tryItOut("let (function::prop = ( /x/ .@*.__defineGetter__(\"__count__\", /a/gi)), __parent__) { if(__noSuchMethod__) ; else  if (*::*) (@foo); }");
tryItOut("throw prop;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/L:while(__iterator__){}");
tryItOut("let (__parent__ = (__noSuchMethod__.prop) >>> window / 3.141592653589793, prop = this.__defineGetter__(\"__proto__\", [1,2,3,4].map)) { *::* }");
