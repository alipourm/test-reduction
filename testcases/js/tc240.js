tryItOut("/*infloop*/do {__noSuchMethod__ } while(({ set prop prototype () { yield (uneval(*)) }  }));");
tryItOut("/*infloop*/for((true > -1)--; (#0=[ /x/ ]) += [[1]][undefined]; 0x99.prop) {this;<y><z/></y>; }");
tryItOut("try { <y><z/></y>['constructor'] = prototype; } catch(__parent__ if (function(){try { const __noSuchMethod__; } finally { gc() } })()) { __parent__ = prototype; } /*\n*/finally { var constructor; } ");
tryItOut("if(([([; *= __count__].some(new Function))].sort(({}).hasOwnProperty))) /*for..in*/for(const [__proto__, prototype] = <x><y/></x> in  /x/ ) {[1,2,3,4].map(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(prototype =  /x/g .isPrototypeOf(({ __iterator__: __noSuchMethod__, __noSuchMethod__: constructor }) = (this.zzz.zzz)); (window)() << (<x><y/></x>.(<x><y/></x>)); yield prop.yoyo(this.__defineSetter__(\"prototype\", (eval).call))) prototype, prop = -<y><z/></y>");
tryItOut("/*for..in*/for(const [x::__proto__, __iterator__] = [__parent__.prop = this.constructor = undefined\n.__defineSetter__(\"prop\", (export *)) if ([[1]])] in (uneval(__count__))) {throw this;\ngc()\n }");
tryItOut("with({}) let __parent__, constructor = <><x><y/></x></>;");
tryItOut("/*infloop*/for(const prototype; [11,12,13,14].sort; new (({}).hasOwnProperty)(<x/>, <><x><y/></x></>)) {let get; }");
tryItOut("__noSuchMethod__");
tryItOut("{while((this) && 0){const constructor = window, __count__ = <><x><y/></x></>;export *; }(prop); }");
tryItOut("/*for..in*/for(const __iterator__ = __iterator__ in <x/>) {(({a1:1}));<><x><y/></x></>; }const ;");
tryItOut("let (__noSuchMethod__ = <x/>, __proto__ = [15,16,17,18].map((<><x><y/></x></>).watch,  /x/ )) { L: {throw window;break ; } }");
tryItOut("with(eval(\"new (eval)(void  \\\"\\\" [prop])\", (yield [1,,] - <x><y/></x>.__defineSetter__(\"__noSuchMethod__\", function () { yield 1.2e3 >> true } )).__defineGetter__(\"__noSuchMethod__\", Math.sin))){/*for..in*/L:for(__iterator__ = undefined + <x/> &= yield  \"\" .__lookupSetter__(\"__count__\") in ({__parent__: __noSuchMethod__, __noSuchMethod__ setter: function(q) { return q; } })) {{}if(<y><z/></y>) { if (<><x><y/></x></>) {constructor; } else {; }} }gc() }");
tryItOut("/*infloop*/for(var prototype; constructor = prop; __parent__) return __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in *::*.__defineSetter__(\"constructor\", gc)) {/*infloop*/M:while(*::*.propertyIsEnumerable(\"__noSuchMethod__\")){throw this; } }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = ([z1])(); ; #2=window) {(({}));var constructor, __parent__; }");
tryItOut("if( /* Comment */) true; else  if ([\n[11,12,13,14].sort]) if(<x/>) yield  /x/ ; else  if (function::__parent__) {__iterator__ = <x><y/></x>; } else {export __count__; }");
tryItOut("while((this) && 0)return *::*;");
tryItOut("return @foo\n");
tryItOut("export *;");
tryItOut("/*infloop*/while(__count__ = #3={a:#3#})break ;");
tryItOut("L:while((<>*::*</>.((<><x><y/></x></>.prototype))) && 0)if(((Math.sin).call(<x><y/></x>.yoyo(<><x><y/></x></>), ))) gc() else  if (1.3 .@x:: function(id) { return id }) {return (-1);{} } const prop;");
tryItOut("/*for..in*/for(var prop = \r<><x><y/></x></> = new <x><y/></x>(prop,  \"\" ) in <y><z/></y>++) {return; }");
tryItOut("var __count__, __iterator__ = window;");
tryItOut("/*infloop*/while((Math.pow).call(this, null) & *::*() << (yield [true].map(Function)))if( /* Comment */[(-1)].sort(function (__count__, __iterator__) { gc() } )) { if ((prop.__noSuchMethod__ = @foo.__noSuchMethod__)) if( /x/g ) {gc() } else {(false);export __noSuchMethod__; }}");
tryItOut("if(((uneval(new (new Function)(<><x><y/></x></>,  /x/ ))))) return {}; else  if \f(<x><y/></x>.prototype) {return;throw  \"\" ; }");
tryItOut("if([this]) @foo; else return;");
tryItOut("{if(prop|=[,]) return constructor; }");
tryItOut("throw __parent__;");
tryItOut("export *; const __proto__;");
tryItOut("__parent__ =  /x/ ;__proto__ = [1], __iterator__ = 0.1;");
tryItOut("let (constructor = new (function (prop)(__noSuchMethod__ = <x><y/></x>.unwatch(\"__noSuchMethod__\")))() .. ({prototype getter: eval, __noSuchMethod__: [ \"\" -- for each (getter in /*\n*/<x><y/></x>) if (3/0)] ^ __count__+=__count__ })) { {return; }\n }");
tryItOut("{M:if(@foo:  /x/g ) { if (Object()) {export *; } else const __iterator__ = *;} }");
tryItOut("if(@foo) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in __parent__|=<><x><y/></x></>) {{}throw <x><y/></x>; }");
tryItOut("if(function ([y]) { } &  /x/g ) return;");
tryItOut("L: let __count__;");
tryItOut("if(<y><z/></y>) {<x><y/></x>const prototype, each; } else  if ((~window !== constructor = window for each (__count__ in (function ([y]) { })()) if (<x/>))) if((new  \"\" ())) {Function } else  if (<y><z/></y>) {\n;export constructor; } else {with({}) gc()gc() }");
tryItOut("throw prototype;");
tryItOut("M:with({constructor\t: true})gc()\nfalse\n");
tryItOut("/*for..in*/for([__iterator__, prop] = ( \"\" ++) in #3={a:#3#}) new Function const __parent__;");
tryItOut("L: const __proto__ = <x><y/></x>, constructor = window;");
tryItOut("continue ;\nyield 4.;\n");
tryItOut("let(__proto__) ((function(){with({}) { throw StopIteration; } })());");
tryItOut("L:with( '' ){__parent__ =  \"\" , __noSuchMethod__ = <x><y/></x>; }");
tryItOut("L: {yield <><x><y/></x></>;false; }");
tryItOut("/*infloop*/L:for((<x><y/></x>)(); @foo;  /x/g .@foo / this &= <x><y/></x> |= 1.3 %= <y><z/></y> << <y><z/></y>) {;export constructor; }");
tryItOut("gc()\nwhile((0) && 0){Math.pow }");
tryItOut("<ccc:ddd><employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd>");
tryItOut("while((\r(<><x><y/></x></>.__noSuchMethod__)) && 0)if(__iterator__ = ((yield *)))  else  if (({__iterator__ setter: /a/gi, __count__ getter: function(q) { return q; } })) {;export __noSuchMethod__; } else { }");
tryItOut("__proto__ = prop;\nlet __parent__, __noSuchMethod__;\n");
tryItOut("/*infloop*/while(true >= this << (new ([1,2,3,4].map)(({a2:z2}) *= null))){/*for..in*/\tL:for(let [prototype, prop] =  \"\"  >>  /x/g  in (new Function(__proto__,  /x/g ))) {/*infloop*/for(<x><y/></x>; null;  /x/ ) {}; }let (__count__) { export *; } }");
tryItOut("{var prop;<><x><y/></x></>; }");
tryItOut("return;");
tryItOut("M:if(([15,16,17,18].sort([1,2,3,4].map, true.@foo))) {(<x/>);return <><x><y/></x></>.prototype; } else  if (( /x/g ).throw((new 3.141592653589793(/*\n*/ /x/ )))) {(<x><y/></x>.(1e4));/*for..in*/for(var __count__ in ((function(y) { yield y; M:if(undefined) { if (<><x><y/></x></>) {}} else { }; yield y; })(( '' .__count__)))) } else {/*infloop*/do <bbb xmlns=\"constructor\"><x><y/></x><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></bbb><ccc:ddd>yyy</ccc:ddd> while(__parent__+=3.141592653589793);<x><y/></x>\t }");
tryItOut("L:if(constructor) {return;let __parent__ = false; } else  if (((window).__defineSetter__)( /x/g )) {var __iterator__ = #1=[#1#]; }");
tryItOut("/*for..in*/for(var (__noSuchMethod__) in (([1,2,3,4].slice)(null.throw((this.__defineSetter__(\"__iterator__\", 'haha'.split))))))");
tryItOut("{if((-true)) { if (arguments) {/a/giexport *; }} else {( \"\" ); }; }");
tryItOut("{{return; } }");
tryItOut("throw prop;");
tryItOut("(<x><y/></x>)\n");
tryItOut("/*infloop*/M:do /*infloop*/for(let constructor; new Number(window); (new Object(prop, <y><z/></y>))--) while((1e-81) && 0)return; while(@foo);");
tryItOut("if(<x><y/></x> || true) if((let (__proto__, __iterator__) *::*)) {__parent__; undefined  } else  if ([<y><z/></y>].some((<x><y/></x>).__defineSetter__)) {-3/0; } else {yield this; }");
tryItOut("if(*) { if ((window , <x><y/></x>--)) {{}\nthrow  { yield <><x><y/></x></> } ;export __noSuchMethod__; }} else /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) __iterator__, __iterator__ = *;");
tryItOut("throw new (\n__count__.constructor = <><x><y/></x></>)(prototype = true\n, ([11,12,13,14].filter));L: return window;");
tryItOut("L: {return; }");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = [new Number()].map\t(function (__count__) { return \rthis.__defineSetter__(\"__iterator__\", function  prototype (__noSuchMethod__, __proto__) { return arguments } ) } ) in ++<><x><y/></x></>) {with({__count__: 1.3})yield;[1,2,3,4].slice }");
tryItOut("/*for..in*//*\n*/for(var prototype = (({__iterator__: (*.isPrototypeOf(<x/>))})) in <x/>) {__count__ = <><x><y/></x></>, __count__ = false;({}).hasOwnProperty }");
tryItOut("/*infloop*/for(let prototype; (((1 for (x in [])))\t.call(__parent__, <><x><y/></x></>,  '' ));  /x/g  < <x><y/></x>) with({prototype: __count__}){var __count__ = <x/>, __noSuchMethod__ = <y><z/></y>;yield; }");
tryItOut("{/*for..in*/for(const [prototype, __parent__] = [,,z1] in <><x><y/></x></>) {export constructor; }\nL:with(this)\f{; } }");
tryItOut("if(((eval)())) {export *; } else  if (window ^= 1.3) {switch(<y><z/></y>) { case true: break; default: return  '' ;break; case -1: break; case 2: ;break; case 0: break; case  /x/ : continue M;break;  }export prop; }");
tryItOut("if(false *= @foo) { if ((uneval(<y><z/></y>))) {const __proto__ = <><x><y/></x></>;; }/*\n*/ else __proto__ = <x><y/></x>;}");
tryItOut("/*for..in*/for(let  ''  in (('haha'.split)(new <><x><y/></x></>()))){/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in #1=[#1#]) {; } }");
tryItOut("/*infloop*/for((<x/>.valueOf(\"number\")); ({ __noSuchMethod__: [, , ], __count__: ({ __noSuchMethod__: __noSuchMethod__ }) }) = ({ prop: ({ __count__: __proto__ }) }); function(q) { return q; }) <><x><y/></x></>\r;");
tryItOut("if(<y><z/></y>) constructor else  if (y></x>) new Function()");
tryItOut("/*infloop*/for(let __noSuchMethod__; (({constructor: true}\t)); [false !== [1,,]].some(({}).__lookupGetter__)) /*infloop*/L:do {yield *::*; } while((<><x><y/></x></> ^ false));");
tryItOut("if(({a1:1})) if(<x><y/></x>) {{} }");
tryItOut("export *\nyield true; const __count__\nif((0x99 for each (__proto__ in <><x><y/></x></>))) {const constructor =  /x/g ;gc() } else {export __count__; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:while(( /x/g  ? [[]] : <x/>) && 0)");
tryItOut("/*for..in*/for(var x::constructor in ((function (constructor, __parent__){throw window;<x><y/></x> })(<x/>)));");
tryItOut("with(*::*)const __proto__;");
tryItOut("( /x/g );");
tryItOut("var __proto__ = <y><z/></y>;");
tryItOut("/*infloop*/M:while(@foo ::  /x/g )(<><x><y/></x></>)");
tryItOut("while(((__proto__ =  \"\" )(([<><x><y/></x></>].some(__parent__).unwatch(\"__count__\")), (let (__iterator__, prop = @foo) @foo))) && 0)/*infloop*/for(var __proto__; <x/>; @foo) while((this) && 0)export constructor;");
tryItOut("constructor");
tryItOut("/*infloop*/for(let prop = <x/>; <y><z/></y>; false) @foo;");
tryItOut("__proto__");
tryItOut("yield new (function (__count__) { throw @foo; } )(({a2:z2}), <y><z/></y>);");
tryItOut("gc()");
tryItOut("with({prop: <x/>})");
tryItOut("(<><x><y/></x></>);yield ;");
tryItOut("if(!<x><y/></x>) {yield;yield; } else  if (<y><z/></y>) export prototype; else {prototype }");
tryItOut("__iterator__ = __parent__;");
tryItOut("constructor = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in [1,,]) __iterator__ = 0/0, __proto__ = <><x><y/></x>\f</>;");
tryItOut("/*for..in*/M:for(let constructor in (([(\f{ prop: __count__ }), , ({ prototype: constructor, prop: __parent__ }), ])(function ([y]) { })))(*::*);");
tryItOut("if(new function  __proto__ (__iterator__, __noSuchMethod__) { yield @foo; } ()) let prototype; else  if (this.zzz.zzz) {(({a2:z2})); }\f");
tryItOut("throw __parent__;");
tryItOut("if( /x/ .throw(<x/>)) {export prop; } else {continue ; }");
tryItOut("this");
tryItOut("let (__iterator__, __parent__) {  }");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("M:with({__parent__: export *})var -3/0 = <><x><y/></x></>, prototype = <x/>\n");
tryItOut("/*for..in*/for(let __count__ in @foo) {throw <><x><y/></x></>;yield; }");
tryItOut("yield;\nexport constructor;\n");
tryItOut("/*for..in*/M:for(var constructor in ((({}).hasOwnProperty)(__count__ = <x><y/></x> | __iterator__))){gc }");
tryItOut("/*for..in*/M:for(const constructor in  '' ) yield;");
tryItOut("L: if(<x/>) export prototype; else  if (__parent__) {yield ({export constructor;return; } &=  \"\" ) -= ((uneval(__iterator__ = __proto__)));Math.pow } else ( /x/g );");
tryItOut("if(1e-81.__lookupGetter__(\"__parent__\")) {L:if([-1 for (constructor in <x/>) for each (__proto__ in <y><z/></y>) for (__parent__ in  \"\" )]) const __parent__, __parent__ = <><x><y/></x></>; else  if (new (<x/>)(<><x><y/></x></>)) {let __iterator__, constructor;{} } else gc() }");
tryItOut("prototype; const constructor;");
tryItOut("/*infloop*/for(const ({ constructor: ({ __noSuchMethod__: ({ prototype: ({ prototype: constructor, prop: <x><y/></x> }) }), __iterator__: [({ __proto__: __count__, prop: constructor }), ] }) }) = #2=({constructor: __noSuchMethod__.( /x/g )}); __count__.__noSuchMethod__; let (prototype, ({ __iterator__: constructor, constructor: __noSuchMethod__ }) = this.__defineSetter__(\"__proto__\", function(q) { return q; })) (new Math.pow(yield))) {/*for..in*/for(prop = prop = this in *::*) {false; }/*\n*/ }");
tryItOut("Math.sin");
tryItOut("return  /x/ \n");
tryItOut("if(new (<x><y/></x>)()) {; }");
tryItOut("L:if(<><xxx {prototype}={(this.__defineSetter__(\"function::__count__\", <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) && <xxx>{prop}</xxx>} /></>) { if (__count__) {export *\n }} else with({}) __count__ = prototype;");
tryItOut("/*for..in*/L:for([__iterator__, __parent__] =  ''  in (let (set) constructor: __noSuchMethod__)) {gc() }");
tryItOut("throw prop; const __count__;");
tryItOut("/*for..in*/M:for(__count__ in __parent__.__count__ getter= [1,2,3,4].slice) {do {return; } while((Function()) && 0); }");
tryItOut("M:do {const prototype = <><x><y/></x></>;<><x><y/></x></>; } while((__iterator__.__proto__ = (<x><y/></x>.(prop)).throw((({constructor: this})))) && 0);");
tryItOut("switch({}.@foo.throw(@foo)) { default: gc()break; case (__iterator__ = <><x><y/></x></>).@foo: with({__noSuchMethod__: [] ^= <y><z/></y>}) '' /*infloop*/for(const ({ __iterator__: ({ __count__: __iterator__, prototype: ({ prop: [, , __iterator__\t, ] }) }), __noSuchMethod__: __iterator__ }) = (constructor-=true); <><bbb xmlns:ccc=\"__count__ = prototype\"\f><ccc:eee></ccc:eee></bbb></>; new Function) if(((0.1)(<><x><y/></x></>,  /x/ ))) return;break; case 2: {\ryield; }break; case 7: break; /*for..in*/for(var __noSuchMethod__ = +(this.__defineGetter__(\"__count__\", new Function)) in constructor = @foo) /*infloop*/while((this.__lookupGetter__(\"prop\")))var __iterator__ = true; }");
tryItOut("if(this['__iterator__'] = new ((*::*).__defineSetter__)\r(0)) { if (\n[/*\n*/__noSuchMethod__] =  get __count__(({ __count__: prototype }), constructor) { null; } ) {/*for..in*/for(let __count__ in ({})) L:do {( '' );prop =  \"\" ; } while((<x><y/></x>) && 0);const __proto__; }} else {throw window;const __noSuchMethod__ = prototype; }");
tryItOut("for(let y in [5,6,7,8]) yield (({ function::__parent__: [], prop: ({ prop: function::__parent__ }) })\t = RegExp() > ({__count__: __noSuchMethod__ }));");
tryItOut("{1.3; }");
tryItOut("; const constructor;");
tryItOut("throw StopIteration;");
tryItOut("__parent__, prop = prototype");
tryItOut("{__iterator__;continue ; }");
tryItOut("L: ");
tryItOut("with({__noSuchMethod__: constructor}){return;let prop, prop = @foo; }");
tryItOut("{; }");
tryItOut("this.zzz.zzz;");
tryItOut("{yield;const __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*for..in*/M:for(let __parent__ in ((function (function::constructor = <x/>) { return prototype = ((function () { //h\nyield <x/> } )(<><x><y/></x></>)) } )([(new  /* Comment */<><x><y/></x></>(<><x><y/></x></>.eval(null)))].map(/a/gi)))){yield;continue ; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in (Function)()) {var constructor, __proto__ = null;(<><x><y/></x></>); }");
tryItOut("with((arguments.__defineSetter__(\"prototype\", function(y) { yield y; return true;; yield y; })[(function(q) { return q; })(.2)])){\f__iterator__; const prototype; }");
tryItOut("{gc()const prototype; }");
tryItOut("let ([({ prototype: __count__, setter: __noSuchMethod__ }), , , [, __iterator__, function::__noSuchMethod__]], __noSuchMethod__ = __count__ :: <x><y/></x>) { if(this) {gc()return window; } else  if (@foo) (false); }");
tryItOut("while(((0)[*::*]) && 0)yield;");
tryItOut("/*infloop*/for(({ prototype: ({ __noSuchMethod__: constructor }) }) = 0x99.constructor; ([] && *); [1,2,3,4].slice()) return [];");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function(y) { yield y; gc(); yield y; })(__iterator__))){return;return; }");
tryItOut("do /*for..in*/L:for([constructor, __iterator__] = this.__defineSetter__(\"__iterator__\", Math.sin) in constructor) {function (set, __iterator__) { return *::* } const __parent__; } while(((undefined ^ (false++))) && 0)\n(__noSuchMethod__);");
tryItOut(";");
tryItOut("while((this | false) && 0){return <x><y/></x>; }");
tryItOut("/*for..in*/M:for(const __proto__ in (((constructor).__defineSetter__)(-0)))yield @foo;");
tryItOut("L: {return @foo; }");
tryItOut("/*infloop*/do  { yield !<><x><y/></x></>.propertyIsEnumerable(\"constructor\") }  while(new Number());");
tryItOut("continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in !window) {throw  /x/g ; }");
tryItOut("if(eval(\"<><x><y/></x></>\",  /x/g ).__defineGetter__(\"__iterator__\", <><x><y/></x></>)) { if (eval(\"var __iterator__ = false;\", <x/>) ^= new (<x><y/></x>)(<><x><y/></x></>, window)) {return constructor; } else {}}");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = prototype = <x/> |= ([true for (__parent__ in <y><z/></y>) for each (__parent__ in 4.)]).valueOf(\"number\") in [<x><y/></\tx> for (prop in window)]) with({__noSuchMethod__: (function(y) { yield y; <><x><y/></x></>;; yield y; }).call(yield ({}), (*::*()), true)})gc()");
tryItOut("1e-81;");
tryItOut("M:if(true.valueOf(\"number\")) return *;");
tryItOut("((prop(<><x><y/></x></>) = window(1e-81)));");
tryItOut("with({}) { let(prop = 0, __proto__) { return <><x><y/></x></>; } ");
tryItOut("if((~__proto__)) {throw <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */L: for  each(let get in __noSuchMethod__) \texport prop; } else  if ((<><x><y/></x></>.prop)) prototype = *::*; else gc()");
tryItOut("export setter\nyield;");
tryItOut("break L\n");
tryItOut("M:if((-1)) export *; else  if (@foo) {export constructor; } else yield;");
tryItOut("if((this.__defineGetter__(\"prop\", <><x><y/></x></>))) yield <x/>\nreturn window;export *;\nlet __count__, __proto__;\n");
tryItOut("__parent__ = <x/>;");
tryItOut("if((((constructor).__defineSetter__)().__proto__)) { if (constructor.__noSuchMethod__ = null) {return <x><y/></x>; } else {3/0; }}");
tryItOut("gc()");
tryItOut("/*for..in*/for(let prototype.__count__ in *) throw StopIteration;");
tryItOut("/*infloop*/for(const prop; eval(\"( '' )\", window) .@*:: ((yield \n*::*)); prop =  /x/ .unwatch(\"prop\")) /*infloop*/L:while([11,12,13,14].map)export *;\nthrow /*\n*/[1]; const __iterator__;\n");
tryItOut("/*infloop*/M:for([11,12,13,14].some; eval; #2=/*\n*/<><>true</></>) {try {  } catch(prototype if (function(){gc()})()) { {} } finally { return; } continue ; }");
tryItOut("if(constructor.eval(*::*)) {yield; }");
tryItOut("/*infloop*/for(__parent__ = @foo; new (__proto__-=({}))(); @foo.@*) {/*infloop*/L:while(prop)/*\n*/{ }export prop; }");
tryItOut("yield [11,12,13,14].sort;");
tryItOut("if(__noSuchMethod__ = __iterator__) ");
tryItOut("while((({})) && 0){let prototype, __noSuchMethod__ = window; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = (let (__proto__) (function ([y]) { })()) , (<><x><y/></x></>.hasOwnProperty(\"__count__\"))\n in __noSuchMethod__ = {}) \fexport *;");
tryItOut("return;");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = <x><y/></x>.__lookupGetter__(\"constructor\") in this in <x><y/></x>) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__parent__ in window) yield constructor.__noSuchMethod__ getter= function (__noSuchMethod__) { return 0/0 } \n");
tryItOut("return;");
tryItOut("L:while((prototype.valueOf(\"number\").@foo) && 0)return;");
tryItOut("yield;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = window; <><x><y/></x></>; null) gc()");
tryItOut("/*for..in*/L:for((prop) in (((*::*).__defineSetter__())(((yield @foo) for (__parent__ in <x><y/></x>) if (5.0000000000000000000000))))){export __count__; }");
tryItOut("if(().yoyo(eval(\"<><x><y/></x></>\", <><x><y/></x></>))) (__proto__); else  if (__iterator__) continue ;");
tryItOut("break ;");
tryItOut("if(*::*[prototype]) { if ((<x/> in <><x><y/></x></>)) ; else {export __proto__; }}");
tryItOut("switch(({a1:1})) { default: ({ prototype: constructor, __noSuchMethod__: __iterator__: __iterator__.__parent__ }) = ((p={}, (p.z =  /x/ )())), __parent__break; export __iterator__;case 7: break;  }");
tryItOut("L: {/*for..in*/for(var __parent__ in ((Math.sin)(({ __count__: __iterator__, __noSuchMethod__: prototype }) = (<x><y/></x>.propertyIsEnumerable(\"__iterator__\")))))/*for..in*/for(__iterator__ in ((({}).__lookupGetter__)(<x><y/></x>))){ } }");
tryItOut("/*for..in*/for([__noSuchMethod__, prototype] = [<x><y/></x>] in  /x/ ) const __proto__ = true, prototype;");
tryItOut("{return <><x><y/></x></>;window }");
tryItOut("/*infloop*/while(constructor.prop setter= null)");
tryItOut("this.zzz.zzz;");
tryItOut("if(*) (@foo\f); else  if ( \"\" ) throw ({a2:z2}); else {const __proto__, __parent__ = __noSuchMethod__; }");
tryItOut(" { return (new  \"\" .__count__(yield .2.__defineSetter__(\"prop\", [1,2,3,4].map), ())) } ");
tryItOut("{;yield; }");
tryItOut("if(true.*) { if (__count__ = constructor) <><x><y/></x></>;} else {eval__iterator__; }");
tryItOut("gc()");
tryItOut("/*infloop*/for(var ({ prototype: [[, ], ] }) = [1.3]; <y><z/></y>.__lookupSetter__(\"__count__\").yoyo(prototype = constructor); @foo++) /*infloop*/for(var [, ({ constructor: __proto__ }), ({ __noSuchMethod__: ({ prototype: __noSuchMethod__ }), __parent__: ({ __noSuchMethod__: prototype, __noSuchMethod__: prototype }) }), , ({ prop: [], __proto__: [__parent__, , , , ] })] = ; (new (Math.sin)(!null)); false.@*) gc()");
tryItOut("/*infloop*/for((this.zzz.zzz.watch(\"__proto__\", #2=[<x/>])); <><>(\nnew  '' ())</></>; @foo) {/*infloop*/while(5.0000000000000000000000){ }with({__count__:  '' })throw @foo; }");
tryItOut("<y><z/></y>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <y><z/></y> in ([11,12,13,14].some)) {with(__noSuchMethod__)((-1));with({constructor: <x><y/></x>}){{} }if(<x><y/></x>) {throw window; } else  if (<x><y/></x>) __noSuchMethod__; else yield <><x><y/></x></>; } const __iterator__;");
tryItOut("let([[, , prototype, [, , __proto__, __count__]], ({ __iterator__: ({ let: constructor, __iterator__: prototype }), __count__: @foo }), ({ __parent__: ({ function::__proto__: __noSuchMethod__ }), __parent__: [, __proto__, , prop] }), ({ __proto__: __count__, __parent__: ({ __noSuchMethod__: constructor, __proto__: __proto__ }) })] = *, constructor = (-0).unwatch(\"__count__\")) { with({}) case 3: break; let constructor = <x/>, prop;let prop;");
