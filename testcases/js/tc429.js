tryItOut("/*for..in*/for([__iterator__, __proto__] = new (*)(window,  \"\" ) > getter++.eval(new RegExp()) in undefined , (eval(\"[z1]\", {}))) {const prototype = <y><z/></y> }");
tryItOut("/*infloop*/__noSuchMethod__ = __iterator__ = *::*");
tryItOut("do throw null; while((({a2:z2})) && 0);");
tryItOut("{}");
tryItOut("L: /*for..in*/for(__parent__ in null) { }");
tryItOut("/*infloop*/for(({ __proto__: __noSuchMethod__, __proto__: ({ prop: __proto__ }) }) = 'fafafa'.replace(/a/g, (1 for (x in []))); [15,16,17,18].filter([1,2,3,4].slice, <><x><y/\t></x></>)++; (p={}, (p.z = <><x><y/></x></>)())) {return prototype = <x/>; }");
tryItOut("let(__proto__ = (window[[,,]]\n)) ((function(){this.zzz.zzz;})());");
tryItOut("<x/>;");
tryItOut("if((<y><z/></y>.@foo).__noSuchMethod__) { if (this.__defineGetter__(\"each\", (1 for (x in [])))) {if([,,]) {return;yield @foo; } else {gc() } }} else var prop = <x><y/></x>;");
tryItOut("gc()");
tryItOut("return;");
tryItOut("/*infloop*/L:while( \"\" .throw(false))if(<y><z/></y>)  \"\" ; else  if (<x><y/></x>) break ;");
tryItOut("let (__proto__ = (prop |= <x><y/></x>)[('haha'.split)]) { M:if(null( /x/g )) { if (__count__.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) export __count__;} else return  \"\" ; }");
tryItOut("/*infloop*/for(constructor.prototype = <x><y/></x>; ((__count__ = (-0)).__proto__ = <x/>.yoyo(false))(); 3.isPrototypeOf(@foo)) {}");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/><\r/x>) return window;{} }");
tryItOut("if(new Exception()) return; const prop; else  if ((#1=({prototype: prototype.(true++)}))) export __noSuchMethod__;");
tryItOut("{var constructor = __proto__, __proto__ = false;{} }");
tryItOut("/*infloop*/for(var prototype; <><x><y/></x></>.hasOwnProperty(\"__proto__\").*; eval(\"*::*\", (yield eval(\"(-1)\", <><x><y/></x></>)))) {{let __proto__, __noSuchMethod__; } }");
tryItOut("/*for..in*/for(let __count__(({prototype: (({__iterator__ setter: (window).apply }))})) in (('haha'.split)(this.zzz.zzz)))break ;gc()");
tryItOut("/*for..in*/for(({ __proto__: constructor }) in (([1,2,3,4].slice)(__count__ = (__parent__ = __noSuchMethod__-=*::*))))export *;");
tryItOut("{throw <><x><y/></x></>; }");
tryItOut("M:if(1e-81) let __iterator__ = ;");
tryItOut("var __parent__, __noSuchMethod__ = (function ([y]) { })();");
tryItOut("with({}) { try { for(let y in []); } catch(each) { this.zzz.zzz; } \rfinally { throw StopIteration; }  } ");
tryItOut("/*infloop*/switch(this.__defineSetter__(\"prop\", ({}).hasOwnProperty)) { case  /x/ .__count__ >> (3.141592653589793 == -3/0):  }");
tryItOut("/*for..in*/M:for(var __proto__ in ((/a/gi)((([1,2,3,4].map).call(this, false)))))export prop;");
tryItOut("(033.__lookupSetter__(\"constructor\"))\n5.0000000000000000000000");
tryItOut("return;");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("if(([])) { if (( /x/g )()) {;const __parent__ = <><x><y/></x></>, prop = <y><z/></y>; }} else gc()\t{}");
tryItOut("if([this]) ();");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = this in  '' ) {return;__count__ = <x/>; }");
tryItOut("L:with({constructor: <x/> % <><x><y/></x></>})/*infloop*/for([,,]; (5.0000000000000000000000 if (constructor)); 'fafafa'.replace(/a/g, <x><y/></x>).yoyo(eval(\"yield this;\", false))) {}");
tryItOut("L: /*for..in*/for(__proto__ in ((new Function)([z1,,]))){null = <y><z/></y>; }");
tryItOut("/*infloop*/do /*for..in*/for(const __proto__ in ((function(q) { return q; })(prop))){} while( '' ());");
tryItOut("/*infloop*/for(<x/>; eval(\"(return *::*)\", __noSuchMethod__ = <><x><y/></x></>); (null @  \"\" )) {throw <x/>; }");
tryItOut("();");
tryItOut("export *\ngc()");
tryItOut("/*for..in*/for(var __proto__.yield in *) return  /x/g ;/*infloop*/for(__noSuchMethod__; delete (<y><z/></y> *= [1]); [,,z1] ?  /x/g  :  \"\" ) {do var prototype; while((<x><y/></x>.(<y><z/></y>)) && 0);/*infloop*/while(constructor = <ccc:ddd><!--yy--></ccc:ddd>)yield (-0); }");
tryItOut("/*infloop*/while( ''  && <x><y/></x>)export *;");
tryItOut("let (__iterator__ = [@foo.propertyIsEnumerable(\"prototype\") for (__noSuchMethod__ in <><x><y/></x></>) for (__noSuchMethod__ in <x><y/></x>)]) { L:if(this) { if ( /x/g ) let __parent__; else yield -1;} }");
tryItOut("let(prop, prop = <x><y/></x>) ((function(){})());");
tryItOut("with(((undefined & this.__defineSetter__(\"__proto__\", function  __proto__ () { /*\n*/return  ''  } )) , (this.__defineSetter__(\"__proto__\", [1,2,3,4].slice))))/*for..in*/M:for(let __iterator__ in ((eval)((p={}, (p.z = <><x><y/></x></>)())))){yield; }");
tryItOut("__proto__ = x::__noSuchMethod__;");
tryItOut("if(()) {return prop; } else {let __noSuchMethod__, __parent__; }");
tryItOut("if([<><x><y/></x></>].some(function(y) { yield y; const __count__;; yield y; })) (<y><z/></y>);");
tryItOut("do do { } while((function(id) { return id }) && 0); while((<><x><y/></x></>++) && 0);");
tryItOut("\fM:if((constructor |= <x><y/></x>) ^ *) {var __proto__ = undefined.unwatch(\"__iterator__\"), constructor = <><x><y/></x></>; } else  if ((let (__noSuchMethod__) null /= <y><z/></y>.__parent__)) {/*for..in*/for(const [1] = __noSuchMethod__ = <y><z/></y> in *::*) (this); } else { /x/g ; const __count__; }");
tryItOut("while((new String(null).throw(<y><z/></y>.yoyo(undefined))) && 0){\freturn <y><z/></y>; }");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = new (gc)((yield <(/x><y/></x>), __proto__) in eval(\"eval(\\\"[,,z1]\\\", <y><z/></y>.__noSuchMethod__ = window)\", __proto__))  /x/g ;");
tryItOut("throw StopIteration;");
tryItOut("(@foo);");
tryItOut("export *\nif(prototype %= *::*) this; else {return; }\nif(({ get __parent__() { export *; } ,  get window(__noSuchMethod__)__count__ })) {{if( /x/g ) __parent__ = function(id) { return id }, __proto__ = 4.; else  if ({}) { } else throw  /x/g ; } }");
tryItOut("return\n/*for..in*/for(let __parent__ in <><x><y/></x></>) {yield; }");
tryItOut("return constructor = (eval(\"__iterator__\", __count__) /= [15,16,17,18].sort(({}).hasOwnProperty, false));");
tryItOut("do {M:if([,,]) return <x/>; } while((this) && 0);");
tryItOut("switch(window) { case null: return get; }");
tryItOut("{yield 0/0; const constructor; }");
tryItOut("throw __noSuchMethod__;");
tryItOut(" /x/ ;constructor;");
tryItOut("try { with({}) let(({ __count__: prop }), __proto__ = <><x><y/></x></>) ((function(){with({}) { var prototype =  /x/g , __count__; } })()); } catch(__noSuchMethod__) { for(let y in []); } ");
tryItOut("/*infloop*/for([, , constructor, ({ __iterator__: constructor, prop: prop })] = (prototype%='fafafa'.replace(/a/g, ({}).__lookupGetter__)) ? constructor.prop setter= function () { yield <x><y/></x> }  : (RegExp(0/0, false)); \f >  /x/  !== <><x><y/></x></>; <><x><y/></x></> , <><x><y/></x>\f</>) export *\n");
tryItOut("L:do {__noSuchMethod__ = *;__iterator__, prop = false; } while((([11,12,13,14].filter)) && 0);");
tryItOut("if(0.1) { if (undefined) let __noSuchMethod__, function::__iterator__; else {export prop; }}");
tryItOut(" const __parent__;");
tryItOut("return;");
tryItOut("yield -1;");
tryItOut("return @foo;");
tryItOut("if((this.__defineGetter__(\"__iterator__\", function(y) { yield y; ([]);; yield y; }))) {/*for..in*//* nogeckoex bug 349964 */M:\f for  each(var __parent__ in <><x><y/></x></>) export *; } else  if ((set\n)+=-1 -= __count__.__proto__ setter= (1 for (x in []))) ; else return 0/0;");
tryItOut("do /*for..in*/M:for(const [constructor, prototype] = 0 in 0) const __proto__ = window, __noSuchMethod__ = false; while((this.zzz.zzz) && 0);");
tryItOut("/*infloop*/do /*for..in*/L:for(<y><z/></y>.__defineSetter__(\"__count__\", function(q) { return q; })['prototype'] in (((1 for (x in [])))((!1e4)))){({}).__defineSetter__(function(id) { return id }); } while(__count__.__iterator__ = (*++));");
tryItOut("for(let y in []);");
tryItOut("break L; const __count__;");
tryItOut("{} const prototype;");
tryItOut("L:\fdo {const __noSuchMethod__ = <x><y/></x>;(undefined) } while(((3.141592653589793()).yoyo(__noSuchMethod__ = window)) && 0);");
tryItOut("if(__count__) {const __noSuchMethod__, __parent__ = undefined; } else { }");
tryItOut("if(__parent__|=<y><z/></y>.valueOf(\"number\") >>>=__iterator__ = this) { if (null) {{}L:if(((1 for (x in []))).call(window, ))  } else /*infloop*/do {export *; } while(this.__defineSetter__(\"prop\", (1 for (x in []))));}");
tryItOut("if(([z1] ==  '' /)) {var __proto__ = <y><z/></y>;\nbreak ;\ngc() }/*infloop*/L:for(null; this; 1e-81) gc()");
tryItOut("{{yield;continue M; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in eval(\"export //h\\nprop;\", <x/>)) {export *; }");
tryItOut("/*infloop*/for((Function); ('fafafa'.replace(/a/g, ({a1:1}))); ((<x><y/></x>)(__parent__, true) >>  \"\" .@foo)) {throw ({a1:1}); }");
tryItOut("{}");
tryItOut("/*infloop*/L:for(this; (void ([({a2:z2})].filter('haha'.split))); 0/0) if(((function(y) { yield y; {}; yield y; })())) export __proto__");
tryItOut("L:if(new RegExp().@foo) { if (033) export __proto__;} else export __proto__;");
tryItOut("\twith(__parent__)const __count__ = #3={a:#3#}, __noSuchMethod__ = <x><y/></x>; const prototype;");
tryItOut("throw __count__;");
tryItOut("return #1=[#1#];");
tryItOut("throw StopIteration;");
tryItOut("L:do /*infloop*/while(new RangeError([[1]])){break L;function () { yield  ''  }  } while((null.__lookupGetter__(\"__iterator__\")) && 0);");
tryItOut("/*infloop*/for(const prop; <y><z/></y> * <x><y/></x>; @foo.throw(this)) yield <x/>;");
tryItOut("if(((p={}, (p.z = __proto__-=<><x><y/></x></>)()))) {export __proto__; } else  if (*::* === <x><y/></x>) __parent__");
tryItOut("for(let y in [5,6,7,8]) throw (this.__defineGetter__(\"prototype\", function (constructor, set) { yield <y><z/></y> } ));");
tryItOut("if(<y><z/></y>.__defineSetter__(\"__noSuchMethod__\", function  __proto__ () { yield <><x><y/></x></> } )\f) while((undefined) && 0){const prototype = <><x><y/></x></>, constructor; }\nconst prop = undefined;\n else  if (\nconstructor.eval( \"\" ).watch(\"prop\", null.hasOwnProperty(\"prop\"\t))) /*for..in*/L:for(let [__iterator__, prop] = prototype in 1.2e3) {yield  \"\" ; }");
tryItOut("__iterator__.__count__ = constructor");
tryItOut("switch(eval(\"(({}));\", window.__defineGetter__(\"__noSuchMethod__\",  '' ))) { default: (<><x><y/></x></>);break;  }");
tryItOut("false\nyield #1=[#1#];\n");
tryItOut("/*for..in*/M:for(const [__proto__, __parent__] = <x><y/></x> in (@foo[*])) /*for..in*/for(let [prop, constructor] =  \"\"  .@x:: 1e4 in window) {export *;{\r} }");
tryItOut("/*infloop*/for(const constructor = <y><z/></y>; (new (new [1,2,3,4].map(yield <y><z/></y>))()); (function  __count__ (__count__, __parent__) { yield window -= __parent__ } )()) yield  '' ;if([undefined].some(({}).hasOwnProperty)) { if ((*::*.isPrototypeOf(true))) throw <x><y/><\t/x>; else {gc()let prototype, __parent__; }}");
tryItOut("with({}) { ; } ");
tryItOut("/*infloop*/for(let __parent__ = null; (yield <><x><y/></x></>); ((__proto__)((function ([y]) { })(), [z1]).eval(0/0))) /*infloop*/do {export constructor;break L; } while(this);");
tryItOut("if(__proto__.__count__) {if(yield __noSuchMethod__++) {var prototype; } else constructor } else  if (\n<x/>) /*for..in*/for(var __noSuchMethod__ = <y><z/></y> in -1) yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(let [prop, ] in ( /* Comment */<><x><y/></x></>)) /*for..in*/L:for(__count__ = <><x><y/></x></>.__defineSetter__(\"prototype\", ({}).__lookupGetter__) in @foo) {return; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in new (1.3[null])) ");
tryItOut("/*for..in*/for(let __iterator__ in (p={}, (p.z = void <x><y/></x>)())) {L:if(window < <><x\f><y/></x\t></>) {__count__ = [,,z1], prototype = <y><z/></y>;return; } else {throw -3/0;throw (function ([y]) { })(); } }");
tryItOut("/*infloop*/for(let ({ prototype: prop }) = \nfunction(id) { return id }; (continue M); constructor.constructor = (p={}, (p.z =  \"\" )())) (*);");
tryItOut("/*infloop*/for(const prototype = (function ([y]) { })(); <><x><y/></x></>; <x><y/></x>) {const prototype, set; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const (__noSuchMethod__ = (Math.pow)) in let (prototype = new Exception()) (<x><y/></x>.__count__)) \nL:if((0.__lookupSetter__(\"__proto__\"))[(#1# ? function ([y]) { } : <><x><y/></x></>)].__defineSetter__(\"__iterator__\", [[1]])) gc() else  if (\t[prototype >>> function(id) { return id }++]) ([1,2,3,4].map).call else gc()");
tryItOut("(<><x><y/></x></>)\nbreak M;");
tryItOut("/*for..in*/for(var prototype = (this.__defineGetter__(\"prop\", gc)) .@*:: (__parent__ ? false : <y><z/></y> + <y><z/></y>).hasOwnProperty(\"__count__\")\n in (--(prop-=undefined === <><x><y/></x></>) && __iterator__ = <x><y/></x>)) yield let (__proto__, __noSuchMethod__ = <><x><y/></x></>) (function ([y]) { })().throw([]);");
tryItOut("if(prototype, __noSuchMethod__) return; else  if (([15,16,17,18].some('haha'.split, <x><y/></x>))) switch( /x/ ) { default: prop; } else {/*infloop*/M:for(const __noSuchMethod__; constructor = <x><y/></x>; constructor%=[,]) {yield 0/0; }/*for..in*/for(var __noSuchMethod__ = *::* in __parent__) ; }");
tryItOut("__noSuchMethod__.prototype");
tryItOut("function(y) { yield y; const __parent__ = @foo, prototype = <><x><y\f/></x></>;; yield y; }\n(1 for (x in []))\n");
tryItOut(";");
tryItOut("/*infloop*/for(const prototype; new @foo ? this : function ([y]) { }(); (this.__defineSetter__(\"prop\", <y><z/></y>))) switch(-1) { default:  }");
tryItOut("L:with({prototype: __proto__ = 1e-81}){export *;prototype }");
tryItOut("{(__proto__); }");
tryItOut("L:with({__count__: (<bbb xmlns:/*\n*/ccc=\"false/*\n*/\"><ccc:eee></ccc:eee></bbb>.(*::*))}){yield; }");
tryItOut("/*for..in*/for(__parent__.__noSuchMethod__ in constructor .@x:: false.__lookupSetter__(\"prototype\")) /*for..in*/for(let eval(\"return;\", <x><y/></x>) = (function (constructor, __iterator__) { return; } (({ get prototype(__count__, __iterator__) { yield null } ,  /x/g  setter: __parent__ }), <x><y/></x>)) in <ccc:ddd><!--yy--></ccc:ddd>) L:if(3.141592653589793) {var __parent__ = __iterator__, prototype = <x/>;let __count__, each; } else {var __proto__ = __proto__, prop;");
tryItOut("switch(window) { default: /*for..in*/for(__noSuchMethod__ in ((({}).__lookupGetter__)(<><x><y/></x></>)))export __iterator__;break; break;  }");
tryItOut("if(<> </>) { if ((( - (__count__ %= 5.0000000000000000000000))())) \f__noSuchMethod__ =  /x/ , __noSuchMethod__;} else {gc()<><x><y/></x\f></> }");
tryItOut("/*infloop*/for( /x/g ; (({prototype: , prop: #1#.__noSuchMethod__ = <x><y/></x> })); (p={}, (p.z = null)()) .@*:: (<x><y/></x>)(1.2e3)) {L: return;; }");
tryItOut("L: if(({__count__: * })) {const __proto__, prop; } else {return prop; }");
tryItOut("/*infloop*/while(-0){}");
tryItOut("{continue M;yield this; }");
tryItOut("while((true in -0 <= ([<x><y/></x>].__defineGetter__(\"prop\", ({}).hasOwnProperty))) && 0){const constructor; }");
tryItOut("if(*::*) let (yield) { (<><x><y/></x></>); } else {gc() }");
tryItOut("if( ''  % <x/>)  else  if (Object()) {export __iterator__;; }");
tryItOut("with([<x><y/></x> for each /(__proto__ in )]|='fafafa'.replace(/a/g, yield [1,,]) :: (yield (<x/> ? @foo : true %= function ([y]) { }.__defineSetter__(\"__proto__\", yield 0/0;))))gc()");
tryItOut("/*infloop*/L:for(new (<zzz>(<x><y/></x>.(<x/>))</zzz>)().*; this.zzz.zzz; this.__defineSetter__(\"__count__\", Math.pow)) {var constructor = @foo; }");
tryItOut("{for(let y in []);let(constructor = __iterator__ = __count__ += ([undefined if (<x><y/></x>)]), __count__ = void <><x><y/></x></>) ((function(){yield (uneval(this.__defineGetter__(\"__parent__\", ([1,2,3,4].map).call\f\n)));})()); }");
tryItOut("with((p={}, (p.z = prop.__parent__ setter= __iterator__)()))switch((Function((4. @ this), eval(\"var function (__parent__, __iterator__) { return <x><y/></x> } ;\", <x><y/></x>)))) { default: /*infloop*/do return; while(-1.__iterator__ = true); }");
tryItOut("(window);{}");
tryItOut("M:if('fafafa'.replace(/a/g, <x><y/></x\t>).__lookupGetter__(\"prototype\")) yield; else return 033;");
tryItOut("M:if(this)  else return  '' ;");
tryItOut("if(new (function(q) { return q; })([,,z1], <><x><y/></x></>)) {export *; }/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype(null) in window !==  /x/ ) \nconst __iterator__ = 033, __parent__;\n");
tryItOut("/*infloop*/do if([z1] - <y><z/></y>) { if ((prop = <x><y/></x>) ? ( /x/ )(false, null) : true ? *::* : prototype) {} else {{}{} }} while(<x><y/></x> ? <y><z/></y> : <y><z/></y>);");
tryItOut("let(prop) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/L:for(true.__count__; ({ prototype: __iterator__, prototype: __noSuchMethod__ }) = constructor; [,]) ");
tryItOut("with(prop){(gc).apply }");
tryItOut("let (prototype, __proto__) { continue ; }");
tryItOut("if( '' .yoyo( '' ).__parent__ = new (<><x><y/></x></>)(3, <x><y/></x>)) { if (new ((0.1)[(function ([y]) { })()])(<!--yy-->,  /* Comment */false)) {function  __count__ (__count__) { return  /x/g  } let __count__ = 1e-81; } else {continue ; }}");
tryItOut("let([], __noSuchMethod__ = undefined) { let(prop, x::__parent__ = __parent__) {  '' ;");
tryItOut("");
tryItOut("{with(<zzz>window</zzz>.(<><x><y/></x></>)){export __parent__; }/*infloop*/while(--<x><y/></x>){throw -3/0;export prop; } }");
tryItOut("\tyield;let __count__;");
tryItOut("return <><x><y/></x></>.__noSuchMethod__ = <y><z/></y>;");
tryItOut("/*for..in*/for(let [prop, __proto__] = (function ()this.zzz.zzz) in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {export *;M:if(<><x><y/></x></>.prop = window) var __iterator__ = 0.1, prototype = <><x><y/></x></>; else  if ((function  __parent__ () { yield <y><z/></y> } )())  else {export prototype; } }");
tryItOut("this.zzz.zzz;");
tryItOut("let(__iterator__ = __noSuchMethod__ = [1,,], __parent__) { with({}) { return; } ");
tryItOut("export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (new (function(q) { return q; })((new Array(1.2e3))))) /*for..in*/for(const __parent__ in window) return;");
tryItOut("let prop = true;yield;");
tryItOut("export *; const __noSuchMethod__;if(constructor.__count__) { if ( '' .__lookupSetter__(\"prototype\")) (<x><y/></x>);} else ");
tryItOut("let (__proto__ = (true.valueOf(\"number\"))) { /*for..in*/for(let [__parent__, __count__] =  ''  in -1) yield <x/>; }");
tryItOut("if(window) break M; else {yield 1e+81;throw undefined; }");
tryItOut("/*for..in*/for(__iterator__ in ((Math.sin)(({__iterator__: false}))))\nwhile((__proto__) && 0){yield; }\n");
tryItOut("/*infloop*/M:while((new (gc)()))");
tryItOut("{({}).hasOwnProperty }");
tryItOut("(constructor);");
tryItOut("(__proto__ = __iterator__);");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] =  /* Comment */@foo.unwatch(\"__noSuchMethod__\").unwatch(\"__proto__\") in (({}).hasOwnProperty())) {yield;if(prop = <x><y/></x>) {window; } else  if (4.) {__proto__ = *::*; } else {gc() } }");
tryItOut("let (__count__ = 1e81) { /*for..in*/for(var __parent__ in (-0)) {return; } }");
tryItOut("(true).watch\n\n");
tryItOut("with({__proto__: @foo.unwatch(\"prototype\")})export *;");
tryItOut("{}");
tryItOut("with(((uneval(({a1:1})))))/*infloop*/do {yield [];yield; } while((__parent__.prototype =  { return prototype = null } ));");
tryItOut("/*infloop*/do var __proto__; while(((<x><y/></x>.(*).__defineGetter__(\"__count__\", (({}).hasOwnProperty).call)) * let (__iterator__ = <y><z/></y>) yield).valueOf(\"number\"));");
tryItOut("yield (function ([y]) { })();");
tryItOut("if([15,16,17,18].sort(function () { continue ; } , __iterator__ = <x><y/></x>)) let __count__, __noSuchMethod__ = 4.; else  if ((\n /* Comment */true)) with({prototype: false @ (-0)})({}).__lookupGetter__");
tryItOut("__parent__ = __count__;");
tryItOut("/*infloop*/for([,].__lookupGetter__(\"__proto__\") << (/a/gi(eval(\"yield;\", <y><z/></y>), <><x><y/></x></>))['__iterator__'] = \ffalse , new (1 for (x in []))(window).__defineGetter__(\"__iterator__\", window / <><x><y/></x></> |= <><x><y/></x></>); ( /x/  > [ /x/g ]); ((* .@x:: <x><y/></x>--)[(<x><y/></x>)[<x><y/></x>]]).__iterator__) { if (<x><y/></x>) }");
tryItOut("/*infloop*/L:for(<y><z/></y>; <x><y/></x>;  /x/g ) continue L;");
tryItOut("/*infloop*/for(new #3={a:#3#}(window, __proto__); yield ('fafafa'.replace(/a/g, /a/gi)); (((-1)).watch).call((new <y><z/></y>(0x99, [[1]])), constructor = this, <><x><y/></x></>) *= (#1=[#1#])//h\n) /*for..in*/M:for(const prop = window in  /x/g ) (this).watch");
tryItOut("let(__parent__ = prototype.__parent__, prototype = 1.2e3) ((function(){with({}) { gc } })());");
tryItOut("L: {(<><x><y/></x></>);yield <x/>; }");
tryItOut("L:if((constructor.constructor+=\n3)) { if ((<x><y/></x>(true, false)) /= 1.2e3.*) {; } else {break L;return this; }}");
tryItOut("const constructor = this, prop;return;");
tryItOut("/*infloop*/for(const __proto__; (prop.(__iterator__ =  /x/g ) |= @foo); (__iterator__ = arguments)) {switch(this) { case 8: throw 1.2e3;break; __noSuchMethod__ = *::*, constructor; } }");
tryItOut("{/*for..in*/L:for(let constructor in ((new Function)(((yield __parent__)))))while((__count__) && 0)throw window;var __iterator__, constructor; }");
tryItOut("do  while(((<><x><y/></x></> > this)) && 0);");
tryItOut("M:if((new (({}).hasOwnProperty)\f((function () { null; } ).call(__iterator__, null)))) {export prop;return __count__; } else  if (__proto__) if(*::* || window) {let constructor = <><x><y/></x></>;let constructor, constructor; } else  if (<><x><y/></x></>) yield *; else {var prop = __proto__; }");
tryItOut("/*for..in*/for(const prototype in ((new Function)(yield -<><x><y/></x></> != __parent__ =  '' .@*))){if([1,,]) { } else {gc() }{}\nswitch([,,]) { case 1: yield;break; case 7: return;default: function  __proto__ (prop, prototype)033case #1=[#1#]: export prop;break; case <y><z/></y>: const __proto__;case 3: break; case 9: break; case 7: gc()break; export *;case  \"\" : break; case ({}): let prototype = <><x><y/></x></>, constructor;break; case true: continue ; } }");
tryItOut("__count__ =  /x/g , __proto__ = <><x><y/></x></>;return;");
tryItOut("if(prototype|=false) {return  '' ; }");
tryItOut("/*for..in*/for(var __parent__ in ((function () { return <x><y/></x> } )(let (function::prototype, prototype = <y><z/></y>)  /x/g )))");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in 1e81 instanceof *::*) {prototype;L: let __proto__ = <x><y/></x>, constructor; }");
tryItOut("L: export *;continue M\n");
tryItOut("do {; } while(((eval(\"var constructor = <><x><y/></x></>;\", @foo)).__defineGetter__(\"constructor\", (new Function(\"if(null) {__count__ = <><x><y/></x></>, __count__ = __proto__;throw @foo; } else  if (<y><z/></y>) {throw prototype; }\"))).*) && 0);");
tryItOut("if((constructor = prop)) { } const __iterator__;");
tryItOut("M:switch(<x><y/></x>) { default: let prop;break;  }");
tryItOut("/*for..in*/for([constructor\n, constructor] = <><x><y/></x></>.__lookupSetter__(\"constructor\").__noSuchMethod__ in <x/>) {; }");
tryItOut("/*infloop*/M:for(this.__defineGetter__(\"prop\", <x/>) .@*:: (); (<><x><y/></x></>.__iterator__ = (__iterator__ = __parent__)++); try { __noSuchMethod__ = __count__; } catch(constructor if ({ set prop __parent__ (__iterator__, __proto__) { yield window }  })) { for(let y in []); } catch(__noSuchMethod__ if ([,]++)) { with({}) export *; } catch(__proto__) { gc() } finally { prototype = constructor; }  ^ --(true for (__parent__ in  '' ))) /*for..in*/for(const __parent__ in ((gc)( /x/ )))return;");
tryItOut("constructor = 'fafafa'.replace(/a/g, 'haha'.split), prototype\neval\n");
tryItOut("/*for..in*/for(var function::prop =  '' .__proto__ in ({ get __parent__ __noSuchMethod__ (constructor) { yield; } , [1,2,3,4].slice })) {<x><y/></x> }");
tryItOut("M:if(3.isPrototypeOf(3).__lookupSetter__(\"__count__\")) let __proto__ = [z1], __proto__ = <y><z/></y>; else  if (__proto__ = __count__) {gc() } else {( /x/g ).watch }");
tryItOut("let(__iterator__, __proto__ = 0x99) { export *;yield <><x><y/></x></> -= @foo;");
tryItOut("yield\n");
tryItOut("if((uneval( /x/g ))) /*for..in*/M:for(const [__parent__, __iterator__] = *::* in <x><y/></x>) {(<y><z/></y>); } else  if (#0=[[z1,,]]) {; }");
tryItOut(" \"\" ");
