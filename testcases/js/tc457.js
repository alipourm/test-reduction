tryItOut("/*infloop*/L:do if(1.3) export __parent__; while(!1e-81);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <y><z/></y>) {return; }");
tryItOut("if(<x><y/></x>) {{let prop = {}, __count__ = #3={a:#3#}; } }");
tryItOut("with({}) return;");
tryItOut("/*for..in*/for(let constructor =  /x/  in *) {return <x><y/></x>; }");
tryItOut("with({}) {  } ");
tryItOut("//h\ntry { prop setter: (1 for (x in [])) } finally { <><x><y\t/></x></>; } ");
tryItOut("__iterator__ = <><x><y/></x></>, delete = *;");
tryItOut("L:switch(undefined) { case 0: L:if(<x><y/></x>) return; else  if (<><x><y/></x></>) {gc()yield; } else try { Math.pow } finally { yield <x><y/></x>; } break;  }");
tryItOut("/*infloop*/M:while(<y><z/></y>)true;");
tryItOut("for(let y in [5,6,7,8]) return <><x><y/></x></>\f;");
tryItOut("while(( /x/ .hasOwnProperty(\"__count__\")) && 0)break ;");
tryItOut("{const prototype = ({}), prop = <y><z/></y>;/*infloop*/for(__iterator__; ({a2:z2}); <y><z/></y>) ; }");
tryItOut("");
tryItOut("return;break L;");
tryItOut("with(((#2=<x><y/></x>)()))<x><y/></x>\n");
tryItOut("/*for..in*/L:for(var __iterator__ in ((function(q) { return q; })(<x><y/></x>.unwatch(\"__count__\")))){(0x99); }");
tryItOut("L:if(__noSuchMethod__ = ({ __count__: [[], [__proto__, , , ], ], constructor: __iterator__ })) { if ((eval(\";\", <y><z/></y>).__lookupGetter__(\"__proto__\"))) {/*for..in*/M:for(const <x/> in undefined.__defineGetter__(\"__noSuchMethod__\", gc)) {prototype = function::__proto__, get = #3={a:#3#};var __parent__ = *, __count__; }/*for..in*/for(const __noSuchMethod__ in ((Function)((<y><z/></y> <<= {}))))/*infloop*/while(@foo\t){__parent__ = <x/>, <><x><y/></x></>;{} } } else {var __parent__;*::*; }}");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = this ^= <x><y/></x> in (yield __iterator__.__parent__ = x::constructor)--) return");
tryItOut("L:with({constructor:  /x/g }){return <><x><y/></x></>; }\n;");
tryItOut("/*infloop*/for(false * *::*.prototype = [15,16,17,18].filter(function  prototype (__count__, constructor)null, <x><y/></x>.throw([[1]])); 4.; (function(id) { return id }.hasOwnProperty(\"__proto__\") instanceof (<x/> <<= !<x><y/></x>))) L:if(<><bbb xmlns:ccc=\"0x99\"><ccc:eee></ccc:eee></bbb></> >= <x/>.*) /*infloop*/do {({}).__lookupGetter__ } while(.2); else  if (function (prototype, __parent__)<\tx><y/></x>) const __proto__, constructor = true;");
tryItOut("/*for..in*/for(const __count__ in ((Math.sin)(({ __parent__: ({ __iterator__: __proto__, constructor: constructor }) }) = )))const __parent__ = undefined, constructor;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/L:for(__iterator__ in (((({}).__lookupGetter__).apply)(this)))const prop;{}");
tryItOut("/*infloop*/for(const __noSuchMethod__; new null(<x><y/></x>); (constructor)[this]) let __parent__, __iterator__;");
tryItOut("if(this) {/*for..in*/for(let __noSuchMethod__ in function ([y]) { }) return 0.1;let prop = <x/>, constructor = <y><z/></y>; }");
tryItOut("if(null) { /x/ ; }");
tryItOut("/*infloop*/L:do {{}throw window; } while(__noSuchMethod__);");
tryItOut("return;");
tryItOut("let(__iterator__ = <><x/> == -1</>) { __parent__.__proto__ = [1];");
tryItOut("if(*::*--[true.__defineGetter__(\"__parent__\", function(id) { return id })]) continue ;/*for..in*/for(let [__noSuchMethod__, prototype] = eval(\"return [];\", *) in __noSuchMethod__) {{}; } else <ccc:ddd>yyy</ccc:ddd>");
tryItOut("try { for(let y in [5,6,7,8]) yield; } finally { __proto__ = __parent__; } ");
tryItOut("if((this .@*::  '' )) { if (window *= ({})) {<ccc:ddd></ccc:ddd> }} else __noSuchMethod__, constructor;");
tryItOut("/*infloop*/for(var __parent__; (constructor.__noSuchMethod__.yoyo(<x><y/></x>.isPrototypeOf\t(false))).watch(\"__count__\", eval); __count__) {/*infloop*/do return; while(-1); }");
tryItOut("{} const __noSuchMethod__;");
tryItOut("/*infloop*/do yield; while(@foo);");
tryItOut("let(__iterator__ = ((__count__).*)) ((function(){for(let y in []);})());");
tryItOut("with({__noSuchMethod__: 1e-81})export *;");
tryItOut("/*for..in*/L:for(const [__parent__, , ] in  /x/ .valueOf(\"number\") <= [<><x><y/></x></>] << (this.__defineGetter__(\"prop\", ([1,2,3,4].map).apply))) {{} }");
tryItOut("if(function(id) { return id }) {return [,]; } else  if (constructor) let __noSuchMethod__ = @foo, prop = <x><y/></x>; else __count__, __parent__ = __parent__;");
tryItOut("if(( /* Comment */{})) var __proto__ = 3/0; else  if (__proto__.yoyo(1e81)) { \"\" yield; } else { }");
tryItOut("let([, (__parent__), , ] = ((this)), __count__) { __count__ = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __count__: ({ __parent__: ({ constructor: [], __iterator__: ({ prop: ({ __noSuchMethod__: __count__ }) }) }) }), __noSuchMethod__: [({ __count__: ({ __proto__: ({ __proto__: prop }) }) }), ] }) in constructor = <y><z/></y>.yoyo(<><x><y/></x></>)) {yield (__proto__.(<y><z/></y>.__lookupSetter__(\"__noSuchMethod__\")));/*for..in*/for(constructor in (((function (prototype) { yield <><x><y/></x></> } ).call)(<x/>)))throw @foo; }");
tryItOut("while((__iterator__) && 0){throw  /x/g ;gc() }\n");
tryItOut("{}");
tryItOut("yield function ([y]) { };");
tryItOut("if(*) {return;function  __proto__ () { return undefined }  }");
tryItOut("prototype");
tryItOut("M:if(([undefined].filter(({}).hasOwnProperty))) { if (((<><x><y/></x></>)[<y><z/></y>].__lookupSetter__(\"__iterator__\"))) ; else {{}(new Function(\"export *;\")) }}");
tryItOut("do <x><y/></x> while((__count__) && 0);");
tryItOut("if(([11,12,13,14].map)) { if (({\tprototype: [15,16,17,18].map(eval, 'fafafa'.replace(/a/g, [1,,])), prototype: ({constructor: ( /x/ .__count__), __iterator__: this.__defineSetter__(\"constructor\", eval) }) <<= this.zzz.zzz })) {L: {<y><z/></y>; } } else {const ;let prop, constructor = {}; }}");
tryItOut("try { for(let y in [5,6,7,8]) gc() } catch(__parent__) { throw __proto__; } ");
tryItOut("/*for..in*/for(var __proto__ in ((1e-81)(@foo)))export __parent__;");
tryItOut("if(*) const ;\f else  if (<x/>) var __proto__ = prop;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (window.valueOf(\"number\").__count__ = <x><y/></x>.__lookupSetter__(\"__parent__\")) === this.__defineSetter__(\"__iterator__\", __proto__)) /*for..in*/for(const [__parent__, prototype] = __noSuchMethod__ = <x><y/></x> in  \"\" ) __iterator__ = this;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ({}); (prop ? <x/> :  /x/ ); 5.0000000000000000000000) {if(<y><z/></y>) {export constructor;/*infloop*/while(window)gc() } else {}{} }");
tryItOut("/*infloop*/do {{} } while(((__iterator__ for each (__parent__ in <><x><y/></\rx></>))));");
tryItOut("with({__parent__: __count__ = <><x><y/></x></>.__count__.__lookupGetter__(\"__noSuchMethod__\").unwatch(\"__iterator__\")}){throw ([,,z1]());if(3.prototype) let prototype = true, __noSuchMethod__ = function(id) { return id };with({__count__: }){@foo;return  '' ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let \t__proto__ in eval(\"export *;\", (function ([y]) { })())) let constructor, __iterator__ = prototype;");
tryItOut("with(eval(\"(-0)\", [[]]))L:with(<><x><y/></x></>.__lookupSetter__(\"__iterator__\")){var prop, __noSuchMethod__ = undefined;const __iterator__ = (function ([y]) { })(); }");
tryItOut("if(<y><z/></y>.unwatch(\"__proto__\") >>> [1,,] |= 3/0) {with([@foo]){return *; } } else  if (prototype.prop setter= \fFunction.__defineSetter__(\"__proto__\", (function(y) { yield y; export prototype;; yield y; }).__defineSetter__)) yield this");
tryItOut("if(prototype.__noSuchMethod__ setter= *::*) /*infloop*/for((<x/> .. []).__iterator__ = -1.throw(this); prototype.__noSuchMethod__ = (<x><y/></x>.(<x><y/></x>)); let (__noSuchMethod__, constructor = *::*) <x/>.@foo) /*for..in*/for(let [__iterator__, __count__] = * in this) {yield;<y><z/></y>; } else  if (3.141592653589793) L:if(<x/> ? <><x><y/></x></> : window) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in __count__) {throw <x><y/></x>; }");
tryItOut("for(let y in [])\n");
tryItOut("return ;");
tryItOut("switch(\r__proto__.__parent__ =  \"\" .yoyo(<x><y/></x>)) { case 0: ; }");
tryItOut("if(0/0) continue L; const __noSuchMethod__;");
tryItOut("\fif(var each = -3/0, prototype) *::*; else  if ((function () { yield <x/> } ).apply) {([,]); } else return;");
tryItOut("export prototype\n");
tryItOut("if([11,12,13,14].sort) window;");
tryItOut("/*for..in*/L:for(prototype in ((\ffunction(y) { yield y; do {{} } while((<><x><y/></x></>) && 0);; yield y; })(new ((window.undefined).__defineGetter__(\"__noSuchMethod__\", (new Function(\"__parent__ = <><x><y/></x></>, prototype = undefined;\"))))(('fafafa'.replace(/a/g, @foo) for (prototype.__count__ in __noSuchMethod__) if (__iterator__)), __parent__.yoyo(__noSuchMethod__))))){{}/*for..in*/for(let __noSuchMethod__ in ((/a/gi)( /x/ )))return;let __proto__, __parent__ = z; }");
tryItOut("{yield;yield  /x/ ; }");
tryItOut("let (__parent__, __iterator__) { ; }");
tryItOut("if((function ([y]) { })()) { if (#1=[#1#]) {export *; }} else {yield;yield __proto__; }");
tryItOut("{__iterator__;break L; }\n");
tryItOut("/*infloop*/do ([,,z1]); const __parent__; while(new new Function(<><x><y/></x></>));");
tryItOut("{do (window); while((<> /x/g </>) && 0); }");
tryItOut("throw StopIteration;");
tryItOut("{;\nyield;\nif(new (<x><y/></x>)(<y><z/></y>, 0x99))  else  if (*) {let constructor;function(q) { return q; } } else let [[]]; }");
tryItOut("/*infloop*/for([, , , prototype, ] = prop; [15,16,17,18].map(({}).hasOwnProperty, null); ) {yield 1.3; }");
tryItOut("export __iterator__");
tryItOut("L:with(this)try { break L; } catch(constructor) { throw __iterator__; } finally { {} } ");
tryItOut("break ;");
tryItOut("return;");
tryItOut("__parent__, __iterator__ = constructor%=<><x><y/></x></>;[] = prop;");
tryItOut("/*infloop*/M:do yield; while(<x><y/></x> >>> <x/> + (this & <y><z/></y>));");
tryItOut("do { /x/ ; } while(([1e4.__iterator__].some(({}).hasOwnProperty)) && 0);");
tryItOut("/*for..in*/for(__proto__ = let (__count__) this.eval(<><x><y/></x></>[ /x/ ]) in Iterator().yoyo(({__iterator__: true}))) {/*for..in*/for(const __parent__ = (prop =  /x/ ) in @foo) constructor; }");
tryItOut("{__proto__ = @foo, __noSuchMethod__ = -3/0; }");
tryItOut("let (prop = ({__proto__: __iterator__})) { yield yield undefined; }");
tryItOut("with({}) return;");
tryItOut("L:if((new RegExp(({}), prototype)) *= ({a1:1}).prototype) { if ( \"\"  @ @foo) {with({__noSuchMethod__: __proto__}){return ({}); }var __iterator__, __proto__ = []; }} else {let (__noSuchMethod__, __proto__) { throw <x/>; } }");
tryItOut("{function (constructor)*::*\nif(__count__) function(q) { return q; } else  if (<><x><y/>\n</x></>) {false } }");
tryItOut("__count__ = __proto__;");
tryItOut("/*for..in*/for(let __iterator__ in (((<><x><y/></x></>)\r.watch)( for (constructor:  \"\"  in 033) if ( '' ))));");
tryItOut("do const __iterator__ = @foo, constructor;if(<><x><y/></x></>) gc() while((__proto__ < *::* .@*:: __parent__.prop getter= /a/gi) && 0);");
tryItOut("L: ({});");
tryItOut("L:do {/*for..in*/for(let __count__ in <><x><y/></x></>) #1#; } while((new Function( /x/g , __count__)) && 0);");
tryItOut("if(*) {return; } else  if (window < prototype) {__iterator__ = @foo, function::prototype;gc() }\nif(1e81) {} else  if ( /x/g ) export __count__; else gc()\n");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/for(\tthis; undefined; function () {  } ()) export __parent__;");
tryItOut("/*\n*/with({__iterator__: ({ __proto__: __noSuchMethod__, __proto__: __proto__ }) = ({ __noSuchMethod__: __parent__ })}){let __iterator__ = <y><z/></y>; }");
tryItOut("with({constructor: prop = <y><z/></y>}){switch(break ; ^ this) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <y><z/></y>) {yield <y><z/></y>;(.2); }break;  }return; }");
tryItOut("/*infloop*/L:for(\n*; !(__noSuchMethod__ & ({a2:z2})); [,,] += <x><y/></x>.(@foo)) {/*for..in*/for(__iterator__ = <x><y/></x> in {}) {let __count__; } }");
tryItOut("/*infloop*/L:for(prop; [<x><y/></x>].sort(<x><y/></x>); __noSuchMethod__ = *) {}");
tryItOut("return  /x/ ;");
tryItOut("while(((__iterator__ = ([__proto__, function::constructor, , ] = ({ __proto__: __noSuchMethod__ })) .@x:: ({ __noSuchMethod__: prop }) = true .@*:: <x><y/></x>)) && 0)return __iterator__;");
tryItOut("if(prototype+=(3/0 , window)) {export prop; } else  if ( ''  = 033) {{} }");
tryItOut("if(('fafafa'.replace(/a/g, function(y) { yield y; yield;; yield y; })).yoyo(prototype.__parent__ = ( '' .isPrototypeOf(*)))) { if (prop.x::__parent__ getter= function (__iterator__, __noSuchMethod__) { (__noSuchMethod__); } .hasOwnProperty(\"__count__\")) {yield <><x><y/></x></>;throw  '' ; } else {return  '' ; }}");
tryItOut("/*infloop*/for(<x><y/></x>; [z1]; 1e81) {let __noSuchMethod__ = <x/>; }");
tryItOut("export prototype;");
tryItOut("L: {/*infloop*/'for( \"\" ; <><x><y/></x></>\f; <><x><y/></x></>) break M;/*for..in*/for((<x/>)(window) in ((window)((*.watch(\"setter\",  /x/g ))))){export __proto__;break ; } }");
tryItOut("if() { if (typeof (false for each (__parent__ in prototype))) {break ; }} else {export __count__;this; }");
tryItOut("{nullwith({}) { yield ({constructor getter: (new Function).call, constructor: (<x/>[const constructor = <x/>;]) }); }  }");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = __proto__ > this in *::*) throw  /x/g \n");
tryItOut("if(constructor.constructor = this.__defineSetter__(\"prop\", (1 for (x in [])))) throw  /x/g ; else  if ((yield *)) {return;{} } else {(<><x><y/></x></>).__defineSetter__ }\t");
tryItOut("if(new (function(y) { yield y; export \n__iterator__;\nexport __noSuchMethod__;\n; yield y; })()) /*infloop*/for(let __count__ = window; prototype; 1.2e3) (@foo); else  if ([15,16,17,18].map(function(q) { return q; },  /x/g )) /*infloop*/for([[[1]]]; ({ set __iterator__ constructor (prop, __iterator__) \"\"  }); <><x><y/></x></>) var __proto__ = <y><z/></y>, __count__; else ");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = function(id) { return id }.unwatch(\"prototype\") in [15,16,17,18].some(function ()*,  /x/g .__lookupSetter__(\"__parent__\"))) {if(constructor | <x><y/></x>) *;(prototype); }");
tryItOut("M:with(0/0){(1e+81); }");
tryItOut("if(window) {\t if (*::*) {let __count__ = 1e+81; } else {__proto__; }}");
tryItOut("with(<x/>.__lookupGetter__(\" '' \").__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)){}");
tryItOut("if(#0=({prop: <y><z/></y>}).eval([[]])) <><x><y/></x></>; else  if ((null.@foo)) {(@foo); } else {return null;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in true) {yield  '' ; }3");
tryItOut("do {export *;L:if(new /a/gi()) { if ((String(1e+81))) {throw <x/>; } else {continue ;throw <x/>; }} } while(((({__count__: 3/0,  set function::__proto__ prop () { return <><x><y/></x></> }  }))) && 0);");
tryItOut("");
tryItOut("{gc()var __noSuchMethod__, __parent__ = yield  /x/ ;; }");
tryItOut("throw StopIteration; const __noSuchMethod__;");
tryItOut("M:if((function(id) { return id }.yoyo( '' ))) gc() else {export __iterator__; }");
tryItOut("");
tryItOut("/*for..in*/for(__parent__ in undefined) {}");
tryItOut("(<x><y/></x>)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in (<x><y/></x>())[[[]]]) /*infloop*/for(constructor; (@foo.__defineGetter__(\"__proto__\", gc)); <x><y/></x> / #1# &=  /x/ ) continue L;\n3.141592653589793\n");
tryItOut("if(eval(\"__parent__\", <><x><y/></x></>)) export __parent__;return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in false) throw <x/>;");
tryItOut("let ([prototype, , ({ __proto__: __count__, __parent__: [] }), ({ __noSuchMethod__: ({ each: ({ __count__: __count__ }), constructor: __count__ }) }), ] = __noSuchMethod__ = 3 > [], function::__count__) { ; }");
tryItOut("do {yield *;export *; } while((__count__, __iterator__ > prototype) && 0);");
tryItOut("*;");
tryItOut("/*for..in*/for(let prototype.constructor in ((uneval(<><x><y/></x></>)))) {{}__parent__ = <x><y/></x>; }");
tryItOut("/*infloop*/while( \"\" ){ }");
tryItOut("if(*.propertyIsEnumerable(\"prop\")++) {var __iterator__, __iterator__ =  /x/g ; } else  if (window) export *; else if( /x/ ) { if (*) 'haha'.split else {yield;let prop = <>3/0</>; }}");
tryItOut("do yield; while(((window.__proto__)) && 0);");
tryItOut("while(((@foo ? <x><y/></x> : *::* ? [11,12,13,14].filter : (let (__parent__ = [[1]], constructor) <><\fx><y/></x></>) ? ({prop: (this--) }).unwatch(\"constructor\") : (yield prop = [z1]).__defineSetter__(\"prop\", function(y) { yield y; yield;; yield y; }))) && 0)yield;");
tryItOut("/*infloop*/for(let __parent__ = this.__defineGetter__(\"constructor\", <y><z/></y>);  /x/g ; [-0 if (.2)]) export *;");
tryItOut("/*for..in*/for( in ((/a/gi)(~#1=[#1#])))if(<><x><y/></x></>) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (this)(@foo) in (yield null)) /*infloop*/for(@foo == (void  /x/g ); (let (({ prototype: prop, __parent__: ({ constructor: prototype }) }) = (function  prop ()null).call(window, <x/>), x::__noSuchMethod__ = (window != @foo)) window); <y><z/></y>) {;M:do continue L; while((#1=[#1#]) && 0);{__noSuchMethod__; } }");
tryItOut("M:if((eval(\";\", *::*) |= ((prototype)(<><x><y/></x></>\t)).__noSuchMethod__)) {let prop =  \"\" , prop;const prototype = <y><z/></y>; } else yield false;");
tryItOut("switch(window) { case 8: (prop);break; yield  /x/ ;break; break;  }");
tryItOut("while((window) && 0)prototype = true;");
tryItOut("/*for..in*/for(var <y><z/></y> in ((function  constructor ()((({constructor getter: <><x><y/></x></> })) for each (__parent__ in *) if (<><x><y/></x></>)))((({ get __iterator__(__count__) { return 4. }  }) ^= ~<x/>)/*\n*/.@*)))/*infloop*/while(( /x/  -= (this.throw(-1))))L:with({getter: <><x><y/></x></>})constructor getter: Function");
tryItOut("/*infloop*/M:for(var ({ constructor: ({ __noSuchMethod__: ({ prop: [] }) }\f), __noSuchMethod__: [__count__, , prototype, ] }) = 'fafafa'.replace(/a/g, let (__count__, prop = false) <x><y/></x>); constructor; --this = __parent__) /*infloop*/L:for(let ({ __noSuchMethod__: <><x><y/></x></>, prototype: __iterator__ }) = [15,16,17,18].filter(window, __iterator__); (uneval(0)); <x><y/></x> for each (__iterator__ in {})) var constructor = __parent__, __count__ =  /x/g ;function(q) { return q; }");
tryItOut("__iterator__ = prop;");
tryItOut("/*for..in*/for(var yield in <><x><y/></x></>.__defineSetter__(\"__proto__\", <><x><y\f/></x></>)) export *;");
tryItOut("/*for..in*/for(__iterator__ in (('haha'.split)(<x/>))){{}with({__noSuchMethod__:  \"\" }){(prop); } }");
tryItOut("{/*for..in*/for(let __parent__ = *.__lookupSetter__(\"let\") = eval in 0.1) return <x><y/></x>\nreturn new ([1,2,3,4].slice)(); }");
tryItOut("M:if(({__iterator__: (({ get prop(__noSuchMethod__) { return (<x/>.valueOf(\"number\")) } , __count__: ([1,2,3,4].map).call(this, ({a1:1})) })), __iterator__: (* |= constructor) })) const __parent__, getter; else  if (prop+=([]) = (new ( \"\" ).watch() % let (constructor, __proto__) true ? * : @foo, gc())) if(({ __iterator__: __count__ }) = ('fafafa'.replace(/a/g, Function))) export *; else with(4..__lookupSetter__(\"__noSuchMethod__\"))M:while((undefined) && 0){const prototype = <><x><y/></x></>, __parent__ = window;break L; }switch(constructor+=false) { default: var __parent__, __noSuchMethod__;case -0 .@*:: undefined: while(([[1]]) && 0){__count__ = <><x><y/></x></>;let __proto__, prop; } }");
tryItOut("M:with(__iterator__)prop;");
tryItOut("with({constructor: [*::*].__lookupGetter__(\"constructor\")}){return <><x><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("let(prop, []) ((function(){yield (__proto__);})());");
tryItOut("while((typeof prototype) && 0)/*infloop*/while( \"\" )__count__, [, __parent__]");
tryItOut("/*infloop*/M:for(((<x><y/></x> == false)(window || window)); ; (#3={a:#3#} ? <><x><y/></x></> : <><x><y/></x></>)) {continue ;let __noSuchMethod__ = @foo, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("var __parent__ = @foo");
tryItOut("switch([*::* if (true)]) { case [15,16,17,18].filter(*, *::*) *= let (__iterator__, prop)  \"\" : [1,2,3,4].mapbreak; break;  }");
tryItOut("let (__iterator__) {  }");
tryItOut("L: {gc()/*infloop*/for(<x><y/\t></x>; (function(id) { return id }.__lookupSetter__(\"__proto__\")); (__proto__ / true)) {__count__, prop = null;{} } }");
tryItOut("/*infloop*/for(const ({ getter: __noSuchMethod__ })\f = ; __iterator__ = let (__noSuchMethod__ = <x/>, constructor = 0/0) function(id) { return id }; this.__defineGetter__(\"__iterator__\", Math.pow)) {var constructor = this;break ; }");
tryItOut("-3/0; const constructor;");
tryItOut("/*for..in*/for([__count__, prototype] = 0/0 in []) <><x><y/></x></>");
tryItOut("if(Function(({__proto__: * >>>= ''  }))) {} else {}");
tryItOut("/*for..in*/for(let [__proto__, constructor] = ((-1)).__lookupSetter__(\"__proto__\") in (true)[<x/>]) /*for..in*/for(let __count__ = Number(<x><y/></x>, false).__count__ in <x><y/></x>) {break ;yield\n }");
tryItOut("/*for..in*/for(let prototype in ((function(q) { return q; })(())))break L;");
tryItOut("{{yield;export *; } }");
tryItOut("/*infloop*/do {if(new (undefined)(this)) { if (({__noSuchMethod__: <y><z/></y>})) let __iterator__ = *::*;} else {null;let __count__ = <x/>, __noSuchMethod__; } } while(eval(\"<><x><y/></x></> ===  /x/ \", [15,16,17,18].sort('haha'.split, (uneval(#1=[#1#])))));");
tryItOut("let __count__ = 033; const __count__;");
tryItOut("/*for..in*/for(let constructor = __noSuchMethod__+=(eval(\"export __iterator__;\", window)) in (null.__noSuchMethod__\f-=<y><z/></y>.propertyIsEnumerable(\"<><x><y/></x></>\"))) M:if((this.hasOwnProperty(\"prop\"))) {{}gc() } const __count__;");
tryItOut("continue \nyield *;");
tryItOut("if((function (__parent__, <y><z/></y>) { return __parent__ } )((0/0['__parent__'].__lookupGetter__(\"prototype\")), ((__parent__ | __noSuchMethod__) for (prototype in <><x><y/></x></>)))) __parent__ = @foo; else (new Function(\"{}\"))");
tryItOut("/*infloop*/for(prop; <x><y/></x> ^= window; #1#) (*::*);");
tryItOut("M:do /*infloop*/for(var function::__noSuchMethod__ = .2;  /x/ ; true) var __noSuchMethod__; while((@foo.@foo .@ __count__ = __count__) && 0);");
tryItOut("/*infloop*/do {{/*for..in*/for(<y><z/></y> in <x/>) {export *;break ; }__noSuchMethod__, prototype = <x/>; } } while((({__iterator__ getter: eval, __iterator__: *::* })) /=  '' .valueOf(\"number\").__lookupGetter__(\"__proto__\"));");
tryItOut("/*infloop*/for(<>\f<x><y/></x></>; prop; [,,z1]) {throw window; }");
tryItOut("/*infloop*/L:while(*::*)yield;");
tryItOut("switch(let (prop) prop = (window)[undefined]) { case ((constructor.__iterator__ = @foo.unwatch(\"constructor\"))).propertyIsEnumerable(\"__parent__\"): let prop = <x/>, prototype;break;  }");
tryItOut("const constructor, prototype =  /x/g ;");
tryItOut("continue L");
tryItOut("L:if((__count__.(null = <x/>))) return (__noSuchMethod__ = (undefined)[<x><y/></x>]); else /*for..in*//* nogeckoex bug 349964 */ for  each(const ({ constructor: ({ __proto__: constructor }) }) in <><x><y/></x></> >>= arguments) if((__count__ = <y><z/></y>)) { if (function(id) { return id }) {;gc() }} else {__count__ = *::* }");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__parent__\", /a/gi)){([[1]]); }\n");
tryItOut("/*for..in*/for(var [function::__parent__, __parent__] = ++*::* in <y><z/></y>) {{}export __proto__; }");
tryItOut("export *;");
tryItOut("false\n/*infloop*/for(var constructor; <><x><y/></x></>; 1e+81) {yield; }\n");
tryItOut("/*infloop*/for(let (uneval( \"\" )); ((function (__count__, __iterator__) { yield this } ([1,,])).__defineSetter__(\"prop\", function(y) { yield y; gc(); yield y; })); (<x/>.__iterator__ =  \"\" )) {export __proto__;continue ; }");
tryItOut("/*infloop*/while( /* Comment */[[1]]()){M:while((false) && 0){yield;gc() } }");
tryItOut("with(prototype = (3 in <y><z/></y>)){export __iterator__; }");
tryItOut("/*infloop*/do continue ; while((this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)));");
tryItOut("with((yield __parent__ = *::*)){let constructor = __iterator__; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let [__count__, __count__] = <><x><y/></x></>.(\"__noSuchMethod__\", ) in <x><y/></x>) {yield <><x><y/></x></>; }");
tryItOut("if(__noSuchMethod__ = 3/0) {const __proto__, __iterator__ = 0.1; } else  if (([new Object()].filter(new Function).hasOwnProperty(\"__noSuchMethod__\"))) switch(((1 for (x in [])))()) { case 1: break; break; case 4: gc() }");
tryItOut("{const constructor = __count__, prop = *::*; }");
