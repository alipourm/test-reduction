tryItOut("while(((let (prototype = <x><y/></x>, prototype = <y><z/></y>) (yield *) for each (__proto__ in ( /x/g )) if (try { *::*; } finally { {} }  ,  \"\" ))) && 0){/*infloop*/L:for(var __parent__ = this; <y><z/></y>; <x/>) const constructor; }");
tryItOut("if(yield prototype = prototype) { if ((<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", function (__noSuchMethod__) { return __iterator__ } ) &= ((false)(1e81)))) } else {export <y><z/></y>; }");
tryItOut("/*infloop*/L:for(let ({ constructor: __parent__ }) =  /* Comment */3/0; (new (1 for (x in []))()); (__proto__ = __parent__\f)) {export *; }");
tryItOut("break ;");
tryItOut("(({ __noSuchMethod__: prop, constructor: ({ __parent__: __proto__, __iterator__: prototype }) }))((this.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>))) = constructor;");
tryItOut("{}\n");
tryItOut("L: {export *\n{}gc() }");
tryItOut("/*for..in*/for(constructor = ((uneval(<y><z/></y>))) in  set __iterator__ __noSuchMethod__ (__noSuchMethod__) { return *::* } ) {const __count__ = arguments; '' ; }");
tryItOut("/*for..in*/for(const __parent__ =  \"\"  in ((({}) && <y><z/></y>))()) {let (prop) { yield; } }");
tryItOut("{prop, __parent__ = null\nwith(<><x><y/></x></>)export __count__; }");
tryItOut("if((function::prototype)) {if(new Function) yield @foo; else  if (__parent__.__parent__) {var prop = constructor;export __proto__; } else {yield <><x><y/></x></>;({a1:1}); } } else /*infloop*/while(undefined){gc() }");
tryItOut("\nM:if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(yield ({})))) {let __iterator__ = undefined, prototype;throw  \"\" ; } else  if (((3.141592653589793;)(constructor = prototype ? __iterator__ : *))) continue ;");
tryItOut("/*infloop*/for(__proto__;  \"\" ; __count__) (null); const <><x><y/></x></>;\n/*infloop*/for(prop; <x><y/></x>; *::*) yield __iterator__;\n");
tryItOut("if((<y><z/></y>).watch) constructor else  if (__noSuchMethod__ = *::*) {yield; }");
tryItOut("/*for..in*/L:for(let __proto__ =  if ((this.__defineSetter__\t(\"__noSuchMethod__\", 'haha'.split))) in __noSuchMethod__ = ([@foo].sort((new Function(\"return #3={a:#3#};\"))))) {{}yield; }");
tryItOut("do {export *;export prop; } while(( \"\" ) && 0);");
tryItOut("yield __count__, __count__;");
tryItOut("with({__iterator__: <x><y/></x>});");
tryItOut("/*infloop*/while([prototype] = (((<><x><y/></x></>).watch).call(*, ))){yield <><x><y/></x></>;; } const prototype;");
tryItOut("break M;\n/*for..in*/L:for(let prototype in ((prototype)(@foo)))throw this;\n");
tryItOut("if([({ __noSuchMethod__: __count__, __iterator__: prototype }), (<><bbb xmlns:ccc=\"typeof @foo\"><ccc:eee></ccc:eee></bbb></>)((3/0 <= <x><y/></x>) ? ([1,2,3,4].slice) : undefined.constructor = #1#), __noSuchMethod__] = ((Function)(__proto__).eval(({}).__lookupGetter__(<x/>.unwatch(\"__noSuchMethod__\"), this).isPrototypeOf(constructor = <x><y/></x>.throw([,]))))) {switch((*::*)(*, <><x><y/></x></>)) { case <y><z/></y>: break; default: break; throw prop;break;  }continue \n }");
tryItOut("while(( '' [<x><y/></x>] /= ~({a2:z2})) && 0){yield <y><z/></y>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in  /x/g ) return;");
tryItOut("this.zzz.zzz;");
tryItOut("yield this; const __proto__;");
tryItOut("/*for..in*/L:for(var __proto__ = window in <x>\f<y/></x>) {__parent__;gc() }");
tryItOut("L: {{}yield  /x/ ; }");
tryItOut("/*infloop*/M:while(false){if(this) { if (false) 033;} else ; }");
tryItOut("{M:with({__iterator__: \rset.(<><x><y/></x><\r/>)}){var function::__iterator__ = <x/>; }return; }");
tryItOut("if(((__noSuchMethod__ = null).__defineSetter__)()) {do break L//h\n; while((new function::constructor()) && 0); } else prop");
tryItOut("/*for..in*/for(var [__count__, prop] =  /x/g .@* in ( /x/g  .@ ({a2:z2}))) {yield;throw @foo; }");
tryItOut("try { let ({ __parent__: __parent__, __proto__: prop }), prototype; } catch(function::constructor) { throw StopIteration; } finally { with({}) { __parent__ = *::*; }  } ");
tryItOut("/*infloop*/L:while((__proto__.valueOf(\"number\")))var undefined = <x><y/></x>;/*infloop*/M:for(const \fconstructor; -3/0; <x><y/></x>(<><x><y/></x></>,  /x/g )) let __noSuchMethod__, __parent__;");
tryItOut("if() {throw [,]; } else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {} else {true;{} }");
tryItOut("return\n");
tryItOut("M:while((<><x><y/></x></>) && 0){yield <x/>; }");
tryItOut("__parent__ = __count__;\nfunction(q) { return q; }\n");
tryItOut("with({prop: ([11,12,13,14].sort).propertyIsEnumerable(\"__count__\")})/*infloop*/for(const ({ constructor: __noSuchMethod__, prop: __parent__ }) = function (__iterator__)<x/>.isPrototypeOf((this ?  \"\"  :  \"\" .*)); yyy.((new (eval)(<x/>, true) / @foo)); 1e+81) ");
tryItOut("/*infloop*/for(const prop; <><x><y/></x></>.isPrototypeOf(<y><z/></y>); (this.zzz.zzz)) ;");
tryItOut("continue M; const prop;");
tryItOut("/*infloop*/for(let ({ __iterator__: __proto__ }) = (new (function (__count__, prop) { yield (yield <x><y/></x>.@foo) } )([,] |= [[1]].hasOwnProperty(\"__count__\"))); yield <y><z/></y>.valueOf(\"number\"); (p={}, (p.z = 'fafafa'.replace(/a/g, (<y><z/></y>.@*).watch))())) {export *;return; }");
tryItOut("while((@foo) && 0)constructor, x::prop\n");
tryItOut("if((eval(\"(eval)[(prototype)]\", __count__))) {{var constructor;\f } } else  if ([[(-0)] += 'fafafa'.replace(/a/g, true) for (__noSuchMethod__.__noSuchMethod__ in prop.( \"\" )) if (false)]--) gc() else {{yield *::*; }1e4; }");
tryItOut("{yield; }");
tryItOut("switch(({__noSuchMethod__: new new Function(#1=[#1#]), (__iterator__): String() })) { case 9: eval const prototype;case (new Function): L:while(((*::* %= (function ([y]) { })())) && 0)yield  /x/g ;break;  }");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = export *; in ({ __parent__: function::__iterator__ }) = ~window) {__iterator__;export *; }");
tryItOut("M:if(__noSuchMethod__) { if (4.) {this }} else {}");
tryItOut("with({__noSuchMethod__: eval(\"1e81;\", true)}){/*infloop*/for(<><x><y/></x></>.isPrototypeOf(/*\n*/); ; [null].map(function(y) { yield y; prototype;; yield y; })) {yield __proto__;constructor = <><x><y/>\f</x></>; const __proto__; }if(<><x><y/></x></>) { if ([11,12,13,14].map) {(prototype);return; }} else {(@foo).__defineSetter__constructor = true, __count__ = #3={a:#3#}; } }");
tryItOut("/*infloop*/for(let constructor = [z1]; <><x><y/></x></>;  /x/ ) gc()");
tryItOut("return ((prototype.__count__) + __parent__.__lookupGetter__(\"__parent__\"));");
tryItOut("if( \"\"  >>>=undefined) {(-0).__defineSetter__( \"\" ); } else  if (([]\n)) <x/>; else {throw this;window; }");
tryItOut("/*infloop*/M:for(var [, , , ] =  /x/g  ..  /x/ ; constructor.valueOf(\"number\"); __proto__ instanceof <y><z/></y>) ");
tryItOut("L:with((<x><y/></x>.eval( /x/g )))M:do <x><y/></x> while(( '' ) && 0);");
tryItOut("/*for..in*/for(const constructor in  \"\" ) yield <><x><y/></x></>;\n/*for..in*/for(let <><x><y/></x></>['__proto__'] in __count__) {var constructor = <x><y/></x>;false }\n");
tryItOut("/*infloop*/M:for(__proto__ = [15,16,17,18].some([1,2,3,4].map, <><x><y/></x></>); ([z1] != <x/>[__proto__ = true].valueOf(\"number\")); (((*::*).watch)(1e4, window).yoyo( \"\" .__parent__))) {M:with(<x/>)return;/*infloop*/do {return; } while(<x><y/></x>); }");
tryItOut("export __noSuchMethod__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <xxx {__count__}={[,,z1]} /> <= (({prototype: (window != +), __iterator__: 9 }).@*)\f) {gc()((prototype = false)); }");
tryItOut("if([11,12,13,14].map) { if (--[[1]])  else {<x></>/xyield this;   { return let (__count__, constructor) 1e+81 } ; }}");
tryItOut("with((__count__ = ()).__defineGetter__(\"constructor\", function  prototype (__proto__, ({ __parent__: __iterator__, __parent__: constructor }) = (this.zzz.zzz))__count__ << function (prop) { new Function } )){/*for..in*/for(var __count__ = new function (prop)<x><y\t/></x>(<y><z/></y>, *::*) in constructor) __count__ getter: ({}).hasOwnProperty }");
tryItOut("L: this.zzz.zzz;");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = <><x><y/></x></> in __parent__) {let __proto__ = window; }");
tryItOut("yield;\nif(<x><y/><///h\nx>) { if (<><x><y/></x></>) {{} }} else return;\n");
tryItOut("if(__iterator__.(new prototype(#1=[#1#],  '' ))) { if (--({a1:1}).watch(\"__parent__\", new Function).isPrototypeOf(let (constructor) *)) {}} else ({}).__lookupGetter__");
tryItOut("while((@foo) && 0)(__iterator__ =  /x/g )");
tryItOut("{throw 3;throw *::*; }");
tryItOut("M:if(__iterator__, __noSuchMethod__) return <><x><y/></x></>; else {(undefined).__defineSetter__Math.sin }");
tryItOut("if(prop.(({a1:1}))) {throw this;gc() } else  if ([1].prop) {gc()yield <x><y/></x>; } else throw <x/>;");
tryItOut("if((<><x><y/></x></>(null, window))) {/*for..in*/M:for(var __noSuchMethod__ in <><x><y/></x></>) {let prototype; }gc() }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = <x><y/></x> in {}) <x/>;");
tryItOut("if((window , null)) { } else {<y><z/></y>;\n[1,2,3,4].map\n/a/gi }");
tryItOut("let prototype = <><x><y/></x></>, __parent__;var __proto__, __noSuchMethod__ = @foo;");
tryItOut("if((prop)) if(__iterator__, __parent__) { if ( \"\" ) export *; else {const __count__ = <x><y/></x>\t, __count__ =  /x/g ; }} else {M:if(<x><y/></x> << <><x><y/></x></>) {throw 1.2e3; } else continue ; }");
tryItOut("M:do {with({__count__: <><x><y/></x></>[*::*]})throw this; } while((__count__.watch(\"prop\", function  __noSuchMethod__ ()\f { return (function () { (__noSuchMethod__); } )(<x><y/></x>) } )) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in [__proto__.(3.141592653589793)]) {try {  /x/ ; } finally { throw <y><z/></y>; }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (delete <x/>)(__proto__.__defineSetter__(\"__iterator__\", Math.pow)) in (<><x><y/></x></>.__iterator__)) {([1]);let prop = #1#; }");
tryItOut("prop: <><><xxx>{__noSuchMethod__}</xxx>yyy\f</></>");
tryItOut("M:with({prototype:  \"\" }){yield prototype;undefined; }");
tryItOut("let (__iterator__ = 0, prop = #1#) { throw @foo; }");
tryItOut("throw  /x/ ;");
tryItOut("with({__iterator__: this in window})/*for..in*/for([__noSuchMethod__, __parent__] = <x><y/></x> in []) __parent__;");
tryItOut("L: {return;(<x><y/></x>); }");
tryItOut("with((({ set constructor __proto__ (prototype) { throw __parent__; } , __proto__: __noSuchMethod__ = <x/> })))yield;");
tryItOut("L:with(this.zzz.zzz)return <y><z/></y>; const __count__;");
tryItOut("with({__noSuchMethod__: (*::*\n).prototype = __count__})0x99");
tryItOut("__parent__");
tryItOut("/*infloop*/L:do {break L;; } while(constructor\t = .2);");
tryItOut("try { with({}) with({}) with({}) { {} }  } catch(get if *) { throw __iterator__; } catch(__count__) { try { let(constructor = ({__iterator__: [z1,,]})) ((function(){prop = __proto__;})()); } catch(__proto__) { yield (uneval(<x><y/></x>)); }  } finally { this.zzz.zzz; } ");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/M:for(each = ((__noSuchMethod__ =  /x/  || <><><ccc:ddd></ccc:ddd></></>).__defineGetter__(\"__parent__\", function(q) { return q; })) in window) if(__noSuchMethod__.__proto__ = __count__) {let __count__ = arguments;yield <x/>; } else  if (( '' .@foo).__parent__) {var prop; }");
tryItOut("if(prototype = this) {let (prototype = <x><y/></x>, __proto__ = <y><z/></y>) { prototype = 0/0, prop = 0/0; }/*infloop*/M:for(const __count__ = (yield this); --[[]]--; <><x><y/></x></>.hasOwnProperty(\"prop\"))  }");
tryItOut("/*for..in*/M:for(constructor in *) [1]");
tryItOut("if(( /x/g  instanceof 1e4.watch(\"__parent__\", __count__))) { if ( '' .watch(\"__parent__\", Math.pow) .. true) __noSuchMethod__ = <y><z/></y> else {export prop;( /x/ ); }}");
tryItOut("/*infloop*/M:for(let constructor; null; eval(\"(({ prototype: function::__count__ }) = (__parent__ ? <x><y/></x> : //h\\n({a2:z2}).watch(\\\"prototype\\\", (-0).__defineSetter__\\t)))\", new ((this.__defineGetter__(\"__iterator__\", Math.sin)) :: new Array())((Function(prop.isPrototypeOf(undefined)).__lookupGetter__(\"__count__\"))))) var __proto__ = this.__defineSetter__(\"prototype\", ({}).hasOwnProperty);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var  in <><x><y/></x></>) return;");
tryItOut("{const __iterator__; } const __parent__;");
tryItOut("M:if(((__proto__)%=-1(<><x><y/></x></>))) return; else {export *;\nreturn;\nyield  '' ; }");
tryItOut("while(([15,16,17,18].filter(({}).hasOwnProperty, (typeof (arguments - <x><y/></x>)))) && 0){gc() }");
tryItOut("");
tryItOut("do {{return; const let; } } while(((this)) && 0);\nexport __parent__;\n");
tryItOut("if((<x/> ? [1,,] : true)) \fthrow window; else {{} }");
tryItOut("L: /*infloop*/for(__proto__; function(id) { return id }; __iterator__ = <x/>.throw(new (function(q) { return q; })())) {return undefined;yield; }");
tryItOut("{(window).call/*for..in*/M:for(var prototype in false) {Math.sin } }");
tryItOut("L:if(__parent__ = true) if((this.__defineGetter__(\"constructor\", [1,2,3,4].map))) {gc(-0); } else  if ((({__noSuchMethod__: __proto__ ? true : this, prototype: #0=[[,,z1]] }).* ? (({}))() : __proto__ = <><x><y/></x></>.__lookupGetter__(\"get\"))) {yield;if(<x><y/></x> for (__parent__ in __proto__)) { if (typeof new <><x><y\f/></x></> ? __proto__ : yield null) {yield;yield constructor; } else {return; }} }");
tryItOut("M:if(( '' )) yield; else  if ((<><x><y/></x></>)(1e81, <><x><y/></x></>)) var __noSuchMethod__; else let prop, __count__;");
tryItOut("if((function () { gc } )(this, ({ setter: <x><y/></x>, getter: __noSuchMethod__ }) = (eval(\"window\", <x><y/></x>)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let window.prototype in [[]]) let __proto__ = true, __count__ = *::* } else var __parent__ = [function(q) { return q; }];");
tryItOut("yield\n(null);");
tryItOut("return;\nyield;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 3.141592653589793) {throw __count__\r;var __proto__; }");
tryItOut("/*infloop*/L:for(\n#1#; window; ({__iterator__: undefined.eval(<><x><y/></x></>) })) /*for..in*//* nogeckoex bug 349964 */ for  each(const  in null) {{} }");
tryItOut("L: yield;");
tryItOut("/*infloop*/for(const __iterator__ = <y><z/></y>++; (new RegExp(( /* Comment */<><x><y/></x></>), true)); @foo) yield;");
tryItOut("M:while((__noSuchMethod__ = *) && 0)gc()");
tryItOut("if(((<x><y/></x>.watch(\"prop\", (function(id) { return id }).__defineSetter__)).prototype)) {break ; }\n/*infloop*/for(const __iterator__ = true ? constructor : null; ((constructor).__defineSetter__\t).call(<x><y/></x>, ); <><x><y/></x></>()) return;\n");
tryItOut("__proto__ = __proto__;");
tryItOut("{/*infloop*/L:for(prototype; ((uneval((/a/gi)))).yoyo( .. (p={}, (p.z = <><x><y/></x></>)())); (([1,2,3,4].map).call).call({}, constructor)) {if(*) { /x/g prototype = <x/>; }yield [z1,,]; }/a/gi }");
tryItOut("with({prop: <x><y/></x>}){return *::*; }\n(1 for (x in [])) __iterator__ = <x><y/></x>, constructor = null;");
tryItOut("/*infloop*/do (((new Function(\"throw <y><z/></y>;\"))).call); while([,]( /x/ , *::*));");
tryItOut("var prop, constructor\n/*infloop*/do export *; while(<><x><y/></x></>);");
tryItOut("({}).__lookupGetter__");
tryItOut("with({__noSuchMethod__: (this)()})let(__noSuchMethod__) ((function(){yield x::__iterator__;})());");
tryItOut("for(let y in []);");
tryItOut("{}");
tryItOut("if((([z1] /= __proto__ if (@foo)))) { if (null == @foo) {export prototype;constructor; } else {}\f}");
tryItOut("\n(<x/>);");
tryItOut("/*infloop*/do {continue L; } while(0);");
tryItOut("try { this.zzz.zzz; } finally { throw prop; } ");
tryItOut("/*infloop*/L:for(new (this)(); prototype.yoyo( { yield constructor } ); ) (false);if(true) { if (new <><x><y/></x></>(<x/>, <><x><y/></x></>).isPrototypeOf((__parent__ = 1.2e3))) ; else let (prototype = ({a1:1}), prototype = constructor: 0) { ; }}");
tryItOut("{with({try { export prop; } catch(function::prop) { var __noSuchMethod__, __proto__ = <x><y/></x>; } finally { yield; } : window})var __noSuchMethod__, __count__\nif(0/0) { if (__proto__) {yield null;var prop = <x/>, prop = true; } else {; }}<><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((({}).__lookupGetter__).call)((delete window.propertyIsEnumerable(\"__noSuchMethod__\"))))){/*infloop*/M:for(<y><z/></y>; -0;  /x/g ) (new Function(\"const constructor = <><x><y/></x></>;\")) const __count__;/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (-0)) yield <><x><y/></x></>; }");
tryItOut("if(gc) yield prototype; else  if ((1e-81(<><x><y/></x></>, <><x><y/></x></>).unwatch(\"prop\"))[<x><y/></x> - <><x><//h\ny/></x></>]) {while((*) && 0); } else export getter;");
tryItOut("throw @foo\n");
tryItOut("/*infloop*/L:for(const prop = (-0).__defineGetter__(\"__noSuchMethod__\", (uneval(false.__parent__))); new (function(y) { yield y; gc(); yield y; })();  /x/ .prototype) {yield false; }");
tryItOut("with({__iterator__:  \"\"  <<= __iterator__})return;");
tryItOut("__count__ = function::__noSuchMethod__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("switch(<><x/> ? __noSuchMethod__ : 1e-81</>) { default: break; /*for..in*//* nogeckoex bug 349964 */L: for  each(function::__noSuchMethod__ in 5.0000000000000000000000) {eval }case prop: (/a/gi).callbreak; /*for..in*/for(let [constructor, __proto__] = prototype = __noSuchMethod__ in __proto__) {{} }break; case (<><x><y/></x></>)[<x><y/></x>]: break; {}break; case 0: break; case this.zzz.zzz: /*for..in*/for(let [__parent__, constructor] = <x/> in <x/>) {; }break;  }");
tryItOut("/*for..in*/for(var __count__ = (new ([,] >> this)(3/0)) in ([15,16,17,18].sort(({}).__lookupGetter__, false))) {with(this > <><x><y/></x></>)({a1:1})throw StopIteration; }");
tryItOut("if(__count__ = <><x><y/></x></>) { if ([*::*] .@*:: <y><z/></y>.@foo) let prop, __count__ = true; else {return *::*; }}");
tryItOut("yield;");
tryItOut("export *");
tryItOut("if((default: .throw([11,12,13,14].some))) { if ((-Exception())) {yield; }} else {}");
tryItOut("L: do return .2; while(( /x/g [<><x><y/></x></> >> false].eval((prop|=[11,12,13,14].filter))) && 0);");
tryItOut("__proto__\n");
tryItOut("/*for..in*/for(let [prototype, __proto__] = ([<zzz>(false for (__iterator__ in [1,,]))</zzz>].sort(Function)) in false ? <x><y/></x> : *::* %= true.@foo) {throw false;throw window; }");
tryItOut("for(let y in [5,6,7,8]) <y><z/></y>;");
tryItOut("return;");
tryItOut("if((<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\"))) { if ((typeof  /* Comment */*::*))  else {return true; }}");
tryItOut("/*infloop*/L:for(let __iterator__ = (({ prop: __count__, __iterator__: ({ constructor: constructor, __proto__: prop }) }) = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>); <><bbb xmlns=\"prop = __parent__\">yyy</bbb></>; <xxx>{__noSuchMethod__}</xxx>) export __noSuchMethod__;");
tryItOut("if( /* Comment */'fafafa'.replace(/a/g, function  prop (__count__, __proto__) { __noSuchMethod__ =  '' ; } )) return true; else  if ((<y><z/></y> :: [new prototype.function::__parent__(3.hasOwnProperty(\"__iterator__\"), [z1,,])].some(Math.sin))\t) with((Function).call((0x99)[__iterator__ = [,,z1]], eval(\"break ;\", (<x><y/></x>\n)))){export *;/*for..in*/for(__proto__ = *::* in  /x/ ) yield = <><x><y/></x></>, prototype =  \"\" ; }");
tryItOut("{/*for..in*/M:for(var [__noSuchMethod__, __noSuchMethod__] = *::*\n in ({}).hasOwnProperty = []) return; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in prop.prototype = \twindow) {__proto__ = <><x><y/></x></>; } const __noSuchMethod__;");
tryItOut("while((new Iterator(({a1:1}))) && 0){<><x><y/></x></>; }");
tryItOut("throw StopIteration; const constructor;");
tryItOut("new Function");
tryItOut("L:if(({ getter: __count__, __noSuchMethod__: __parent__ }) = ({__parent__: null})\f) ([z1,,]); else export __iterator__\nbreak ;");
tryItOut("with((((uneval([1,,] !== window)).__lookupGetter__(\"prop\") for ((__count__) in -1) if ((uneval(3/0)))).watch(\"__iterator__\", eval))){}");
tryItOut("if(*::*) {for(let y in [5,6,7,8]) var __proto__ = __parent__, yield;; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = ~[let (prop = ({a2:z2})) <><x><y/></x></>.__defineGetter__(\"__count__\", Math.pow)] in (uneval(-1))) /*for..in*/for(const __parent__ in ((prototype.__count__ = function ([y]) { })((__proto__ = true % <><x><y/></x></>)))){break M;yield; }");
tryItOut("export *;");
tryItOut("let(__proto__ = ({constructor: <x/>})\f ? __iterator__.prototype getter= ((1 for (x in []))).call : @foo.*, prop) { yield ({a2:z2});");
tryItOut("/*infloop*/for(let __proto__ = ((<><x><y/></x></>)(#1#, 1e+81)); <x><y/></x>[<><x><y/></x></>]; prototype.constructor setter= Math.sin) yield;");
tryItOut("if( /x/  << let (__parent__ = __parent__, prototype = <y><z/></y>) true) { if (!window) {if(<x><y/></x> for each (yield in <><x><y/></x></>)) { if ((eval(\"eval(\\\"*::*\\\", this)\", __parent__ = <><x><y/></x></>))) ;yield null; }} else (<><\rx><y/></x></>);true; } else {return; }}");
tryItOut("for(let y in []);");
tryItOut("var __noSuchMethod__ = (-0), prototype = __iterator__;");
tryItOut("");
tryItOut("L:switch(* .. <y><z/></y>.__count__) { case [z1]: break; __proto__\t;break; case 0: case 2: {case *::*: let __iterator__;break; var __noSuchMethod__ = <x><y/></x>; }default: return;break;  }");
tryItOut("if(((__proto__: 0.1.__proto__).call([[1]], ))) { if (delete ([false.unwatch(\"__count__\") for each (__noSuchMethod__ in  /x/ )])) __noSuchMethod__ else if(@foo) {( /x/ ); } else  if (constructor) {let __parent__ = 0/0, prototype = __count__;gc } else {const __parent__; }}");
tryItOut("{export __proto__;return <x><y/></x>; }\flet (__count__, __noSuchMethod__ = 1.2e3) { const ; }");
tryItOut("/*infloop*/do {/*infloop*/do {let prototype = 1.3;const prop = <x><y/></x>; } while(false); } while([15,16,17,18].some(gc, new (getter)()));");
tryItOut("if(((uneval(<x><y/></x> *= true)))) return; else  if (((new Function)(__noSuchMethod__ = ({prototype: <x><y/></x>})))) export __noSuchMethod__; else {yield <x/>;\t\n0.1;export *; }{export *;(gc).apply }");
tryItOut("L:if(((*::*.watch(\"__noSuchMethod__\", eval)).__lookupGetter__(\"prop\")).hasOwnProperty(\"\")) {/*for..in*/for(let prototype = prototype.__defineGetter__(\"prototype\", function  prop (__noSuchMethod__, __iterator__) { return  ''  } ) in <><x><y/></x></>) {throw <y><z/></y>;constructor; }/*for..in*/for(let __noSuchMethod__(<y><z/></y>) in this) {\fexport prototype; } }");
tryItOut("for(let y in [5,6,7,8]) let(__count__) { (<x><y/></x>);");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [])");
tryItOut("if({} + [this].filter((1 for (x in [])))) {gc() } else  if (__proto__.prototype setter= new Function) gc()");
tryItOut("let (__proto__, prop = *::*) { let prop; }");
tryItOut("yield;");
tryItOut("gc()");
tryItOut("{export window;let __iterator__, __iterator__; } const prototype;");
tryItOut("M:with((#3={a:#3#}.propertyIsEnumerable(\"__count__\")))yield;");
tryItOut("L:  { return; } ");
tryItOut("/*infloop*/while(({constructor getter: function (__parent__, prop) { window; } , __iterator__.__noSuchMethod__ })){/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>)  }");
tryItOut("for(let y in []);");
tryItOut("return (null.__lookupGetter__(\"__proto__\")); const __noSuchMethod__;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {;if((<y><z/></y> ? undefined : <x><y/></x>)) {yield;return; } else  if ((0.@*)) __parent__ } while(({__proto__: __iterator__ = window,  get __parent__ __count__ () { return ([[{}]].sort((function  __iterator__ () { \r\tvar __iterator__, __proto__ = -3/0; } ).call)) }  }));");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:while(this.__defineSetter__(\"__proto__\",  /x/ ))/*infloop*/for(const prop; function(id) { return id }; <x><y/></x>) {gc() }");
tryItOut("/*infloop*/for(var ({ constructor: __proto__, __proto__: [, [, , [prototype], ({ __count__: __proto__ }), ({ __noSuchMethod__: prototype, prototype: __parent__ })]] }) = ((undefined.__lookupSetter__(\"constructor\")).yoyo(__iterator__) for ([] in @foo) for each (__count__ in window) for (__noSuchMethod__ in <><x><y/></x></>)); __proto__ = this; !this) yield;");
tryItOut("/*infloop*/M:for(let __iterator__; ((uneval(export __parent__;))); \t(({constructor: constructor.__noSuchMethod__ = <x/> }))) {gc()/*infloop*/M:do {/*for..in*/M:for(const \rprototype in ((@foo)(__noSuchMethod__))){const __parent__ = __noSuchMethod__; }return; } while((this.__defineSetter__(\"prototype\", __proto__) | prop = [1])); }");
tryItOut("M:switch(__noSuchMethod__) { default: yield (window &= *::*);case this %  '' : __noSuchMethod__ = __parent__;{}break;  }");
tryItOut("L: {return; } const __proto__;");
tryItOut("(new Function(\";\"))\n/*for..in*/for(var constructor = (eval(\"yield;\", ({constructor getter: 1e-81 }))) in (*)[null]) {export *; }");
tryItOut("with([11,12,13,14].some %= (eval(\"yield false;\", <><x><y/></x></>)))");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prototype) in \n__count__ < new ((({}).__lookupGetter__).call).call(this)) {with(function ([y]) { })let __noSuchMethod__, __iterator__; }");
tryItOut("{return;(<><x><y/></x></>); }");
tryItOut("/*infloop*/do /*infloop*/for(let prop; [ \"\" ].filter((<x/>).__defineSetter__); (function ([y]) { })()) const __noSuchMethod__ = true; while(<><x><y/></x></> -= <><x><y/></x></>);");
tryItOut("if(prop = (Math.sin).call(__noSuchMethod__.eval(null), __iterator__, eval(\"if(<x><y/></x>) {__noSuchMethod__;export *; }\", __proto__+=(-0)))) with({}) { <y><z/></y>; }  else gc()");
tryItOut("L: {throw <y><z/></y>;; }");
tryItOut("L: while((window) && 0){.2; }");
