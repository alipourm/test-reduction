tryItOut("/*infloop*/for(var __parent__ = window; true; @foo) {return ({ __noSuchMethod__: ({})(<x><y/></x>), prop: ({ __proto__: __proto__ }) });constructor, constructor; }");
tryItOut("constructor = constructor;");
tryItOut("switch(@foo) { case @foo: return *::*;break;  }");
tryItOut("do {yield ({}); } while(([11,12,13,14].map) && 0);");
tryItOut("L: eval");
tryItOut("/*infloop*/for(this.zzz.zzz; new ([[1]])(); new ({}).yoyo(<><x><y/></x></>)([[1]])\t) M:with([[1]]){yield;/a/gi }");
tryItOut("while((@foo >> <x><y/></x>) && 0)var __parent__ = prototype;");
tryItOut("const \tconstructor = (-0), __noSuchMethod__;");
tryItOut("/*for..in*/L:for(const true['constructor'] in <><x><y/></x></>\t) ");
tryItOut("export *;");
tryItOut("export prop;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __parent__.__noSuchMethod__ in [arguments].map((([1,2,3,4].map).apply).apply)) M:if(<x><y/></x> &= prop) { if (('fafafa'.replace(/a/g, prop))) return;} else { }");
tryItOut("{yield this\n/*for..in*/for(var [__noSuchMethod__, constructor] = function::__parent__ =  \"\"  in #1#) __parent__, __noSuchMethod__with(__iterator__){export *; } }");
tryItOut("__count__");
tryItOut("/*infloop*/M:while(<y><z/></y>)/*infloop*/for(( \"\"  - *); -3/0 ? 0.1 : 1e81; constructor =  /x/g ) return;");
tryItOut("/*for..in*/for(let [prop, __proto__] = <y><z/></y> ===  /x/  in 0) {yield; }");
tryItOut("constructor\nexport *;");
tryItOut("({});\nconst __iterator__ = __noSuchMethod__, __proto__.watch(\"constructor\", gc), __parent__;\n");
tryItOut("/*for..in*/L:for(let prototype in (('haha'.split)(__iterator__))){yield <x><y/></x>; }");
tryItOut("if((* if (<x/>)\t)) {throw <x><y/></x>; }");
tryItOut("if((p={}, (p.z = 'fafafa'.replace(/a/g, Function) <<=  \"\"  &= {})())) /*for..in*/M:for(let [__parent__, function::__proto__] = @foo in (function ([y]) { })()) export *; else {/*for..in*/M:for(__count__ in window) do ; while(( \"\" ) && 0);{} }");
tryItOut("\nthrow *;");
tryItOut("L:if((<x/> & __noSuchMethod__)++) {true; } else  if (-3/0.__defineSetter__(\"prop\", function(q) { return q; })) {(<x><y/></x>); } else export *;");
tryItOut("/*infloop*/while(())gc()");
tryItOut("return;");
tryItOut("if(this) let __count__;");
tryItOut("/*infloop*/do return; while(<><x><y/></x></>[<><x><y/></x></>]);");
tryItOut("{if(.2) {function(q) { return q; }continue L; } else  if (new true) {__count__;return this; } else {@foo; }/*for..in*/M:for(const prop = window in this) {gc } }");
tryItOut("if(*::*) {let __parent__ = <x><y/></x>, __parent__ = @foo;(<x/>); }");
tryItOut("if((__proto__.valueOf(\"number\"))) { if ((/*\n*/this.unwatch(\"__noSuchMethod__\"))) {yield;export *; } else yield;}");
tryItOut("return <bbb xmlns:ccc=\"__iterator__ >>> <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__(delete *) in -<x><y/></x>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in 033) {window;continue M; }throw <y><z/></y>; }");
tryItOut("/*for..in*/for(var constructor =  in *) return <><x><y/></x></>;");
tryItOut("do {var (-1);;\t(*::*); } while(((({ prop: ({ __proto__: __noSuchMethod__, __parent__: __parent__ }) }) = (throw undefined))) && 0);");
tryItOut("M:if(<><>yyy</></>) return; else  if ((prototype.constructor getter= <><x><y/></x></>)) { } else {(__parent__);return [[1]]; }");
tryItOut("do if(((constructor.@*) &  \"\" .throw(*))) { if (<><!--yy--></>) let prop;} else if(constructor) { if (<><x><y/></x></>) } else {return; } while((Function(__noSuchMethod__ >>> <><x><y/></x></>)) && 0);");
tryItOut("with(@foo){{} }");
tryItOut("/*infloop*/M:for(<><x><y/></x></>.__defineSetter__(\"__iterator__\", [1,2,3,4].map); ((<x><y/></x>.__defineGetter__(\"__iterator__\", ((false).watch).apply))); (__iterator__.yoyo(this))) {;{} }");
tryItOut("if(eval(\"break M;\", (({}).__lookupGetter__)).valueOf(\"number\")) { if (((yield __proto__).*)[('fafafa'.replace(/a/g, (<x><y/></x>).apply))] <<= *::*) {/*infloop*/while(null)continue L;yield null; }} else continue L;");
tryItOut("if(((p={}, (p.z = void window)()))) { if ((\n(__iterator__ = __count__))) export __proto__; else L:switch(<><x><y/></x></>) { default: gc }}");
tryItOut("/*infloop*/for(__count__; yield (__noSuchMethod__.watch(\"__iterator__\", function (__parent__) { export *; } ).constructor); [1e4] :: __parent__.__noSuchMethod__ setter= @foo) ;\n__iterator__ = constructor;\n");
tryItOut("/*infloop*/for(var prototype; ((function  __iterator__ (__parent__) { return let (constructor, prop) (({prototype: --prototype getter: function  prop (__noSuchMethod__, __count__)#1#, prototype })) } ).call(#2=({__iterator__: ([])(\t<x><y/></x>)\n}).__parent__, <xxx {__proto__}={__noSuchMethod__} />, (prototype = [z1,,].@*.*))); prop.<x><y/></x>[<><x><y/></x></>].__lookupSetter__(\"__count__\").__parent__) /*infloop*/L:for(__count__; 1.2e3; typeof Error(<x><y/></x>)) if(({a1:1})) return; else  if (false) {export prop; }");
tryItOut("\nreturn;\n");
tryItOut("if((true.unwatch(\"constructor\").__defineSetter__(\"__iterator__\", constructor = 1e81))) {gc() } else  if (__noSuchMethod__) {<y><z/></y>; }");
tryItOut("{(<><x><y/></x></>); const x::prototype;var __count__; }");
tryItOut("with({}) { setter =  \"\" ; } ");
tryItOut("/*for..in*/for(let prototype in *) yield;\nyield;\n");
tryItOut("{L:with({__iterator__: prop(null) = (~<><x><y/></x></>.@*)})export *; }");
tryItOut("export *;{}");
tryItOut("/*for..in*/for(__iterator__ = *::* in window) {; }");
tryItOut("return;");
tryItOut("if(this.zzz.zzz) {if(__noSuchMethod__) gc() else  if (<><x><y/></x></>) {(null); }break ; }");
tryItOut("/*for..in*/M:for(var new (<x><y/></x>)(undefined, <><x><y/></x></>) in ((function () { yield ( /x/g  |= undefined) } )( '' --))){(*::*);prop = prop, prop; }");
tryItOut("with({}) { __noSuchMethod__, prop } ");
tryItOut("/*infloop*/M:do let prototype, constructor; while(<><x><y/></x></>);");
tryItOut("/*for..in*/M:for(let constructor in ((new Function)((let (constructor = window) __parent__))))with{prototypeundefined}){}");
tryItOut("/*for..in*/for(prop =  \"\"  in null) yield;");
tryItOut("if(<x/>) throw *; else  if (5.0000000000000000000000.hasOwnProperty(\"prop\") != new Error(@foo, window)) constructor, __iterator__; else {; }");
tryItOut("\n let \n");
tryItOut("if((__noSuchMethod__ =  '' )) return -3/0\ncontinue M; else yield;");
tryItOut("prototype = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in  '' ) \nexport __iterator__;\nif(new 0) <x/> else {export __proto__; }");
tryItOut("L: {throw __parent__; const __iterator__; }");
tryItOut("if(1.3.unwatch(\"__proto__\") instanceof #2=[<x/>]) {/*infloop*/L:while(({a2:z2}); = <y><z/></y>)continue L;{export *; } } else {let prototype = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(__noSuchMethod__ = (eval(\"<x><y/></x>\", @foo)); true.isPrototypeOf(<x/>); new ({}).hasOwnProperty(this)) let (prototype = <x><y/></x>, __parent__ = <x/>) {  }");
tryItOut("let(__iterator__, __noSuchMethod__) { return;");
tryItOut("switch(((__proto__).__noSuchMethod__)) { default: break; case 3: break;  }");
tryItOut("return prop.constructor;");
tryItOut("return this;");
tryItOut("if([z1].__defineGetter__(\"__proto__\", Math.sin)) {return; } else  if ( '' .eval(({a2:z2})).propertyIsEnumerable(\"__noSuchMethod__\")) (window.watch(\"prop\", (@foo).watch))(#2=({__proto__: (1e4 != window)})) else const prototype = <x><y/></x>, constructor;\n;\n const prop;");
tryItOut("L:with({__iterator__: __noSuchMethod__%=\f#1#}){yield; }");
tryItOut("if(window = prototype) { if ( /* Comment */constructor) { /x/  } else prop;}");
tryItOut("L:switch(__parent__ = <x><y/></x>.__lookupGetter__(\"__proto__\")) { default: case : gc()continue ;;break; case 7: break; case ((uneval(033.hasOwnProperty(\"__count__\").__lookupSetter__(\"prototype\")))): (<x/>);break;  }");
tryItOut("export *;\nreturn;\n");
tryItOut("let (__proto__ = ({ prop: [({ prop: <y><z/></y> }), , , ] }), __count__) { var [__noSuchMethod__, , , , ] = this.zzz.zzz, prop; }");
tryItOut("/*infloop*/do {with(__proto__)return; } while(<zzz>(uneval((p={}, (p.z = prototype++)())))</zzz>);");
tryItOut("do let(constructor, constructor) { with({}) throw StopIteration; while((let (__noSuchMethod__, [, ({ __noSuchMethod__: ({ __count__: __parent__, __iterator__: __parent__ }), constructor: ({ __iterator__: constructor, __parent__: prop }) }), ]) eval(\"([this])--\", Object()) in gc()) && 0);");
tryItOut("<ccc:ddd><!--yy--></ccc:ddd>");
tryItOut("if((__proto__ = @foo)) { if (<x><y/></x>) var __parent__, prototype;} else {return;export constructor;//h\n } const __parent__;");
tryItOut("/*infloop*/do {} while((new <x/>(false, <x><y/></x>))); const __proto__;");
tryItOut("/*for..in*/for(let __parent__ in (false)()) {__iterator__ = ({a2:z2}); } const prop;");
tryItOut("if(Function()) { if (constructor.__proto__ = <><x><y/></x></>) {prop: this.zzz.zzzreturn  /x/g ; }} else {; }");
tryItOut("gc() const __count__\n");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for( \"\"  in window.__iterator__ = <><x><y/></x></>) {if(<><x><y/></x></>) continue M; else {break L;var __proto__ = 1e+81, __iterator__; }if(*::*.valueOf(\"number\")) export *; else  if (undefined) yield; else {yield <x><y/></x>;gc() } }");
tryItOut("if((.__defineGetter__(\"__noSuchMethod__\", <y><z/></y>))) {{}gc() }");
tryItOut("return ((p={}, (p.z = <x/>)())); const __proto__;");
tryItOut("yield false; const prop");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) const __parent__;");
tryItOut("if((Function)) { if (__parent__) {export *;gc() }} else /*for..in*/for(const [constructor, prototype] = <><x><y/></x></> in <><x><y/></x></>) {export *;let prototype =  '' ; }");
tryItOut("/*for..in*/M:for(let [__proto__, prop] = this.__defineSetter__(\"__noSuchMethod__\",  \"\"  for (__count__ in *::*)) in (([]).apply)(window.prototype = false) + <y><z/></y>.__lookupSetter__(\"\")) do L: {gc() } while((((p={}, (p.z = -3/0 / <y><z/></y>)()))) && 0);");
tryItOut("continue M;");
tryItOut("{}");
tryItOut("return;");
tryItOut("M:if(5.0000000000000000000000) { if (arguments) window;} else {export *; }");
tryItOut("yield ++prop.__lookupGetter__(\"prototype\");");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = (gc(@foo).__count__) in {}) {return <x/>;yield function ([y]) { }; }");
tryItOut("return\n{return; }");
tryItOut("return;");
tryItOut("if((this.__defineSetter__(\"constructor\", (function  __parent__ (constructor, prototype) { yield <><x><y/></x></> } ).call) .@ <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) { if ((({a1:1}) || 4.)) {const constructor; } else return;}");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*infloop*/for(var @foo = yield (yield <x><y/></x>); ( \"\" .__defineSetter__(\"__count__\", ({}).__lookupGetter__).__lookupGetter__(\"__count__\")); (__parent__.__iterator__ = <><{prototype}> </{prototype}></>)) if((new new Function(!*::*, this))) continue ; else {return;{} }");
tryItOut("/*infloop*/for(const prototype; \n#1=[#1#]; #1=[#1#] ?  \"\"  : <x><y/></x>) const prototype, __noSuchMethod__ = window;");
tryItOut("/*for..in*/for(const *::*['prop'] in <y><z/></y>) {\t*::*;export constructor; }");
tryItOut("/*infloop*/M:do {throw this; } while(/*\n*/(({a2:z2}).__lookupSetter__(\"prototype\")));");
tryItOut("export prop; const constructor;");
tryItOut("let (__count__ = *, prototype = __count__) { /*for..in*/for([__iterator__, __parent__] = <x><y/></x>.__parent__ in <y><z/></y>) {{{} } } }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in  /x/g ) {(this); }");
tryItOut("({ prop: ({ constructor: [, constructor = this, , [prop, ], ({ constructor: __parent__ })], [, ].prototype: ({ __count__: constructor.prototype;, (((new Function(\"return;\")))(((__count__).call(__iterator__,  /x/ , null))).([[]])): prop }) }) })");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = new ((new Function(\"gc()\")))() ^= <x><y/></x>\t in ([<x><y/></x> for (__proto__ in  '' )])) {({}).__lookupGetter__ }");
tryItOut("let (__parent__, constructor = <x/> |= <>yyy</>) { while(((__noSuchMethod__ = @foo)) && 0){[,,];prototype } }");
tryItOut("/*for..in*/for(let prop in (((1 for (x in [])))(({a2:z2}) %= <x><y/></x>))){; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(((p={}, (p.z = <><x><y/></x></>)())); window; <x/>.__defineSetter__(\"\", function ()#1=[#1#])) {export *;yield null; }");
tryItOut("M:do {with([,,].@foo){export __parent__; } } while(((__noSuchMethod__ .. 'fafafa'.replace(/a/g, (*::*).watch)).__defineSetter__(\"__parent__\", (1 for (x in [])))) && 0);");
tryItOut("L:if(<x><y/></x>) yield; else  if (0x99) throw constructor;");
tryItOut("M:while(((new (((<x/>).watch).call((function ([y]) { })(), try { export *; } catch(__iterator__ if (function(){{}})()) { yield <><x><y/></x></>; } finally { return window; } , this) >= (([[1]])[ '' ]))(__noSuchMethod__.propertyIsEnumerable(\"__iterator__\") || -0, (this.__defineSetter__(\"__parent__\", function(y) { yield y; this;; yield y; }))))) && 0)const prop");
tryItOut("let(({ prop: [, [__proto__, , __count__], __parent__], constructor: [] }), prop) { var __parent__ = <><><x><y/></x></></>;");
tryItOut("try { __parent__, __iterator__ = <y><z/></y>; } catch(__proto__ if (function(){})()) { <x><y/></x> } ");
tryItOut("this;/*for..in*/for(const prototype in __iterator__) throw __noSuchMethod__;");
tryItOut("function(id) { return id }\n{export __iterator__;\nexport *;\ngc() }");
tryItOut("with({}) __count__ = constructor;");
tryItOut("continue ;");
tryItOut("if(undefined)  else { }");
tryItOut("if((uneval(<><x><y/></x></> << window.propertyIsEnumerable(\"__noSuchMethod__\")))) {L: (<x><y/></x>); } else {<><x><y/></x></>;false; }");
tryItOut("L: {return; }");
tryItOut("if(<y><z/></y>) {return;(<><x><y/></x></>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([z1]['prop'] in <x/>) yield #1#;");
tryItOut("if( '' ) {M:if(try { ; } catch(__count__ if (function(){yield constructor;})()) { gc() } catch(prop) { return; } ) export __count__;/*infloop*/for(var __count__; (function () { yield > __iterator__<x><y/></x></ <x><y/></x>> } ); __iterator__ = <x><y/></x>) {if(<x/>) continue ; } }");
tryItOut("if(({ set __count__(prototype, constructor)({__proto__: <x><y/></x>.__count__}) })) yield; else {/*infloop*/L:while(<><x><y/></x></>.eval(<><x><y/></x></>))Math.pow }");
tryItOut("do {; } while(((-0) >= (yield window.__noSuchMethod__ = __parent__.__parent__ setter= function(y) { yield y; return <x/>;; yield y; })) && 0);");
tryItOut("while(((\nwindow.__defineGetter__(\"__proto__\", prototype)) |= <x><y/></x> .@x:: [z1,,].hasOwnProperty(\"prop\")) && 0){/*for..in*//* nogeckoex bug 349964 */ for \t each(prototype in <x><y/></x>) return function(id) { return id };return constructor\n }");
tryItOut("with({__iterator__: <><x><y/></x></>}){({});return <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in __noSuchMethod__-=({}) ? <x><y/></x> : <x><y/></x>) return;");
tryItOut("return;\nnew Function\n");
tryItOut("M:if(arguments) { if (<x><y/></x>) yield -3/0;} else export *");
tryItOut("if((Exception(this))) const prop = *; else {throw <y><z/></y>\ngc() }");
tryItOut("prop");
tryItOut("(* .. *\n)(({ __proto__: __noSuchMethod__, prototype: ({ prototype: __proto__, prop: __parent__ }) }) = (({ prototype: __parent__, __parent__: __parent__ }) = undefined--))");
tryItOut("return this;");
tryItOut("with({__iterator__: ( \"\" .throw(true).hasOwnProperty(\"prop\"))}){if(<><x><y/></x></>) { if (<x><y/></x>) new Function} else <x><y/></x>;{} }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__ = [__proto__, <><x><y/></x></>] = __count__; __proto__; [11,12,13,14].sort for ((function::__parent__) in __count__) for each (prototype in *::*)) gc()");
tryItOut("switch(eval(\"<x><y/></x>\\n\",  /x/  *= .(prop = __iterator__))) { case 1: break; with(3.141592653589793){}break; default:  }");
tryItOut("L: {break M;export prototype; }");
tryItOut("/*infloop*/L:do {const __noSuchMethod__;/*infloop*/for(<x/>; 0/0; null) ({}).hasOwnProperty } while((__iterator__-=1.3));");
tryItOut("yield let (__count__ = new ((new Function(\"{}\")))(<x><y/></x>, {}), __iterator__) (true.watch(\"__parent__\", Function) if (<><x><y/></x></>));");
tryItOut("M:if(new ([,] > <x><y/></x>)(({prop: <x><y/></x>}) >>> constructor = __noSuchMethod__, 'fafafa'.replace(/a/g, (new Function(\"export *;\"))))) { if (!({__noSuchMethod__ getter: <x><y/></x> }) ^= undefined) {/*for..in*/for(var __parent__ = (function(y) { yield y; throw null;; yield y; }).apply in (new ( '' )(<x/>, (function ([y]) { })()))) {with((-0)){} } } else {<y><z/></y>; }}");
tryItOut("{}\n{with(__parent__)yield ; }\n");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(let ({ prop: ({ prop: ({ __proto__: [], __noSuchMethod__: ({ prop: [, ] }) }) }), __iterator__: [] }) = 5.0000000000000000000000; window; ([((yield null.__iterator__))])) {/*infloop*/for(5.0000000000000000000000; <y><z/></y>; 0.1) gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x/> in <><x><y/></x></>) {yield @foo; }");
tryItOut("L: return true;");
tryItOut("try { try { __proto__, prototype } catch(prototype) { <><x><y/></x></>; } finally { yield; }  } catch(__proto__) { return (yield this.__defineSetter__(\"prototype\", [1,2,3,4].slice)); } finally { with({}) throw StopIteration; } ");
tryItOut("true;");
tryItOut("{}\n;\n");
tryItOut("if(([<><x><y/></x></>])) {(__parent__); } else (eval(\"throw <y><z/></y>;\", window)) {yield; }");
tryItOut("if(([15,16,17,18].some((((<><x><y/></x></>) .@ \n<x/>)).__defineSetter__, <><ccc:ddd>yyy</ccc:ddd></>))\f)  else {/*infloop*/while((yield <y><z/></y>))var __proto__, __iterator__; }");
tryItOut("/*for..in*/M:for(let prop in  /x/ ) {{}export __count__; } const __noSuchMethod__;");
tryItOut("/*for..in*/for(let prop.__parent__ in (((1 for (x in [])))(let (__noSuchMethod__ = this, __iterator__ =  \"\" ) <x><y/></x>.__count__))){}");
tryItOut("L:with(__proto__ = constructor)/*for..in*/for(var constructor = <x><y/></x> in #1#) export *;");
tryItOut("/*infloop*/for(null; __iterator__.__noSuchMethod__ setter= Function; (new <x><y/></x>([z1], [])\n.isPrototypeOf(({ __proto__: [prop, prototype] }) = ({ __noSuchMethod__: __iterator__, __iterator__: constructor })))) yield;");
tryItOut("L:if(4..*) {} else {; }");
tryItOut("with(*::*)");
tryItOut("try {  { return (#3={a:#3#} ^= <><x><y/></x></>) }  } catch(__parent__) { var __iterator__ = #1=[#1#], prototype = <x/>; } ");
tryItOut("M:if(eval(\"{}\", *::*)) if(0/0) (null); else {break M; } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {return; }");
tryItOut("/*infloop*/for(var prop; #3={a:#3#}; (new (({}).__lookupGetter__).call([1,,],  /x/g , *::*)(Iterator(<y><z/></y>), <x/>) % ({__parent__: window})).valueOf(\"number\")) {export __proto__; }");
tryItOut("try { for(let y in [5,6,7,8]) let ({ constructor: __count__, __proto__: __parent__ }); } <x><y/></x>finally { let(constructor) ((function(){this.zzz.zzz;})()); } ");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = ([1,2,3,4].map) in 1.3) ;");
tryItOut("while((__noSuchMethod__) && 0){return;continue L; }\nthrow <x><y/></x>;\n");
tryItOut("/*for..in*/for(({ prop: ({ prop: __count__, prototype: __proto__ }), __iterator__: ({ prop: prop }) }) in (((new Function(\"/*infloop*/for(let __noSuchMethod__; (eval(\\\"/*infloop*/M:do this; while(<><x><y/></x></>);\\\", 0x99));  /x/g ) {yield;let prop; }\")))(('fafafa'.replace(/a/g, <x><y/></x>))))){/*for..in*/for(let __iterator__ in ((Math.pow)(delete <x/>))){;{} }yield undefined; }");
tryItOut("/*infloop*/for((<><bbb xmlns=\" /x/g .__defineSetter__(\"prop\", function(q) { return q; })\"> </bbb></> || delete(function::__iterator__) = ({a1:1}) - <x/>.yoyo(new (Math.pow)(.prototype, <><x><y/></x></>)/*\n*/)); (-1).__defineSetter__(\"__count__\", function  __count__ (constructor)*); <bbb xmlns=\"\n*::* &= constructor\"> </bbb>) {{yield  \"\" ; } }");
tryItOut("yield #1#;");
tryItOut("L:switch(new Boolean(__count__.__defineGetter__(\"__proto__\", <x><y/></x>)--)) { case __parent__.prop = Iterator(false, <><x><y/></x></>).yoyo((uneval((({}) ? false : <y><z/></y> == ( /x/ )(true, <x><y/></x>))))):  }");
tryItOut("/*for..in*/for(prop = (this.__defineSetter__(\"__proto__\", function(q) { return q; }) ^= ([[[]] for each (constructor in this)<bbb xmlns:ccc=\"prop\"><ccc:eee></ccc:eee></bbb>])) in __count__ = ({ __proto__: [({ __count__: __parent__, __noSuchMethod__: prototype }), , ], __count__: ({ prototype: ({ prop: window, __count__: prototype }), prototype: ({ __proto__: prototype }) }) })) {if(__noSuchMethod__.__proto__ = null) if(this) <y><z/></y>;yield  /x/ ; }");
tryItOut("/*infloop*/for(var prop; <y><z/></y>.@foo.__lookupSetter__(\"prop\").__defineGetter__(\"constructor\", function  __iterator__ (__count__, prototype) { yield (<x><y/></x>.(<x/>)) } ); (__count__ =  /x/g [__noSuchMethod__ = prototype])) {; }");
tryItOut("return;");
tryItOut("while((*::*) && 0)({}).hasOwnProperty");
tryItOut("L: {window;export *; }");
tryItOut("let (__proto__, (0x99);) { window; }");
tryItOut("function  __noSuchMethod__ () { yield  /x/  } \n");
tryItOut("/*for..in*/for(var (__parent__) in case 9: if([[]]) {var constructor;break L; } else  if ( /x/ ) {; }export *;default: break; break; case ([1e81]): ) {(prototype); }");
tryItOut("throw StopIteration;");
tryItOut("let (prop = arguments, prop) { break ; }");
tryItOut("let(__noSuchMethod__ = (!<x><y/></x>)) ((function(){throw StopIteration;})());");
tryItOut("M:while(((delete (/__count__ = )) && 0){throw getter; }");
tryItOut("/*for..in*/L:for(__count__ = (__iterator__ += this.__defineSetter__(\"prototype\", Math.sin)) in [true]) {gc() }");
tryItOut("/*for..in*/L:for(var [__iterator__, function::prototype] = 3/0\n in ({})) {(<y><z/></y>); const prototype; }");
tryItOut("const __parent__ = undefined;");
tryItOut("for(let y in [5,6,7,8]) with({}) { for(let y in []); } ");
tryItOut("with(<><x><y/></x></>.__defineGetter__(\"__count__\", <x><y/></x>))/*for..in*/L:for(var prop = __count__ in null) var __iterator__, __iterator__ = #1=[#1#];");
tryItOut("default: const prototype, __iterator__;case prop, __count__: yield;break; case ('fafafa'.replace(/a/g, 1.3)).__lookupSetter__(\"__proto__\"): break; return;break; return\nlet __noSuchMethod__, __parent__ = <x><y/></x>;");
tryItOut("if(0/0) {throw undefined; } else ;\nM:if(window) { if (0x99) \t{{}yield false; }} else {this;export prop; }\n");
tryItOut("if((prototype = __count__)) {( '' );throw *; } if (<x/> * (function ([y]) { })()) ");
tryItOut("export *\n(undefined);");
tryItOut("/*infloop*/for(const prototype = window; prototype = __parent__ ? eval(\"false;\", ((function ([y]) { })().propertyIsEnumerable(\"constructor\"))) : ( \"\" )(); (({}).hasOwnProperty)(new  '' ())) with({}) {  } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::__count__ in <x/>) function  __count__ () { yield <>case true: break; return;case 1: const __noSuchMethod__ = arguments;case <x><y/></x>: gc()break; default: </> } ");
tryItOut("if(<><x/></>) { if ((eval(\"<x><y/></x>\", ({})))) {( /x/g ); }} else {yield; } const __count__;");
tryItOut("{export true;return null; }");
tryItOut("/*infloop*/do export constructor; while((uneval(true)));");
