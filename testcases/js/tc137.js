tryItOut("switch((@foo.*)) { case 4: export __iterator__; }\n");
tryItOut("/*for..in*/for(__proto__ = [, __count__, __parent__, ] = __iterator__ in null) yield;");
tryItOut("if(\n<x><y/></x>.(#1=[#1#])) { if ((yield (<x><y/></x>.(({a1:1}))))) break ; else const __count__ = this, __iterator__;}");
tryItOut("/*infloop*/for(prop; null; undefined) yield this;");
tryItOut("L: {;'haha'.split }");
tryItOut("let __proto__; const prop;");
tryItOut("if(<x/> = (constructor = .2)) { if (prop.prototype) {prototype; }} else return;");
tryItOut("L:switch([15,16,17,18].filter(new Function,  /x/g ) ^ null.throw(<><x><y/></x></>)) { default: L: {throw  \"\" ;return this; }break; case 4: case 0: break;  }");
tryItOut("if((((new Function(\"<x/>;\"))).apply).call(<x><y/></x>.isPrototypeOf(undefined), <><x><y/></x></>.isPrototypeOf([1]), ({ __count__: constructor, __iterator__: __count__ }))) {(0/0); } else  if (*) return;if(1e81) __noSuchMethod__ else  if (@foo) {return @foo; } else {}\n");
tryItOut("M:if(<><!--yy--></>.(new Exception())) {; } else {const __noSuchMethod__;__parent__ = <><x><y/></x></>, getter; }");
tryItOut("{if(<><x><y/></x></>) { if (<y><z/></y>) (@foo);} else yield @foo; }");
tryItOut("/*infloop*/while(__noSuchMethod__ = this , eval(\"const __iterator__ = null, function::__iterator__ = false;\", window))return;");
tryItOut("switch(<><>yyy</><!--yy--></>) { default: const prototype =  '' ;break; {} }\n");
tryItOut("if((<><x><y/></x></>.@foo)) { if (@foo\n)  else gc()}");
tryItOut("switch(~[@foo].some(*)) { default: case #1=({constructor: ( /x/  ? -3/0 : true)}): {gc() }case function  prototype (function::__proto__) { yield window || 1e81 }  &= <x><y/></x>.(true): break;  }");
tryItOut("throw  /x/ \n");
tryItOut("for(let y in []);");
tryItOut("throw __noSuchMethod__\n");
tryItOut("/*infloop*/while([[]])throw function(id) { return id };");
tryItOut("with({}) { with({}) { let(constructor = (<\tx><y/></x> += *::*), constructor) ((function(){this.zzz.zzz;})()); }  } ");
tryItOut("/*for..in*/for(var (-0).prototype in ((/a/gi)(({__noSuchMethod__ getter: #1#, prototype getter: ((new Function(\"prop\"))).call })))){gc()(1 for (x in [])) }");
tryItOut("switch(prototype = ( /x/ ++.watch(\"prototype\", <x><y/></x>))) { default: M:if((__noSuchMethod__ =  '' )) export __parent__; else  if ((yield <><x><y/></x></>)) break; {}break; case 6: case 0: {}break; case undefined: break; case let (prototype, prop =  /x/g ) window: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__.__parent__ in ({ __proto__: __iterator__/*\n*/ }) = __proto__) {yield <x><y/></x>; }");
tryItOut("if(-3/0) {export __proto__;yield __proto__; } else  if (<x><y/></x>) (@foo); else //h\n{;yield  /x/ ; }");
tryItOut("/*infloop*/L:for(({ __parent__: ({ prop: __proto__, prop: __iterator__ }) }) = new this; __iterator__.__noSuchMethod__; ('(function ([y]) { })())()) {const constructor, __proto__ = false;{{}throw  \"\" ; } }");
tryItOut("{if(<y><z/></y>.yoyo(this)) { if ( /x/g .yoyo( '' )) {const __parent__ = ({}), constructor = 1.3; }} else {export prototype; } }");
tryItOut("/*infloop*/M:while((__parent__).call(<><x><y/></x></>, <y><z/></y>, {})){if(__noSuchMethod__) { if (true) {var prototype, __parent__ = @foo; } else {this;; }} }");
tryItOut("while(((1e+81.watch(\"__noSuchMethod__\", <y><z/></y>))) && 0)continue ;");
tryItOut("constructor = __proto__;");
tryItOut("L:if(<x/>) /a/gi else return true;");
tryItOut("<>#0=[]</>");
tryItOut("/*for..in*/L:for(var prototype in <><x><y/></x></>) {export *;break M; }");
tryItOut("{with({__parent__: <x><y/></x>}){return <x><y/></x>; }/*infloop*/for(let __proto__ = @foo; <x><y/></x>; [z1,,]) {;yield *::*; } }");
tryItOut("for(let y in []);");
tryItOut("with({prop: __noSuchMethod__ = __proto__ = <><x><y/></x></>['__count__'].valueOf(\"number\")}){throw window; }");
tryItOut("\n;");
tryItOut("switch(prop = prop%=<x/>.__noSuchMethod__ = 1.3 .. undefined { default: break;  }");
tryItOut("M:if( /x/ .valueOf(\"number\")) {{do {return;return window; } while((this) && 0); } } else  if ((({}).hasOwnProperty)(((#3={a:#3#} for each (__parent__ in window))), __count__)) {return <><x><y/></x></>;return; }\t else {return;/*infloop*/do {<x/>;(<x><y/></x>); } while( /x/ ); }");
tryItOut("__count__ = constructor;");
tryItOut("prototype.constructor = prop;");
tryItOut("/*infloop*/for(let prop; (((uneval(__iterator__))).call([undefined if (<x/>)](1.3.unwatch(\"constructor\")), )); (<><x><y/></x></> > undefined)) /*infloop*/L:for(const __parent__ = this ..  /x/ ; __parent__ setter: 'haha'.split; true.isPrototypeOf(false)) do {return;return;\t } while((__noSuchMethod__) && 0);");
tryItOut("prototype(((yield prop))) = __count__;");
tryItOut("L:if(([11,12,13,14].some).throw((prop))) { if (\n(-0) .@x:: true) do {} while(( /x/g  >>= false) && 0); else arguments;}");
tryItOut("L:switch((__proto__.(@foo++))) { default: break; /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.prop in <y><z/></y>) /*for..in*/for(const prop in ((new Function)(true))){throw {};yield <y><z/></y>; }case window.__defineGetter__(\"constructor\", (({}).__lookupGetter__).call): break;  }");
tryItOut("M:if([prop = window]) { if ((uneval(<x><y/></x>))) {return *; }} else __noSuchMethod__");
tryItOut("L:if((<y><z/></y>.__defineGetter__(\"__proto__\", function  prop ()const ({ __parent__: __noSuchMethod__ });))) { if ( /x/ .__defineGetter__(\"prop\", (new Function(\"return;\")))) {/*for..in*/(M:for(var __count__ in (('haha'.split)((function (prototype) { (this); } ))))) }} else {M:if((0.valueOf(\"number\"))) let (({ __proto__: constructor }), prop = prototype) { export *; } }");
tryItOut("L:if(*::*['prototype'] = [1,2,3,4].map(null)) { if ([11,12,13,14].filter .. *.__defineGetter__(\"__parent__\", new Function)) {(*); }} else {return 1e+81; }");
tryItOut("/*infloop*/M:for(var prop; prop; window) {constructor, constructor/*infloop*/for(prop; <><x><y/></x></>; *) var  { return  /x/  }  = [1]; }");
tryItOut("with(( = *::*()))gc()");
tryItOut("for(let y in []);");
tryItOut("for(let y in []);");
tryItOut("do {/*infloop*/for(<x><y/></x>; <><x><y/></x></>; <x/>) {throw __parent__;; } } while((<x><y/></x>.(true)) && 0);");
tryItOut("throw -0;");
tryItOut("(<x><y/></x>);L:if((__count__.constructor = <x><y/></x>).yoyo(*::*(<x><y/></x>, undefined))) { if ((__count__ = @foo).watch) {return; } else {yield; }}");
tryItOut("var prototype, prop = <><x><y/></x></>");
tryItOut("{if(++new Math.pow())  else  if (this.__defineGetter__(\"__count__\", function (__noSuchMethod__) { /*infloop*/do {; } while(prop); } )) {yield @foo; } else /*for..in*/for(let __noSuchMethod__ in function(id) { return id }) return; }");
tryItOut("throw [[]];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__((new 1e81(__noSuchMethod__))) in ((yield (({}).hasOwnProperty).call(<bbb xmlns=\"<y><z/></y>\"><ccc:ddd>yyy</ccc:ddd></bbb>, )))) /*infloop*/M:for(var prototype = (yield 0/0); <><bbb xmlns:ccc=\" /x/ \"><ccc:eee></ccc:eee></bbb></>; ( /x/ --)) {;let __parent__ = window, __proto__; }");
tryItOut("switch(__noSuchMethod__.(new Math.pow(this.prototype, <x><y/></x>).@foo)) { case 3: break; break; case 7: const function::__proto__ = *, __noSuchMethod__;break; case 9: break; break; break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__.__parent__ in __proto__) {M:if(try { let __count__; } finally { break M; } ) prop else  if (<y><z/></y>) const prototype = <><x><y/></x></>; else yield;throw <><x><y/></x></>; }\nL:if(eval(\"<x><y/></x>.*\", prototype = (-0))) Function else  if (<y><z/></y>) throw constructor; else {__iterator__, __iterator__ = <y><z/></y>;break ; }");
tryItOut("let(({ __iterator__: prototype, __parent__: prototype })) { for(let y in [5,6,7,8]) return constructor = prototype.__lookupSetter__(\"yield\") >>>=<><x><y/></x></>;");
tryItOut("");
tryItOut("with({__parent__: yield <><x><y/></x></>}){const __iterator__ = 0x99; }");
tryItOut("/*for..in*/for(const __parent__ in ( /x/ .__lookupGetter__(\"prop\"))) /*infloop*/for(let [__proto__, , prop, prototype]\f = #2=({prop: prototype}); __iterator__; <x/>) (0.1);");
tryItOut("let (__count__) { function  __noSuchMethod__ (__noSuchMethod__)null }");
tryItOut("/*infloop*/for(const __noSuchMethod__; String(( \"\" .watch(\"constructor\", function(q) { return q; }) for each (prototype in 1e81) for (__iterator__ in {})), ((true).watch)(*) &= (uneval(*::*))); <><bbb xmlns=\"yield ([[1]]\n\t).yoyo((#2=[<><><bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb><x><y/></x> </></>]))\"><{constructor}>constructor<ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></{constructor}>yyy</bbb></>) {#1#; }");
tryItOut("with({__parent__: ((-1).__count__)}){ super window; }");
tryItOut("L:if(<x/>.__defineGetter__(\"constructor\", gc) <<= window) { if (#1=({__parent__: undefined[null]})) __proto__ = []; else {export *; }}\nif((<><x>\f<y/></x></> for (__noSuchMethod__ in *::*)\f)) { if ((uneval(<><x><y//*\n*/></x></>))) var constructor;} else export *;\n");
tryItOut("/*infloop*/(<y><z/></y> || this)");
tryItOut("M:if(*::*) { if (<x><y/></x>) __noSuchMethod__} else const prototype;");
tryItOut("/*for..in*/for(\nconst prototype in 033) ;");
tryItOut("with({constructor: 0})yield;");
tryItOut("/*infloop*/L:for(let ({ __iterator__: constructor, constructor: __iterator__ }) = Exception(<><x><y/></x></>, *::*);  /* Comment */window; true) {;yield <x><y/></x>; }with({__proto__: <x><y/></x>})yield <x><y/></x>;");
tryItOut("__iterator__ = __iterator__;");
tryItOut("L:if(__count__) { if (arguments) const prop = undefined; else ;}");
tryItOut("yield true\nexport __parent__\n");
tryItOut("L: \fexport *\n");
tryItOut("{let (constructor) {  } }");
tryItOut("(<x><y/></x>)[ \"\" ]");
tryItOut("");
tryItOut("if(__parent__ = -1) constructor else  if (true) {{}\n }");
tryItOut("M:with((((<x><y/></x> &= this) in (window)(constructor, [,,z1])).@* for each (prop in \n<><x><y/></x></>) for each (__noSuchMethod__ in @foo))){let(__parent__.__iterator__ = window.isPrototypeOf(({})), prototype = null) { return;{}[1,2,3,4].slice }");
tryItOut("while(('fafafa'.replace(/a/g, function ()new Function(null, 3))) && 0)let constructor;");
tryItOut("L: yield 5.0000000000000000000000;");
tryItOut("__count__;");
tryItOut("try { for(let y in [5,6,7,8]) yield (function () { const __count__; } )((@foo)[#3={a:#3#}], null) instanceof (return -0;.unwatch(\"constructor\")); } catch(__noSuchMethod__ if (function(){throw StopIteration;})()) { __parent__ = prototype; } ");
tryItOut("/*for..in*/for(const [prototype, __count__] = constructor.__iterator__ in prototype) {return; }");
tryItOut("M:if(__noSuchMethod__) {throw @foo; } else  if (<y><z/></y>) {gc() } else ;");
tryItOut("return (function(y) { yield y; return -1;; yield y; }).call(<><x><y/></x></>,  \"\" );");
tryItOut("{window;yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in ({ set prop(prop)(this.zzz.zzz).prototype })) {const __parent__ = prototype, __parent__ = <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  /x/ ) {break ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {var prototype = null, prop;let __parent__, constructor =  /x/g  const __noSuchMethod__; }");
tryItOut("/*infloop*/while((new this()).throw( ''  |=  /x/g ))with(*::*){gc(){} }");
tryItOut("/*for..in*/for(let [constructor, function::__noSuchMethod__] = @foo /= [1,,] in <y><z/></y>) gc()");
tryItOut("/*infloop*/do {/*for..in*/for(const constructor in ((undefined)(*::*)))(1e81);/*for..in*/for(const __count__ = \f<x/>.hasOwnProperty(\"__noSuchMethod__\") in 0x99 === <><x><y/\t></x></>) constructor = <x/>; } while(((<x/>.prop = [11,12,13,14].some[__iterator__ = .2\n]).eval(*)));");
tryItOut("const constructor = true, prototype;");
tryItOut("with({constructor: prop}){{} }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if({{}throw (function ([y]) { })();\freturn; }) {/*for..in*/for((<x><y/></x>)(function ([y]) { }) in (('haha'.split)(1.2e3.isPrototypeOf(__count__))))with(null)throw 033;; } else \r if (function ([y]) { }) \t{[[]]continue L; }");
tryItOut("with({}) { let(__parent__ = (new Error()), __parent__ = --<x><y/></x>) { return this.__defineGetter__(\"__iterator__\", function  prop () { yield * } ); } ");
tryItOut("if((<x/>\n)) {yield;var __count__; } else  if (__parent__) {let __count__ = <x/>; } else ");
tryItOut("/*infloop*/M:for(prototype; @foo;  '' ) export constructor;");
tryItOut("/*infloop*/L:while(1.3){__iterator__;export prop; }");
tryItOut("{return window; }");
tryItOut("/*infloop*/do /*for..in*/for(var [__proto__, __parent__] = __noSuchMethod__ = __noSuchMethod__ in ({__proto__: window})) {if(<x><y/></x>) function  __noSuchMethod__ () { yield <y><z/></y> }  else return <x><y/></x>;yield; } while((new String((uneval(<x/> && false)))) === ([15,16,17,18].sort(new Function, prototype%=false)));");
tryItOut("/*for..in*/L:for(const __iterator__ in ((function  prop ()__noSuchMethod__)(({ __iterator__: ({ __proto__: prototype, __parent__: __proto__ }) }) = (arguments += <><x><y/></x></> ^= @foo)))){export function::__iterator__;{continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (#3={a:#3#}['prop']) in (prop.yoyo(@foo))) {yield;__iterator__, __parent__; }");
tryItOut("let(__noSuchMethod__, __noSuchMethod__ =  /x/g ) { __parent__ = __count__;");
tryItOut("L: {{} }");
tryItOut("switch(3) { default: case __parent__.__noSuchMethod__: case new window ^ constructor, x::__iterator__ = __proto__(0x99, <x/>): /*for..in*/for(const __parent__ in (('haha'.split)(constructor|=__parent__))){[, __parent__](__proto__); } }");
tryItOut("throw StopIteration;");
tryItOut("if(prop.__proto__) { if (window) yield <x><y/></x>;} else {return [ \"\" ]; }");
tryItOut("switch(('fafafa'.replace(/a/g, 1e81))) { constructor, __count__ }");
tryItOut("let (__parent__ = ( ''  .@ <><x><y/></x></> if (<><x><y/></x></>)), prop = *::*) { {} }");
tryItOut("/*infloop*/for(let ({ prototype: setter }) = ([11,12,13,14].some); <y><z/></y>; (*)(1e-81, <><x><y/></x></>)) break ;/*infloop*/do {;gc() } while(({constructor: (false =  \"\" ) }));");
tryItOut("with(\tyield <x><y/></x> !== this){;yield; }");
tryItOut("const __count__, prop = <x/>;");
tryItOut("prop, __count__ = this\nyield this\n");
tryItOut("while(((#1=[ '' ])) && 0){continue L\ngc() } const __count__;");
tryItOut("if(({prop: (__parent__ = prototype)})) { if (new function ()arguments()) ; else export __noSuchMethod__;}");
tryItOut("/*for..in*/L:for(var [.__parent__, __proto__] = let (__iterator__ = <><x><y/></x></>, __iterator__) window ^= undefined in 4. ? <><x><y/></x></> : <x><y/>\f</x>.isPrototypeOf((<x><y/></x>)(__proto__))) throw *;");
tryItOut("if(3) yield window; else  if ((prototype = <y><z/></y>)) 3.141592653589793, <y><z/></y> else {}");
tryItOut("/*infloop*/L:do {if((new (prototype\r)(false, __parent__))) <x/> else {export __iterator__; }prototype = *::*; } while((@foo)[(__parent__ = (new (constructor)()).*)]);");
tryItOut("with({constructor: prop ? ([<y><z/></y>(<><x><y/></x></>.__noSuchMethod__ in -1) [[], , __count__, []] for each (constructor in <x><y/></x>) for each (constructor in [1,,])])\n : __iterator__.((prototype = <><x><y/></x></>--))})if(eval(\"(arguments);\", [1,,])) {throw <y><z/></y>; } else  if (<x><y/></x> != <y><z/></y>) break L; else null;");
tryItOut("/*infloop*/M:do {let __iterator__ =  /x/g .__lookupGetter__(\"__iterator__\"); } while((constructor = <x><y/></x> instanceof 3.141592653589793));");
tryItOut("/*infloop*/while(({prop: (prop)(<x><y/></x>, null) })){gc() } const (__parent__( /* Comment */ '' ));");
tryItOut("export __noSuchMethod__\n");
tryItOut("if(<x><y/></x>) { if (false / <x><y/></x>) {yield;export *; }} else {export *; }");
tryItOut("export __iterator__;");
tryItOut("L: {while((*) && 0)yield \r<x><y/></x>; }");
tryItOut("yield this;");
tryItOut("/*infloop*/for(var constructor; true <=  '' .__lookupGetter__(\"set\"); (new (new Function(\"[\\t, prop]\"))(new (<><x><y/></x></>)()))) {let __parent__ = null; } const x::__iterator__;");
tryItOut("try { return; } catch(prop if ({a2:z2})) { break ; } catch(__iterator__ if (function(){gc()})()) { (__iterator__); } finally { yield <><x><y/></x></>; } ");
tryItOut("/*infloop*/M:do {/*for..in*/for(const [({ prop: ({ constructor: __noSuchMethod__ }), __count__: ({ constructor: __parent__, __parent__: __noSuchMethod__ }) }), prop] = (+(__parent__)(__iterator__, @foo)) in window) {yield <x/>;yield; } } while(new (eval(\"undefined\", <><x><y/></x></>))(__noSuchMethod__.__count__ = <x/> + ({__iterator__: false })).eval(((yield <><x><y/></x></>))));");
tryItOut("/*for..in*/for(__iterator__: @foo in <y><z/></y>) throw null;");
tryItOut("var prototype, __iterator__;( /x/g );");
tryItOut("{return; }");
tryItOut(";");
tryItOut("/*for..in*/for(\fconst [__noSuchMethod__, __count__] = 'fafafa'.replace(/a/g, (eval(\"false\", function ([y]) { })).__defineSetter__) in (function(q) { return q; }).call(new (prop)(<y><z/></y>, <x/>), constructor.__noSuchMethod__ = #1#, 4.)) yield;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(__iterator__ in ((\f([1,2,3,4].map).call)(*)));");
tryItOut("L:with(#0=({constructor: __count__.(<><x><y/></x></>)}))do export __noSuchMethod__; while((<y><z/></y>) && 0);");
tryItOut("if(new undefined) /*for..in*/for(var __count__ = window in <x><y/></x>) {yield  \"\" ;{} }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(undefined.@*; ([*::*].map(function  prop (prop) { yield  } )); ({__iterator__: this })) {yield; }");
tryItOut("/*for..in*/for(let prototype in (((new Function(\"throw *::*;\")))(new (<x><y/></x>)(this))));");
tryItOut("/*for..in*/for(var __parent__.prop in (*.__defineSetter__(\"__count__\", Math.sin))) L:with(this)const __parent__ =  /x/g ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in constructor) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in #1=[#1#]) throw <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("let (constructor, prop) { /*infloop*/L:for(var [({ __iterator__: ({ __parent__: __count__ }) }), __noSuchMethod__, , ({ __proto__: prototype })] = __parent__ = (@foo); [<><x><y/></x></> ? undefined : *::* for (__noSuchMethod__.prop in <x><y/></x>) if (<x/>)]; 3/0) {__noSuchMethod__, __noSuchMethod__ = window;[[]]; } }");
tryItOut("/*infloop*/M:for(const  /x/g  = <y><z/></y>; undefined;  /x/ ) {yield; }");
tryItOut("with({}) constructor = __count__;");
tryItOut("/*infloop*/M:while(([[[1]]].map(eval))){<x/>;gc() }");
tryItOut("/*infloop*/L:do /*infloop*/while(this--)__count__ = this, __count__; while(yield  /* Comment */<x><y/></x>);");
tryItOut("L:if(yield <><>window</></>) {export *;return; } else  if (eval(\"__count__\", <y><z/></y>)) {if(<x/>) function  prop (__proto__)window else  if (<x><y/></x>) export *; } else (undefined);");
tryItOut("/*infloop*/L:for(let __proto__ = <{__iterator__}><!--yy--><x><y/></x><!--yy--></{__iterator__}> <= <x/>; @foo != window; @foo) continue ;");
tryItOut("let(constructor, __proto__) { try { const prop = this, __noSuchMethod__; } catch(__count__ if \t(function(){gc()})()) { export prop; } catch(__count__ if (function(){\tthrow <x/>;})()) { let __count__; } catch(__count__) { gc() } finally { export __iterator__; } ");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/while(1.3)/*for..in*/L:for(let __parent__ in ((Math.sin)(__noSuchMethod__))){return; }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = [prop = <x><y/></x>\n] ?  for (__count__ in  \"\" )\t.* : this in false[prop].isPrototypeOf(('fafafa'.replace(/a/g, Function)))) {}");
tryItOut("let(prop = [prototype, ] = [prop, , ]\n, ({ __iterator__: __iterator__, __count__: [, ] })) ((function(){this.zzz.zzz;})());");
tryItOut("{{}gc()\nconst prototype = __noSuchMethod__, __parent__ = this;\n }");
tryItOut("/*infloop*/for(var __parent__; ({prototype getter: (<x><y/></x>).call, __parent__: (({ prop: __iterator__, __iterator__: prop }) = prop = 0.1) }); (prop.__proto__ setter= eval)[<x/>.propertyIsEnumerable(\"constructor\")]) ");
tryItOut("/*for..in*/M:for(let [__parent__, __count__] = <xxx {__parent__}={ '' } /> in  /x/g ) {gc() }");
tryItOut("if(<x><y/></x>) { if () break/*\n*/ ; else {; }}");
tryItOut("/*for..in*/for(const __count__ = __iterator__ = window.yoyo(!<y><z/></y>) in ((#0=({__iterator__: function::__count__})) instanceof Iterator(new Boolean()))) switch(<><x><y/></x></>[0x99]) { default: __parent__ = __proto__;break; break; case 5: case [11,12,13,14].some: __noSuchMethod__, export prototype; = <y><z/></y>; }");
tryItOut("if(<bbb xmlns=\"(({ __parent__: ({ __proto__: __parent__, prototype: prototype }) }) = (__iterator__ = <x><y/></x> for (__parent__ in <><x><y/></x></>) for (__parent__ in <x><y/></x>)))\"><ccc:ddd><bbb xmlns=\"~<><x><y/></x></>\"><!--yy--></bbb>yyy</ccc:ddd></bbb>.([])) {gc()export constructor; }");
tryItOut("if((<zzz>(this.zzz.zzz)</zzz>.({}))) {export *; } else  if (__noSuchMethod__) M:if(({a1:1})) { if (window) break ; else {export *;throw <x/>; }} else [1,2,3,4].map");
tryItOut("if(\n*::*.__defineGetter__(\"prototype\", (( /x/ ).watch).call)) {throw __count__ } else  if ((yield undefined)) prototype");
tryItOut("L: {{let (__iterator__ = function::__count__) { yield; } }export *; }");
tryItOut("throw StopIteration;");
tryItOut("if( /* Comment */<x><y/></x>) export *;//h\n else  if (*.eval(<><x>y/></x></>)) {{}<x/> } else yield  /x/g ;");
tryItOut("/*infloop*/L:for(const x::constructor = this.__defineSetter__(\"\", (1 for (x in []))).throw(undefined.__lookupSetter__(\"__iterator__\")); (([11,12,13,14].map) & window)((prop = ((-1) @ <><x><y/></x></>))((new new Function(<x><y/></x>)).eval(prop)), !( /x/g .@foo * (@foo)(prop, <x/>))); new function (__noSuchMethod__) { return *::*\n } ()) throw __iterator__;");
tryItOut("export __proto__");
tryItOut("/*for..in*/for((<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\"))(<><></></>) in (((yield  /x/ ))((+<x/>\n)))){/*for..in*/for(constructor in <>1.3</>) {[1,2,3,4].slice }{} }");
tryItOut("export __count__");
tryItOut("/*for..in*/for(var __parent__ in function(id) { return id }) continue ;");
tryItOut("gc()");
tryItOut("/*infloop*/do (__proto__); while(( /* Comment */({}).isPrototypeOf(null)));");
tryItOut("throw prototype;");
tryItOut("L: /*for..in*/for(const __noSuchMethod__ in ((__noSuchMethod__)(0/0))){return  /x/ ; }");
tryItOut("if( /* Comment */__parent__) const prop =  \"\" , __parent__ = @foo;");
tryItOut("yield @foo;return __proto__;");
tryItOut("try { gc() } finally { ; } ");
tryItOut("/*for..in*/M:for(var [__count__, prop] = constructor = __proto__.constructor setter= gc in (new [1,2,3,4].map( /x/ ))(#0=@foo, ((-1))[<x><y/></x>])) yield [,,z1];");
tryItOut("{for(let y in [5,6,7,8]) throw constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in ((eval(\"(*);\", -1))().eval(new Math.pow( '' )))) let(__parent__) ((function(){})());");
tryItOut("with({}) for(let y in [5,6,7,8]) constructor = __proto__;");
tryItOut("{}");
tryItOut("{}");
tryItOut("if(([(constructor)(Object(1.3), *)].map('haha'.split)\n)) { if (eval(\"(({a2:z2}));\", __noSuchMethod__ = *::*)) const __parent__ = 0/0;} else {*::*; }");
tryItOut("gc()\nif(yield false) (<x/>); else break L;");
tryItOut("with({}) for(let y in [5,6,7,8]) let(prop, __parent__ = function(id) { return id }) ((function(){(this);})());");
tryItOut("/*infloop*/for(undefined.watch(\"__noSuchMethod__\", Math.sin); typeof prop :: this.__defineSetter__(\"prop\", //h\n<><x><y/></x></>); __noSuchMethod__, prop) {yield <y><z/></y>;export *; }");
tryItOut("{__proto__ }");
tryItOut("do {/*for..in*/for(const __proto__ in ((Math.pow)((-0))))var function::prototype, __parent__ = null;__iterator__; } while(((delete 'fafafa'.replace(/a/g, (<><x><y/></x></>).watch).propertyIsEnumerable(\"__parent__\"))) && 0);");
tryItOut("yield  '' ;\nexport constructor;\n");
tryItOut("do {let __proto__; } while((constructor = window.watch(\"__noSuchMethod__\", /a/gi)) && 0);");
