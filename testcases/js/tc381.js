tryItOut(";\n\n");
tryItOut("let (__noSuchMethod__ = __noSuchMethod__, __noSuchMethod__) { eval }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/L:for(let constructor = Function in prop.(__noSuchMethod__ = __noSuchMethod__).function::__count__) {throw __noSuchMethod__;; }");
tryItOut("(*)\n;");
tryItOut("while(((false >> false).*) && 0){if(new true(__parent__+=3.141592653589793, __parent__)) {{}return *; } else  if (*) __iterator__ else {var __iterator__;yield 1.2e3; } }");
tryItOut("for(let y in []);");
tryItOut("L:if(([this.zzz.zzz for each (__parent__ in ((null).call(<><x><y/></x></>, false))) for (__noSuchMethod__(window(null)) in __iterator__) for (__parent__ in @foo) if (*)])) { if (this) {if(3/0) {gc()prop; } else  if ( /x/ )  /x/g ; else {yield; } }} else {break M; }");
tryItOut("return new Function();");
tryItOut("with({}) { ; } ");
tryItOut("while(((<x><y/></x>.@foo >>>=[11,12,13,14].sort)) && 0){return 4.; }");
tryItOut("with(yield {}){throw window;\fyield this; }");
tryItOut("/*infloop*/for(((1.2e3\n))[this.__defineGetter__(\"__noSuchMethod__\", Function)].__lookupGetter__(\"__proto__\"); __noSuchMethod__ = <x/>; prop = window) {let (prop = <><x><y/></x></>--, __iterator__) { return; } }");
tryItOut("/*for..in*/for(let (this)(<><x><y/></x></>) in <><x><y/></x></>) {/*infloop*/M:while(undefined)arguments }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in undefined) export *");
tryItOut("if((.unwatch())) { if ((void <x><y/></x>)) ; else null;}");
tryItOut("switch( .. (-false.unwatch(\"prop\"))) { case ([false]) < yield 1e4.__lookupSetter__(\"__iterator__ = <><x><y\\r/></x></>, constructor =  /x/ \"): (__parent__); const __iterator__;case +(p={}, (p.z = [z1])()): \tif((new Function(\"throw prop;\"))) continue M; else export *;break; case 6: break; break; default: case <><x><y/></x></>: break;  }");
tryItOut("{}\n");
tryItOut("/*infloop*/for([({ __parent__: __noSuchMethod__, __noSuchMethod__: ({ __noSuchMethod__: [prototype, , , , ], __iterator__: \f[({ __iterator__: __parent__ }), , , ] }) }), ] = ({ set prototype __proto__ () { let(function::prop = 1.2e3, constructor = <x/>) { function () { return 1.3 }  } ,  set __iterator__ prototype ()(p={}, (p.z = (__proto__ ?  \"\"  : .2)[function ([y]) { }])()) }); (<y><z/></y> @ <><x><y/></x></>.throw(constructor\n)).call([<x><y/></x>].((\r /* Comment */false))); <>yyy</>.(eval(\";\", ({})))) if(this >> <x><y/></x>) {yield __noSuchMethod__;let __count__, prop = __proto__; }");
tryItOut(" const __noSuchMethod__\n(<><x><y/></x></>.hasOwnProperty(\"constructor\"));");
tryItOut("/*for..in*/for(const __count__ in (((__iterator__).__defineSetter__)(constructor.__count__)))export __count__;");
tryItOut("/*for..in*/for(var prototype =  '' <x><y/></x> in  \"\" ) return;gc()");
tryItOut("throw <x/>;");
tryItOut("do gc() while((#1#) && 0);");
tryItOut("with({}) with({}) { var prop, prop; } ");
tryItOut("yield -0\n");
tryItOut("/*infloop*/for(Math.pow; (set.((prop.__noSuchMethod__)))++; undefined >> [1,,]) return <y><z/></y>;");
tryItOut("if( /x/ ) { if (@foo) {} else var __proto__;}");
tryItOut("/*infloop*/L:for(const [({ __iterator__: [] }), ] = <bbb xmlns:ccc=\"<x/> in *\"><ccc:eee></ccc:eee></bbb>; ((\f<x><y/></x> ? undefined : <y><z/></y>)); ((( \"\"  if (<y><z/></y>))) -= null.__lookupSetter__(\"prototype\"))) throw constructor;");
tryItOut("/*infloop*/M:while(prototype.prop getter= function(q) { return q; }){/*infloop*/for(window; null; __noSuchMethod__) {var __count__ = <><x><y/></x></>, constructor = 3; } }");
tryItOut("\n;\n");
tryItOut("yield;\n{{} }\n");
tryItOut("with(null.eval(function ([y]) { })){{return } }");
tryItOut("throw prototype;");
tryItOut("with((yield __noSuchMethod__)){while(((<x/>.prototype = [[]])) && 0)const prop;yield (( /x/g ).call( '' , <y><z/></y>, prop)); }");
tryItOut("L://h\nwith(([1,2,3,4].slice).call(\t({__proto__: __parent__,  set __noSuchMethod__(__count__) { export constructor; } \n }), __count__ =  /x/g )){yield <y><z/></y>; }");
tryItOut("/*infloop*/while((({prop: <x><y/></x> }) % (this.isPrototypeOf(<x><y/></x>).valueOf(\"number\"))))let(__noSuchMethod__, prop = <x><y/></x>) { throw StopIteration;");
tryItOut("gc()");
tryItOut("{let __iterator__;const __count__; }\nbreak L;");
tryItOut("/*infloop*/do export prototype; while(({prototype: yield this}));");
tryItOut("{}{} const __proto__;");
tryItOut("{ }");
tryItOut("/*for..in*/for(var __parent__ = prototype|=prop.throw(*) ..  /x/ .propertyIsEnumerable(\"__iterator__\") in [1,,] .@x:: undefined) /*infloop*/while(new <x/>( \"\" )){; }");
tryItOut("/*for..in*/for([prototype, __count__] = true in *::*) /*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in  /x/g ) __parent__, constructor;");
tryItOut("do {yield @foo;return; } while((true) && 0);");
tryItOut("if((#1#.__lookupGetter__(\"__parent__\"))) \f{ if (([(1.3.__defineSetter__(\"__noSuchMethod__\", __iterator__))].map('haha'.split))) {let __iterator__, __noSuchMethod__ = <y><z/></y>; }} else {return;(null); }");
tryItOut("\tyield  /x/ \nlet prototype;");
tryItOut("var prop, constructor;");
tryItOut("L: {yield; }");
tryItOut("L: yield;eval");
tryItOut("L: {return; } const __proto__;");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("L:switch((new Iterator( '' , <y><z/></y>)) in this.zzz.zzz) { case 1: default: yield  '' ;break;  }");
tryItOut("if(((__count__ = [[]], __proto__)[__proto__])) { if (<><x><y/></x></>.valueOf(\"number\")) yield <x/>; else {throw <y><z/></y>;[1,,]; }}");
tryItOut("if(<y><z/></y>) yield; else  if (<x><y/></x>) yield; else {export prop;(<><x><y/></x></>); }");
tryItOut("; const __parent__;");
tryItOut("\ntrue");
tryItOut("with(__iterator__){break M; }");
tryItOut("L:if((function ([y]) { })()) <x/> else this;");
tryItOut("M:if(__iterator__) { if (__proto__) [1,2,3,4].map else {throw true; }}\nbreak ;\n");
tryItOut("if(*) gc() else  if (__iterator__) return; else {yield;const __proto__; }");
tryItOut("if(this.__defineGetter__(\"__count__\", new Function)) gc() else let prop, __iterator__;");
tryItOut("export *;");
tryItOut("if(@foo.__iterator__) {;/*\n*/{} }");
tryItOut("if( /x/g ) __count__ getter: new Function; else  if ([1]) {if( /x/g ) { if (constructor) {<ccc:ddd></ccc:ddd>;[1,2,3,4].slice }} else {try { function ([y]) { } } catch(__noSuchMethod__) { gc() }  }/*infloop*/while(__noSuchMethod__)const prop = @foo; } else function(q) { return q; }");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = (prop.__noSuchMethod__ =  /x/ .__iterator__ = <y><z/></y>) in  /x/ ) {if(-1 /= 1e81) { if (([11,12,13,14].map)) {return;export __count__; }} else __count__, export *;; }\n/*infloop*/do {export prototype;switch(({prototype: 0/0 })) { default: break; case 0: break;  } } while(((1 for (x in [])))(prop = ({ __parent__: constructor }).@foo, <xxx {__parent__}={eval(\"continue L;\", <y><z/></y>)} />));");
tryItOut("var __count__ = <x><y/></x>, __noSuchMethod__ = @foo;\nyield  /* Comment */true;\n");
tryItOut("/*infloop*/L:for(prototype; false .@*:: <><x><y/></x></>; constructor = [1,2,3,4].slice) {return; }");
tryItOut("L: {(yield); }");
tryItOut("null");
tryItOut("gc()\n\n\n");
tryItOut("return;");
tryItOut("M:if(((* ? <><x><y/></x></> : <x/>\f).@foo)) { if ((((<><x><y/></x></>)()) instanceof ++true)) {{}continue ; } else {( \"\" );return; }}");
tryItOut("switch(yield <x/>) { default: {(window); }break; case 6:  }");
tryItOut("throw  /x/g ;");
tryItOut("\nthrow -3/0;\n");
tryItOut("/*infloop*/do {const __count__, __count__ = __proto__; } while(__iterator__);");
tryItOut("if((((window.isPrototypeOf(#1=[#1#])))())) {export *;{} } else  if ((p={}, (p.z =  '' .@*)())) {[1,2,3,4].map }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  /x/g ) yield __count__;");
tryItOut("L: {gc(){} }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __noSuchMethod__ }) = \n[1,,] && <y><z/></y>; yield (__proto__ = <x/>); 4. >= <><x><y/></x></>) [, ({ __proto__: ({ __iterator__: ({ prop: constructor }) }), prop: ({ __iterator__: ({ __iterator__: ({ __parent__: ({ __parent__: ({ constructor: ({ __count__: prototype }) }), function::x::prop: __count__ }), __proto__: constructor }) }), __proto__: [] }) }), ]");
tryItOut("/*for..in*/for(__iterator__ = <><x><y/></x></>.__lookupGetter__(\"__parent__\") in 0x99) {let __proto__ = window, undefined = undefined; }\n");
tryItOut("/*infloop*/L:for(#1=[({a1:1})]; ; true\n) {window{} }");
tryItOut("/*infloop*/M:for(<x><y/></x>.unwatch(\"constructor\"); let (__iterator__, <x><y/></x>) <x><y/></x>; (uneval(null))) {break ;yield; }");
tryItOut("M:if(({a2:z2}) ? 1.2e3 : this) export __count__; else {(prop);var function::__iterator__ = constructor; }");
tryItOut("with([<><x><y/></x></>.__defineSetter__(\"__count__\", (new Function(\"var let;\")))]\f)throw (export 4.);");
tryItOut("var prop = (({ get prop\t __parent__ (__noSuchMethod__) { yield <x><y/></x>; }  }));\n/*infloop*/for(const \f__parent__; this; *::*) export *;\n");
tryItOut("return <y><z/></y>\n");
tryItOut("\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::get in ( { function(id) { return id }; }  :: eval(\"with({__iterator__: <x/> ? [,,z1] :  /x/ }){return  \\\"\\\" ; }\", ))) {gc()1e81; }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = <x><y/></x> in prop) {throw <x><y/></x>;export *; }");
tryItOut("/*for..in*/M:for(const [__proto__, prop] = window.__proto__ = <x><y/></x> in <><x><y/></x></>) {let function::prop = 1e+81;export *; }");
tryItOut("/*infloop*/L:for((undefined()); ([1,,] >> <x>\t<y/></x>).__noSuchMethod__; __noSuchMethod__ = <y><z/></y>) (this);");
tryItOut("/*infloop*/for([] = ([11,12,13,14].some); (true.yoyo(<><x><y/></x></>) for (constructor in 1e81) for (prototype in <><x><y/></x></>))[__count__\f = (__noSuchMethod__.__noSuchMethod__ = <x><y/></x>.eval( /x/ ))]; (<><x><y/></x></>.eval(*) ^= false / <y><z/></y>)) \t{gc() }");
tryItOut("L:if(this) { if (new (Object(<><x><y/><\n/x></>, <><x><y/></x></>))()) <><x><y/></x></> else if(eval()) return arguments;}\r\n");
tryItOut("switch(()) { case 0: export *;default: prop; }");
tryItOut("with({__noSuchMethod__: ((/a/gi)())})/*for..in*/for(var [constructor, __count__] = <x><y/></x> == (-0) in <y><z/></y>) ; const __proto__;");
tryItOut("/*infloop*/\fdo {Function } while(*::*);\f");
tryItOut("with({prototype: (__noSuchMethod__ = __proto__)}){with({__noSuchMethod__: @foo})throw StopIteration; }");
tryItOut("L:switch((*::* << <x><y/></x>)) { case <y><z/></y>.eval(<y><z/></y>): } }");
tryItOut("/*infloop*/while( \"\" ){return [[1]]; }");
tryItOut("return;");
tryItOut("/*infloop*/L:for( '' ; <><x><y/></x></>; \f<><x><y/></x></>) {prop = this;const __iterator__ = <x><y/></x>, __parent__; }");
tryItOut("/*for..in*/for(prop = <><bbb xmlns=\"('fafafa'.replace(/a/g, Math.pow))\"><ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></bbb></> in (yield [[1]]) @ * %= <x><y/></x>) let __parent__, continue L;;");
tryItOut("if([window]) {;export prototype; }");
tryItOut("yield <><x><y/></x><\f/>\nexport *;");
tryItOut("with({__count__: <bbb xmlns=\"{}\">yyy</bbb>})function  __parent__ (__iterator__) { yield this } ");
tryItOut("{export prototype; }");
tryItOut("M:if(((uneval(1e-81.@*)))) {with({}) { (<><x><y/></x></>); }  } else  if (<bbb xmlns:ccc=\"()\"><ccc:eee></ccc:eee></bbb>) {gc()return; } else {export *; }");
tryItOut("let (__parent__) { yield; }");
tryItOut("with({/*infloop*/while(<x><y/></x>){{}const prototype, prototype; } })return;");
tryItOut("/*for..in*/L:for(({prototype: (RegExp(4.).eval((__proto__.prop))) }) = \n[11,12,13,14].some in __parent__ = this >> @foo) prop = ({ __parent__: __proto__ });");
tryItOut("/*infloop*/for(__parent__ = \f(__iterator__[((<x><y/></x>).watch).call(#1=[#1#], <x/>)]); (uneval(new Array(#1=[#1#]))); this.zzz.zzz) {switch(0x99) { default: yield this;break; export __noSuchMethod__;break; return <x><y/></x>;break; case [[1]]: break; break; break; undefined;case 0:  \"\" ;break; break; case <x><y/></x>: break; case 9: case true: return 0.1;break; break;  } }");
tryItOut("{yield <x><y/></x>;if(<x><y/></x>) {; } else  if (<x><y/></x>) {let prop, constructor; } else @foo; }");
tryItOut("/*infloop*/for(prop; (false\t.propertyIsEnumerable(\"__iterator__\")); (([1,2,3,4].slice)()())) {throw (var prop = <x><y/></x>);gc() }");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L:\r for  each(const prop in __noSuchMethod__ = __proto__.prototype) return window;");
tryItOut("M:with(*){yield; }\nswitch([15,16,17,18].sort(<><x><y/></x></>, <x/>)) { case 7: if(<x/>) ; else {return <x><y/></x>; }break; break;  }\n");
tryItOut("if([1,,]) {gc() } else const prop;");
tryItOut("with({__proto__: null})undefined;");
tryItOut("{export constructor;let __parent__ = <y><z/></y>; }");
tryItOut("yield;");
tryItOut("return [(try { with({}) let __iterator__ = prop; } finally { __parent__ = __parent__; } )].map( /x/ );");
tryItOut("default: case 8: break; break; case 0: with({}) { return new Error(); } break; case 2: /*for..in*/yield <x/>;case 6: break; case 1: break; return;continue M;break; /*infloop*/L:while(<x><y/></x>)__count__ = null, constructor = true;");
tryItOut("/*infloop*/L:do {} while(this.__defineGetter__(\"prototype\", Function));");
tryItOut("let (\t__noSuchMethod__ = new Exception(__iterator__)) { const __count__ = -0; }");
tryItOut("if((<x><y/></x>.(5.0000000000000000000000))) { if ((\n__count__)) {return; } else {/*for..in*/M:for(var __parent__ in function(id) { return id }) {export *;{} } }}");
tryItOut("/*infloop*/L:while(*::*)continue M;");
tryItOut("/*infloop*/for(<x><y/></x>; <x><y/></x>; undefined) {gc()export *; }\n");
tryItOut("if(++<y><z/></y>) throw __count__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__parent__, __count__] = new (eval)( /x/ , @foo) in (this.__defineGetter__(\"__parent__\", [1,2,3,4].map))) /*infloop*/for(prop; (window.propertyIsEnumerable(\"__count__\")); __count__.__iterator__ getter= Math.pow) throw <x><y/></x>;");
tryItOut("while(( /x/ ) && 0){}");
tryItOut("while((*.__noSuchMethod__.*) && 0) for (<><x><y/></x></>.__noSuchMethod__ in (({})).watch) if ()");
tryItOut("return *::*;");
tryItOut("__proto__ = __proto__;");
tryItOut("\nconst constructor, prototype = ({a2:z2});\n");
tryItOut("/*for..in*/M:for(const prop = this.zzz.zzz.valueOf(\"number\") in prop) {gc() }");
tryItOut("{}");
tryItOut("switch(<></>) { default: /*infloop*/for(__count__; <><x><y/></x></>.__defineSetter__(\"__count__\", (new Function(\"continue ;\"))); [11,12,13,14].filter) {yield  /x/ ; }break; case 4: break; <><x><y/></x></>;break; return;break;  }");
tryItOut("case 1: yield;");
tryItOut("/*infloop*/do {{M:with({constructor: (0)})throw [z1]; }/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in [[1]]) {throw prototype; } } while((true.__lookupGetter__(\"__iterator__\")).yoyo((uneval(this))));");
tryItOut("<x><y/></x>\nconst prototype = this.__lookupGetter__(\"__proto__\");");
tryItOut("/*infloop*/do {*::*;{export *; } } while(constructor: -1);");
tryItOut("do /*infloop*/for(prototype; 'haha'.split((this.zzz.zzz)); constructor.__noSuchMethod__ = []) {//h\neval } while((prop.*) && 0);");
tryItOut("();let (constructor = 3) { yield <x>\t<y/></x>; }");
tryItOut("prop = <y><z/></y>, #1=[#1#] = [[1]];");
tryItOut("with(\f[ /x/g ]){export *;let __count__ = *, prop; }");
tryItOut("if(prototype = [[1]]\t) { if ((window <<= [,,])\f) throw <x><y/></x>; else {return;*::*; }}");
tryItOut("{L: {const __noSuchMethod__ = <y><z/></y>, constructor;return undefined; } }");
tryItOut("{}");
tryItOut("if(({__iterator__: this.__defineSetter__(\"constructor\", (-1)) })) { if (__count__) L:if(null) export __noSuchMethod__; else  if ([,,]) 1e81; else gc()} else {with({prototype: window})(__count__);; }");
tryItOut("L:if( /* Comment */__count__) export __noSuchMethod__; else  if (<><x><y/></x></>[window]) {prop =  '' , __parent__ = constructor; }");
tryItOut("let constructor =  '' \n");
tryItOut("while((#1=[#1#]) && 0)break ;");
tryItOut("with({}) { /a/gi } ");
tryItOut("with(<>__proto__</>){gc() }let __iterator__ = null, __count__ = window;");
tryItOut("export *;");
tryItOut("L: {/*for..in*/for(constructor = __noSuchMethod__ = default: case 9:  in .2) {if( /x/ ) ( /x/ ); } }\n");
tryItOut("if(__parent__.prop) return\n\nyield;");
tryItOut("function (__count__) { yield; } \n/*infloop*/do {} while(1e81\n);\n");
tryItOut("M:switch(window) { case 7: __iterator__ = prototype; }");
tryItOut("prototype = __iterator__;");
tryItOut("/*infloop*/for(<x><y/></x>; undefined; *::*) break M\n");
tryItOut("try { return false; } catch(__count__ if  /* Comment */null) { export __noSuchMethod__; } finally { prop; } ");
tryItOut("with({}) { try { this.zzz.zzz; } catch((new Object(0.1, <x><y/></x>)).valueOf(\"number\")) {  { yield new (0x99)(@foo)() === 'fafafa'.replace(/a/g, (__noSuchMethod__ = [z1,,])) }  } finally { with({}) { return; }  }  } ");
tryItOut("if(yield yield function ([y]) { }) {/*infloop*/for(var __parent__; __proto__; (++null.valueOf(\"number\"))) {}var __iterator__; } else  if (false & #3={a:#3#}) L:with((<><x><y/></x></>.hasOwnProperty(\"__parent__\")))do {yield;yield ; } while((\f(~@foo)) && 0); else {let __noSuchMethod__ = <x><y/></x>, __proto__ = <><x><y/></x></>;L:if(prop = window) window else  }");
tryItOut("switch((__parent__ = [11,12,13,14].map)) { default: /*infloop*/for(*; undefined; 0.1) {gc()const prop; } }");
tryItOut("with({yield: (\n(__count__.__parent__)).constructor = (eval(\"<y><z/></y>\", __proto__)) || ([(-0)])}){return;/*for..in*/for(const prop.prop in (((([this if (@foo)])(eval(\"*\", 0.1),  /x/ )).watch)(3))){return;__iterator__, __count__ } }");
tryItOut("/*for..in*/for(constructor in <><x><y/></x></>) {const __proto__, __noSuchMethod__;gc() }");
tryItOut("const prototype = this, __parent__;");
tryItOut("if(false) { if (*::*) gc() else { }}");
tryItOut("/*for..in*/for(var constructor = ([<y><z/></y>]) in (({constructor: <><x><y/></x></> })) &= [,]) {let (prop = 0.1 || 5.0000000000000000000000) { {} } }");
tryItOut("if((prop = __noSuchMethod__)) {yield; } else  if (<x><y/></x> <<= <x><y/></x>) return [[]];");
tryItOut("return;");
tryItOut("if(<></>) { if (true) \t{ \"\" ; } else {(<><x><y/></x></>);break ; }}");
tryItOut("if(({})) yield; else  if ((yield @foo)) ");
tryItOut("/*infloop*/for(try { __count__.__count__ = __noSuchMethod__; } catch(prototype) { __proto__ = __noSuchMethod__; } ; (true >>= [[]].constructor = (prototype)()); (yield  \"\" ).constructor = ((#0=[ '' ]).(this))) {do var prototype; while((window) && 0);export __noSuchMethod__; }");
tryItOut("return\nreturn;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in *::*.hasOwnProperty(\"constructor\")) {( '' );yield; }");
tryItOut("{[z1,,];;\ngc()\n }");
tryItOut("/*infloop*/M:do {false } const prop; while(<y><z/></y>.__lookupSetter__(\n\"prototype\").__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }));");
tryItOut("{var prototype = window; }");
tryItOut("/*for..in*/for(var constructor in (((new Function(\"return;\")))((({__parent__: this}) ^= (function ([y]) { }++))))){return;return <x/>; }");
tryItOut("with({prototype: ((p={}, (p.z = [11,12,13,14].map)())).__defineSetter__(\"__iterator__\", ({}).__lookupGetter__)}){/*infloop*/for(#0=({function::constructor: <><x><y/></x></>}); <y><z/></y> &=  /x/ ; constructor.@* ? eval(\" \\\"\\\" \", <x/>) : __proto__ &=  '' ) {/*infloop*/L:for(var __count__ = <x><y/></x>; __proto__; <x><y/></x>) var __iterator__; }if( \"\" ) {Math.sin } else  if (undefined) {true; } else this; }");
tryItOut("if(<x><y/></x>) { if (\t1e81) {return;{} } else {export *;yield window; }}");
tryItOut("/*infloop*/do {continue M; } while();");
tryItOut("throw <x/>;");
tryItOut("if(__iterator__.__iterator__ = <><x><y/></x></> @ <x><y/></x>) export *; else  if (+this) {var prop = <x><y/></x>; } else export prop;");
tryItOut("M:do export *; while(( /* Comment */<x/>) && 0); const prop;");
tryItOut("/*for..in*/M:for([__parent__, __parent__] = 'fafafa'.replace(/a/g, (+*::*.@foo).__defineSetter__) in (undefined.__defineSetter__(\"constructor\", [1,2,3,4].map)\n)) /*infloop*/L:while((typeof (false != 3)\n)){export *;/*for..in*/M:for([__parent__, __parent__] = 1.3 in <><x><y/></x></>)  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __count__: ({ __count__: prop, __noSuchMethod__: (prototype) }) }) in @foo .. *::*) {L:do {; } while(((__parent__.propertyIsEnumerable(\"__parent__\"))) && 0);let (__parent__ = <><x><y/></x></>) { <><x><y/></x></>; } }");
tryItOut("return  \"\" ; const __noSuchMethod__\n");
tryItOut("if(new new Function()) { if (constructor) { '' \nnew Function\n }} else {export prototype; }");
tryItOut("constructor: (((( '' )(<x><y/></x>)) = (yield <x/>)).__defineSetter__(\"__parent__\", ([1,2,3,4].map).call)) ^= (uneval( /x/g )).__defineSetter__(\"__parent__\", Function)");
tryItOut("export prop;");
tryItOut("/*for..in*/M:for([prop, __iterator__] = #3={a:#3#} ? <><x><y/></x></> : <><x><y/></x></> in *) throw 0;");
tryItOut("constructor = <><x><y/></x></>, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in (({constructor: new [1,2,3,4].map()}))) {export __iterator__;continue M; }");
tryItOut("for(let y in [5,6,7,8]) __count__ = __proto__;");
