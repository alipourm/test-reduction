
tryItOut("throw __parent__;");
tryItOut("L:while((prototype) && 0){break ; }");
tryItOut("throw StopIteration;");
tryItOut("{var __proto__; }");
tryItOut("if(let (__count__ = <x><y/></x>) *::*) {export *; } else  if (<x/> @ <x><y/></x>) return <><x><y/></x></>;\t else {(function(id) { return id });\texport prop; }__parent__ = this, __iterator__ =  '' ;");
tryItOut("const function::__iterator__, __count__\nyield;");
tryItOut("L: constructor = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("if(<><><!--yy--></></>) {yield @foo; } else  if ((prop.*)) function::x::constructor; const __count__;");
tryItOut("let(__parent__ = window, __count__) { o");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const [, , constructor, prop] in (yield (-1).__lookupGetter__(\"__count__\"))) /*infloop*/for(var __iterator__; constructor; <><x><y/></x></>) gc() const prop;");
tryItOut(" const __proto__;");
tryItOut("/*infloop*/for(<>({ prop: __iterator__, __parent__: __noSuchMethod__ })</>; (<x><y/></x>.@foo).isPrototypeOf(let (__parent__ = (true.propertyIsEnumerable(\"constructor\"))) new <y><z/></y>(window, *)); <xxx>{prop}</xxx>) {throw  \"\" ; }");
tryItOut("throw StopIteration;");
tryItOut("if(*::*) export *; else  if (__iterator__) {<><x><y/></x></>; } else export __proto__;");
tryItOut("while(((<x><y/></x>)[ '' ]) && 0){/*for..in*/for(const __proto__ = (-1) in  \"\" ) {export *;__parent__; } }");
tryItOut("return;\nif(__noSuchMethod__) { if (<x><y/></x>) {const __count__; } else {export *; }}\n");
tryItOut("if([<><x><y/></x></>]) { if (([<x><y/></x>])) yield; else {constructor = <y><z/></y>throw <><x><y/></x></>; }}");
tryItOut("{for(let y in []);/*infloop*/for(__parent__ = [,,z1];  /x/g ; <x><y/></x>)  /x/g  = , __proto__ = window }");
tryItOut("if(new null(<//h\n><x><y/></x></>)) { '' ;export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const <x><y/></x>['prop'] in -1) /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in *) try { yield [z1,,]; } catch(__parent__) { return (<y><z/></y>.valueOf(\"number\")); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */<zzz>0/0</zzz>");
tryItOut("/*infloop*/while(yield <x/> .@*:: (__parent__ = *))/*infloop*/do {export __noSuchMethod__;__count__; } while( /x/ )\n");
tryItOut("let __proto__, constructor = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <x><y/></x>) const __count__, __count__ = 0x99;");
tryItOut("yield;");
tryItOut("with(window){yield function(id) { return id }; }");
tryItOut("/*for..in*/for(__proto__ in <><x><y/></x></>) {gc }");
tryItOut("let (__proto__ = (({}).__lookupGetter__(<><x><y/></x></>, (-0)) && 3++)) { L: {yield <><x><y/></x></>; } }");
tryItOut("/*for..in*/for(constructor in ((<x><y/></x>)((([[1]])((-0), this)))))\f(*::*);");
tryItOut("L:if(<><x><y/></x></>--) gc() else {; }");
tryItOut("switch(__noSuchMethod__ = .2) { case new gc(*, __parent__): break; yield;Functionbreak;  }");
tryItOut("/*infloop*/M:for(let __noSuchMethod__;  /x/g ; __iterator__) {continue M;throw <x/>; }");
tryItOut("if(1.2e3) {let __count__, __noSuchMethod__;\n{}\nexport constructor; } else  if ([z1,,]) {{__parent__ =  \"\" ; }let constructor, __iterator__; } else {throw *;\fexport 0.1; }");
tryItOut("function () { return <x><y/></x> } ");
tryItOut("L: throw @foo;");
tryItOut("let(({ __noSuchMethod__: __count__ })) ((function(){})());");
tryItOut("let(({ __parent__: __proto__ }) = (__noSuchMethod__ = prop), __proto__) { ");
tryItOut("with({}) { yield; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(var prop in false) {export *;\0 }");
tryItOut("/*infloop*/for(let ({ __parent__: ({ __parent__: ({ __parent__: ({ __count__: function::__proto__, __proto__: constructor.__parent__ }), __noSuchMethod__: __proto__ }), __iterator__: [({ __proto__: [] }), ({ __iterator__: __iterator__, yield: __iterator__ }), , ] }) }) = (__count__ = (#2=({prop: (window < <x><y/></x>)})) | (uneval((\f{__iterator__: </><xxx>{constructor}</xxx></> }))).hasOwnProperty(\"__count__\")); __iterator__.((this.__defineGetter__(\"__noSuchMethod__\", (({}).__lookupGetter__).call))).__lookupSetter__(\"prototype\"); eval(\"const __iterator__,  ;\", new Boolean((<x/>.__proto__), #3={a:#3#})) ? ((yield <x/>.throw(__count__))) : (#1=[#1#].(new  /x/  != <x><y/></x>(this || <><x><y/></x></>)))) L:switch(<y><z/></y>) { case 8: break;  }");
tryItOut("if(([15,16,17,18].sort(<><x><y/></x></>, <x><y/></x>.__noSuchMethod__ = this) / (([__proto__, ] = prop = undefined) << *::*.__defineSetter__(\"__parent__\", gc)))) for(let y in []);");
tryItOut("return (__proto__.(true));");
tryItOut("/*for..in*/for(let get in  '' ) /*infloop*/while(__noSuchMethod__ = this){yield;const __parent__ = <y><z/></y>; }");
tryItOut("export __iterator__;");
tryItOut("/*infloop*/for([] = Boolean(); (this / [15,16,17,18].map(/a/gi,  /x/ )); <x/>) {{} }");
tryItOut("L:with(throw (eval(\"eval(\\\"/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in []) return  /x/ ;\\\", 1e4)\", [11,12,13,14].some))){/*for..in*/M:for(let __iterator__ = __noSuchMethod__(<x/>) = (({ set __count__ __count__ (constructor, __proto__) { export *; }  })) in (<><x><y/></x></> * [])) {var __proto__; } }");
tryItOut("with({}) { try { let constructor; } finally { this.zzz.zzz; }  } ");
tryItOut("/*infloop*/for\f(let [, , , , __noSuchMethod__] = <><x><y/></x> __proto__: true .@x:: *::* < __parent__/>[<x/>]; (<><x><y/></x></>.unwatch(\"__noSuchMethod__\")); <y><z/></y>) {}");
tryItOut("yield let (prop) ( /* Comment */ '' );");
tryItOut(";\nlet (__iterator__) { ; }\n");
tryItOut("var __iterator__;");
tryItOut("{return;gc() }");
tryItOut("L:switch(({__parent__ getter: new Function }).function::__iterator__) { case 0: /*for..in*/for(__parent__ in ((function(q) { return q; })(@foo))){throw *; }case 3: break; break; case *.__lookupSetter__(\"__noSuchMethod__\"): /*infloop*/for(this; <><x><y/></x></>; __iterator__) {__noSuchMethod__; }/*infloop*/for(({ \f__iterator__: [] }) = (({__count__: ({a1:1}).__defineGetter__(\"__iterator__\", (new Function(\"yield;\"))) })); prototype; (__noSuchMethod__.constructor = <x/>)++) {gc()\nreturn;yield; }break;  }");
tryItOut("M:if((@foo--)) { if (<x><y/></x>.__defineGetter__(\"prop\", function(y) { yield y; gc(); yield y; }) .@x:: <x><y/></x>.__lookupGetter__(\"prototype\")) {/*infloop*/for(prototype; <><x><y/></x></>; 3) export __parent__;(__iterator__); } else (*::*);}");
tryItOut("yield new Error(3.141592653589793, this);");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; prototype.__noSuchMethod__ getter= default: ({}).__lookupGetter__break; case 9: break; case undefined.watch(\"__parent__\", function(y) { yield y; ([,,]);; yield y; }): break; .__defineGetter__(\"__proto__\", function (function::__parent__) { ; } ); __parent__ = __iterator__.prototype = window) ");
tryItOut("/*for..in*/for(var [__count__, prop] = __parent__.prototype = 3.\fwatch(\"__iterator__\", window) in (({constructor setter: [1,2,3,4].map }))) {if(*) {(<x><y/></x>);continue M; }return; }");
tryItOut("{}");
tryItOut("with({}) return;");
tryItOut("/*infloop*/for(let ({ __parent__: [, , ] }) = undefined.__lookupGetter__(\"constructor\"); Object(true); (new ([11,12,13,14].map) for each ([1,2,3,4].slice in __parent__)(new (*::*)( /x/ ), <x><y/></x>.(< [, __proto__]x><y/><>/\n)))) {(@foo).__defineSetter__ const constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (this.propertyIsEnumerable(\"prop\"))[ /* Comment */-3/0]) {{export *; }throw <x><y/></x>; }");
tryItOut("");
tryItOut("__parent__ = __proto__;");
tryItOut("if( /x/g ) {({a1:1}) }");
tryItOut("eval const undefined;");
tryItOut("switch(({__noSuchMethod__ getter: /a/gi })) { case --[z1,,].eval([[]]): let (constructor = (--*::* ? (({prototype: 1e81})) :  ''  + <><x><y/></x></>)) {  '' ; }break; default: break; break; break; case 6:  }");
tryItOut("/*for..in*/for([__iterator__, __proto__] = (this.__defineSetter__(\"__proto__\", function () { return; } )) in yield eval(\"<y><z/></y>\", [z1,,]).*) yield this;");
tryItOut("if([*::*].hasOwnProperty(\"prototype\")) {yield; } else {export *;export *; }");
tryItOut("if(this.zzz.zzz) { if (((this.__defineSetter__(\"__proto__\", (1 for (x in [])))) = [1].yoyo(<><x><y/></x></>))) {/*for..in*/for(var [prop, __parent__] = true in prop setter: Function) return <><x><y/></x></>;/*for..in*/for(let __parent__ in (('haha'.split)(new 3.141592653589793(prop, null)))\f){yield; } } else switch(<x/>) { case 0: {}\nbreak; case (new (<x><y/></x>)(<y><z/></y>))(this)-=(prototype =  ''  << <y><z/></y>): var __proto__;break; break;  }}");
tryItOut("with({__parent__:  '' })/*for..in*//* nogeckoex bug 349964 */ for  each\f(constructor in new Math.pow(true, this)) return");
tryItOut("/*for..in*/L:for(let constructor in ((function () { {} } )(<y><z/></y> if (<x/>).constructor))){var prototype = prop, prototype = constructor; }");
tryItOut("if(new function  prototype (, __noSuchMethod__) { return <y><z/></y> } (<x><y/></x>))  /x/  else  if ((new (1 for (x in []))((<x><y/></x> .. <><x><y/></x></>), (-0)))) {gc()\nthrow __count__;(*); }");
tryItOut("try { __proto__ = prototype; } catch(constructor if (function(){throw StopIteration;})()) { this.zzz.zzz; } catch(__iterator__) { let() { throw __iterator__; } ");
tryItOut("/*infloop*/L:while(__count__)continue \fL;");
tryItOut("L:do { { yield <><x><y/></x></> }  } while((3/0) && 0);");
tryItOut("if(constructor.constructor = @foo) { if ( ) {yield; }} else {return <x><y/></x>;export *; }");
tryItOut("throw <><x><y/></x></>; const __count__;");
tryItOut("if(__iterator__.(-0).constructor = new ('haha'.split).call(5.0000000000000000000000)) { if (__proto__.valueOf(\"number\")) {if(<x><y/></x>) prototype; else {<><x><y/></x></>; }(@foo); }} else M:switch(<y><z/></y>) { default: ;{} }");
tryItOut("__iterator__;/*infloop*/for(++<><x><y/></x></>; prototype == <x/>; (this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split) .@x:: <x><y/></x>.__defineSetter__(\"__proto__\", ({a2:z2})))) {/*infloop*/for(const prototype = (-1); window;  \"\" ) ( \"\" ); }");
tryItOut("/*for..in*/M:for(var __count__ = (((uneval(undefined))) .. [true.__count__]).eval((eval(\"<><x><y/></x></>\", undefined)) * function(q) { return q; }(undefined)).unwatch(\"prototype\") in Date(<><x><y/></x></>,  \"\" )) {do yield; while((*::*) && 0);return window; }");
tryItOut("/*for..in*/for(__parent__.__parent__ in ((Math.sin)(<x><y/></x>.@*)))[1,2,3,4].slice");
tryItOut("let (__count__) {  }");
tryItOut("if((constructor = \n '' )) {__proto__; } else  if (<x><y/></x>.(<x><y/></x>)) continue L; else ({ __noSuchMethod__: constructor })/*for..in*/for(const __iterator__ in ((function  prop (constructor) { yield this } )( /x/ )));");
tryItOut("{if(new (function (__iterator__) { return  /x/g  } )()) { if (Object(constructor)) ;} else ;let(prop, constructor =  /x/g ) ((function(){{}})()); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for \r each(var __parent__ in 1.2e3 ^= [1]) {{continue ; } }");
tryItOut("while((([15,16,17,18].sort((@foo).watch, *::* ? __noSuchMethod__ : 5.0000000000000000000000))) && 0){export prototype;throw this; }");
tryItOut("/*for..in*/for(const  { return yield (new (-__noSuchMethod__ setter: ({}).hasOwnProperty)()) }  in (prototype = arguments)) {/*infloop*/while(<x><y/></x>){return -1; }return; }");
tryItOut("/*for..in*/for(const prototype in  '' ) const __proto__ = 3.141592653589793;if(true) yield;");
tryItOut("switch((__parent__ = this)) { default: __proto__ = __parent__;L:if(<x><y/></x> >= -0) {return;{} }break;  }");
tryItOut("L:if(<x><y/></x>.(3.141592653589793)) return <y><z/></y>;");
tryItOut("M:do (this); while((3) && 0);");
tryItOut("/*for..in*/for(const [prototype, prototype] = [15,16,17,18].filter('haha'.split, (function::__parent__.(<x/>)\n)) in ((new (<x/>).__defineSetter__() | ({}).watch(\"__proto__\", Math.sin)) if ([,,z1]))) {/*for..in*/for(var [__noSuchMethod__, __iterator__] = *::* in <y><z/></y>) {{}let constructor; }do {{} } while(([15,16,17,18].sort((@foo).__defineSetter__, <><x><y/></x></>)) && 0); }");
tryItOut("with({__count__: 'fafafa'.replace(/a/g, true)})yield\n");
tryItOut("if( \"\" ) {/*for..in*/for(let __iterator__ in constructor) export *; } else  if (#1=[null]) if(<x><y/></x>) { \"\" ;eval } else  if \f(prop) yield #1=[#1#];\r else {let (__noSuchMethod__ = true, set = constructor) { return; }yield [,,]; }");
tryItOut("(function::__proto__);gc()");
tryItOut("/*for..in*/for(let constructor in (this.propertyIsEnumerable(\"__count__\"))) {[1,2,3,4].map }");
tryItOut("if(\t<x><y/></x>) __count__, __proto__ = 5.0000000000000000000000; else <><x><y/></x></>;");
tryItOut("if(this.__defineSetter__(\"prop\", false %= <x><y/></x> = [z1,,].watch(\"__count__\", new Function))) {export *; } else {; }");
tryItOut("throw __iterator__;");
tryItOut("L: <xxx {__iterator__}={(<x><y/></x>.@foo)} /> ");
tryItOut("do {return;{} } while(((<><x><y/></x></> - <x><y/></x>)) && 0);");
tryItOut("L: {return ({a2:z2});//h\n }");
tryItOut("/*infloop*/M:do yield; while(new (true)(typeof 1.3, true.eval(window)));");
tryItOut("M:while(( '' .unwatch(\"constructor\")) && 0)var prop = gc(), __noSuchMethod__ = constructor;");
tryItOut("{}");
tryItOut("\f[z1] ? true : -0['__count__'] = prop");
tryItOut("yield __proto__");
tryItOut("if([<x/>].filter((<x><y/></x>).watch).__iterator__) {{switch((let (__count__ = <><x><y/></x></>, __iterator__ =  /x/ ) <><x><y/></x></>)) { default:  }if(this) {break ; } else  if ( '' ) yield; }export constructor;\nvar prototype;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({__parent__: (new Boolean()) }).__proto__ in {}) {return }");
tryItOut("if((Date(window, <><x><y/></x></>)) ? [11,12,13,14].filter : (*::*.valueOf(\"number\"))) {let (prototype = (-0)) { {([1,,]); } }/*infloop*/for(prototype = this; __parent__;  '' ) {var __count__; } }");
tryItOut("<><x><y/></x></>;\n__proto__ = __parent__;\n");
tryItOut("/*for..in*/for(__count__ in window) return;");
tryItOut("do if(<x><y/></x> >> null)  while(((constructor = <x/>)) && 0);");
tryItOut("if([] = ({ __count__: [, , ], constructor: constructor })) {throw 0;yield *\n } else  if ((eval).call(this.watch(\"__noSuchMethod__\", (arguments).__defineSetter__), ({__proto__:  /x/ , prototype: undefined }), [[1]])) switch(<><x><y/></x></>) { case  /x/ : let constructor = <><x><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var prototype.constructor in false) {yield  '' ;L:while((<><x><y/></x></>) && 0){} }");
tryItOut("/*infloop*/do {if(RangeError(<><x><y/></x></>) ? * : ((({}).hasOwnProperty)(window))) { if (__proto__.constructor getter= function(y) { yield y; return;; yield y; }) (1.3);} else {const __iterator__ = __parent__; }switch(new /a/gi()) { case 1: if(5.0000000000000000000000) { if (<><x><y/></x></> >>= <x/>(__iterator__)) {return  \"\" ;throw __noSuchMethod__; } else ;}default: gc()break; case [prop, __proto__, ] = __noSuchMethod__:  } } while((function::prop.__noSuchMethod__ = <bbb \fxmlns:ccc=\"033\"><ccc:eee></ccc:eee></bbb>\n));");
tryItOut("L: {{1e+81break ; } }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, Function); (new (<><x><y/></x></>.unwatch(\"__parent__\"))((*::*)(<x/>, <><x><y/></x></>))); try { throw StopIteration; } catch(__parent__) { ((Math.sin)()) = __count__;\t } finally { throw StopIteration; } ) {var __proto__ = *::*; }");
tryItOut("L:do throw <x><y/></x>; while((\f{;return; }) && 0);");
tryItOut("/*for..in*/M:for(var prop in  /* Comment */<x><y/></x>) const __iterator__, constructor;");
tryItOut("/*infloop*/do return <x><y/></x>; while(__count__ = -0.constructor);");
tryItOut("with(delete = 5.0000000000000000000000){const prop, prop;; }");
tryItOut("export __proto__;");
tryItOut("/*infloop*/while(){function (__iterator__, __noSuchMethod__)\n { yield 0 }  }");
tryItOut("/*infloop*/while((prop)(__count__.isPrototypeOf([1]), <><x><y/></x></>)){L:if(window) ({}).__lookupGetter__ else  if (<><x><y/></x></>) /a/gi\nreturn null;\nyield; }");
tryItOut("let (prop = (uneval( /x/ ))) { throw  /x/ ; }");
tryItOut("/*for..in*/for(let __iterator__ = __parent__ = <y><z/></y> in ( /x/  !== 4.)) continue M;");
tryItOut("L: {return <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(<y><z/></y>)\n");
tryItOut("break ");
tryItOut("{yield; }");
tryItOut("do this; while(( /x/g ) && 0);");
tryItOut("M:if(!this.zzz.zzz) {gc() } else /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <y><z/></y>) export constructor;");
tryItOut("/*for..in*/M:for([__count__, prototype] = new 033.yoyo(<y><z/></y>) in ({})) {export constructor; }");
tryItOut("with(<x><y/></x>)return;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((undefined).__defineSetter__)(3)))throw __noSuchMethod__\n<y><z/></y>");
tryItOut("/*infloop*/do return; while(<x><y/\f></x>); const __iterator__;");
tryItOut("/*for..in*/for(const prototype = <x/> in -3/0) {with((new Function))function  __parent__ (__proto__)<><x><y/></x></> }");
tryItOut("{with({}) { this.zzz.zzz; } \f }");
tryItOut("/*infloop*/do /*for..in*/L:for(var constructor(window) in  \"\" ) let __parent__, constructor = this; while(eval(\"(__noSuchMethod__.prototype getter= eval())\", (({}).__lookupGetter__(@foo,  /x/ ).isPrototypeOf((uneval((__count__.prototype setter= <x><y/></x>.watch(\"__parent__\", /a/gi))))))));");
tryItOut("continue M\n");
tryItOut("for(let y in [5,6,7,8]) with({}) { throw constructor; } ");
tryItOut("with({}) throw __count__;");
tryItOut("if(window) {0var prototype, __noSuchMethod__; } else *::*;");
tryItOut("let (constructor = (function ([y]) { })(), constructor) { <x><y/></x>; }");
tryItOut("/*for..in*/for(const <xxx>{__parent__}</xxx> in ((\rfunction  __iterator__ (__iterator__) { gc() } )(<><x><y/></x></> <= @foo)))export __iterator__;");
tryItOut("M:if(this.zzz.zzz) let x::__parent__, __parent__; else  if (<>([eval(\"throw null;\", (function(y) { yield y; {}; yield y; })( /x/ , <x><y/></x>)) for ((window) in __count__) for each (__proto__ in null) set __iterator__(prototype) { yield  /x/g  } ])</>) {try { return  /x/g ; } catch(__iterator__ if <y><z/></y>) { (1 for (x in [])) } catch(prototype) { break L; } /*infloop*/for(prop = -0; __noSuchMethod__.prototype getter= (new Function(\"(<x><y/></x>);\"));  /x/ ) {__iterator__\n(<><x><y/></x></>);\n } } else /*for..in*/for(let __iterator__.__count__ in <y><z/></y>) {@foo; }");
tryItOut("{if((Boolean())) {yield;/*for..in*/for(const [__parent__, __proto__] = typeof __parent__ in <><x><y/></x></>) var prototype; } else  if ((*.valueOf(\"number\"))) {\fif(this)  else  if (__parent__) {; } } else /*infloop*/L:for(false; -3/0; __proto__) ([[1]]); }");
tryItOut("switch(undefined.__lookupGetter__(\"__iterator__\") >= yield.__iterator__--) { default: return;case <><x><y/></x>\t</>.hasOwnProperty(\r\"__proto__\"): break M;break;  }");
tryItOut("if(* ^ \n<x><y/></x> - __proto__) export prototype; else  if ((null.unwatch(\"__count__\")\n ^ (<xxx> get __noSuchMethod__()(new (function ([y]) { })( /x/ ))each}<'/ __proto__xxx.((constructor = <x/>))))) {export __proto__;gc() } else yield this;\r");
tryItOut("do {export __parent__;return  \"\" ; } while((@foo > <x/>.throw((<x/>)[.2])) && 0);");
tryItOut("M:do var prop = [1,,], __count__ = <x><y/></x>; while((typeof (__noSuchMethod__ = @foo)) && 0);");
tryItOut("L:switch((Math.pow)) { case 8: break; default: L:do {(<y><z/></y>); } while((((<><x><y/></x></>.eval(({a1:1}))).__noSuchMethod__ = <><x><y/></x></>.constructor+=<x><y/></x> ?  ''  : true)()) && 0);case ( /x/  && __iterator__ = <x><y/></x>): export *\n/*for..in*/for(const prop =  /x/  in <><x><y/></x></>) {yield false;let __iterator__ = <><x><y/></x></>; }break; yield;prototype = 0;break; break; break; case __count__ in @foo: throw <x/>break; break;  }");
tryItOut("<x/>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  /x/g (this.zzz.zzz)) with(false){ }");
tryItOut("getter = __count__;");
tryItOut("/*infloop*/L:for(let __noSuchMethod__ = window.__lookupSetter__(\"constructor\"); new (function ([y]) { })()(); this.__defineSetter__(\"constructor\", function  prototype (prop) { return  \"\"  } )) {; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __count__ = (p={}, (p.z = (<><x><y/></x></>).call(#3={a:#3#}, ))()) in ([, prototype] = yield *)) gc() const constructor;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ((function(y) { yield y; arguments; yield y; })((p={}, (p.z =  /x/g )()))))/*infloop*/while(*)export *");
tryItOut("while((new <><x><y/></x></>()) && 0)export *; const prop;");
tryItOut("export *\n");
tryItOut("L:with((-0)[<y><z/></y>].__lookupGetter__(\"prop\")){function (__iterator__, prototype)(-1)break ; }");
tryItOut("var prototype = 1e4;\n<x/>;\n const __noSuchMethod__;");
tryItOut("with(__count__ === <x><y/></x>){gc()var __iterator__ = <y><z/></y>; }");
tryItOut("return;;");
tryItOut("/*for..in*/L:for(var [window, __noSuchMethod__] = (new Number()) .@ window in true if (<x/> *= window)) /*infloop*/for(let prop = (typeof __proto__.(window)); ( /* Comment */__count__); window) return;");
tryItOut("if((prototype)) {__iterator__ = undefined;throw undefined; } else  if (new __noSuchMethod__ = <><x><y/></x></>()) {{} }");
tryItOut("/*infloop*/M:for(let prototype; constructor; function::prototype.eval(4. in (function ([y]) { })())) return -0;;");
tryItOut("/*for..in*/for(var function::__noSuchMethod__ in *::*) {yield;export prop; }");
tryItOut("do return <x/>; while((( /x/ .__defineGetter__(\"prototype\", window))) && 0);");
tryItOut("/*for..in*/for(var prop in ((({}).__lookupGetter__)(this.zzz.zzz))){L:if(<!--yy-->.(__noSuchMethod__.prop = __noSuchMethod__)) yield;/*infloop*/for(let prototype\n; [,,]; *) const prototype = <x/>; }");
tryItOut("{M:switch(false\f) { case __proto__: break; export *;break; default: break;  }if(__count__) let prototype = arguments; else {throw  /x/g ; } }");
tryItOut("/*for..in*/M:for(prop = [#1#] in false) yield;");
tryItOut("/*for..in*/for(var prop = prop+=<x><y/></x> in (.2 *= <x/>)) export *;");
tryItOut(" '' ;");
tryItOut("return; const __proto__;");
tryItOut("{let __iterator__ = null, __iterator__ = @foo;; }");
tryItOut("if(#3={a:#3#}.valueOf(\"number\")[new (function (__noSuchMethod__, __noSuchMethod__) { return <><x>\f<y/></x></> } )(this.propertyIsEnumerable(\"constructor\"))]) {/*for..in*/for(__parent__ in function::prop) false; } const prop;");
tryItOut("{if((* | <x/>).constructor) { if ((({}).hasOwnProperty)(prototype = ({a1:1}), ({__proto__ setter:  get __count__()function::__count__ }))) {yield <></>;*::* }} else {yield @foo;/*infloop*/L:for(; prop.__count__; 1e+81 || <y><z/></y>) return <y><z/></y>; } }");
tryItOut("/*infloop*/for(const __proto__; <><><x><y/></x></></>; (*::*.propertyIsEnumerable(\"__proto__\")) ^ (-<y><z/></y> >= window)) {{throw *::*;const __iterator__ = -0, constructor; }switch(<x/>) { default: (null);let __iterator__ = <y><z/></y>, __noSuchMethod__;break; export __iterator__;break; break; case 4: function  __count__ (__iterator__, __iterator__) {  } break; case 8: __count__, function::__iterator__;break; new Function } }");
tryItOut("L:with(#2=prototype%=<x><y/></x\t>){return;if(((<><x><y/></x></>).watch).call) { if (({ __count__: ({ constructor: prototype }), prop: ({ __count__: prop }) }) = @foo.*) /*for..in*/for(__parent__ in ((/a/gi)(__proto__)))yield ,;} else {yield;__parent__, __count__; } }");
tryItOut("{try { const __parent__; } catch(__parent__ if (function(){Math.sin})()) { window; } finally { break ; }  }");
tryItOut("/*infloop*/L:for(<><x><y/></x></> ? ({prototype: [,],  get prototype __parent__ (__proto__) { return <x><y/></x> }  }) : <y><z/></y> === <y><z/></y>; undefined.__defineGetter__(\"constructor\", this); this.__defineSetter__(\"({ constructor: ({ __parent__: prop, prop: [, ] }), __noSuchMethod__: __noSuchMethod__ })\", /a/gi)) (this);");
tryItOut("/*for..in*/for(const prototype in *::*) {false;return -3/0; }");
tryItOut("while(([undefined]) && 0)if(@foo) {return [[1]];(false); } else {yield; }");
tryItOut("Freturn __parent__;");
tryItOut("let (prototype) { /*infloop*/M:while([z1,,]){ } }");
tryItOut("/*infloop*/L:for(let [] = (<y><z/></y>\n) * (<x><y/></x> > <x><y/></x>) instanceof (prototype = __parent__);  /* Comment */(<y><z/></y>)[this]; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((__count__ = *::*))) {{return <x><y/></x>; }/*infloop*/do {undefinedyield undefined; } while(constructor); const prototype; }");
tryItOut("prop = prop;");
tryItOut("()if(__proto__--false ? let : <y><z/></y>) /*for..in*/for(constructor.constructor in (((1 for (x in [])))(*)))let __proto__, __count__;");
tryItOut("switch({}) { case 8: yield;break;  }");
tryItOut("export __count__;");
tryItOut("default: gc()break; ");
tryItOut("/*for..in*/M:for(const __count__ = [-3/0.constructor].some(([false].filter([z1,,])).watch) in this.__defineSetter__(\"({ __count__: __parent__, __iterator__: __parent__ })\", function  constructor (<x><y/></x>, prototype) { return [z1] } )) {continue L; }");
tryItOut("/*infloop*/M:for(var ({ __iterator__: ({ prop: prototype, __noSuchMethod__: constructor }), prop: ({ __proto__: __count__, __count__:  /x/g  }) }) = (__count__ = ({})) <= undefined for (__iterator__ in <x/>); window;  /x/g .__count__ ? *::* : !<y><z/></y>) {throw <x/>; }");
tryItOut("with({__parent__: (({ prototype: __proto__, function::prop: prototype }) = ({ __iterator__: ({ __parent__: <x/>, __count__: prop }), __parent__: [] }))})if(( ''  if (this))) { if ([*::*].some(__iterator__)) {yield *; }} else yield <x/>;");
tryItOut("/*infloop*/L:for(let ({ prototype: [], __count__.__iterator__ = this.__count__: __noSuchMethod__ }) = -1; new RegExp(); (prototype)) {/*infloop*/L:for(({ prototype: constructor, __parent__: prototype }) = <><x><y/></x></>; __iterator__|= '' ; <><x><y/></x></>[x::__iterator__]) export *;while((\t__parent__) && 0){<y><z/></y>; }continue ; }");
tryItOut("let (__noSuchMethod__) { throw StopIteration; }");
