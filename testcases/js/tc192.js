tryItOut("yield (uneval((__proto__.__parent__)));");
tryItOut("if(<x/>) (({a1:1}));");
tryItOut("/*infloop*/for(prototype; ((__count__ = window if (<x><y/></x>))); this.zzz.zzz) continue ;");
tryItOut("if(4. === *.propertyIsEnumerable(\"__count__\")) { if (<y><z/></y>)  else window}");
tryItOut("/*for..in*/for(let [__proto__, __count__] = [11,12,13,14].some in  { return prop }  / constructor--) let([, __count__, __iterator__, ]) { this.zzz.zzz;");
tryItOut("M:if( '' ) { if (new (null >> ([11,12,13,14].map))) {if(3.141592653589793 .@*:: false > (3.141592653589793 for (__iterator__ in @foo))) return;if(<y><z/></y>) { if (<><x><y/></x></>) {{} } else let prototype = <><x><y/></x></>;}\n{}\n } else {switch((Math.sin.__lookupSetter__(\"__parent__\")).valueOf(\"number\")) { case  '' .constructor: break;  }M:while((__proto__ = <><x><y/></x><///h\n>) && 0){{}__noSuchMethod__, __noSuchMethod__; } }}");
tryItOut("M:if(@foo.__lookupGetter__(\"__iterator__\")) { if (this ,  /x/ ) var __noSuchMethod__, prop = this;} else gc() const __proto__;");
tryItOut("if((this.zzz.zzz++)) { if (([11,12,13,14].filter)) {(true.watch(\"prototype\", eval)); } else {/*infloop*/L:for(__proto__; ((new RangeError(constructor)))(__parent__ = <><x><y/></x></>).hasOwnProperty(\"__parent__\"); ({ prop: ({ <><x><y/></x></>: [, ] }), prop: ({ prototype: ({ __iterator__: __proto__, <><x><y/></x></>: prototype }), __noSuchMethod__: ({ prop: constructor }) }) }) = let (prototype, __parent__)  /x/ ) return this; }}");
tryItOut("switch(constructor = __proto__ = (yield <x/>) && undefined) { default: ;\n{}\nbreak; break;  }");
tryItOut("{L: break L; } const prototype;");
tryItOut("while((__parent__.( /x/ )) && 0)[,]");
tryItOut("if((/((<x><y/></x>.eval( \"\" ))\n)) { if (\f(<x/> | (this.__defineSetter__(\"prototype\", function(y) { yield y; {}; yield y; })))) {<x><y/></x>;yield; }}' else {throw function ([y]) { }; }");
tryItOut("throw StopIteration;");
tryItOut("if((#0=({__iterator__: prop = this}))) {for(let y in []); } else  if (Exception(<x><y/></x>, constructor)) {0.1; } else return *::*;");
tryItOut("if(([15,16,17,18].map(/a/gi, @foo ? * : <x><y/></x>)))  else  if (*::* for each (prototype in *::*)) {function (__parent__, __noSuchMethod__) { return 1e4 } \n }");
tryItOut("L:if((__parent__ = [, __parent__] = <>const constructor = <x/>, __noSuchMethod__;</>.yoyo((window && @foo)))) let __iterator__ = <><x><y/></x></>\n");
tryItOut("let (__noSuchMethod__, __iterator__) { /*for..in*/for(let <><x><y/></x></> + window.isPrototypeOf(__noSuchMethod__.__count__) in let (__proto__, #1#) (true | <x><y/></x>) >= <x><y/></x>.(this).@*) {if((window - <x><y/></x>)) {yield <><x><y/></x></>; } else {yield; }[1,2,3,4].map } }");
tryItOut("throw __count__;");
tryItOut("let (__parent__) { __noSuchMethod__ = <><x><y/></x></>, __count__ =  '' ; }");
tryItOut("while((__iterator__.(null) for each (__iterator__ in *::*) if (true)) && 0){const constructor;(1e-81); }");
tryItOut("{var prop;/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in [[]])  { return  /x/  }  }");
tryItOut("throw *\nlet __noSuchMethod__ = window, __noSuchMethod__ = 033;");
tryItOut("");
tryItOut("/*infloop*/L:for((({prop setter: [1,2,3,4].map })).isPrototypeOf(({__parent__: __proto__, __iterator__: 1e4 }).eval(<x/>)); ((<><x><y/></x></>.__lookupGetter__(\"__iterator__\")).yoyo((prop = let (prop = __iterator__) function ([y]) { })));  \"\" ) /*for..in*/L:for(const [__parent__, __iterator__] = ((<><x><y/></x></>)) in 5.0000000000000000000000) {prototype, __count__;var __noSuchMethod__; }");
tryItOut("switch(0x99) { default: if( /x/g ) __parent__ = @foo; else  if ([,,z1]) {const -0;\f; } }");
tryItOut("let ([]) { switch(null) { case 4: break;  }\nlet (function::__parent__ = 4., __parent__ = *::*) { gc() } }");
tryItOut("/*infloop*/for(<><bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb></>; ({__iterator__: 'fafafa'.replace(/a/g, Math.sin)\f}); (p={}, (p.z = <><x><y/></x></>)()).__defineSetter__(\"prop\", Math.sin)) {export *; }");
tryItOut("do gc() while((new (function(y) { yield y; gc(); yield y; }).apply(<><x><y/></x></>)) && 0);");
tryItOut("if((<><x\t><y/></x></>)[<x><y/></x>]) /*infloop*/for(const __count__; !<x/>;  /x/ ) {yield;([[1]]); }");
tryItOut("if(<x><y/></x>[this]) {if(false) \r{ if (<><x><y/></x></>) {<x><y/></x>;const __parent__, prop = 1e81; } else yield <><x><y/></x></>;} } else {( /x/g ); }");
tryItOut("with((__count__.__count__));");
tryItOut("while((typeof (__noSuchMethod__ = function::__parent__)) && 0){yield 1.2e3; }");
tryItOut("M:if( /* Comment */*) {prop = true, __iterator__ = 0.1; } else  if (__iterator__.__iterator__ = <x/>) export __count__;");
tryItOut("do gc() while((__iterator__.__count__ = this) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const function::__proto__.__iterator__ in <><x><y/></x></>) throw  /x/g ;");
tryItOut("if(('haha'.split(<y><z/></y>, (++<><x><y/></x></>)))) { if (prototype = *::*.__parent__ = (<x><y/></x>.__defineGetter__(\"prop\", (function () { yield undefined; } ).apply))) {export *;switch([[]] *= <><x><y/></x></>) { default: if(<x><y/></x>) {<x><y/></x>; } else yield  /x/g ;break; yield;break;  } } else return;}");
tryItOut("/*for..in*/for(let constructor in  /x/g ) let __iterator__;");
tryItOut("/*for..in*/L:for(let prototype =  /* Comment */prop & ('fafafa'.replace(/a/g, function(q) { return q; }) *=  /x/g .eval(true)) in prototype = 3 -= this !== <y><z/></y>.__noSuchMethod__) return <><x><y/></x></>;");
tryItOut("if(<><{__iterator__}></{__iterator__}></> !== ((-1))[<x><y/></x>]) { if (((*::* > ([z1] in this.valueOf(\"number\"))).unwatch(\"__noSuchMethod__\"))) {throw <><x><y/></x></>; }} else {(({a1:1})); }");
tryItOut("let (__noSuchMethod__ = (__count__-= /x/ .__parent__ = true), __iterator__ = (*::* .@*:: .2)) { return window; }");
tryItOut("L: break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ({prototype: (*.__count__), prototype getter: [1,2,3,4].slice })) {export *;yield; }");
tryItOut("(constructor);");
tryItOut("const __proto__, prop;\n<x><y/></x>\n");
tryItOut("/*for..in*/for((this.__defineSetter__(\"__proto__\", function ()*)) in ((\r({}).__lookupGetter__)((this.zzz.zzz))))<x><y/></x>");
tryItOut("/*for..in*/for(__parent__ in ((([1,2,3,4].slice).call)(<><x><y/></x></>))){{}return <x><y/></x>; }");
tryItOut("return;");
tryItOut("{switch((this.zzz.zzz)) { case 5: break; case <xxx {__count__}={3/0} />.(constructor): break; default:  } }");
tryItOut("if(constructor.prop getter= (new Function(\"let __parent__;\"))) let __noSuchMethod__;");
tryItOut("export get; const prototype;");
tryItOut("/*for..in*/for((\n(({__count__ getter: function(y) { yield y; export __iterator__;; yield y; }, __count__ getter: ({}).__lookupGetter__ __proto__  })))(this.hasOwnProperty(\"__parent__\")) in (((new Function(\"(<y><z/></y>);\")))()))/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in true) {export *;{} }");
tryItOut("for(let y in [5,6,7,8]) throw __parent__\n");
tryItOut("L: throw (function ([y]) { })();");
tryItOut("switch((<x><y/></x>)(<x><y/></x>)) { default: let __count__ = <x><y/></x>, __parent__ = <><x><y/></x></>;case 8: break; break; case (p={}, (p.z = true)()): yield \n<><x><y/></x></>;case 9: propbreak; case 6: if(constructor) { if ((__count__ = *::*)) yield @foo;} else {var __count__ = *, __parent__ = <y><z/></y>;continue M; }break; case 8:  }");
tryItOut("/*infloop*/while((#0=0x99 >>> true))");
tryItOut("if( #1#) {yield prop; }\nL:with(__parent__.__noSuchMethod__ = ((prototype =  \"\" )(((yield 1.3)))))while((null) && 0){(constructor);export *; }const __noSuchMethod__, prototype;");
tryItOut("let (function::__parent__ = [,,z1], __iterator__) { {} }");
tryItOut("L: {/a/gi }");
tryItOut(";");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __parent__ = new Error() in __parent__ = (prototype).watch(\"prop\", gc)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in null) {__proto__;continue L; } }");
tryItOut("if([15,16,17,18].sort(*::*, 1e-81)) throw (new <x><y/></x>({})); else {return; }");
tryItOut("/*for..in*/for(let [prop, __iterator__] = [] = __iterator__ in this) {while((prop) && 0){true; }this.zzz.zzz;switch( \"\" ) { case 8: break; default: return;case 9: break; break; break; case __count__: break; break; case 4: break; case 5: throw 1e+81;break;  } }");
tryItOut("\tswitch((({}).__lookupGetter__)) { case 7: undefined; const __proto__;/*for..in*/L:for(var function::prototype = [<><x><y/></x></> for (prototype in arguments)].@* in (-1)) \f{return; }yield //h\narguments < <x><y/></x>;break; default: continue ;var __parent__ = window;case undefined//h\n | <x><y/></x>: throw  '' ;return <><x><y/></x></>; }");
tryItOut("with({constructor: <x><y/></x>.(window) + 'fafafa'.replace(/a/g, function(q) { return q; })})break ;");
tryItOut("do {yield; } while((@foo) && 0);");
tryItOut("with({}) throw __iterator__;");
tryItOut("with([--undefined]){ } const prop;");
tryItOut("let(__noSuchMethod__ = eval(\"/*infloop*/do yield; while(window);\", (({}).__lookupGetter__).call(<x><y/></x>, ))) { for(let y in [5,6,7,8]) throw prototype;");
tryItOut("return; const __parent__;");
tryItOut("prototype = (__proto__);");
tryItOut("let (__count__, __noSuchMethod__ = <x><y/></x>) { export __noSuchMethod__; }");
tryItOut("do {break ;return; } while((*) && 0);");
tryItOut("with([11,12,13,14].filter)return;");
tryItOut("/*for..in*/for(var __parent__ in ((function [[, prop], ], ({ __proto__: ({ __proto__: ({ __proto__/*\n*/: prototype }) }) })/*) // { yield ((3/0)(<x/>) = (-1.__noSuchMethod__)++) != this.__defineGetter__(\"__proto__\", /a/gi) >= [__parent__].some(Math.sin)\t } )((@foo >= \t<x><y/></x>.hasOwnProperty(\"constructor\"))))){/*infloop*/while(new (({prop:  \"\"  }))())export *;let function::constructor setter: <x/>; }");
tryItOut("L:if(__iterator__) {export *;continue ; } else  if (this) gc() else {; }");
tryItOut("\n");
tryItOut("switch((this.__defineGetter__(\"__parent__\", function (constructor) { yield; } ))) { case <y><z/></y>: break; default: case 6: const __count__ = [,];break;  }");
tryItOut("\n");
tryItOut("/*infloop*/while(new (Math.sin)()){var constructor = __iterator__; }");
tryItOut("const __noSuchMethod__ = #1=[#1#], __count__; const __iterator__;");
tryItOut("{Function/*infloop*/for(-1; <x/>; <x><y/></x>) return <x><y/></x>; }");
tryItOut("/*for..in*/for(const prop = <><x><y/></x></> in <>case (__iterator__.__proto__ = true &  \"\" ): break; </>) continue ;");
tryItOut("/*infloop*/for(let prototype; [15,16,17,18].sort(new Function, __proto__)[eval(\"throw .2;\", ((function (prop, constructor)window).call).call(function ([y]) { }, *::*))]; (window.__lookupGetter__(\"__iterator__\") .. new (/a/gi).call(true, null, <y><z/></y>)(033 >> ({a1:1}).@*))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__.prototype in <><x><y/></x></>) {<!-- } }");
tryItOut("return prop.__iterator__;");
tryItOut("if(prototype = *::*) /*infloop*/L:do yield; while((<><x><y/></x></>.throw()) ? ( /x/ .propertyIsEnumerable(\"prototype\")) : new RegExp()); else L: {gc() }");
tryItOut("with({__count__: ((yield (<><x><y/></x></>.__parent__)))})yield;");
tryItOut("/*for..in*/for(let __parent__ in ((function () { yield (((<><x><y/>\f</x></>()).throw(-3/0)).__defineGetter__(\"__parent__\", (prop = <><x><y/></x></>))) } )(<><xxx {__iterator__}={return <y><z/></y>} /></>))){return;M:with({__iterator__: ((p={}, (p.z = throw #)()))})/*for..in*/for(var prototype = (<><x><y/></x></>.valueOf(\"number\")) in  /x/ ) yield <y><z/></y>; }");
tryItOut("/*for..in*/for(const __parent__(<y><z/></y>)\f in window) {export prop;return; }");
tryItOut("switch(\n<x/>) { default: ;export *;break;  }");
tryItOut("switch(this.eval(__iterator__.prop = null.delete)) { case 1: return [1,,]\nbreak M\nreturn 0\n/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in *) const __iterator__ = <x><y/></x>;break;  }");
tryItOut("/*infloop*/do {yield;gc() } while(__noSuchMethod__ = (<><x><y/></x></>.@*));");
tryItOut("with({prototype: false}){yield;yield *::*; }");
tryItOut("export *; const constructor;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("gc()");
tryItOut("do {export *; } while(((-0)) && 0)\n");
tryItOut("if((({a2:z2}))(<x><y/></x>) = ({function::constructor: <><x><y/></x></> })) {/*infloop*/L:do throw <x><y/></x>; while(<><x><y/></x></>);__proto__, prototype; } else  if (new eval()) {throw 1.3return @foo; } else 3/0;");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(constructor = * in #0=({__iterator__: window})) export __parent__;");
tryItOut("if(!().unwatch(\"__iterator__\")) {{\tthrow <><x><y/></x></>; } const prototype; }");
tryItOut("/*for..in*/for(var __count__ = (#1=[1e+81])\n in *::*) {/*infloop*/for(const ({ prototype: __proto__ }) = 5.0000000000000000000000.watch(\"__noSuchMethod__\", Math.pow); [<><x><y/></x></>].filter((1e+81).__defineSetter__); arguments) {__count__export *; } }");
tryItOut("yield *;");
tryItOut("if(~__iterator__.(<><x><y/></x></>)) let __parent__, prototype = __parent__; else  if (* + window .@x:: 1.3) ;");
tryItOut("return;");
tryItOut("return break ;");
tryItOut("with(__proto__ = 1e81)__noSuchMethod__, prop;\nconst __count__, __count__;\n");
tryItOut("with({{let (__count__) { /*infloop*/L:for(var [, __proto__, ({ __parent__: ({ prototype: __proto__ }) }), __count__, ] = __count__ *= ((__proto__ = false) >> (__count__ = <x><y/></x>)); 1e4 *= this != __parent__.(<y><z/></y>); __proto__ = undefined %  /* Comment */<x><y/></x>) {function(id) { return id };let (__count__ = <><x><y/></x></>) { {({}).__lookupGetter__ } } } } }: constructor.__proto__ = <><xxx {let}={(<x><y/></x>.yoyo( /x/ ))} /></>}){yield <><x><y/></x></>; }");
tryItOut("__count__");
tryItOut("with({constructor: (p={}, (p.z =  '' )())})/*for..in*/for(var __noSuchMethod__ in ((new Function)(Function)))/*for..in*/for(const [prop, __noSuchMethod__] = this in <x/>) {return 4.; }");
tryItOut("{var yield; }");
tryItOut("/*for..in*/for(var get.constructor in ((({}).__lookupGetter__)(this)))export __parent__;");
tryItOut("M:with({getter: ([1,2,3,4].map).call(this, undefined)}){return;* }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) (prototype = false)");
tryItOut("export //h\n__count__;");
tryItOut("if((( \"\" )(*, ({}))).watch(\"constructor\", [* if ()])) { if (__iterator__ = <y><z/></y>) { }} else return;");
tryItOut("let(__proto__, ({ prop: ({ __iterator__: ({ prop: ({ __iterator__: __count__ }), __proto__: [] }), __proto__: ({ prop: constructor, __count__: ({ prototype: constructor, prop: constructor }) }) }) }) = [undefined].filter(function  prop (constructor, constructor) { return  /x/  } )) { return;");
tryItOut("{return; }");
tryItOut("L: {yield; }");
tryItOut("/*infloop*/M:for(prop = void ([true]); (new Date()) ? typeof * : void *::*;  /* Comment */arguments.propertyIsEnumerable(\"__noSuchMethod__\")) {/*infloop*/M:for(var ({ __parent__: ({ prop: ({ __proto__: __parent__ }) }), <><x><y/></x></> ? arguments : <x><y/></x>: __parent__ }) = prop = *; (((<x><y/></x>).watch).call( /x/g , ) in  /x/ ); (<x><y/></x>.unwatch(\"__iterator__\") .@x:: \n*)) {let __iterator__;true; } }");
tryItOut("/*infloop*/for(const __iterator__ = @foo; <><x><y/></x></>; __count__) {gc(); }");
tryItOut("L: {var prop = undefined, __proto__ = <x/>;yield @foo; }");
tryItOut(";let __count__ = [z1,,], __count__ = null;");
tryItOut("/*for..in*/for(let [constructor, prototype] = prototype in undefined) throw true;");
tryItOut("while((({})) && 0)\nthrow (-0);");
tryItOut("{return;return; }");
tryItOut("export *;\nswitch(<><x><y/></x></>) { default: break; case -0: case __noSuchMethod__: break; case *::*: break; {}break;  }\nL:switch(<bbb xmlns=\"__count__\">yyy</bbb>.(__iterator__.prototype))\f { case 3: return <><x><y/></x></>;let __proto__ = null;break; case -({a1:1}): const __proto__, __proto__;break; case <x><y/></x> < <><x><y/></x></>: yield;break; return @foo;break; case 8:  }");
tryItOut("while(([15,16,17,18].map(let (prop =  \"\" , __parent__ = 1e4) 0, (this.__defineSetter__(\"constructor\", *)))) && 0){gc()/*for..in*/for([prop, constructor] = (prop.(#3={a:#3#})) in <><x><y/></x></>) throw <x><y/></x>; }");
tryItOut("{let (__noSuchMethod__, prototype = <x/>) { /*infloop*/do {var __proto__, __count__;let constructor =  '' ; } while(0); } }");
tryItOut("/*infloop*/for(__count__.(<><x><y/></x></>.isPrototypeOf(<x><y/></x>)); constructor = ({ function::__parent__: ({ prototype: ({ __iterator__: [, , ] }) }), __parent__: __parent__ }); (let (__proto__)  '' )) throw __iterator__;");
tryItOut("{{continue M; } }");
tryItOut("/*infloop*/do ; while((constructor.__count__));");
tryItOut("yield\n");
tryItOut("/*infloop*/for(var prototype; constructor ? 1e+81 : undefined; (this.__defineGetter__(\"<x/>\", [1,2,3,4].map))) {gc()return; } const __count__;");
tryItOut("/*infloop*/M:for( '' ; ({ set __count__ __proto__ (prop, __noSuchMethod__)this });  '' .__lookupSetter__(\"prop\")) {gc() }");
tryItOut("let (prototype = (Math.pow).apply, prop = ()) { __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(var R in  '' ) {let __parent__;export *; }");
tryItOut("with(-1)throw 1e4;\ngc()\n");
tryItOut("with(__count__.__noSuchMethod__ = (void <><x><y/></x></>) = 'fafafa'.replace(/a/g, #3={a:#3#})){let constructor;constructor }");
tryItOut("L: return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in 3) {\ffunction (__count__) { yield 5.0000000000000000000000 }  }");
tryItOut("try { return; } catch(prop if {} && [,,]) { throw StopIteration; } catch(constructor) { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(let function::__count__ = (( /x/g ).__defineSetter__).call(\t(<x><y/></x> ..  \"\" ), constructor = __iterator__, (function ([y]) { })())-- in this.__defineGetter__(\"__noSuchMethod__\", new Function)) export prop;");
tryItOut("try { Math.pow } catch(__noSuchMethod__ if (function(){continue L;})()) { (<><x><y/></x></>); } catch(constructor if  /x/g ) { return; } catch(__count__) { {} } finally { export __iterator__; } ");
tryItOut("with([15,16,17,18].some(({}).__lookupGetter__, __count__ = null)){/*infloop*/for(*::*;  \"\" ;  \"\" ) {{} }prop = [,,z1]; }");
tryItOut("if(({__proto__ setter: Math.sin })) { if (__noSuchMethod__) this.zzz.zzz;} else {[1,2,3,4].slice }");
tryItOut("if(({ __noSuchMethod__: constructor, __iterator__: __parent__ }) = []) { if ((<x><y/></x> -= <y><z/></y>).@*) with({__count__: true}) else {return;{break L;; } }}");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(var <!--yy-->; ([(eval(\"<x><y/></x>\", prop))]); false.throw(<x><y/></x>) % ()) <><x><y/></x></>\n");
tryItOut("/*for..in*/M:for(const __parent__ = <x><y/></x>.isPrototypeOf(<x><y/></x>) in window) {<bbb xmlns:ccc=\"undefined\"><ccc:eee></ccc:eee></bbb> }");
tryItOut("export __parent__;\n__noSuchMethod__;\n");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in (((constructor).apply)(<x><y/></x>))){var \tprototype = <x><y/></x>, constructor = *; }\n/*for..in*/L:for(constructor = ({})++ in [,]) {yield;(__proto__); }");
tryItOut("/*infloop*/for(const ({ __proto__: ({ __iterator__: [({ prototype: prototype, constructor: __noSuchMethod__ = <y><z/></y>, <x/> }), ({ __parent__: __noSuchMethod__, prop: prop }), __parent__, ] }) }) = #1=[#1#]; (#0=({\fprototype:  \"\"  <<= let (constructor =  '' , prop)  /x/g })); eval(\"export *;\", 1.3)) yield window;");
tryItOut("if(constructor =  /* Comment */yield undefined) { if (__iterator__ = -0 %= (uneval(0)) >>= (__parent__ = *)) {;const  { return [,] }  = 1e4,  /x/  = false; }} else L:if(<><x><y/></x></>) {throw <x><y/></x>;export __proto__; } else  if (window) <y><z/></y>; else gc()");
tryItOut("(undefined)");
tryItOut("while((<x/>) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <>\f<x><y/>\t</x></>) {yield <><x><y/></x></>;return <x><y/></x>; }");
tryItOut("/*for..in*/for(var [prototype, prop] = ({ get __iterator__() { return * } , constructor: 1e+81 }) in <><x><y/></x></>) ({}).__lookupGetter__ const __count__;\nexport __parent__;\n");
tryItOut("{}");
tryItOut("if(constructor) {*;let prototype, prototype; }");
tryItOut("while((@foo) && 0)L:if(<x/>) { if (-3/0) yield;} else {continue L; }");
tryItOut("break ;");
tryItOut("while((<><x><y/></x></>) && 0){yield prop; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("L: ;");
tryItOut("with({__iterator__: __iterator__ = undefined})new Function");
tryItOut("with(function(q) { return q; }(0.1, #1#).unwatch(\"__proto__\") !== (window !=  '' ))const <x><y/></x>;");
tryItOut("if(__parent__ getter: ((( '' )()) , this <= constructor.unwatch(\"__count__\")) = prop = constructor) {/*infloop*/for(prototype; #2=true; <x/>) {let __iterator__, constructor = this;const <><x><y/></x></>, prototype; } } else  if ((void (-0))) {export *;(null);L:if(()) export __parent__; else  if (eval(\"<x/>\", <><x><y/></x></>)) {return; } else continue ; } else {/*infloop*/for(__proto__; .((<x/>.__defineSetter__(\"constructor\", ('haha'.split).apply))); (prototype.(this))) ; }");
tryItOut("(5.0000000000000000000000)(this) = prototype;");
tryItOut("return #2=[(new Exception())];");
tryItOut("/*for..in*/M:for(prototype in (new <ccc:ddd></ccc:ddd>()).prop) if([0.1].map(Function)) constructor, constructor;\f");
tryItOut("break ");
tryItOut("<bbb xmlns=\"(__parent__) = 'fafafa'.replace(/a/g, [1,2,3,4].map)\"><!--yy--><\r/bbb>");
tryItOut("if([,]) {return;gc() } else  if (<y><z/></y>) <x><y/></x>; else {({a2:z2}); }\n");
tryItOut("/*infloop*/M:do break ; while(({__parent__: null}));");
tryItOut("with({prototype: prototype.__count__ = \n[[1,,].propertyIsEnumerable(\"__count__\") if (false)]}){export *\n }");
tryItOut("{}");
tryItOut("/*for..in*/L:for(const [<x><y/></x>, __count__] =  /x/g  in (function ([y]) { })()) <x/>\n");
tryItOut("constructor");
tryItOut("with({}) { constructor = __iterator__; } ");
tryItOut("with( /* Comment */<x><y/></x>)var __parent__ = function::__proto__;");
tryItOut("__iterator__");
tryItOut("if(3.141592653589793 == ((new Exception(<y><z/></y>)\f)(<x><y/></x>, *::*))) {__count__ = *, constructor = <><x><y/></x></>;const prototype = <x/>; } else  if ( \"\"  &= 'fafafa'.replace(/a/g, gc)) throw window; else ;");
tryItOut("try { yield (({prop:  \"\"  })); } finally { throw StopIteration; } ");
tryItOut("if((constructor = __noSuchMethod__ = new /a/gi(__proto__ =  '' , *))) { if (\f+([<y><z/></y>.__lookupGetter__(\"constructor\") for (prototype in -3/0) if (*)] = ({prop: true }))[('haha'.split)()]) if(false) return  \"\" ;} else return window;");
tryItOut("/*infloop*/for(const __parent__ = +1.2e3;  /x/ .__defineGetter__(\"prop\", gc)(((function () { return window } )(window))); \t[15,16,17,18].filter(Math.pow, [z1])) export __iterator__;");
tryItOut("break M\n");
tryItOut("/*for..in*/for(__proto__ in (undefined.hasOwnProperty(\"__iterator__\"))) ;");
tryItOut("/*for..in*/for(var __count__ = __noSuchMethod__ = new eval(\" /x/ \", @foo)((this.__defineGetter__(\"prototype\", [1,2,3,4].map))) in ((constructor = __iterator__.throw(<x><y/></x>).__count__).valueOf(\"number\"))) {const prototype, yield; }");
tryItOut("if((/a/gi)) (window); else __count__;");
tryItOut("/*infloop*/for([__count__, , , __proto__, prop] = ('fafafa'.replace(/a/g, function  __count__ (__proto__) { yield; } ));  \"\" ; <x><y/></x>) return;");
tryItOut("L:if((function () {  } ).call(window, (<bbb xmlns=\"(__count__.constructor = *)\"\f><!--yy--></bbb>.isPrototypeOf(prototype.__parent__)))) { if ([11,12,13,14].sort) {{break ;continue M; } }} else function (__iterator__) { yield window } continue ;");
tryItOut("let(prop) ((function(){})());");
tryItOut("/*infloop*/for(var __noSuchMethod__ = __iterator__.__noSuchMethod__ getter= ({}).__lookupGetter__; (__parent__ = 1.3); new 'haha'.split()) {export *\t;\nyield;\n }");
tryItOut("do {if(prototype.*) { if ((<x><y/></x>.(*))) {throw <x><y/></x>;const __noSuchMethod__ = ({a2:z2}); } else {export *;(<x/>); }} } while(([*].map((new Function(\"({}).hasOwnProperty\"))).__defineGetter__(\"prop\", <><x><y/></x></>)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("break M\n");
tryItOut("if([__iterator__].filter(({}).__lookupGetter__)) __proto__ else  if (__noSuchMethod__) var __parent__ = <x><y/></x>, __count__; else {export *;; }");
tryItOut("with({prototype: __proto__.@foo\f}){throw  '' ; }");
tryItOut("with((<y><z/></y> >>=  \"\" ).watch(\"prop\", return @foo))/*infloop*/for(const __noSuchMethod__ = (#3={a:#3#}.unwatch(\"__noSuchMethod__\")); [11,12,13,14].sort & *; prop.prototype) return *::*;");
tryItOut("return ({ set __proto__(constructor, __noSuchMethod__) { yield #1=[#1#] } ,  get __iterator__()prop });");
