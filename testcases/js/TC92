
tryItOut("switch(<y><z/></y>.eval(<x><y/></x>)) { case 1: yield;break; __proto__,  = *::*;default: /*for..in*/for(__count__ in ((/a/gi)((this.zzz.zzz))))throw [];break;  }");
tryItOut("if(new [1,2,3,4].slice()) { if (prototype = @foo[(~@foo)]) {return; } else }\nwith({prop: window}){export *;\r }\n");
tryItOut("/*for..in*/for(var prop = prototype instanceof window in true) {yield; }");
tryItOut("yield __parent__.__count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __proto__.__count__ = (<y><z/></y>.valueOf(\"number\"))) with({}) { try { throw <x><y/></x>; } catch(__iterator__) { prototype = <y><z/></y> } finally { ; }  } ");
tryItOut("{L:  { {} } __count__ }");
tryItOut("with({}) { break ; } ");
tryItOut("/*for..in*/for(const __noSuchMethod__ if (033)['__proto__'] in true(<x/>,  /x/g )) continue M;");
tryItOut("if(((<x/>).watch).call(__count__, <x><y/></x>,  /x/ ).__lookupGetter__(\"__proto__\")) {export prop; }");
tryItOut("do {{{} } } while((eval(\"\", <><x><y/></x></>( '' ))) && 0);");
tryItOut("/*for..in*/M:for(var [constructor, __iterator__] = ((uneval([<x/>]))) in __noSuchMethod__) {export *; }");
tryItOut("gc()");
tryItOut("L:switch(-eval(\"\", (\n '' ))) { case new (Function)(__iterator__ =  /x/  << <><x><y/></x></>): /*for..in*/L:for(var constructor in ((/a/gi)(__count__)))let prop; }");
tryItOut("new Functionthrow prop;");
tryItOut("if((((__noSuchMethod__ - (-1)) if ((*);)))) { if ([15,16,17,18].sort([1,2,3,4].map, undefined)) {export *;{} }} else export *;");
tryItOut("L: export *; } const __parent__;");
tryItOut("/*infloop*/while(\n\n<><x><y/></x></>)with(<x><y/></x>)window;");
tryItOut("function(q) { return q; }");
tryItOut("let(__iterator__: --<><x><y/></x></>) { for(let y in []);");
tryItOut("__parent__");
tryItOut("L: throw *::*;");
tryItOut("do gc() while(( '' ++) && 0);");
tryItOut("/*infloop*/L:for(({ constructor: [({ __parent__: ({ function::__count__: constructor, __iterator__: prop }), __iterator__: [__count__, __iterator__, Math.pow, , ] }), ({ prop: __count__, __iterator__\n: ({ __proto__: __proto__, __noSuchMethod__: __noSuchMethod__ }) }), , , prop], __proto__: ({ __proto__: ({ __iterator__: ({ prop: prop }) }), __proto__: ({ __noSuchMethod__: ({ __noSuchMethod__: __proto__, function::prototype: __count__ }) }) }) }) = eval(\"((@foo).__defineSetter__)(3/0) .@x:: window\", ((__parent__.throw(<><x><y/></x></>)) for (constructor.__proto__ in <><x><y/></x></>) for each (__noSuchMethod__ in <x/>))); prop; (void constructor)) with({__parent__: <x><y/></x>})<y><z/></y>;/*infloop*/M:while(null)let __parent__ = <><x><y/></x></>, __proto__ = <x/>;");
tryItOut("with({prop: window}){/*infloop*/for( \"\" ; <x/>; [1]) {let __noSuchMethod__ = null, __proto__;yield; }\nreturn;\n{} }");
tryItOut("do const prop, prototype = [,,z1]; while(((eval(\"const __iterator__, constructor;\", <x><y/></x>))) && 0);");
tryItOut("switch(__proto__) { case  \"\" : let __proto__: #1=[#1#] = -1; }");
tryItOut("/*for..in*/for(const [constructor, __parent__] = null = [1,,] in ({__proto__: ({a2:z2}).__lookupGetter__(\"__proto__\")})) /*for..in*/for(var prototype in (([[]])(__noSuchMethod__|=__proto__)))<><x><y/></x></>;");
tryItOut("if(true) { } else  if ((<y><z/></y> for each (__iterator__ in null))) {(<><x><y/></x></>); }");
tryItOut("/*for..in*/L:for([, , ] in (p={}, (p.z = this)()).__lookupSetter__(\"__parent__\")) __parent__ =  \"\" ;let __noSuchMethod__ = <><x><y/></x></>\nlet __proto__, prop = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in function ([y]) { }) {if(window) {throw <x><y/> prototype</x/*>; \"\" ; } else  if (0/0) return; else  /x/ ; }");
tryItOut("yield;");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", false)) ; else  if ((--1.3)) export *; else {/*infloop*/for((__iterator__.(<x><y/></>/*)); this.__defineGetter__(\"__proto__\", Math.pow); [1].watch(\"__proto__\", function(y) { yield y; export *;; yield y; })) { } }");
tryItOut("/*infloop*/for(let = [[1]].__defineGetter__(\"prop\", function  prototype ()false + <><x><y/></x></>); __proto__ = (<><x><y/></x></> >> <x><y/></x>).__defineGetter__(\"__count__\", function ()[z1,,])\f; __parent__.__count__ = (this.__defineGetter__(\"constructor\", /a/gi))) return *\n");
tryItOut("/*for..in*/for(const *.__defineSetter__(\"__noSuchMethod__\", eval).__lookupSetter__(\"__iterator__\") in ((Math.pow)(constructor =  '' )))return;");
tryItOut("M:with(--[11,12,13,14].sort){/*for..in*//* nogeckoex bug 349964 */M: for  each((__parent__) in this) <y><z/></y> }");
tryItOut("with({}) ");
tryItOut("throw <x><y/></x>;return;");
tryItOut("while((__count__-=[z1]) && 0)throw <y><z/></y>;");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("{export prop;export *; }");
tryItOut("{var __proto__ = <>\t<x><y/></x></>, __parent__ = prototype; }");
tryItOut("/*for..in*/for(constructor in ((new (__parent__ = __proto__)(Exception(window)))(__parent__ == <x><y/></x>))){{} }");
tryItOut("/*infloop*/for(var __parent__; [__proto__] = (__proto__ = <><x><y/></x></>); (yield 0)) {gc() }");
tryItOut("L:with({__proto__: __count__.__iterator__ == this}){yield; }");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = (0x99.valueOf(\"number\")) .@ __count__ =  /* Comment */*::*) { prototype = prop;");
tryItOut("/*for..in*/for(var constructor = @foo != constructor in __parent__ = 033) {new Functionwith({prop: window}){__noSuchMethod__ } }");
tryItOut("/*for..in*/L:for(__count__ = <y><z/></y> < this in (1e4 if (<><x><y/></x></>))) export *;");
tryItOut("constructor = __iterator__;");
tryItOut("yield [[]];");
tryItOut("do {yield;export constructor\n } while((\n__parent__) && 0);");
tryItOut("if(__noSuchMethod__) { if ((({prop: [[1]] % <><x><y/></x></>, prop getter: function  __count__ (__parent__) { return; }  }))) continue ; else {export prop; }}");
tryItOut("/*infloop*/for(const __count__; delete __iterator__.__parent__ getter= ({}).__lookupGetter__; (((yield __iterator__).hasOwnProperty(\"prop\"))\n)) {/*for..in*/for(const [prop, __proto__] = \t in <><x><y/></x></>) var __iterator__, __proto__;L:if((<x><y/></x>.(0))) { if (eval(\"function  __proto__ (constructor) { return 0x99 } \", <y><z/></y>)) {throw *; } else {return;yield  '' ; }} }");
tryItOut("try { export prototype; } catch(constructor) { constructor = __proto__; } ");
tryItOut("/*infloop*/for((new [1](<><x><y/></x></>, <><x><y/></x></>)); (prototype = <x/>); (Function)()) {/*infloop*/for(var constructor; window; <x/> in #3={a:#3#}) {-3/0;__count__; } }");
tryItOut("return;");
tryItOut("M:if(([15,16,17,18].filter(this, ((-1).unwatch(\"__proto__\"))))) { if ('fafafa'.replace(/a/g, (<x><y/></x>).watch)) {(.2);yield; }} else {return false; }");
tryItOut("with({}) { let(__count__ = null--) ((function(){var __noSuchMethod__;})()); } ");
tryItOut("Math.pow\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for //h\n each(var prop === window in *.__lookupSetter__(\"__iterator__\") && yield false) {do yield; while((new (function  __parent__ (yield, __iterator__) { const __noSuchMethod__ =  '' ; } )()) && 0); }");
tryItOut("/*for..in*/for(let [prototype, x::__iterator__] = [11,12,13,14].some.@foo in ( /* Comment */[,,z1] < ((new Function(\"(yyy);\"))).call(this, ))) {throw new <x/>((-1), (-0));[__parent__, __noSuchMethod__, __proto__, let] =  /x/g .__count__; }");
tryItOut("/*for..in*/for(const x::prototype in ((<x/>.@* %  /* Comment */true = undefined)((getter.__count__ getter= gc)))){(((prop.hasOwnProperty(\"__iterator__\")).__lookupSetter__(\"__parent__\"))); }");
tryItOut("<x><y/></x>");
tryItOut("/*infloop*/for(; *::*.__lookupGetter__(\"constructor\");  \"\"  && *::*) {break L; }");
tryItOut(" /x/ .__lookupSetter__(\"__parent__\"), undefined");
tryItOut("/*for..in*/for(const constructor in (#2=({prototype//h\n: (prop+=[11,12,13,14].some)}))) /*infloop*/for( /x/g  %= <x><y/></x>; *::* + __parent__; (__parent__.__parent__ = window)) {continue ; }");
tryItOut("do export __iterator__; while(((constructor.__iterator__ setter= #1=[#1#])) && 0);");
tryItOut("/*infloop*/M:for(var __iterator__; this; false) (false)\nfunction (<x/>) { export *; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in [([1e81].sort(function(y) { yield y; const __noSuchMethod__ = true, prototype = true;; yield y; }))<x><y/></x>]) yield;");
tryItOut("const __parent__ = <x/>; const __count__;");
tryItOut("let ([, __noSuchMethod__, ({ __iterator__: ({ __proto__: prototype }), __noSuchMethod__: ({ __parent__: constructor }) }), ] = (__iterator__ = ({ __proto__: __parent__, prototype: __parent__ })), __iterator__ = @foo) { export *; }");
tryItOut("{continue L; }");
tryItOut("yield;");
tryItOut("{continue ;/*infloop*/for(prototype = [,];  /x/g ; #1=[#1#]) yield 1e4; }");
tryItOut("/*infloop*/for(\f(__iterator__+=this); (<><x><y/></x></>)(<>const __count__;</>, -0); <x><y/></x> ? <><x><y/></x></> : 1.2e3) { { yield * } ; }");
tryItOut("L:if(new <><x><y/></x></>()) {throw <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__(<x><y/></x><x><y/></x><x><y/></x>) in #2= /x/g ) { }");
tryItOut("/*infloop*/L:for(({ constructor: __noSuchMethod__, __count__/*\n*/: __parent__ }) = (*::*.*); <x/> += false;  /x/  ^ function::__count__) {gc() }");
tryItOut("/*for..in*/for(let prototype in ((function  __count__ (({ constructor: ({ __count__: __noSuchMethod__ }), __proto__: __proto__ }), __proto__) { return; } )([]))){const __count__ = {};yield; }");
tryItOut("{export __noSuchMethod__;{} }");
tryItOut("/*infloop*/for(var [({ __noSuchMethod__: ({ __count__: constructor }), prop: ({ __iterator__: __parent__, __count__: [] }) }), ] = return;; {if(constructor = *::*.(<y><z/></y>)) ( \"\" ); else yield *; }; undefined ..  '' .isPrototypeOf((this.eval(*)).__defineGetter__(\"function::__noSuchMethod__\", function(q) { return q; }))) {yield; }");
tryItOut("switch(function  __proto__ (({ __iterator__: ({ __iterator__: __iterator__ }), function::__parent__: [({ __parent__: [__count__, __noSuchMethod__, , __count__] })] }), prop) { yield <y><z/></y> } ()) { case function ([y]) { }:  }");
tryItOut("M:/*\n*/if((let (__noSuchMethod__ = <x/>, constructor =  /x/g ) (null.__lookupSetter__(\"get\")))) /*for..in*/for(__parent__ = !<> for (((({ __noSuchMethod__: constructor }) = [, __parent__, , __noSuchMethod__]))(\r(uneval(1e-81))) in __count__) for each (__proto__ in @foo) for each (__iterator__ in  /x/ )</> in \n /x/ ) {const function::__proto__; }");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__ = prototype;");
tryItOut("let (({ prototype: ({ __iterator__: prototype }), prop: ({ prop: ({ __count__: __noSuchMethod__, __iterator__: __proto__ }) }) })) { with({}) { prop = <x/> }  }");
tryItOut("if( /x/ ) { if ([11,12,13,14].filter) yield; else {; }}");
tryItOut("M:if((this.__defineSetter__(\"__count__\", <y><z/></y>)) <=  /* Comment */null) /*infloop*/M:for(( \"\"  % <y><z/></y>.@*); ((prop = __noSuchMethod__) = (false)); [] = eval(\"\", prototype)) {{export *;gc() } } else /*for..in*/L:for(const prototype = prototype in  '' ) return this;");
tryItOut("/*infloop*/for((uneval(new (#1=[#1#])(__noSuchMethod__) <= undefined || function ([y]) { })); (-1); (__iterator__ = <y><z/></y>) == __noSuchMethod__ = null) /*for..in*/for(let [constructor, __noSuchMethod__] = __parent__ in (p={}, (p.z = ())())) if((<y><z/></y>.@foo)) { if (prop = <x><y/></x>) const __parent__;} else {; }\nexport __count__;");
tryItOut("M:if(__parent__.__noSuchMethod__ = <x/>) {return  /x/g ; } else  if (this) gc() else {throw  /x/g ; }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.__lookupSetter__(\"__count__\") in \f /* Comment */*) throw <><x><y/></x></>; while(([11,12,13,14].some.constructor) && 0);");
tryItOut("if(((yield [window for each (prop in 5.0000000000000000000000)]))) {{}; } else  if (__count__) {return;; } else {yield;1.2e3 }");
tryItOut("if(({__iterator__: undefined})) { if ((prop)) {return <x/>;<><x><y/></x></> }} else {(-1 << <x/>)) { if <><x><y/></x></> != *::*) {export __noSuchMethod__;__count__; }} else {continue M; }continue M; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; prototype; {}) {true; }");
tryItOut("return;");
tryItOut("/*for..in*/for(let __proto__ in ((({}).__lookupGetter__)([3 for (false.prop in __iterator__ = 5.0000000000000000000000) if ( /x/g )\t])))yield;");
tryItOut("switch([z1].propertyIsEnumerable(\"prototype\")) { default: return this.__lookupGetter__(\"prop\");break; case window: break; case 8: M:if(throw @foo) return; else  if (({a1:1})) false;break; case <x><y/></x> ? <>return 0x99;</> : <x><y/></x>: break; case 0: break; ( /x/g );case 6: ;\n(window);\ncase <x><y/></x>: /*infloop*/for(#1#; <><x><y/></x></>; @foo) {export __count__;let __noSuchMethod__, __parent__; }break;  }");
tryItOut("M:if(window) yield; else  if (window) {prototype, prop = x::case <><x><y/></x></>: default: break; case 5: export *;; }");
tryItOut("/*for..in*/for(var __parent__.prototype in <x/>) {const prototype = 033, prop; }");
tryItOut("{(<x><y/></x>);const prop = this; }");
tryItOut("while((__proto__) && 0)L: {export *;return undefined; }");
tryItOut("with({__count__: <y><z/></y> >= 3})yield;");
tryItOut("/*for..in*/for(var __proto__ = <y><z/></y> in -1) <x/>;");
tryItOut("L: {{ }<><x><y/></x></> }");
tryItOut("if(undefined) { if (#1#) gc()} else throw 0;");
tryItOut("let (__proto__ = (new Function(__proto__.__noSuchMethod__)), __noSuchMethod__) { /*for..in*/for([__proto__\f, __parent__] = <x/> in @foo) return; }");
tryItOut("with({}) { __noSuchMethod__ = __iterator__; } ");
tryItOut("/*infloop*/do {/*infloop*/for(let prop; <><>(yield <><x><y/></x></>)<//*\n*/></>; ( /x/ ++)) /*infloop*/for(({ prototype: __count__, prototype: __noSuchMethod__ }) = (this >> <y><z/></y>); new (null)(<x><y/></x>, <x><y/></x>); --[1]) {return __iterator__; } } while((p={}, (p.z = ({__parent__ setter: (new Function(\" /x/g \")) }))()) < [prototype].map(window) .. ({a2:z2}));");
tryItOut("/*for..in*/for((this.__defineGetter__(\"__iterator__\", 'haha'.split))(__count__ = *) in ((<y><z/></y>)(({ get __parent__(*::*)() { yield ({ prop: __count__, each: __noSuchMethod__ }) = (-3/0.unwatch(\"__parent__\")) }  }))))return prototype;");
tryItOut("try { return <y><z/></y>; } catch(function::each if (function(){__parent__;})()) { gc() } catch(prototype) { const constructor, __iterator__ = undefined; } finally { ; } ");
tryItOut("while(((window >=  \"\" ) += ( /x/ .__lookupSetter__(\"__noSuchMethod__\")) * prototype.constructor) && 0)L: {this }");
tryItOut("/*for..in*/for(let __iterator__ in (((new Function(\"export *;\")))(__count__.constructor getter= (1 for (x in [])))))break ;");
tryItOut("/*for..in*/L:for(__iterator__ in (((function(y) { yield y; (1 for (x in [])); yield y; }).apply)((__noSuchMethod__ = -1)))){<y><z/></y>;(*::*); } const __noSuchMethod__;");
tryItOut("/*infloop*/M:for((uneval(false)); this @ function ([y]) { }; void <y><z/></y>) {export *; }");
tryItOut("return;");
tryItOut("yield * , __count__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in __noSuchMethod__ = -1) {{}\nwith({__count__: try { const constructor, __parent__; } catch(prop) { export *; } finally { yield __proto__; } }){/a/gi(this); } }");
tryItOut("/*for..in*/L:for(__count__ in \t /x/ ) return __parent__;");
tryItOut("/*infloop*/for(const ((__count__ = <x><y/></x>, constructor.@*))(((yield *))) = <bbb xmlns:ccc=\"true.__defineSetter__(\"__iterator__\", (new Function(\"throw <y><z/></y>;\")))\"><ccc:eee></ccc:eee></bbb>; [].@foo; 0x99.eval(1.3)) (1 for (x in []))");
tryItOut("/*infloop*/do {} while((+__iterator__));");
tryItOut("/*infloop*/while(null)throw 5.0000000000000000000000;\nyield ({});\n");
tryItOut("with({}) { const __parent__ =  '' ; } ");
tryItOut("/*infloop*/M:do (<x><y/></x>) while(new window().isPrototypeOf([] = #2=[ \"\" ]));");
tryItOut("return (prop = <><x><y/></x></>);");
tryItOut("__iterator__, __proto__;");
tryItOut("with([, ({ __count__: __proto__ }), ] = <><bbb xmlns=\"1e81\"><!--yy--></bbb></>)var __iterator__ =  /x/g , __iterator__\nyield this.zzz.zzz;");
tryItOut("with(#0=[<x/> -=  /x/ ])/*infloop*/while(prototype:  /x/g .__count__){return; }");
tryItOut("if((( \"\"  if (<y><z/></y>)).__lookupSetter__(\"__proto__\")) = [11,12,13,14].sort) /a/gi else  if (({ __iterator__: ({ prototype: __proto__, __parent__: ({ __parent__: __noSuchMethod__ }) }) }) = (function (({ __noSuchMethod__: __noSuchMethod__ })) { return Math.sin(@foo) } )) var ({}).hasOwnProperty = case 6: default: case 8: break; throw <y><z/></y>;case <x><y/></x>: {}case 5: case 8: gc()break; case 8: /a/gi, __count__\n/*for..in*/for(__count__ =  /x/g  in __parent__) ;");
tryItOut("continue ");
tryItOut("if(( /x/ .@*.throw(this).unwatch(\"constructor\"))) { if (*::*) {gc()while(( /x/ ) && 0){var constructor, prototype = <x><y/></x>;[z1]; } }} else {yield; }");
tryItOut("let ({yield; }) { gc() }");
tryItOut("return;");
tryItOut("return /*\n*/constructor.__parent__;");
tryItOut("if((eval(\"continue ;\", constructor.prototype = <y><z/></y>))) {{try { {} } catch(__count__ if (function(){export *;})()) { export __parent__; } if((-1) <<= __noSuchMethod__) {yield;let prototype, __proto__ = this; } else  if (4.) return; else {{} } }return null; } else  if (undefined) do export __noSuchMethod__; while((*::*.valueOf(\"number\")) && 0); else /*infloop*/for(var prototype = *; true; ({a2:z2})) return prototype = <><x><y/></x></>;");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = ((p={}, (p.z = __proto__)())) in  /x/g  -= __parent__) ( '' .__count__);");
tryItOut("if(eval(\"(<x><y/></x>).watch\", (__iterator__).*)) {Math.pow const __iterator__; } else  if (({ __count__: ({ __proto__: __proto__ }) }) = <><x><y/></x></> <= \f \"\" .yoyo(false)) {yield; } else case <><x><y/></x></>: break ;break; yield <><x><y/></x></>;case <y><z/></y>: break; return 1.2e3;break; case <x><y/></x>: break; ( /x/ );;break; case *: break; case 3: export *;break; default: {}break; ");
tryItOut("return __parent__ =  \"\" .__lookupSetter__(\"prototype\");");
tryItOut("if((window @ \r<x/>)) prototype, constructor; else  if (().eval(( /* Comment */__parent__))) ;");
tryItOut("if(--yield <x><y/></x>) <x><y/></x>; else  if (this.zzz.zzz) {M:if(*::*) { if (constructor) return; else {gc() }} }");
tryItOut("while((<x/>) && 0){{<x/>;throw  /x/ ; }/*infloop*/for(((<><x><y/></x></>)[null]) - [#3={a:#3#}]; constructor.constructor; this.__defineSetter__(\"__proto__\", (new Function(\"(1 for (x in []))\"))).__parent__ = yield function ([y]) { } <= (this.__defineSetter__(\f\"__noSuchMethod__\", prototype))) {switch(this) { case 5: let 1e+81 = <x/>, ; }{export *; } } }");
tryItOut("L:with({constructor: ({__noSuchMethod__: gc() ? prototype = <x><y/></x> : [ /* Comment */this].map(Math.sin)})})yield");
tryItOut("with({__noSuchMethod__: ({__iterator__ getter: Function, __iterator__: window })})");
tryItOut("while((@foo) && 0)yield;");
tryItOut("if(({constructor:  /x/ , __count__: 0x99 })) if( /x/ ) 5.0000000000000000000000; else ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><x><y/></x></>) var prop = null, __parent__ = this;");
tryItOut("return ;\nconst __count__ =  \"\" ;\n");
tryItOut("return;");
tryItOut("with((__count__.__count__ setter= Function)((p={}, (p.z = <bbb xmlns:ccc=\"(yield  \"\" )\"><ccc:eee></ccc:eee></bbb>)())))new String(prototype.__count__ setter= ({}).__lookupGetter__).unwatch(\"__iterator__\")");
tryItOut("M:while(([15,16,17,18].filter(Function, <y><z/></y>)) && 0){throw function::({ get: \f({ __noSuchMethod__: ({ constructor: ({ prop: prototype }) }), prop: __parent__ }), __count__: __iterator__ }), prototype;while((__parent__ = this) && 0)this; }");
tryItOut("/*infloop*/while(((p={}, (p.z =  /* Comment */<x><y/></x>)()) ^ 3/0)){const __parent__, __noSuchMethod__ = this; }");
tryItOut("with({}) { with({}) { break ; }  } ");
tryItOut("/*for..in*/for([function::__noSuchMethod__, __count__] = (__count__).call in __iterator__.(<><x><y/></x></>)) {;return; }");
tryItOut("/*infloop*/L:do {const __iterator__; } while(null);");
tryItOut("prototype = function::prop;");
tryItOut("switch([,,z1].isPrototypeOf((([,,] ? try { export constructor; } catch(prototype if ({})) { prop; } catch(prototype) { return; } finally { return; }  : true) |= ([11,12,13,14].map)))) { case delete window(): if(__iterator__ = #1#) {gc() } else  if (this) if(__iterator__.constructor = [,,]) gc() else  if (<><x><y/></x></> , null) {} else yield prototype; else {var __parent__; }if((new (<y><z/></y>)(__count__, 1e-81))) { if (new (undefined)()) constructor = -3/0, prototype; else {/a/giexport constructor; }}\nexport *\n;\ncase (): break;  }");
tryItOut("{yield;export prototype; }");
tryItOut("__noSuchMethod__ = prop;\n/*\n*/var __iterator__, __parent__;\n");
tryItOut("");
tryItOut("/*for..in*/for(let constructor in (((for(let y in []);).call)((prototype))))const l, prototype = prop;");
tryItOut("function(y) { yield y; {}; yield y; }\n;\n");
tryItOut("/*for..in*/for(let [__proto__, prototype] =  /x/g  in __iterator__) yield;");
tryItOut("/*for..in*/for(let [__proto__, prop] = ((p={}, (p.z = try { let __iterator__ = <y><z/></y>; } catch(__iterator__ if  /x/g ) { constructor, prop = [1,,]; } )()) / ) in <><ccc:ddd></ccc:ddd></>) for(let y in []);");
tryItOut("/*for..in*/ for each (__count__ in this) if (window)");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for([__iterator__, __parent__] = (({prop: })) in <x><y/></x>.(__parent__, __iterator__ = undefined;)) {} const constructor;");
tryItOut("L: {const prototype = *; }");
tryItOut("{var prop = <><x><y/></x></>;let \feach = <y><z/></y>, __iterator__; }");
tryItOut("do {export *;yield <x/>; } while((( <= 3/0.watch(\"__proto__\", window))) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(<x/> in ((function  __count__ (prototype) { yield (1.3.@foo) } )(__iterator__[<x/>] ? <y><z/></y>.__iterator__ = constructor : .__proto__)))throw __proto__;");
tryItOut("L:if(this) { if (__proto__) {export __count__; } else {(window);prop = undefined, prototype = <y><z/></y>; }}");
tryItOut("L:if(<><></></>) {break ;export __parent__; } else {/*infloop*/M:for(const constructor; <><x><y/></x></>; 3/0) ; }");
tryItOut("let(constructor, __parent__) { ");
tryItOut("let (prop, function::constructor) { L:switch(x::__iterator__ = *\n) { case 1: continue ;default: break; case 1: yield;break;  } }");
tryItOut("{}/*infloop*/do {let throw 1.2e3;, prototype = true; } while(undefined\n);");
tryItOut("M:while((this) && 0){(eval).call }\n{export *;return __count__; }\n");
tryItOut("/*infloop*/for(arguments; *::*; <x><y/></x>) yield true;");
tryItOut("return;");
tryItOut("/*for..in*/for(__proto__ in (((Function).call(*::*, ))(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.__parent__))){throw __parent__;; }");
tryItOut("with({__noSuchMethod__: <x/> if (__proto__)})return __parent__;");
tryItOut("/*for..in*/for(__iterator__ in #1=[#1#]) /*for..in*/for\f(var __parent__ in ((__noSuchMethod__)(null)))<x><y/></x>;for(let y in []);");
tryItOut("/*for..in*/for(const __iterator__ in (((function ([__iterator__, , , __iterator__, __parent__], __parent__) { return [this.watch(\"prototype\", Math.pow)] } ).call)( /* Comment */this.__defineSetter__(\"__proto__\", function ()function(q) { return q; }(this.__defineSetter__(\"__parent__\", */*\n*/),  /x/ )))))let (__proto__ = ({constructor: prototype}), function::constructor = new [<><x><y/></x></>.watch(\"prototype\", function (__iterator__, function::__noSuchMethod__)<x\f><y/></x>)]()) { (this.zzz.zzz) }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (#2=({__proto__: eval(\"{yield;function  __noSuchMethod__ (__iterator__, constructor) { return *::* }  }\", <x><y/></x>)}))()\f) {Math.sin }");
tryItOut("/*for..in*/for(const constructor in <y><z/></y>) function (constructor, __noSuchMethod__) {  } ");
tryItOut("L:with({prototype: prototype.prop setter= Math.pow}){<>__noSuchMethod__</>;return *; }");
tryItOut("M:while((#1=({__count__: <><x><y/></x></> ? <x/> : (-0)})) && 0){return (__iterator__ ^= <x><y/></x>); }");
tryItOut("do {\tlet (__noSuchMethod__ = <x/>) { export *; const constructor; } } while(((p={}, (p.z = Exception())())) && 0);");
tryItOut("let(__iterator__ = <x><y/></x>, constructor = .2) { ");
tryItOut("/*for..in*/for(let constructor in __count__) {}");
tryItOut("const prototype, __count__ = __count__;");
tryItOut("with({}) { <y><z/></y>; } ");
tryItOut("if([1].valueOf(\"number\")() >= __noSuchMethod__ ? <x/> : [,,z1]) while((({var __noSuchMethod__, prop = <x><y/></x>;{} })(<x><y/></x>.valueOf(\"number\"), [1,,])) && 0)continue ; else  if ((__iterator__).unwatch(\"__count__\")) let prototype, prop; else {return; }");
tryItOut("if(<y><z/></y>) { if (((this).__lookupGetter__(\"__noSuchMethod__\")).__defineGetter__(\"__parent__\", /a/gi)\f) if(<x/>) return;} else {return prototype =  /x/g ; }");
tryItOut("while((false) && 0)gc()");
tryItOut("if(<x/>) { if (<><xxx>{__iterator__}</xxx></>) eval else {let(prototype, __parent__ = 1e81) ((function(){let(__parent__, __parent__) ((function(){return *;})());})()); }}");
tryItOut("/*infloop*/\ndo {gc() } while(__noSuchMethod__);");
tryItOut("/*infloop*/for(eval(\"1e+81\", @foo); <><{yield}> </{yield}></>; (yield __noSuchMethod__ = [z1,,]) >>>=(((5.0000000000000000000000 || @foo) for each (case ++: break; do {export *;throw [1]; } while((false) && 0);break;  in  \"\" )))) {if((yield <x><y/></x>.__noSuchMethod__ !== @foo)) { if (<><x><y/></x></> .@x::  /x/ ) return 0/0;<y><z/></y>; else return;} }");
tryItOut("if( /x/g  >>> window) { if (#1# ? this :  \"\"  >= (<><x><y/></x></>.hasOwnProperty(\"__proto__\"))) {\tyield true\n }} else {(<><x><y/></x></>); }");
tryItOut("{({}).__lookupGetter__ }");
tryItOut("with(({ __count__: constructor }) = true.unwatch(\"__proto__\")){[,,z1];return; }");
tryItOut("for(let y in []);");
tryItOut("{export constructor;; }");
