tryItOut("let (prop = *, constructor = ({a1:1})) { (__proto__); }");
tryItOut("/*infloop*/M:do <x/> while((uneval(undefined)));");
tryItOut("{export *; }");
tryItOut("M:with(let (prop) ({prop: false})){<x><y/></x>;with(\f{__parent__: for(let y in [5,6,7,8]) do {export *;(__count__); } while((<x><y/></x>\f %= true) && 0);})/*infloop*/L:do {yield; } while(undefined);'haha'.split }");
tryItOut("L:if((void {})) {*::*<x><y/></x>; } else  if ((eval(/))) {/*infloop*/for(__proto__ = ({ __iterator__: prop, __parent__: constructor }); <x><y/></x>.__defineGetter__(\"__proto__\", [1,2,3,4].map); (__proto__)(<x/>, true)) {export __parent__;return <x/>; } }");
tryItOut("do if(null) { if (undefined) #1#} else <x><y/></x> while((--@foo) && 0);");
tryItOut("if((new Function(\"throw __count__;\"))()) 1e+81; else  if (++<x><y/></x>) {{}__noSuchMethod__ = window; }");
tryItOut("(null);break M;");
tryItOut("let __iterator__;");
tryItOut("M:if(this = false) throw <x><y/></x>; else  if (*()) gc() else ");
tryItOut("switch([true]) { case 3: case 4: break; default: break; case constructor = __count__: break; case (((function(q) { return q; }).call)((<x/> %= undefined))): break; case 2: break; case 1: case [__noSuchMethod__-=<><x><y/></x></> for each (__count__ in *::*) if (<x><y/></x>)]: break;  }");
tryItOut("with({}) prop = constructor;");
tryItOut("/*for..in*/for(var function::__count__ in  /x/g ) {window; }");
tryItOut("L: yield <x/>;");
tryItOut("/*infloop*/for(({ __parent__: ({ prop: __iterator__ }) }) = ((<x><y/></x>)[(y/></)x/*>]); (delete *::*); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {; }");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, ({ __parent__: ({ __count__: ({ prototype: ({ __count__: ({ __count__: constructor }) }), constructor: \fconstructor }), __count__: ({ prop: __proto__, __proto__: ({ __count__: 1e-81.prototype }) }) }), function::__noSuchMethod__: ({ yield: [, ({ function::constructor: ({ __iterator__: ({ __iterator__: ({ __iterator__: __iterator__, __proto__: prototype }) }) }), prototype: constructor }), prototype/*\n*/.constructor, [, , ({ __noSuchMethod__: prototype, __proto__: __iterator__ }), ]] }) })] = prototype.__parent__ = __parent__ = undefined in (<x><y/></x>.throw(*))) /*\n*/M:if(0) const __iterator__ = <x/>;");
tryItOut("if(+(eval(\"'fafafa'.replace(/a/g, function (try { gc() } finally {  } )<y><z/></y>)\", new __count__( /x/g ).valueOf(\"number\")))) {/*for..in*/for(let [__count__, constructor] = \n__count__ in (Date())) { } }");
tryItOut("{L: {constructor, __iterator__ = false; }switch(this.zzz.zzz) { default: return;break; break; case new __parent__().__lookupSetter__(\"constructor\"): (<><x><y/></x><\t/>);case 5: export *;break;  } }");
tryItOut("if((({ prototype: constructor, setter: ({ prototype: __count__, constructor: __noSuchMethod__ }) }) = <y><z/></y> ? __count__ : false)) { if ((p={}, (p.z = this)()) | (new ([1,2,3,4].map)( \"\" ))) return; else throw (function(q) { return q; });}");
tryItOut("/*for..in*/for(\nconst (window['constructor']) in * if ( /x/g )) {; }");
tryItOut("/*infloop*/for(let [__parent__, , ({ prototype: ({ prototype: ({ __iterator__: ({ __iterator__: __iterator__, __iterator__: __noSuchMethod__ }), __count__: prototype }), prop: prototype.prototype }) }), , prop(033)] = 1.3; false(case (__noSuchMethod__ = undefined): gc()break; ); window) {export __proto__;yield; }");
tryItOut("/*for..in*/for(const constructor = new Array(<y><z/></y>, __iterator__) in @foo :: prop) export __iterator__;");
tryItOut("with({}) { return null; } ");
tryItOut("/*infloop*/do export prop; while((-1.unwatch(\"constructor\")));");
tryItOut("\fL:with((__count__(this)) ? new ( \"\" )(<><x><y/></x></>) : constructor =  '' \t){}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(\tconst prototype in ((Math.pow)([,] || [1,,])))with(window)return;");
tryItOut("while((#2=[__count__]) && 0){throw  \"\" ; }");
tryItOut("do {if(<y><z/></y>) {yield; } else {} } while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>) && 0);");
tryItOut("L:while(((function(q) { return q; }).call(this, )) && 0){arguments; const prototype;yield; }");
tryItOut("let prototype");
tryItOut("if((false === __noSuchMethod__.__proto__)) return <><x><y/></x></>\nlet prototype, __iterator__;");
tryItOut("if(eval(\"__iterator__\", this)) { if ((uneval(__noSuchMethod__))) {__count__ } else {throw [,,];const prop = arguments, __proto__; }}");
tryItOut("([[1]]);");
tryItOut("while((new window()) && 0)/*for..in*/for([__parent__, prop] = -@foo\n in *) { }");
tryItOut("try { return; } catch(__noSuchMethod__ if (function(){export prop;})()) { <><x><y/></x></>; } catch(get) { const prototype; } finally { export *; } ");
tryItOut("/*for..in*/for(__parent__ in undefined) {var __iterator__ = <><x><y/></x></>; }");
tryItOut("let (prop) { function::__count__, __noSuchMethod__ = <y><z/></y>; } const ({ __iterator__: ({ eval(\"(window ? this : <x/>)\", @foo.unwatch(\"__noSuchMethod__\")) === 4.: ({ __proto__: ({ __noSuchMethod__: ({ __proto__: ({ __iterator__: __parent__ }) }), constructor: [, prototype] }), ({ prototype: ({ prop: [] }), __iterator__: __iterator__ }): ({ constructor: [], prop: [, ({}).__lookupGetter__, , (\t{ __noSuchMethod__: constructor }), __noSuchMethod__] }) }), __iterator__: ({ __count__: __parent__, __parent__: __noSuchMethod__ }) }), constructor: ({ prop: __count__, delete: ({ constructor: ({ __iterator__: constructor, __count__: [, , \t, , ] }), __proto__: \f({ __count__: constructor }) }) }) });/*for..in*/M:for(var [__proto__, constructor] = (<x><y/\t></x> | .2) in undefined) /*for..in*/for(const prop in (( '' )(<><x><y/></x></>))){return;({}).hasOwnProperty }");
tryItOut("L:if((++this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))) { if (<><{constructor, prototype}><!--yy--></{constructor, prototype}></>) L:if(__iterator__) { if (String()) export *;} else } else #1");
tryItOut("let __proto__");
tryItOut("/*for..in*/for(var __count__ in window >>= <y><z/></y>) {yield (*::* === constructor); const prototype;with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);\t }");
tryItOut("/*infloop*/M:for(let (__count__ = undefined) (this.__defineSetter__(\"prop\", <x><y/></x>)); <><x><y/></x></>.valueOf(\"number\"); ([, constructor, , __noSuchMethod__, __parent__] = window)) {if(@foo) {{} } else  if (<y><z/></y>) return; else let yield 1e-81;, get; }");
tryItOut("let constructor, __parent__ = <x><y/></x>;");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("if(<y><z/></y>[(<x><y/></x>.yoyo(<x><y/></x>))]) { if (__count__ = __parent__) {yield 4.;/*infloop*/for(const __iterator__; @foo; [__count__].sort(eval)) {throw <><x><y/></x></>;yield window; } } else /*infloop*/for(function(id) { return id }.isPrototypeOf(__count__ = <x><y/></x>); ( /* Comment */function(id) { return id }.eval(<x><y/></x>)); (<><x><y/></x></>.eval(<><x><y/></x></>) in (--prop))) <employee id=\"1\"><name>Joe</name><age>20</age></employee>}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [, , __parent__, , ({ __noSuchMethod__: __proto__, __iterator__: ({ prop: __noSuchMethod__ }) })] in yield ( /x/  > __parent__)) yield  \"\" ;");
tryItOut("let(__proto__) ((function(){continue ;})());");
tryItOut("(<><x><y/></x></>);\n do \n");
tryItOut("if(prop = prototype) { if (<><bbb xmlns:ccc=\"(<x><y/></x>.watch(\"__iterator__\", function () { export *; } ))\"><ccc:eee></ccc:eee>\f</bbb></>) var constructor = 0x99; else yield;}");
tryItOut("let (prototype, __proto__ = <x/>) { x::prototype, __parent__ =  /x/g ; }");
tryItOut("/*infloop*/for(var __iterator__ = 4.; *::*; #3={a:#3#}) {}");
tryItOut("yield;");
tryItOut("/*infloop*/L:while(({prototype:  /x/g , __proto__: null })){\r }");
tryItOut("/*for..in*/L:for([__count__, __iterator__] = ('fafafa'.replace(/a/g, (/a/gi).call)) in  /* Comment */-1 >>>=<x/>.prop) {\fL:if(<x><y/></x>) {(<x><y/></x>).__defineSetter__ } else  if (3) .2 }");
tryItOut("gc()(<><x><y/></x></>);");
tryItOut("if(new new Function(-->)) { if ((eval(\"__noSuchMethod__ = true.hasOwnProperty(\\\"__count__\\\")\", (3.isPrototypeOf(null))))) {; }} else const prototype = __noSuchMethod__;");
tryItOut("with({function::__noSuchMethod__: prototype})(<x><y/></x>);");
tryItOut("let prop;");
tryItOut("M:with((yield [1e81.eval([]) if (<x><y/></x>)]))__iterator__ = 'fafafa'.replace(/a/g, yyy), __noSuchMethod__");
tryItOut("/*infloop*/L:do {export __iterator__; } while(let = this, function(q) { return q; });");
tryItOut("/*infloop*/for(0.1; #1#; <x><y/></x>) {const __parent__ = <x/>;{} }");
tryItOut("if((this.__defineGetter__(\"prototype\", /a/gi))) \freturn <><x><y/></x></>(<><x><y/></x></>); else  if ((new ((1 for (x in [])))(void <><x><y/></x></>.isPrototypeOf(function::__proto__)))) while(( \"\" ) && 0) else let (prop) { {this;export x::x::constructor; } }");
tryItOut("/*infloop*/L:do throw <x><y/></x>; while(this;);");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) ({ __noSuchMethod__: __parent__ }) = <x/> > <y><z/></y>;");
tryItOut("switch(__parent__ = ({\fprop: false, __parent__: 0x99 }).throw((eval(\"/*for..in*/for(const __noSuchMethod__ in ((function(y) { yield y; const prototype;; yield y; })(3)));\", (false)(*, this))))) { case 5: {(1e+81); }case #1#.valueOf(\"number\"): /*for..in*/M:for(let [x::__count__, constructor] = <x><y/></x> in prototype) {break ; }break;  }");
tryItOut("with({constructor: <><zzz>__iterator__ = 0.1\t</zzz></>}){/*infloop*/for(var <y><z/></y>; __noSuchMethod__ = <x><y/></x>; let (({ __noSuchMethod__: [, ] }) = function::prop = 1e-81, eval(\";\", (this & *::*))) [,,z1] += <x/>) gc() }");
tryItOut("[[]];");
tryItOut("if(<><xxx>{__parent__}</xxx></>) let (__noSuchMethod__ = ({}), __iterator__ = <x><y/></x>) { {} }");
tryItOut("if(new (* /= @foo)()) yield <x/>;");
tryItOut("gc()\n");
tryItOut("M:with(__count__.__noSuchMethod__ getter= <><x><y/></x></>)throw <y><z/></y>;");
tryItOut("while((prototype = __parent__) && 0)\r{constructor = *;M:with({prop: #1#.__defineSetter__(\"__iterator__\", (<x/>).__defineSetter__)}){yield;const @foo = this; } }");
tryItOut("while(() && 0){continue M;/*for..in*/for(var prototype in ((4.)((<y><z/></y> | <><x><y/></x></>)))){; } }");
tryItOut("L: {export __parent__; }");
tryItOut("if() {(false); }");
tryItOut("do 1e81; while(((1.2e3.__defineSetter__(\"prototype\", (new Function(\";\"))))) && 0);");
tryItOut("let (function::__iterator__) { yield; }\n{true.__defineGetter__(\"constructor\", (new Function).call);/*for..in*/for(__parent__ in this) {{} } }");
tryItOut("throw <y><z/></y>;");
tryItOut("/*for..in*/for(var new function (__noSuchMethod__, __parent__) { ; } ( /x/g ).__parent__ in (((Math.sin).apply)((__proto__(@foo))))){let (prop = this, __count__ = false) {  }switch((eval(\"export *;\", window)) % new (-1)(<x><y/></x>)) { case 3: break; export prop;return;break; /*for..in*/for(var __proto__ in ((Math.pow)(<x><y/></x>)))continue L; } }");
tryItOut("return;");
tryItOut("if(@foo) { if (((<y><z/></y>)(<x/>) <= *[3])) return try { __parent__; } catch(prop) { break ; } finally { ; } ; else var __count__;}");
tryItOut("L:if(new ((new Function(\"\")))(__iterator__.__parent__.throw(((p={}, (p.z = <x><y/></x>)()))))) {/*infloop*/M:for(!3/0; [window if ( '' )]; (([,,])())) var prop, prototype; }");
tryItOut("let(prototype, __noSuchMethod__ = 0) ((function(){var prototype, __proto__ = -3/0;})());");
tryItOut("if(__count__ = @foo) { if ((<x><y/></x> ? @foo : true)) {L:if(undefined .@x:: <y><z/></y>) {{}const prototype = null, __proto__ = 5.0000000000000000000000; }//h\n else  if ((*--)) {const __count__;; } else {<x><y/></x>; } }} else switch((<x><y/></x>.watch(\"__proto__\", prototype))) { default: throw #1=[#1#];break; with({__parent__: window})let __proto__ = @foo\n }");
tryItOut("{switch(<><x><y/></x></>) { case 9: return;break; case 9: break; var prototype = true, __iterator__ = 1e4;break; {}break; default: case 4: break;  }let <x><y/></x>; }");
tryItOut("break M;constructor = function::constructor;");
tryItOut("/*infloop*/for(__count__; this; undefined) {__count__;@foo; }");
tryItOut("this.zzz.zzz;");
tryItOut("while(( /* Comment */#3={a:#3#}) && 0){; }");
tryItOut("with({}) function::__iterator__ = __noSuchMethod__;");
tryItOut("if((Boolean(.2))) { if (((constructor) = ( ''  | <x><y/></x>))) {const __iterator__ = 0.1, __iterator__ = 033;gc() } else <><x><y/></x></>;}\n__parent__ = true, __count__;");
tryItOut("{__count__ = true, __parent__;export __noSuchMethod__; }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = 4.; ({ set prop(__parent__, prop) { ; }  }); (new Array(constructor, <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")))) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in void <y><z/></y>) {/*infloop*/for(undefined.unwatch(\"__proto__\"); undefined >> <x><y/></x>.prototype; __noSuchMethod__.prototype getter= (new Function).apply) throw  /x/g ; }");
tryItOut("do gc() while((<>*</>) && 0);");
tryItOut("while((<ccc:ddd> </ccc\t:ddd>.().isPrototypeOf(this.@*)) && 0){{prop__iterator__; } }");
tryItOut("/*infloop*/while([15,16,17,18].some((<x><y/></x>.__defineGetter__(\"constructor\", function(y) { yield y; (<x/>);; yield y; })\n), ((p={}, (p.z =  /* Comment */[[]])()).propertyIsEnumerable(\"constructor\"))))try { ; } finally { function (prop, __count__)window } ");
tryItOut("L: {;yield false; }export *;");
tryItOut("{export __count__; }");
tryItOut("const __parent__ = null, __parent__ = window;");
tryItOut("continue ;");
tryItOut("let (prop = (__parent__ = __proto__ = prototype = __count__)) { /*infloop*/M:for(({ __parent__: [[1]] }) = [z1]++.*;  ''  !== *; (![,,z1])) { \"\" ; } }");
tryItOut("/*for..in*/L:for(__parent__ =  '' .prototype =  /x/  in <x><y/></x>) yield *;");
tryItOut("const __proto__;");
tryItOut("if((__proto__ =  '' )) { if ((yield __iterator__: new Object(null, null).@*)) {export __parent__; } else let (__proto__ = __iterator__, __count__) { const prototype, constructor = [,,z1]; }}");
tryItOut("if((-0)( /x/g )) yield; else  if (let (function::__parent__ = <><x><y/></x></>) 0) (3); else ");
tryItOut("let __proto__, prop\n");
tryItOut("{(false); }");
tryItOut("while((__parent__) && 0){return 3/0; }");
tryItOut("/*for..in*/for(let [__count__, constructor] = ({__proto__ getter: <x><y/></x>.yoyo( /x/g ) }) in <x><y/></x> | <><x><y/></x></>) {; }");
tryItOut("return;");
tryItOut("switch(<><x><y/></x></>) { case 8: throw window;break;  }");
tryItOut("{; }");
tryItOut("/*for..in*/L:for(const prototype = (this /= this.__defineSetter__(\"constructor\", (<x><y/></x>).__defineSetter__)) in (({ constructor: ({ __parent__: __parent__ }), constructor: ({ __iterator__: __parent__ }) }) = void __noSuchMethod__.prototype getter= <x><y/></x>)) {break ;\nexport __proto__; }");
tryItOut("/*for..in*/for(const (window.__noSuchMethod__) in [window for each (prototype in [[1]]) if ( \"\" )]) {while((new (Math.pow.__defineSetter__(\"__proto__\", (-0)))(__proto__ = this.__defineGetter__(\"constructor\", (new Function(\"return <><x><y/></x></>;\"))), false.propertyIsEnumerable(\"__iterator__\"))) && 0)return <x/>; }");
tryItOut("let (__proto__) { with(let [[1]];++)(<x><y/></x>).watch }");
tryItOut("L:switch(({a2:z2})) { default: if(<x><y/></x>.*) /*for..in*/for(__iterator__ = [1,,] ? <y><z/></y> : __iterator__ in <y><z/></y>) {export prop;function::prototype = null, __iterator__; } else  if (<><x><\ty/></x></>++) {/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in *) {if(<x><y/></x>) { if (true) return case 8: ;default: break; case <><x><y/></x></>: ;break; export *;case 0: const __proto__ =  /x/ ;break; case <><x><\ty/></x></>: break; break; ; else }export __parent__; }L:if(constructor) { if (__noSuchMethod__) const __parent__ = window, __parent__; else return 0/0;} } else if((yield.__count__ getter= true)) { if (eval(\" /x/  -= @foo\", gc())) {( /x/g );export *; } else {var prototype; }}break; case 5: break;  }");
tryItOut("do {gc() } while((+__proto__) && 0);");
tryItOut("/*infloop*/L:for(((yield <x><y/></x> if (constructor)).hasOwnProperty(\"constructor\")); 4.; ({prop: ({ __proto__: constructor }) =  /* Comment */<x/>})) {return this;gc() }");
tryItOut("try { throw __parent__; } finally { for(let y in [5,6,7,8]) throw StopIteration; } ");
tryItOut("const __proto__;");
tryItOut("if(<bbb xmlns:ccc=\" \"\"  |= constructor\"><ccc:eee></ccc:eee></bbb>) let prototype = [z1], prop;");
tryItOut("let(__count__) ((function(){let(__noSuchMethod__) ((function(){for(let y in []);})());})());");
tryItOut("switch(<bbb xmlns:ccc=\"[15,16,17,18].sort(false, function::__count__)\"><ccc:eee></ccc:eee></bbb>) { case 9: var __noSuchMethod__ = __count__;break;  }");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __count__] = eval(\"\", [11,12,13,14].sort) in (new (new Function(\"@foo;\"))(<y><z/></y>))) {{}\n/*infloop*/for(var __parent__; <y><z/></y>; <x/>) case 1: prototype = prototype, prop; const prototype;break; throw <x><y/>\t</x>;\nexport *;\n }");
tryItOut("switch(__count__) { case 3: export prop; }");
tryItOut("switch(null) { case 1: break; /*infloop*/for(var function::__parent__; [z1]; 0/0) (1e4)break;  }");
tryItOut("/*infloop*/do {{} } while(undefined << *::*.@*)");
tryItOut("with(({ __count__: constructor }) = __iterator__)yield [];");
tryItOut("for(let y in [5,6,7,8]) with({}) return ([15,16,17,18].some([1,2,3,4].slice, #1=[#1#]) |= <><>*::* </></>);");
tryItOut("with({}) yield prop.__iterator__ setter= (new Function(\"break L;\"));");
tryItOut("L: {\n/*infloop*/while( /x/ )continue M;\n;\n }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <x/>; ((1 for (x in [])))([1,,]); function ([y]) { }. constructor__count__ = <><x><y/></x></>) {export prototype;return; }");
tryItOut("do gc() while(([[1]]) && 0);");
tryItOut("yield (<x/> ? *::* : <><x><y/></x></>);");
tryItOut("/*for..in*/for(constructor.__noSuchMethod__ in window) {export constructor; }");
tryItOut("eval");
tryItOut("gc()\nyield;\n");
tryItOut("L:if(__iterator__ = <><x><y/></x></>) { if (__parent__ = <y><z/></y>) yield; else {}}");
tryItOut("if((({ prop: __count__, __parent__: [, constructor, __proto__, ] }) = true | __proto__.prop =  /x/ )) {return __count__ ^ <><x><y/></x></>; } else yield (3.141592653589793 .@ prototype);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function(y) { yield y; export __noSuchMethod__;; yield y; })((new window(__parent__, __noSuchMethod__)))))<x><y/></x>");
tryItOut("/*infloop*/for(var __count__ = *\n; (({__count__: <><x><y/></x></> }) for each (__parent__ in  '' ) for (constructor in __iterator__) & +new ((Function).apply)(*).__iterator__ = <x><y/></x> <= <y><z/></y>); ([1,2,3,4].slice((@foo if ([])))) for each (__noSuchMethod__ in let (__count__) __proto__(*::* !== 0.1, *)) for (<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\") in (this.__defineGetter__/*\n*/(\"__proto__\", new Function))) if ((false)[ /x/g ])) {/*infloop*/for(var constructor = (new (<x/>;)()); [1,,].__lookupSetter__(\"constructor\"); __count__ = <x><y/></x>) /*infloop*/for(var prototype; 0/0; true) (*); }");
tryItOut("yield  /x/g ;");
tryItOut("continue \n");
tryItOut("L:with({__parent__: prototype.__proto__ = function  __iterator__ (prop, prop) { yield; } }){let (getter = 1e4) { function (constructor, __parent__)({}) } }");
tryItOut("L:with('fafafa'.replace(/a/g, function  constructor (__proto__) { return <x><y/></x> } )){let prop, __count__ = this;export *; }");
tryItOut("for(let y in [5,6,7,8]) with({}) { (*::*); } ");
tryItOut("let (delete, __parent__) { export __parent__; } const __iterator__;");
tryItOut("/*for..in*/M:for([__count__, __iterator__] = ({}) in (-0) || (prototype)) {return; }");
tryItOut("L:if(this.zzz.zzz) yield;");
tryItOut("/*infloop*/for(__count__; @foo; ('fafafa'.replace(/a/g, function(y) { yield y; {}; yield y; }).@foo)) {prototype, __noSuchMethod__ =  /x/ ; }");
tryItOut("yield;");
tryItOut("if(__iterator__ = 0 ? (-0).__lookupSetter__(\"__count__\") : prop) yield this; else {(@foo);throw <><x><y/></x></>; }");
tryItOut("export *;");
tryItOut("if(({ __iterator__: ({ __noSuchMethod__: ({ prop: ({ function::__parent__: [, [__count__, __iterator__, , __iterator__, __parent__] = (<><x><y/></x></> >>> window), , [prototype, __parent__], __iterator__], yield: ({ prop: [] }) }), __count__: ({ /*\n*/__count__: __noSuchMethod__ }) }) }), __noSuchMethod__: constructor }) = [, [[, [], prop], , ({ prototype: ({ prop: ({ __noSuchMethod__: __proto__, prototype: __noSuchMethod__ }) }) }), ({ __noSuchMethod__: ({ let: ({ prop: ({ __parent__: __proto__ }) }) }) }), prop], ({ __noSuchMethod__: prototype, prop: ({ constructor: ({ __iterator__: ({ __noSuchMethod__: constructor, prototype: __noSuchMethod__ }), prop: __noSuchMethod__.__proto__ }) }) }), ({ constructor: prototype })]) { if ('fafafa'.replace(/a/g,  \"\"  .@ <x><y/></x>).(new (({__iterator__: <x><y/></x>, __noSuchMethod__:  ''  }))((<><x><y/></x></>.hasOwnProperty(\"constructor\"))))) {yield (let (__proto__ = window, prop) .2 ? constructor : *);let (constructor, __noSuchMethod__) { yield; } } else {if((__count__([11,12,13,14].some))) break L; else  if (({ get prototype function::constructor (prototype, __count__) { return (prop+=null) } , __proto__ getter: ( /x/ ).__defineSetter__ })) {{} } else  }}");
tryItOut("if(eval(\"/*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>; ({a2:z2});  /x/ ) export *;\", (<y><z/></y>.yoyo( /x/ ).yoyo((<x/>.yoyo(this)))\f))) { if (<><xxx>{function::__iterator__}</xxx></>) {if(this.__defineGetter__(\"undefined\",  \"\" )) gc() else  if (window.__lookupGetter__(\"__proto__\")) {*::*; } else \t{\rvar constructor; } }} else {; }");
tryItOut("return ( /* Comment */ /* Comment */<y><z/></y> >> [,] >>= prototype) ? ({ __noSuchMethod__: prop }) =  \"\"  >>>  /x/  : (constructor = 3.141592653589793).isPrototypeOf(prototype.eval( /x/ ));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __proto__: ({ constructor: __proto__, prototype: constructor }) }) in yield function ([y]) { }) try { __noSuchMethod__; } catch(__iterator__) { return; } ");
tryItOut("var constructor, __count__ = <x/>");
tryItOut("let(__proto__) ((function(){for(let y in [5,6,7,8]) undefined;})());");
tryItOut("{}");
tryItOut("return *.__lookupSetter__(\"prototype\") >>>=([* for (__proto__ in <y><z/></y>)]);");
tryItOut("gc()");
tryItOut("/*infloop*/for(var __iterator__; (new function  constructor ()0()); eval(\"__parent__\", (true.propertyIsEnumerable(\"constructor\")))) let prop, __iterator__ = <><x><y/></x></>;");
tryItOut("switch(<x><y/></x>.isPrototypeOf([,,z1])) { default: const __parent__ = [z1], __parent__ = [,]; }for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/for(const __count__; (({__count__: <x/>, __parent__: <x/> })); __noSuchMethod__.__count__) {let __iterator__ = 033, __noSuchMethod__; }");
tryItOut("L: if((((window).call(<>\f<x><y/></x></>,  '' ).*) -= (prototype.prop = (<><x><y/></x></>.*)['fafafa'.replace(/a/g, function(q) { return q; })]))) { if ((1e81.eval(this) for (__count__ in [5.0000000000000000000000].some(function  __parent__ (prop)5.0000000000000000000000)) for (__parent__ in <x/>))) export *; else <y><z/></y>}");
tryItOut("{export __parent__; }");
tryItOut("eval");
tryItOut("<><x><y/></x></>[1,2,3,4].map");
tryItOut("/*infloop*/for(var ({ (yield <x><y/></x>).__parent__: ({ __count__: [({ __parent__: [, ({ __iterator__: __parent__, __count__: ({ __proto__: __iterator__, prop: prop }) }), ], __proto__: prototype }), (-1);] }), __parent__: (Math.sin) >>= @foo << ({getter: (window.valueOf(\"number\"))[(1e4 -= <y><z/></y>)]}), __count__+=window }) = ((yield true)) >>> (p={}, (p.z = <x><y/></x>)()); ((function  __proto__ () { yield prototype.__proto__ !== prototype = window >> <x/> } )(__iterator__, __noSuchMethod__ >>= (__proto__.watch(\"__noSuchMethod__\", ({}).hasOwnProperty)))); \f[] = .2.eval(<x><y/></x>)) export constructor;");
tryItOut("yield (new false);");
tryItOut("/*for..in*/for(let __count__ in ((function(q) { return q; })(([11,12,13,14].map))))let (__iterator__) { return [z1,,]; }");
tryItOut("/*infloop*/while(null.@foo)return this;");
tryItOut("throw __iterator__;");
tryItOut("{if(3.141592653589793) {(-3/0); } else  if (0/0) {prop getter: (new Function(\";\")) }yield <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for((-0) %= window;  /* Comment */<x><y/></x>; prop = __count__) continue M;");
tryItOut("switch(undefined) { default:  }");
tryItOut("/*for..in*/M:for(const [__iterator__, __iterator__] = __count__ in <>new (((function (__proto__, __noSuchMethod__) { (new Function(\"throw <y><z/></y>;\")) } ).call).apply)(window, __proto__)</>) L: {/*infloop*/do {yield;yield <x/>; } while([,,]);return; }");
tryItOut("export *;function  __proto__ () { return <><x><y/></x></> } ");
tryItOut("let(getter = .((\tyield __noSuchMethod__))) ((function(){throw StopIteration;})());");
tryItOut("/*infloop*/for(var [, ({ constructor: __proto__, __iterator__: prototype }), ({ prop: ({ prototype: ({ prop: ({ __noSuchMethod__: __parent__, __iterator__: constructor }), __count__: __parent__ }) }) }), ] = eval(\";\", __iterator__ = (new undefined())); #0=({__iterator__: <x><y/></x> if (<><x><\ty/></x></>)});  \"\" ) {if((uneval(__parent__ = <x/>))) continue ; else {const __proto__ = 3/0; } }");
tryItOut("__proto__ = window;");
tryItOut("/*infloop*/for(var __count__; (0 > (null.prop)); @foo) {export __iterator__;var __noSuchMethod__; }");
tryItOut("throw StopIteration;");
tryItOut("if((this.valueOf(\"number\"))) {gc()gc() } else  if (*::*[@foo]) gc()");
tryItOut("yield;\n[1,2,3,4].map\n");
tryItOut("while((prototype = @foo) && 0)yield [* if (undefined)];");
tryItOut("this.zzz.zzz;");
tryItOut("if(([1,2,3,4].slice().eval(<><x><y/></x></>).watch(\"constructor\", Function))) { if (((1 for (x in []))).call(__iterator__ = *::*, <x><y/></x>.throw(<x/>), gc)) /a/gi else {gc() }}");
tryItOut("export __noSuchMethod__;\nlet __parent__ = prop, __iterator__;\n");
tryItOut("if(-0 = prototype.prototype) { if ((this.__defineSetter__(\"prototype\", (1e81).apply))) {var __noSuchMethod__, prototype;(function  __iterator__ (__count__) { return constructor } ).call }} else {;(\t<><x><y/></x></>); }");
tryItOut("let(({ __proto__: prototype }), __count__ = undefined) { with({}) export *;\n{}\n");
tryItOut("L: {; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in  /x/ ) {export *; }");
tryItOut("if(this.zzz.zzz) { if ((eval(\"M:if(constructor) { if (window) {;const delete =  /x/g , #3={a:#3#}; } else {false }}\", <x><y/></x>))) yield; else ;}");
tryItOut("M:if(__noSuchMethod__%=[,]) \f{yield;break M; }");
tryItOut("for(let y in [5,6,7,8]) let(__count__) ((function(){export *;})());");
tryItOut("/*for..in*/for(__noSuchMethod__ = * in constructor.(({prop getter: ('haha'.split\t).call }))) {/*for..in*/for(let __parent__ = (1e4 = <x><y/></x>) in 1e81) {return [[]];(*); } }");
