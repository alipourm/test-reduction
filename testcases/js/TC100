
tryItOut("with(yield)yield <y><z/></y>;");
tryItOut("for(let y in []);");
tryItOut("continue ;\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) {return; }\n");
tryItOut("/*for..in*/for(var [__parent__, constructor] = ([15,16,17,18].map(\t'haha'.split, (function(q) { return q; })(5.0000000000000000000000 /= <x><y/></x>, <x><y/></x>))) && __parent__ in (<xxx {__count__}={ '' } /> in (p={}, (p.z =  /x/g )()))) do export constructor;\t while(((this.isPrototypeOf(this))) && 0);");
tryItOut("L:with((((function(y) { yield y; let constructor, prototype;; yield y; })())[(__parent__ = ({a1:1}))])){return; } const (new Function(\"L:while((this.__defineSetter__(\\\"constructor\\\", function (__noSuchMethod__, function::__count__) { yield true.propertyIsEnumerable(\\\"prototype\\\") } )) && 0){let (__proto__ = __proto__) { yield; }export constructor\\nconst prototype; }\"));");
tryItOut("/*for..in*/for(const __count__ = __proto__ in  /x/ ) throw __noSuchMethod__;");
tryItOut("with({}) { yield  /x/  =  '' ; } ");
tryItOut("with({__proto__: }){}");
tryItOut("return  /x/g ;");
tryItOut("(#1#).__defineSetter__");
tryItOut("({ prop: [], prototype: prototype }) = prop;");
tryItOut("M:if(false) {(<\f><x><y/></x></>); } else (false);__count__ = *, prop;");
tryItOut("with((prototype))throw  /x/g ;");
tryItOut("if((yield (function(id) { return id } ? window : undefined for each (__parent__ in -3/0))).__lookupSetter__(\"__noSuchMethod__\")) {return } else  if ((-1)) {export __iterator__;gc() }");
tryItOut("/*for..in*/for(constructor = __count__ in this) {const __noSuchMethod__ = __parent__; }");
tryItOut("yield");
tryItOut("return;\nvar __noSuchMethod__, <x><y/></x> = (<><x><y/></x></>).watch;\n");
tryItOut("let(__noSuchMethod__ = *::*[__parent__], prototype = *) ((function(){throw StopIteration;})());");
tryItOut("while((('haha'.split).call((eval(\"export *;\", -<x><y/></x>)), <><x><y/></x></>.isPrototypeOf(0))) && 0){{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((<y><z/></y>).call(null, this, <x><y/></x>))([(export prop)].map(function  __parent__ () { yield; } )) in (let (prototype = .2, __proto__ = [z1,,])  /x/ .yoyo(export __noSuchMethod__;))) ({}).__lookupGetter__");
tryItOut("do {{} } while((__parent__) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype.__noSuchMethod__ in *) {(null instanceof true).watch(\"prototype\", ({}).__lookupGetter__) }");
tryItOut("/*for..in*/for(var [prototype, __proto__\n] = ( /x/g  ? -1 : <x><y/></x>) in (function(id) { return id } | <bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>)) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(1e81.prototype.__proto__ in (p={}, (p.z = <><x><y/></x></>)())) Math.pow\nconst prop = [,,], prop = 0;");
tryItOut("<x/>");
tryItOut("(<x/>)");
tryItOut("L:switch(false) { default: break; case 3: try {  } catch(let if (function(){return;})()) { yield (function ([y]) { })(); } catch(__parent__ if (function(){let __iterator__;})()) {  '' ; } catch(__proto__ if (function(){const get =  \"\" ;})()) { {} } catch(__parent__) { export __parent__; } break;  }");
tryItOut("let (__count__, ({ __proto__: [], prop: __parent__ })) { throw <x><y/></x>; }");
tryItOut("/*infloop*/for(let prop; (-1).hasOwnProperty(\"__noSuchMethod__\"); <x><y/>\t</x> , <><x><y/></x></>) /*infloop*/for(let __proto__ = <x/>;  '' ; constructor) {throw @foo;gc() }");
tryItOut("M:while((<><x><y/></x></>) && 0){yield; }");
tryItOut("continue L");
tryItOut("L:if(__iterator__-=* .@x:: *::*) { if (eval(\"<x><y/\\f></x>\", [z1].yoyo(<y><z/></y>))) ((__count__ = __iterator__));} else throw (-1);");
tryItOut("for(let y in []);");
tryItOut("try { with({}) try { ; } catch(prop if (<><x><y/></x></>.unwatch(\"__proto__\"))) { return prop; } catch(__proto__ if (3 === 0)) { let prop, prototype; } catch(__iterator__) { var constructor, constructor = <><x><y/></x></>; }  } catch(__iterator__ if (function(){return <x/>;})()) { /*infloop*/for(function  prop () { yield window }  = (-1) << (-0); Math.pow; \n<><x><y/></x></>.__parent__) var __parent__ = window; } finally { try { continue L; } catch(__noSuchMethod__ if (function(){const __count__, __count__ = false;})()) { throw [z1,,]; } catch(__count__) { prototype, each } finally { {} }  } ");
tryItOut("L: yield  '' \n");
tryItOut("\ngc()");
tryItOut("with({}) throw prototype;");
tryItOut("/*for..in*/for(let <><xxx {prototype}={} /></> in ((/a/gi)(yield prop %= <x/>)))return prop;");
tryItOut("/*infloop*/for(var constructor; ({ prop: __iterator__ }).__count__ getter= (new Function(\"export prop;\")); new (-__proto__)) {if(prop) return null; else  if (({a1:1})) const __count__, __noSuchMethod__; }");
tryItOut("if(!<x><y/></x>) { if (( \n)) {if(__proto__) var __count__; else  if (__count__)  else ;export *; } else {*;; }}");
tryItOut("yield let (constructor)  \"\" ();");
tryItOut("yield;\n{}\n");
tryItOut("{if(\t([z1])[<><x><y/></x></>]) {yield;let __iterator__ = <y><z/></y>, __iterator__; } }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = <><x><y/></x></> in <x><y/></x>) {{}var __count__, __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in <y><z/></y>) {export __count__;var prototype; }");
tryItOut("{export *; }");
tryItOut("Math.sin const __parent__;");
tryItOut("with([window].isPrototypeOf(eval(\"export __proto__;\", null))){yield __parent__;throw  /x/ ; }");
tryItOut("do let __noSuchMethod__, __noSuchMethod__; while((__proto__) && 0);");
tryItOut("if(<y><z/></y>.isPrototypeOf(this).__lookupSetter__(\"prop\")) {; } else  if ((__iterator__ for (prototype in <><x><y/></x></>)) += [ \"\" ]) {var __iterator__ = *, __noSuchMethod__;return undefined\n } else [1,2,3,4].map");
tryItOut("let (({ prototype: ({ prototype: __iterator__ }) })) { yield; }\n");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((gc)(__parent__))){; }");
tryItOut("{var __count__, prop = <x/>; }");
tryItOut("/*infloop*/for([z1];  '' ; this) ");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = <><x><y/></x></> in <><x><y/></x></> ^ <x><y/></x>) {gc()\nreturn; }");
tryItOut("/*for..in*/L:for(const [__parent__, __proto__] = <></> in ([(<x/>[window])].map(Math.sin))) {/*infloop*/for(let __iterator__ = true; <y><z/></y>; <><x><y/><\n/x></>) break M\n }");
tryItOut("if(delete prototype.(#1#)) { if (constructor.(undefined)) let __proto__ = true; else M:if(#1=[#1#]) \t{ if (false) {yield;continue ; }} else {break ; }}");
tryItOut("L:while(( /* Comment */<x/>.prop) && 0)export *;");
tryItOut("prop = constructor;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = this ?  ''  : <x><y/></x> in (__iterator__ = this)) {if(__count__ = __parent__) prototype }");
tryItOut("if(new ((prop | null))(delete new <><x><y/></x></>(), *)) {export prop;prototype } else let __proto__, __parent__;");
tryItOut("/*for..in*/for(let __noSuchMethod__\f = __noSuchMethod__.hasOwnProperty(\"__noSuchMethod__\") == <x/>.__lookupSetter__(\"__parent__\") in /*\n*/__parent__.__lookupGetter__(\"__count__\")) {if(<><x><y/></x></>) {throw  /x/g ;export *; } else \f if ([z1,,]) return (-0);gc()\t }");
tryItOut("if( \"\" ) {( /x/ );export *; } else  if (<><x><y/></x></>) yield; else {export *; }");
tryItOut("(this);");
tryItOut("if(void new new Function((prop.(@foo != <><x><y/></x></>)))) function::__count__, __iterator__;");
tryItOut("");
tryItOut("let(__parent__, prop = *::*) { throw function ([y]) { };");
tryItOut("if(@foo <=  /x/ ) {if(false) {throw @foo;export __count__; } else  if (<x/>) break ; } else  if ( /x/  >>  \"\" ) export *;\n;\n else {prop = <x><y/></x>, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (let) in //h\n#0=\n__parent__) {}\t");
tryItOut("return 'fafafa'.replace(/a/g, Math.sin) = <x><y/></x>.__lookupGetter__(\"__proto__\");");
tryItOut("if((*)(__count__.__proto__)) export *; const __parent__; else  if ((__iterator__.__count__ = <x><y/></x>)) ;");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = ((__iterator__ = false).__noSuchMethod__.__lookupSetter__(\"__iterator__\")) in  '' .__defineSetter__(\"(new Function(\\\"export constructor;\\\"))\", [1,2,3,4].slice)) with({prototype: prototype}){}/*infloop*/L:for((<><x><y/></x></>--)[(new Error(@foo,  /x/ ).__lookupGetter__(\"__iterator__\"))]; eval(\"__proto__\", ({a1:1}) * <><x><y/></x></>); <xxx {__parent__}={<x><y/></x>} />.(<x><y/></x>)) if(window.prop) break ; else  if (__proto__) return;");
tryItOut("{{} }");
tryItOut("/*infloop*/\fwhile((function ([y]) { })()){return *\nyield  /x/g ; }");
tryItOut("if(--(yield prop * false)) { if ((case {; }: break; default: return *;break; .eval(<y><z/></y>))) yield;} else let prop;");
tryItOut("/*for..in*/for(var (__count__.constructor) in <x/>) function(y) { yield y; export *;; yield y; }");
tryItOut("if(__proto__.prototype = <x><y/></x>) function  prototype (__count__) {  }  else {return  /x/ ; }");
tryItOut("try { this.zzz.zzz; } catch(__proto__) { this.zzz.zzz; } ");
tryItOut("/*infloop*/L:for(([15,16,17,18].sort(function(q) { return q; }, true)); //h\nconstructor.prop setter= Function; <><bbb xmlns=\"[z1,,]\"> </bbb></>) return *;");
tryItOut("export *;");
tryItOut("do (false); while((new (0.1)(<y><z/></y>)) && 0);");
tryItOut("/*infloop*/while(this)return;");
tryItOut("/*for..in*/L:for(const constructor in ((/a/gi)(<x/>)))if(constructor) break ; else  if ( '' ) {(__iterator__);break ; } else {gc() }");
tryItOut("{/*for..in*/M:for(var prototype = prop in <>\f<x><y/></x></>) ;/*\n*/ }");
tryItOut("(function ([y]) { });");
tryItOut("let (prototype = @foo, ({ constructor: ({ prototype: __parent__, __proto__: [] }) })) { throw <x><y/></x>; }");
tryItOut("/*infloop*/while(-(undefined))L: try { continue ; } catch(prototype if [1]) { yield (function ([y]) { })(); } ");
tryItOut("/*infloop*/for(const __parent__; 1e+81; (new Function)) return;");
tryItOut("if([] - (uneval(-3/0))) continue L; else  if (!<x/>) /*infloop*/L:for([z1]; @foo; __noSuchMethod__) export *; else throw undefined;");
tryItOut("export *;");
tryItOut("if(prototype = (__count__ = <y><z/></y>)) { if (__proto__.prototype getter= Math.pow) {export \t__parent__;this; }} else ");
tryItOut("return\t\n/*infloop*/for(let __parent__; <x/>.yoyo(undefined); let ({return 1e+81;gc() }) constructor) ");
tryItOut("/*infloop*/for(let __proto__; #1=[#1#]; __count__) throw this;");
tryItOut("let(__noSuchMethod__, __noSuchMethod__ = <\f><x><y/></x></>) ((function(){let __parent__, constructor = <><x><y/></x></>;})());");
tryItOut("yield []\n");
tryItOut("/*infloop*/for(let __parent__ = *::*; window; this) {return <><x><y/></x></>;; }");
tryItOut("if(({ __iterator__: constructor = this, __proto__: ({ prop: __count__, __count__: __noSuchMethod__ }) }) = ({ __iterator__: prototype, __parent__: ({ prop: __iterator__ }) })) yield; else  if (1.3(__iterator__) -= (eval(\"return;\", __count__.__count__ setter= 0.1))) {let <x/> = <x><y/></x>, __count__;L:with(--{}){return;(window); } }");
tryItOut("/*infloop*/do gc() while([15,16,17,18].map((Function).apply, <x><y/></x>).isPrototypeOf(<x><y/></x>.(<x><y/></x>)));");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("([,].throw(-3/0) if (<y><z/></y> != []))\n, ({ __count__: [, , __parent__, ] }) = let (__iterator__) setter");
tryItOut("/*for..in*/for(__parent__ in <y><z/></y>) continue M;");
tryItOut("M:if(this.__defineGetter__(\"prop\", ({}).hasOwnProperty)) {throw this; } else  if (__count__.( '' ))  else /*infloop*/while(false)yield;");
tryItOut("#3={a:#3#};");
tryItOut("let (__proto__ = function ([y]) { }, [, ({ x::__iterator__: prototype }), , , <x/>.__defineSetter__(\"prop\", this)['prototype']]) { ((1e-81 && false)); }");
tryItOut("return window;");
tryItOut("let(prop, ({ prototype: [] }) = {}) ((function(){this.zzz.zzz;})());");
tryItOut("{throw <><x><y/></x></>; }");
tryItOut("if((<xxx>{prototype}</xxx>.(each: [1] .@ *))) /*for..in*/for(const constructor in ((0x99)(<x/>))){return this;yield; } else  if (#0=(<y><z/></y>)) yield prop;");
tryItOut("/*infloop*/L:for([({ constructor: prototype }), __proto__, [, __iterator__, ({ __iterator__: __proto__, __count__: ({ constructor: __count__ }) })], , ({ prop: ({ __iterator__: constructor }) })] = ((yield <x/>)); \f[] = <y><z/></y> >>> eval(\"<x/>\", this); (null.__defineSetter__(\"__parent__\", ({a1:1})))) {/*infloop*/for(({ __parent__: __proto__, prototype: constructor }) = (function ([y]) { }); (); .2.*) { } }\n{return  /x/g ;const __parent__ = 3, __parent__ = 0x99; } const prop;");
tryItOut("let (__noSuchMethod__, constructor) { throw <><x><y/></x></>;\nreturn;\n }");
tryItOut("if(this.zzz.zzz) {prop = <>__iterator__</>;return; } else continue ;");
tryItOut("/*infloop*/while(this.__defineGetter__(\"getter\", Function)){}");
tryItOut("/*infloop*/do {{}/a/gi } while((uneval(([<><x><y/></x></> if (1.3)]).@*)));");
tryItOut("let (prop, function::__parent__(this)) { var __count__ = <><x><y/></x></>, __count__ =  /x/ ; }");
tryItOut("");
tryItOut("let(prototype) { ({a2:z2});");
tryItOut("/*infloop*/for(let function::prop; <><x><y/></x></>.__lookupSetter__(\"__proto__\"); __proto__ =  /x/g  += window.unwatch(\"<y><z/></y>\")) {throw function(id) { return id }; }");
tryItOut("/*for..in*/for(let [prop, constructor] = [, , []] = __parent__ in __proto__) ( '' );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (null +  '' )) /*for..in*/for(__proto__ in <x/>) {gc() }");
tryItOut("with(__count__.__defineSetter__(\"__noSuchMethod__\", function (prototype) { yield <y><z/></y> } ));");
tryItOut("return 1e+81;");
tryItOut("let(prop) ((function(){return ( /x/g  >>= #3={a:#3#} === (<x><y/></x>--));})());");
tryItOut("(1 for (x in []))");
tryItOut("{export *; }");
tryItOut("if(new ((__parent__ = __proto__%=window)).watch(\r)) { if ((__iterator__.__count__.*)) {L: let __iterator__;return; } else { }}");
tryItOut("switch(new (Math.pow)()) { default:  }\n{} const __parent__;/*\n");
tryItOut("/*for..in*/L:for(var __parent__ = [11,12,13,14].some in .2) ");
tryItOut("/*for..in*/for(var prop = [1,2,3,4].map( /x/ , window).@* in <x><y/></x> >>= [1]) {; }");
tryItOut("{throw  /x/g ; }/*infloop*/M:for([,,z1] <= <x><y/></x>; __iterator__ = *::*; #0\f=[<><x><y/></x></>]) {throw (function ([y]) { })();export *; }");
tryItOut(";\nconst constructor = undefined, prototype = <><x><y/></x></>;\n");
tryItOut("/*for..in*/M:for(__noSuchMethod__(<><x><y/></x>\f</>) in ((/a/gi)(false if (<><x><y/></x></>)\f))) /x/g ;");
tryItOut("[__proto__, , ({ prototype((__noSuchMethod__ = undefined.isPrototypeOf(<x><y/>\f</x>.@*)).hasOwnProperty(\"__iterator__\")): ({ prop: ({ prop: ({ __count__: ({ __parent__: __count__ }), __parent__: function::__parent__, __proto__ }), __iterator__: __parent__ }), __noSuchMethod__: ({ __iterator__: //h\n[, , , ({ __iterator__: constructor })] }) }) }), ({ constructor: prop, window: ({ __proto__: ({ prop: ({ __count__: [prototype] }), __parent__: ({ prototype: [prop, , ], __iterator__: constructor }) }), __iterator__: [[[prototype, , __count__, __count__, prototype], , set, , ({ prop: __iterator__ })]] }) }), ]");
tryItOut("if([z1]) <\nx><y/></x>; else {yield .2;throw <x><y/></x>; }");
tryItOut("let (__proto__, __proto__) { gc() }");
tryItOut("L:if(([15,16,17,18].some(<x><y/></x>, new Function())) instanceof this.__defineGetter__(\"__iterator__\", new Function)) return; else  if ((__iterator__ ? false : null)[(prototype &= window)]) {continue L; } else ([[1]]);");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __count__] = constructor in (prop, __count__.yoyo( '' )).__noSuchMethod__) (<><x><y/><\t/x></>);");
tryItOut("/*for..in*/for(const __iterator__ =  \"\" .yoyo((1.2e3)) in __iterator__ = __iterator__) /*for..in*/for(let this['constructor'] in .2) *;");
tryItOut("__noSuchMethod__;");
tryItOut("L:if(Function(let ([({ prototype:  }), , [], , __count__], __parent__) (__count__ = __parent__))) while((window) && 0){throw @foo; }");
tryItOut("while(() && 0){return; }\n\n/*infloop*/while((this.zzz.zzz)){{let __count__; }let __count__ = #1#, __count__ = __noSuchMethod__; }");
tryItOut("var prop = __iterator__.__defineSetter__(\"function::__proto__\", gc), prototype = <x><y/></x>");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(__noSuchMethod__; ( \"\" )(({a1:1}), -1); (([1,2,3,4].slice)('fafafa'.replace(/a/g, function ()null)))) {return (p={}, (p.z = @foo)()) } if(*.throw(<y><z/></y>)++) { if (({__parent__: [15,16,17,18].sort([1,2,3,4].slice,  /x/g ) })) {} else gc()} }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function (__count__, __parent__)this)((function  prop (prototype) { return null if (__iterator__) } ))))<x><y/></x>.yoyo(<y><z/></y>);");
tryItOut("const prop = undefined, constructor = [z1,,];");
tryItOut("return -0\n");
tryItOut("/*infloop*/do {L: {break ;if(function(id) { return id }) {yield <x><y/></x>;; } else  if ( \"\" ) {__parent__export __noSuchMethod__; } } } while(delete (eval));");
tryItOut("if(((\n<y><z/></y>) .@ constructor = ({ function::__noSuchMethod__: __count__ })).__iterator__) throw @foo; else gc()");
tryItOut("/*for..in*/for(const constructor in ((((<bbb xmlns=\"<><x><y/></x></>++\"></bbb>.(({__iterator__:  /x/ })))).watch)(delete = (undefined.__lookupGetter__(\"constructor\"))))){/*for..in*/for([__noSuchMethod__, prototype] = <x><y/></x> in  /x/ ) gc()/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (-1)) throw  '' ; }");
tryItOut("while(((((<><{__parent__}><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></{__parent__}></>)(-3/0)) == (0.1.propertyIsEnumerable(\"__proto__\")))) && 0){var __count__;\n }");
tryItOut("if(<bbb xmlns:ccc=\"(<x/> ? <x><y/></x> :  \"\" )\"><ccc:eee></ccc:eee></bbb>.@foo) {let __iterator__ = (function ([y]) { })(), __parent__;switch(<y><z/></y>) { case <y><z/></y>: throw #3={a:#3#};break; *::*;break; gc()break; case @foo: break; break; default: let __proto__, __parent__ = *::*;break;  } } else /*infloop*/do {M:if(window) ( /x/ ); else  if (<y><z/></y>) yield; } while(this.__defineGetter__(\"__iterator__\", function  __noSuchMethod__ (__count__) { yield window } ));");
tryItOut("M:with(false)return; const __parent__;");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("L:switch(prototype.(this.zzz.zzz)) { case true.constructor: break; yield true;prop;break; if(__noSuchMethod__) {export __iterator__; } else  if (window) /*\n*/ else prototypebreak;  }");
tryItOut("export prop;");
tryItOut("if(<y><z/></y>.hasOwnProperty(\"prop\")) {let __proto__ = [[]]; } else  if (__noSuchMethod__.(*))  else if(#3={a:#3#}) let __parent__; else  if (true) {return; } else {{}gc() }");
tryItOut("<><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let __count__; ({ prototype: __noSuchMethod__, prototype: [] }) = prototype.(<><x><y/></x></>) ^= <x><y/></x>.(3.141592653589793); [[]]) export __parent__");
tryItOut("if(new Iterator(({}))) { if ((<x><y/></x> || __parent__)) Function} else @foo;");
tryItOut("L:if((new (1e81)((false for each (function::__count__ in 1.3)), __noSuchMethod__))) do {continue M; } while(( /x/g ) && 0); else  if (<><!--yy--></>) let __parent__, __parent__ = *::* else {M:if(<x/>) {; } }");
tryItOut("/*infloop*/L:for({}.prop; <x><y/></x>.(false).__lookupSetter__(\"prototype\"); ({prototype getter: (new Function(\"{}\")), <><{__count__}> </{__count__}></>: __proto__ = ({a2:z2}) })) {export let;/*infloop*/M:for( /x/g ; *::*; <><x><y/></x></>) break L; }");
tryItOut("L: return;");
tryItOut("yield constructor;");
tryItOut("while(((this.__lookupGetter__(\"prototype\"))) && 0){return [,]\n__iterator__; }");
tryItOut("/*for..in*/for(var (new (function(q) { return q; })( /x/ , @foo)).__iterator__ in ((function (prototype) { return window.__parent__ = <y><z/></y>() } )((__count__ = ((<><x><y/></x></> for each (__parent__ in prop)).__noSuchMethod__ = (Function)(0)).yoyo(prop.(<x><y/></x>.( \"\" ))))))){if(__noSuchMethod__ = function ([y]) { }) {yield; } else  if ((*::*)()) {var constructor = __parent__, prop = <x/>; } }");
tryItOut("for(let y in []);");
tryItOut("do {let __iterator__; } while((<><x><y/></x></>) && 0);");
tryItOut("L: const \f__iterator__ = undefined;");
tryItOut("with(undefined)__proto__;");
tryItOut("/*infloop*/for(let __parent__; constructor =  /x/g ; (let (__parent__ = window, __noSuchMethod__ = <y><z/></y>) <x><y/></x>)) (<x><y/></x>).__defineSetter__");
tryItOut("if(new (new function (prototype, __count__) { return <><x><y/></x></>; } ())([11,12,13,14].filter, <><x><y/></x></>)) /*infloop*/L:while(undefined)prop = <><x><y/></x></>;");
tryItOut("{return; }");
tryItOut("if(prototype.constructor getter= undefined) {const prop; } else  if ((null)[function::__count__]) {throw <x><y/></x>;return; } const __parent__;");
tryItOut("/*infloop*/do with(0){throw #1#;yield *; } while(@foo);");
tryItOut("if(__count__) { if (<><x><y/></x></>) ;} else {return <x><y/></x>; }");
tryItOut("continue L;");
tryItOut("prop = #1=[#1#].__lookupGetter__(\"__proto__\"), this.*.__proto__");
tryItOut("const __noSuchMethod__ = <x><y/></x>;\n;\n");
tryItOut("constructor = prop;");
tryItOut("const x::__iterator__;return true;");
tryItOut("const __noSuchMethod__");
tryItOut("/*for..in*/for([__proto__, prototype] = (<><x><y/></x></>.eval( \"\" )) in ( /* Comment */) <= new ((({ set __noSuchMethod__() { return -0 } /*\n*/, __proto__ getter: __parent__ }).constructor setter: function (constructor) { gc() } ))()) while((*::*.valueOf(\"number\")) && 0)/*infloop*/for(var [, , ] = (prop = [z1]); <x><y/></x>.__lookupGetter__(\"__iterator__\"); (false /= *::*)) /*for..in*/for(let __noSuchMethod__ = /*\n*/<x><y/></x> in <x\f><y/></x>) yield  '' ;");
tryItOut("let (__count__ = __count__ = undefined, prototype) { ; }");
tryItOut("/*for..in*/M:for(let [__iterator__, prototype] = constructor.prop = window in (<x><y/></x>.(-3/0)).*) {/*infloop*/for(let __parent__; 033.watch(\"constructor\", new Function); __iterator__.(<><x><y/></x></>)) yield; }");
tryItOut("/*for..in*/M:for(var ; =  '' .eval(<x><y/></x>) in false) {__count__; }\n");
tryItOut("{/*infloop*/for(let __count__ = <x/>; \n<><x><y/></x></>; constructor = __parent__) prototype, function::__iterator__ = <x><y/></x>; }");
tryItOut("L: {1e81;let prop = #1#; }");
tryItOut("/*for..in*/L:for(const (<x/>.isPrototypeOf(*))(this.__defineGetter__(\"__parent__\", function  __proto__ (__count__, prototype) { return this } )) in ((new Function)(prop['prototype'] = (prop.__count__ = prop)\n >>=  for (constructor in [1]) if (({}).hasOwnProperty)))){/*infloop*/for(constructor; #1=[#1#]; <x><y/></x>) export __noSuchMethod__; }");
tryItOut("var __parent__;");
tryItOut("/*infloop*/do return; while(({a1:1}));");
tryItOut("for(let y in [5,6,7,8]) throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = prop = window in <x/>) throw ({prototype: (-0)});");
tryItOut("var __parent__, __iterator__;\n__proto__, propyield  /x/g ;\nif(<x><y/></x>) {continue ;var prototype = <><x><y/></x></>, prop =  '' ; }");
tryItOut("if((<x><y/></x>.__lookupGetter__(\"__proto__\"))) {{export *;\t } } else  if ((*.isPrototypeOf((new (<><x><y/></x></>)())))) yield; else {break M;/*for..in*/for(const __count__ in function(id) { return id }) {*;throw <><x><y/></x></>; } }");
tryItOut("if(!<x/>) {if(*) { if (@foo) {export *; } else {return; }/*\n*/} } else {case 8: function  __iterator__ (constructor, __iterator__)constructorbreak; __noSuchMethod__;;case 5: return this;default: const prop:  '' ;(<><x><y/></x></>);break; case 5: continue ;break; case {}: let __count__ = *, __parent__ = this;break;  }");
tryItOut("do {this.zzz.zzz; } while(((<x><y/></x>.__proto__ = [11,12,13,14].sort)) && 0);");
tryItOut("if(this) (5.0000000000000000000000); else  if (new (new Function)()) /*infloop*/for(const __proto__ = <><x><y/></x></>;  /x/ ; <><x><y/></x></>) return;var prototype, __parent__ = null;");
tryItOut("with({}) { yield; } ");
tryItOut("try\t { this.zzz.zzz; } catch(__iterator__) { throw __noSuchMethod__; } ");
