tryItOut("{{} }");
tryItOut("/*for..in*/for(const prop in (([1,2,3,4].slice)((function ([y]) { })()))){case <x><y/></x>: break; default: {} }");
tryItOut("(this.\t__defineSetter__(\"constructor\", function (__parent__ getter: prototype, prototype) { return __parent__ } ));");
tryItOut("/*infloop*/M:for(prop; ({ __count__: prototype, __proto__: ({ constructor: prototype, __count__: __proto__ }) }) = __count__ = this ? this : <><x><y/></x></>; new eval()) {return <x/>\n }");
tryItOut("L:if(~-3/0) export __iterator__; else  if ((eval(\"continue M;\",  '' ))) {export __parent__;prototype = <x/>, __parent__; }");
tryItOut("function::__noSuchMethod__ = prototype;");
tryItOut("if( /x/g ) {return undefined; } else  if (window) yield; else {[1,2,3,4].slicevar __proto__, prop = prop; }");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map)) { if ('fafafa'.replace\n(/a/g, function  constructor () { return !#3={a:#3#} } )) } else {/*infloop*/for((window >= @foo.__proto__).throw(<y><z/></y>--); __iterator__.__count__; (yield <x/>.__defineSetter__(\"__iterator__\", function  constructor (__parent__) '' ))) var prop; }");
tryItOut("if((window)(, (({__count__: <><x><y/></x></>})() >>>  '' ))) if((p={}, (p.z = null)())) M:with(true){} else  if (* .@*::  ''  == constructor) export *; else {function(y) { yield y; let __noSuchMethod__, __noSuchMethod__;; yield y; }break ; }");
tryItOut("/*infloop*/do return; while(new __iterator__ = <x><y/></x>.valueOf(\"number\")(prop = <x><y/></x>.__lookupSetter__(\"__iterator__\")));switch(yield let (prototype) <><x><y/></x></>.valueOf(\"number\")) { default: M:with({__parent__: #3={a:#3#}})export __count__;M:if(window) { if (( /* Comment */__parent__ = [z1,,])) {<><x><y/></x></>;\nvar __count__ = null, __iterator__;\n/*infloop*/M:for(this; <y><z/></y>; __noSuchMethod__) {return;yield <><x><y/></x></>; } }} else continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in false) ;");
tryItOut("{(<y><z/></y>).watch }");
tryItOut(" const __iterator__;");
tryItOut("/*infloop*/while(.__lookupSetter__(\"__proto__\")){gc() }");
tryItOut("/*infloop*/while(((__proto__ = <x><y/></x>) in <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice) :: this))var __count__ = new function  __noSuchMethod__ () { function  prop (__parent__, __iterator__) { return prop }  } ();");
tryItOut("eval");
tryItOut("return;");
tryItOut("{return 1e-81; }");
tryItOut("L:if([15,16,17,18].filter([1,2,3,4].slice, (__iterator__ = null, prop = <><x><y/></x></>)())) { if ((<x><y/></x> >= <y><z/></y>).__defineSetter__(\"__iterator__\", function (constructor, prop) { return <x><y/></x>.isPrototypeOf(<><x><y/></x></>) } )) if(()) { if (*::*.__count__) while((0) && 0){return;continue M; } else {gc() }} else {__proto__; }}");
tryItOut("if((<y><z/></y>if(({constructor: *::*})) ; else  if (\n<x><y/></x>) {prototype = <x/>, constructor = true; } else export prototype;)) {;/*infloop*/do {(*::*); } while(window.throw(<x><y/></x>)); }");
tryItOut("try { constructor = __proto__; } catch(__noSuchMethod__) { this.zzz.zzz; } ");
tryItOut("this.zzz.zzz;");
tryItOut("switch((p={}, (p.z = __proto__)())) { default: export *;break;  }");
tryItOut("if(delete <x><y/></x>) export *;");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = __noSuchMethod__ in <x><y/>\t</x>) return false; const prototype;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, constructor] = *::* / prototype in  '' ) __count__((yield [,]).__noSuchMethod__ = +false)");
tryItOut("if( /* Comment */window.throw( \"\" ) &= ([]).call(#3={a:#3#}, <><x><y/></x></>).__count__ = __iterator__.(null = <><x><y/></x></>)) {throw prop;export *; }");
tryItOut("with(eval(\"return;\", null).watch(\"__parent__\", function () { yield (__noSuchMethod__ = __iterator__) } ))if(__noSuchMethod__.((-0))) yield; else  if ([11,12,13,14].filter) {(prop).call }");
tryItOut("constructor");
tryItOut("L:if(<><x><y/></x></>.yoyo(033).propertyIsEnumerable(\"__iterator__(*)\")) { if (new ((1 for (x in [])))()) {return ({});\n\nwith({}) gc() } else \f{;return (new <x><y/></x>); }}");
tryItOut("let(__noSuchMethod__, prop) { __count__ = __count__;");
tryItOut("return <><x><y/></x></>\n");
tryItOut("if([__count__.__noSuchMethod__].filter((window).call)) { if (true) let prototype = <y><z/></y>;} else  '' ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <><x><y/></x></>) prototype, __parent__;");
tryItOut("/*for..in*/for(constructor = (get = *) in __count__ = ) if(<><x><y/></x></>) yield;");
tryItOut("if(((this.zzz.zzz) ^= undefined)) {/*for..in*/for(var __noSuchMethod__.__noSuchMethod__ in <y><z/></y>) {export constructor; }break ; }");
tryItOut("switch(new ((1 for (x in [])))('fafafa'.replace(/a/g, (this.__defineGetter__(\"prop\", .2)).watch))) { case this: case 3: if( '' ) return; else  if (this.zzz.zzz) {return <x><y/></x>; }break; default: break; if(__iterator__.prototype) { if (null.eval(true)) {; } else yield <y><z/></y>;}L:if([15,16,17,18].map(function  __noSuchMethod__ ()({a2:z2}), @foo)) {} else  if ((eval(\"yield;\",  ))) {undefined; } else continue ;break;  }");
tryItOut("L: export __noSuchMethod__;");
tryItOut("L: __proto__ = <><x><y/></x></>, __count__ = 3.141592653589793; }");
tryItOut("try { let(prototype = prop.prototype = this) { __count__ = __iterator__; } catch(__count__) { for(let y in []); } ");
tryItOut("L:do do {with((<><x><y/></x></>.valueOf(\"number\")))export *; } while((((<x/>)[<x><y/></x>])) && 0); while((constructor if (constructor)) && 0);");
tryItOut("L:while((<><x><y/></x></>()) && 0){throw  '' ;M:if((function (prop, prototype) { return * } ).call(__proto__ .@ null, (({}))(<><x><y/></x></>),  '' )) { if (<{__proto__}><!--yy--></{__proto__}>) {return <><x><y/></x></>;(<x/>); } else {export __proto__;<x><y/></x> }} }");
tryItOut("/*for..in*/for(const __iterator__ in ([11,12,13,14].sort)) {L: {return  /x/ ; } }");
tryItOut("/*infloop*/L:for(constructor; eval(\"1.2e3\",  /x/ ); ({ (__proto__ = (-0)): [__count__, __parent__, constructor, constructor], __proto__: __count__ }) = [constructor = <><x><y/></x></>].map(@foo)) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const 1e-81.throw( /x/g ) .@ window.unwatch(\"__count__\")['__iterator__'] in __proto__.__parent__ = new Math.pow().__parent__ = #2=<x><y/></x>/*\n*/) {let (__count__, prop) { while((<><x//h\n><y/></x></>) && 0){throw @foo; } } }");
tryItOut("/*for..in*/for(let prop in (((<><x><y/></x></>)[.2])((window)(\tprototype) = [11,12,13,14].filter)));");
tryItOut("with({__noSuchMethod__: [11,12,13,14].map\n})<x><y/></x>;");
tryItOut("yield;");
tryItOut("if(this) { if (({ prop: prototype }) =  \"\" ) {/*infloop*/for(prop; this; <x><y/></x>) {return undefined; }{} }} else {yield <x><y/></x>; }");
tryItOut("/*for..in*/for(const prop in ((new Function)((this.__defineGetter__(\"prop\", eval))[eval(\"<y><z/></y>\", <x><y/></x>)])))export *;");
tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("/*for..in*/for(\t[__proto__, __count__] = 'fafafa'.replace(/a/g, ([]).watch) in ({a2:z2})) const __parent__ = (-0), prototype = __proto__;");
tryItOut("let (__noSuchMethod__, __parent__) { while((@foo) && 0)return <x><y/></x>; }");
tryItOut("/*for..in*/for([__count__, __proto__] = <x><y/></x>.__proto__ = <><x><y/></x></>.__lookupSetter__(\"prop\") in (new (@foo)(prototype.__iterator__ = true % window, (( /x/g ).*)))) {{}for(let y in []); }");
tryItOut("with(((((1 for (x in []))).call(null,  /x/g , *)) if (null))){return this;null; }");
tryItOut("/*infloop*/while(*::*){yield <><x><y/></x></>;; }");
tryItOut("while((<x/>) && 0){export *; }");
tryItOut("if(this.__defineGetter__(\"constructor\", (1 for (x in [])))) {/*for..in*/for([__proto__, constructor] = __proto__ in <><x><y/></x></>) {window;\f } } else { }");
tryItOut("do {L:do yield <x><y/></x>; while(((<><x><y/></x></>.__lookupGetter__\"prototype\"))) && 0); } while(((<x/> for (__count__ in @foo))) && 0);");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("prototype.([1,,])");
tryItOut("/*for..in*/for(__proto__ in <><x><y/></x><>.__defineSetter__(\"__iterator__\", [1,2,3,4].map)) {/*infloop*/for(<><xxx>{prop}</xxx></>; 'fafafa'.replace(/a/g, *); (yield window)) const __parent__, prototype = <x><y/></x>;/*infloop*/for((prototype%=constructor); __proto__ = constructor; ({constructor: <x><y/></x> }))  }");
tryItOut("/*infloop*/for(let prototype = new new Function([,].constructor = *);  \"\" ; (({ constructor: [] }) = new  '' (export *;, window) , (*::*.__defineGetter__(\"__count__\", function  __parent__ () { return; } )))) throw <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__noSuchMethod__) in <x/> in  /x/ ++) export *\nyield;");
tryItOut("window");
tryItOut("{prototype = ({})/*for..in*/__iterator__ }");
tryItOut("");
tryItOut("/*for..in*/for(let __count__ = .2 in <y><z/></y>) {export __noSuchMethod__;function(y) { yield y; prop; yield y; } }");
tryItOut("return constructor;");
tryItOut("/*for..in*/L:for([__proto__, constructor] = (-1) in -3/0) ;");
tryItOut("if(((<x><y/></x> ? *::* : [,,z1] for each (__iterator__ in this) if (@foo)))) { if (( /* Comment */<x/>.yoyo(<><x><y/></x></>))) \tswitch({let constructor = <><x><y/></x></>; }) { case 7: ;default: return;break; case 3: case (new Function).call(4., ): export *;break;  }} else {do throw null;\t while((Function(1.3, __parent__)) && 0);gc() }");
tryItOut("let (@foo['__count__'] = (Math.sin)(), __noSuchMethod__) { var constructor, __parent__ = <><x><y/></x></>; }");
tryItOut("throw constructor;");
tryItOut("/*for..in*/L:for(const false =  /x/g  / new (033)( /x/ , case 5: ) in  /x/ ) {return <><x><y/></x></>; }\nlet (prop) {  }");
tryItOut("/*infloop*/while( '' )yield;");
tryItOut("/*for..in*/M:for(let __parent__ = ~prototype in ((uneval(this)))) let (__parent__, __noSuchMethod__) { yield <><x><y/></x></>; }");
tryItOut("do return  /x/ ; while((new (*)(false)) && 0);");
tryItOut("/*infloop*/L:do {export *; } while(033.watch(\"prop\", eval));");
tryItOut("{yield; }");
tryItOut("L: M:while((([window].filter(({}).hasOwnProperty))) && 0)default: gc()break; ");
tryItOut("{/*infloop*/for(const __proto__ =  /x/ ; constructor = <><x><y/></x></>; 033.yoyo(false)) gc() }");
tryItOut("while((+true) && 0)export __iterator__;");
tryItOut(" { while((0x99) && 0)prop = <x/> >>= [15,16,17,18].filter(function  constructor (constructor, __noSuchMethod__) '' , this) } ");
tryItOut("/*infloop*/do {const  \"\"  = 033; } while([15,16,17,18].sort(new Function, -1));");
tryItOut("/*for..in*/for(var prop in ((({}).__lookupGetter__)(<y><z/></y>.throw(null)))){let __parent__; }");
tryItOut("/*infloop*/for(var prop = <x/>; window; <x/>) gc()");
tryItOut("try { prop = prop; } catch(__parent__) { try { const each; } catch(__count__) { {} } finally { export __proto__; }  } finally { for(let y in []); } ");
tryItOut("{/*infloop*/for([1]; 1.2e3; yield)  }");
tryItOut("yield (<bbb xmlns=\"1e-81\"><x><y/></x> </bbb>)((({__iterator__: prototype, __noSuchMethod__:  ''  })), undefined .@*:: this);");
tryItOut("L: {{} }let (prop = (function::constructor.__iterator__ = *::*), __proto__ = __noSuchMethod__) { throw __proto__;  }__count__, ({ prototype: __proto__ })");
tryItOut("[,,z1];");
tryItOut("/*infloop*/M:for(let __parent__; <><x><y/></x></>; __proto__ = __parent__) {/*infloop*/do return; while(__iterator__); }");
tryItOut("/*infloop*/while((window .@ this))let __parent__;");
tryItOut("/*infloop*/for(<x><y/></x>; __parent__; <y><z/></y>) return <y><z/></y>;");
tryItOut("if(constructor) {L: {gc()return \r#1#; }throw [z1]; } else  if (window >> 'fafafa'.replace(/a/g, <><x><y/></x></>).*) {(window); }");
tryItOut("with({__noSuchMethod__: let (__noSuchMethod__) arguments.hasOwnProperty(\"function::__iterator__\")})yield;");
tryItOut("for(let y in []); const __noSuchMethod__;");
tryItOut("let (__proto__) { [z1] } const __iterator__\ndelete = <x/>;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) var __count__;\n");
tryItOut("if((((p={}, (p.z = <x/>)())) if (__iterator__))) { if (export __noSuchMethod__\t) __count__ = function::prototype; else {export *;gc() }}");
tryItOut("(1e+81)");
tryItOut("/*for..in*/for(var __count__ = @foo\n in *) {return; }");
tryItOut("let (__proto__, __iterator__ = <><x><y/></x></>) { yield; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ((\t{ prototype: prototype }) = (({prototype: [z1],  get prototype __noSuchMethod__ (__noSuchMethod__, constructor) { return <y><z/></y> }  })) ? let (__parent__) window : ).__parent__ in  /x/ [[[1]]]) {switch(({ __count__: __count__, __iterator__: ({ constructor: __iterator__, __count__: __proto__ }) }) = [,,].__lookupSetter__(\"__iterator__\")) { default: switch(window) { default: export prop; } } }");
tryItOut("L:with(#1=[__count__ = (([1,2,3,4].slice)())]){return null; }");
tryItOut("/*for..in*/for(let prototype in (((((gc).call(__noSuchMethod__, ))).__defineSetter__)([*::*])))return;");
tryItOut("return;");
tryItOut("return <><x><y/></x></>;\nswitch(__iterator__) { default: return <><x><y/></x></>; }\n");
tryItOut("L: {return;function::prop = [] *= true }");
tryItOut("throw __proto__;gc()");
tryItOut("if(true) {export __iterator__; }");
tryItOut("\n");
tryItOut("/*infloop*/M:for(const ({ this: constructor, constructor: prototype }) = constructor = <><x><y/></x></>; ({__count__: <><x><y/></x></> }); throw this) yield #1=[#1#];");
tryItOut("M:do __count__, __proto__; while(((prop = <x/>)) && 0);");
tryItOut("/*for..in*/M:for(var [11,12,13,14].map['constructor'] in (__iterator__ = __noSuchMethod__) * <><x><y/></x></> & [1]) {export prototype; }");
tryItOut("__iterator__;");
tryItOut("/*infloop*/M:for(<x/>; window; (function ([y]) { })()) set");
tryItOut("M:if((true[<x><y/></x>])) { if (#3={a:#3#}--) {yield; } else continue ;}");
tryItOut("switch(Math.sin( '' )) { case (let (__count__) (new ('haha'.split)(<x><y/></x>)))++: ;break;  }");
tryItOut("M:if(<y><z/></y>) { if (true) {__parent__ =  /x/g let __iterator__; } else {__count__, __count__;break \tM; }}");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = [] in <y><z/></y>) {const __noSuchMethod__, __iterator__;-3/0; }");
tryItOut("{}\n");
tryItOut("return; const __count__;");
tryItOut("L: { }");
tryItOut("with({constructor: (yield null.__defineGetter__(\"__count__\", [1,2,3,4].slice))})if(<><xxx {__iterator__}={true} /></>) continue L; else yield;");
tryItOut("if({}) { if ((this.__defineSetter__(\"__proto__\", [1]))) return;} else let __proto__ = <x/>, __noSuchMethod__ = this;");
tryItOut("if(yield (this.zzz.zzz)) { if (/a/gi(throw __parent__;, <y><z/></y>)) let (__count__ = prop, __noSuchMethod__) { false; } else D} const  ;");
tryItOut("if(\t[15,16,17,18].filter(Function, *)) {export *; } else  if (3.141592653589793) {export constructor;if(__noSuchMethod__\n) { if (<><x><y/></x></>.__noSuchMethod__ = <><x><y/></x></>) { } else {( /x/g );return; }} } else export *;");
tryItOut("/*infloop*/for(({ __count__: (<x><y/></x> *= this)((|=.__lookupSetter__(\"prop\"))), __parent__: [, , prop, ({ __iterator__: ({ getter: prototype, __noSuchMethod__: prop }), __proto__: ({ __iterator__: prop }) })] }) = <x/>; <x/>; (({constructor: undefined })).yoyo(<><x><y/></x></> &= <x><y/></x>)) return 5.0000000000000000000000;");
tryItOut("M:if(constructor, prop) {export __noSuchMethod__;export *; } else  if (#1#) yield <x><y/></x>;");
tryItOut("/*for..in*/M:for(const __parent__ in ((Math.sin)(<><x><y/></x></>))){gc() }");
tryItOut("if(((1 for (x in []))).call( /x/g , new ({}).__lookupGetter__(*::*.prototype), (__proto__.__noSuchMethod__) @ 1.2e3 = *)) {/*for..in*/for(var __parent__ in ((function () { yield prop ?  ''  : #1=[#1#] } )('fafafa'.replace(/a/g, <><x><y/></x></>))))return __iterator__;var constructor = ({a2:z2}), prototype = <x><y/></x>; } else  if (this.__defineSetter__(\"constructor\", function  __count__ () { yield <><x><y/></x></>; } )) {if(__count__) gc() } else {/*infloop*/for(var prop; <><x><y/></x></>.throw(prototype); null++) throw [[]]; }");
tryItOut("export prop;\nif(<><x><y/></x></>)  else {function(y) { yield y; prop = false;; yield y; }; }\t\n");
tryItOut("{;export *; }");
tryItOut("let (__parent__, constructor) { gc() } const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in let (__noSuchMethod__, prop =  '' ) __parent__.__lookupGetter__(\"__noSuchMethod__\")) {/*infloop*/for(let ({ prototype: ({ __iterator__: __parent__ }), constructor: prop }) = +<><x><y/></x></>.unwatch(\"constructor\"); <x><y/></x>.(*::*).unwatch(\"__proto__\"); (this.__defineGetter__(\"prototype\", function () { return window } ))) /*infloop*/for(this; this; (function ([y]) { })()) {{} } }");
tryItOut("/*infloop*/for(([1,2,3,4].slice).call(<x><y/></x>, ); ++#1#; ([__proto__] = window)) {{let __count__, __count__ =  /x/ ;{}; }-0 }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in ('fafafa'.replace(/a/g, gc))) /*for..in*/for(const __proto__ = ((p={}, (p.z = window)())) in __proto__ = ({ __count__: prototype, prototype: set })) {gc() }");
tryItOut("constructor");
tryItOut("yield ((uneval((this.__defineSetter__(\"__proto__\", Math.pow)))));");
tryItOut("/*for..in*/for(prop in (((true).apply)((uneval(null))))){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (new function  __proto__ (prop) { const prop = <x><y/></x>, __iterator__ = <><x><y/></x></>; } (this)['__iterator__']+=(#=[[11,12,13,14].sort]))) {/*for..in*/M:for(var __count__.prop in <x/>) {var constructor = <><x><y/></x></>, __iterator__; } }");
tryItOut("/*infloop*/while(<x/>)export *;");
tryItOut("{L:while((yield <y><z/></y>) && 0)\f{return <><x><y/></x></>; }throw <x/>; }");
tryItOut("({ __proto__: [], __noSuchMethod__: __proto__ }) = __proto__;");
tryItOut("/*for..in*/L:for(var prop = new ([,,z1])(new <x/>(function::prototype), <y><z/></y>) in 3.yoyo(function(id) { return id })) <x/>;");
tryItOut("switch(<y><z/></y>.__proto__ = @foo) { default: break; case eval(\"({a1:1}); const prop;\", -0):  }\n{if(<>function(y) { yield y; ; yield y; }</>) { if (false) {(<x/>); }} else {;continue L; } }\n");
tryItOut("/*infloop*/for/*\n*/(prop; ({a1:1}); this.zzz.zzz) {export *; }");
tryItOut("while((null++.hasOwnProperty(\t\"constructor\")) && 0){;x><gc() /></x; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("L: { }\n{/*infloop*/M:do {throw null;yield false; } while( /x/g );{} }");
tryItOut("with(this.__defineGetter__(\"constructor\", ((new Function(\"if(<x><y/></x>) {function (__count__, constructor) { yield; } gc() } else export *;\"))).apply)){let (prototype = 3.141592653589793) { with( /x/g .__lookupSetter__(\"prop\"))let constructor; }/*for..in*/M:for(__iterator__ in ((function  __count__ () { break ; } )((033)[this]))){;function::prop = 1.2e3; } }");
tryItOut("L:switch(<x/> <= [,,z1]) { case 9: let (constructor =  /x/g ) { export *; }const __iterator__, __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in new Function(*::* >>> true)) {var prototype = undefined;if(*) let prop = this, __count__; else  if ([]) (*::*) }");
tryItOut("L: if(+__iterator__ = *::*) var __parent__ =  \"\" , __count__; else  if (__noSuchMethod__ = <x><y/></x>) return; else {<x/>export prototype; }{}");
tryItOut("/*for..in*/for(__proto__ in (('haha'.split)([z1]))){yield ({a1:1}); }");
tryItOut("/*infloop*/while(\n!__parent__){ /x/ ; }");
tryItOut("L:if((yield [1].__lookupGetter__(\"constructor\"))) {let (__parent__ = *) { __noSuchMethod__, getter; }var prop; } else ;");
tryItOut("while(((constructor = *)) && 0)export *;");
tryItOut("if(__iterator__( '' ) = false - (0.1.__noSuchMethod__ = <x/>.throw(<><x><y/></x></>))) {eval } else  if ([prop, , \t({ __proto__: prototype }), , ] = [<x/>]) {/*infloop*/L:for(const __parent__ = <><x\f><y/></x></>; __parent__; *::*) {__proto__let prop = constructor; }__iterator__(<><x><y/></x></>);export *; }");
tryItOut("/*infloop*/for(((({ set __parent__(__iterator__, __proto__) { return true }  }) for (__proto__ in *))); <><x><y/></x></>.unwatch(\"constructor\"); ( /x/ )) yield <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in  /x/ --) {const __proto__ = (function ([y]) { })(), prototype = <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__iterator__ in [[]]) {<><x><y/></x></>; }\ndo (({})); while(((eval(\"yield\", ({a1:1}).__lookupSetter__(\"__noSuchMethod__\") >>= <x/>))) && 0);\n");
tryItOut("/*infloop*/do {switch(true ? *::* : <x><y/\f></x>) { case 8: return;yield;break;  }true; } while(1e-81);");
tryItOut("/*for..in*/for(const prop.__proto__ getter= ({}).hasOwnProperty.__iterator__ in (*).__defineSetter__()) /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (window , <x/>)) return this;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("with(@foo){let __count__ = <><x><y/></x></>;export *; }");
tryItOut("/*infloop*/while(eval(\"<><x><y/></x></>\", undefined)){let __iterator__ = __noSuchMethod__, __iterator__; }");
tryItOut("/*for..in*/for(new [1,2,3,4].map([[1]], #3={a:#3#}).prop in ((new  '' ( /x/g , [z1])++)()))/*infloop*/for(delete = -3/0; null <= null; 0x99--) {__proto__, __iterator__;{} }");
tryItOut("/*infloop*/for(([1,2,3,4].slice)(true.propertyIsEnumerable(\"__parent__\")); true; (<><x><y/></x></> !== (__noSuchMethod__ = <y><z/></y>))()) \freturn;");
tryItOut("L:if(function ([y]) { }) {export *;export *; } else return  /x/g ;");
tryItOut("/*for..in*/M:for(__proto__ in this) {prototype = false, constructor; }");
tryItOut("/*infloop*/for(__parent__; ({ prop: prop }) = ({ __noSuchMethod__: prop }); (String((<y><z/></y>)(<><x><y/></x></>),  { yield -1 } )).yoyo((p={}, (p.z = constructor = <x><y/></x>.propertyIsEnumerable(\"__count__\"))()))) {/*infloop*/for(yyy; (({a1:1}).watch(\"__parent__\", /a/gi)); (-0)) ; const get;if(eval(\"prop\", <><x><y/></x></>)) {yield;yield __proto__; } else  if ([1] ? <><x><y/></x></> : <x><y/></x>) {<><x><y/></x></>;gc() } else yield; }");
tryItOut("{(__iterator__ = <x><y/></x>)(prop.__parent__) }");
tryItOut("L:if([0.1].filter( \"\" )) throw window; else  if (default: case 7: return;break; case 5: break; case prop: return @foo;case break L;: case 2: case 3: break; .unwatch(\"prop\")\t) yield; else //h\nexport *;");
tryItOut("/*infloop*/for(let prop; (({prototype = @foo, prototype })) *= (new <x><y/></x>(*, undefined)); <x><y/></x>.(this)) const prop = (function ([y]) { })(), __count__;continue ;");
tryItOut("__iterator__ = constructor;");
tryItOut("return;");
tryItOut("/*for..in*/for(const __count__ = (__proto__) in ((-1) -=  '' ).throw(__noSuchMethod__ = prop)) {export __count__; }");
tryItOut("/*infloop*/for(function::prototype = * ? [[1]] : <x>//h\n<y/></x>.isPrototypeOf(()); (yield (<x><y/></x>++).@*); 3.141592653589793) yield (({__iterator__ getter: Function, __iterator__ setter: function(q) { return q; } }));");
tryItOut("{try { let(prototype = 1.3, __parent__) { yield; } catch(__count__) { let(__iterator__ = this) { return .2; }  }");
tryItOut("var __iterator__, prop;");
tryItOut("with([@foo if ( /x/g )]){(prop); }");
tryItOut("M:do (<x><y/></x>); while((<x/>) && 0);");
tryItOut("/*for..in*/for(prototype in constructor) throw @foo;");
tryItOut("try { throw __iterator__; } finally { for(let y in []); } ");
tryItOut("{/*infloop*/L:do continue L; while(null); }");
tryItOut("/*infloop*/for(var __iterator__;  /x/ ; <><x><y/></x></>.@*) /*infloop*/while(<y><z/></y>.__defineSetter__(\"__proto__\", 0))\tconst __noSuchMethod__;");
tryItOut("try { __proto__ = *; } finally { (constructor); }  const __proto__;");
tryItOut("<x><y/></x>;constructor = *\n");
tryItOut("export *; const __count__;");
tryItOut("if(this) {throw *; } else  if (3/0) {{}throw  '' ; }");
tryItOut("/*for..in*/for(let [function::prototype, function::constructor] = __count__%=(<><x><y/></x></>(<><x><y/></x></>) >>= (__noSuchMethod__)[prop]) in (false = <><x><y/></x></>).__lookupSetter__(\"__iterator__\") ? (\ntrue) : (yield this)) do undefined; while(([11,12,13,14].map) && 0);");
tryItOut("if(((yield (yield)))[].unwatch(\"__parent__\")) {let(__iterator__ = <x><y/></x>, __parent__) { var __noSuchMethod__;L:while((this) && 0){const __iterator__, __iterator__; } } else  if (('fafafa'.replace(/a/g, ({}).hasOwnProperty))) gc()\n else ;");
tryItOut("L:if(\tprototype = constructor) { if (delete true) {{yield (function ([y]) { })(); }; }} else k");
tryItOut("L: let(({ __noSuchMethod__: __iterator__ }) = yield  '' ) { let(__parent__ = __count__) ((function(){throw <x><y/></x>;})());");
tryItOut("export __noSuchMethod__;\n;\n");
tryItOut("if(new ([z1,,])(__count__ = ({ constructor: prototype, prop: __parent__ })) !== <><x><y/></x></>.unwatch(\"prototype\")) { if (* < <x/>) try { yield; } catch(__iterator__ if (function(){export __parent__;})()) { return; } catch(__noSuchMethod__) { {} } } else {yield  '' ; }");
tryItOut("if(*::*) {const __proto__;return window; } else {continue M; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) var __count__ = <x><y/></x>;");
tryItOut("yield #1=[window];");
