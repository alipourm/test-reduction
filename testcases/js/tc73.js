tryItOut("let (constructor = 1e+81) { with({__iterator__: <><x><y/></x></>})export <><x><y/></x></>; }\n/*infloop*/while(this.__defineSetter__(\"__iterator__\", new Function).hasOwnProperty(\"constructor\"))*::*;");
tryItOut("switch(<><x><y/></x></>--) { default: break;  }");
tryItOut("({ constructor: ({ prototype: ({ constructor: ({ __iterator__\f: ({ __proto__: prop }) }) }), __count__: ({ prototype: ({ __noSuchMethod__: [], function::prop: (\t{ prototype: ({ prop: ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: prop }) }), __count__: ({ prototype: ({ constructor: prop, constructor: __parent__ }), __parent__: ({ prototype: constructor, constructor: prototype }) }) }) }) }) }) }) = __proto__;");
tryItOut("M:if(new RangeError(([[,,]]))) {<y><z/></y>;while((__parent__) && 0){var prototype = @foo; } }");
tryItOut("gc()");
tryItOut("do {let __noSuchMethod__ = @foo;{throw undefined; } } while((({ __proto__: prop }) = (__proto__ = <><x><y/></x></>)) && 0);");
tryItOut("if(1e81) { if (prop) {export *; } else {yield; }}");
tryItOut("L: case <x><y/></x>: break; ");
tryItOut("if(new ((new Function(\"/*for..in*//* nogeckoex bug 349964 */ for  each((__parent__) in #1=[#1#]) {const __count__ = <x><y/></x>; }\")))(-([15,16,17,18].filter(function(id) { return id }, prototype).__proto__.hasOwnProperty(\"constructor\")))) {gc()null ^= 1e4; } else {return;let constructor; }");
tryItOut("__iterator__ = constructor;");
tryItOut("let(prototype = prototype) { let(__parent__ = {}, __iterator__ = undefined) { throw <x><y/></x>;");
tryItOut("let (__noSuchMethod__)\t { var prop = prop, __parent__ = window; }");
tryItOut("if(1.2e3.yoyo( \"\" )--) break L; else  if ((new (<y><z/></y>)(prototype, constructor))) { } else {}");
tryItOut("L:if(this.__defineGetter__(\"prototype\", function (constructor, prop)(function ([y]) { })())) /*infloop*/while(#3={a:#3#})export *;");
tryItOut("gc()\nyield <x/>;\n");
tryItOut("if(((__count__)()).__lookupSetter__(\"__parent__\")) ");
tryItOut("with({}) throw __noSuchMethod__;");
tryItOut("return window;");
tryItOut("{M:with({prop: prototype = null}){{}continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in <><x><y/></x></>) const __count__, __iterator__;");
tryItOut("/*infloop*/L:for(@foo @ null; this.__defineSetter__(\"__iterator__\", function  __iterator__ (prototype, __parent__) { yield; } ); <x>//h\n<y/></x>.(this)) { }");
tryItOut("L: {function::__noSuchMethod__; };");
tryItOut("(__parent__);;");
tryItOut("with({x::constructor: yield {}}){return;if((__noSuchMethod__.prototype = <x><y/></x>)) {throw window;const __noSuchMethod__ = <><x><y/></x></>, constructor = __parent__; } }\n");
tryItOut("/*infloop*/for(let ({ prop: function(id) { return id } }) = window; true > ({prop:  /x/g }); __noSuchMethod__ = <><x><y/></x></>) if(033) { if \t(<><x><y/></x></>) gc()} else gc()");
tryItOut("");
tryItOut("if([,,z1].propertyIsEnumerable(\"__iterator__\")) {;do {null;yield; } while((<>\f<x><y/></x></>) && 0); } else export *;");
tryItOut("/*infloop*/M:for(__noSuchMethod__;  /* Comment */ /x/ ; (<x><y/></x>)(<x><y/></x>)) if(4.) { if (*) prototype} else {{}return 5.0000000000000000000000; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in this) yield;");
tryItOut("M:if((<><x><y/></x></>).call(null, <x><y/></x>)) /*for..in*/for(const constructor in ((<><x><y/></x></>)( \"\" ))){break M; }");
tryItOut("if(( \"\"  ? <x><y/></x> : [1,,])) yield null; else  if (__noSuchMethod__ = *::*) {(@foo); }");
tryItOut("if(@foo) {var prop = false, __proto__ = undefined; } else  if (<y><z/></y>[<x/>]) gc()");
tryItOut("with(*( /x/ )){undefined; }");
tryItOut("yield function ([y]) { }\nthrow __iterator__;");
tryItOut("/*infloop*/for(var __proto__ = ({__parent__: prop.( \"\" )\f }); new window().__defineSetter__(\"__noSuchMethod__\", 1.2e3); ({__parent__ setter: (new Function(\"throw <x><y/></x>;\")) })) break ;");
tryItOut("/*infloop*/M:for([*::*.watch(\"__proto__\", ({}))].sort((new Function(\"break ;\"))); window; (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((__noSuchMethod__ = null)))) var prototype =  /x/g ;");
tryItOut("/*for..in*/L:for(let __parent__ = __parent__.getter setter= gc.__iterator__ = function(q) { return q; } in (([,,z1])[*].throw(this.__lookupSetter__(\"prop\"))).@*) {{function::prop; } }");
tryItOut("{M:if(<><x><y/></x></>)  }");
tryItOut("switch( /x/ ) { case 7: break;  }");
tryItOut("/*for..in*/for(const {/*infloop*/do {null;/*\n*/; } while(<><x><y/></x></>); } in __iterator__.__iterator__ getter=  ''  >>> <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) {let prototype = 3, constructor; }");
tryItOut("yield\n(*::*);");
tryItOut("/*for..in*/for(var __parent__ in ((new Function)( /x/g ))){<y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <><x><y/></x></>) __count__;");
tryItOut("(\n@foo)((Math.pow)()) = __noSuchMethod__;");
tryItOut("var constructor; const __iterator__;\n/*for..in*/M:for([prop, __iterator__] = ([z1,,]) in <x><y/></x>) function(y) { yield y; yield <><x><y/></x></>;; yield y; }\n");
tryItOut("gc() const __parent__;");
tryItOut("let(__iterator__, constructor = * ^= window) { ( /x/g )(*) = prototype;");
tryItOut("if((__iterator__ = <><x><y/></x></>.isPrototypeOf((__parent__ = *::*)))) { if (((window).watch)) this;} else return\n/*for..in*/for([__proto__, constructor] = [,,].yoyo((yield [])).isPrototypeOf(1.3 = <x><y/></x>) in RangeError(__count__, (function ([y]) { })())) /*infloop*/while(new (<y><z/></y>)())gc()");
tryItOut("return window");
tryItOut("yield yield  \"\" .watch(\"__count__\", ({}).__lookupGetter__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L for  each(let prop in  '' .__lookupSetter__(\"__iterator__\")) {//h\nlet __iterator__, constructor = <><x><y/></x></>; }");
tryItOut("let(prototype, function::constructor) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*/for(let [constructor, __noSuchMethod__]\f = (Boolean(3.141592653589793, #1#)) in function(id) { return id } ? this : __parent__) {{return;export *; }throw <x><y/></x>; }");
tryItOut("while((*) && 0);");
tryItOut("if((__parent__ = default: /*for..in*/for(const [prototype, *::*] = let (__noSuchMethod__ = window) [[1]] in <><x><y\r/></x></>) ;)) { if (prop = window @  \"\" ) \treturn <x><y/></x>;} else {if(__count__ = <x><y/></x>) yield; }");
tryItOut("throw __parent__;");
tryItOut("return;do let (constructor = <x><y/></x>, __proto__) {  } while((RegExp()) && 0);");
tryItOut("yield <ccc:ddd></ccc:ddd>;");
tryItOut("with({prop: 1e-81.unwatch(\"constructor\").__defineGetter__(\"prop\", (\t<x><y/></x>).watch)}){L:while((this.__defineGetter__(\"__iterator__\", function (__iterator__, __count__) { yield ({prototype: false}) } )) && 0){{} }<bbb xmlns=\"'fafafa'.replace(/a/g, /a/gi)\"><!--yy--></bbb> }");
tryItOut("{/*infloop*/do {@foo;gc() } while(<y><z/></y>);/*for..in*/for(const [__parent__, constructor] = *::* in 1e4) {} }");
tryItOut("/*for..in*/for(prototype in <><x><y/></x></>) let __iterator__ = -1, prototype = this;");
tryItOut("(1.3)");
tryItOut("true;");
tryItOut("with({}) return new (5.0000000000000000000000)(__count__.__count__ = <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\"));");
tryItOut("/*infloop*/M:for([,,z1].constructor; new (Math.sin)(); eval(\"\\f( \\\"\\\"  ?  /x/  : __proto__)++\", (__noSuchMethod__.__parent__))) {let __iterator__ = __iterator__, prop;/*for..in*/for(var [prototype, prop] = * in (-0)) { } }");
tryItOut("if((({__noSuchMethod__: __iterator__ = (default:  .@ function(id) { return id }),  set prop() { __noSuchMethod__ = <><x><y/></x></>; } \t }))) {/*infloop*/while(<>function::prototype</>)yield; }");
tryItOut("const constructor = arguments\nyield <x/>;");
tryItOut("let __noSuchMethod__;");
tryItOut("/*infloop*/M:for([, ] = __noSuchMethod__ = ({__count__: __count__ > 1e81}); .__lookupSetter__(\"constructor\"); ) /*infloop*/while(__noSuchMethod__){{} }");
tryItOut("{with((3/0.@foo)){yield [,,];yield <x><y/></x>; } }");
tryItOut("yield;");
tryItOut("return;");
tryItOut("{throw *::*; }\n/*for..in*/for(let [__noSuchMethod__, __parent__] = .2 in <><x><y/></x></>) this\n(<y><z/></y>);\n");
tryItOut("/*infloop*/for(const ({ prop: __parent__ }) = __count__.watch(\"__parent__\", new Function).*; new (Iterator(*))(); ((\t{constructor: window}))) {for(let y in []); }\r");
tryItOut("");
tryItOut("/*for..in*/for(__count__ = <x/> in ( /x/ .__iterator__)) {L:with({__iterator__: window})*::* }");
tryItOut("L: return *::*;");
tryItOut("return;");
tryItOut("if((constructor = ({a1:1}) && (prototype).call)) { if (new (<!--yy-->)([1,,] & <y><z/></y>, <><x><y/></x></>).__defineSetter__(\"__iterator__\", /a/gi)) switch(true) { default:  }} else break L;");
tryItOut("L:if(<x><y/></x>) yield; else  if (*) {} else { }");
tryItOut("if(__count__.prop =  \"\" ) {{} } else  if (new Iterator()) ");
tryItOut("/*for..in*/for([__proto__, __iterator__] = (true -= prototype) in __count__) {throw null; }");
tryItOut("L:with(__parent__.((([[1]].watch(\"__count__\", constructor))))){let __parent__ = 3.141592653589793; }");
tryItOut("/*for..in*/for(var constructor in *::*) yield ({});");
tryItOut("let (__parent__ = (let)|=<x><y/></x>.([[1]])--, __proto__.__count__ = <x/> != *.__noSuchMethod__) { /*infloop*/for(var \tconstructor = (\nundefined); prop; [{}].map(function  __proto__ \t(constructor) { return <><x><y/></x></> } )) {const __noSuchMethod__ = <\fx><y/></x>, function::__iterator__; } }");
tryItOut("while(( /x/g .__lookupSetter__(\"__iterator__\") ^= <x><y/></x>) && 0){var __parent__, __count__;export *; }");
tryItOut("/*for..in*/for(let prop( '' ) in 1e+81.valueOf(\"number\")) switch((this.__defineSetter__(\"constructor\", function (__parent__-=1e4)[,,z1]))) { case window.unwatch(\"constructor, constructor\"): if(__iterator__ = __noSuchMethod__) { if (0.1) {yield <y><z/></y>;(<y><z/></y>); } else {{}yield this; }}break; default: (__noSuchMethod__);break; break;  }");
tryItOut("yield;");
tryItOut("/*infloop*/while((false[prop]).@foo)(false).apply");
tryItOut("while((({constructor: <x><y/></x>.yoyo(@foo).watch(\"prototype\", ((new Function(\"let constructor;\"))).apply)})) && 0)/*infloop*/do {gc() } while(__iterator__);");
tryItOut("L: export prototype;");
tryItOut("/*for..in*/for([__iterator__, prototype] = new __count__(<y><z/></y>) in  '' ) {export *; }");
tryItOut("if(* ? prototype : * .. undefined)  else  if ((<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\").watch(\"__count__\", Function))) /*for..in*/M:for(let __proto__ =  in true) (@foo);");
tryItOut("with(this && *::*)return [z1];");
tryItOut("var constructor = false; const __iterator__; const constructor;");
tryItOut("with({prototype: (<><x><y/></x></>.__lookupGetter__(\"prototype\") | x::prop.valueOf(\"number\").__defineGetter__(\"<x><y/></x>\", [1,2,3,4].map))})throw return;");
tryItOut("with(<y><z/></y> && [,,z1]){/*infloop*/\ffor(let __count__; __parent__ = 5.0000000000000000000000; (__noSuchMethod__.prop getter= eval)) var prototype; }");
tryItOut("while(([1,,]) && 0){export __proto__; }");
tryItOut("switch(eval(\"(<x><y/></x>);\", __noSuchMethod__)) { default: let (__iterator__ =  \"\" ) { (null); }break; case (prototype.prop = constructor): do yield; while((@foo) && 0);break;  }");
tryItOut("/*for..in*/for(var __iterator__ in ( /x/g .__noSuchMethod__)) const __parent__ = prop, __parent__ = <x/>;");
tryItOut("let (constructor = (this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty) - (uneval()))\n\t, []) { /*infloop*/for(const function::__iterator__; .2 ? window : ({a1:1}); ((yield <y><z/></y>))[<y><z/></y>.valueOf(\"number\")]) {1e4; }\nif(__parent__ = constructor :: function::__parent__ = <><x><y/></x></>) {(this);return; } else  if (<x/>.valueOf(\"number\").__lookupGetter__(\"__proto__\")) {window;const constructor = <>__iterator__</>, __count__ = *; } }");
tryItOut("do prop; while((([,] / [undefined for each (__count__ in 1e4)] && #1#.watch(\"__count__\", (null).__defineSetter__))) && 0);");
tryItOut("L: /*infloop*/do prop = <><x><y/></x></>, __iterator__ = true; while(window);");
tryItOut("let (each) { var prototype, constructor = *\n }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <x><y/></x>) __proto__;");
tryItOut("\tdo {<y><z/></y>;throw  '' ; } while((let (constructor, __noSuchMethod__ = <x><y/></x>) constructor) && 0);");
tryItOut("/*infloop*/L:while(this.__lookupGetter__(\"__noSuchMethod__\"))return;<><x><y/></x></>; const __iterator__;");
tryItOut("M:with( /x/ )");
tryItOut("/*infloop*/for((prop.(<x/>)); <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\"); <x/>.*) {const __proto__;return 1e+81; }");
tryItOut("{yield; } const __iterator__;");
tryItOut("/*infloop*/for([, [, ], constructor, (new (/a/gi)((constructor.@*)))(<y><z/></y>), ({ __iterator__: [, ({ prop: __count__, prototype: ({ __noSuchMethod__: ({ __noSuchMethod__: __parent__ }), __count__: [\t, prop, __count__, , ] }) }), , ({ prototype: ({ __noSuchMethod__: __parent__ }) }), ({ prop: [__count__, ({ __noSuchMethod__: prototype })], __count__: } })], prop: __parent__/*\n*/ })] = \n[15,16,17,18].sort((true).call, __proto__); <x><y/></x> @ <>\f<x><y/></x></> << (eval(\"(#1=[#1#]);\", break ; = <x><y/></x> ? *::* :  /x/g )); 'fafafa'.replace(/a/g, (this <<= <x/>.unwatch(\"__count__\")).watch)) return; const prop;");
tryItOut("/*infloop*/while(window)break M;");
tryItOut("{return; }");
tryItOut("/*infloop*/for(let __iterator__; (#1=[#1#].__defineGetter__(\"__iterator__\", (new Function(\"var __proto__ = ({a1:1});\")))); prop) {gc() }");
tryItOut("{ }");
tryItOut("/*infloop*/M:for(var constructor; ((-1).yoyo(false)); \n0.eval((eval(\"export *;\", window)))) /*infloop*/L:for(var __count__; <><x><y/></x></>;  \"\" ) Math.sinyield;return false;");
tryItOut("if(new ((Array(new <x><y/></x>))\t)(new (<><><!--yy--></></>)(([(__iterator__ = undefined)].map(Math.pow)), (<x><y/></x>[ /x/ ])))) { if ((uneval(this)) >>= [11,12,13,14].map.__lookupGetter__(\"__count__\")) with(<y><z/></y>){return <x><y/></x>;let constructor = function ([y]) { }; }\n else {gc() }}");
tryItOut("L: \fthrow <x><y/></x>\nexport *;");
tryItOut("if(function::__proto__ setter: true) {} else  if (__noSuchMethod__.yoyo(<x\r><y/></x>.__defineSetter__(\"constructor\", (1 for (x in []))))) yield; else gc()");
tryItOut("{{}export *; }");
tryItOut("yield \t__iterator__.__defineSetter__(\"prototype\", (this).apply) *= __iterator__ === <y><z/></y>.@foo;");
tryItOut("const constructor, x::*::* = __noSuchMethod__;(@foo);");
tryItOut("throw [z1,,];M:if(<y><z/></y>) let <><x><y/></x></> = window, __parent__ = this; else {{}{} }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("{for(let y in []);with({prop: <x/>})arguments; }");
tryItOut("({ constructor: prototype }) = constructor;");
tryItOut("let(__iterator__) ((function(){constructor = prop;})());");
tryItOut("<y><z/></y>; const __noSuchMethod__;");
tryItOut("with({__noSuchMethod__:  '' .constructor =  /x/ })throw *::*;");
tryItOut("do {\n } while(((({__parent__: <><x><y/></x></> }))[({__parent__ getter: (window).apply }).watch(\"__parent__\", 'haha'.split)]) && 0);");
tryItOut("switch(((<><x><y/></x></>.__defineGetter__(\"constructor\", [1,2,3,4].map)).__lookupGetter__(\"__iterator__\") , \nvoid prop)) { case 2: let constructor\n/*infloop*/do {return; } while(null);break; with({}) { let __proto__, __proto__; } break;  }");
tryItOut("with(eval(\"<><x><y/></x></>\", __parent__)){function  constructor () { return <><x><y/></x></> }  }");
tryItOut("\nL: {gc() }");
tryItOut("/*for..in*/L:for(const __proto__ in *) (.__defineGetter__(\"__proto__\", function (constructor) { var delete, prop; } ));");
tryItOut("{<x/> }");
tryItOut("(false);");
tryItOut("/*infloop*/for(const prop; ; __parent__) {let __count__ = ({a2:z2}), prop = undefined; }");
tryItOut("if((p={}, (p.z = prototype)())) var prop, prop; else /*for..in*/M\t:for([__iterator__, yield] =  \"\"  in 033) __noSuchMethod__\nswitch(({a2:z2})) { case 0: break;  }");
tryItOut("if((this.@foo.@foo)) with({__proto__: #1#})return;");
tryItOut("/*infloop*/for(var __noSuchMethod__;  \"\" ; undefined.throw(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))) switch(<x><y/></x>) { default:  }");
tryItOut("/*for..in*/for([__parent__, prop] = new (Math.pow)(window, (<><x><y/></x></>.hasOwnProperty(\"constructor\"))) in (__proto__ = (([,,])))) export *;");
tryItOut("if(<x/> || *::*) {/*infloop*/while(null)var constructor = __iterator__, __noSuchMethod__ = <x><y/></x>;M:if([1,,]) {var constructor = <y><z/></y>, __parent__; } } else  if ((eval(\"while((arguments) && 0){yield <><x><y/></x></>; }\",  \"\" )) % <><x><y/></x></>) export constructor; else return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in  '' ) yield function(id) { return id }; const __parent__;");
tryItOut("/*infloop*/for(let prop; ([(({a1:1}))[this]]); (__iterator__.constructor = (prototype =  \"\" )\n)) {/*for..in*/M:for(const [constructor, __count__] = (<><x><y/></x></>)[<x><y/></x>] in ({a2:z2})) const constructor, __parent__;L:with({constructor: __count__ = -0.@foo}){gc()[1] } }");
tryItOut("return;for(let y in [5,6,7,8]) false;");
tryItOut("if((<x><y/><\f/x>.(*::*))) {return;([,]); } else  if (yield @foo;) {var __iterator__, __count__; } else return 5.0000000000000000000000;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in [z1,,]\n.__defineGetter__(\"prototype\", new Function)) {return;let prop = prototype getter: /a/giif( /x/ ) { if ((*::*.__lookupSetter__(\"prototype\"))) break L;} else (<x/>); }");
tryItOut("L:with({__proto__: <><x><y/></x></>['__proto__'] = prototype.constructor = ('fafafa'.replace(/a/g, Math.pow))}){export prototype; }");
tryItOut("/*infloop*/while(prototype =  '' ){var prop;gc() }");
tryItOut("do {if(@foo) {yield null; } } while(((( '' )[eval(\"gc\", __parent__)])) && 0);");
tryItOut("M:with(__iterator__ ? <x><y/></x> : false.hasOwnProperty(\"__noSuchMethod__\"))yield;");
tryItOut("return .2;");
tryItOut("with(eval(\"const __count__, __noSuchMethod__;\", <x><y/></x>) >>> (arguments if (window)))if(<><x><y/></x></>) <x/>;");
tryItOut("if(new (/a/gi)(<><x><y/></x></>)) Q else  if (#1=[#1#]) gc()");
tryItOut("if((prototype = [z1,,])) <x><y/></x>; else  if ((eval(\"-3/0\", @foo))) <><x><y/></x></>");
tryItOut("for(let y in []);");
tryItOut("switch(({ prop: [, ], __proto__: __proto__ }) = ((<x><y/></x>.(1e-81))(<x><y/></x>.constructor =  '' , true))) { case (__iterator__ = @foo): if(( \"\" .*))  { ; }  else {yield; }break; case 5: if(__noSuchMethod__.yoyo( \"\" )) {(#1#).watch }default: break;  }");
tryItOut("/*infloop*/for(var constructor; new -1(prop); ([11,12,13,14].sort)) /*for..in*/for(let \fprototype in (([1,2,3,4].slice)(<><x><y/></x></>))){}");
tryItOut("do {let(prop = true, constructor = *) { prototype = ({a1:1}), prop;L:with({__iterator__: window == *::*}){<><x><y/></x></>;export *; } } while((((uneval(<x><y/></x>)))) && 0);");
tryItOut("if((new <x/>()).__proto__) { } else  if ((true.__iterator__ = 3.141592653589793)) break M;");
tryItOut("/*for..in*/for(var __proto__ in (((case this ? null : [z1]: break; ))(3.141592653589793))){if((@foo).__defineSetter__()) { if (([15,16,17,18].some(eval, this))) throw 033;} else {return; }M:if([1]) { if ([,,z1]) <><x><y//*\n*/></x></>; else export constructor;} }");
tryItOut("switch(-3/0) { default: /*for..in*/for(let __proto__ in <><x><y/></x></>) {(<><x><y/></x></>); }case 8: if(1.2e3) {(<><x><y/></x></>); } else  if (this) var __iterator__ = 0x99; else (false);break; break; case \nreturn: case 0:  }");
tryItOut("if(([__count__, function::prototype, __iterator__] = <><x><y/></x></>( '' , 1e4))) {/*for..in*/for(let __count__ = <><x><y/></x></> in -0) gc() } else Math.sin");
tryItOut("\n");
tryItOut("/*for..in*/M:for(let __parent__.__count__ in ((Function)((((1.3).watch)(this, 3/0)))))prop, __iterator__;");
tryItOut("const constructor, constructor;\n/*for..in*/for([__count__, __parent__] = __iterator__ in  '' ) {break ; }\n");
tryItOut("{/*infloop*/L:for(var __parent__; [<y><z/></y>].sort(({}).hasOwnProperty); undefined %  /x/g ) {break ; } }");
tryItOut("do {gc() } while((3/0) && 0);");
tryItOut("if(<x><y/></x>) {__count__ = 0, __count__ = 1.3;continue L; } else return false;");
tryItOut("((gc).call).apply");
tryItOut("/*infloop*/for(var prop;  /* Comment */constructor.prop = this; new Iterator()) {; ''  }");
tryItOut("with({constructor: (this.__defineGetter__(\"prototype\", (new Function(\"continue M;\")))) -= this})(new Function(\"yield undefined;\"))");
tryItOut("with((constructor.__count__ getter= (* || <><x><y/></x></>))){{} }");
tryItOut("/*for..in*/for(const __count__ in ((\t<y><z/></y>.__defineGetter__(\"prop\", (<x><y/></x\f>).__defineSetter__) ? prop = *::* : ((uneval([1])))).watch(\"constructor\", (((true.__defineSetter__(\"__proto__\", function () { return <y><z/></y>; } ))).__defineSetter__).call))) {{<y><z/></y> } }");
tryItOut("with({prototype: (({ prop: set, __parent__: ({ prototype: __parent__ }) }) = __proto__ = ({ __iterator__: __count__, prototype: __iterator__ }))})__iterator__;");
tryItOut("with(( /x/ .__count__).__defineSetter__(\"prop\", (function  prop ()*::*(this)).__defineSetter__)){{}throw this; }");
tryItOut("function(y) { yield y; return;; yield y; }");
tryItOut("{yield;<x><y/></x>; }");
tryItOut("/*infloop*/for(var __proto__; prototype =  \"\" ; true.propertyIsEnumerable(\"__iterator__\")) {throw <x/>; }");
tryItOut("/*for..in*/for(const __proto__ in ((Function)((window &= Date( /x/ ).prototype = 0.1))))let(__proto__ =  /x/ ) { {}");
tryItOut("with({__noSuchMethod__: this .@*:: true(__count__)})");
tryItOut("");
tryItOut("/*infloop*/L:do { } while(__count__);");
tryItOut("return;");
tryItOut("return prop;");
tryItOut("throw __count__;");
tryItOut("/*infloop*/do {const prop;gc() } while(<y><z/></y> < *());");
tryItOut("/*infloop*/do {export __iterator__;throw <><x><y/></x></>; } while(__noSuchMethod__ = <y><z/></y>);");
tryItOut("with((new function(y) { yield y; (true);\nlet __iterator__ = prop;\n; yield y; }()))\n\f");
tryItOut("(<><x><y/></x></>); const __iterator__;");
tryItOut("let(({ __iterator__: [], __proto__: ({ __count__: prototype, __noSuchMethod__: __count__ }) }) = (({a1:1}))[this] == void 4., __noSuchMethod__ = #0=033) ((function(){return;})());");
tryItOut("let (prototype = window) { /*for..in*/M:for(var __proto__ in prop) ({}).__lookupGetter__ }");
tryItOut("<bbb xmlns:ccc=\"__count__.constructor = Number(@foo, null) | \n<x><y/></x> *= window\"><ccc:eee></ccc:eee></bbb>");
tryItOut("__count__, __parent__");
tryItOut("/*infloop*/M:for(let __iterator__; __parent__ = ({}); prototype) {let (__proto__ = -0, __proto__ = __parent__) { break M; }yield; }");
tryItOut("try { throw StopIteration; } catch(__parent__ if (function(){with({}) { try { var __parent__; } catch(constructor if (-1)) { gc } catch(__iterator__ if <x><y/></x>) { ({}).__lookupGetter__ } catch(__noSuchMethod__ if (function(){export __iterator__;})()) { gc() } catch(__parent__ if (function(){break L;})()) { export __proto__; }  } })()) { with({}) { constructor(prop) = __count__; }  } catch(prototype) { return window; } finally { Function } ");
tryItOut("/*for..in*/for(var <ccc:ddd>yyy</ccc:ddd> in <><x><y/></x></>) {export *;let constructor = false, __iterator__ = 3; }");
tryItOut("M:with({x::__count__: <><x><y/></x></>})export __proto__;");
tryItOut("");
