tryItOut("throw <x/>\nreturn;");
tryItOut("if(constructor.( /x/g )) {(function ([y]) { });let constructor, __noSuchMethod__; } else  if (<> </>) {{}\nlet prop = *, prop = null; } else {let __noSuchMethod__ = *, prop = function ([y]) { }; }");
tryItOut("/*for..in*/for(const prototype.__proto__ in .2) [z1]");
tryItOut("/*infloop*/do /*infloop*/for(var __parent__; <><x><y/></x></>; 0.1) (1.2e3)\n while((prop , __iterator__));");
tryItOut("switch((function ([y]) { })()) { case 1: yield;break;  }");
tryItOut("{__iterator__ = __iterator__; }");
tryItOut("L:with({({ __parent__: __parent__ }): eval(\"(-1.@foo(<y><z/></y>) -= prototype = [11,12,13,14].sort)\", <bbb xmlns:ccc=\"<><x><y/></x></> + <y><z/></y>\"><ccc:eee></ccc:eee></bbb>)})export *;");
tryItOut("/*infloop*/do {return; } while((true.__iterator__).unwatch(\"__parent__\"));");
tryItOut("switch(({a2:z2})) { case __count__ =  /x/g [null % 0]: with({}) let(__noSuchMethod__ = prototype, __count__ = this) { continue M;break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let __parent__ in (([1,2,3,4].slice)(.2)))gc() const __proto__;");
tryItOut("if(<{prototype}><ccc:ddd></ccc:ddd></{prototype}>) { if (let (__noSuchMethod__ = [1,,]) ([__parent__]\t.some(new Function))) {export __count__; }} else {yield prop; }");
tryItOut("/*for..in*/M:for(let constructor in 4. for each (setter in *::*)) return window;");
tryItOut("let(__parent__, __proto__ = window) ((function(){__noSuchMethod__ = __parent__;})());");
tryItOut("if( /x/ ) {constructor, __parent__ = <x><y/></x>;export *; }");
tryItOut("break M;");
tryItOut("M:with((false.propertyIsEnumerable(\"__proto__\"))){/*for..in*/for(prop in <x><y/></x>)  get prototype(constructor, __iterator__\f) { __iterator__(prototype) } throw <x/>; }");
tryItOut("switch(__count__) { default: with({prototype: __parent__ = __iterator__})continue ;break; case 2: case 1: /*infloop*/L:for(var __iterator__; @foo &= window.@*; __parent__.__parent__ = constructor.prototype) {return [z1]; }break; case 0: break; case [11,12,13,14].filter: @foo;yield  /x/ ;case 6: break; case try { ; } catch(prop) { ; } : if(false) { if (<><x><y/></x></>) __parent__;} else {export constructor;; }break; break; /*for..in*/M:for(var [prototype, __iterator__] = prop = <y><z/></y> in @foo) {throw 1.3; }break; break;  }");
tryItOut("/*for..in*/for(let constructor in ((( /x/ ).watch)(eval(__proto__))))yield <x><y/></x>;");
tryItOut("let (__proto__ = constructor\t = 0x99.throw(@foo)'fafafa'.replace(/a/g, gc) : (<x><y/></x>.(prototype))) { /*for..in*/for(const ({__count__: <y><z/></y>}).__count__ in (((yield <><x><y/></x></>))((__noSuchMethod__.__proto__ = @foo)))){ /x/g ; } }");
tryItOut("/*infloop*/for(const __parent__ = (<y><z/></y>.x::constructor); prop.__iterator__; \nnull) {yield;<x><y/></x>; }");
tryItOut("/*for..in*/for(const [__proto__, __count__] = 1e+81 in true) {var __proto__ =  \"\" ;gc() }\n");
tryItOut("try { let(__parent__) ((function(){let(constructor, __parent__) { let(constructor = __noSuchMethod__, __count__) { return [,];})()); } catch(__proto__) { break L; } finally { return ((function(q) { return q; })(new Array((prototype.unwatch(\"__proto__\"))), [ \"\"  if ([1,,])])); } ");
tryItOut("return;");
tryItOut("\nreturn;\n");
tryItOut("try {  } catch(prop) { new Function } ");
tryItOut("with({__count__: prop.__proto__ ? (__proto__.__iterator__ = #1=[#1#]) : (new <x/>()).__lookupSetter__(\"__noSuchMethod__\")})/*infloop*/for(var prototype; ((uneval(window\n))).__proto__ = prototype = (true.propertyIsEnumerable(\"__iterator__\")); ([15,16,17,18].filter(new Function, ({a1:1}))).@foo) {(constructor); }");
tryItOut("/*infloop*/for(let function::__proto__; <x/>; __iterator__) {continue L; }");
tryItOut("{continue M; }\f");
tryItOut("switch(<><x><y/></x></>) { default: case window: case constructor: case window: throw this;case 7: throw -3/0;case 6: break; case __count__: export *; }");
tryItOut("{}\n(<><x><y/></x></>)\n");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split))) {<><x><y/></x></>; } else {let __parent__;let __proto__ =  '' ; }");
tryItOut("const {let prototype;export __noSuchMethod__; };");
tryItOut("<><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(var __parent__ = this.zzz.zzz; ((function (prototype) { yield  \"\" ; } ).call( \"\" , ))[* % null.__noSuchMethod__]; prototype.__defineSetter__(\"__iterator__\", [1,2,3,4].map)) return\n");
tryItOut("/*for..in*/for(let [__count__, __count__] = (uneval((function ([y]) { })())).__iterator__ in ({}.__defineSetter__(\"__iterator__\", [1,2,3,4].map))) {}");
tryItOut("(this);");
tryItOut("/*for..in*/for(var window['prototype'] in ((/a/gi)(+({a2:z2})))){yield prototype;yield window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in <x/>(<x><y/></x>, false)) L:switch( '' ) { case *::*: const prototype, __iterator__; }");
tryItOut("/*for..in*/for(const prop = __noSuchMethod__ = <x/> in (new (({ set __proto__ constructor (constructor, prototype) { yield  { return function ([y]) { } }  } , prop: <><x><y/></x></> })))) {Functionexport __iterator__; }");
tryItOut("with({__noSuchMethod__: *::*--})return const prop;;");
tryItOut("/*infloop*/for(function::constructor; __iterator__ =  \"\" ; [this]) {gc()var __parent__, constructor; }\n");
tryItOut("while((prototype.x::function::__count__) && 0){ }");
tryItOut("/*infloop*/while(__iterator__.watch(\"__count__\", Function)){let  ''  = [[1]], prototype;<><x><y/></x></>; }");
tryItOut("L:do {var function::__noSuchMethod__ = window; } while((<x/>) && 0);");
tryItOut("while((prop = __parent__ = @foo) && 0)");
tryItOut("{;yield __parent__; }");
tryItOut("{let prop = <><x><y/></x></>, __parent__ = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var setter in <x/> &= //h\n<x><y/></x>) L: {}");
tryItOut("try { (<x><y/></x>); } catch(prop if (prop.@*)) { break L;//h\n } catch(prop if export prototype) { yield; } catch(__parent__ if <y><z/></y>.*) { /*\n*/export __iterator__; } catch(prop if (function(){gc()})()) { var __count__, __iterator__ = __count__; } catch(__iterator__ if (function(){yield;})()) { return  /x/g ; } finally { const constructor, prototype; } ");
tryItOut("/*infloop*/while(get){gc() }");
tryItOut("M:if([1]) { if (__count__) {throw __count__;yield 0; }} else yield this\n{}\n{}");
tryItOut("let (constructor, __parent__ = (this.__defineGetter__(\"__count__\", Math.pow)).valueOf(\"number\")) { do {function::__iterator__, prop;undefined; } while((false.@*) && 0); }");
tryItOut("/*for..in*/L:for(var __count__ = <x/> in 3/0) {export prop;throw  \"\" ; }");
tryItOut("/*infloop*/do {1e81; } while(*::*);");
tryItOut("/*infloop*/for(const prototype = [,,z1]; [,];  /x/g ) yield [z1,,];");
tryItOut("/*infloop*/L:do ; while(*)\n");
tryItOut("/*for..in*/L:for(const constructor in window) {yield; }");
tryItOut("return;");
tryItOut("@foo;\nfunction ([y]) { };\n");
tryItOut("with((prop) = let (__count__ = <x/>) __proto__ = 1e-81)continue M\nyield\nthis.zzz.zzz;");
tryItOut("let(__noSuchMethod__ = #1=[#1#]) ((function(){return;})());");
tryItOut("return; const prototype;");
tryItOut("with(<y><z/></y>){with(\f<y><z/></y>.__defineSetter__(\"__count__\", Function))/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <><x><y/></x></>\f) {{}let __count__, __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("(<y><z/></y>).__defineSetter__ const __iterator__;");
tryItOut("{gc()var __count__; }({}).__lookupGetter__{return; }");
tryItOut("/*infloop*/for(eval; [11,12,13,14].sort; ([15,16,17,18].filter(function () { return <xxx {__iterator__}={new Array( /* Comment */*::*,  \"\" )} /> } , (eval(\"[4.]\", this.zzz.zzz).__lookupSetter__(\"__count__\"))))) if((0/0.watch(\"constructor\", (-0)))) if(3) { if (-0) {gc() }} else <><x><y/></x></>; else  if (.@foo) <y><z/></y>;");
tryItOut("M:with(@foo)return;");
tryItOut("{\nreturn false; }");
tryItOut("{const __proto__, constructor = <x/>;yield undefined; }gc()");
tryItOut("L:do {throw this;prototype } while(((/*\n*/__noSuchMethod__.constructor)) && 0);");
tryItOut("throw __iterator__;");
tryItOut("{export *; }");
tryItOut("getter = __noSuchMethod__;");
tryItOut("let (__iterator__ = <x/>, __noSuchMethod__ = <x><y/></x>) { continue ; }");
tryItOut("/*for..in*/M:for(var prototype.__proto__ in <x><y/></x>) /*for..in*/for(let [prototype, __iterator__] = null in (-1)) throw *::*;");
tryItOut("return;/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in true) export __count__;");
tryItOut("export constructor;{((-1)); }\nwith( \"\" .watch(\"__iterator__\", (new Function(\"export *;\"))))return <><x><y/></x></>\n");
tryItOut("switch(<><x><y/></x></>) { case 0: break;  }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("yield constructor.__proto__ getter= (new Function(\"/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in this) {Math.pow }\"));");
tryItOut("throw __count__.__proto__;");
tryItOut("with({prototype: ((yield  \"\" ))})/*for..in*/for__iterator__ =  in prototypewindow) {(default: ); }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("L:if(<y><z/></y> | <x/>.unwatch(\"__noSuchMethod__\")) {var __proto__ = ({a1:1});const prototype = window; }");
tryItOut("/*infloop*/L:for((({__parent__: (constructor .@*:: (function ([y]) { }).watch(<><x><y/></x></>, #1#))})); <y><z/></y>; (window)(this) = __iterator__ = undefined.__lookupSetter__(\"prop\")) {let constructor; }");
tryItOut("try {  } catch(prop) { (window); } ");
tryItOut("if(0/0) {yield function(id) { return id }; } else {gc() }");
tryItOut("M:if(constructor = this.zzz.zzz) {return <x/>; } else  if (__count__ = window.@foo) {/*for..in*/L:for(true['__parent__'] in <x><y/></x>) let __noSuchMethod__ = *::*; }");
tryItOut("prototype = (__parent__.prop)");
tryItOut("with(4.)constructor, __count__; const __noSuchMethod__;");
tryItOut("switch(<x><y/></x>) { case 2: break; default: break; export __noSuchMethod__;;yield;break;  }");
tryItOut("M:with({__count__: ([,])}){__noSuchMethod__; }");
tryItOut("/*infloop*/do {} while((__proto__.__parent__));");
tryItOut("let (__proto__) { return (__proto__(<x><y/></x>)); }");
tryItOut("switch(0/0 !== __noSuchMethod__.valueOf(\"number\")) { default: /*infloop*/for(const prototype; <x><y/></x>.constructor = [[1]].eval(((<y><z/></y>).call(#1=[#1#], ))); 'fafafa'.replace(/a/g, function(y) { yield y; (<></></x>);; yield y; })) let (__iterator__ = prototype)\r { break ; }\ngc()\nbreak; /*for..in*/L:for(const __proto__ = [11,12,13,14].filter in (#1#.__lookupGetter__(\"prototype\"))) {yield;continue ; } }");
tryItOut("/*infloop*/do { } while(<x/> ? -3/0 : <x><y/></x>)\n{}\n");
tryItOut("export prototype;\ngc()\n");
tryItOut("/*infloop*/for(const each; [<x/> for each (__iterator__ in  /x/g ) for each (__proto__ in prototype)]; [,,] + this) /*infloop*/while(yield 5.0000000000000000000000)var __noSuchMethod__ = *;");
tryItOut("return\n");
tryItOut("/*infloop*/M:do function (__proto__, __count__) { yield @foo }  while/*\n*/((<><x><y/></x></> for (prototype in @foo)));");
tryItOut("L:with( \"\" )function () { yield <x><y/></x> } \nwith({__parent__: __count__ = 0/0}){yield constructor;return; }");
tryItOut("L:while((<><x><y/></x></>[__count__]) && 0)continue L;");
tryItOut("/*infloop*/M:for(__parent__; [,,z1] ? (uneval(<y><z/></y>)) : *::*.watch(\"__parent__\", (__count__ = __count__).watch) += ( /* Comment */<x><y/></x>).yoyo( /* Comment */#1=[#1#]).__defineSetter__(\"__noSuchMethod__\", eval); yield <x/>) {break M;{if( /x/g ) { if (true) return;} else {constructor;continue ; }var prop, constructor; } }");
tryItOut("function(q) { return q; }");
tryItOut("L:if(([true].function::prop)) export constructor; else  if ((*.valueOf(\"number\"))) return; else {return constructor; }\ncontinue ;yield;");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("if(<x/>) { if (window) yield; else yield;}");
tryItOut("/*infloop*/do {/*infloop*/for(var yield = 0/0; undefined; <><x><y/></x></>) yield; } while((RangeError(1e-81)));");
tryItOut("/*infloop*/\fwhile( \"\" )let __proto__, constructor = prop;");
tryItOut("/*infloop*/for(__parent__; ({__parent__: (function ([y]) { })() }); [/a/gi() if (*)]) {switch(<y><z/></y>.__lookupSetter__(\"__parent__\")) { default: yield; }return true; }");
tryItOut("let(__noSuchMethod__) ((function(){__proto__ = __count__;})());");
tryItOut("/*for..in*/M:for(var __iterator__ in (('haha'.split)(()))return;");
tryItOut("if(eval(\"<x><y/></x>\", [11,12,13,14].sort.valueOf(\"number\")).valueOf(\"number\").unwatch(\"__iterator__\")) /*for..in*/for(prototype = this in undefined) {return [[]]; } else {return;if(window) {yield;; } else  if (this.__defineSetter__(\"constructor\", function(y) { yield y; yield <><x><y/></x></>;; yield y; })) {yield; } }\n");
tryItOut("gc()");
tryItOut("/*for..in*/for(const __noSuchMethod__ = +(<><x><y/></x></> instanceof 1e+81).yoyo([(<><x><y/></x></> for (function::__noSuchMethod__ in (-1))) for (__parent__ in <x/>) for (__proto__ in  get __proto__ __iterator__ (function::__iterator__) {  } )case 6: break; break; ].isPrototypeOf(this.__defineGetter__(\"__parent__\", function () { export __count__; } ) .. set)) in eval(\"__iterator__ = ({})\", [, , constructor, ])) <zzz>(yield (({__noSuchMethod__ getter: 'haha'.split, __proto__: (*::*.isPrototypeOf(<y><z/></y>)) })))</zzz>");
tryItOut("/*infloop*/for(({ function::__iterator__: ({ __count__: ({ __iterator__: ({ constructor: __iterator__, __iterator__: prop }) }) }) }) = <x><y/></x> for each (constructor in *::*); (__noSuchMethod__.prototype = (constructor.prototype = this) >> ((gc).call((prop = null), <><x><y/></x></>.*, false))(__proto__)); ( \"\" )(@foo, [z1,,])) {\texport *;throw <x><y/></x>; }");
tryItOut("/*infloop*/L:for(var prototype; (prop)(window[<><x><y/></x></>], -1); (new ()(<x><y/></x>.__proto__, <y><z/></y>))) ");
tryItOut("with({}) { with({}) { let(__proto__ = yield this) { with({}) return; }  } ");
tryItOut("/*infloop*/L:do prop; while(this.__defineSetter__(\"prop\", ({}).hasOwnProperty));__noSuchMethod__; const __proto__;");
tryItOut("with({}) { with({}) { let(__iterator__ = 1e81, prototype) { ; }  } ");
tryItOut("/*infloop*/for(let prototype; <y><z/></y>; <x><y/></x>) ;");
tryItOut("do const prototype = <x><y/></x>, __noSuchMethod__; while((this.zzz.zzz) && 0);");
tryItOut("/*for..in*/for(let constructor = (-0) ^= <x><y/></x> in <y><z/></y>) const __count__ = *::*;");
tryItOut("\rif(prototype = constructor) var __parent__;");
tryItOut("if(Function) export *; else {var __noSuchMethod__ = <y><z/></y>; }");
tryItOut("({}).__lookupGetter__");
tryItOut("<><ccc:ddd><ccc:ddd><ccc:ddd><> /x/ .__defineGetter__(\"__count__\", function  __iterator__ (__proto__)null) >>= <><bbb xmlns:ccc=\"(yield window)\"><ccc:eee></ccc:eee></bbb></></>yyy</ccc:\fddd></ccc:ddd></ccc:ddd></>");
tryItOut("while((true) && 0)gc()/*infloop*/for(__parent__ = (new null(<><x><y/></x></>, __iterator__)); function::__noSuchMethod__.__proto__; [window]) do return; while(( '' ) && 0);");
tryItOut("/*infloop*/M:while(prop = -1 /=  /x/g )with(new (null)(<><x><y/></x></>)){[]; }");
tryItOut("{export constructor;throw <x><y/></x>; }");
tryItOut("while((case 3: prototype;case 1: throw window; if (3)--) && 0)let prop = null;");
tryItOut("L:if(*.__noSuchMethod__ = (<x><y/></x> += @foo)) /*infloop*/M:for(this; 1e81; *) {return; } else  if (\n<><x><y/></x></>) M:if(({a1:1})) { if (this) {} else {return <><x><y/></x></>; }}");
tryItOut("if(Error(([15,16,17,18].filter((1 for (x in [])), this.zzz.zzz.isPrototypeOf((1e4.watch(\"prop\", <><x><y/></x></>))))))) <x/>; else  if (((__proto__ = <x/>.valueOf(\"number\") for (prototype([15,16,17,18].map(function (__count__, constructor){continue L;var constructor; }, __proto__)) in undefined.__lookupSetter__(\"__parent__\")) for (x::__proto__(<x><y/></x>.(false)) in <><x><y/></x></>) for each (__iterator__ in {})))) ; else {if(<x><y/></x> :: prototype) return; else  if ({ /x/g ; } * <x><y/></x>) yield; else {gc() }return; }");
tryItOut(";");
tryItOut(";\nconst __proto__, __noSuchMethod__ = window;\n");
tryItOut("/*infloop*/do ; while((p={}, (p.z =  /x/g )()));");
tryItOut("with({__noSuchMethod__: (#0=({__count__: constructor.__parent__ = this}))})const prop, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 0/0.yoyo(__count__)) {;\n__count__;\n }");
tryItOut("/*infloop*/do throw <><x><y/></x></>; while([,,]);");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/for(var __proto__; <><bbb xmlns=\" /x/g \"> </bbb></>; <y><z/></y>) __iterator__ = <x><y/></x>;");
tryItOut("if(<x><y/></x> , <x/>) { if ([undefined]) {{} } else {return @foo;gc() }}");
tryItOut("/*infloop*/while(( /* Comment */(Math.sin)(4., <><x><y/></x></>))){{var __noSuchMethod__; } }");
tryItOut("/*for..in*/L:for(let [prototype, __noSuchMethod__] = <><x><y/></x></> in 3/0) return;");
tryItOut("L:if() { if (-function::constructor) {if(*) return; else  if (this) case 7: ; }} else const __noSuchMethod__ = ({}), this = undefined;");
tryItOut("/*for..in*/M:for(var __iterator__ in (((([11,12,13,14].filter)).watch)((<><x><y/></x></>.__lookupGetter__(\"prototype\")))))let __noSuchMethod__, __parent__ = function ([y]) { };");
tryItOut("L:do 1e4; while((__iterator__) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ in this) var __count__;");
tryItOut("{export __proto__;{let prop = 1e-81; } }");
tryItOut("{export *;return 1e-81 >>= this; }");
tryItOut("if(<><x><y/></x></> <<= 1e81) return; else  if (let (__proto__) constructor) gc()");
tryItOut("with({__count__: this}){(<x><y/></x>).__defineSetter__ }");
tryItOut("throw __count__;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/for((<x><y/></x>.valueOf(\"number\")); 1e-81; <x><y/></x>.(*::*)) gc()");
tryItOut("{Function }");
tryItOut("/*infloop*/for([({a2:z2})];  ''  :: []; (-1) in <x><y/></x>) yield;throw true;");
tryItOut("/*infloop*/for(().watch(\"prop\", (new Function(\"prototype = <x><y/></x>;\"))); [,,z1]; __parent__) while((<x><y/></x>.( /x/ ) -= this.zzz.zzz) && 0){break ; }");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = 1e81.@foo in true) gc()");
tryItOut("if(*::* @ <x/>) {;__count__ } else  if (((uneval(<y><z/></y> & null)))) continue M;");
tryItOut("yield  \"\"  .@x:: ({a1:1}).throw(<><x><y/></x></>).valueOf(\"number\");");
tryItOut("/*infloop*/M:for(var __proto__; 3/0.eval(<y><z/></y>) <<= __parent__;  \"\"  -  /x/g  +  /* Comment */[,]) {__iterator__ = -0, __proto__ = [1];return window; }\nwith({__proto__: <><x><y/></x></>}){export __parent__;({}).hasOwnProperty }\n");
tryItOut("return;");
tryItOut("{__iterator__ = 0.1;Math.pow }");
tryItOut("with({__parent__: prototype})gc()");
tryItOut("if( '' ) {} else continue L;");
tryItOut("if((-1) for each (__parent__ in  /x/ )) {L:do {(1.3); } while((*) && 0);\tif(<x/>) (1 for (x in [])) else __iterator__; }");
tryItOut("{with( \"\" ){export *;continue ; } }");
tryItOut("L:while((([,].__proto__) << <x/>.__defineSetter__(\"__iterator__\", eval)) && 0){/*infloop*/for(let constructor; -3/0; __proto__) {return  /x/g ;export *; } }");
tryItOut("if(<><x><y/></x></>) {gc()continue ; } else  if (@foo) (3/0); else export __count__");
tryItOut("/*infloop*/while([({ __iterator__: [[, ({ __count__: __noSuchMethod__ }), ({ __iterator__: __parent__ })]] }), , , , []] = (\f({ prop: ({ prop: constructor }), __proto__: constructor }) = (033[*].watch(\"__noSuchMethod__\", ({}).hasOwnProperty)))){export __iterator__;if(let (__iterator__ = ) (__iterator__.__parent__ getter= (new Function).call)) {( '' ); } else  if (<x><y/></x>.@*) gc() }");
tryItOut("M:if(({setter: <><x><y/></x></>})) {var __count__, prop; } else do export prop; while(( \"\" ) && 0);");
tryItOut("with({}) <><x><y/></x></>;");
tryItOut("if(<><x><y/></x></>.__lookupGetter__(\"constructor\")) { if ((yield  \"\" )) <y><z/></y>; else function (__noSuchMethod__, false) { export prototype; } }");
tryItOut("export prototype;");
tryItOut(";");
tryItOut("do __iterator__ = false; while(() && 0);");
tryItOut("do {function (__parent__) { __iterator__ = <><x><y/></x></>, function::__parent__; } __count__ = <><x><y/></x></>; } while(((-1.__lookupSetter__(\"__count__\"))) && 0);");
tryItOut("let (constructor = new  /x/ (), __proto__ = 5.0000000000000000000000) { /*infloop*/M:for(var constructor = window.watch(\"prototype\", [1,2,3,4].slice)\f; delete <x><y/></x>; (yield *)) throw false; }");
tryItOut("return * const constructor;");
tryItOut("if((new Date())) export *; const constructor;");
tryItOut("/*infloop*/L:for(\fconstructor for (__count__ in <x><y/></x>)__count__; (new [1,2,3,4].slice(delete (this.__defineGetter__(\"__proto__\", (function  __iterator__ (__iterator__) { return  \"\"  } ).apply))))\f; prototype.(({__noSuchMethod__ getter: [1,2,3,4].map,  get function::__noSuchMethod__ __count__ (__iterator__) { yield <><x><y/></x></> }  }))) {if(constructor if (<x><y/>\t</x>)) break L; else  if ((let (prop, __iterator__ = [])  /x/  *= set.prop getter= function () { yield (function ([y]) { })() } )) {constructor;<><x><y/></x></>; }\r else throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __proto__ = __iterator__ == prop = <y><z/></y> ? <y><z/></y> : ({}) in yield [11,12,13,14].some >>= !<x/>) {{if(undefined) { if (undefined) {return __count__; }} else {; } }(<x/>); }");
tryItOut("M:if(new  \"\" (prototype)) with(<x><y/></x>)return;");
tryItOut("do return; while(((window[__count__]).@*) && 0);");
tryItOut("with({__iterator__: ( /x/ .prototype.__lookupSetter__(\"__proto__\"))}){export prop; }");
tryItOut("do with({}) { yield; }  while(([delete <x><y/></x>].filter(Function) == <><x><\ty/></x></> <= -0.__lookupSetter__(\"__count__\")) && 0);");
tryItOut("/*infloop*/L:for((0.1 += <><x><y/></x></> += __parent__-=*); (({prototype: __noSuchMethod__}))[([11,12,13,14].filter)]; constructor.(Math.sin(<x><y/></x>) && undefined += *)--) {throw <y><z/></y>with({constructor: <x/> = constructor})gc() }");
tryItOut("with({__count__: [15,16,17,18].sort(@foo, true)}){export prop; }");
tryItOut("switch(this &= (-0)) { case new (:)((new gc(<x><y/></x>))): default: break; case 1: throw <x><y/></x>; }");
tryItOut("/*for..in*/for(var __parent__ in try { break ; } finally { continue M; }  .@ <x><y/></x>) L:if( '' ) { if ( \"\" ) {yield  /x/g ; /x/ ; } else __parent__, __iterator__;}");
tryItOut("/*for..in*/for(let __proto__ in ((('haha'.split).call)((null.watch(\"({ __proto__: [], __parent__: constructor })\", (gc).apply)).@*)))Function");
tryItOut("/*infloop*/while(((yield <x/>))){\nlet __proto__ = *;export *; }");
tryItOut("M:while((__noSuchMethod__+=__proto__) && 0){if(true) {return; } }");
tryItOut("{<><\tx><y/></x></>; }");
tryItOut("while((this.zzz.zzz) && 0){([1]); }");
tryItOut("/*infloop*/L:for(let ({ __iterator__: prop, prop: __proto__ }) = constructor = __iterator__.prop\t; __noSuchMethod__ = {}; ((function(y) { yield y; ( /x/g );; yield y; })((-1), window)).__defineGetter__(\"__parent__\", ((-1)).apply)) {var \t__parent__ = __noSuchMethod__: <x/>, __noSuchMethod__;__count__; }");
