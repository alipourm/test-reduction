tryItOut("/*for..in*/for(var constructor = __count__ = prop = <y><z/></y>.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>) in <><x><y/></x></>++) throw window;");
tryItOut("yield [[1]]");
tryItOut("{}");
tryItOut("M:if([15,16,17,18].some(Function, <x><y/></x>)) throw prop;");
tryItOut("with({prop: new (('fafafa'.replace(/a/g, 1.2e3)))()})yield <x><y/><x>;");
tryItOut("/*infloop*/for([1,2,3,4].map(<><x><y/></x></>); 3/0 ^= <><x><y/></x></>; [1]) {export *; }");
tryItOut("with((<x><y/></x>))yield;");
tryItOut("yield;\n/*infloop*/for(eval(\"[[1]]\", undefined);  \"\" ; [null]) \t{{}export prop; }\n");
tryItOut("/*for..in*/for(prototype = __proto__%=@foo in x::prototype) throw <x/>;");
tryItOut("/*infloop*/for(var __proto__; prop; [11,12,13,14].map) {continue ; }");
tryItOut("try { *; } catch(__count__ if (function(){break M;})()) { const __proto__; } finally { export prop; } ");
tryItOut("/*for..in*/M:for([__proto__, prototype] = (__count__ = <><x><y/></x></>) in  '' ) /*infloop*/L:for(__proto__;  '' ; #3={a:#3#}) ;");
tryItOut("with((-0) >>> <x><y/></x>){{}/*infloop*/L:do {case <><x><y/></x></>: break; default: yield;case <><x><y/></x></>:  \"\" break; case 6: break; case 1e+81: break; case 4: break; break; break; case 1: break; break;  } while(0/0); }");
tryItOut("/*for..in*/for(var __iterator__ in (yield (<y><z/></y>--)) .@*:: (({prototype: *::*}))) \t{yield;var prototype = <x><y/></x>; }");
tryItOut("prop = __parent__;");
tryItOut("__parent__ = __proto__;");
tryItOut("if(arguments <= window) {/*infloop*/L:for(const __noSuchMethod__; <><x><y/></x></>; *) yield <x><y/></x>; }");
tryItOut("{function  __count__ () { yield __proto__ } \f; }");
tryItOut("__parent__ = prototype;");
tryItOut("switch(constructor = undefined) { case 2: break; default:  }");
tryItOut("if(([{}].some(function  prototype (__noSuchMethod__)[1])) -= RegExp(<x/>, __count__)) {/*for..in*/M:for(var window['constructor'] in  \"\" ) {} } else  if ( /x/ ) /*infloop*/for(let ({ __iterator__: __parent__ }) = (function ([y]) { })().eval(this); (<x><y/></x>)[__parent__]; *::* & this) {let prototype; } else {switch(this) { default: export __iterator__;break;  }/*infloop*/while([1,,]); }");
tryItOut("/*for..in*/for(const prop in (([1,2,3,4].slice)(@foo)))__iterator__");
tryItOut("try { {} } catch(prototype if (function(){export *;})()) { __parent__, __parent__ } ");
tryItOut("L: yield");
tryItOut("/*for..in*/for(let false.__parent__ in __noSuchMethod__ = undefined) const prototype;");
tryItOut("L:if(3.hasOwnProperty(\"__parent__\")) { if (#2=({__count__: <><x><y/></x></>})) { }} else {return arguments;(prop); }");
tryItOut("/*infloop*/for(let __noSuchMethod__; 3.141592653589793 .@ true; ([(-0) %=  /x/ ])) {<x><y/></x>; }");
tryItOut("switch(eval(\"export __noSuchMethod__;\", __proto__)) { case @foo :: <x><y/></x>: throw null;break;  }");
tryItOut("let (__count__ = ((yield 0.1))) { export __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <x><y/></x>) ");
tryItOut("export *;");
tryItOut("/*infloop*/for(let __noSuchMethod__; this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))[<>window</> + (RegExp().unwatch(\"__proto__\"))]; (eval(\"this.__defineSetter__(\\\"__proto__\\\", ({}).__lookupGetter__).__lookupGetter__(\\\"__noSuchMethod__\\\")\", undefined))) do export __parent__; while(((prop = constructor)) && 0);");
tryItOut("/*infloop*/do ; while();");
tryItOut("switch(<><x><y/></x></>.eval(true)) { default: break;  }");
tryItOut("/*infloop*/for(__proto__; <><x><\ty/></x></>;  /x/g ) {var __parent__ = this, constructor; }");
tryItOut("/*infloop*/L:for(let ({ prototype: [, ({ __iterator__: prop }), ] }) = ~<y><z/></y>; (__parent__ = (({ prop: prototype, __noSuchMethod__: __proto__ }) = __proto__.propertyIsEnumerable(\"__iterator__\"))); __noSuchMethod__.__iterator__ setter= Function) {yield eval(\"var __count__ = window, constructor =  /x/g ;\",  /x/ \n); }");
tryItOut("return  \"\"  -=  /x/g ;");
tryItOut("/*infloop*/for(<x><y/><\f/x>;  \"\" ; <x/>) export *;");
tryItOut("constructor");
tryItOut("with({__proto__: \f__parent__ = new <x/>\f()}){/*for..in*/for(__parent__ = (p={}, (p.z = this.@foo)()) in __count__) { '' ; } }");
tryItOut("/*infloop*/for(let [({ __count__: ({ __parent__: __noSuchMethod__, constructor: prop }), __iterator__: [, , , __proto__ var __proto__ = <><x><y/></x></>; ] }), ({ constructor: ({ __noSuchMethod__: __parent__ }) }), [__noSuchMethod__], ({ __parent__: __count__ }), ] = __iterator__.__noSuchMethod__ getter= __noSuchMethod__.(*); \n /x/g ; this.zzz.zzz) {{} }\nfor(let y in [5,6,7,8]) return;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in [@foo]) 5");
tryItOut("const __iterator__, __parent__ = *::*;");
tryItOut("if((({__proto__: <y><z/></y> }))) {gc(); }");
tryItOut("while((*::*(<x/>)) && 0){{} }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in ((new Function)((let (__parent__ = <\t><x><y/></x></>, __count__) (__parent__.function::prop setter= [,])(window %= <x/>.__lookupGetter__(\"__noSuchMethod__\")))))\f)throw <x/>;");
tryItOut("/*infloop*/do with({constructor: [,,]})/a/gi while( /x/g .__lookupSetter__(\"prop\"));");
tryItOut("/*infloop*/M:for(constructor; 'haha'.split(); ((eval(\" \", <><x><y/></x></>))(this, -0))()) return\n");
tryItOut("try { throw StopIteration; } catch(prop if (function(){throw function::__count__;})()) { with({}) { with({}) let(({ __iterator__: __count__ }) = #2=[<><x><y/></x></>], prop = <x/>) { __count__ = constructor; }  } catch(__noSuchMethod__) { for(let y in [5,6,7,8]) prop = __count__; } finally { try { with({}) with({}) { for(let y in [5,6,7,8]) return  /x/g ; }  } catch(__noSuchMethod__) { L:  }  } ");
tryItOut("if([11,12,13,14].filter.yoyo((<x/> && 0/0)) ? new gc() : <><x><y/></x></>.@*) { if (\f([15,16,17,18].map((__proto__).apply, new ((prop != <x><y/></x>))(this.__defineSetter__(\"__iterator__\", /a/gi))))) constructor = <x/> else export __parent__;}");
tryItOut("L:while(((uneval(\ntrue))) && 0){/*for..in*/for(const prototype.__parent__ in prop) {{}var __count__, __count__ = *::*; }yield; }\f");
tryItOut(";");
tryItOut("do (#1=[#1#]); while((null) && 0);");
tryItOut("while(((this++)) && 0){break ; }");
tryItOut("{}");
tryItOut("throw StopIteration;");
tryItOut("if(yield @foo) {L:switch(__noSuchMethod__ = <x><y/></x>) { default: <bbb xmlns:ccc=\"prototype = (\n(-1))\"\f><ccc:eee></ccc:eee></bbb>break; case throw null;: 'haha'.split\nyield;break; case 1: break;  } } else  if (__noSuchMethod__.(<y><z/></y>) >  \"\" ) switch(@foo) { default: const prototype, __noSuchMethod__; }");
tryItOut("/*infloop*/do {let __proto__ = <x><y/></x>;L: {throw <><x><y/></x></>; } } while(__noSuchMethod__.prop = <><x><y/></x></> :: __parent__);");
tryItOut("while((1e+81.prototype) && 0){__parent__, prop =  /x/ ; }");
tryItOut("/*infloop*/for(var ({ __proto__: prop, 033: prototype }) = this.__defineGetter__(\"__proto__\", (1 for (x in []))); (({ get __noSuchMethod__ constructor () { /*infloop*/for(const __parent__; @foo; (-0)) {yield;; } } , ({ __noSuchMethod__: __count__ }): (p={}, (p.z = 3/0)()) }) <<= (prop for (__count__ in <><x><y/></x></>)).yoyo(new (__parent__.__parent__ = <x><y/></x>)(let (constructor = null) __count__))); (with({}) { yield this.zzz.zzz; } )) return 0/0;");
tryItOut("throw (* .@  '' )\nyield;");
tryItOut("/*for..in*/for(const [<y><z/></y>, constructor] =  /x/  in  /* Comment */(<><x><y/></x></> + <y><z/></y>)) var constructor = *, __iterator__ = true;");
tryItOut("this.zzz.zzz;");
tryItOut("if(true.*(eval(\"let prototype;\", [11,12,13,14].sort), ([11,12,13,14].sort))) gc() else  if ((({ __parent__: __proto__ }) = (yield ({a2:z2})) || (this.__defineGetter__(\"__iterator__\", Math.sin)))) {export __count__;continue M; } else ({ prototype: __proto__, __proto__: prototype });");
tryItOut("if((((<x><y/></x>\n) if (<y><z/></y>)))\f) {return; } else  if ( /x/g ) export __noSuchMethod__;");
tryItOut("3.141592653589793");
tryItOut("return (({__count__: 1e81 }));");
tryItOut("/*infloop*/do {/*infloop*/while(\tthis.__defineGetter__(\"prop\", /a/gi))let constructor, __proto__; } while( '' );");
tryItOut("/*infloop*/for(var ({ __iterator__: [, ], __proto__: __proto__ }) = <x><y/></x>.(prototype).valueOf(\"number\"); constructor = <><bbb xmlns=\"this\"><ccc:ddd> </ccc:ddd></bbb></> >= <><x><y/></x></> !== this.hasOwnProperty(\"prototype getter: function  __iterator__ (prop, prop) { return <x><y/></x> } \"); (({ __proto__: [constructor, ({ prop: ({ prop: constructor }) })], __parent__: __count__ }) = #2=prop = 0/0)\t[0]) {/*infloop*/for(null; 033; <x><y/></x>) return; }");
tryItOut("/*for..in*/for(let [prop, __proto__] = this ? constructor : -1 in <y><z/></y>) {export __iterator__;export *; }");
tryItOut("return;return;");
tryItOut("const __parent__\n;");
tryItOut("/*infloop*/M:do {if(__noSuchMethod__) {let constructor; } else throw *::*; } while(*)\n");
tryItOut("/*for..in*/for(var __count__ in (*::*)[ /x/g ]) let prop = <><x><y/></x></>, x::__iterator__;");
tryItOut("{/*for..in*/M:for(let prop = __proto__ in  \"\" ) throw window;throw -0; }");
tryItOut("/*infloop*/do break M; while(<><{__proto__}> </{__proto__}></>);");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(window; <><x><y/></x></>; <x/>) throw  /x/ ;");
tryItOut("L: {var __noSuchMethod__, __proto__ = __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = try { export *; } finally { return; }  in <><> </></>) {gc()yield; const constructor\n }");
tryItOut("{( /x/ );export *;\nreturn;\n } const __parent__;");
tryItOut("/*for..in*/for(const [prototype, constructor] =  in //h\n<>default: ;\n\nbreak; case 0: ;case 9: let __iterator__;break; case 4: export prop;break; </>) {L: {throw 0; } }");
tryItOut("const __proto__ = 033;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("{let  , function::__proto__; const __count__; }");
tryItOut("export __parent__\n{}");
tryItOut("var __proto__, constructor = @foo;");
tryItOut("\t\n");
tryItOut("L: /*infloop*/L:do {break M; } while(<><x><y/></x></>);");
tryItOut("if(+<x><y/></x> &= ) {function::__noSuchMethod__; } else  if () {(<x><y/></x>); } else continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in [,,z1]) while(((export *)) && 0)yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (__noSuchMethod__ = <x><y/></x> >>= function::__noSuchMethod__.(window))) {yield;throw *::* &= 1e81; }");
tryItOut("/*for..in*/for(let __parent__ in ((/a/gi)((new ((new Function(\"return *;\")))([1,2,3,4].slice))))){with(('fafafa'.replace(/a/g, false))){const prop, prototype = window; } }");
tryItOut("/*for..in*/for([delete, constructor] = <x><y/></x> /  \"\"  in new (prototype = *)()) if(new (<x/>)(false, this) ^= this.__defineSetter__(\"prototype\", (this).watch)) let constructor = <><x><y/></x></>, prop = 1e+81;");
tryItOut("/*for..in*/for(__noSuchMethod__ in [({ constructor: __count__, ({ prop: __proto__, prototype: constructor }): ({ __noSuchMethod__: prototype, prop: constructor }) }), , ] != <y><z/></y>) if((p={}, (p.z = ({a1:1}))()))  else  if (delete #1=[#1#]) var prop, __parent__ = <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(__count__ = constructor+=<zzz> '' </zzz>.(if(this) {gc() } const __noSuchMethod__;)\t in (<><!--yy--></>yyy = [1])) {yield; }");
tryItOut("M:if(function ([y]) { } += ({})) {gc()export __count__; } else {[1,2,3,4].map }");
tryItOut("const constructor, __iterator__ = <><x><y/></x></>;");
tryItOut("{var __count__, constructor; }");
tryItOut("do var __proto__ = *;export constructor; while((yield var constructor, __parent__) && 0);");
tryItOut("__noSuchMethod__\n = __proto__;");
tryItOut("\twith(window){(this &=  /x/g );yield prop; }");
tryItOut("let (prototype, prototype) { yield; }\n(window);");
tryItOut("if(<!--yy-->) { if (<x/>.*) {if((uneval(({a2:z2})))) {continue L;Math.sin } else  if (null) yield  /x/  }} else /*infloop*/do {{}throw *;\t } while(<y><z/></y>);return false;");
tryItOut("try { return this; } catch(constructor) { throw (-1); } finally { const __proto__; } ");
tryItOut("yield;*::*;");
tryItOut("{yield null;/*infloop*/M:for(const prop; <y><z/></y>; <y><z/></y>) {gc() } }");
tryItOut("return;");
tryItOut("try { return; } catch(function::__iterator__) { <x/>; } finally { (prop); } ");
tryItOut("if(false) {const __count__, constructor = function(id) { return id };return <x><y/></x>; } else  if (<x><y/></x>) {var __count__, prototype = <><x><y/></x></>;yield *::*; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = 1e-81 in <x><y/></x>) {export __proto__; }");
tryItOut("const __count__, constructor = ({})\n/*for..in*/\rfor(const prop in ((function  __count__ (__proto__, prototype) { return <><x><y/></x></> } )(function::constructor.([1])))){export *; }\f");
tryItOut("/*for..in*/for(var [constructor, __parent__] = <><{__count__}> </{__count__}></> in \n<y><z/></y>) \fbreak ;");
tryItOut("/*for..in*/for(const constructor = (function () { return <x><y/></x> } ).call(#1#, <><x><y/></x></>) in -0) ");
tryItOut("if(true) { if (undefined) {throw constructor;; } else const x::__parent__, __parent__;}");
tryItOut("/*infloop*/L:while({} = (__count__ = window == <><x><y/></x></>))if(\n(eval(\"@foo\", [,,z1]))) { if (((eval)())) {constructor = prototype; }} else yield <y><z/></y>;");
tryItOut("if(this.__defineGetter__(\"prototype\", ( /x/g ).apply)) { if (__parent__ = (function ([y]) { })()) {([,,z1]); }} else var try { prototype = @foo, prototype; } finally { var __iterator__ = *::* = <y><z/></y>; } ;");
tryItOut("export __parent__;");
tryItOut("if(*::*) { if (window) yield; else var __count__ = *::*;}\n/a/gi");
tryItOut("L:do {export __noSuchMethod__; } while(( /x/g ) && 0)\ncontinue \n");
tryItOut("function  prototype (constructor, prototype) { yield <><x><y/></x></> }  const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.__proto__ in __proto__) {<x><y/></x>;throw <><x><y/></x></>; }\n");
tryItOut("if(() &= new Array())  else  if ((({prototype: <x><y/></x>}))) {var __iterator__ = __parent__, constructor; }");
tryItOut("{throw <y><z/></y>; }");
tryItOut("{const __count__; }");
tryItOut("M:switch(/*\n*/ /x/ .__defineSetter__(\"prop\", Math.sin).isPrototypeOf(0.1.__lookupGetter__(\"__count__\"))) { case 8: break;  }");
tryItOut("/*infloop*/for(( /* Comment */null.__lookupSetter__(\"prop\")++); \n<x><y/></x>.__lookupGetter__(\"constructor\"); (constructor = (<x><y/></x>.(3/0)) |= ([11,12,13,14].some).propertyIsEnumerable(\"__proto__\"))) {gc() }");
tryItOut("throw prop;");
tryItOut("each = __proto__;");
tryItOut("with({<y><z/></y>: <><x><y/></x>\f</>}){var __proto__ = {}, __parent__; }");
tryItOut("y");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [prototype, __proto__] = prototype = __proto__ in false.__iterator__) {gc()var *.__count__ = <x><y/></x> << __parent__, __count__; }");
tryItOut("/*for..in*/L:for(\f__parent__ in __count__ || ) {return;{} }");
tryItOut("/*for..in*/L:for(var __iterator__ in ((/a/gi)(__iterator__))){; } const constructor;");
tryItOut("L:if(0x99) return\n\n");
tryItOut("if(<><x><y/></x></>.__defineGetter__(\"constructor\", ((1 for (x in []))).apply)\n) __noSuchMethod__, __iterator__ = null; else  if (new [11,12,13,14].sort(new Error(<><x><y/></x></>), <y><z/></y>\n)) {gc()export constructor; } else __iterator__");
tryItOut("if(({a2:z2}) >>>= /x/ ) {export __parent__; } else continue ;");
tryItOut("((((1 for (x in []))).call).call( '' , ));");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = \r<><x><y/></x></> in [,]) {gc() }");
tryItOut("return  '' ;\t");
tryItOut("/*for..in*/for(let (this.__defineSetter__(\"constructor\", 0.1))(prop) in ((eval)(\n<><x><y/></x></>.@*)))export __count__;");
tryItOut("with({__count__: ( ''  .@x:: [[]])}){gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.constructor in (function(q) { return q; }).apply) if(<y><z/></y>) null");
tryItOut("if( /x/g .hasOwnProperty(\"__noSuchMethod__\")) { if (this.zzz.zzz.__noSuchMethod__) export *; else {throw  /x/ \t; }}");
tryItOut("{let __proto__;gc() }");
tryItOut("/*infloop*/M:while((uneval(*))){yield <><x><y/></x></>; }");
tryItOut("/*infloop*/while((\tundefined.valueOf(\"number\")) if (<x><y/></x>.yoyo(prop))){/*infloop*/for(var constructor; <><x><y/></x></>;  \"\" ) {var __count__; } }");
tryItOut("/*infloop*/for(( /x/ .constructor); (function () { return  \"\"  } ).__lookupSetter__(\"__count__\"); (uneval([<x/>]))) {return constructor.__iterator__|=function ([y]) { }(<y><z/></y>, *);export *; }");
tryItOut("switch(__parent__) { eval }");
tryItOut("/*for..in*/for(var constructor.__proto__ in (((new Function(\"<x><y/></x>\")))(\f__proto__.prop getter= new Function)))var __parent__ = this, __iterator__;");
tryItOut("with({}) {}");
tryItOut("if(window) {continue L; } else  if (prototype) {let constructor; }");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] = this.__defineGetter__(\"prototype\", (({a1:1})).watch) in __proto__ = new (constructor)/*\n*/(__count__)) /*infloop*/do gc() while(-1);/*infloop*/\tfor(var [] = new (<x/>.prototype = <><x><y/></x></>.__parent__ = (1.3.eval(0/0))).watch(); (window ? <>__parent__</> : <x><y/></x> ? ({a1:1}) : (__noSuchMethod__.constructor)); <{prop}><zzz>(\n<y><z/></y>)</zzz><xxx>{__iterator__}</xxx><!--yy--></{prop}>) if(prop) { if (default: /*infloop*/while(<y><z/></y>){if( /x/ ) x::prototype, __parent__ = window; }break; break; /*infloop*/L:for(const constructor; false; constructor) {}case <x><y/></x>.__lookupGetter__(\"__parent__\"): (new Function(\"export constructor;\"))) export __noSuchMethod__; else {(5.0000000000000000000000);const <y><z/></y>, function::__iterator__; }}");
tryItOut("/*infloop*/M:do throw __parent__; while(Date(-3/0, ((__proto__.unwatch(\"prototype\"))[true ^ [,,]].propertyIsEnumerable(\"__parent__\"))));");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((gc)(('fafafa'.replace(/a/g, <x><y/></x>) ^ <x><y/></x>.*))))return <x><y/></x>;");
tryItOut("/*for..in*/for(var ({ __iterator__: __proto__, __noSuchMethod__: [1] }) in <><x><y/></x></> ^ <x/>) continue ;");
tryItOut("M:switch(__noSuchMethod__ , undefined.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) { default: if(<y><z/></y>) return __count__;break; case <y><z/></y>.eval(<y><z/></y>): export *;break; break; while((<x><y/></x>.__count__ = <x/>) && 0){export *; } }");
tryItOut("if((yield constructor.prototype = <x><y/></x>)) null;");
tryItOut("with(prototype = (-0) += __iterator__ && (-1))(<><x><y/></x></>\t);");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("<x><y/></x>; const __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("if(this.zzz.zzz) {/*infloop*/while((new [1,2,3,4].slice(true, __noSuchMethod__)).constructor = [15,16,17,18].sort(eval, <><x><y/></x></>)){throw .2;{}\ngc()\n\nexport *; } }");
tryItOut("M:if((__parent__ = __count__)) {( \"\" ).__defineSetter__\n\t /* Comment */__proto__; }");
tryItOut("/*for..in*/for(let  '' \t in (1e4 >>>=this++)) <x><y/></x>\n/*infloop*/for(prototype; 0/0 >= <y><z/></y>; (this.__defineSetter__(\"prototype\", Function))((let (__parent__, each = <><x><y/></x></>) this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)), (yield 1e81))) L: return");
tryItOut("do {with((undefined.prop.*))export *; } while((3) && 0);");
tryItOut("throw StopIteration;");
tryItOut("{{} }");
tryItOut("L:if(new prototype()) { if (++(var prop = <y><z/></y>;.__noSuchMethod__ = undefined)++) return;} else gc() }");
tryItOut("L:while((eval(__parent__, window)) && 0){yield;<><x><y/></x></> }");
tryItOut("({}).__lookupGetter__ const __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if((<x><y/></x>)(window, this)) { if ( '' ) {export __parent__;yield; }} else {(1e4); }");
tryItOut("\n");
tryItOut("if(__count__) {export *; } else {continue L; }");
tryItOut("/*for..in*///h\nfor(const __count__ in (([1,2,3,4].slice)(undefined & *)))const prototype, prop;");
tryItOut("yield __iterator__;");
tryItOut("/*infloop*/M:for(var ({ constructor: prototype }) = function  __iterator__ () {  /x/ ; } (prototype, __count__); eval(\"0/0[ \\\"\\\" ]\", function (constructor) { return prop; } ); <><x><y/></x></> >>  '' ) (null); const prototype;");
tryItOut("const __noSuchMethod__ = *, __parent__ = .2; const __count__;");
tryItOut("/*infloop*/M:while((eval(\"yield __iterator__;\", <x/>))){var __proto__, prop = null; }");
tryItOut("var __count__, __iterator__ = constructor");
tryItOut("if(eval(\"null .@ null\", )) { if ( /* Comment */<><x><y/></x>\n</> * new window()) /*infloop*/M:do ( \"\" ).watch while(@foo);} else {/*for..in*/for(const prototype in (((function (__parent__, __iterator__)yield *::*).call)(<x/>)))if( /x/ ) ; else  if (-0) {@foo;let prop; } else return;/*for..in*/for(let [constructor, prototype] = constructor in <><x><y/></x></>) {;export *; } }");
tryItOut("/*for..in*/[15,16,17,18].sort(function  __count__ () { ; } , <x><y/></x>)");
tryItOut("yield <x/>;");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = <x/> in (__count__)/*\n*/ = (prototype = true)) {if([[1]]) __proto__ = #3={a:#3#}, prop; else  if ((-0)) {export prototype; } else {__count__ = prop;gc() }if(4..isPrototypeOf(<><x><y/></x></>)) {__iterator__ = 1.2e3const __iterator__; } else {gc() } }");
tryItOut("with({constructor: constructor.__count__ = <><x><y/></x></> ^=  '' })L: <x><y/></x>");
tryItOut("let(({ prop: __parent__ })) { try { with({}) { return; }  } catch(__iterator__ if __proto__.__lookupSetter__(\"__parent__\")) { for(let y in []); } catch(//h\nvar __proto__;) { try { ; } finally {  { yield *::*[(function ([y]) { })()].__lookupGetter__(\"__iterator__\") }  }  } finally { yield yield  '' ; } ");
tryItOut("var __noSuchMethod__ = 1e4;{}export constructor;");
tryItOut("yield;");
tryItOut("{if((<x/>.watch(\"__count__\", (@foo).__defineSetter__))) { if ((function ([y]) { })()) {}} else /*infloop*/for(prototype; (<x><y/></x>.([1,,])); __iterator__.__defineSetter__(\n\"prop\", (({}).__lookupGetter__).apply))  const __iterator__; }");
tryItOut("let(__noSuchMethod__, __proto__ = (this)) ((function(){for(let y in []);})());");
tryItOut("L:if(<y><z/></y>) yield; else  if (({ prototype: prop }) = eval(\"<x/>\",  /x/g )) {continue ; } else __proto__ = <><x><y/></x></>, __count__ = 4.");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ((this); %= undefined++)) ;");
tryItOut("M:if(-1) gc() else <y><z/></y>;");
tryItOut("{with({__count__: __parent__.__iterator__ setter= ((function(y) { yield y; return <x><y/></x>;; yield y; }).apply).call})gc()\nbreak ;\n }");
tryItOut("gc()");
tryItOut("/*infloop*/for(let __proto__ =  /* Comment */<x><y/></x//h\n>; <{__count__}><x><y/></x><x><y/></x>yyy</{__count__}>; eval(\"/*infloop*/for( /x/ ; <x><y/></x>; <><x><y/></x></>) yield <><x><y/></x></>;\", (this.__defineGetter__(\"prop\", function  prototype (__iterator__)<><x><y/></x></>)))) ;");
tryItOut("/*infloop*/while(this)yield;");
tryItOut("throw undefined;");
