tryItOut("if(((constructor = this) << this.__defineSetter__(\"__count__\", Math.sin).propertyIsEnumerable(\"__count__\"))) L:switch(__count__.(*::*)) { case 1: return <x><y/></x>;break; default: true;break;  }");
tryItOut("L: {yield this; }");
tryItOut("this.zzz.zzz;");
tryItOut("yield ([((new Function(\"export *;\"))).call(({}), this)])");
tryItOut("/*infloop*/do __noSuchMethod__ = __iterator__; while( \"\" .__proto__);");
tryItOut("/*for..in*/for(const __iterator__ in ((({}).__lookupGetter__)(window for each (__count__ in <><\fx><y/></x></>) / (this.zzz.zzz))));");
tryItOut("/*for..in*/for(const __iterator__ in ((function(q) { return q; })(eval(\"export *;<x><y/></x>\", new ((<><x><y/></x></>))(this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in [])))))))){{return; } }");
tryItOut("/*for..in*/M:for(var (constructor) in <x><y/></x>) {yield;yield; }");
tryItOut("let (__count__, prototype) { if(<x><y/></x>.yoyo(<><x><y/></x></>)) ; else  if ([11,12,13,14].sort) gc() }");
tryItOut("{return  /x/g ; }");
tryItOut("with(window.throw(<x><y/></x>).__proto__)\nthrow __proto__;");
tryItOut("var __count__;");
tryItOut("continue M;with({constructor: __iterator__})yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (Math.pow)((eval(\"<y><z/></y>\", this)), (Function\n).call( '' \t, null, <>\r<x><y/></x></>)).__count__ in this) try { {} } catch(__proto__ if __iterator__ = __iterator__) { const prop//h\n; } ");
tryItOut("return;throw <><x><y/></x></>");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(__iterator__ = function::prop in __count__ = true) { if ( /x/g )return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  /x/ ) {gcreturn; }");
tryItOut("");
tryItOut("prop getter: [1,2,3,4].map");
tryItOut("export prop;");
tryItOut("this.zzz.zzz;");
tryItOut("L:if((null.__iterator__)) { if (new Function) {;{} }} else if(({prop: this})) { if ([[1]] <= (-0)) {export *;; } else {return null; }}");
tryItOut("{export prototype;'haha'.split }");
tryItOut("throw constructor;");
tryItOut("try { export __noSuchMethod__; } catch(constructor if (new null(*, <><x><y/></x></>))) { (<x/>); } finally { throw function(id) { return id }; } ");
tryItOut("if(((__noSuchMethod__+=*::*)[(1e-81\n)])) { if ((({ __parent__: prototype }) = <x/>)) (true);} else /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in window) break L;");
tryItOut("prop = __iterator__;");
tryItOut("if( /x/ ) {export __count__; } else  if (*::*.__defineGetter__(\"__noSuchMethod__\", /a/gi)) continue \nreturn;");
tryItOut("L: {-3/0;var prop; }");
tryItOut("switch(this.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>)) { case 8: export prototype; }__parent__");
tryItOut("let(<x><y/></x> = false, __proto__ = (function(q) { return q; }).call( '' , <><x><y/></x></>, [,,z1])) ((function(){prototype = __proto__;})());");
tryItOut("throw [z1] ?  ''  : __iterator__\nreturn <y><z/></y>;");
tryItOut("/*infloop*/while(Math.pow(Math.sin((\n__count__)))){export prototype; }");
tryItOut("/*for..in*/M:for(var __parent__.__parent__ in ((default: case (this.__defineGetter__(\"constructor\", <x><y/></x> % __parent__)): break; case 6: case (__parent__.constructor): break; )(__noSuchMethod__ >>>=[[1]][ '' ])))/*for..in*/__iterator__for(const prop = (((-1) , [1,,]))(__parent__.propertyIsEnumerable(\"__noSuchMethod__\"), *) in eval(\"undefined\", (++<x><y/></x>))) {return;export constructor; }");
tryItOut("throw __count__;");
tryItOut("");
tryItOut("/*infloop*/M:for(__proto__; (prop)(eval(\" '' \", <x><y/></x>)) = <><zzz> '' </zzz></>; 'fafafa'.replace(/a/g, [15,16,17,18].map(/a/gi, this))) {M:if(new (/a/gi)(@foo)) { if (( ''  instanceof *)) return <x/>; else {(033); }}export *; }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = let (__iterator__ = #1=[this]) this.__defineSetter__(\t\"constructor\", Math.sin)[(@foo & (window)())] in @foo) var __count__ =  '' ");
tryItOut("{/*for..in*/for(const __proto__ in ((function (prop)<y><z/></y>)(<x/>))){break M; } }");
tryItOut("(#1=[#1#]);");
tryItOut("for(let y in []);");
tryItOut("( /x/ );");
tryItOut("L: {do yield; while((window) && 0); }");
tryItOut("/*for..in*/for(let __iterator__ in true.__proto__ =  ''  = 'fafafa'.replace(/a/g, ((<x/>).apply).apply)) if(__noSuchMethod__) {{}yield #1#; } else {gc()gc() }");
tryItOut("/*for..in*/for(let function::__parent__ = __iterator__ in (-0)) break M;");
tryItOut("do {/*infloop*/while(this.__defineGetter__(\"__proto__\", Math.pow)){return; } } while((prototype) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("if(let (__parent__, __proto__) <x><y/></x>) {/*infloop*/for(let [] = (__noSuchMethod__ = new ([z1])([,,])); <x><y/></x>.(<><x><y/></x></>); this .. __parent__-=prop) let (__count__) { break M; }return; }");
tryItOut("{(<x/>); }");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/L:for((true ^=  '' )['({ prototype: __count__ })'] in ((gc)(new <><\fx><y/></x></>(<><x><y/></x></>, yield)))){return; }");
tryItOut("if() {(true);{} } else  if (true < .) {const constructor = <x/>, prototype;yield; }");
tryItOut("/*infloop*/for(([<><x><y/></x></>])[1e-81]; 1e81; ((gc)())) yield;");
tryItOut("export __parent__;");
tryItOut("return <><x><y/></x></>\nMath.sin");
tryItOut("/*for..in*/L:for(__count__ in #1=[#1#]) {(@foo);function(y) { yield y; const __noSuchMethod__, prop;; yield y; } }");
tryItOut("{throw <><x><y\f/></x></>; }");
tryItOut("/*infloop*/while(new <x><y/></x>())break ;");
tryItOut("if(new ((window.isPrototypeOf(<x><y/></x>)).watch)()()) /*for..in*/M:for(var prototype.prop in ((function (prop) { yield ( /* Comment */#3={a:#3#}) } )((constructor = @foo)))){Math.pow\ncontinue ; } else {return;export *; }");
tryItOut("let(__count__ = prop = arguments, __count__ = <x/>) ((function(){return <y><z/></y>;})());");
tryItOut("let(__noSuchMethod__ = (function (prototype, prototype) { yield @foo } )() >>>=null, try { throw <x><y/></x>; } finally { return; }  = ( /x/  for each (prototype in <x><y/></x>))) { throw __iterator__;");
tryItOut("gc()\n");
tryItOut("gc()");
tryItOut("{}");
tryItOut("/*infloop*/while(__iterator__.__parent__ = <><x><y/></x></> += __parent__){eval }");
tryItOut("/*for..in*/for(let __iterator__ = <xxx {prop}={({\t__iterator__ setter: 'haha'.split, prop: <x/>.hasOwnProperty(\"__iterator__\") })} />.(((~<><x><y/></x></>) %= (let.(*))).prop = ((#1#.propertyIsEnumerable(\"__proto__\") for each (__proto__ in __noSuchMethod__) for (__parent__ in #3={a:#3#})))) in delete prototype.propertyIsEnumerable(\"__count__\")) __iterator__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(each.__noSuchMethod__ in this.propertyIsEnumerable(\"prototype\") ? (yield <x><y/></x>) : window = null) {/*for..in*/for(let [__noSuchMethod__, __iterator__] = (export prop)((<x/>--), new function  __proto__ (prop, prototype) { gc() } (__parent__, <x><y/></x>)) in function(id) { return id }\n) {throw  /x/ ; } }");
tryItOut("{}\n");
tryItOut("/*infloop*/for(((<x><y/></x>)[@foo]); ([1].yoyo(<x><y/></x>)); [11,12,13,14].some) {var prototype, __parent__ = false;var __count__ = *;\t }");
tryItOut("let(__proto__, __iterator__) { prototype = prototype;");
tryItOut("__proto__ = 3, __proto__ = <><x><y/></x></>;");
tryItOut("/*infloop*/do {function (constructor, __count__)#3={a:#3#}{} } while((new Array().unwatch(\"function::__count__\")))\n");
tryItOut("if(eval(undefined << <x><y/></x>)) { if ((new Function(constructor\t = [11,12,13,14].sort)).watch(\"prop\", <x/>())) break ;} else {const __noSuchMethod__ = [,,z1]; }");
tryItOut("switch\t(<><xxx {__count__}={@foo |=  '' } /></> += [,]) { case 3: break; default: for(let y in [5,6,7,8]) Functionbreak; let (__noSuchMethod__ = (uneval(null))) { export __count__; }break; break; case 5: /*infloop*/do if(*::*) (<><x><y/></x></>); else  if (false) export __count__; while((<x/> in this));break;  }");
tryItOut("/*infloop*/M:while([,].__defineGetter__(\"prototype\", __parent__)){if(this % false.yoyo(void function(id) { return id } &= (<y><z/></y>\n))) {function (__proto__) {  }  } }");
tryItOut("if(null in //h\n<x><y/></x>) { if (constructor%= /x/g .@*) /*\n*/'haha'.split} else yield\n");
tryItOut("prop = prop;");
tryItOut("{}");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] = (prop = <><xxx>{prototype}</xxx></>) in this.__defineGetter__(\"__proto__\", Math.sin)) yield;<xxx>{prop}</xxx><xxx {__iterator__}={constructor.__proto__} \t/> ");
tryItOut("if([this for each (__iterator__ in this.propertyIsEnumerable(\"__noSuchMethod__\")) if ( \"\" )].( /x/g )) {return; } else  if (__iterator__ *= {} >> (({prototype: <x><y/></x>.throw(4.\r) }))) with(this)__count__ = this, prototype; const __iterator__; else {if(<x><y/></x>) return; else  if (__parent__) (this).watch }\t");
tryItOut("yield 0x99;export constructor;");
tryItOut("/*for..in*/for(prop in ((/a/gi)(({__parent__: <><x><y/></x></>, __parent__: this }))))const __noSuchMethod__, __parent__;\t");
tryItOut("while((((prototype+=(<y><z/></y>\n)) < ({ case window: __proto__ = prop;break; case __parent__: undefined;break; nullbreak; : prop }) = (__parent__ = window))) && 0){switch(0/0) { case 1: /*infloop*/while([[1]]){__noSuchMethod__; }break; default: case 1: break; case prototype = undefined: break;  }constructor }");
tryItOut("with({__count__: this}){<x><y/></x>;throw #3={a:#3#}; }{/*infloop*/for(0x99 ? <y><z/></y> : *; ((new [1,2,3,4].map()) ?   __proto__  : '[, __parent__, prototype, __iterator__, ] = <><x><y/></x></> << prototype); [this]) {L: ;M:if(<y><z/></y>) { if (prop) {} else {return;function  constructor () { return ({}) }  }} }L: break M; }");
tryItOut("with({__iterator__: ({ get constructor __count__ (__noSuchMethod__) { yield null } , __proto__ setter: (<><x><y/></x></>).watch }) for (__iterator__ in *) for (prototype.__proto__ in window) for each (__iterator__ in <x><y/></x>)}){/*for..in*/M:for(var constructor in (((1 for (x in [])))(<><x><y/></x></>)))break M;L:with({prototype: 1.2e3}){export prop; } }");
tryItOut("let (constructor = *) { with({__iterator__: -0}){if((constructor\f.prop getter= function(q) { return q; })) {; } else  if ((eval(\"\", @foo))) throw null;var __proto__ = <>/>; } }");
tryItOut("for(let y in [5,6,7,8]) try { throw [, , __iterator__, __count__]; } finally { __parent__ = __proto__; } ");
tryItOut("/*for..in*/for(let __proto__ = [this.__defineSetter__(\"prop\", (({}).__lookupGetter__).apply)].filter((function (__proto__) { yield <x/> } ).apply) in  /x/ ) /*for..in*/for(let prototype in  '' ) { }");
tryItOut("/*for..in*/for(var each in ((/*\n*/(({}).hasOwnProperty).apply)((*.isPrototypeOf(((yield <xxx>{__parent__}</xxx>.(#3={a:#3#}))))))))/*for..in*/for(var [__parent__, prop] = (eval(\"this\", <x><y/></x>)) in <x/>) /*for..in*/for(const constructor = [,,] in <><x><y/></x></>) {export *; }");
tryItOut("/*for..in*/for(var [__count__, constructor] = * in this) {continue M;yield; }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ({(__noSuchMethod__) getter: ({}).hasOwnProperty }).*; ([window].map(Math.pow)).call(+ /x/g , ); this.__defineGetter__(\"__proto__\", 'haha'.split)) /*for..in*/L:for(var __proto__ = (#2=({__count__: <><x><y/></x></>})) in .2) {return;; }");
tryItOut("__parent__.prop\f < this.zzz.zzz");
tryItOut("yield (/a/gi).apply;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for \t each(var prop in [[]]) {L: {export *;throw 1e+81; } }");
tryItOut("({ __noSuchMethod__: __iterator__, prototype: get }\t) = prototype;");
tryItOut("/*for..in*/for(var __iterator__ in ((function (prototype)(<><x><y/></x></> << *))({throw __parent__;{} }.eval((__proto__ |=  /x/g ))))){with(eval(\"<y><z/></y>\", true)){; } }");
tryItOut("/*infloop*/for(__iterator__; ((p={}, (p.z = __proto__)())); __count__ = eval(\"<y><z/></y>\", <><x><y/></x></>)) {/*for..in*/for(let -3/0['constructor'] in ((true)((1e4.__defineSetter__(\"__parent__\", /a/gi)))))return *; }\nthrow *; const __parent__;");
tryItOut("if(<><x><y/></x></>) { if (__count__) {(<y><z/></y>);export *; }} else gc()");
tryItOut("yield <y><z/></y>;");
tryItOut("/*for..in*/for(constructor in undefined) /*for..in*/for(let __count__.__proto__ in (((this |= [,,z1].isPrototypeOf(0x99)))(<><x><y/></x></> === __count__)))throw null for (prototype in __count__);");
tryItOut("{throw *;gc() }");
tryItOut("with({__noSuchMethod__: __count__.(prop.prop = (yield new (#3={a:#3#}.@foo)()))})for(let y in []);");
tryItOut("{yield null; }let __proto__, constructor;");
tryItOut("if(__proto__) { if (()) if(@foo) var __proto__; else  if (prop) var prototype = setter; else gc()} else {export constructor;export *; }");
tryItOut("L:while((__count__ = ({ __noSuchMethod__: constructor, __proto__: function::function::constructor })) && 0){var constructor = *::*, __parent__ = <x><y/>\f</x>; }");
tryItOut("{if((<x><y/></x>[ /x/g ])) return window; }");
tryItOut("yield; const __proto__;");
tryItOut("yield <y><z/></y>;");
tryItOut("while((<><x><y/></x></> + @foo) && 0)yield;");
tryItOut("if( /x/ ) {undefined } else {let __count__; }");
tryItOut("return\neval const __noSuchMethod__;");
tryItOut("/*for..in*/for(var __count__ in ((Math.pow)(constructor = *::*.unwatch(\"__count__\")))){null;var __noSuchMethod__; }");
tryItOut("export \f__parent__\n const __iterator__;");
tryItOut("/*infloop*/M:for(let __parent__; yield __count__; 1e+81) export *;");
tryItOut("/*infloop*/for(const __iterator__; (<x/> <= !*::*); 'fafafa'.replace(/a/g, false)) {function(q) { return q; } }");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__.__proto__] = eval(\"__parent__;\", __iterator__) in <x/>.__noSuchMethod__ = this) {if(\n__iterator__) {return <><x><y/></x></>; } else {var __parent__ = *::*;break M; } }");
tryItOut("/*for..in*/for(var constructor in (((__noSuchMethod__ & *::*.throw((eval(\"undefined\", <x/>)) >>= new ([1,,])(null,  \"\" )).__iterator__ = Function((this.valueOf(\"number\")),  '' ) &= ({a2:z2})).watch)(({__proto__: (let (__iterator__ =  '' ) (this ? [z1] : 5.0000000000000000000000)), __iterator__: ([({ __count__: constructor, prop: __parent__ }), [], ({ prop: __proto__ }), [constructor, constructor, , __noSuchMethod__], ] = ([,,] !== this)) })))){(<x><y/></x>);return <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prototype); }");
tryItOut("prototype = __iterator__;");
tryItOut("M:if((#3={a:#3#} &= <x><y/></x> for (__count__((function ([y]) { })()) in __iterator__) if (<x/>))) gc()");
tryItOut("var __count__ = false, __proto__ = <x><y/></x>;return;");
tryItOut("do const prototype = 0.1, prop; while((__noSuchMethod__.__parent__ setter= (/a/gi).apply) && 0);");
tryItOut("while((()) && 0)/*infloop*/L:for(let __noSuchMethod__; this; <y><z/></y>) yield\nlet (prototype, constructor = __iterator__ >>>=*::*) { return; }");
tryItOut("case  /x/g : with({__noSuchMethod__: prototype}){const __count__; }break; {}break; __noSuchMethod__ =  \"\" , __count__ =  /x/ ;break; default: ;");
tryItOut("throw  /x/g ; const prop;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].map)(new (__iterator__+=0/0)(([[]] .. <><x><y/></x></>)))))gc()");
tryItOut("let(prototype, __count__) { with({}) yield;");
tryItOut("prototype = ([15,16,17,18].map(function(y) { yield y; export __iterator__;; yield y; } =  /x/  -= -1, @foo ? <x><y/></x> : true))");
tryItOut("switch(this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty) |= yield __proto__) { case 4:  }");
tryItOut("if((uneval((new (function  __proto__ (__parent__, __proto__)0x99)())))) { if (<y><z/></y>) {try { let __parent__, __parent__ = <><x><y/></x></>; } catch(prop) { throw *; } finally { const __count__ = __count__; } let  = false; } else }");
tryItOut("/*infloop*/L\f:while(<><xxx>{prop}</xxx></>){({}).__lookupGetter__ }");
tryItOut("with({}) with({}) { return constructor =  '' ; } ");
tryItOut("/*infloop*/L:for(prototype; <x><y/></x>; *) { }");
tryItOut("/*infloop*/while((yield new Function()))Math.sin");
tryItOut("gc()");
tryItOut("continue ");
tryItOut("if(__proto__) const __noSuchMethod__ = , __proto__ = *; else  if (new (<x><y/></x> >= prop)([11,12,13,14].sort))  else {({ __count__: [__parent__, , ], prototype: ({ prop: prototype }) }) }\n");
tryItOut("let (constructor = <y><z/></y> >= [z1], prop = __iterator__ = <\t><x><y/></x></> ?  \"\" .throw( '' ) : undefined.__lookupGetter__(\"constructor\").__defineSetter__(\"prototype\", function () { yield  \"\" .__count__ } )) { M:with(*){return;let x::__count__, __count__; } }");
tryItOut("with( /x/ )__proto__ = *;");
tryItOut("/*infloop*/for(@foo; false; 4.) {yield; }");
tryItOut("{;if([15,16,17,18].filter([1,2,3,4].slice, <><x><y/></x></>)) return false; }");
tryItOut("let (x::__noSuchMethod__ = (<x><y/></x> .@  /x/ ), __noSuchMethod__) { yield; const __proto__; }");
tryItOut("if(this\t = (new (*)())) {if(<><x><y/></x></>) {; } else  if (__noSuchMethod__ = <x><y/></x>) __parent__ = this; } else  if (new ((.watch(\"__iterator__\", null)))()) *::*; else {throw <y><z/></y>;; }");
tryItOut("let (__iterator__, __iterator__) { let __parent__ = this; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/yield (!<x/>).watch(\"x::prop\", function  this, <><x><y/></x></> () { yield  \"\"  } );do return false; while(this.__defineSetter__(\"__parent__\", (__parent__ = *::*).__defineSetter__));");
tryItOut("yield (prop = constructor);");
tryItOut("return;");
tryItOut("if(prototype = #1#) {({}).__lookupGetter__<x><y/></x>; }");
tryItOut("M:if(({})) { if (prop.prop setter= ({}).hasOwnProperty) {(<y><z/></y>); } else false;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in new (this)(*)) /*for..in*/for(__iterator__ = undefined < *.__lookupSetter__(\"__iterator__\") in ({a1:1}).__defineGetter__(\"constructor\", [1,2,3,4].map)) (null);");
tryItOut("/*infloop*/M:while(\n5.0000000000000000000000)yield *;");
tryItOut("/*infloop*/for(const [, , __count__, __proto__] = Number(); 1e4.throw((<xxx {constructor}={ /* Comment */function(id) { return id }} />.((({__iterator__: ([<x/>].some(prototype)) }))))); (p={}, (p.z = ( '' .throw( /x/ )))())) {M:if(((p={}, (p.z = false)()))) <><xxx>{constructor}</xxx><ccc:ddd><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd></> else {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in null) {yield; } } }");
tryItOut("if((({ get __count__\t(__proto__, [({ __parent__: __iterator__ }), constructor, , , ({ __count__: prototype })]) { var __iterator__;\n( \"\" );\n } , __parent__: true ^ new (1e+81)(#1=[#1#], <><x><y/></x></>) })) , [11,12,13,14].map.@foo) L: (prop); else  if ((__count__)) {function (__parent__) { export *; }  }");
tryItOut("/*infloop*/for(const constructor = ((yield [,,z1])); <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\"); __iterator__ = [1]) {yield true;yield; }");
tryItOut("let __parent__, __parent__ = -0");
tryItOut("({}).hasOwnProperty{}");
tryItOut("if((<><x><y/></x></>.eval(<x><y/></x>)\n).unwatch(\"constructor\")) var __parent__, __proto__; else  if ((({__iterator__ getter: ((__count__).watch).call }) for (__noSuchMethod__ in <x><y/></x>) if (__iterator__))) {return prop;; } else return  /x/g ;");
tryItOut("(new 'haha'.split(true))([[]]) = prop;");
tryItOut("/*infloop*/for(const __iterator__; ([15,16,17,18].map(function ()3.141592653589793, -<><x><y/></x></>)); __proto__) {__count__, prop; }");
tryItOut("if(<><x><y/></x></> && <x/>) {throw <><x><y/></x></>; } else __count__ = [[1]];");
tryItOut("with({}) return \t(__count__.__noSuchMethod__ getter= (__proto__).__defineSetter__);");
tryItOut("let (__iterator__ = (\nwindow), function::__proto__ = {}) { break ; }");
tryItOut("prototype.prototype = __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("\fif((__noSuchMethod__ = ( '' .__parent__))) const __noSuchMethod__ = <x/>; else  if (<x/>) {continue L;var __noSuchMethod__; const prop; } else export __noSuchMethod__;");
tryItOut("if(<><x><y/></x></>) {<x><y/></x> } else  if (this) ;");
tryItOut("/*for..in*/L:for(let [ var __noSuchMethod__ = __parent__.prop;x::__noSuchMethod__, __parent__] = __iterator__.\t__noSuchMethod__.__noSuchMethod__ getter= eval in 0.1 in *) ;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((p={}, (p.z = eval(\"do  while((__count__) && 0);\", true.__iterator__ = *::*))()))) {/*infloop*/for(var ({ function::__iterator__: \f[({ __noSuchMethod__: __proto__ }), , , , ({ prop: ({ constructor: __noSuchMethod__ }) })] }) = arguments + ({__iterator__: <><x><y/></x></>}); null.watch(\"__count__\", (0).call); new RangeError()) {yield; } }");
tryItOut("/*for..in*/for(const prototype = @foo.isPrototypeOf(this).eval( /x/g ) in undefined) {; }");
tryItOut("if([z1,,]) __proto__, prop = @foo; else  if (<><x><y/></x></>) {gc(); }");
tryItOut("return undefined;");
tryItOut("{let (prop, __noSuchMethod__ = this) { Math.pow }/*for..in*/for(const __parent__( \"\" ) in (('haha'.split)(return))){(null);const __parent__, __proto__ = <y><z/></y>; } }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/while( /x/  ^ -0)export *; const __noSuchMethod__;/*for..in*/for(let __parent__ in (('haha'.split)(@foo)))export prop;");
tryItOut("/*infloop*/for(const __iterator__ = __count__ = do {[1,2,3,4].slice } while((window) && 0); __proto__ = [,,z1] @ (); (prop.constructor getter= function (__count__, { { return false } continue ; }) { return 0/0 } )) {( \"\" ); }");
tryItOut("/*for..in*/for(var __iterator__ in @foo) {{} }");
tryItOut("if(\") {yield *; }");
tryItOut("[[]]\n");
tryItOut("/*infloop*/for(let [] = new prototype(); (const prototype = [1,,].__defineGetter__(\"__proto__\", ({}).__lookupGetter__)\n); [15,16,17,18].map(function (prototype, prototype) { const __count__; } , this).hasOwnProperty(\"prop\")) {return __iterator__;return <x/>; }");
tryItOut("L: {gc() }");
tryItOut("{}");
tryItOut("let (__proto__, []) { switch([ '' ].filter(function(y) { yield y; var __iterator__ = true;; yield y; })) { case 5: {}var __iterator__;break;  } }");
tryItOut("if((-0)) return this; else  if (<><{prototype}><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd//h\n></ccc:ddd></{prototype}></>) this; else yield;");
tryItOut("if((#1=[#1#].propertyIsEnumerable(\"__proto__\")).hasOwnProperty(\"constructor\") <= (<><x><y/></x></>)([,,])) { if (__iterator__ = <><x><y/></x></>) {{const __noSuchMethod__ = {}; } }} else L: {let prop = ({a1:1}); }");
tryItOut("M:with({prop: __proto__ ?  : ([15,16,17,18].sort(new Function, ({ __parent__: __parent__ })))})throw StopIteration;");
tryItOut("M:if(@foo) {yield; }");
tryItOut("L: {gc(){} }");
tryItOut("let(prototype = new (eval).apply()) { try { __proto__ = prototype; } finally { with({}) break ; } ");
tryItOut("export prototype;continue M;");
tryItOut("while((null) && 0)/*for..in*/for(const [__count__, constructor] = (p={}, (p.z = <><x><y/></x></>)()) in false) {;yield undefined; }");
tryItOut("if(<x><y/></x>) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in  /x/g ) if(<y><z/></y>) { if (#1#) { } else yield;}");
tryItOut("L:switch((<><x><y/></x></>.@*)) { default: break; break;  }");
tryItOut("yield;return <x/>;");
tryItOut("/*infloop*/M:for(function(id) { return id } in \fthis; 1e81(<><x><y/></x></>, __parent__); <><x><y/></x></>) { \"\" export prototype; }while(((-undefined)) && 0){<x/>continue L; }");
tryItOut("M:if(this) const __parent__; else return ({a2:z2});");
tryItOut("{{}Math.pow }");
tryItOut("/*infloop*/for(function  constructor (x::__proto__)//h\n { yield @foo } ; ([11,12,13,14].map); <><x><y/></x></> >>>=<x><y/></x>) {break ; }");
tryItOut("/*for..in*/M:for(var __parent__ in false) const __proto__;");
