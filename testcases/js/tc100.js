tryItOut("/*for..in*/L:for(let function::__iterator__.<><x><y/></x></>.throw([1,,]) in ((function (constructor) { with({__noSuchMethod__: false})const __parent__ = [1]\n } )( in [11,12,13,14].filter))){gc()\n(this.zzz.zzz)\n'haha'.split }");
tryItOut("/*for..in*/for(const constructor = (function  __parent__ () { break ; } ) in (__count__ = <><x><y/></x></>)) {let (__parent__) { export *; } } const prototype;");
tryItOut("if(0.1) /*for..in*/M:for(let [__proto__, __proto__] = ( '' .__lookupSetter__(\"__noSuchMethod__\")) ? (<><x><y/></x></>.yoyo(<x><y/></x>)) : (* ?  ''  : <x><y/></x>) in  '' ) {undefined } else  if (( \"\" )[window] for (__noSuchMethod__ in function ([y]) { }) for each (__parent__ in false).valueOf(\"number\")) {/*for..in*/L:for(__noSuchMethod__ in ((<x><y/></x> * *::*)(yield  /* Comment */*)))return; const __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in eval(\"const __count__;\", prop = [,,z1])) {throw constructor; }");
tryItOut("/*infloop*/M:do return <x><y/></x>; while(*);");
tryItOut("/*infloop*/M:for(prototype = this; <><xxx {__count__}={( \"\" .eval(window))} /></>.__defineSetter__(\"__iterator__\", (4..__count__ = [1,,] ? (<x/>.__defineGetter__(\"__parent__\", function  __count__ (__count__, prop) { gc() } )) : (let \f(function::__parent__ = <x><y/></x>) undefined))); continue M;.__count__) yield __proto__ = <x><y/></x>;");
tryItOut(" /x/ ");
tryItOut("L:if(__noSuchMethod__ = <y><z/></y>.*.__lookupGetter__(\"__iterator__\")) {return; } else  if (#2=[[11,12,13,14].map]) {__noSuchMethod__M:do __proto__, __count__; while((@foo) && 0); } else do prototype = this; while((0.1) && 0);");
tryItOut("/*infloop*/for(*::*.propertyIsEnumerable(\"__count__\"); [,,]; (((window)[(window.@* for each (prop in window))]).yoyo((__count__ = 'fafafa'.replace(/a/g, undefined))))) __parent__ =  '' , x::__count__ = (function ([y]) { })();");
tryItOut("L: let constructor, __count__ = #1=[#1#];");
tryItOut("if(this) { if (new (Math.sin)({}, <x><y/></x>)) const prototype = prop, let = 1e+81; else gc()}");
tryItOut("/*for..in*/M:for(let __proto__ = ({ set __iterator__(__iterator__) { const __proto__, ; }  }) in (new @foo( /x/g , <x><y/></x>).throw(delete @foo\f))) {(<x/>);gc() }");
tryItOut("/*infloop*/for(let ({ constructor: ({ prop: ({ __iterator__: __iterator__ }) }), __proto__: ({ __count__: ({ __parent__: [, ] }), __iterator__: ({ __iterator__: ({ __proto__: ({ prop: __proto__ }) }), __parent__: constructor }) }) }) = Boolean(--window, (<x><y/></x> == *.__lookupGetter__(\"constructor\"))); new (((yield arguments)) <<= __iterator__.constructor)(()); ((p={}, (p.z =  /* Comment */typeof #3={a:#3#}[(new RangeError(undefined, 0))])()))) {let __proto__ = this;null }");
tryItOut("__noSuchMethod__");
tryItOut("return;");
tryItOut("/*for..in*/L:for([delete, prototype] = eval(\"let constructor;\", window) in window) {/*for..in*/for(__count__ = <x/> *= window >>>=(-0).isPrototypeOf( '' ) in [,,z1] / <y><z/></y>) {<x><y/></x>return; } }");
tryItOut("yield <><x><y/></x></>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in false) {( '' );/*infloop*/M:for(false; @foo; *::*) {(<x/>); } }");
tryItOut("");
tryItOut("/*for..in*/for(constructor = __iterator__ in <y><z/></y>) <y><z/></y>;");
tryItOut("/*infloop*/for(prop = <x><y/></x> ^ <>{prototype, __proto__; }<\t/>.throw(-1).__defineGetter__(\"__count__\", eval); new eval(\"this\", prop)((this.watch(\"__noSuchMethod__\", __parent__))); gc) ( \"\" );");
tryItOut("throw true.eval(undefined);/*for..in*/for(const prop = +({a1:1}) in <><x><y/></x></>) const prototype;");
tryItOut("(*);\nexport prototype;\n\n");
tryItOut("constructor = window, __count__");
tryItOut("/*for..in*/L:for(const prop in (((Math.sin).apply)(false.valueOf(\"number\")))){return; }");
tryItOut("L:if(__noSuchMethod__) {return *::*; }");
tryItOut("/*for..in*/L:for(prop in yield (4.)[this].__defineGetter__(\"prop\", Math.sin)) {gc()/*infloop*/for(const __iterator__ = this; (({__noSuchMethod__ getter: function(q) { return q; } })); (3 for (__iterator__ in [z1]))) export *;var <!--yy--> = window, __noSuchMethod__ = (-1); }");
tryItOut("(true)\n");
tryItOut("L: M:switch(window.hasOwnProperty(\"__proto__\")) { case ((__count__ = (-1))(3.141592653589793, 3)): break;  }");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(let [constructor, prototype] = ({ function::constructor: ({ constructor: ({ __count__: ({ prototype: ({ constructor: __noSuchMethod__, constructor: constructor }) }) }), constructor: prototype }), prototype: ((uneval(<y><z/></y>)))(this.watch(\"__iterator__\", [,,])) }) = (({constructor getter: [1,2,3,4].map }))['constructor'] = undefined.propertyIsEnumerable(\"__parent__\").__iterator__ in this.__defineGetter__(\"constructor\", <x><y/></x> ? __count__ : null)) {}");
tryItOut("{break ; }");
tryItOut("{}");
tryItOut("/*infloop*/for(__proto__ = -1; <y><z/></y>; [,]) __noSuchMethod__;");
tryItOut("__proto__ = __count__;");
tryItOut("if((#1#)) { if (false) ({}).hasOwnProperty else M:if(<x/>) {(1 for (x in []))yield; }\t else (<x><y/></x>);}");
tryItOut("/*for..in*/L:for(var @ in (((1 for (x in [])))(yield ({prop: __count__ = 1.2e3}))))prototype getter: [1,2,3,4].map\nif(A) {let , __parent__;return; } else  if (*::*) {throw <><x><y/></x></>;let __count__, __parent__ = (-0); }\n");
tryItOut("/*infloop*/while((#0=({__noSuchMethod__: window\n}))){for(let y in [5,6,7,8]) continue M; }");
tryItOut("return;");
tryItOut("if(<x/>.@foo) { if ([,,]) gc() else function (__parent__)4.}");
tryItOut("while((yield <x><y/></x> ? new ((new Function(\"(export )constructor;\")))() : @foo) && 0){return 0/0; }");
tryItOut("with(\n(([<><x><y/></x></>]))() &= <x/>.__lookupGetter__(\"__iterator__\"))let __parent__, __proto__;");
tryItOut("switch(__parent__) { case 6:  }");
tryItOut("do {(window); } while((<x><y/></x>//h\n) && 0);");
tryItOut("/*infloop*/while(<><x><y/></x></>)yield;");
tryItOut("if(( '' \n >>> (<x><y/></x> ? window : <x><y/></x>)[<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(*.__lookupGetter__(\"__parent__\"))])) { if (<>yyy</>) {M:switch([15,16,17,18].map(function  __parent__ (constructor, constructor) { yield; } , __noSuchMethod__)) { case 0: break; yield;yield;break; ({}) } }} else {(undefined);var __proto__ = true, __iterator__; }");
tryItOut("const __count__ =  /x/g ;__iterator__, __iterator__ = prop;");
tryItOut("/*infloop*/for(let __iterator__; 'fafafa'.replace(/a/g, gc); this.yoyo(3/0)) {throw  /x/ ; }\nlet __noSuchMethod__ = __iterator__;\n");
tryItOut("{L:switch(prototype) { default: break; break;  } }");
tryItOut("{throw delete constructor;/*for..in*/for(const [__noSuchMethod__, prop] = new 033(null) in window) {continue L; } }");
tryItOut("/*infloop*/for(;; ((new Function(\"export __iterator__;\")))(arguments, <><x>\t<y/></x></>);  /x/ ) yield;");
tryItOut("if(window) {gc } else const prototype = [1,,];");
tryItOut("/*for..in*/for(const __proto__ in __noSuchMethod__.watch(\"__noSuchMethod__\", function(q) { return q; }) .@*:: eval(\"return @foo;\", prototype = *) <<= __parent__ = null != (this.__defineSetter__(\"__proto__\", 1e81)).propertyIsEnumerable(\"__proto__\")) with(5.0000000000000000000000)();");
tryItOut("if(function::__iterator__ = <x><y/></x>) yield <><x><y/></x>//h\n</>;");
tryItOut("if(yield (constructor =  /x/ ).__defineSetter__(\"__parent__\", 'haha'.split)) { if ([0.1 >>> (new Exception(window -= <x><y/></x>))].map((<x><y/></x>.(window) ? <><x><y/></x></> : constructor ^= null).__defineSetter__)) {try { this.zzz.zzz; } catch(__noSuchMethod__) { yield *; }  }} else M:while((__count__ for each (__iterator__ in undefined)) && 0){continue L;return; }");
tryItOut("/*infloop*/for(({a2:z2}); (((Math.pow.hasOwnProperty(\"prototype\")) for each (__parent__ in #1=this) for each (constructor in (__count__ ? __proto__ : *)) for (__proto__ in new RegExp(this, @foo))\f for (__proto__ in *::*))); (*::*.@foo)) {{prototype = <><x><y/></x></>, __parent__ = 3; } }");
tryItOut("L:while((()) && 0){({}).__lookupGetter__yield; }");
tryItOut("/*for..in*/for(const __parent__ = yield \n<x><y/></x> in __proto__) var __proto__, prototype;");
tryItOut("/*infloop*/do return -3/0; while(new Boolean((-0.isPrototypeOf(null))));");
tryItOut("L:if(window) { if (prototype.__parent__ = 3/0 >> <x><y/></x>) {/*for..in*/for(prop = __iterator__ in {}) {__iterator__, __count__ = <x/>;export __noSuchMethod__; }let constructor, __noSuchMethod__; }} else {let __proto__; }");
tryItOut("L:with({__noSuchMethod__: \n<x><y/></x>\n}){/*infloop*/for(var __count__; {}; @foo.propertyIsEnumerable(\"__proto__\")) {const __noSuchMethod__;var prototype, __noSuchMethod__; } }");
tryItOut("L:if((undefined = __proto__)) return; else  if ((yield <x><y/></x>.__iterator__)) gc()");
tryItOut("/*infloop*/while(@foo)break L;");
tryItOut("/*infloop*/while(<><x><y/></x></>)yield <x><y/></x>;");
tryItOut("/*infloop*/for(const ({ __proto__: prototype, constructor: prop }) = (([1,2,3,4].map).call( \"\" , {}, window) /= --<x/>); __count__; (__parent__+=( ''  ^= __proto__)(<x><y/></x>.eval([[]])))\n) export *\n<x><y/></x>;");
tryItOut("/*for..in*/for([prototype, prop] = eval(\"if(<y><z/></y>.\\fyoyo(undefined)) \\r{gc() } else  if (({function::__count__: ({})})) yield;\", (<x/> >>>= /x/g )) in default: break; ) {gc()__noSuchMethod__, __count__ = 5.0000000000000000000000; }");
tryItOut("while(((gc).call(__iterator__, <x><y/></x>,  '' )) && 0)var prototype = *;");
tryItOut("/*infloop*/ { return new (__count__ = this)() case 1: case prop = <><x><y/></x></>--: {}break; default: case ({ set __proto__() { return *::* } , __proto__: <y><z/></y> }): break; yield  /x/g ;break;   } ");
tryItOut("{if(undefined) { if (window) { } else break ;} }");
tryItOut("/*for..in*/for(prototype =  /x/ \n in <x/>) export constructor;");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("yield ({a2:z2});gc()");
tryItOut("if(({a1:1})) yield window; else {yield <x><y/></x>; }");
tryItOut("do /*infloop*/for(new <x><y/>\f</x>( /x/ , [,]); (__proto__.isPrototypeOf(window)); *::* -= this) {undefined; } while(([, ] = __parent__.propertyIsEnumerable(\"prop\")) && 0);");
tryItOut("with({__noSuchMethod__: this})(0x99);");
tryItOut("const __proto__ = <x><y/></x>, prototype = -1;");
tryItOut("switch((false , window).__lookupSetter__(\"__parent__\")) { default: {if( '' ) { if ( '' ) } else yield <><x><y/></x></>\n/*infloop*/for(var __proto__; #1#; <><x><y/></x></>) with({}) { {} } __parent__ = <y><z/></y>; }case (<x><y/></x>.(1e+81) = (null)[<x><y/></x>]): L: {throw ({a2:z2});[1,2,3,4].map }break; case 7: break;  }");
tryItOut("; const __noSuchMethod__;");
tryItOut("{gc()throw 1e4; }");
tryItOut("case 9: /*for..in*/for(prop in (#3={a:#3#} ? [1] : *.@foo)) {prototype = function::constructor;; }break; switch(((__proto__ for (constructor in [1])))) { default:  }default: do {;return; } while((((yield <><x><y/></x></>) for (__noSuchMethod__ in [[1]]))) && 0);case 0: /*infloop*/L:do {const __parent__ = <x/>;{} } while(-1);case 2: break; case eval(\"(<y><z/></y>);\\nfunction () { return __proto__ } \\n\", <><x><y/></x></>): M:if(window = ({ __iterator__: __parent__, __parent__: constructor }) = []) {throw  /x/g ;{}\t } else  if (++ '' ) /*infloop*/L:for(var __count__ = <x><y/></x>; this; <x><y/></x>) {{}export *; } else return;break; case 6: break; ");
tryItOut("gc() const x::__parent__;");
tryItOut("with({__noSuchMethod__: this.zzz.zzz}){export *; }");
tryItOut("/*for..in*/for(var __parent__ = __count__.prototype setter= (1 for (x in [])) in [15,16,17,18].some((function (__count__) { yield <><x><y/></x></> } ).call, ([,] ^=  /x/g ) % <x/>.isPrototypeOf(__proto__))) {return;yield <x/>; }");
tryItOut("(continue )(constructor = return)");
tryItOut("with({__noSuchMethod__:  %= <><x><y/></x></>}){(<x><y/></x>); }");
tryItOut("{function(q) { return q; } }");
tryItOut("if((this.unwatch(\"__noSuchMethod__\"))) {gc()(0.1); } else  if (((p={}, (p.z =  /x/g )()))) {break M;(false); }");
tryItOut("export prototype\n<x><y/></x>.([[1]]);");
tryItOut("let (__parent__, __iterator__ = ([prototype].eval( /x/g .__count__ = #3={a:#3#}))) { export *; }");
tryItOut("return (prototype.(--<x><y/></x>.__parent__));");
tryItOut("if((prop.__proto__ =  /x/g .isPrototypeOf(())).__lookupGetter__(\"__noSuchMethod__\")) ");
tryItOut("for(let y in []);");
tryItOut("with({__noSuchMethod__:  /* Comment */<x><y/></x>}){return  /x/g ;; }");
tryItOut("if(<><x><y/></x></>.throw(this)) {( \"\" );var prototype; } else  if (++[,]) gc()");
tryItOut("break L");
tryItOut("for(let y in [5,6,7,8]) let(__noSuchMethod__ = ([1,2,3,4].slice).call( /x/ .isPrototypeOf(<x/>), )) { throw setter;");
tryItOut("/*infloop*/do {/*infloop*/for(__parent__; prop; 1e+81) continue ; } while(eval(\"M:if(undefined) __iterator__ = 1.2e3, prototype;\\n else  if (<x><y/></x>) {export *; }\", (++<x><y/></x>)).__lookupSetter__(\"prop\"));");
tryItOut("yield ({ get __noSuchMethod__(__proto__) { var prop; }  });");
tryItOut("with(prototype){yield; }\n/*for..in*/M:for(let __iterator__ in 1e4) [1,2,3,4].mapif([11,12,13,14].filter) { if ((__parent__ = ([1].yoyo([])))) __parent__; else var prop;}\n");
tryItOut("yield");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__parent__\", Function)){M:switch(<><x><y/></x></>) { case window: break; gc()yield;break;  }continue M; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in each = <x><y/></x>) /*for..in*//* nogeckoex bug 349964 */ for //h\n each(__noSuchMethod__ in 1e81) { /x/ ;function  __proto__ () { return [,,] }  } }");
tryItOut("return  \"\" \n");
tryItOut("with({constructor: this.__defineGetter__(\"prototype\"\t, <><x><y/></x></>)}){gc() }");
tryItOut("switch((prototype = null).__defineSetter__(\"getter\", gc).@foo) { default: case 6: break; case __parent__ = constructor ? ((<x/>)[<><x><y/></x></>]) :  \"\" : const __parent__ = (new ([1,2,3,4].map)(<x><y/></x>)), prop = <><x><y/></x></>;case [,].__iterator__: constructor = window, __iterator__ = <x><y/></x>;break; break;  }");
tryItOut("with({}) return (-({__count__: 1.3 >> .2 }));");
tryItOut("export *;");
tryItOut("do {; } while((((this)[<><x><y/></x></>])) && 0)\ngc()");
tryItOut("const prop, constructor\n/*infloop*/M:for(let prototype = undefined; 033; __proto__) {;export *; }");
tryItOut("yield window;");
tryItOut("try { __count__; } finally { null; } ");
tryItOut("if(<></>) {} else /*for..in*/for(function::__noSuchMethod__ in <y><z/></y>) const prototype, __noSuchMethod__;");
tryItOut("/*infloop*/do {with(this){gc() }{} } while(constructor.constructor = 1.2e3);");
tryItOut("L: {return __parent__ = window;return (this /= null); }\f");
tryItOut("/*infloop*/M:while(<x><y/></x>.(0))const __parent__, __noSuchMethod__ = ({a2:z2});");
tryItOut("/*infloop*/M:for(let prop; function ()window\n.watch(\"__noSuchMethod__\", this.__defineSetter__(\"prop\", Math.pow)); <><ccc:ddd><bbb xmlns:ccc=\"(({}))()\"><ccc:eee></ccc:eee></bbb>yyy</ccc:ddd></>) let(({ __count__: __iterator__, prop: __proto__ }) = (<y><z/></y>)[<><x><y/></x></>], prop) { __iterator__(@foo) = prop;");
tryItOut("if(window) {if(<x><y/></x>.(__iterator__)) {(\r<x><y/></x>);\f } else  if (__parent__.prop = <><x><y/></x></>) prototype; } else  if (this.__defineGetter__(\"__iterator__\", function(y) { yield y; /*for..in*/for([__proto__, __parent__] = (constructor = (('haha'.split).call(@foo, <x><y/></x>, function(id) { return id }))) in  '' ) yield null;; yield y; })) {with({__noSuchMethod__: this.yoyo(constructor)})let return;;let __parent__; }");
tryItOut("if(this) { if (*) let __iterator__;} else ");
tryItOut("if(((__proto__ = __proto__) % )) {;/*for..in*/L:for(let [\tdelete, __parent__] = __iterator__ = window in <><x><y/></x></>) var ; } else  if (constructor[-<x><y/></x>]) {{if(*::*) let prop; else  if (null) prototype else  }/*infloop*/for(({ __iterator__: [__parent__, prop, ], prototype: __parent__ }) = __noSuchMethod__.((prop = <y><z/></y>)); \fvoid <x/> +=  /x/g  instanceof __count__ getter: gc; \ngc()) {break L; } } else {constructor, __iterator__;{} }");
tryItOut("switch(<x><y/></x>.(__parent__)) { default: break; let __parent__ = [11,12,13,14].map;break;  }");
tryItOut("if(this.__defineSetter__(\"__iterator__\", function ([y]) { })) {gc() '' ; }");
tryItOut("if(__iterator__ = ({a1:1})) {yield; } else  if ((Number(\fnew (({}).hasOwnProperty)((RangeError()), __proto__), [ /x/ ].filter(function (prototype, __iterator__)<><x><y/></x></>)))) var constructor; else {yield; }");
tryItOut("let([] = ('fafafa'.replace(/a/g, window)) @ new (function  __noSuchMethod__ (__noSuchMethod__, constructor) { return @foo } )(<y><z/></y>), __count__) { yield;");
tryItOut("/*infloop*/for(__iterator__ = (prototype = (<x><y/></x> ? prop : <x><y/></x>).hasOwnProperty(\"prototype\")); (({ __count__: prototype }) = (<x><y/></x> for (__iterator__ in false))); prototype) return;");
tryItOut("function () { return prototype = true } \n");
tryItOut("let(__noSuchMethod__ = *) { break ;");
tryItOut("let (constructor) { export * }");
tryItOut("L:if([1]) export *; else {const __iterator__, constructor;return __noSuchMethod__; }");
tryItOut("if(((function(y) { yield y; return <y><z/></y>;; yield y; }).call(window, ) ? <x/>.isPrototypeOf(false) : (((new Function(\"\")))(((new Function(\"throw window;\"))()))))) {//h\nexport *; } else  if ( /x/  ? @foo @ window : window.yoyo(@foo))  '' ;");
tryItOut("for(let y in [5,6,7,8]) throw __count__;");
tryItOut("/*infloop*/for(const constructor; [,,]; \f[<x><y/></x>__iterator__.(<><x><y/></x></>)]) __proto__ = <x><y/></x>;");
tryItOut("with({__proto__: <x><y/></x>})return;");
tryItOut("return @foo.unwatch(\"constructor\");");
tryItOut("if(false.prop = <x><y/></x>)  else  if ((((this).watch).call((@foo( '' , [,,z1])), ))) (<x/>);");
tryItOut("if([1,,] * 1.2e3) { if ((x::prototype.prop setter= function (__count__) { ({}).hasOwnProperty } ) >>= <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", eval)) {L:if(((p={}, (p.z = this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))()) %= prototype = undefined)) { if (false <<= new (<x/>)(1e+81) .@*:: ({prototype getter: 'haha'.split }).__lookupSetter__(\"prop\")) (<x/>); else (<y><z/></y>);}\fyield  '' \n(<x/>); } else {with({constructor: ((*(__parent__ in *)))})function(y) { yield y; export *;; yield y; } }}");
tryItOut("while((__iterator__.__lookupGetter__(\"constructor\")//h\n.__lookupGetter__(\"__proto__\")) && 0)return @foo;");
tryItOut("if(undefined) {gc()(prop); } else \f if ((0x99\t :: #1=[#1#])) prop = false;");
tryItOut("with({}) { function::__count__ = __noSuchMethod__; } ");
tryItOut("/*infloop*/for(var __parent__; ({ each: ({ constructor: ({ __count__: __parent__, constructor: prop }) }), __iterator__: [] }) = function::__count__ @ (<x/> , <><x><y/></x></>); 'fafafa'.replace(/a/g, /a/gi)) {;this.zzz.zzz; }");
tryItOut("if(new (function(q) { return q; })( /* Comment */false, <x><y/></x>.prop = <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", eval))) {; } else  if (this.__defineGetter__(\"__parent__\", function  constructor () { const __proto__; } )) yield\n;");
tryItOut("/*for..in*/L:for(__proto__.__iterator__ in (__parent__) = <x><y/></x>.__lookupSetter__(\"constructor\")) {/*infloop*/for(let __parent__ = <><x><y/></x></>; ( \"\" .prototype = -1); prop.__proto__ = <y><z/></y>) {var __parent__;prop, __parent__ = <x><y/></x>; }for(let y in [5,6,7,8]) let setter = <><x><y/></x></>; }");
tryItOut("let(__count__, __count__ = <x/>) { with({}) ;");
tryItOut("with([__count__ !== <x><y/></x>].map(({}).hasOwnProperty)){throw 1e4;/*for..in*/for(const __iterator__ in (( for ((eval(\"null\", prop)) in <><{__count__}><x><y/></x> </{__count__}></>) for (prototype in prototype = undefined) if (\t<x><y/></x>))(false)))gc() }");
tryItOut("{this.zzz.zzz;if(Array(0/0)) gc() else  if ((uneval(@foo))) __iterator__; else (function ([y]) { })(); }");
tryItOut("/*infloop*/M:for([,,z1]; <><x><y/></x></>; __noSuchMethod__) {yield; }");
tryItOut("/*infloop*/while((new (prototype.( /x/g )) >>>=prototype =  \"\"  < true)){(new <><x><y/></x></>(let, 5.0000000000000000000000));return; }");
tryItOut("if(<><bbb xmlns=\"__iterator__.__noSuchMethod__\"></bbb></>) {export __parent__;var __noSuchMethod__ = <x/>, __noSuchMethod__;\t\n/*infloop*/L:for(var __proto__; __proto__; <><x><y/></x></>) {throw window;yield; }\n }");
tryItOut("export *;");
tryItOut("{return constructor;@foo;/*\n*/ const __parent__; }");
tryItOut("do {(*); } while((undefined.unwatch(\"prop\")) && 0)\n");
tryItOut("/*for..in*/M:for(let [constructor, constructor] = ({__noSuchMethod__ setter: (( new ).apply).apply, __proto__: __iterator__ }) in <>try { gc() } catch(return  /x/g ;) { __count__ } finally { const __parent__, prototype = -0; } </>) {export __iterator__; }");
tryItOut("with({__parent__: (prop).eval(eval(\"(window);\", <x/>))})/*infloop*/while(this.__defineSetter__(\"__proto__\", function (<><ccc:ddd> </ccc:ddd></>)<><x><y/></x></>))var __count__ = *;");
tryItOut("switch((<x><y/></x>.@*)) { case * ?   : prototype.__defineSetter__(\"constructor\", (1 for (x in []))) - yield @foo.__defineSetter__(\"__proto__\", function (__parent__, constructor) { return this } ).prop = constructor-=<x><y/></x>: break; gc()\nexport *;break; /*for..in*/for(let <x/>.__proto__ in ((( /x/ ).watch)(<x/>.__defineSetter__(\"prop\", function  __count__ () { yield __iterator__; } ))))return;default: gcbreak; case __parent__.prototype setter= <x><y/></x>: break; case 6: let (prototype = <x><y/></x>) { constructor }case __parent__\n / this.zzz.zzz: with({__count__: [,] for (__count__ in window)})/*for..in*/for(var __proto__ = <y><z/></y> in window) export __proto__;case 8: case 8: case 2:  }");
tryItOut("/*for..in*/for(var prop.__noSuchMethod__ in ((function () { yield ('fafafa'.replace(/a/g, ({}).__lookupGetter__)) } )((({ prop\f: constructor })(1.3)) && <y><z/></y>++))){yield; }");
tryItOut("/*for..in*/for([constructor, __iterator__] = (__iterator__.__proto__ setter= gc) in (prop = {})) with({prop: <x><y/></x>})Math.pow");
tryItOut("if() { if (false.__parent__) throw eval(\"*\", __parent__) ? ({__noSuchMethod__: *::*}) : constructor.__count__ getter= Function; else {/*for..in*//* nogeckoex bug 349964 */ for  each((__proto__) in 0x99) yield\n }}");
tryItOut("/*for..in*/for(__noSuchMethod__.__count__ in ((Math.pow)({})))(undefined);");
tryItOut("/*infloop*/for(let prototype; __noSuchMethod__; [11,12,13,14].map) {continue M;break ; } const constructor;");
tryItOut("yield <><xxx {constructor}=\t{<x><y/></x>} /></>;");
tryItOut("__count__");
tryItOut("/*for..in*/for(var [__proto__, constructor] = (prototype.__proto__ setter= (function(q) { return q; }).apply) in this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) {throw ((yield @foo)); }");
tryItOut("M:if(<><{prototype}><bbb xmlns=\"(((function ([y]) { })())(<><x><y/></x></>, *)) < (new ((-1))(<x><y/></x>) ^ (constructor.__count__))\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><x><y/></x> += <y><z/></y>.__noSuchMethod__</bbb></{prototype}></>) { if (~__iterator__\t.unwatch(\"constructor\")) {with((1e+81 ? <><x><y/></x></> : <y><z/></y>)){; }\nvar prop, __proto__ = this;\n } else {return <x/>.__defineGetter__(\"__iterator__\", (*).__defineSetter__); }}");
tryItOut("with([<x/> ? (-0) : -1]){let __noSuchMethod__ = window, prototype = arguments;let (prop, __parent__ = prototype) { ; } }");
tryItOut("let (__iterator__) {  }yield /");
tryItOut("/*for..in*/for(const [delete, __noSuchMethod__] = [15,16,17,18].filter(function  prop ()\t { return 5.0000000000000000000000\n } , __proto__ ?  /x/  : window) in <><{prop}><ccc:ddd></ccc:ddd></{prop}></>) {{const __proto__, __noSuchMethod__;__proto__ }if(arguments) __iterator__ = <x/>, constructor; else  if (<y><z/></y>) return @foo; }");
tryItOut("L:with((__iterator__)){export __noSuchMethod__;/*for..in*/L:for(var __parent__ in (([1,2,3,4].map)( catch ))){throw prototype;yield; }\nlet constructor; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (prototype.(( /* Comment */<x><y/></x>))); __parent__ = constructor) return;");
tryItOut("/*infloop*/for(let __iterator__ = ([[[z1,,] for (__proto__ in @foo)]]); <><x><y\f/></x></> .@*:: -3/0; new ([])(((function(id) { return id })[<><x><y/></x></>]) &= *::* +  /x/ )) {/*for..in*/M:for(var constructor in ((function  prototype (__proto__, __iterator__) '' )(([11,12,13,14].sort))))yield; }");
tryItOut("__iterator__.[] = __iterator__;");
tryItOut("/*infloop*/for((new __count__ = *::*); (function (({ __parent__: constructor, prototype: __count__ }), __count__) { return this.__defineSetter__(\"constructor\", function  __noSuchMethod__ () { throw 033; } ) } ); ({__count__: function  __noSuchMethod__ (constructor, __iterator__) { yield window } })) {Function }");
tryItOut("/*infloop*/while(prototype = __count__)const __parent__, prop;");
tryItOut("if(null -= <><x><y/></x></>) { if (({ __parent__: ({ constructor: ({ prototype: __count__ }) }), __proto__: ({ __count__: [prop, ] }) }) = this) \x00 else return;}");
tryItOut("L:if(<><xxx {([,,z1] /= <x/>).__lookupGetter__(\"__proto__\")}={(\n(-this))} /></>) { if (('fafafa'.replace(/a/g, <x><y/></x>))) {var constructor = <x/>; } else /*infloop*/for(let __noSuchMethod__; true; undefined) {return;break\f L; }}");
tryItOut("if(([1].unwatch(\"__count__\"))) { if ([15,16,17,18].filter(Math.pow, @foo)) {arguments;throw function ([y]) { }; }} else return\n");
tryItOut("M:if(* for (__iterator__ in prototype)) {while((__iterator__ = window) && 0)Math.pow{} }");
tryItOut("if(<y><z/></y>) {/*infloop*/for(let __proto__;  /x/ ; (constructor.@*)) prop = true; } else  if ( /* Comment */1.2e3.__proto__ =  \"\" ) {;let __parent__ = __proto__, __count__; }");
tryItOut("prop.constructor setter= (~(this).call(<><x><y/></x></>, <x><y/></x>)).__defineSetter__) {(<x><y/></x>.* <= \n(*::* if (window)).__lookupSetter__(\"__proto__\"\t)) if (1.3.propertyIsEnumerable(\"__noSuchMethod__\"))) yield;} else {/*for..in*/for([prototype, constructor] = prop = 3/0 in undefined) yield arguments; const constructor; } prop");
tryItOut("(__iterator__)");
tryItOut("let (__proto__, ({ prop: x::__proto__ })) { if(__parent__ = #1#) { if (__iterator__ = null--) function(q) { return q; } const getter; else { }} }");
tryItOut("if(new Array()) { if (#2=[arguments].__defineSetter__(\"constructor\", ({a1:1}))) ; else }");
tryItOut("with(false){gc() }");
tryItOut("{\t__proto__; }");
tryItOut("do {export *;if(constructor = *) { if ( /x/g .eval(*)) {;function  __iterator__ (prototype)window__proto__; } else {{} }} } while(((p={}, (p.z = 1e4 ^= function(id) { return id })())) && 0);");
tryItOut("yield;");
tryItOut("continue ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in *) {break ;while((__noSuchMethod__) && 0){continue L;(continue);prop } }");
tryItOut("/*infloop*/M:for(const ({ __iterator__: ({ __proto__: __iterator__, __iterator__: ({ prop: constructor, prototype: __noSuchMethod__ }) }) }) = (prop = new (this)()).isPrototypeOf(<y><z/></y> || @foo); *.throw(<x><y/></x>) -= \n@foo; this) \t{if(__count__ = undefined.isPrototypeOf((-<><x><y/></x></>)).yoyo(Object())) {}\n else  if (<><x><y/></x></> <= *) /*\n*/<><x><y/></x></> else while((<><x><y/></x></>) && 0){throw 3.141592653589793; } }");
tryItOut("for(let y in [5,6,7,8]) return <x/>;");
tryItOut("do {;{} } while((([<x><y/><\f/x> if (<x><y/></x>)]).__defineSetter__(\"__parent__\", (<x><y/></x>).__defineSetter__)) && 0)");
tryItOut("if(-3/0) { if (<x/>) {*gc() }} else {yield <y><z/></y>; }yield <x><y/></x>; const prototype;");
tryItOut("throw prop;");
tryItOut("/*for..in*/for([__proto__, __iterator__] = ({__iterator__ getter: 3.141592653589793,  set __proto__() }) in true--) return __count__; const prototype;");
tryItOut("if((true.yoyo(constructor))) {{}(<y><z/></y>); } else  if ((new (constructor)(__proto__))) __count__;");
tryItOut("yield [1];\n{[z1];/a/gi }\n");
tryItOut("if(#1=[ '' ] *= <x><y/></x> >> <x><y/></x>) continue M; else  if ((window\n)) /*for..in*/for(const (*)(arguments) in __count__) (@foo); else ;");
tryItOut("/*for..in*/M:for(let constructor = __proto__.yoyo(null) in <><x><y/></x></>) {try { export __noSuchMethod__; } \tcatch(__iterator__) { export prototype; }  }");
tryItOut("/*for..in*/for(const [constructor, __parent__] = typeof window in yield -1;) constructor = <><x><y/></x></>, __count__;\n( /x/g ).__defineSetter__\n");
tryItOut("/*infloop*/L:for(null; <y><z/></y>; @foo) {__parent__; }");
tryItOut("/*infloop*/for(prop; [] = 'fafafa'.replace(/a/g, Math.pow); __proto__.__noSuchMethod__ = yield .propertyIsEnumerable(\"prototype\")) {if(new (((({}).hasOwnProperty).call(<x/>, [1])))((prop))) { if (let (constructor) <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {return; } else prop}throw __noSuchMethod__; }");
tryItOut("with({}) { throw __count__; } ");
