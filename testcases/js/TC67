
tryItOut("let (__proto__, __parent__ = <y><z/></y>) { if( \"\" ) {throw  /x/ ;yield ({}); } }");
tryItOut("let (({ prop: <x><y/\t></x> }) = ({prototype: @foo, __iterator__: null }), ({ __count__: prop })) { \t/*\n*/do gc() while((@foo) && 0); }");
tryItOut("with({}) { __count__ = __noSuchMethod__; } ");
tryItOut("while(((__count__ = <x><y/></x>)) && 0)__iterator__");
tryItOut("/*for..in*/for(__count__ = (prototype.prop) in <x/>.watch(\"prop\", function(y) { yield y; return 033;; yield y; })) L: const constructor = <x/>, __iterator__;");
tryItOut("let(prop = this.__defineSetter__(\"constructor\", function (__iterator__) /x/g ) instanceof prototype = <><x><y/></x></>, __noSuchMethod__) ((function(){throw prop;})());return");
tryItOut("this.zzz.zzz;");
tryItOut("do {yield; } while((*.yoyo(__parent__)) && 0);");
tryItOut("L: {/*infloop*/for(var prop; *.__defineSetter__(\"__parent__\", ({}).__lookupGetter__); @foo <= undefined) {<y><z/></y>; }yield; }");
tryItOut("{}");
tryItOut("(false);\n/*infloop*/while([15,16,17,18].sort((<x/>).__defineSetter__, (String()))){throw 3/0; }\n");
tryItOut("throw StopIteration;");
tryItOut("");
tryItOut("/*infloop*/while(this){undefined; }");
tryItOut("/*infloop*/L:for(let __iterator__; [prototype].sort(false); \n([,,z1].__lookupGetter__(\"prop\") | (<x><y/></x>))) {gc() }");
tryItOut("{}\nexport prototype;\n");
tryItOut("/*infloop*/do {\n{}throw __iterator__; } while(constructor = <y><z/></y> ^ ({a1:1}).__defineGetter__(\"constructor\", new Function));");
tryItOut("export prototype;");
tryItOut("if('fafafa'.replace(/a/g, /a/gi)) { if ((export *)) return;} else {throw <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(var __count__ in [({ __iterator__: ({ prototype: ({ __parent__: prototype, __count__: constructor }), __parent__: ({ prop: __noSuchMethod__ }) }), __count__: [__iterator__, , ] }) =  /x/g ].filter(({}).hasOwnProperty)) M:while((('fafafa'.replace(/a/g, (new Function(\"export __count__;\")))) instanceof  /* Comment */\n) && 0)yield __iterator__.__proto__ = <x><y/></x>;");
tryItOut("M:while(((new RegExp(*::*))) && 0)yield <x><y/></x>;\n");
tryItOut("if(<><bbb xmlns=\" ''  >>= (function ([y]) { })()\">yyy</bbb></>) { if (({__iterator__ getter: 'haha'.split })) {constructor;Function } else yield;}\nwhile((new <\t><x><y/></x></>() + <><x><y/></x></> <  \"\" ) && 0)/*for..in*/for(var [prototype, __noSuchMethod__] = <x/> in null) {return <x/>; }\n");
tryItOut("/*infloop*/for(let ({ __count__: ({ constructor: ({ prototype: __noSuchMethod__, __proto__: function::__iterator__ }), prototype: ({ __parent__: __noSuchMethod__ }) }) }) = this.zzz.zzz.isPrototypeOf((this.zzz.zzz)); (~(false)); 4.) {;var __noSuchMethod__ = <y><z/></y>, constructor; } const __proto__;");
tryItOut("/*\n*/if(false) {export *\nyield; const __parent__;this.zzz.zzz; } else yield;");
tryItOut("/*for..in*/for(let __count__ in  /x/g ) {break M;let __noSuchMethod__; }");
tryItOut("{if(@foo.propertyIsEnumerable(\"prop\").unwatch(\"prototype\")) { if (([<x><y/></x> ? undefined : 0.1])) {yield <x><y/></x>; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <><x><y/></x></>) {export __count__; } }}; }");
tryItOut("while((<><x><y/></x></> .@ *) && 0)export __noSuchMethod__;");
tryItOut("export *;");
tryItOut("{ \"\" ;yield *::*;\f }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (function ([y]) { }) in this.__defineSetter__(\"constructor\", function  __proto__ (__proto__) { *::*; } )) const __noSuchMethod__ = <x><y/></x>, __parent__;");
tryItOut("/*infloop*/for(const __count__; (__proto__.prop getter= function(q) { return q; });  \"\" ) {/*infloop*/for(1e-81; null; @foo) {yield null; } }");
tryItOut("\tL:with(__proto__+=[z1])(<x><y/></x>).watch");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in this) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (({__iterator__: __proto__})) * [z1,,].__noSuchMethod__ in ({ set constructor prototype () { return ([1,,])[@foo]-- }  })) {var __iterator__, prop = ({a1:1});with(__iterator__){return;Function } }");
tryItOut("if(* ? true : @foo) { if ('fafafa'.replace(/a/g, eval)) {{}{} } else gc()}");
tryItOut("M:with({__proto__: (#3={a:#3#} += __count__.(0x99))})/*for..in*/for(var [prototype, <y><z/></y>] = void <><x><y/></x></> in <x><y/></x>) {yield ({a1:1});@foo; }");
tryItOut("if(((__proto__.constructor) for each (prop in yield) for ( \"\" (<y><z/></y>), ++<x/> in (function  __iterator__ (__iterator__) /x/ )()) for each (__noSuchMethod__ in 1.3) for each (prop in  \"\" ) if (<y><z/></y>))) {__parent__return  '' ; } else {yield;yield *; }");
tryItOut("do {L:while((*) && 0){; }let __noSuchMethod__; } while(((let (__noSuchMethod__) null ? prototype.prop setter= this : <><x><y/></x></> .@*:: *::* @ __proto__|=<x><y/></x>)) && 0);");
tryItOut("constructor = __proto__;");
tryItOut(" if (<><x><y/></x></>)\n{}");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */M: for  each(let this in  \"\" ) {let __parent__ = <x><y/></x>, prop = function::__iterator__;eval } } while(((uneval((function  __iterator__ (__iterator__, prototype) { return (L:if(<x/>) throw constructor; else  if ((function ([y]) { })()) {(1 for (x in [])) } else break ) } ).call(__iterator__, this.hasOwnProperty(\" set prototype() { yield; } \")([1,,] -= window, <x/>), [z1])))) && 0);");
tryItOut("with({}) with({}) for(let y in [5,6,7,8]) return @foo;");
tryItOut("(<y><z/></y>);(<><x><y/></x></> == 1e+81);");
tryItOut("let (__count__) { prototype = <x><y/></x>, __noSuchMethod__\ngc() }");
tryItOut("/*for..in*/for(let __parent__ = ({__noSuchMethod__ setter: *::*\t }) in (prop = -1)) {yield <><x><y/></x></>;let __iterator__ = 3/0; }");
tryItOut("/*for..in*/for(let __parent__ =  \"\"  in null) {function(id) { return id } }");
tryItOut("/*for..in*/with({}) { return (__parent__ =  /x/g ); } ");
tryItOut("let(__proto__ = --<><x><y/></x></>) { throw StopIteration;");
tryItOut("<y><z/></y>;");
tryItOut("return;");
tryItOut("throw __count__;");
tryItOut("let yield, __parent__ = window\n/*for..in*/for(__proto__ in (((-0).apply)(-1))){export *;throw @foo; }");
tryItOut("/*infloop*/for(let __parent__ = ( /* Comment */ /x/ )(RangeError([,], __noSuchMethod__)) = (uneval(__proto__)); new (('haha'.split).call(<x/>, ({}),  \"\" ) ^= ( /x/g  || <><x><y/></x></>))(); +<bbb xmlns=\"[1,,]\"><!--yy--></bbb>) {}");
tryItOut("with({__iterator__: __iterator__ = constructor}){gc() }");
tryItOut("let (__parent__, __noSuchMethod__) { L:while((((yield __proto__ = <y><z/></y> for (constructor.__iterator__ in *::*) for each (__noSuchMethod__ in [,])))) && 0)gc() }");
tryItOut("/*for..in*/for(let (<><x><y/></x></>) in (((((uneval(-1)))).watch)((undefined[*::*] && *))))export *;");
tryItOut("/*for..in*/M:for(const [__parent__, function::__iterator__] = (*::* !== prop) in this) throw @foo; const prop;");
tryItOut("if(((5.0000000000000000000000)[__proto__] ? __noSuchMethod__ : <x><y/></x>\n)) { if ((new \t({}).hasOwnProperty([<>prop</>].map(Function)))) default: M:if((x::__noSuchMethod__.prop getter=  /x/g )) throw new ( '' )(function(id) { return id });break; } else return\n{export *;switch(@foo) { default: break;  } }");
tryItOut("let(({ __parent__: prototype }) = constructor.__noSuchMethod__) { yield (yield (-1));");
tryItOut("while((*) && 0)return true;yield <x><y/></x>;");
tryItOut("/*for..in*/for(__noSuchMethod__ = true in 1e81) gc()");
tryItOut("throw StopIteration;");
tryItOut("L: export *;");
tryItOut("L:with((__iterator__ = constructor.__proto__ setter= (new Function(\"{}\")))){if(eval(\"<x/>\",  /x/ )) <x><y/></x>; }");
tryItOut("/*infloop*/M:for((({}) <= 0.1 for (__noSuchMethod__.__count__ in window) for each (__count__ in null)); (yield true); (new ((false ^= null)[(prop.__iterator__.watch(\"prototype\", ({}).hasOwnProperty))])())) {yield <x><y/></x>; }");
tryItOut("/*for..in*/for(var [__iterator__, __noSuchMethod__] =  /x/  in constructor) (<x/>);");
tryItOut("yield;");
tryItOut("if(window) {; } else  if (<><x><y/></x></>) yield [,,z1];");
tryItOut("export *;");
tryItOut("while((this.zzz.zzz) && 0)prop, prototype;");
tryItOut("{(<x/>); }\n");
tryItOut("with({__count__: __count__ = prototype})return <><x><y/></x></>;");
tryItOut("/*for..in*/for(var __proto__ in [,,]) {with((-true.__lookupSetter__(\"constructor\"))){}yield <x/>; }");
tryItOut("if((function ([y]) { } < __iterator__)) yield ({a1:1}); else {{} }");
tryItOut("/*for..in*/for([prototype, prop] = __proto__.prototype in @foo) {__iterator__ }");
tryItOut("/*infloop*/while(new <x/>(this, <x><y/></x>) ?  /x/g  .@ <y><z/></y> : <x><y/></x>.(prototype))for(let y in []);");
tryItOut("/*infloop*/M:\rfor(var ({ prototype: prop }) = prototype; ~(#1=[#1#])(3.141592653589793);  '' ) {switch(prop) { case <x><y/></x> <=  /x/ : /*infloop*/for(<><x><y/></x></>;  '' ; <y><z/></y>) var __iterator__ = continue ;, prototype;const __proto__ = __parent__, constructor = this;break; break; ;break;  } }");
tryItOut("L: {yield <><x><y/></x></>;{} }");
tryItOut("/*infloop*/do M:if(true) { if (undefined) let constructor = <><x><y/></x></>, __iterator__ =  '' ;} else {(__proto__);yield; } while(*::* | true);");
tryItOut("yield 1.3;");
tryItOut("try { return; } finally { yield (window.yoyo(<x><y/></x>)); } ");
tryItOut("{gc()(this); }");
tryItOut("try { {} } catch(__noSuchMethod__ if (function(){(*).watch})()) { yield; } catch(__noSuchMethod__ if (function(){})()) { throw  /x/ ; } catch(prototype) { export *; } ");
tryItOut("if(@foo) { if ([z1,,]) } else {yield; }");
tryItOut("if([this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split)]) { if ((__proto__ =  /x/  if (false))) throw prototype;} else {export *; }");
tryItOut("/*infloop*/L:for(var function::__iterator__ = (__proto__ = @foo); (({}).__lookupGetter__)((\n#2= '' ),  '' .yoyo(*)); ({}).hasOwnProperty) ;");
tryItOut("/*infloop*/while(\n /x/ )");
tryItOut("if(__count__.prop = (/a/gi(<x/>, <><x><y/></x></>))) return; else  if (delete ( = <x><y/></x> for (__parent__ in <x/>) for each (__count__ in prototype))) {(<y><z/></y>)export __parent__\nreturn; } else {gc() }");
tryItOut("if((5.0000000000000000000000.__lookupGetter__(\"__count__\"))) { if (({})) {return; }\t} else return;");
tryItOut("switch([] ? undefined : __noSuchMethod__) { default: break; case eval(\"var __proto__ = ({a2:z2}), __parent__;\", __proto__): case 0: M:if([,,z1] >>>=window) {this;return true; } else  if (@foo.watch(\"__iterator__\", [1,2,3,4].map)) yield <><x><y/></x></>; else export *;export prop;break;  }switch(__parent__) { default: yield; }\nfunction  __parent__ () { Math.pow } \nexport __iterator__;\nvar __count__, __iterator__;\n");
tryItOut("let __proto__ = *; const prototype;");
tryItOut("yield __parent__;");
tryItOut("break M;");
tryItOut("/*infloop*/for(<x/>; ('fafafa'.replace(/a/g, Math.pow)); *::*) if(function::__proto__) prop; else  if (<><x><y/></x></>) prop: 0/0\n");
tryItOut("L:do throw __noSuchMethod__, __proto__; const constructor; while(((typeof <x><y/></x>)(<x><y/></x>.(3) -=  /x/  &= [,,z1]) &= (1 for (x in []))([@foo], (let (__iterator__, prop =  '' )  '' ))) && 0);");
tryItOut("switch('fafafa'.replace(/a/g, function  constructor ()__noSuchMethod__(let (__count__ = null, __proto__ =  /x/ )  '' ) = undefined)) { case (<><x><y/></x></>.__count__): break; default: L: prop, __proto__;break; L: yield __iterator__;case 6: if(([[1]].__count__ &= [window('__iterator__ in constructor setter: function(y) { yield y; yield;; yield y; }])) break; break; case new (function  __noSuchMethod__ (prototype, prototype) { yield <x><y/></x> } )(__proto__ = [,], @foo) - ((\f{ __proto__: constructor }) = yield 3): while(((<x><y/></x>-=constructor = prop @ null.__proto__ = [<x><y/></x>])) && 0){ { return __noSuchMethod__.unwatch(\"constructor\")\f }  }break; break; case 6: {} const constructor;const __count__ = function(id) { return id }, __parent__;case 6: break; break;  { /*infloop*/\tM:while(<><x><y/\n></x></>){; } } break; export  \"\" ;case new (null)(*): const __noSuchMethod__ = *::*;break; case false: do  while(((-1)) && 0); }");
tryItOut("L: (window);");
tryItOut("try { let(__count__ = [], __parent__) ((function(){with({}) { with({}) { throw <y><z/></y>; }  } })()); } catch( if (function(){__count__.(Math.pow) = __count__;})()) { return; } catch(__proto__ if (function(){throw __proto__;})()) { let(__parent__ = 3.141592653589793, __proto__ = (Math.pow)()) { throw StopIteration; } catch(__iterator__) { return (function ([y]) { }).call(window, ) = <x><y/></x>; } finally { /a/gi } ");
tryItOut("{let prop; }");
tryItOut("{prototype\n; }");
tryItOut("if(this ,  /x/g ) { if (__iterator__ = ({a1:1})) yield;} else throw <><x><y/></x></>\nif(__noSuchMethod__.__noSuchMethod__) return -0; else  if (false.isPrototypeOf( '' ).@*) {gc() }");
tryItOut("/*infloop*/do ({}).__lookupGetter__ while(<><x>\r<y/></x></>);");
tryItOut("M:with(true){export *; }");
tryItOut("/*infloop*/for(var __iterator__ = 0x99; <><x><y/></x></>;  '' ) ( /x/g );\n/*infloop*/L:do {export __iterator__; } while(\f[[[1]]].some(((<x><y/></x>)[window]).__defineSetter__));\n");
tryItOut("let(__parent__ = <x><y/></x> && <><!--yy--></>, x::@foo.__count__ = prototype) ((function(){throw StopIteration;})());");
tryItOut("prop = true;");
tryItOut("");
tryItOut("if(<x/>) ({}).__lookupGetter__ else  if (\t(-1)) gc() else { }");
tryItOut("(<><x><y/>\n</x></>).__defineSetter__\nif(null) {export *;var __count__; } else  if ( '' ) {gc() } else {continue ; }");
tryItOut("yield;");
tryItOut("if(\f<><xxx>{__count__}</xxx></>) { if (({__iterator__:  \"\" }).isPrototypeOf(__iterator__.@foo)) {{}\nthrow [z1];\n } else {gc()\nyield; }}");
tryItOut("M:if((prototype = constructor)) {(undefined);{} } else  if (([(let (prop, constructor) __noSuchMethod__) if (<y><z/></y>)]))  { ; } ");
tryItOut("throw (0.1 .@ 1e+81); const constructor;");
tryItOut("\tconst __parent__ = 0\ngc()");
tryItOut("L: {(this); }");
tryItOut("/*infloop*/for(const __noSuchMethod__; (prop) =  /x/g (); __parent__ = <><x><y/></x></>) export __count__; const constructor;");
tryItOut("do {this; } while((@foo) && 0);");
tryItOut("M:if(this.zzz.zzz) { if (((uneval(({})--)))) {(prototype);yield; }} else (window);");
tryItOut("(undefined); const prop;");
tryItOut("if(this.__defineSetter__(\"prop\", <><x><y/></x></>)) { if (<x><y/></x>.__iterator__) return  \"\" ; else export *;}");
tryItOut("const __parent__ = <x/>, :");
tryItOut("prop");
tryItOut("yield;");
tryItOut("with(( \"\" )[ /x/ ])if(('haha'.split) >>> ([<y><z/></y>])) yield; else {export *;break ; }");
tryItOut("L: let(__proto__ = window, prop) ((function(){;})());");
tryItOut("if([0x99].hasOwnProperty(\"__count__\")) {null;const __count__, prototype = *::*; } else  if ((prop =  \"\" ).@foo) {with({}) { ; }  }");
tryItOut("{} const __iterator__\n");
tryItOut("/*for..in*/L:for(let __iterator__ in ((function (prototype) { yield <><x><y/></x></> } )(*::*)))export prototype;");
tryItOut("L:if(<><x><y/></x></>) yield; else var __iterator__ = (-0);");
tryItOut(";");
tryItOut("if(([void [<y><z/></y>].sort(Math.sin)])) { if (this.zzz.zzz) /*for..in*/M:for(let __iterator__ in window) } else ;");
tryItOut("{/*for..in*/M:for([constructor, __noSuchMethod__] = new (<x><y/></x>)(__proto__) in  \"\" ) export __count__; }");
tryItOut("return this;");
tryItOut("M:\nif((__noSuchMethod__.prop = <x/>)) {function  __parent__ (__proto__, __count__) { return prototype =  /x/  }  }");
tryItOut("with({prototype: ~[, ] = -3/0.@*}){}");
tryItOut("__iterator__ = prop;");
tryItOut("if(new  \"\" .__lookupGetter__(\"__proto__\")(eval(\"<x/>\", window),  \"\" )) { if (@foo) /*for..in*/for(let [prop, __parent__] = 0/0 in <x><y/></x>) ; else {throw 0x99; }}");
tryItOut("{/*infloop*/this.zzz.zzz;export prop; }");
tryItOut("do gc() while((this) && 0);");
tryItOut("{if([,,z1]) {return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (#3={a:#3#})()) ;");
tryItOut("let __parent__ = <x><y/></x>, __iterator__ = <y><z/></y>;\ntry { {} } catch(constructor if (function(){{}})()) { * } catch(function::__iterator__) { yield; } \n");
tryItOut("if(* for each (__noSuchMethod__ in arguments).__defineGetter__(\"__iterator__\", /a/gi)) {throw constructor; } else  if (new /a/gi()) M:with(__parent__){export *; } else {yield; }");
tryItOut("/*infloop*/do __count__; while(<x><y/></x>\n.(this));");
tryItOut("if(+ \"\" ) { if (this.isPrototypeOf(<x><y/></x>)) {} else yield;}");
tryItOut("/*infloop*/for(function::__noSuchMethod__; window; false) __parent__ = <><x><y/></x></>;");
tryItOut("yield");
tryItOut("yield <><x><y/></x></>\nyield;");
tryItOut("for(let y in []);");
tryItOut("return __noSuchMethod__;");
tryItOut("return prop .@*:: false\n");
tryItOut("/*infloop*/do if(null ? undefined : window) { if ('fafafa'.replace(/a/g,  \"\" )) {(true); } else return <><x><y/></x></>;} while(__noSuchMethod__.hasOwnProperty(\"__iterator__\") >>>=(__proto__ = <x><y/></x>));");
tryItOut("return (new Math.pow((<><x><y/></x></>.propertyIsEnumerable(\"constructor\")), *::*));");
tryItOut("return <x/>;");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __iterator__\n;");
tryItOut("{return; }\n");
tryItOut("{}");
tryItOut("L: if(this.__defineGetter__(\"__proto__\", (<y><z/></y>).__defineSetter__) %= <y><z/></y> += *) { if (<bbb xmlns:ccc=\"({ get __proto__ __iterator__ (prop, __proto__)<y><z/></y> })\"><ccc:eee></ccc:eee></bbb>)  \"\" ;} else {export __noSuchMethod__;let (prop, * = [z1,,]) {  } }");
tryItOut("let (x::__parent__, __parent__) { M:if((this.__defineSetter__(\"prop\", ( \"\" ).__defineSetter__))) { if ([<y><z/></y>]) {export *;__parent__ = *, each = <y><z/></y>; }} else {<x/>; } }");
tryItOut("/*for..in*/for(let __parent__ in 3) ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) ");
tryItOut("M:while((window( /x/ )) && 0){let prop = this;return; }");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) return; else {yield <><x><y/></x></>; }}");
tryItOut("M:if((new (@foo *= <y><z/></y>)().__lookupSetter__(\"constructor\"))) { if (__iterator__.__parent__ setter= ({}).hasOwnProperty) {export * } else export constructor;}");
tryItOut("return;");
tryItOut("/*infloop*/do ; while(/a/gi\t);");
tryItOut("if((__proto__.__proto__)) { if (({}).hasOwnProperty) export constructor; else {return  /x/ ;constructor, __iterator__ = false; }}");
tryItOut("/*for..in*/for(const prototype in ((Function).call(null .@*:: (function ([y]) { })(), ( '' .unwatch(\"__proto__\")).throw((({}).hasOwnProperty)(1e+81, [z1]))))) return;");
tryItOut("/*infloop*/while(*)");
tryItOut("switch(({ __iterator__: __proto__ }) = __parent__.prop) { case (__noSuchMethod__-=<><x><y/></x></>.@*): break; case ([(1.3 ||  /x/ )]): switch((this.__defineGetter__(\"function::__parent__\", gc))) { case +<><x><y/></x>\t</>(): if(new (<x><y/></x>)(<x/>)) {return; } else return;break; case 8: {}break;  }break; default: gc()case 1: \tthrow 1e+81;\n{}\n\nexport *;case ({prop setter: 'haha'.split }): break; /*for..in*/for(const __iterator__ in ((Math.pow)(window))){}break; var __noSuchMethod__ = true, prototype; }");
tryItOut("{} const prop;\n({ __count__: ({ constructor: __proto__ }) }), __proto__;\n");
tryItOut("/*for..in*/M:for(let __parent__ in __noSuchMethod__) switch(<><x><y/></x><\t/>) { case window:  }");
tryItOut("/*infloop*/for(this.valueOf(\"number\").prototype; window; +yield window.throw(*::*)) throw StopIteration;");
tryItOut("return");
tryItOut("L:while(((([15,16,17,18].sort(0.1, (this.zzz.zzz))))() .. true.__lookupGetter__(\"__proto__\")) && 0){var prototype, constructor;(<x/>); }");
tryItOut("var __parent__ = <x><y/\f></x>, __parent__ = <x><y/></x>;\n\nvar prototype;\n");
tryItOut("/*infloop*/M:while(false = (function (__noSuchMethod__) { yield *::* } )(Function))/*for..in*/for(let constructor in ((function(q) { return q; })(function(id) { return id }))){__parent__ = this; get prop() { yield; }  }(4.);");
tryItOut("L:with((__parent__ = __noSuchMethod__))throw  /x/ ;");
tryItOut("/*infloop*/do export __count__; while(( '' [(__count__%=*::*)]).*);");
tryItOut("var __noSuchMethod__, prototype;\n(1.2e3);\n");
tryItOut("gc()");
tryItOut("let (__noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */ for  each(<ccc:ddd><>yyy</>yyy</ccc:ddd> in *::*) (this); }");
tryItOut("with({}) with({}) { {} } ");
tryItOut("with({}) { constructor; }  const __iterator__;");
tryItOut("try {  } finally { window; } ");
tryItOut("\n");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/L:for(let __count__ in (('haha'.split)(this.__defineSetter__(\"prop\", ({}).hasOwnProperty)))){let (function::x::prop = 3/0) { const prototype = #1#, __parent__; } }");
tryItOut("\n/*infloop*/for(var prop; (p={}, (p.z = <x/>)()); #1=[#1#]) {while((window) && 0)export *;export *; }\t\n");
tryItOut("/*for..in*/M:for(var __parent__ >>= <x><y/></x>.__iterator__ = null in this.constructor) export *\nwith({}) { throw constructor; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x><y/></x>.@foo) {if((__iterator__.__count__) = *::*--.propertyIsEnumerable(\"__noSuchMethod__\")) return window; else let __count__, __iterator__;gc() }");
tryItOut("switch((eval(\"yield;\", 4.))) { case 0: case 7: break;  }");
tryItOut("M:while(((prototype(<x><y/></x>)) = (#1=[].__noSuchMethod__)) && 0)L: false;");
tryItOut("with({prototype: eval(\"5.0000000000000000000000\", <><x><y/></x></>)})M:if(<x/>) ([[1]]); else  if (window) const prop, __iterator__; else return window;");
tryItOut("if((__noSuchMethod__.__iterator__ = (null)()) + this) {throw new (/a/gi)((({}).__lookupGetter__ = prop)); } else  if (new (((undefined)))(constructor.propertyIsEnumerable(\f\"constructor\"))) {return <><zzz> '' </zzz></>; } else {throw [1,,];\n\n\n }");
tryItOut("L:with(@foo ? null : <x><y/></x>)yield;");
tryItOut("/*infloop*/for(var [] = <x><y/></x>.yoyo((((new Function(\"export *;\"))).call(undefined, <><x><y/></x></>))); this.__defineGetter__(\"__parent__\", function(y) { yield y; <x><y/></x>;; yield y; }); <x/>) *;");
tryItOut("let (__count__, __iterator__ = __iterator__) { if(this) {return <x><y/></x>;export __count__; } else  if (<><x><y/></x></>) { /x/  } else 0.1; }");
tryItOut("{gc() }");
