tryItOut("this.zzz.zzz\nwith({__parent__: ([(({__noSuchMethod__ setter: undefined }))])})continue M;");
tryItOut("/*for..in*/for(const prop = __iterator__.(eval(\"__iterator__ = <><x><y/></x></>\", [__count__, ] = ({ get __proto__(__count__)window, __count__: <><x><y/></x></> }))) in (__iterator__ = __noSuchMethod__|=<><x><y/></x></>)) do __iterator__ while((({constructor: undefined})) && 0);");
tryItOut("/*infloop*/do {eval } while(constructor = (<x><y/></x>\f.(false)));");
tryItOut("if(<x><y/></x>) yield __parent__; else  if ((function ([y]) { })()) {<><x><y/></x><; } else {; }");
tryItOut("return; const prop;\r");
tryItOut("if((({ set __noSuchMethod__(prop, __iterator__)[1,,] && arguments, __count__: <x/>.function::constructor }))) {yield;(1 for (x in [])) } else  if (__noSuchMethod__.(<x><y/></x>)) ");
tryItOut("\tL: return;");
tryItOut("return;");
tryItOut("return (__iterator__ = null .@x:: <x/>);");
tryItOut("/*infloop*/for(function::prop.valueOf(\"number\"); window[((constructor.((\ntrue))).__defineSetter__(\"__proto__\", <><x><y/></x></>.hasOwnProperty(\"__iterator__\")))]; new (<><x><y/></x></>)(__proto__, 0.1).watch(\"__noSuchMethod__\", eval)) {if(__noSuchMethod__) const __noSuchMethod__ = *; else {return  '' ; } }");
tryItOut("{var __noSuchMethod__ =  '' ; }");
tryItOut("let (prototype = <><x><y/></x></>, __proto__ = this) { this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (constructor) in constructor = prop) {L: export *return; }");
tryItOut("/*infloop*/L:for(var prop; [<><x><y/></x></>]; __parent__ = \tprop) const constructor;");
tryItOut("L:if( /x/g .yoyo(<><x><y/></x></>)) {; }");
tryItOut("if((__count__ =  '' )) {/*for..in*/for(constructor in <><x><y/></x></>) throw *::*; }");
tryItOut("for(let y in [5,6,7,8]) yield window;");
tryItOut("L:with({__parent__: (new ((<x/>.watch(\"__count__\", <x><y/></x>)))())})return true;");
tryItOut("try { with({}) { try { for(let y in [5,6,7,8])  } catch(prop) {  } finally { (#3={a:#3#})(__noSuchMethod__) = __parent__; }  }  } finally { let(constructor = (-1e+81) >>= __proto__ = __count__) ((function(){for(let y in [5,6,7,8]) return;})()); } ");
tryItOut("while((<x/>++) && 0)__proto__, prop = prototype;");
tryItOut("/*infloop*/do return; while(__parent__.__count__);");
tryItOut("\nconst __iterator__ = ({a1:1}), __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor((<x><y/></x>.(<><x><y/></x></>))) in let (__proto__) <x><y/></x> + <y><z/></y> .@x:: <y><z/></y>) {/*for..in*/for(let __proto__ in  /x/g ) throw <y><z/></y>;/*infloop*/do throw window; while(<x><y/></x>); }");
tryItOut("return undefined;");
tryItOut("{{export __count__; }const constructor; }");
tryItOut("/*infloop*/L:for(let prototype; __parent__ = (-0) = null; (__proto__ = __proto__))  for (__parent__ in -1)");
tryItOut("/*infloop*/for(const prototype; ; ( /* Comment */#1=*::*)) ");
tryItOut("(this);\n__iterator__ =  /x/ ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in prototype ? 3.141592653589793 : <y><z/></y>) L:if((-0)) { } else {return;break ; }");
tryItOut("with(undefined){}");
tryItOut("/*for..in*/for(let prop in (([1,2,3,4].map)( /* Comment */5.0000000000000000000000))){__iterator__ = <>yyy</> const constructor;let __parent__, prototype; }");
tryItOut("while((delete (<y><z/></y>)[*].* .@*:: __proto__ = <y><z/></y> < *) && 0){{}yield undefined; }");
tryItOut("while(((prototype)(1e+81)) && 0)yield [z1];");
tryItOut("if(<ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>+=033 ? eval(\"const __noSuchMethod__;\", (this\n)) : ().__lookupGetter__(\"__noSuchMethod__\")) { if ([#0=({prototype: [z1,,]})].map((Math.sin).apply)) {/*infloop*/for(var __count__ = <><x><y/></x></>; this; <x><y/></x>) return;if((window.propertyIsEnumerable(\"__noSuchMethod__\"))) {;{} } }} else {export *;default: /*for..in*/M:for(__parent__ in undefined) return undefined;break;  }");
tryItOut("M:if(({ __iterator__: constructor }) = (yield @foo)) { if (__noSuchMethod__) Array(<><x><y/></x></>);} else var __count__ = undefined;");
tryItOut("with((!3/0))yield;");
tryItOut("/*infloop*/while([prop\n] .@ this){/*for..in*/for(const constructor = * >>> <x/> in __parent__) const __count__ = 0x99, __count__ }");
tryItOut("with({}) { with({}) { let prop = <x><y/></x>, getter = @foo; }  } ");
tryItOut("export *\nfunction () { {} } ");
tryItOut("if(this) {;function(y) { yield y; {}; yield y; } } else continue \fM; const prop;");
tryItOut("/*infloop*/for(let __parent__; constructor([1].hasOwnProperty(\"__parent__\")) = new Math.sin(new Boolean(033), (<><x><y/></x></>.isPrototypeOf(<x><y/></x>))) << [,,z1]--; ([1,2,3,4].map).call((yield #3={a:#3#}--), @foo, (__count__ + (<x><y/></x>.(*))))) {switch(<x><y/></x> | 1e-81) { default: yield  \"\" ;break; break; case (<y><z/></y> + false):  }<x><y/></x>; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; \n<><x><y/></x></>((__iterator__, __iterator__|=<><x><y/></x></>) @ new 'haha'.split(<>\f<x><y/></x></>, undefined), false /  /x/g ); (new (<y><z/></y>)(undefined))) L:switch(#1#) { case ([1,2,3,4].map((#2=[<y><z/></y>]))): const __proto__ = <><x><y/></x></>;break; /*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in <x/>) {let __count__, prop;; }throw ({a2:z2});break; ;break;  }");
tryItOut("if(__count__.(*)) {let __noSuchMethod__ = __proto__; } else  if ((uneval(prop.prop))) yield *::*; else let constructor, prop = <y><z/></y>;");
tryItOut("{{}yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const prototype = (export constructor) in <x><y/></x>.(*::*).valueOf(\"number\")) {var __proto__ = undefined;\n(*);\n }");
tryItOut("do break L; while((__noSuchMethod__ =  ''  > <><x><y/></x></>) && 0);");
tryItOut("export prototype;\nyield;\n");
tryItOut("while((<><x><y/></x></>) && 0){yield 4.;4. }");
tryItOut("(<><x><y/></x></>);");
tryItOut("with(<><x><y/></x></>)gc()");
tryItOut("<x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\fM: for  each(const __parent__(<x/>) in (3.__lookupSetter__(\"prototype\"))) {constructor }");
tryItOut("throw StopIteration;");
tryItOut("M:if([z1,,].__lookupSetter__(\"__parent__\")) { if (this.__defineGetter__(\"prototype\", function(y) { yield y; return [z1,,];\f; yield y; })) ;} else prototype");
tryItOut("const prop");
tryItOut("/*infloop*/while((p={}, (p.z = [z1,,])())){export prop;let prototype, constructor = #1=[#1#];prototype.propertyIsEnumerable\t(\"prop\") }");
tryItOut("if(<x/>.hasOwnProperty(\"constructor\")) if(<employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>) gc() else  if (<><x><y/></x></>) {break ; } else export constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) function (__iterator__) { return window } ");
tryItOut(" /x/g ");
tryItOut("while((__iterator__ =  /* Comment */([<y><z/></y>].map(eval)\t--)) && 0){const __noSuchMethod__, __count__\nthrow <><x><y/></x></>; }");
tryItOut("");
tryItOut("/*infloop*/M:for(__noSuchMethod__; __count__ = <><x><y/></x></> * ({a1:1}) , __proto__.([[]]); @foo) {if( \"\" ) { if (__count__) {break M; }} else return true; }");
tryItOut("if(this.zzz.zzz > #3={a:#3#}) {var prototype;if([this].some(((1 for (x in []))).apply)) ; else {;{} } } else  if ([15,16,17,18].sort(function(q) { return q; }, __iterator__)) {return\nyield __count__; } else constructor: @foo");
tryItOut("L:if((((1 for (x in []))).call).call\t(<y><z/></y>[5.0000000000000000000000], (__iterator__)[1.3])) { if (Number()) /*infloop*/for(new ((0).__defineSetter__)(prototype, [[]]); (-<><x><y/></x></>); false.yoyo( /x/g )) { }} else {continue L;\nconstructor;\n }");
tryItOut("do { const __parent__; } while(((.prop) , (({__proto__: <x/>}))) && 0);");
tryItOut("if(@foo) {return <x/>;return; } else  if (__noSuchMethod__.constructor getter= (new Function(\"{}\"))) break ;");
tryItOut("/*infloop*/do {export __noSuchMethod__;Function } while({});");
tryItOut("/*infloop*/for(true; window ? null : <y><z/></y>; 3/0 << [z1]) /*for..in*/for(let prop in __parent__) { }");
tryItOut("/*for..in*/L:for(__iterator__ in (([1,2,3,4].map)(([])))){}");
tryItOut("L: {L:if( /x/g ) { if (<><x><y/></x></>) {var <x><y/></x>; } else {var return;; }} }");
tryItOut("gc()");
tryItOut("/*infloop*/M:for((@foo.__lookupGetter__(\"__parent__\")); [15,16,17,18].some(<x><y/></x>, .2); <><x><y/></x></>.__iterator__ =  /x/g ) {(window);let prototype; }");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = * in @foo) {const __proto__ = this; }");
tryItOut("/*for..in*/L:for(let [,,].__lookupGetter__(\"constructor\").__iterator__ in __noSuchMethod__.__noSuchMethod__ getter) /*infloop*/for(let prop = (({ constructor: getter, __proto__: prototype }) = #1=[#1#].hasOwnProperty(\"function::__proto__\")); (uneval(this)).yoyo(prop = <><x><y/></x></>); this ? this : *::*) {return;{} }");
tryItOut("if( /* Comment */new 0.1() for each (__noSuchMethod__ in this)) /*infloop*/for(const constructor = *::*; <><x><y/></x></>; function(id) { return id }) {}");
tryItOut(" const __count__;");
tryItOut("/*infloop*/while( /x/g )throw {};");
tryItOut("do do {var constructor; } while((1e-81) && 0); while((((new Function(\"yield 033;\"))).call(__proto__, [15,16,17,18].some(*::*, true))) && 0);");
tryItOut("L:while(((new (function (prop, __noSuchMethod__) { return false } ).call([,]))) && 0)export *;");
tryItOut("if(<x/>.propertyIsEnumerable(\"prototype\")) ; else {var prop;let constructor; } const prop;");
tryItOut("L:if(![<x/>].some(((function  function::__proto__ (__count__, function::prop) { yield <y><z/></y> } ).apply).apply)) {{}continue/*; } else  if (((yield <><x><y/></x></>)) < @foo++) {;L:if(((<y><z/></y>)([], <x><y/></x>))) {} else  if ((__parent__)) {const prototype, __proto__ = __count__;throw 0/0; } else {(constructor);<><x><y/></x></>; } }");
tryItOut("yield; const constructor;");
tryItOut("/*for..in*/for(__proto__ in new ((new window())).__defineSetter__(new (/*\n*/{__proto__: ({})}), 1e+81 instanceof 1e81)) ");
tryItOut("/*for..in*/for(let constructor in ((function () { continue L; } )(<><x><y/></x></>.__lookupGetter__(\"prototype\").isPrototypeOf((__iterator__ + [,])))))__count__ = 0/0, prototype;");
tryItOut("{return; }");
tryItOut("/*infloop*/for(1.3; <x/>; <x><y/></x>.([,,])) {; }");
tryItOut("while(([,,]) && 0){if(<x><y/></x>) { if (window) {return; }\t} else {__iterator__, __parent__ = 3/0; } }");
tryItOut("L: {export *;switch(__proto__ = this) { default: ;break; constructor = __proto__;break; case 0: break; case 9: let __noSuchMethod__;break;  } }");
tryItOut("with({}) { for(let y in [5,6,7,8]) let __parent__ = *; } ");
tryItOut("while((<y><z/></y>) && 0);");
tryItOut("try { throw function::x::__proto__; } catch(__iterator__) { with({}) let(prototype, function::prototype = null) { {} } ");
tryItOut("{gc() }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {const __proto__ = <x><y/></x>;return\n }");
tryItOut("let (constructor) { L:with({__parent__:  \"\" })while(( '' ) && 0){continue ; } }");
tryItOut("const __noSuchMethod__ = __count__, prototype = <x><y/></x>\n");
tryItOut("L: { /x/g ; }");
tryItOut("M:if((x::prop.constructor = __count__.hasOwnProperty(\"__proto__\")))  else  if ((new (function(q) { return q; })(prototype.__noSuchMethod__ = <>\t<x><y/></x></>))) throw ; else const prototype = <><x><y/></x></>;");
tryItOut("__proto__ = prop;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__) { yield <x><y/></x>.(1.3);");
tryItOut("try { {} } catch(__proto__ if <y><z/></y>.__parent__ getter= eval) { throw function(id) { return id }.isPrototypeOf(constructor); } catch(__proto__ if (new ('haha'.split)())) { with({}) return; } catch(__parent__ if false) { let(__parent__) ((function(){yield ;})()); } \n{const __iterator__ = <x><y/></x>;gc() } const prototype;");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: ({ __iterator__: ({ __parent__: ({ __count__: prop }) }), set: ({ __count__: ({ __iterator__: ({ __noSuchMethod__: [__noSuchMethod__, , prototype, ], prototype: ({ prototype: ({ prototype: constructor }), __noSuchMethod__: ({ __count__: __iterator__, __iterator__: __proto__ }) }) }) }) }) }), __proto__: prototype }) = ('fafafa'.replace(/a/g, ({}).__lookupGetter__) + ((({a2:z2}))(<><x><y/></x></>))); 0/0.@foo; [4.\t].map(function(q) { return q; }) :: null) export __iterator__;");
tryItOut("if([1]) { if (__proto__.prop = __count__ + __noSuchMethod__) {var constructor =  '' ;/*infloop*/for(__parent__; window; *::*) export __noSuchMethod__; } else /*infloop*/for( /x/ ; false , true; yield window) {throw 0.1<!--yy-->\nyield \t<x/>; }}");
tryItOut("if((__iterator__)(__iterator__)) { if (let (prop, constructor = *)  '' ) constructor; else {;; }}");
tryItOut("let (({ __iterator__: ({ __count__: __noSuchMethod__, prototype: constructor }) }), __noSuchMethod__ = <><x><y/></x></>.yoyo(prop)) {  }");
tryItOut("if(false) export constructor;");
tryItOut("//h\nif(( /* Comment */prop)) { if (<><bbb xmlns:ccc=\"(<><x><y/>\t</x></>.* &= <> </>)\"><ccc:eee></ccc:eee></bbb></>) {throw [,,]; } else {{}const __parent__ = __iterator__, __noSuchMethod__ = @foo; }}");
tryItOut("if(prop) { if (( \"\"  instanceof false)) {if([11,12,13,14].some) {export *; } else  if ((<y><z/></y> >= false)) (1 for (x in [])) }} else export __iterator__;");
tryItOut("let __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 *//*\n*/ for  each(prototype in <x/>) {/*infloop*/while(this){var __proto__ = try { return @foo; } finally { break L; } , __noSuchMethod__;throw 1e81; }<x><y/></x>; }");
tryItOut("if(( '' .propertyIsEnumerable(\"__noSuchMethod__\"))) {{{}/*infloop*/do {export __noSuchMethod__;; } while( '' ); }gc() }");
tryItOut("/*infloop*/for([, , ] = 1e81.__proto__ = <><x><y/></x></>; (Function).__lookupSetter__(\"prototype\"); this.zzz.zzz) {yield @foo; }");
tryItOut("if(<><x><y/></x></>.isPrototypeOf(3/0)) { if (((this.__defineSetter__(\"__iterator__\", -3/0))())) /*for..in*/for(var __proto__ = prop in try { {} } catch(function::__noSuchMethod__ if false) { function (__iterator__, __proto__) { ; }  } catch(constructor if (function(){;})()) { eval } catch(__parent__ if []) { ; } catch(__iterator__ if prop) { {} } ) {continue ;__noSuchMethod__; } else {{}({}).hasOwnProperty }}");
tryItOut("/*for..in*/for(prototype in (__proto__)) {}\f");
tryItOut("yield; const constructor;\n/*infloop*/for(var __proto__; <><x><y/></x></> ^ <><x><y/></x></>; new __count__: false) yield;\n");
tryItOut("/*infloop*/for(__proto__; __parent__.(new (Function)());  /* Comment */<x><y/></x><!--yy-->) {return; }");
tryItOut("L: {gc() }");
tryItOut("if(new /a/gi()) { if (new (window)([,,z1])) { }} else { }");
tryItOut("/*infloop*/for(let ({ __proto__: ({ prototype: constructor }), __iterator__: \f({ __noSuchMethod__: x::constructor, constructor: __parent__ }) }) =  /x/ ; __noSuchMethod__; ((yield undefined))) \t;");
tryItOut("");
tryItOut("/*infloop*/for(var __noSuchMethod__ = prop = (((false).watch)()); ( /x/ [( ''  >>> <x/>)]); --( /x/ ) < null ? <x/> : <y><z/></y>) switch( '' .throw([1]) ^= (-0)) { case 7: break; break; default: window;break; break;  }");
tryItOut("/*for..in*/for(var ({ __count__: __iterator__ }) in <><x><y/></x></>.__defineGetter__(\"__count__\", function(q) { return q; }).({ __noSuchMethod__: [] })) {for(let y in []);let __iterator__ = [1,,], prop; }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = <x/> in __count__) {return;return; }with({__iterator__: __count__ = __noSuchMethod__ = <x><y/></x>})/*infloop*/M:for(const __noSuchMethod__;  /x/g ;  '' ) <x><y/></x>;");
tryItOut("L: let __iterator__, <><x><y/></x></> = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var (let \tprototype)(__noSuchMethod__-=true) in typeof eval(\"var __count__;\", null)) {return; }");
tryItOut("M:switch((new function(q) { return q; }({; }))) { default: if(__count__) {(<y><z/></y>);gc() }break; case [__parent__]: {}break;  }");
tryItOut("M:while(( /x/  %= window) && 0)continue ;");
tryItOut("if(([1,2,3,4].slice)(({a2:z2}))(new [1,2,3,4].slice(<x><y/></x>, <x><y/></x>), <y><z/></y>)) { if (<x/>) {export prop; } else {<x><y/></x>; }}");
tryItOut("let(__proto__) { export *;");
tryItOut("const __noSuchMethod__, constructor =  /x/ ;\nyield;\n\nswitch(({a2:z2})) { case 1:  }");
tryItOut("if((prop.__defineGetter__(\"__proto__\", eval))) { if ( /x/  <= undefined) yield <><x><y/></x></>;} else ");
tryItOut("throw __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut(";");
tryItOut("let __proto__ = #3={a:#3#}, prototype;\n__noSuchMethod__, __iterator__ = undefined;\n");
tryItOut("L:if(0.1 >>>= \"\" ) { if (function ([y]) { }.__noSuchMethod__) {return;continue ;//h\n } else ;}");
tryItOut("/*for..in*/for((Array()) in ((function (__iterator__) { yield ({}) } )(false.watch(\"prop\", (function  __noSuchMethod__ (__iterator__) { let __proto__ = 3/0; } ).apply), *::*))) yield;if(({a2:z2}) <<  /x/g ) {__proto__, __parent__ = *; } else  if (('fafafa'.replace(/a/g, try { gc() } catch(constructor if (function(){let __noSuchMethod__ = <y><z/></y>;})()) { yield  /x/g ; } ))) __count__ = <x><y/></x>,  = *;");
tryItOut("yield;");
tryItOut("(let (prop) *::* ?  /x/  : *::*), (.__defineSetter__(\"__iterator__\", (constructor =  /x/ .isPrototypeOf(function::__noSuchMethod__).__defineGetter__(\"__noSuchMethod__\", function (constructor) { return this } )))) < [15,16,17,18].map((new Function(\"for(let y in []);\")), yield <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)");
tryItOut("if(__proto__) { if ((const __noSuchMethod__, __parent__.throw(prop.prop getter= [1,2,3,4].map.propertyIsEnumerable(\"__proto__\")))) {/*infloop*/for(<x><y/></x>; new 'haha'.split(); arguments) {{}return <x><y/></x>; } }} else {/*infloop*/for(var __proto__ = 3.141592653589793; this; true) {/*infloop*/while(prototype.hasOwnProperty(\"constructor\"))throw <x><y/></x>; } }");
tryItOut("if(*::*) {gc()var __proto__; } else  if (constructor) {return [[1]];yield; } else {export prop; }");
tryItOut("L:if((0 != )) (gc).call else {yield false;throw prototype; }");
tryItOut("do const __proto__; while((5.0000000000000000000000) && 0);");
tryItOut("L:if(<>__iterator__ = <x><y/></x></>) { if ((uneval(\fprototype =  /x/g )).eval(false)) {__parent__ = <y><z/></y>, __parent__; }} else {if(<><x><y/></x></>.valueOf(\"number\")) { if (this.__defineSetter__(\"__proto__\", gc)) {gc() } else {(1e4);let prototype, constructor; }} }");
tryItOut("if(true) { if (<x><y/></x>) return;} else {throw window;export *; }\nwhile((({})) && 0)throw <x><y/></\tx>;");
tryItOut("/*infloop*/for(var ({ __proto__: prototype.prototype, constructor: ({}) }) = [__parent__, , __count__, __iterator__, ] = <><x><y/></x></>; <><xxx {prototype}={(({__proto__: <x/>}))} /></>; (({__noSuchMethod__: (-0)}))) if(true)  else  if ( '' ) let __parent__, prop; const (prototype);");
tryItOut("with({__iterator__: true *  '' })(*::*);");
tryItOut("/*infloop*/for(__iterator__ = (!__proto__ != prop.@*); ~new this(constructor); ({__noSuchMethod__ getter: new Function, __proto__: this }).eval(0.hasOwnProperty(\"__count__\"))) {;\nexport *;\n(true); }");
tryItOut("/*for..in*/for(prop = *::*.eval(function ([y]) { }) in 1e4) {export *;\nexport *;\n/*for..in*/M:for([__count__, __iterator__] = <><x><y/></x></> in false) {break ;export *; } }");
tryItOut("L:if((Object(<x><y/></x>))) if((window[<><x><y/></x></>])) { if (<y><z/></y>) {/*infloop*/for(let __noSuchMethod__ = this; false; constructor) yield;__count__ = <x/>; } else yield undefined; const __proto__;} else ");
tryItOut("if( /* Comment */__iterator__.prop.throw([[1]]))  set __parent__(constructor)(prop = [, , ]) else  if ( \"\" ) {/*infloop*/while('fafafa'.replace(/a/g, function  __proto__ (__iterator__)<x><y/></x>))throw  /x/g ;(<x><y/></x>); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while( '' .valueOf(\"number\"))gc()");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(([({ prop: __parent__ }), ({ __noSuchMethod__: __count__ }), ] = 'fafafa'.replace(/a/g, (<><x><y/></x></>).__defineSetter__))) {yield;__noSuchMethod__ = [,,], get\ncontinue \n\tif(window) {continue ;([,]); } } else  if (constructor = this.__defineGetter__(\"prototype\", this.__defineSetter__(\"prop\", function<x><y/></x> -= @foo  __proto__ () { yield  \"\"  } )) !== (String(<x><y/></x>.yoyo( /x/ )))) {while((false) && 0){;\t }\nconst __iterator__ = <x><y/></x>, __noSuchMethod__;\n } else if(<><x><y/></x></>) new Function else  if (window) let __proto__ = 5.0000000000000000000000; else {([z1]); }");
tryItOut("/*for..in*/for(var __iterator__ in <>prototype = prop</>) L:if(yield  /x/g ) {yield this;yield <y><z/></y>; } else  if (([*::* if (undefined)])) {gc() }");
tryItOut("/*infloop*/for((({__parent__: Function, __iterator__: function(y) { yield y; ({}).__lookupGetter__; yield y; }().unwatch(\"__proto__\") })); <x><y/></x>.isPrototypeOf(Math.pow); ) /*infloop*/for(__count__ * *::*; ((1 for (x in []))); \twindow.__parent__ = <x/>) {throw prototype;return __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(const prototype; <y><z/></y> .@x:: this; [11,12,13,14].filter < constructor.__parent__ setter= /a/gi) return __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in new @foo ?  \"\"  : 4.) (-1);continue ;");
tryItOut("return;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, getter] = [1].__lookupSetter__(\"prop\") in [15,16,17,18].filter((( set __count__()function ([y]) { }).apply).call, <y><z/></y>)) if( \"\" ) { if (\ntrue) continue M; else {/*for..in*/for(const __proto__ =  /x/g  in @foo) yield @foo; }}\t");
tryItOut("while((__parent__ = [[1]] |= #1=[#1#].constructor) && 0){('haha'.split).applyif(__count__.(033)) { if (__proto__ = <y><z/></y>) {export *; }} else var this = 1e4, __proto__ = *; }");
tryItOut("; const __count__");
tryItOut("with({prototype: ((/a/gi).call(__iterator__ = #3={a:#3#}, true, <y><z/></y>))}){if(*::*) { if (<x/>) __iterator__ = 1.2e3;} else return <><x><y/></x></>; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(*)throw #1#;\n(@foo).watch\n\n");
tryItOut("return;");
tryItOut("switch([15,16,17,18].some(function  prototype (prototype)<><x><y/></x></>, undefined)) { default:  }");
tryItOut("eval");
tryItOut("prop, __parent__ = @foo");
tryItOut("L:if(arguments >>= (<zzz>{} :: ({a2:z2})</zzz>.(( \"\" .*)))) let(function::prototype = (new String( \"\" .\f__lookupGetter__(\"__proto__\"))), __proto__ = typeof window) { throw prototype;");
tryItOut("undefined / 4. ==  '' ");
tryItOut("{if('haha'.split()) /*for..in*/\ffor(var __count__ in <><x><y/></x></>) {break ; } else  if ([11,12,13,14].some | (*::*)(__proto__, <x><y/></x>) & (<><x><y/></x></>.__defineSetter__(\"__proto__\", (function (__iterator__) { yield <y><z/></y> } ).apply))) {yield window;var __noSuchMethod__ = <x><y/></x>; } else /*for..in*/for(const __parent__ = __count__ in <x/>) yield *; }");
tryItOut("while(([15,16,17,18].filter(((new Function(\"continue M;\"))).call, )) && 0)if(RangeError(<x/>, <><x><y/></x></>)) { if ((__proto__.__parent__ getter= 5.0000000000000000000000)) export prototype;} else break L;");
tryItOut("{/*for..in*/M:for(var [__count__, function::__proto__] = function::__parent__.prop = window in *::*) export x::__count__; }");
tryItOut("if(this .@ undefined) { if (<><x><y/></x></>.unwatch(\"__proto__\").constructor = prototype.__noSuchMethod__ = <><x><y/></x></>) continue ;} else {yield  \"\" ; }");
tryItOut("/*for..in*/for(var (constructor) in ((((<x><y/></x>)(window, [,,z1])))[this === <x/>])) ");
tryItOut("let (__noSuchMethod__) { M:with(__noSuchMethod__){{} } }");
tryItOut("/*infloop*/for(var __iterator__; [11,12,13,14].filter; (<y><z/></y>.throw(true))) gc()");
tryItOut("/*infloop*/do __proto__ while(null);");
tryItOut("/*infloop*/for(var __proto__; ({ constructor: __noSuchMethod__ }) = Function(1.2e3); <x/> !== <x><y/></x>) <\fx><y/></x>;");
tryItOut("/*for..in*/for(var prop = new ({})() in -1) {var constructor = *::*;(__count__); }");
tryItOut("L:if(gc()) { if ((<><x><y/></x></> ? <><x><y/></x></> :  ''  * @foo)) {return 1e-81;return; } else {throw this;; }}");
tryItOut("/*for..in*/M:for(const prop in (uneval(window))) let __proto__ = <><x><y/></x></>, __noSuchMethod__ = this;");
tryItOut("[,]\n");
tryItOut("while((this.__defineSetter__(\"__proto__\", ( /x/ ).__defineSetter__)) && 0)let (prop) { ; }");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = 0 in ({__proto__: false;})) if({}.hasOwnProperty(\"__iterator__\")) continue ; else {{}; }");
tryItOut("do {/*for..in*/M:for(let   = yield [[]] in <x><y/></x>) yield  /x/ ;/*for..in*/L:for(const __noSuchMethod__\n in <x/>) {var __noSuchMethod__; } } while((prop.__noSuchMethod__ setter= function  __proto__ (prototype, __iterator__) { return 1e81; } ) && 0);");
tryItOut("M:with(<>try { {} } catch(__count__) { throw *; } finally { var __noSuchMethod__ = <x><y/></x>, constructor = *::*; } </>)__noSuchMethod__ = [,,z1], constructor;\f");
tryItOut("prototype = __iterator__;");
tryItOut("L: L:if((-0)) { } else {; }");
tryItOut("if(__parent__ = arguments) return *; else  if (__count__)  \"\" ;");
tryItOut("with((0)(*::*))/*infloop*/L:do {break ;; } while( '' );");
tryItOut("L: yield;");
tryItOut("with({}) { __parent__(<x/>) = constructor; } ");
tryItOut("do {break ; } while((window) && 0);");
tryItOut("/*for..in*/M:for(var __iterator__ = [false for each (prop in #1=[#1#])] in (window.__defineSetter__(\"__proto__\", Math.pow))) yield __count__;");
tryItOut("if(true) {(<><x><y/></x></>);{} } else  if (<><x><y/></x></>) {; }");
tryItOut("/*infloop*/for(var ({ __count__: ({ constructor: __iterator__ }), __proto__: prop }) = (({constructor getter: new Function }))(); <zzz>undefined</zzz>; this.__lookupGetter__(\"__noSuchMethod__\") ..  /x/ ) {undefined; }");
tryItOut("if((eval(\"<x/>\", <y><z/></y>)\n)) /*for..in*/for(const [constructor, constructor] = @foo.__parent__ = <x/> in <><x><y/></x></\t>) yield null;");
tryItOut("/*for..in*/M:for(const __iterator__ in (((eval(\"/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in undefined) function(y) { yield y; export *;; yield y; }\", .2)).watch)(((function ([y]) { }).__defineSetter__)((constructor = ({})), <x><y/></x>)))){L/*\n*/: {throw *::*; } }/*infloop*/while((<><x><y/></x></>).call(__proto__, <x><y/></x>, <><x><y/>\t</x></>))__proto__;");
