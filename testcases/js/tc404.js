tryItOut("{if(prototype.yoyo()) { if (let (__proto__) (__proto__)) {switch(null) { default: {yield; }break;  }/*for..in*/for([__parent__, prototype] = undefined in [,,z1]) \t{gc()throw __parent__; } } else if(constructor = prototype) {; }} }");
tryItOut("throw <x><y/></x>;");
tryItOut("if([,].unwatch(\"__proto__\")) { if ( /* Comment */\n__iterator__ = <x><y/></x>) {{; } } else L: gc()}");
tryItOut("if(<x><y/></x>.valueOf(\"number\").unwatch(\"__parent__\")) { if ((this.__defineGetter__(\"__iterator__\", new ( '' )()))) /*for..in*/for(var __proto__ = constructor = -1.yoyo(\nwindow) in (yield undefined)) return; else {(null); }}");
tryItOut("yield;");
tryItOut("if(new Date(<><x><y/></x></>, <x/>)) { if (({ constructor: <x/>, __parent__: __proto__ }) = [,,z1]) ; else default: var __iterator__ = <x/>;break; {<y><z/></y> }break; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in <x/>) {return *::*; }");
tryItOut("with({}) let([prop] = [11,12,13,14].some, __iterator__ =  /x/ ) ((function(){throw StopIteration;})());");
tryItOut("throw StopIteration;");
tryItOut("M:while((__parent__ = new (<><x><y/></x></>)(3.141592653589793, <x/>)) && 0){gc() }");
tryItOut("let ([]) { if(window) { if (( ''  >>= function ([y]) { })) {break ; }} else { /x/ ; } }");
tryItOut("L:with({__noSuchMethod__: Error( \"\" , undefined) |= prop.__count__ = this})return false;");
tryItOut("M:if(<y><z/></y>) { if (<x/>) -3/0; else {yield; }}");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in __iterator__) yield;");
tryItOut("if(<><x><y/></x></>) {yield *; } else {const constructor;__parent__; }");
tryItOut("export constructor;");
tryItOut("L\r: {gc() }\n");
tryItOut("if(({}())[(#1=({__noSuchMethod__: <x><y/></x>}))]) {yield;export __parent__; } else  if (new (eval(\"export *;\", 5.0000000000000000000000))()) {{} }");
tryItOut("return;");
tryItOut("/*for..in*/for(const [__iterator__, prototype] = constructor = ((function(y) { yield y; var __proto__ =  /x/ , __parent__;; yield y; })\n.call(<x/>, null)) in prop)  { yield 4. } ");
tryItOut("/*infloop*/for(<x/>.throw(@foo); ([,,z1].*); __count__ = <x><y/></x>) /*infloop*/L:do {{} } while(__count__.__defineGetter__(\"__parent__\", Math.pow) ? [15,16,17,18].map(0.1, *::*) : (yield));");
tryItOut("/*for..in*/for(var 1e+81\f = (__iterator__.propertyIsEnumerable(\"__count__\")) in gc) continue M;");
tryItOut("/*for..in*/for(var prop = [, ] = 1e+81 >>> <><x><y/></x></> | (function ([y]) { })() in <x/>.__defineSetter__(\"prop\", gc)) with({__count__: [ '' .watch(\"__noSuchMethod__\", <><x><y/></x></>) for (__iterator__ in [z1])]})");
tryItOut("/*for..in*/for(var prop = <><x><y/></x></>.__lookupGetter__(\"prop\") in *::*) L:with({__parent__: null.__lookupSetter__(\"__parent__\")}){let __parent__ = this;__parent__; }");
tryItOut("L: \n");
tryItOut("/*for..in*/for(var __proto__ in (([1,2,3,4].slice)([z1,,] > undefined))){; }");
tryItOut("/*for..in*/M:for(let [__iterator__, constructor] = (<x><y/></x>.(#3={a:#3#})) in (<x><y/></x> >>>=<><x><y/></x></>)) M:if(<x/>) { if (<><x><y/></x></>) {const __iterator__ = *;; }} else {throw #3={a:#3#}; }");
tryItOut("/*infloop*/do (__count__).watch\nthrow <x>/*\n*/<y/></x>; while(constructor.(({a1:1})) :: (<x><y/></x>)(*, null));");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in prop) return\nwhile((constructor) && 0){continue M;<x><y/></x>; }");
tryItOut("-3/0;");
tryItOut("/*infloop*/while(1.3.yoyo((yield (\n<x/>)) >>= let (__iterator__ = false.__defineSetter__(\"prop\", function ()window)) [,,]))/*for..in*/M:for(let __parent__.constructor in \f((function (constructor, prototype) { const __iterator__ = <><x><y/>\f</x></>; } )({}))){gc()[1,2,3,4].map }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in this) {throw window;throw prototype; }");
tryItOut("return;");
tryItOut("if(new Boolean(typeof  '' , *::*)) {__parent__;yield [,,]; } else ({}).hasOwnProperty");
tryItOut("do let (__iterator__) { switch(({a1:1})) {  { export *; }  } } while((yield (1.3 |= <x><y/></x>)) && 0);");
tryItOut("M:while((eval(\"<><x><y/></x></>\", #1=[#1#])) && 0){throw null;break ; }\nL: {{yield *;<y><z/></y> } }");
tryItOut("((<y><z/></y>).watch).callyield 033;");
tryItOut("M:if(((<><x><y/></x></>)[*()])) { if (new ( '' )()) {continue ; } else { }}");
tryItOut("/*for..in*/for(prototype in <x/>) yield <><x><y/></x></>;");
tryItOut("switch() { default: break; case window.watch(\"prop\", Function) .@ <y><z/></y>.watch(\"__noSuchMethod__\", <y><z/></y>): ;break; /*for..in*/for(var prop = *::* in *) <><x><y/></x\f></>\nbreak; case 3: let ( { export __proto__; }  = false) { window; }break;  } const prototype\n");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *) export __noSuchMethod__; } while((\n<x/>.unwatch(\"__parent__\").__defineSetter__(\"__iterator__\", window).hasOwnProperty(\"__parent__\")) && 0);");
tryItOut("return ({__count__ getter: <x><y/></x>.__lookupSetter__(\"__parent__\"),  get prototype()<><x><y/></x></>.yoyo(<><x><y/></x></>++) });");
tryItOut("/*for..in*/M:for(let __noSuchMethod__.__parent__ in ((Math.sin)(new prop.constructor(false.propertyIsEnumerable(\"setter\")))))gc()");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(__iterator__ in ((new  /x/ )(((++arguments).isPrototypeOf(new Object(this, *::*)))))){{}return *::*; }");
tryItOut("/*for..in*/for(let prototype.\t((p={}, (p.z = @foo)()))['__noSuchMethod__'] in (undefined.unwatch(\"__iterator__\") < ([__proto__ if (this)]))) {{yield;export *; }L:if(constructor.__noSuchMethod__ = (function (__iterator__, __iterator__)[]).call(true, 1e4)) \fL:with(prototype){return 1.2e3; } else  if (++[<x><y/></x>]) gc() else {export *;export *; } }");
tryItOut("with(false) for each (__noSuchMethod__ in #3={a:#3#}) for each (__proto__ in <x><y/></x>) const prop;return (uneval(__proto__ = constructor));");
tryItOut("while((let (prop = [[]], __noSuchMethod__ = 0x99)  \"\" ) && 0){return;const __count__ = try { /*infloop*/for( /x/ ; <x/>; <><x><y/></x></>) return; } catch(function::__parent__ if (function(){try { throw  '' ; } catch(__parent__) { __parent__ = false, __count__ =  '' ; } })()) { with({}) try { ; } finally { try { throw *::*; } finally { {} }  }  } catch(__proto__) { for(let y in []); } finally { let(constructor, prop = prototype) { let(__noSuchMethod__) { {} } ; }");
tryItOut("/*infloop*/for(__proto__ = 'fafafa'.replace(/a/g, Math.pow); undefined.valueOf(\"number\"); <x><y/></x>) {throw {}; }");
tryItOut("(__proto__).call(__noSuchMethod__ = try { {} } catch(prototype) { break M; } finally { let __parent__; }  === undefined--, prop.__proto__ = constructor)");
tryItOut("{[1,2,3,4].mapgc() } const __noSuchMethod__;");
tryItOut("return .@foo(/;");
tryItOut("if((@foo for (__count__ in null)).hasOwnProperty(\"__iterator__\")) { if (({constructor: prop})) {return undefined; }} else {1.2e3;/*for..in*/L:for(let __proto__ in prototype) let __proto__ = [,,z1], __count__ = 033; }");
tryItOut("do {eval } while(((let (constructor = [[1]], __parent__) ({a1:1}))\f) && 0);");
tryItOut("if(function(id) { return id }) prototype else yield prop\n");
tryItOut("/*infloop*/\tM:for(let __noSuchMethod__ = __noSuchMethod__ = this.zzz.zzz; ( /* Comment */<y><z/></y>.__proto__); __iterator__ = (({__iterator__: this }))) return;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = __noSuchMethod__ in (function ([y]) { })().__count__ = 0x99) throw <><x><y/></x></>;\n;\n");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("do let prop; while((false) && 0);");
tryItOut("/*for..in*/for(__count__ in #3={a:#3#} % [,] < (function (__parent__, __noSuchMethod__) { {} } ).call(0/0, *)) ((new <y><z/></y>));");
tryItOut("export *;");
tryItOut("/*infloop*/for(; (((function(y) { yield y; throw <><x><y/></x></>;; yield y; }).call).call(__count__ = null, __count__ = arguments, <x><y/></x>)); <><x><y/></x></>.unwatch(\"prototype\")) {/*for..in*/M:for(var [let, prop] = <><x><y/></x></> in false) return;let (function::__proto__ = 0, __count__) { break ; } }");
tryItOut("export *;");
tryItOut("switch(@foo === __noSuchMethod__.__defineGetter__(\"__noSuchMethod__\", eval).valueOf(\"number\")) { default: let prototype;break;  }");
tryItOut("yield -1;");
tryItOut("/*infloop*/for(var [] = ((constructor.__defineGetter__(\"__proto__\", (true).watch)).watch(\"__parent__\", Function)); +this.zzz.zzz *= [( :: this)].sort(<><x><y/></x></>).throw(\nnull); __noSuchMethod__) {L:while((new (<x/> - window).propertyIsEnumerable(\"__count__\")(yield __iterator__.prototype)) && 0){/a/gitry { export *; } catch(__noSuchMethod__ if <><x><y/></x></>) { var constructor = 1.2e3, prototype; } catch(prop if false) { yield 0.1; } finally { return; }  } }");
tryItOut("for(let y in [5,6,7,8]) return (break ++)[this]");
tryItOut("L:if(\nwindow) { if ((({a2:z2}) >>> *::*)) ;} else export *;");
tryItOut("L: {export constructor;{} }");
tryItOut("/*for..in*/for(var [__parent__, yield] = new eval(@foo, <x><y/></x>) in  /x/ ) {break ; }");
tryItOut("{let (prop, __count__ = <><x><y/></x></>) { return this; }Math.pow } const __iterator__;");
tryItOut("const __count__ = undefined;\nthrow __proto__;\n");
tryItOut("{}");
tryItOut("propif((this.zzz.zzz.__defineGetter__(\"__proto__\", eval(\"/*infloop*/L:for(prototype__iterator__ = <><x><y/></x></>, prototype; false; [z1]) {return; }\", <y><z/></y>))).\t__defineSetter__(\"constructor\", (1 for (x in [])))) {/*infloop*/L:do {((new Function(\"<><x><y/></x></>;\"))).call; } while('fafafa'.replace(/a/g, function(y) { yield y; (<><x><y/></x></>);; yield y; })); }\r");
tryItOut("do {export __noSuchMethod__;return; } while(((uneval( /x/ ))) && 0);");
tryItOut("{*;gc() }");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></>.hasOwnProperty(\"constructor\")) gc()");
tryItOut("/*for..in*/for(var __parent__ in (((function(y) { yield y; M:if(*) {;\f } else  if ((function ([y]) { })()) Math.pow; yield y; }).call)([15,16,17,18].map(/a/gi, *).hasOwnProperty(\"__noSuchMethod__\")))){return false;; }");
tryItOut("L: prop, __proto__");
tryItOut("do /*for..in*/for(let __noSuchMethod__ = (({ __iterator__: __iterator__\n }) = <x><y/></x>) in this += -1) <ccc:ddd><x><y/></x><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd> while((({ __proto__: __iterator__, __parent__: __noSuchMethod__ }) = this.zzz.zzz) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x>['__parent__'] in <><x><y/></x></>) {return #3={a:#3#};0x99; }");
tryItOut("while((({ get __proto__(prototype, each) { throw @foo; }  }) if (<><x><y/></x></>) !== __iterator__.constructor getter= gc++) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in this) { } }");
tryItOut("L: {<><x><y/></x></> }");
tryItOut("{if(constructor + <y><z/></y>) let __count__ = 3.141592653589793, prototype; else prototype = @foo, __count__;/*infloop*/do {export *;return; } while(<x/>); } const __count__;");
tryItOut("if() return; else  if (<><x><y/></x></>.__lookupGetter__(\"__iterator__\")) throw <x><y/></x>; else {yield;return; }");
tryItOut("while(((({a2:z2}) *= this)) && 0)throw __noSuchMethod__;");
tryItOut("{return 'fafafa'.replace(/a/g, eval);__noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("return;");
tryItOut("return  /x/ ;/*for..in*/for([__parent__, __parent__] = ({ __iterator__: constructor }) = eval(\"this\", __parent__) in <><x><y/></x></>) const __noSuchMethod__ = 1e4, constructor = __iterator__;");
tryItOut("switch((eval(\"undefined.eval(<x><y/></x>)\", yield).prototype)) { case ( ''  ? 1e-81 : null.__proto__): break;  }");
tryItOut("/*infloop*/for(({ prototype: __count__ }) = ({constructor: __count__, prototype: *::*.unwatch(\"constructor\") }); Boolean(<y><z/></y> + window); try { export *; } catch(prop) { gc() } ) let __noSuchMethod__, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (<x><y/></x>)(null) in ({a2:z2})) break L;");
tryItOut("L:if(new gc(__parent__ = <><x><y/></x></>)) ; else  if ( /* Comment */<><x><y/></x></>.@foo) {/*infloop*/M:for(function ([y]) { }; false; <y><z/></y>) const __proto__ = {}, get;break \f;\n\n } else /*infloop*/for(<><x><y/></x></>; <x/>; false) {__proto__ = *::*((1 for (x in []))).call }");
tryItOut("if(({ prototype: __proto__, prop: prop })\f = null .@x:: null) {/*for..in*/for(let __count__ =  /x/g  in this) {yield <x><y/></x>;gc() }//h\n } else /*for..in*/for(__proto__ in <x/>) {yield @foo; }");
tryItOut("yield ((((p={}, (p.z =  '' )())))(constructor = <><x><y/></x></>, <y><z/></y>)[[15,16,17,18].some(/a/gi, <x><y/></x>)]);");
tryItOut("yield this;");
tryItOut("L: return  /x/ \n");
tryItOut("for(let y in [5,6,7,8]) L:if((<x><y/></x> %  \"\" )) Math.pow else  if (this) {yield false; }");
tryItOut("L:if(delete.getter setter= (new Function(\"/a/gi\"))) {__iterator__ = *::*, prototype; } else  if ((new ({ prop: __count__, __count__: __proto__ }), constructor()[( /* Comment */(constructor.__count__ = -0))])) __noSuchMethod__: 0.1 else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in prop) {export __iterator__; }case 4: break; break; {}break; break; case 6: break; ");
tryItOut("throw StopIteration;");
tryItOut("constructor = constructor;");
tryItOut("yield prop;");
tryItOut("/*for..in*/M\t:for(var function::__proto__ = <x/>.__count__ in (#0=0[<><x><y/></x></>])) {gc()export constructor; }");
tryItOut("/*infloop*/M:for(+<x/>; new <x/>(<><x><y/></x></>, arguments); new (<x><y/></x>)()) prop, __noSuchMethod__;[({ <y><z/></y>: ({ __iterator__: [<y><z/></y>] }), prop: function::__iterator__ }) for (constructor in -1)]");
tryItOut("/*infloop*/for(let __parent__; (<y><z/></y> || @foo); <y><z/></y>) let __proto__ = @foo, __count__ = <x/>;");
tryItOut("{return *; }");
tryItOut("{/*infloop*/for((); __parent__.(<y><z/></y>); let (__noSuchMethod__, __iterator__) *::*) yield;const __noSuchMethod__ = @foo\f; }");
tryItOut("with({}) { yield ({__parent__: __count__ }); } ");
tryItOut("if(__parent__) throw __proto__\n");
tryItOut("yield  '' ;\n<x/>;\n");
tryItOut("L:if() { if (((function ([y]) { })())()) const return <x><y/></x>;, prototype = <><x><y/></x></>; else eval;}");
tryItOut("yield (4. == prototype);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) { }\n/*for..in*/M:for(const [__count__, __noSuchMethod__] = __iterator__ in __count__ = arguments) ;\n");
tryItOut("M:if(++__noSuchMethod__.__iterator__ = <y><z/></y>) { if ((function(q) { return q; }(*))) throw  '' ;} else gc()");
tryItOut("{}\nconst __count__, prototype = ({a2:z2});");
tryItOut("(1.3); const \nprop;");
tryItOut("/*for..in*/for([__count__, prototype] = ([15,16,17,18].filter(function (constructor, constructor)function (prototype) { {} } , *::*)) in function(id) { return id }) {\fexport __iterator__; }");
tryItOut("return;");
tryItOut("/a/gi");
tryItOut("while((this) && 0)export __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.constructor in *) /a/gi");
tryItOut("/*for..in*/L:for(const constructor = return <y><z/></y>; in prototype) {yield; }");
tryItOut("/*infloop*/for(const prototype; undefined.@foo.__lookupSetter__(\"prototype\"); ((p={}, (p.z = false.__proto__ = (((*::*).watch) + ++033)--)()))) {throw StopIteration;; }//h\n");
tryItOut("3");
tryItOut("{{}yield; }");
tryItOut("let (__proto__ =  \"\" ) { export __noSuchMethod__; }");
tryItOut("prototype = __proto__;");
tryItOut("return ([].propertyIsEnumerable(\"yield\"));");
tryItOut("<!--yy-->");
tryItOut("{with({yield: prop =  '' }){var __proto__, __count__;; } }");
tryItOut("if(prop = ({ (__count__): ({ __count__: [] }), constructor: [__count__] })) {while((({ __iterator__: constructor }) = <><x><y/></x></>) && 0)\t{/*infloop*/while( \"\" ){var __parent__; } } }");
tryItOut("return\n");
tryItOut("/*infloop*/do {{} } while(0.1);");
tryItOut("/*for..in*/for(const __parent__ in (((1 for (x in [])))( /x/g ))){throw __noSuchMethod__; }");
tryItOut("/*for..in*/\tM:for(var __proto__ = (new /a/gi(__noSuchMethod__ <<= function ([y]) { }, [,]) for each (__proto__ in @foo) for (__iterator__ in <x><y/></x>) for each (__parent__ in *;)) in [(({__count__: *})) for each (__count__ in <x><y/></x>) if ( /x/g )]) with({__iterator__: <><x><y/></x></>.__iterator__})return <x><y/></x>;");
tryItOut("/*infloop*/for(__iterator__; @foo; Number()) {let __count__ = window, prototype; }(3 ?  /x/g  : <x/>);");
tryItOut("if((function::__parent__)) /*infloop*/L:do return  \"\" ; while(<><x><y/></x></>); else  if ('fafafa'.replace(/a/g, window)) {} else ;");
tryItOut("/*infloop*/while(({a2:z2})){( '' )\nyield;yield\n const __proto__; }");
tryItOut("yield @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__proto__) in false) prototype;");
tryItOut("{L: export __noSuchMethod__; }");
tryItOut("/*for..in*/for(let  \"\"  in ((Math.pow)((__parent__)-= /x/ .unwatch(\"__parent__\"))))return;");
tryItOut("do {<><x><y/></x><\t/>;let __iterator__, prop; } while((undefined) && 0);");
tryItOut("/*for..in*/L:for(let constructor = [function(q) { return q; }(prototype, *)] in ( /* Comment */({a1:1}))) {throw __parent__; }");
tryItOut("/*for..in*/for(const __parent__ in new (({a1:1}))(<><x><y/></x></>, 1e4)) {__proto__ = setter;\t }");
tryItOut("if(this.zzz.zzz.propertyIsEnumerable(\"__proto__\")) { if (((*)(false, <><x><y/></x></>)) - x::__iterator__.hasOwnProperty(\"__proto__\")) yield else const __parent__, constructor;}");
tryItOut("/*for..in*/for(var __count__ in ((true)(@foo)))1e81;{/*for..in*/for(const __parent__ = (prop = window) in <x><y/></x>) export * }");
tryItOut("/*infloop*/L:for(var (-1) = ({ prototype: ({ prototype: prop, __count__: __count__ }) }) = #1=[ /x/g ] , ({prop: *}); ({__noSuchMethod__ getter: function  prop (__proto__, __parent__) {  } , prototype setter: true ? * : <><x><y/></x></> }); ((<x><y/></x> instanceof <><x><y/></x></>) >= #1=[#1#] ? <y><z/></y> : 3)) { '' ;while((<><x><y/></x></>) && 0)<x><y/></x>; }");
tryItOut("/*for..in*/for(const constructor in ((Math.sin)(__iterator__ !== <><x><y/></x></>))){export __parent__; } const __proto__;");
tryItOut("if(throw this) {export prop; } else  if (__proto__) { } else {yield <x><y/></x>;{} }");
tryItOut("L: switch(true) { default:  }");
tryItOut("with({}) { try { {} } catch(__iterator__ if [11,12,13,14].sort) { {} }  } ");
tryItOut("/*for..in*/L:for(var __iterator__ = prop in [(undefined <=  /x/ ) if (window)].throw((1.3.__defineSetter__(\"prototype\", <x><y/></x>)))) let [], __count__;");
tryItOut("L:if(([undefined].sort(({}).hasOwnProperty))) return null;");
tryItOut("{if((+'fafafa'.replace(/a/g, function  __iterator__ () { yield <y><z/></y> } )) in (<x><y/></x>())) {prototype;if( /x/ ) {export *; } else  if (<><x><y/></x></>) throw null; } else  if (prototype%=prop) {throw <x/>; } else {export *;var __count__ = <><x><y/></x></>; } }");
tryItOut("/*infloop*/M:do const __noSuchMethod__; while(<><x><y/></x><//*\n*/>);");
tryItOut("/*infloop*/M:for(var constructor; (0x99 /= <y><z/></y>); prop.__count__ setter= <y><z/></y> for each (__count__ in <x><y/></x>)) {with([[window].filter(Math.pow) for ((<x><y/></x>)(window) in *::*) if (window)]){export *; const function::__iterator__;{} }export *\n }");
tryItOut("yield\n");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __proto__] = ([15,16,17,18].some(new Function, [1])) in ((__count__ = constructor).hasOwnProperty(\"__iterator__\")), ({ set this __count__ () { while((<y><z/></y>) && 0){<x><y/></x>;let __proto__ = this, prototype = <x><y/></x>; } } ,  get prototype x::__iterator__ (__parent__, __noSuchMethod__) { return new ([1,2,3,4].map)(<x><y/></x>) }  })) {if([z1,,]) {export __proto__;{} } else  if (*::*) gc() }");
tryItOut("M:with({prop:  /x/ })({ __proto__: ({ __noSuchMethod__: ({ prototype: __proto__, x::__iterator__: prop }), prop: [__parent__, , __noSuchMethod__] }) })");
tryItOut("/*for..in*/for(const eval(\"(p={}, (p.z = [[1]])()) | prop >> *::*.*\", this.__defineGetter__(\"set\", 'fafafa'.replace(/a/g, [1,2,3,4].slice))) in (('haha'.split)(+(@foo.hasOwnProperty(\"__count__\")) * (new Function).call(<x/> ? window : window,  /x/ , 4.)))){return;yield <y><z/></y>;\nthrow [z1,,];\nyield <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for([function::__count__, __iterator__] = (Math.sin).call(+(new (Math.sin)( \"\" )), (let __proto__ = false, __proto__)) in (<><x>\t<y/></x></>\t - __iterator__)) __noSuchMethod__ = false;");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = <x/> in \t<><x><y/></x></>) {(constructor); }");
tryItOut("switch(__parent__.__noSuchMethod__ = __noSuchMethod__) { default: break;  } const prop;");
tryItOut(" = (function ([y]) { })(), prototype; const __iterator__;");
tryItOut("if(<y><z/></y>) ([15,16,17,18].some(( \"\" ).watch,  /x/g )) %= false.hasOwnProperty(\"__count__\") else  if (__iterator__ = *::*) {yyy } else ");
tryItOut("/*infloop*/for(let __noSuchMethod__ = new <><x><y/></x></> === window([]); -0; {null }.@foo.isPrototypeOf\f(__noSuchMethod__ = 1e4)) {const __iterator__, prop\n }");
tryItOut("if(__count__) { if (new (Function)()) break ;} else {export __iterator__; }");
tryItOut("/*infloop*/L:do const setter, __count__; while(<x><y/></x>.__count__)");
tryItOut("(constructor);");
tryItOut("with({__count__: new /a/gi(*::* ? -1 : <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__), ({prop: (prop = null), __parent__: false }))}){break ;return *::*; }");
tryItOut("with({}) { const constructor; } ");
tryItOut("let (__parent__, __iterator__ = Function) { ; }");
tryItOut("/*infloop*/for(var constructor; [__iterator__ -=  \"\" ]; <><x><y/></x></>.throw(arguments).yoyo(<><x><y/></x></>\n)) if(window) { if (<y><z/></y>) {break ;; }} else {function(id) { return id };return; }\nreturn [z1,,];\n");
tryItOut("if(\f<><>*::*.isPrototypeOf(<><x><y/></x></>)</></>) {}");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/L:for([[]]; *.yoyo(<><x><y/></x></>) >= __iterator__; (arguments < *::*)) {let __parent__ =  '' , prop = -0; } const __proto__;");
tryItOut("/*for..in*/for((new window()) in ((function  __count__ (__proto__) { ; } )(__parent__.(<x><y/></x>.(__iterator__)))))const constructor = [], prototype = <><x><y/></x></>;");
tryItOut("M:switch('fafafa'.replace(/a/g, (1 for (x in [])))) { default: const __parent__, __proto__;do throw this; while(((function  __iterator__ (__count__) { return window } )((true), 0)) && 0);case 1: break; {}case this.__defineSetter__(\"__parent__\", yield <y><z/></y>): throw <><x><y/></x></>;case ({ __count__: prop, __proto__: __parent__ }) = prop: export *;return;break; break; case 1: if(<y><z/></y>) { if (this)  else {__parent__;yield; }} }");
tryItOut("/*infloop*/while(<xxx {__noSuchMethod__}={false} />.unwatch(\"__count__\"))export prototype;");
tryItOut("export __proto__\n");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("export *;");
tryItOut("/*infloop*/while(({__parent__:  /x/ .__lookupGetter__(\"__noSuchMethod__\", prop: (<x><y/></x> in @foo) }))/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__ in __noSuchMethod__) yield true;");
tryItOut("/*infloop*/for(var __noSuchMethod__ = __proto__; this; <><x><y/></x></>) __count__");
tryItOut("if(\n /x/ ) {export __proto__;if(null) {continue ;export __iterator__; } } else  if ((__count__ for each (__count__ in <x><y/></x>))) {switch(0/0) { default: if( for (<x><y/></x> in window)) { if (null) {[1,2,3,4].slice }} else yield <x><y/></x>;yield;break; case 6: var prototype = null;case case 0: : yield;throw this;break; break; gc()case 5: falsecase 1: {}case false: gc()break; case <><x><y/></x></>: export *;throw <><x><y/></x></>; }; }");
tryItOut("/*infloop*/M:do var function  __iterator__ (__iterator__) { \fyield [z1,,] } , __parent__; while((({__parent__ getter: 4. })));");
tryItOut("/*infloop*/for(const __noSuchMethod__ = @foo; __noSuchMethod__; <x><y/></x>) {(this);const __parent__ = <><x><y/></x></>, __parent__ =  /x/ , prototype = <x><y/></\fx> = window; }");
tryItOut("if(__count__.__proto__) { if (__iterator__ = constructor) if(prototype) { if (<><x><y/></x></>) {yield;export *; }} else {return;yield; } else {return -1; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <y><z/></y>) return window");
tryItOut("L:if((__noSuchMethod__.yoyo(null))([11,12,13,14].filter, new ('haha'.split)())) if(({a2:z2}) @ <x/>) {return;yield window; } else  if (3 @ window) throw undefined; else export constructor; else  if (((uneval(*)))) {return;break ; }");
tryItOut("; const constructor;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in (((new Function(\"break L;\")))((eval(\"true\", (p={}, (p.z = <><x><y/></x></>)()))))))export __iterator__");
tryItOut("");
tryItOut("L:if(((yield this) |= <x/>)) {throw <><x><y/></x></>; const __noSuchMethod__;gc() } else  if ((Number(<><x><y/></x></> === <><x><y/></x></>((1e-81) && let (__noSuchMethod__, constructor = ({a1:1})) prototype: <><x><y/></x></>)))) {L:if((prop.valueOf(\"number\"))) {([[1]]);export __noSuchMethod__; } else  if ( /x/g ) <x><y/></x>; } else {do {yield; } while((window) && 0);return; }");
tryItOut("/*for..in*/for(var prototype in this.__defineGetter__(\"prototype\", (({}).hasOwnProperty).call)) with({__count__: #3={a:#3#} == 3.hasOwnProperty(\"prototype\")}){yield <x/>; }");
