tryItOut("/*infloop*///h\nfor(prop = ([0.1.hasOwnProperty(\"__noSuchMethod__\")]);  set ({ __proto__: [], __noSuchMethod__: ({ __count__: ({ prop: constructor, prototype: __count__ }), prototype: ({ __parent__: __count__, __proto__: __parent__ }) }) }) __noSuchMethod__['__count__'] (({ __iterator__: ({ prototype: __noSuchMethod__ }), __iterator__: prototype })) { return [[]] } ; (p={}, (p.z = *)())) {export *; }");
tryItOut("function () { return *::* } ");
tryItOut("\n");
tryItOut("const __parent__ = -3/0; const __proto__; const prop;");
tryItOut("prototype = 1e4\nL:if(<x><y/></x>[this]) {<x><y/></x>;({}).hasOwnProperty } else  if (yield <x><y/></x>) {yield;let __count__ =  \"\" ; } else {throw  \"\" ;break M; }\n");
tryItOut("/*infloop*/\rwhile(__proto__ = (export __parent__))\fif(<><x><y/></x></> === (null[this])) { if (__count__ = window.__lookupGetter__\t(\"__count__\")) return; else {return undefined;return false; }}");
tryItOut("with({__count__: ([[1]] , null)}){return <><x><y/></x></>;return  '' ; }");
tryItOut("/*for..in*/for(const constructor in (window & window) ? let (function::prop) <x><y/></x> : (this.__defineSetter__(\"__noSuchMethod__\", new Function))) {const __count__ = window;{} }");
tryItOut("return <x><y/></x>.__defineGetter__(\"constructor\", function(q) { return q; });");
tryItOut("L:if( /x/ .hasOwnProperty(\"prop\")) { if ((#1=[#1#][<><x><y/></x></>])--) throw true; else let __noSuchMethod__, __count__ = function::prop;}");
tryItOut("let(__proto__) ((function(){if(new eval(*::* >>  \"\" , this)) { if (*::* = - \"\" .__defineSetter__(\"__noSuchMethod__\", undefined)) { }} else {gc()export *; }})());");
tryItOut("/*infloop*/for(var getter = (function(q) { return q; }).call(constructor *= * |= this.__defineSetter__(\"__iterator__\", /a/gi), <><bbb xmlns=\"<><x><y/></x></>\">yyy</bbb></>).propertyIsEnumerable(\"__proto__\"); ((yield <><x><y/></x></>) for (\fprop in \r<x><y/\t></x>) for each (__iterator__ in true) for (__iterator__ in  '' )); prop = 3.141592653589793) {if(__noSuchMethod__) { if (.2\n) throw undefined; else {export *; }} }");
tryItOut("/*infloop*/for(let constructor; \n '' ; ({a1:1})) gc");
tryItOut("L:\fif((uneval(true <= __iterator__))) {let prop =  /x/g , __proto__ = @foo;let prop = prototype, __count__; } else  if (<><>yyy</></>) {prop;yield; }");
tryItOut("((yield @foo.throw(prototype)))((-0)) = __iterator__;");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (<x/> * <x><y/></x>)) {if(1.2e3) yield <x/>; else  if (<x><y/></x>) ; else gc()gc()/*for..in*/M:for(const [__noSuchMethod__, __proto__] = ~<x><y/></x> in __iterator__ = true) {} }");
tryItOut("L: {1.3;let function::__count__; }");
tryItOut("/*infloop*/while(({ prototype: __count__ }) = *){*::* }");
tryItOut("( '' );");
tryItOut("do {let prototype =  \"\" ; } while((([,,z1] >>>=window)) && 0);");
tryItOut("let (constructor, __iterator__) { return; }");
tryItOut("with({prop: (this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split))})Math.pow");
tryItOut("/*infloop*/M:for(<><><xxx {__noSuchMethod__}={(typeof <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\"))} /\t></></>; __count__ = 1.3.watch(\"__noSuchMethod__\", function () { ; } ); (yield <><x><y/>\r</x></> in [15,16,17,18].filter(function (({ __count__: __proto__, prototype: prop })) { return ({__count__(/: 1.2e3 }) } , true))) {while((1e+81 >= __iterator__) && 0){yield;/*infloop*/do {const 1e81; } while( /x/ ); }prop = prototype; }");
tryItOut("if(<><x><y/></x></> :: __parent__) { if ((({a2:z2})).__defineSetter__(null.__lookupGetter__(\"prop\"))) export __iterator__;} else export *;");
tryItOut("/*for..in*/for(const -1.__parent__ in <><x><y/></x></>) gc()");
tryItOut("return (<x/>\n); const constructor;");
tryItOut("/*for..in*/for(var __proto__.__count__ in undefined) break L;");
tryItOut("{L:if(((function (constructor) { yield <x><y/></x> } ).apply)) yield (this(this, <><x><y/></x></>)); else  if (__noSuchMethod__ = [,]) switch( /* Comment */arguments) { case <><x><y/></x></>.unwatch(\"prop\"): break;  } else throw StopIteration; }");
tryItOut("for(let y in []);");
tryItOut("if(true.@foo = (([[1]])[undefined])) { if (__count__ = (Math.pow).call(__parent__ = [,], null ? 1e+81 : <x/>, [,,])) {__count__ = window, __parent__;/*for..in*/L:for(constructor in 033) throw __proto__; }} else yield -1;");
tryItOut("switch(this) { case __count__: break; break; {}break;  }");
tryItOut("let ([constructor(false), __iterator__, , ] = 3/0, ({ __proto__: ({ __parent__: __count__, prop: __proto__ }), constructor: [] }) = prototype.prop setter= function  prototype (__proto__)constructor) { __parent__ = prop; }");
tryItOut("yield 5.0000000000000000000000;");
tryItOut("/*infloop*/L:for(var ({ __parent__: constructor, constructor: ({ __count__: __count__, __noSuchMethod__: delete }) }) = prop: #2=__noSuchMethod__ = <x><y/></x>; new Error( '' .__lookupSetter__(\"__iterator__\")); <xxx {function::__proto__}={{}} />) yield;");
tryItOut("{({}).__lookupGetter__ }\n");
tryItOut("/*infloop*/while(this + <><x><y/></x></>.__lookupSetter__(\"__parent__\"))break ;");
tryItOut("if(('fafafa'.replace(/a/g, ([__iterator__.(({a1:1}) ? <x><y/></x> : false)])))) {yield -3/0; }");
tryItOut("getter = __iterator__;");
tryItOut("/*infloop*/while([15,16,17,18].sort((new Function(\"export __proto__;\")), this))-");
tryItOut("if(<><x><y/*\n*//></x></>.__defineGetter__(\"prop\", function(y) { yield y; (<x><y/></x>);; yield y; }) << ({ __count__: constructor }) = -1.__iterator__) { if (\tthis.__defineGetter__(\"__count__\", eval)) /*for..in*/for(const __count__ = eval(\";\", __count__.prototype) in <><x><y/></x></>) prop} else ");
tryItOut("let(prototype = (yield (<><x><y/></x></> >>>=false))) { prop = ;");
tryItOut("__proto__ = __parent__;");
tryItOut("if(<><x><y/></x></>) { if (<><x><y/></x></>) {export *; } else ;}");
tryItOut("(<y><z/></y>); const prototype;");
tryItOut("if([1] for each (__proto__ in prop)) {export *; } else default: case 8: break; yield;break; case  /x/ : case 9: case 4: break; case __proto__: case <><x><y/></x></>: const prototype, __noSuchMethod__ = <x><\ry/></x>;break; case __count__: (<y><z/></y>);;");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = yield <y><z/></y> in 1.3) ");
tryItOut("{}");
tryItOut("{\tcontinue \ndo {default: return; } while(( '' ) && 0);{{} } }");
tryItOut("let(({ constructor: __noSuchMethod__, __iterator__: ({ __noSuchMethod__: __iterator__ }) })) ((function(){return;})());");
tryItOut("with(this.__defineGetter__(\"__iterator__\", (<xxx>{__iterator__}</xxx>.((typeof <bbb xmlns=\"<y><z/></y>\"> </bbb>))).watch)){}\nyield;\n");
tryItOut("{}");
tryItOut("/*for..in*/L:\ffor(var yield [,,z1]['getter'] in ((({}).hasOwnProperty)((prop = window)))){}");
tryItOut("/*for..in*/for(__count__ in (((new Function(\"return <y><z/></y>(constructor, __noSuchMethod__);\")))((__parent__.isPrototypeOf((__iterator__ = <><bbb xmlns=\"-0\"></bbb></>)))))){throw false;throw *::*.__defineSetter__(\"prop\", function(q) { return q; }); }");
tryItOut("L:if(undefined) { if (1e-81) {var __noSuchMethod__, constructor = true; }} else yield [1];");
tryItOut("/*for..in*/for(const __parent__ in (((new Function(\"/*for..in*/for(let [__parent__, ] = *\\n in (RangeError(constructor.__parent__, (__iterator__.__iterator__ setter= <x/>)))) {export *; }\")))((((__noSuchMethod__ = 0).watch(\"__parent__\", (new Function(\"export *;\"))).hasOwnProperty(\"__iterator__\")).constructor = ((<x><y/></x>.(<x/>)).__noSuchMethod__ = *::* ? __proto__ : window += (#3={a:#3#}.propertyIsEnumerable(\" set __iterator__()null\")))))))__iterator__ = __parent__;");
tryItOut("M:with({__iterator__: 0x99}){let prop, constructor = {}; }");
tryItOut("{break ; }");
tryItOut("while((false) && 0)");
tryItOut("L: {{} }");
tryItOut("switch(false) { default: break;  }");
tryItOut("\n/*for..in*/for(__iterator__ = ({__iterator__ getter: \t'haha'.split }).__defineSetter__(\"try { let(__parent__ = __iterator__, constructor) ((function(){var __parent__, __iterator__;})()); } finally { throw <x><y/></x>; } \", ((#3={a:#3#}.eval(-3/0))).watch) in new (new Function)([,,]\f.__lookupSetter__(\"__proto__\"))) {{var __proto__, let =  '' ;({}).hasOwnProperty } }\nM:with(({__iterator__: (prop.prototype)})) '' \n");
tryItOut("gc()");
tryItOut("/*infloop*/do {L:switch( /* Comment */#3={a:#3#}) { default: break; case ( \"\" ).call(window, <x/>): break;  } } while(eval(\"yield  '' ;\", <x/>)\n);");
tryItOut("/*for..in*/for(let function::prop = (window <<= window) ^ <><x><y/></x>\f</> in (constructor.unwatch(\"__noSuchMethod__\")).prop = (void __proto__).__lookupSetter__(\"constructor\")) {let prototype = *::*;\n(this);\n }");
tryItOut("L: {yield  /x/g ;return; }\n");
tryItOut("/*infloop*/for(let let = <><x><y/></x></>; constructor; <x><y/></x>) yield window;");
tryItOut("let(__count__, __proto__) { throw *;");
tryItOut("/*infloop*/for(let ({ ({ prop: ({ prop: constructor, prop: <><x><y/></x></> }) }): (\f__iterator__), prop: __iterator__ }) = __proto__ *= (function(y) { yield y; prototype;; yield y; })(); (eval(\" '' \", this)); (new ((<x><y/></x>.(true)))())) {return constructor;yield  /x/g ; }");
tryItOut("/*for..in*/for(const [prototype, @foo] = if(this) throw undefined; else  if ( '' ) {yield *::*; } in [15,16,17,18].sort(('haha'.split).apply, this.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>))) /*infloop*/for(var constructor; [11,12,13,14].sort; <x><y/></x> !== <x/>) export *;");
tryItOut("break M;");
tryItOut("if(<><>yyy</></>) return; else  if (([z1,,].yoyo([[1]]))) {const prop;({}).__lookupGetter__ } else {- }");
tryItOut("return;");
tryItOut("/*for..in*/L:for(const <x><y/></x> in  /x/ ) {let prototype = (-0);return; }L:if([,]) ({}).hasOwnProperty");
tryItOut("/*for..in*/for(const [prototype, prop] = (new Number(String(<><x><y/><\f/x></>, ({a1:1})))) in let (prop, __parent__) this) {L:do {yield 0/0;{} } while((<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) && 0);export *; }");
tryItOut("gc()\n");
tryItOut("(prop) = __parent__;");
tryItOut("/*infloop*/for(const __count__; this; null) {break ; }");
tryItOut("with(new ((({}).hasOwnProperty).apply)()){var prototype = true;(1.3); }");
tryItOut("{}");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = setter in [__noSuchMethod__]) (<><x><y/></x>\f</>);");
tryItOut("let (__parent__, prop) { const __noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("with({prop: [[], , ] = constructor}){if(constructor) { if ( /x/g ) throw (-1); else return;}L: export *; }");
tryItOut("if(Function) throw *;");
tryItOut("(prototype);");
tryItOut("/*for..in*/for(var constructor = (<x><y/></x> = <><x><y/></x></> , 0x99 for (__proto__ in ({})) if (<y><z/></y>)) in <><x><y/></x></> &=  /x/ ) {constructor = <x><y/></x>, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in ({__iterator__ getter: Math.pow, __proto__ getter: true.__defineGetter__(\"__parent__\", undefined) })) throw StopIteration");
tryItOut("({__parent__:  \"\" , prop: 1.3 })\n");
tryItOut("{returnyield;\nthrow *;\n }");
tryItOut("throw 1e4;");
tryItOut("{/*infloop*/L:for(__parent__ = __count__; (new new Function(this)); __parent__.( '' )) /*infloop*/for(<><x><y/></x></>; (function ([y]) { })(); false) {{export __noSuchMethod__; } } }");
tryItOut("if(true.__proto__ =  \"\" ) { if (RegExp(<x/>, [,,z1])) return *::*; else return @foo;}");
tryItOut("yield <x><y/></x>;");
tryItOut("if((uneval(-(-1)))) let __proto__ = <><x><y/></x></>, __iterator__ = true; else  if (__noSuchMethod__ = __noSuchMethod__ + (<><x><y/></x></>).call(false,  \"\" , true) ? 5.0000000000000000000000.unwatch(\"__parent__\") : (uneval(null)).valueOf(\"number\")) gc()");
tryItOut("gc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__(<x><y/></x>) in this) {(false);continue ; }\n");
tryItOut(" \"\" ");
tryItOut("if((++<><x><y/></x></>++)) { if ((__noSuchMethod__+=__iterator__ setter: function(y) { yield y; {}; yield y; }))  /x/  else ;}");
tryItOut("/*for..in*/for([__count__, __count__] = @foo.__noSuchMethod__ = __proto__ in *::*) {(function ([y]) { }); }\nexport *;\n");
tryItOut("M:if((__iterator__ = __noSuchMethod__)) M:if(this.watch(\"constructor\", [1,2,3,4].slice)) 'haha'.split else  if (window) {/*for..in*/for(let __noSuchMethod__ in (((new Function(\"break ;\")))(<><x><y/></x></>)))(@foo); }");
tryItOut("/*for..in*/for(const __proto__ in ([this.zzz.zzz;])) /*for..in*/for([, , __noSuchMethod__, ] in ((function(q) { return q; })(constructor ^= [15,16,17,18].filter(function (__parent__, __proto__) { export *; } , (undefined for each (__count__ in 1.3)))))){__noSuchMethod__, __proto__;yield; }");
tryItOut("/*infloop*/for(const ({ __proto__: __count__, __proto__: ({ __parent__: ({ __iterator__: __proto__ }), __iterator__: [, __count__, __iterator__, [__parent__, []], ({ set: [], prototype: ({ prop: prototype }) })] }) }) = __count__%=<x><y/></x>;  /* Comment */(constructor = (constructor.__defineGetter__(\"__proto__\", <><x><y/></x></>))); return;.unwatch(\"__count__\")) return;");
tryItOut("/*infloop*/M:do {var __proto__ = true, __parent__ =  \"\" ;( /x/ ); } while(--new <y><z/></y>());");
tryItOut("var constructor = <x/>\n");
tryItOut("if((1 for (x in []))(prototype = <x/>, <x><y/></x>).__lookupSetter__(\"__count__\")) {continue L; } else /*for..in*/for(var [prop, __count__] =  ''  in <><x><y/></x></>\r) {gc()const prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x/>) {__iterator__gc() }\nif(<x/>) { if (<x/>) {throw *;break ; }} else {{}__iterator__ = <><x><y/></x></>; }");
tryItOut("if((function (__parent__, function::__iterator__) { return * } (<x><y/></x>))) {yield;yield; } else  if (x::prop) gc()");
tryItOut("{L: let constructor =  /x/ , null; }");
tryItOut("{/*for..in*/M:for(prototype in <><x><y/></x></>) export *; }");
tryItOut("L:do let (__count__) { export __noSuchMethod__; } while((([@foo].sort(prop))) && 0);");
tryItOut("{Function; }");
tryItOut("return;<y><z/></y>");
tryItOut("let([[__proto__, __count__], [, , , __proto__], , , ]) { throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in (* :: prop)) continue ;");
tryItOut("/*infloop*/M:for(let ({ constructor: __noSuchMethod__ }) = ({}); function::__proto__.__parent__ = __noSuchMethod__ = <><x><y/></x></>.__lookupGetter__(\"__iterator__\"); __parent__) /*infloop*/L:for(*.yoyo(({})); prototype; (<x/>(window))) {{} }");
tryItOut("/*infloop*/while(__noSuchMethod__.(<><x><y/></x></>)){if(false) {export *; }{} }");
tryItOut("if((*::*.throw({}) ? (true.__noSuchMethod__) : (((-3/0).call((-0), 0.1, <><x><y/></x></>)).watch(\"__iterator__\", (1 for (x in [])))))) { if (eval(\"\", 1e+81)) export *;\nreturn {};\n else {return *; }}");
tryItOut("var __noSuchMethod__ = <y><z/></y>;var __proto__, __proto__;");
tryItOut("/*infloop*/for(var ({ (true)(let (prototype = <x><y/></x>, __noSuchMethod__ = __iterator__) <><x><y/></x></>): constructor }) = <y><z/></y> <  '' ; constructor.__count__ = ((function (__iterator__, __noSuchMethod__) { yield __iterator__ } )((({ get prop(__iterator__) { return <><x><y/></x></>; }  })),  /x/g  == <><x><y/></x></>)); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {/*for..in*/for(prototype in  /x/g ) {export *; } } }");
tryItOut("M:if((eval(\"((p={}, (p.z = <x/>)()))\", [window if (this)]).throw((p={}, (p.z = window)())))) let (__parent__ = <y><z/></y>) { gc() }");
tryItOut("let(__noSuchMethod__, <{constructor}><ccc:ddd><{prototype}\r></{prototype}> </ccc:ddd></{constructor}> = (function  constructor ()#1=({__iterator__: <><x><y/></x></>}))(function::__iterator__ = <><x><y/></x></>\f, (__iterator__ < __iterator__))) ((function(){throw StopIteration;})());");
tryItOut("if(constructor =  /x/g  *= (033 >>=  \"\" ))  else  if (((window).watch())) {return;(false); }");
tryItOut("L:if((X.((([,,z1] << <><x><y/></x></>) >>= export prop)))) { if ((({__noSuchMethod__.function::__proto__ getter: *::* }))) {return @foo; const __proto__;export prop; }} else { }");
tryItOut("/*infloop*/do {gc() } while(__noSuchMethod__.@foo);");
tryItOut("this.zzz.zzz;");
tryItOut("do {( /x/ );( '' ); } while((prop.__defineSetter__(\t\"__noSuchMethod__\", (1 for (x in [])))) && 0);");
tryItOut("/*infloop*/L:for(prop; (new Object(new Error(false), <y><z/></y>)); *) ;");
tryItOut("let (constructor = __noSuchMethod__, prop) { export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in prototype) {const prototype =  '' , __count__; } const __parent__;");
tryItOut("if(*::* || <y><z/></y>) {throw *;{yield; } }");
tryItOut("return;");
tryItOut("/*infloop*/M:do /*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in <x><y/></x>) {{} } while((new 1e4.propertyIsEnumerable(\"__parent__\")((this.zzz.zzz), [11,12,13,14].some)));");
tryItOut("export __proto__;(#3={a:#3#});");
tryItOut("//h\nif(\t /x/ ) {/*for..in*/M:for(prop = prototype = __iterator__ in <><\fx><y/></x></>) {gc()gc() }; } else  if (([1] ^= 1.3)(Boolean(__parent__), *::*)) {return *; ''  } else var prop = prototype, __noSuchMethod__ = *;");
tryItOut("/*infloop*/for(<x><y/></x>.__defineGetter__(\"__proto__\", <><x><y/></x></>); ({prop: <x/>, prototype: prop }); ~eval(\"undefined .@ [z1,,]\", ({prototype:  \"\" , prop: window }))) gc()");
tryItOut("{while((prop.prop) && 0){throw <y><z/></y>; } }");
tryItOut("L:if(({ __proto__: [,  yyy , ], \t__noSuchMethod__: __proto__ }) = [11,12,13,14].some) { if (((function  __count__ (__proto__, __proto__) { return (1 for (x in [])) } ).call('fafafa'.replace(/a/g, ((3).__defineSetter__).call), new Math.sin()--))) {yield  /x/g ;{<x><y/></x>;export *; } }} else {yield <><x><y/></x></>;\nreturn prop;\n }");
tryItOut("if(__noSuchMethod__ = <><x><y/></x></>) {yield <x><y/></x>;; } else  if (([z1] ^=  \"\" )) /*for..in*/for(__proto__ in ((new Function)()))(new Function(\";\")) else prop");
tryItOut("/*infloop*/while((#1=new [[]](this, *)))/*infloop*/while(5.0000000000000000000000)prototype getter: (function (prototype)({} for each (__count__ in <y><z/></y>))).call");
tryItOut("if(#1=[(delete (1e+81)(<x/>, *))]) { if ((__iterator__ = ({prop setter: eval }))) /*for..in*/for(let __noSuchMethod__ = (((<x/>.hasOwnProperty(\"prototype\")))[<x/>.__defineSetter__(\"prototype\", <><x><y/></x></>)]) in  \"\" ) {break L; } else { }}");
tryItOut("if((return  /x/g )) { finally  } else L: {return <x/>;3/0; }");
tryItOut("/*infloop*/L:do {yield; } while( /x/g .__defineGetter__(\"function::__proto__\", /a/gi).@*);");
tryItOut("let (__count__ = (this.zzz.zzz)) { if(__iterator__) <x/>; else {return @foo;export *; } }");
tryItOut("M:if(1e-81) let __count__, __proto__;");
tryItOut("{let __iterator__;const delete; }");
tryItOut("/*for..in*/for(var [prototype, __parent__] = #1=<x><y/></x>.isPrototypeOf([]) in [1,,]) {gc() }");
tryItOut("/*infloop*/for(const function::__parent__; (new (1e-81)(arguments, __proto__)); 1e+81.(__count__ = false)) {;gc() }");
tryItOut("with({}) let(prop = #1=new Number()) ((function(){with({}) throw __count__;})());");
tryItOut("if(new ('haha'.split)((constructor = <xxx {constructor}={*::*.__lookupGetter__(\"__noSuchMethod__\")} />).__lookupGetter__(\"__count__\"))) const prop, __noSuchMethod__ = @foo; else {( /x/g );switch((RangeError())) { case :  } }");
tryItOut("/*infloop*/L:for(var prototype; (({constructor: *})); [11,12,13,14].filter) gc()");
tryItOut("L: ;");
tryItOut("L:switch(__iterator__ = ) { default: return;break; case __iterator__ = [[]].@*: break; case <xxx>{__noSuchMethod__}</xxx>: if(<><zzz>((p={}, (p.z =  '' , ({a2:z2}))()))</zzz></>) { if ((3.watch(\"__parent__\", Function))) /*for..in*/for(let [function::__proto__, __noSuchMethod__] = __parent__ in null) {} else {export *; }}//h\nbreak; \nyield;;break;  }");
tryItOut("return;if(3/0) { if (*) eval else {(window); }}");
tryItOut("/*infloop*/for(false.constructor = function(id) { return id }; (<><x><y/></x></> ? <y><z/></y> : ); (function(y) { yield y; export *;; yield y; }).call(<x><y/></x>, <x/>)) {/a/gi }");
tryItOut("/*infloop*/for(prop; 0.watch(\"__proto__\", gc) || __noSuchMethod__.__parent__ =  /x/ ; 5.0000000000000000000000.yoyo({})) if(true) {const __count__ = <><x><y/></x></>, prototype; } else continue M;");
tryItOut("/*for..in*/for(let function::__parent__ = (getter)( '' , false) in 1.2e3) {return;{} }");
tryItOut("do /*infloop*/for(var __count__ = -0; <x/>; <x><y/></x>) yield null; while((<x/>.prop =  '' ) && 0);");
tryItOut("/*infloop*/do /*infloop*/do yield undefined; while(*); while([z1].propertyIsEnumerable(\"__parent__\") = (Iterator(<x><y/></x>, @foo))\n);");
tryItOut("for(let y in [5,6,7,8]) with({}) throw (1 for (x in []))( \"\"  .@*:: function(id) { return id }, prototype);");
tryItOut("<{__parent__}></{__parent__}>");
tryItOut("M:if(eval(\"{}\", *.hasOwnProperty(\"__iterator__\"))) { if (((\n( /x/ ).call())['__count__'] = *::*)) {(eval(\"return;\", @foo)); }gc() const __proto__;} else {while((false ? true : <><x><y/></x></>\t) && 0)return __proto__; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <y><z/></y>) break ;");
tryItOut("{Function/*infloop*/for(*::*\t; @foo; 1e+81) {const <x/>;((-1)); } }");
tryItOut("switch(({__noSuchMethod__: <x/> }) & ({ set prop(constructor) { yield __proto__ } , __iterator__: <y><z/></y> })) { default: case __parent__ = (<x><y/></x> ^= __iterator__): case (prop.__noSuchMethod__ = *.hasOwnProperty(\"__iterator__\")): if(__count__ = <><x><y/></x></>) {yield this;yield; } else  if (([z1] &= 0)) try { export *; } catch(prototype if (function(){const __iterator__ = <x><y/></x>, function::__iterator__;})()) { break M; } catch(__parent__ if []) { let __count__ = (-0), __parent__; } finally { return *::*; }  }");
tryItOut("if(prototype) { if ((<><bbb xmlns=\"<><x><y/></x></>\"></bbb></>.__lookupGetter__(\"__parent__\"))) break M;} else {export prototype;/*for..in*/for(let prop in ((function  prototype () { yield this } )(<y><z/></y>))){return; } }");
tryItOut("/*infloop*/do {with({__noSuchMethod__: null})var function::prop;yield <><x><y/></x></>; } while(.2 &= #2=<x><y/></x>);");
tryItOut("/*infloop*/while(@foo.__defineSetter__(\"__parent__\", [1,2,3,4].map)){{} }");
tryItOut("with(<x><y/></x>)eval\n");
tryItOut("/*infloop*/L:while(*::*)var __count__, prototype =  /x/ ;");
tryItOut(";");
tryItOut("switch(window) { default: if(+=) {const __proto__, __parent__ = <x><y/></x>;export *; } else  if (4.) {throw  /x/g ; } else throw windowbreak; break;  }");
tryItOut("let __iterator__ = *::*, constructor = #1=[#1#];\n\n");
tryItOut("/*for..in*/L:for(let prop in (new Function).call( /x/ .prototype = \f#3={a:#3#}, get)) {if(new Boolean(@foo.__lookupSetter__(\"__noSuchMethod__\"), ( /* Comment */ /x/ ))) { if (this.zzz.zzz) if(constructor) { if (0/0) return window;} else {export *; }} else {; } }");
tryItOut("/*infloop*/for(__count__ = ({ __proto__: prototype }) = __parent__ = *; 1e81; ( /x/g  - __noSuchMethod__)) /*infloop*/M:for(false; []; undefined) {export *; }");
tryItOut("[<x><y/></x> if (<><x><y/></x></>)];");
tryItOut("/*infloop*/while(function(id) { return id })if([([1,2,3,4].map).call(false,  '' , null) for each (set in  \"\" )]) { if (true ? @foo : __proto__) {return;__iterator__; }} else export *;");
tryItOut("throw false; const \t__iterator__;");
tryItOut("/*for..in*/for(let String(<y><z/></y>)['x::set'] in ((/a/gi)('fafafa'.replace(/a/g, Math.pow)))){/*infloop*/for(__count__; [15,16,17,18].some(({a1:1}), new ((<><x><y/></x></>.__parent__.eval((true ? <x><y/></x> : 0.1)))Math.pow)'(); (__iterator__ &  \"\" ) &&  /x/g ) {yield; } }");
tryItOut("/*for..in*/for(let constructor(<x/>) in ((Function)(( /x/ .@*))))yield;");
tryItOut("/*infloop*/for(var ({ prop: ({ __count__: __iterator__, __parent__: constructor }), prototype: [__parent__, __count__, ] }) = (function  function::__count__ (__parent__) { throw <x><y/></x>; } )(<x/>); RegExp(__parent__ = <y><z/></y>);  /x/g .eval(undefined)) {yield 4.; const constructor; }");
tryItOut("/*for..in*/for(var prop =  /* Comment */__parent__ = false in prop !== <><x><y/></x></>) {{}gc() }");
tryItOut("var [[]]\n");
tryItOut("L:do /*infloop*/while(null){return prototype;const __noSuchMethod__ = <x><y/></x>, __count__ = *::*; } while((constructor) && 0);");
tryItOut("L: gc()");
tryItOut("while(((prop = (prototype ? .2 : <x><y/></x>))) && 0)M:if(*) break ; else  if ( /x/g ) yield; else {const prop, __iterator__ = *::*;throw <><x><y/></x></>; }");
tryItOut("if([,]) let __count__, prop; else window;");
tryItOut("{/*for..in*/for(let [constructor, __parent__] = ({ __proto__: <ccc:ddd></ccc:ddd>, __proto__: __noSuchMethod__ }) =  in __parent__ = (yield <y><z/></y>)) /*infloop*/for(const __noSuchMethod__ = window; <y><z/></y>;  { \fyield <y><z/></y> } ) yield;continue M; const __parent__; }");
tryItOut("let(({ __count__: __parent__, \f__proto__: ({ constructor: ({ __proto__: [prototype] }), __parent__: ({ constructor: ({ __noSuchMethod__: prop }) }) }) }), __iterator__ = window.@foo.valueOf(\"number\")) ((function(){for(let y in []);})());");
tryItOut(";");
tryItOut("/*for..in*/\rM:for(let prop in ((Function)(constructor))){propwith(0){throw @foo;yield -3/0; } }");
tryItOut("L:switch((constructor.__noSuchMethod__ = )) { case (({__iterator__: <><x><y/></x></>, \t<x><y/></x> getter: -0 })): return;break;  }");
tryItOut("if((uneval(__count__)) <<= ((function ([y]) { })() ? arguments :  /x/g )) {gc()__parent__ } else  if (__parent__+=<y><z/></y>.constructor) (false); else {}");
tryItOut("if(*) {var __noSuchMethod__, prop; }");
tryItOut("/*infloop*/while((function(y) { yield y; ;; yield y; }).call([11,12,13,14].filter, ).watch(\"(__iterator__)\", 'haha'.split))break M;");
tryItOut("switch(this++ *= new <><x><y/></x></>()) { case 5: (<x/>);case [15,16,17,18].map(constructor, <y><z/></y>): yield;case 0: break ;break;  }");
tryItOut("with({}) export __parent__;");
tryItOut("/*for..in*/M:for(const prototype.__proto__ in ((Function)(({ set prop prototype () { yield ({a1:1}).eval(1e+81) } , __parent__: new (new Function(\"({}).hasOwnProperty\"))(0/0) }) &=  /x/g  *= #1=[#1#]))){if(RangeError() ? ({} ? *::* :  '' ) : (({a1:1}).__lookupGetter__(\"constructor\"))) /*infloop*/for(x::__parent__ = [z1,,]; true; true)  else {{}gc() } }");
tryItOut("if(let (__parent__ = 3, setter) let (__noSuchMethod__ = <><x><y/></x></>) <x><y/></x>) {const __count__; } else  if ((window = true)) {}");
tryItOut("\n;");
