tryItOut("if(__iterator__ = __count__) { if ([15,16,17,18].sort(gc,  '' )) { { <><x><y/></x></>; }  }} else /*for..in*/for(prototype = ({__noSuchMethod__: false.isPrototypeOf(*::*), prototype getter: 0 && *::* }) in prop[undefined]) /*infloop*/while(<x><y/></x>)");
tryItOut("L:if((new new Function(({__iterator__: 3}), this))) { if (__noSuchMethod__ = <><x><y/></x></>) yield prototype; else {;let __iterator__ = *::*, prototype = <y><z/></y>; }}");
tryItOut("switch(new  /x/  | <x><y/></x>()) { case ( /x/ .__defineGetter__(\"__count__\", (new Function).apply)\n): break; case this: throw <><x><y/></x></>;break; case 1:  }");
tryItOut("<y><z/></y>;");
tryItOut("yield ({__proto__: new (<y><z/></y>\f)(\rfalse,  /x/g )});");
tryItOut("/*infloop*/");
tryItOut("/*for..in*/for(const constructor in (([1,2,3,4].map)((this.zzz.zzz))))gc()");
tryItOut("let(<>this.zzz.zzz</> = [] = [, __iterator__, , , prop]) { try { <><x><y/></x></>; } catch(__count__ if (function(){yield __iterator__;})()) { let constructor = #3={a:#3#}; } ");
tryItOut("/*infloop*/for(let (([[]] -= null))((0x99.hasOwnProperty(\"prototype\"))\n) = (__count__.__iterator__ = ( /x/g .@*)); var prop, [, ]; [1,2,3,4].slice()) {/*infloop*/do (#3={a:#3#}); while(undefined === false); }");
tryItOut("let (({ __parent__: ({ prototype: ({ __noSuchMethod__: prop }) }), prototype: ((new (function (__count__, prototype) { yield prototype } )( '' , true)))(this.__defineGetter__(\"prop\", [1,2,3,4].map)) }) = void window.eval((constructor &= <y><z/></y>))) { do {throw *; } while(((({}).__lookupGetter__())) && 0); }");
tryItOut("this;");
tryItOut("yield [<x><y/></x> .@ @foo for (x::__iterator__ in [z1]) for (__iterator__ in  /x/ )];");
tryItOut("var prototype = <y><z/></y>;");
tryItOut("yield (yield  \"\"  .. 3);");
tryItOut("return\n/*infloop*/for(this; <><x><y/></x></>; <x/>) <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in let (__count__, __proto__ = prototype) __noSuchMethod__) {if(__proto__) {let __noSuchMethod__; } }");
tryItOut("throw StopIteration;");
tryItOut("if(this) {if(*::*) <x><y/></x>; else  if ((function ([y]) { })()) {{} } else return;if(-1) (window); else {var __parent__ = <x><y/></x>;gc() } } else  if (([] = typeof  /x/g )) <x/>yyyyyy else {(arguments).__defineSetter__prototype = [,,z1], __parent__ }");
tryItOut("continue ;");
tryItOut("prop, __noSuchMethod__ = window\n\n");
tryItOut("this.zzz.zzz;");
tryItOut("while((({ get __count__(__count__) { this; }  }).unwatch(\"__proto__\")) && 0)L:if(( @ this)) {const __noSuchMethod__;(<y><z/></y>); } else  if (#1=[#1#].__proto__ = null) let ;");
tryItOut("{if([window]) {} else  if (<x/> === window) function (__iterator__) { yield ({a1:1}) }  else {export __count__; }/*for..in*/for(const __count__ in ((function(y) { yield y; export __iterator__;; yield y; })((-1)--)))(function(q) { return q; }).apply }");
tryItOut("L:do throw ({a2:z2}); while((*\n) && 0);");
tryItOut("export setter;{}");
tryItOut("/*for..in*/L:for(const __parent__ in (new (<><x><y/></x></>)(__count__, *::*))) return;");
tryItOut("return;");
tryItOut("while((let (prop, __noSuchMethod__ = *) \n<x><y/></x>) && 0){/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in __count__) {var __proto__;export __iterator__; } }\nconst __proto__ = ( /* Comment */<x/>.__defineGetter__(\"constructor\", (function  prop (__proto__, __count__) { yield <><x><y/></x></> } ).call) += ( /* Comment */<><x><y/></x></>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in *) {var __noSuchMethod__; }");
tryItOut("if([__count__.__noSuchMethod__ = ()]) { if ((++ /* Comment */window)) break ;} else yield <x/>;");
tryItOut("L: {return [,,z1]; }");
tryItOut("L:if(@foo) let __iterator__, prototype; else  if (*) {function  prototype (__parent__, __iterator__) { yield getter } let __noSuchMethod__ = 1e-81; }");
tryItOut("{}");
tryItOut("with({__noSuchMethod__: prop = new (function (function::__iterator__\t)*::*)(undefined, 1e4)})/*for..in*/M:for(let [__parent__, __proto__] = undefined in <><x><y/></x></>) {export __noSuchMethod__; }");
tryItOut("M:with((__proto__.(<><x><y/></x></>)) > [11,12,13,14].filter && (.propertyIsEnumerable(\"__iterator__\"))){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in <><x><y/></x></>) {let (__noSuchMethod__, function::__noSuchMethod__ = undefined) { __count__ = <x><y/></x>, constructor = <><x><y/></x>\f</>; } }");
tryItOut("/*for..in*/for(const __parent__(<><x><y/></x></> &= @foo[<y><z/></y>]) in (((uneval(--true)))((undefined.@* !=  \"\"  =  /x/g ))))L:if(((<x/>))) { if (\nprototype = <><x><y/></x></>) {}\n else new Function}");
tryItOut("if((__parent__ = (({}).__lookupGetter__).__iterator__)) {/*infloop*/for(const __noSuchMethod__; ( /x/ [ /x/ ]); undefined.unwatch(\"__iterator__\")) Math.pow{; } } else  if ((yield 5.0000000000000000000000 == <x/>)) {gc()throw false; }");
tryItOut("/*infloop*/M:for(*::*; <><x><y/></x></>;  '' ) return;");
tryItOut("with({__count__: eval(\"<x/>;\", __noSuchMethod__)}){yield;constructor = window; }");
tryItOut("return;");
tryItOut("if((new (({__parent__ setter: __proto__, prototype:  /x/g  }))(({ set __count__(__parent__, function::__proto__) { export __iterator__; }  }), [[1]]))(this % 3) = __count__ = <x><y/></x> ?  : ([ /x/g  += [[1]]])\t) {throw __count__;yield false; } else  if ([z1]) {;; }");
tryItOut("if((eval(\" '' .__count__ = <x><y/></x>\", false += []))) { if (\n(p={}, (p.z = (-0))())) {export *\n; }} else {yield false;/*infloop*/for(var prototype;  /x/g .unwatch(\"__proto__\"); ({__parent__ getter: function ()undefined, __iterator__: __count__ })) {\fprop = (-0);export __iterator__; } }");
tryItOut("function (prototype) { yield  /x/g  } ");
tryItOut("/*for..in*/for(var prop =  in ((({}).__lookupGetter__).call(4., <><x><y/></x></>, <y><z/></y>))(f.prop)) ");
tryItOut("with({prop: this .@*:: prototype})return <><x><y/></x></>;");
tryItOut("/*infloop*/for(__parent__; [[]]; (function(y) { yield y; let __proto__;; yield y; })) export *;");
tryItOut("M:if((++<><x><y/></x></>)) return <><x><y/></x></>;");
tryItOut("const __iterator__ = *;return #1=[#1#] @ this;");
tryItOut("constructor = <x><y/></x>, __iterator__;\n/*for..in*/for(var __noSuchMethod__ in ((<><x><y/></x></>)(<><x><y/></x></>)))yield;\n");
tryItOut("/*for..in*/for(const [@foo['__noSuchMethod__'], function::prototype] = new ((((Function).apply).apply).\napply)(<x/>) in prototype) {{}gc() }\nexport *\f;");
tryItOut("do {return;let ([]) { export *; } } while((false) && 0);");
tryItOut("/*infloop*/for([] = __parent__; (*)(false) ? new Error( '' ) : (uneval( '' )); <\rbbb xmlns=\"__iterator__\"><x><y/></x> </bbb>) { }");
tryItOut("/*infloop*/M:while( /* Comment */0x99)3;");
tryItOut("if(prototype = [1]) { if (*.__defineGetter__(\"prototype\", <x/>)) return;} else {break ; }");
tryItOut("export prop;");
tryItOut("if(-3/0) { if (<x><y/></x>) ; else yield;}");
tryItOut("/*infloop*/for(__iterator__.(false); #0=prototype.throw((__count__ = arguments)\n); ([15,16,17,18].some((1 for (x in [])), (new ({prop: @foo}))))) {true;M:if(\t033.__lookupSetter__(\"prototype\")) {export constructor;gc() } else  if ((__iterator__.__parent__))  else {continue M;yield; } }");
tryItOut("return ( /= (this.yoyo(false)).throw(__noSuchMethod__ = window));");
tryItOut("\n");
tryItOut("__proto__ = __proto__;");
tryItOut("if((__count__ = false)) { if (this.__defineGetter__(\"__noSuchMethod__\", prop) ? <><x><y/></x>/*\n*/</> : ({prototype: <><x><y/></x></> })) {continue ; }} else {return;<y><z/></y>; }");
tryItOut("if(<x/>(each, *) != (this.__defineGetter__(\"constructor\", function () { return undefined } ))) continue L; else  if (this.__defineGetter__(\"__proto__\", new Function).__lookupGetter__(\"__parent__\"\t)) {throw  /x/g \nthrow <><x><y/></x></>;let setter; } else {let __parent__ = window; }");
tryItOut("if(([15,16,17,18].filter([1,2,3,4].map, 1e81)) ^=  /x/g ) {M:if( \"\" ) {return <><x><y/></x></>; } else  if (null) export prototype; else Math.pow }");
tryItOut("L:if((__count__.valueOf(\"number\"))) yield; else {yield #3={a:#3#}; }");
tryItOut("let (({ __parent__: [, ({ __noSuchMethod__: __noSuchMethod__ }), ], constructor: prop }), ({ __parent__: __iterator__ }) = ((uneval(n)))) { /*for..in*/for(const __count__ in ((function  prop (({ __count__: __iterator__ })) { /*infloop*/for(const prototype = <>__iterator__</>; function(id) { return id }; (-0)) yield false; } )(\n0x99))){export __iterator__; } }");
tryItOut("L:if(([z1])(this)) yield true; else {function  __parent__ (constructor) { return (function ([y]) { })() }  }");
tryItOut("/*for..in*/for(const [prototype, prototype] = ( /* Comment */__proto__) = 'haha'.split in false |= constructor = //h\n<><x><y/></x></>) export __iterator__;");
tryItOut("if(prototype%=__count__) {let (constructor) { export *; }{} }");
tryItOut("L: {gc()return }");
tryItOut("return [, __parent__, , __noSuchMethod__, __proto__] = <x><y/></x> = <><x><y/></x></>;");
tryItOut("{const constructor;__proto__ = -3/0, __iterator__ =  /x/g ; }");
tryItOut("return this;");
tryItOut("{[1,2,3,4].map }");
tryItOut("\n");
tryItOut("/*infloop*/for(prototype; prop .@ this.prop;  /* Comment */[true for each (__proto__ in <x><y/></x>)].prop)  '' ");
tryItOut("yield;");
tryItOut("/*infloop*/M:for(const constructor; ([15,16,17,18].sort(function(y) { yield y; yield;; yield y; }, ({ get __proto__(__parent__, __parent__) { yield __parent__ } , __iterator__: <><x>//h\n<y/></x></> }))) instanceof new (*)(false, null); ( '' ).__defineSetter__.__noSuchMethod__ = ([ /x/g ].some( /x/ )).hasOwnProperty(\"window\")) {M:if(@foo) continue M; else  if ( /x/ .yoyo(<x><y/></x>)) @foo;continue ; }");
tryItOut("/*infloop*/M:for([u]; __parent__ = ((1e81)[true]).__count__ = ((yield (prototype.__noSuchMethod__ getter= [1,2,3,4].slice)).propertyIsEnumerable(\"constructor\")); (uneval('fafafa'.replace(/a/g, ((__parent__.__iterator__ = <x><y/></x> |= this)).__defineSetter__)))) {;__parent__\nif(0x99) { if (<x/>) {<x/>; }} else {let try { const __count__ = <><x>\t<y/></x></>, __iterator__ = <x><y/></x>; } finally { export *; } ;(1 for (x in [])) } }");
tryItOut("if(<x><y/></x>) yield; else  if (true)  else function window (__count__, __parent__) { *; } ");
tryItOut("if(@foo) { if (<><x><y/></x></>.__proto__) break L; else {{}__iterator__ = prototype; }}");
tryItOut("yield  \"\" ;");
tryItOut("gc()L:if(true) {export *;var __noSuchMethod__, prototype = 3; } else  if (prototype = <y><z/></y> != <><x><y/></x></>) return window;");
tryItOut("/*infloop*/for(__proto__.hasOwnProperty(\"constructor\"); ([11,12,13,14].map); -1(<><x><y/></x></>,  /x/g )) {/*infloop*/for(prototype; @foo; <><x><y/></x></>) {const prototype; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\rvar __proto__.prototype in (function (__proto__)<><x><y//*\n*/></x></>(prop))[prop.(window)]) {(<x><y/></x>).watchreturn  /x/g ; }");
tryItOut("M:while(((({}).hasOwnProperty)( \"\" )) && 0){L:if(<><x><y/></x></>) continue L; else yield *;return [1,,]; }");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __proto__: prop }) }) = function(y) { yield y; if(<x><y/></x> ? #1=[#1#] : <><x><y/></x></>) {return <><x><y/></x></>; } else  if (\n0/0) {return window; } else {(null);gc() }do {export *; } while(((yield <x/>)) && 0);; yield y; }((uneval((<x/>.__noSuchMethod__))), this.unwatch(\"prop\")); <x/> ..  \"\" ['__iterator__'] = *::* .@ <><x><y/></x></>.__parent__ = constructor = new  '' (); ((this.__defineSetter__(\"__count__\", 'haha'.split).valueOf(\"number\")) * window.__proto__)) {export __noSuchMethod__;let (__count__, __parent__ = #1#) { var this = 3, prop = (-1); } }");
tryItOut("getter = __parent__;");
tryItOut("if((function(q) { return q; })([1,,], true)) {throw  '' ;throw true; } else {yield; }");
tryItOut("with(new (1.3)(this)){let(({ __parent__: constructor })) ((function(){this.zzz.zzz;})());/*infloop*/while([z1,,])return *::*; }");
tryItOut("switch(((1 for (x in []))((1e4.__defineGetter__(\"prototype\", gc)), (yield [1])))) { case 3: break; ; }");
tryItOut("let (__count__, ({ __noSuchMethod__: ({ __count__: [], __noSuchMethod__: [({ constructor: __count__ }), [prototype], , ({ __count__: __noSuchMethod__, constructor: x::prop }), constructor] }) }) = (__iterator__.watch(\"constructor\", Math.sin))) { ((__parent__ = ({})).__defineSetter__).call }");
tryItOut("L:if(this.__defineSetter__(\"__iterator__\", Math.sin)) {; } else  if (try {  } finally { yield; } ) {with({}) { throw window; }  }");
tryItOut("{with(this.zzz.zzz) }");
tryItOut("\fexport constructor;");
tryItOut("for(let y in []);");
tryItOut("let (prop, (({ __parent__: ({ prop: ({ prototype: ({ prototype: ({ __iterator__: function::prop }) }), constructor: ({ __iterator__: ({ __proto__: __count__, __parent__: __parent__ }) }) }), __noSuchMethod__: ({ prop: __noSuchMethod__ }) }), constructor: [, , [, , , , ]]))) { {__count__;return; } }");
tryItOut("/*infloop*/for(let new @foo(<x/>, {}); prop.__count__ setter= Math.pow; (1.2e3 >> window)) return;");
tryItOut("if(-({a1:1})) {(*::*); }");
tryItOut("L:do {export *;const __proto__ = <><x><y/></x></>, __count__ =  /x/ ; } while((undefined) && 0);");
tryItOut("/*infloop*/while(5.0000000000000000000000){export *;do {return; } while((<><xxx {prop}={<x><y/></x>} /></>) && 0); }");
tryItOut("with({}) with({}) this.zzz.zzz");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("return function(y) { yield y; ; yield y; }(0.1);");
tryItOut("if( /x/g ) {}");
tryItOut("if(this.zzz.zzz) { if ((function(id) { return id } , *::*)) {yield *;[1,,]; }} else with({constructor: <x/>})(1 for (x in []))");
tryItOut("throw false;\nL:  { yield let (__parent__ = [[1]]) <x><y/></x> } \n");
tryItOut("L:if( /x/ .propertyIsEnumerable(\"__proto__\")++\t) { if (yield ((([z1,,]).__defineSetter__).apply)(@foo)) {/*for..in*/for(let prototype = prop in false) {(__count__); }\rvar __count__ = <y><z/></y>; }} else {with({}) __count__ = __count__; }");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = null.__lookupGetter__(\"constructor\").eval(({<x/>: (<x><y/></x>.yoyo(<x><y/></x>)) })) in [0/0 for (prop in *::*)]) {\fexport __noSuchMethod__\n/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in <x/>) {continue L; } }\n");
tryItOut("M:with(function  __parent__ (__parent__)null){{const constructor = false, __parent__; }export __noSuchMethod__; }");
tryItOut("/*for..in*/for(const __parent__ in ((gc)(new (/a/gi)())))break L;");
tryItOut("/*infloop*/for(const __parent__; .__parent__; ('fafafa'.replace(/a/g, (<><x><y/></x></>).watch))) ");
tryItOut("let (__parent__, __iterator__) { switch(<y><z/></y>) { case 8: continue ; } }");
tryItOut("{with(@foo){throw [1,,]; } }");
tryItOut("yield ((new Function(\"export *;\"))).call(__noSuchMethod__ = <x><y/></x>, (function ([y]) { })[<x/>]);");
tryItOut("/*for..in*/for([__proto__, __proto__] = <x/> in this) export *;//h\n");
tryItOut("<x/>;\nyield 1.3;\n");
tryItOut("case (false >>> (function ([y]) { })()) .. [1].__noSuchMethod__: break; break; ");
tryItOut("for(let y in [5,6,7,8]) yield <{prop}><x><y/></x><!--yy--></{prop}>.@*;");
tryItOut("let(__count__ = <><x><y/></x></>) { (__iterator__);");
tryItOut("with(({ __count__: ({ constructor: break ;, __count__: constructor }), __count__: ({ prop: prototype, __proto__: ({ __proto__: constructor }) }) }) = (export prop)){const __iterator__, __noSuchMethod__ = *::*;(this); }");
tryItOut("M:do {L: return ;throw this\nconst __count__ = window; }\t while(((this.__defineGetter__(\"__noSuchMethod__\", (window).__defineSetter__))) && 0);");
tryItOut("with(((function  prop () { return <y><z/></y> } )(<x><y/></x>)))var __count__, __proto__ = __noSuchMethod__;");
tryItOut("let __noSuchMethod__, __proto__ = <x/>.*;");
tryItOut("with({}) with({}) { <!--yy--> } ");
tryItOut("if((((1 for (x in [])))())) {{throw <><x><y/></x></>;break ; }{while((*::*.valueOf(\"number\")) && 0){return window; } } }");
tryItOut("/*infloop*/M:for(const __proto__; let (__parent__, prop) null; @foo) const __proto__;");
tryItOut("/*infloop*/do {function (constructor, __count__)null } while(<y><z/></y>);");
tryItOut("let (__noSuchMethod__) { export *; }");
tryItOut("let(__parent__) ((function(){throw prototype;})());");
tryItOut("/*infloop*/for(var __proto__; [__proto__] = let (prop, constructor = 3)  /x/ ; this.__defineSetter__(\"prop\", <><x><y/></x></>)) {if(prop = .2[,,]) {throw <><x><y/></x></>; } else {\treturn __proto__; }if(default: case this: case <><x><y/></x></>: var __count__ = @foo;case 4.: gc()break; break; case <y><z/></y>: case [[1]]: gc()(4.);break; ++) {throw <x/>;return <y><z/></y>; } else return; }");
tryItOut("/*for..in*/for(let __iterator__ in ((function  __proto__ (__noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in  /x/g .hasOwnProperty(\"constructor\")) do  while((@foo) && 0); } )(this))){{let (prop) { gc() } }/*for..in*/for(let constructor = (({__count__: Boolean(this.__defineSetter__(\"prototype\", /*\n*/function  constructor () { yield undefined } ).__defineSetter__(\"constructor\",  /x/g ), (#1=[#1#]))})) in (<x><y/></x>)() || (function(q) { return q; }).call( /x/ , false)) return; }");
tryItOut("with({}) { let __noSuchMethod__; } ");
tryItOut("/*infloop*/do yield <><x><y/></x></>; const __parent__; while(prop.prop = (5.0000000000000000000000.eval(0) >= arguments & __iterator__.isPrototypeOf(true.__defineGetter__(\"__count__\", <y><z/></y>))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in 'fafafa'.replace(/a/g, new Function)) {let (({ case 4: var constructor;break; let prototype, constructor = null;: function::__proto__, __parent__: constructor })) { __count__ } }");
tryItOut("L: {while(((new <><x><y/></x></>)) && 0){break L; } }");
tryItOut("if( /x/g ) var prototype = *::*; else  if (<x><y/></x>) {return; }");
tryItOut("{M:if(<x><y/></x>) (new false()) else  if (<><x><y/></x></>) ;try { let(__count__) { yield window; } catch(__iterator__ if (new 5.0000000000000000000000(<x><y/></x>.constructor = <x/>))) { __iterator__ }  }");
tryItOut("with(undefined.__defineSetter__(\"function::__proto__\", function () { yield <x/> } ).isPrototypeOf(([*::*].sort(Math.pow)))){export __parent__; }");
tryItOut("if(prop) {return true; } else {( /x/ );let __count__; }\t");
tryItOut("do {L: {(<x><y/></x>); } } while(([z1,,]) && 0);");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*infloop*/for(var __noSuchMethod__; ( /x/g .__iterator__ = [11,12,13,14].some.watch(\"__parent__\", eval)); eval(\"(__iterator__ = window)++\",  '' ).__lookupGetter__(\"__proto__\")) /*for..in*/M:for(__count__ = 3/0 in ( \"\" .watch(\"constructor\", function (prop, __proto__) { yield 1e-81 } ))) /*for..in*/for(__count__ in *) continue L;");
tryItOut("let (__noSuchMethod__ = __iterator__ = false) { gc() }");
tryItOut("if(__count__.constructor) var __iterator__, __iterator__ = -1; else return <><x><y/></x></>;");
tryItOut("let (__parent__ = *, prop) { let prototype; }");
tryItOut("{if(let (constructor = [,], __count__) false) { if ((__parent__.throw(__count__))) ; else [1,2,3,4].map}/*infloop*/while(new (<x/>.yoyo( \"\" ))(constructor = window)){@foo; } }");
tryItOut("");
tryItOut("/*for..in*/for(const __iterator__ = (new __count__: <x/>(0)) in __iterator__) eval");
tryItOut("return [1,2,3,4].slice();");
tryItOut("{}");
tryItOut("new ( /x/  <<= prototype)((let (prop = __parent__) undefined.__proto__ = <x><y/></x>)), <>RangeError(__noSuchMethod__+=let (prop = <><x><y/></x></>\t) <x><y/></x>)</>");
tryItOut("let (constructor, prototype) { throw constructor; }");
tryItOut("{for(let y in []);throw {} }");
tryItOut("return  /x/ ;\nthrow @foo;\n");
tryItOut("{;/*for..in*/for([constructor, prototype] = (0x99.prototype) in <x><y/></x>) {continue ;(<x/>); } } const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in __noSuchMethod__) {return; }");
tryItOut("M:switch(((new Iterator(__noSuchMethod__.prototype))[prop])) { default:  \"\" ;/*infloop*/for(let __noSuchMethod__ = this <= ({}); <><x><y/></x></>.__count__;  /x/ .__defineGetter__(\"prototype\", [1,2,3,4].map)) this; } { \n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in eval(\";\", *::*)) {return prototype;/*infloop*/M:for(<x><y/></x>; <><x><y/></x></>; window) yield; }");
tryItOut("/*for..in*/for(var [constructor, prototype] = <></>\f.(constructor.(<y><z/></y>)) in (new @foo())) \ngc()");
tryItOut("L: export __iterator__\n");
tryItOut("(.2.__defineGetter__(\"__iterator__\", function (__parent__, constructor) { yield @foo } )) = __parent__;");
tryItOut("while((Date(1e4 < <x/>, (-0))) && 0){let (prototype, yield = prop) { ; } }");
tryItOut("do {const function::__proto__ =  /x/g ;(function(id) { return id }); } while((+<x><y/></x>\t) && 0);");
tryItOut("{__proto__ }");
tryItOut("if(constructor) {return;return [[1]];\treturn [,,]; } else  if (this.__proto__ = (String(this.zzz.zzz, prototype = 1.3)).throw(new (--\n.2 > * >>>=<><x><y/></x></>))) {{} } else /*infloop*/for( '' ;  '' ;  /x/g ) {({});{} }");
tryItOut("M:if(eval(\"<><x><y/></x></> *= @foo\", [15,16,17,18].filter(gc, this.yoyo(*)))) { if (new (__iterator__.__noSuchMethod__ = 3.141592653589793)(__iterator__ = <y><z/></y>)) {break ; } else if(*) { if (*) {yield; }} else return;}");
tryItOut("L:if(prop.(3).watch(\"__proto__\", (new Function(\";\"))).eval(__parent__ = prototype)) {yield; } else  if (<><xxx>{prototype}</xxx></>) export *; else return;");
tryItOut("/*for..in*/for(let __iterator__ in 1.3) M:while((__count__) && 0){}/*infloop*/for(((function::prototype.__noSuchMethod__).isPrototypeOf((<y><z/></y> ? __iterator__ = <><x><y/></x></> : window))); __noSuchMethod__unwatch\"__count__\")[(p={}, (p.z = <x/>)())]; (({ __noSuchMethod__: constructor }) = <y><z/></y>.__defineGetter__(\"__proto__\", (prop).__defineSetter__))) {throw prop; }");
tryItOut("{} const __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("if(var prop = #1=[#1#], *) const __iterator__ = @foo, __count__\n");
tryItOut("if((new Exception(this))) { if ((3.141592653589793.@foo)) {Math.pow } else {yield <x><y/></x>;export prop; }}");
tryItOut("try { var prototype; } catch(__proto__) { let(prop, __proto__) { export *; } ");
tryItOut("{/*for..in*/for(__proto__ in ((<x/>)(<><x><y/></x></>))){gc() }undefined\n }");
tryItOut("L: {}");
tryItOut("while((({__iterator__ setter: <y><z/></y>, constructor: (Math.sin(<><x/*><y/></'x></>)) })) && 0){yield <y><z/></y>; }");
tryItOut("let(({ __parent__: ({ __iterator__: ({ prop: __count__, __parent__: prop }), __count__: [, __iterator__] }), constructor: ({ __count__: get }) }), prop) { for(let y in [5,6,7,8]) yield;");
tryItOut("/*infloop*/M:for(let prop =  '' ; this; <x><y/></x>) {gc() }");
tryItOut("with(this.__defineGetter__(\"__count__\", [1,2,3,4].map)){if({}\n) window else  if (({ __noSuchMethod__: __count__, prototype: prop }) = __proto__ - <><x><y/></x></>) {export __iterator__; } else /*for..in*/M:for(__noSuchMethod__ = * in <>function(q) { return q; }</>) {continue M; }; }");
tryItOut("with({constructor: ([] = <bbb xmlns=\"-1\"></bbb>.((__count__.eval(<><x><y/></x></>))))}){/*infloop*/for(var __iterator__ = ; (void 0.1).propertyIsEnumerable(\"set\"); Function()) 033; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__(null) in ((let __iterator__, __iterator__ = undefined >>> <y><z/></y>.constructor.__defineGetter__(\"prop\", (1 for (x in []))))(<y><z/></y> |= <x/>.isPrototypeOf(new (function (prop)undefined)(<><x><y/></x></>, <><x><y/></x></>))))){f }");
tryItOut("do {gc() } while((let (__noSuchMethod__, __parent__) __noSuchMethod__ = ((yield this.__defineGetter__(\"prop\"\t, function (<y><z/></y>) { return [[]] } ))) - __noSuchMethod__.([prop--].filter(Function))) && 0);");
tryItOut("{}");
tryItOut("L: {__count__.__count__ getter= (1 for (x in []));throw <x><y/></x>;\nreturn ({a1:1});\n }");
tryItOut("L:if(__noSuchMethod__[-1]) const __parent__, prototype; else  if ([1]) const __count__;");
tryItOut("yield <x><y/></x>");
tryItOut("/*for..in*/for(var __iterator__ in ((eval)(prop = *::*))){return; }\r const prop;");
tryItOut("/*for..in*/M:for(var __iterator__(\n(<x><y/></x>.(<> { (prototype); } </>))) in new Object(__parent__, <y><z/></y>)) {let constructor; }");
tryItOut("while((#0=({prop: true})) && 0)continue ;");
tryItOut("/*infloop*/for(let prop; ( /* Comment */3.__defineGetter__(\"yield\", function(q) { return q; }).__count__); [<y><z/></y>]) {const __parent__ = eval(\"function ([y]) { }\", case <y><z/></y>: default: break; case 3: (<x/>);case 1: yield true;), __iterator__ = this; }");
tryItOut("return prototype = (function(id) { return id })();");
tryItOut("/*for..in*/for(let __parent__window in @foo'haha'.split");
tryItOut("\flet (__count__ = [,,]) { var __proto__ = undefined; }");
tryItOut("L:if(<\f><x><y/></x></>.isPrototypeOf(<><x><y/></x></>)) {return;; } else {export *;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__iterator__ in window) /*for..in*/for(__parent__ in <><x><y/></x></>) {var __iterator__; }");
tryItOut("/*infloop*/for(let prototype; (prop = __iterator__.prototype); this.zzz.zzz) {(this); }");
tryItOut("while((#2=this) && 0)/*infloop*/for(const __noSuchMethod__ = Iterator([<x><y/></x>], constructor); * ^ <x><y/></x>; Boolean()[new (<x><y/></x>)()]) {\flet constructor = *::*, __proto__ = <><x><y/></x></>; }");
tryItOut(";");
