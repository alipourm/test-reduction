tryItOut("if((-1)) { if (<x><y/></x>) {return;return; }} else break ;");
tryItOut("/*for..in*/for(const prototype = prop(5.0000000000000000000000 - 0/0) in (1e81.x::@foo)) {{} }");
tryItOut("{gc()if(([].filter(Math.sin))) {return  /x/g ;/*\n*/yield <x><y/></x>; } }\nexport *;");
tryItOut("if((__noSuchMethod__ if (*::*))) {/a/giL:if(-1) return this; else  if (<x/>) {return; } else {gc()gc() } }");
tryItOut("/*infloop*/do ; while(new <><x><y/></x></> += prototype.(3/0));");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("L: {/*for..in*/M:for(prototype in ((function  __noSuchMethod__ (prop, __iterator__) { export x::prop; } )((new (033)()))))yield true;return; }");
tryItOut("L:with((5.0000000000000000000000.*)){/*infloop*/for(prototype; prototype.hasOwnProperty(\"prototype\"); 0) return <x><y/></x>; }");
tryItOut("if(\n<x><y/></x>) { if (<x/>) {throw *;var /*\n*/__iterator__, __count__; }} else {export constructor; }\nexport *;\n");
tryItOut("\n\nreturn;\n");
tryItOut("if(<y><z/></y>) if(prop.({var prototype = *;let prototype = <x/>, __parent__; })) {Math.sin; } else  if (({})) break L; else  if ( /* Comment */<y><z/></y> .@x:: (eval)( \"\" , this)) {\nexport *;throw <x><y/></x>; } else /*infloop*/L:for(var [constructor, __noSuchMethod__] = new (__noSuchMethod__)(window); ((constructor).__defineSetter__).call(this, *::*); function  __parent__ (__iterator__, __proto__) { return window } ) continue ;");
tryItOut("/*infloop*/L:while(new (5.0000000000000000000000 * <><x><y/></x></>\f)((uneval(false)))((typeof ([window].filter((5.0000000000000000000000).__defineSetter__))),  ? yield this.zzz.zzz.yoyo(this.throw(<x/>)) : [window]U)){new Function const __iterator__; }");
tryItOut("for(let y in [5,6,7,8]) return (__proto__[[z1,,]])export *;");
tryItOut("/*infloop*/L:while((({ get __noSuchMethod__ __noSuchMethod__ (__count__, __parent__) { yield this } ,  set __iterator__ __iterator__ (prototype) { __iterator__ = 3; }  }))[*::*.throw(#1=[#1#])]){/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in true) let __count__ = [1,,], constructor\n }");
tryItOut("L:with({__proto__: \r1.3}){{<>eval(\" \", false)</><xxx {__proto__}={0.1} /><x><y/></x>yyyyield; } }");
tryItOut("if(undefined) { if ((eval(\"<><x><y/></x></>\", <y><z/></y>))) {}} else ( /x/g );");
tryItOut("L: {Math.sin }");
tryItOut("let (constructor) { M:if(*) return; }");
tryItOut("let (__proto__ = [z1,,]) { export __iterator__; }\n{{}switch(@foo) { default: export prototype;break; return;break;  } }\n");
tryItOut("yield <x><y/></x>/*\n*/\n");
tryItOut("/*for..in*/for([constructor, constructor] = [15,16,17,18].some(function  prototype () { return (yield 0x99) } , (new ( /x/ )(true)).__proto__) in (<x><y/></x>).apply()) {if((try { ; } finally { {} }  > <x><y/></x>)) { if (false.unwatch(\"__iterator__\")) yield; else ;}yield; }");
tryItOut("L:with({__iterator__: true.__defineGetter__(\"__noSuchMethod__\", function   /x/g  (set, __count__)*::*)})var __proto__;");
tryItOut("/*infloop*/while(([3 >= *::*])){return <x><y/>\r</x>; }");
tryItOut("L: {yield window; }");
tryItOut("break M");
tryItOut("with((__parent__ = [15,16,17,18].some([1,2,3,4].slice, __iterator__).unwatch(\"__count__\")))export prototype;");
tryItOut("with({__proto__: prop = __noSuchMethod__})__count__");
tryItOut("/*infloop*/M:do {(null);export *; } while(var prop = __noSuchMethod__, __noSuchMethod__ = <x><y/></x>)\n");
tryItOut("\rlet (__noSuchMethod__ = (@foo if ((function ([y]) { })()))) { /*infloop*/L:for(let constructor; window + <x><y/></x>; ((<><x><y/></x></> for each (prototype in <y><z/></y>)))) {export prop;Function } }");
tryItOut("switch([[1]]) { case 0: @foo;default: break ; }");
tryItOut("/*infloop*/for(__count__; true; <x><y/></x>) {yield <y><z/></y>;return; }\n");
tryItOut("L:while(( \"\"  < <><x><y/></x></>) && 0)gc()");
tryItOut("if(<><xxx {__count__}={[1]} /></> instanceof function::__parent__ = [__parent__, __proto__, __count__]) {/*infloop*/for(const __count__ = [11,12,13,14].filter; yield try { let prop = <><x><y/></x></>; } finally { gc() } ; <><x><y/></x></>.__parent__ = <x/>) {( '' );{} }/*infloop*/for(const ({ prop: *['__proto__'], constructor: ({ __parent__: __noSuchMethod__, __proto__: ({ __iterator__: prop }) }) }) = __parent__; this.zzz.zzz; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.__defineGetter__(\"prop\", function  __count__ () { export *; } )) throw  /x/ ; } else  if ((eval(\"5.0000000000000000000000\", null) = @foo++)((((({__count__: true})).watch(\"__parent__\", function (({ __iterator__: [__noSuchMethod__, __count__, , , ], prop: ({ prop: prototype }) }), __noSuchMethod__) { return \n(new (function () {  } )()) } ))(<><><ccc:ddd> </ccc:ddd></></>.__parent__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee>, ([15,16,17,18].filter(function(q) { return q; }, <x><y/></x>)((p={}, (p.z = <><x><y/></x></>)()))))), prop = <><x><y/></x></>)) /*infloop*/while(<xxx  get{constructor}={constructor} />.(<x/> for (5.0000000000000000000000 in  \"\" )))/*for..in*/for(__noSuchMethod__(*::*) in <x><y/></x>) {} else /*for..in*/M:for(let [__iterator__, constructor] = (<x><y/></x>.(true)) in __iterator__ = false) {gc()\n\tconst __proto__, __parent__; }");
tryItOut("with(((p={}, (p.z = *::*.yoyo(__proto__).propertyIsEnumerable(\"prop\"))()))){/*infloop*/for( ''  !== <x><y/></x>; null\f.__lookupSetter__(\"__iterator__\"); (-0)) {gc()var constructor; }gc() }");
tryItOut("return this.zzz.zzz;");
tryItOut("let(prop = (0x99 .@ <y><z/></y>)) { return <><x><y/></x></>;");
tryItOut("with({}) throw StopIteration;");
tryItOut("M:with({__parent__: (__proto__ = 0x99)})yield <><x><y/></x></>;");
tryItOut("let(yield; =  /x/ , __noSuchMethod__ = [[]]) ((function(){gc()})());");
tryItOut("if(3.141592653589793 ? <y><z/></y> : this && prop = #1=[#1#]) new String(function::__parent__); else  if (window.watch(\"__count__\", <x><y/></x>)) {(__proto__) = __noSuchMethod__;/*infloop*/for(let ({ prototype: ({ __parent__: __proto__, __iterator__: constructor }), __iterator__: ({ prototype: prototype }) }) = constructor[<><x><y/></x></>]; <><x><y/></x></>--; (prop = <x/> ^=  /x/g )) {;L:while((<><x><y/></x></>) && 0){{} } } }\r else {{yield  '' ; }export __iterator__; }");
tryItOut("do 'haha'.split while((<x><y/></x>) && 0);");
tryItOut("with(delete null){const __noSuchMethod__; }");
tryItOut("L:while((window.__lookupGetter__(\"__proto__\")) && 0){for(let y in []); }");
tryItOut("L:if(prop && <x/>) gc() else gc()");
tryItOut("__parent__, x::constructor = *;");
tryItOut("/*for..in*/for(const __iterator__ in *) null\n/*infloop*/for(var prototype = window; (null.__defineSetter__(\"prop\", function(y) { yield y; return <x><y/></x>;; yield y; })); constructor = window) (0x99);");
tryItOut("/*for..in*/L:for(let __count__ = ({ constructor: ({ __parent__: [], __noSuchMethod__: constructor }), __count__: ({ __proto__: [{export *;function  __count__ (__parent__) { ; }  }, prop, __iterator__], prototype: ({ __noSuchMethod__: constructor }) }) }\r) = (p={}, (p.z = @foo)()) in this) /*infloop*/do /*for..in*/for(function::__noSuchMethod__ in *) {export constructor; } while(3.141592653589793 || \t<x><y/></x>);");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(const (prop) in  '' ) ");
tryItOut("this.zzz.zzz;");
tryItOut("while((prototype = <x><y/></x>) && 0){;throw <x/>; }");
tryItOut("/*for..in*/for([__proto__, __iterator__] = [*.valueOf(\"number\").__iterator__ for (prop.prototype in ({yield:  /x/ }) ^= null)] in new <x><y/></x>(<x><y/></x>)) continue ");
tryItOut("/*for..in*/M:for(const prop in __parent__) {yield;export *; }");
tryItOut("/*for..in*/L:for(({ __iterator__: prop, prop: [, , ({ __count__: __proto__, \t: __proto__ })] }) =  in (prototype = try { export __proto__; } finally { ; } )) {/*infloop*/for(prop = <y><z/></y> += <><x\t><y/></x></>; new  /x/ (function::__proto__); (window)) {/*infloop*/for(try { yield [z1]; } catch(prototype if __count__) { return; } catch(__proto__) { return -0; } finally { gc() }  =  '' ; <><x><y/></x></>; <x><y/></x>) export *; } }");
tryItOut("for(let y in []);");
tryItOut("L: {if(*::*.yoyo((-0))) {continue ;yield; } }");
tryItOut("if(constructor = <x><y/></x>) { if (()) {const __parent__, __iterator__ = undefined;(__iterator__); }} else /a/gi");
tryItOut("/*infloop*/for(let function::__proto__; this.__defineGetter__(\"__count__\", 'haha'.split); ({ prop: ({ prop: constructor }) }) =  /* Comment */(p={}, (p.z = 0.1)()) ? __iterator__.__iterator__ :  /x/g .__count__.__defineSetter__(\"prop\", [1,2,3,4].slice)) {yield __parent__.watch(\"__count__\", [1,2,3,4].slice);/*infloop*/L:for(var __iterator__; <y><z/></y>; ({})) {throw {}; } }");
tryItOut("if((<x><y/></x>.__defineSetter__(\"prototype\", (new Function(\"{return __parent__;033; }\"))))) { if (<>(new __proto__()\n)</>) L:if()  else  if ((*::* >> prop)) {1e4throw  /x/ ; } else yield {}; else {const __parent__, prototype; }}");
tryItOut("/*infloop*/while(1e4)false;");
tryItOut("with(__proto__ = <><x><y/></x></>)");
tryItOut("if( /* Comment */(new (({a1:1}))(*::*, <x><y/>\f</x>))) {{}if((([1,,] / undefined) in <x><y/></x> , <x><y/></x>)) if(<y><z/></y>) { if (*::*) return -0;} else {propreturn <x><y/></x>; } }");
tryItOut("/*infloop*/for(var prop; prototype = false; this.__defineSetter__(\"constructor\", Function).__parent__) {yield (constructor = __noSuchMethod__); }");
tryItOut("{}\nyield;");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(__parent__ = window &= <><x><y/></x></> in this) {prototype; }");
tryItOut("let prop, __iterator__ = this\nif(this) {(function ([y]) { });return null; } else  if (#1=[#1#]) return;");
tryItOut("L:if(<><{__parent__}><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></{__parent__}></>) {if(__proto__(this)) {throw <><x><y/></x></>;__iterator__ = *; } else {}with(<x><y/></x>){export *; } }");
tryItOut("throw StopIteration;");
tryItOut("let (__noSuchMethod__ = *::*) { gc() }");
tryItOut("/*infloop*/for(({ prop: prop }) = (this).apply; [z1,,].__lookupGetter__(\"prop\"); let (__iterator__ = window.eval(<><x><y/></x></>), prop) (({constructor:  '' }))[constructor.__count__ = ]) export *;");
tryItOut("/*infloop*/while([,,]){yield 4.; }");
tryItOut("do {{}[1,2,3,4].slice } while(((__count__ = (prototype\n))) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__parent__ in ((new Function)(((<><x><y/></x></>)())(this.zzz.zzz)))){yield; }");
tryItOut("/*for..in*/for(var [constructor, __parent__] = __parent__ in <x><y/></x>) /*\n*/{export __noSuchMethod__; }");
tryItOut("{const constructor;evalvar __noSuchMethod__ =  \"\" ; }");
tryItOut("L: {return <><x><y/></x></>; }");
tryItOut("export __parent__\t;");
tryItOut("if(false) ; else  if (<><x><y/></x></>) {export *; }");
tryItOut("if(((function(id) { return id } -= window)(__count__ = window, __iterator__ = <x><y/></x>))) with(<x/>){; } else  if (typeof __noSuchMethod__[ /x/ ]) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in window) ; } else [,,];");
tryItOut("for(let y in [5,6,7,8]) const __proto__;");
tryItOut("{function  prop (prop, __noSuchMethod__) { return <x/> } export __iterator__; }");
tryItOut("{}");
tryItOut("{throw <x/>; }");
tryItOut("with({__noSuchMethod__:  '' }){ }");
tryItOut("if((gc).call) {;continue M; } else {(true); }");
tryItOut("M:if(prop != window) gc() else  if (this) let __iterator__; else {([,,]);; }");
tryItOut("if(\tyield @foo <<= *::*) {} else  if (([({ __iterator__: ({ prototype: __count__ }) }), [], , ({ __proto__: ({ __proto__: __proto__, __proto__: __count__ }), __iterator__: __noSuchMethod__ })] = __noSuchMethod__ = __count__.__parent__)) {export *;const function::__iterator__, __noSuchMethod__; }");
tryItOut("/*infloop*/while(1e81){}");
tryItOut("let (prototype = --function ([y]) { }) { ; }");
tryItOut("with((__iterator__.__count__))");
tryItOut(" get __noSuchMethod__(({ __noSuchMethod__: [__proto__, , ({ __parent__: ({ __proto__: __noSuchMethod__.prop }), prototype: ({ __iterator__: prop(null ? <x><y/></x> : *) }) }), __count__] }), ({ __proto__: ({ prototype: [, ({ __parent__: [__parent__, , ] }), , , __noSuchMethod__] }) })) { while((window) && 0)export *;(-0)\n } ");
tryItOut("/*infloop*/for(let __noSuchMethod__; __parent__.__noSuchMethod__; (<xxx>{prop}</xxx>.hasOwnProperty(\"__noSuchMethod__\"))) {L:if(__parent__) throw [,]; else  if (0x99) yield @foo; }");
tryItOut("{return prototype;{} }");
tryItOut("/*infloop*/for(<><x><y/></x></>; window\n < ![[1]].__lookupGetter__(\"__parent__\"); __count__ = false.watch(\"__proto__\", function(y) { yield y; gc(); yield y; })) with(yield window)M:while((this) && 0){throw <x><y/></x>; }");
tryItOut("{yield ({});yield window; }\n");
tryItOut("let(__count__ = (new *::*())) ((function(){{}})());");
tryItOut("L\t:if(@foo) continue ; else  if (undefined) gc() else {var __count__ = 0; }");
tryItOut("L: {__proto__ = -3/0, prototype = this;#1=[#1#]; }");
tryItOut("/*infloop*/while//h\n(<x><y/></x>){return var constructor = window, 3;; }try { 3/0; } catch(__noSuchMethod__) { throw *::*; } \n");
tryItOut("/*for..in*/\rfor(const [__count__, (<y><z/></y>)()] = new (function  __count__ () { yield undefined } )(prototype) in [,,z1]) {yield;; }");
tryItOut("switch(\n(constructor.prop)) { case 4: L:do gc() while(([11,12,13,14].filter) && 0); }");
tryItOut("");
tryItOut("/*infloop*/for(let __parent__; (prototype = <><x><y/></x></> >>= @foo); var __noSuchMethod__ = #2=true if (<x><y/></x>.constructor = __iterator__)) gc()");
tryItOut("gc()");
tryItOut("/*for..in*/for(//h\n(p={}, (p.z = null)())['x::prototype'] in (void  /x/ )) {const __count__ = prototype, __noSuchMethod__ = [1,,];const __proto__ = #1=[#1#], __noSuchMethod__; }");
tryItOut("do var __proto__, prop = undefined; while((true) && 0);");
tryItOut("let (__noSuchMethod__ = <><x><y/></x><\t/>) { ; }");
tryItOut("if(0.1) return;");
tryItOut("/*infloop*/__proto__");
tryItOut("L:if(<x><y/></x>) break L; else __noSuchMethod__, __proto__ = constructor; const constructor;");
tryItOut("L: throw #3={a:#3#}");
tryItOut("let;");
tryItOut("yieldgc()");
tryItOut("M:while(((__proto__.__proto__ = yield)) && 0){/*infloop*/while(__proto__){<y><z/></y>; } }");
tryItOut("if(<x/>\n /= (*::*.isPrototypeOf(<><x><y/></x></>\n))) with({})  else  if (__noSuchMethod__-=-0.isPrototypeOf({})) {export *; }\nyield null; else {throw __proto__; }");
tryItOut("/*for..in*/for(var __count__ = ((p={}, (p.z =  '' )())) in void <x><y/></x>) /*for..in*/M:for(prop in prop.prototype = [15,16,17,18].map([1,2,3,4].map, __iterator__)) ((<><x><y/></x></>)[<x/>])(<x><y/></x> !== window)");
tryItOut("do {throw @foo;return prop; } while((*::*) && 0);");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("/*infloop*/do {3.141592653589793; } while(<><x><y/></x></>);");
tryItOut("/*for..in*/for(const ({ prototype: ({ __iterator__: __proto__, prototype: __parent__ }) }) in ((--3/0))) {return <x/>;/*for..in*/for(var __count__ in ((function  constructor (__iterator__) { return __noSuchMethod__ } )(__proto__)))(1 for (x in [])) }");
tryItOut("[1,2,3,4].map");
tryItOut("with({}) return;");
tryItOut("if(constructor = true.throw(window)) { if (<y><z/></y> <= window) {throw <><x><y/></x></>;(window); } else {return;return; }}");
tryItOut("yield ({ prototype: prototype }) = [, , , __count__];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({})['__parent__'] in <><x><y/></x></> , <><x><y/></x></>) let __proto__ = *;");
tryItOut("/*infloop*/for(<x><y/></x>.unwatch(\"__parent__\"); export *; eval(\"export __parent__;\", <x/>).valueOf(\"number\")) {__iterator__, prop = <x/>;({}).__lookupGetter__ } const __iterator__; const prototype;");
tryItOut("/*for..in*/for(var __proto__ in ((1.3)(({} if (@foo))))){gc()return; }");
tryItOut("/*for..in*/M:for(__parent__ = new (prototype =  /x/ )(<x><y/></x>.propertyIsEnumerable(\"constructor\"), @foo) >= <><zzz> '' </zzz></> in (++[,,z1])) {gc()/*infloop*/do {gc() } while((<x><y/></x>(<x><y/></x>))); }");
tryItOut("/*infloop*/do yield; while(this); const __count__;");
tryItOut("L: {gc() }");
tryItOut("return (__noSuchMethod__.__noSuchMethod__ setter= gc);");
tryItOut("M:if(((({__count__ getter: function (__parent__, __proto__) { yield __proto__ }  }) > undefined >>= true)--)) yield; else  if (<><{__parent__\f}></{__parent__}></>) return __noSuchMethod__--; else (<><x><y/></x></>);");
tryItOut("/*for..in*/for(prototype = #3={a:#3#} !== *::* in <><> /x/g ++</></> if (prop = 5.0000000000000000000000)) do {gc()const __parent__, __proto__; } while((prototype.prototype setter= 0x99) && 0);");
tryItOut("let (({ __parent__: prototype, <><>(<x><y/></x> for (__parent__ in [z1,,]))</></>: ({ __proto__: ({ __count__: __parent__, prop: __proto__ }), prop: __noSuchMethod__ }) }), function::__count__) { (@foo); }");
tryItOut("this.zzz.zzz;");
tryItOut("let(prop = (new [1,2,3,4].map([[]], <><x><y/></x></>))) { this.zzz.zzz;");
tryItOut("if((#0=1e+81)[(p={}, (p.z =  '' )())]) {while((3) && 0){;; }/*for..in*/for(const [__proto__, prop] = [\n<x/> if (-3/0)] in ( ''  ?  \"\"  : __count__)) {} } else  if ( /* Comment */(((<x><y/></x>))[([,,] *=  \"\" )] || (__noSuchMethod__ && true.__noSuchMethod__ = [,]))) { yield  } else export *;");
tryItOut("/*infloop*/for(let ({ __proto__: prop }) = (uneval( /x/ )) < (<y><z/></y> & @foo); function(y) { yield y; do (<y><z/></y>); while((this.zzz.zzz) && 0);; yield y; }(); __parent__ = yield *((let (__noSuchMethod__ = ) __count__.__iterator__ = ('fafafa'.replace(/a/g, 'haha'.split))), @foo)) /*for..in*/for(const __noSuchMethod__ = * .@*::  /x/ \n in \t /x/g ) let __noSuchMethod__;");
tryItOut("M:switch( \"\" ) { case 0: \t([[1]]);break;  }");
tryItOut("let (__count__ = ({prototype getter: (1 for (x in [])),  get __proto__(__proto__, __noSuchMethod__) { /*infloop*/while(window){(*::*);; } }  }), ({ prototype: constructor }) = \n<><x><y/></x></>) { function  __noSuchMethod__ (__count__, constructor) { return <x><y/></x> }  }");
tryItOut("if( /* Comment */ '' ) /*infloop*/while((false.*)){return prototype;throw [,,z1]; } else /*infloop*/for(let __count__ = @foo; constructor; *::*) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in #3={a:#3#}) let prototype = <><x><y/></x></>, __parent__;");
tryItOut("__parent__ = <x><y/></x>, __proto__ = <><x><y/></x></>;");
tryItOut("/*infloop*/M:do {break ;var __noSuchMethod__ = , __proto__ = <><x><y/></x></>; } while(this.zzz.zzz);");
tryItOut("/*infloop*/for(<y><z/></y> ? prop = <x><y/></x> : false; <><x><y/></x>\f</>[<><x><y/></x></>]; ({__count__: [z1,,]}))  /x/g ['constructor']");
tryItOut("L: yield;");
tryItOut("/*infloop*/while((({prototype: (new ([constructor, prototype, __noSuchMethod__] = __noSuchMethod__.prop =  '' )(((<x><y/></x>.@*) /=  \"\" .__defineSetter__(\"__iterator__\", Math.pow)), (this.valueOf(\"number\")))) }))){eval(\"*;\", prototype);yield (p={}, (p.z =  /x/g )()); }");
tryItOut("/*infloop*/for(const prototype; ((p={}, (p.z = __proto__.__noSuchMethod__ setter= gc)())); (((4.).watch).call(<x><y/></x>, this))((__count__ > [1] @ <x><y/></x>.__iterator__ =  /x/ ))) __parent__");
tryItOut("let (__parent__.__iterator__ = __noSuchMethod__.prop getter= *) { {export prop;yield function ([y]) { }; } }");
tryItOut("/*infloop*/do {/*infloop*/for(false; window;  \"\" ) <x/> } while(this.__defineGetter__(\"__proto__\", (new Function(\"Math.sin\"))));");
tryItOut("if(() -= constructor = new ([,,z1])( /x/g , this)) { if (([__proto__, ({ prop, , ] = prop)) {return; }} else {const prototype, __noSuchMethod__ =  \"\" ;/*for..in*/for(let constructor in window) {yield;yield; }\r }");
tryItOut("/*infloop*/for((function (constructor) { yield (new (__iterator__%= \"\" )(this.zzz.zzz)) } ).call(new Math.sin([,], __noSuchMethod__) / eval(\"false || window\", __parent__ === function(id) { return id }), throw __count__.__defineGetter__(\"prop\", gc), (let (__noSuchMethod__, __parent__)  '' )); __parent__; constructor = (new (<><x><y/></x>\t</>)((-1), 3.141592653589793))) ");
tryItOut("switch([11,12,13,14].map) { case __iterator__.prop: break;  }let(__count__) ((function(){throw window;})());");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/while(RangeError((window)[window])){throw window; }");
tryItOut("(({prop: (<x/>.yoyo(*::*))}))\n/*for..in*/L:for(prototype in <y><z/></y>) {export *; }");
tryItOut("M:if(typeof this) { if (({ get __count__() { const constructor = 3, prop = #1#; }  })) export *; else gc()}");
tryItOut("let (__proto__, constructor = 3.141592653589793) { L:if(prop.(<x><y/></x>)) { if (this.__defineSetter__(\"__iterator__\", function  prototype () { (__proto__); } )) __parent__, __parent__\t; else Function\n;\n} }");
tryItOut("M:switch((null.yoyo(window))) { default: break; case 1: break; case (({a1:1})[*::*]): break; break;  }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (this.zzz.zzz); (this.__defineGetter__(\"__count__\", (((new Error()) .@*:: [,,z1])).__defineSetter__)).isPrototypeOf(<>(<x><)y/></x></>)) {var __noSuchMethod__, prop = <x/>;L\t:if() {delete; } else  if (;) throw <><x><y/></x></>; }");
tryItOut("try { with({}) yield #1=[#1#]; } catch(__iterator__) { this.zzz.zzz; } ");
tryItOut("try { for(let y in [5,6,7,8]) {} } catch(__parent__) { yield (<x/>); } ");
tryItOut("let (__count__ = <x><y/></x>, __proto__) { ; const __parent__; }");
tryItOut("if(\nundefined) { if ((#0=[prop = this])) return window;} else /*for..in*/L:for(let __noSuchMethod__ in ((new Function)(window)))yield <><x><y/></x></>;");
tryItOut("/*infloop*/for((__iterator__(__proto__\f) = (function ([y]) { })() ? 0/0 : undefined); (function ([y]) { })(); (3.141592653589793\n)(<x><y/></x>)) {prop = <x><y/></x>;do /*for..in*/for(var __proto__ in <x><y/></x>) {export *;yield 033; } while((((__count__)(<x/>, 1e+81))) && 0); }");
tryItOut("if((({ constructor: ({ constructor: __proto__ }), __iterator__: ({ prototype: prop }) }) = ({ __proto__: ({ __parent__: 1e-81 }), prop: __noSuchMethod__ }))) { if (<y><z/></y>) throw <><x><y/></x></>\f;} else {yield <y><z/></y>;__proto__, prop = <><x><y/></x></>; }");
tryItOut("{return arguments; const prototype;with({__proto__: (undefined)[*]})export *; }");
tryItOut("let (constructor) { if(([15,16,17,18].map((false).apply, *))) export constructor; else {(<x><y/></x>); } }");
tryItOut("for(let y in [5,6,7,8]) with({}) { this.zzz.zzz; } ");
tryItOut("M:switch(<x><y/></x> - <x><y/></x>) { default: yield null;break; {}break; case 1: case 8: export *;break; case 4: if(0x99) {__count__ getter: (undefined).__defineSetter__ } else {this__parent__, __count__; }break;  }");
tryItOut("try { var ({ constructor: __count__, __noSuchMethod__: __noSuchMethod__ }) = (prototype = constructor); } catch(prototype if (function(){constructor = __parent__;})()) { let(__count__ = (x::prototype = *).propertyIsEnumerable(\"prototype\")) { with({}) throw StopIteration; } ");
tryItOut("throw  \"\" ;");
tryItOut("/*infloop*/M:do {var __noSuchMethod__ = <x><y/></x>; }\f while(true);");
tryItOut("with({}) ;");
tryItOut("if(<><ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></>) {yield;; } else  if ((<x><y/></x>.__lookupSetter__(\"prop\"))) (constructor); else yield prop;");
tryItOut("\nlet __count__ = #3={a:#3#}, __iterator__\nbreak M;");
tryItOut("if((@foo)()) __proto__;");
tryItOut("with({}) { for(let y in [5,6,7,8]) gc() } ");
tryItOut("/*infloop*/L:for(undefined; <y><z/></y>; undefined['let']) export *;");
tryItOut("return  \"\" ;");
tryItOut("/*infloop*/for(<x><y/></x>;  '' ; this) {gc() }");
tryItOut("/*infloop*/for(@foo; (--<x><y/></x>); eval(\"{}\", null).hasOwnProperty(\"prototype\")) {constructor }");
tryItOut("switch(({__noSuchMethod__: <x/>})) { case (eval)(prop|= /x/g .__proto__ = [, , __parent__, ] = return *): default: with((uneval(constructor.__parent__)).__defineSetter__(\"prototype\", ({}).hasOwnProperty)){__noSuchMethod__.constructor getter= @foo; }case new Function(false, this).prop: M:while((({ __iterator__: prop })) && 0)export *;break; case (): break; let __proto__, __iterator__ = 5.0000000000000000000000;case 8: break; case 2: __parent__ = [,], __count__;case (prop = *):  }");
tryItOut("return;");
tryItOut("throw constructor;");
tryItOut("L: /*for..in*/for(let 0/0['constructor'] in true) { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__count__.prop) in 'fafafa'.replace(/a/g, function(y) { yield y; if(<x/>) {yield null;continue M; } else  if (__noSuchMethod__) var __count__ = this, constructor = this; else gc(); yield y; })) {return __iterator__ = <x><y/></x>; }");
tryItOut("do {__proto__; } while((<y><z/></y>) && 0);");
tryItOut("M:with(Object((<><x><y/></x><\f/> for each (prop in ({a2:z2}))), *::*.__lookupSetter__(\"__parent__\")))with(((<x/>()) |= false.__count__ = window)){}");
tryItOut("{var __count__; }");
tryItOut("return <><bbb xmlns=\"[] = @foo\"> </bbb></>;");
tryItOut("with(__count__)prop\nM:if(1e+81) ;\n\n");
tryItOut("with({prototype: [window].filter(new Function)})yield;");
tryItOut("let ( /x/g .__defineSetter__(\"constructor\", Function)) { yield function ([y]) { }\nyield; }");
tryItOut("export *;");
tryItOut("{export __proto__; }\t");
tryItOut("/*for..in*/for(let (prop) in ((__parent__ :: yield true)([1,,] >=  \"\" ))){function(y) { yield y; export prototype;; yield y; } }");
tryItOut("if(prop) { if (#3={a:#3#}) var __count__ = null, __iterator__ = <><x><y/></x></>;} else yield;");
