
tryItOut("return; const __count__;\nwith({__proto__:  '' }){let prototype = <y><z/></y>; }\n");
tryItOut("L:if([true].some(Math.pow)) {<><x><y/></x></>; }");
tryItOut("with({}) export *;");
tryItOut("L:if(\nprop) constructor else  if (@foo) {if(__count__) const constructor; else false; } else {;/*for..in*/for([__count__, __proto__] = * in <x><y/></x>) {continue M;const __iterator__, \u2028; } }");
tryItOut("/*infloop*/for(let ({ __proto__: __iterator__ }) = true; eval(\"1.2e3\", <><x><y/></x></>); <x/>) gc()");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("switch(({__parent__: <x><y/></x>, prop: <x><y/></x> })) { default: /*infloop*/for(const $; <><x><y/></x></>\n; window) gc()case 7: [z1,,] const prototype;break; case 'fafafa'.replace(/a/g, (({}).hasOwnProperty).apply): ; }");
tryItOut("/*for..in*/for(var __count__ =  /x/g  ^ {gc() } in  /* Comment */this) {let __iterator__, constructor = function(id) { return id };let = <x/>, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("with({}) { prop.prop = constructor; } ");
tryItOut("let (prop = this.__lookupGetter__(\"constructor\")) { if([,,z1]) { if (( /x/g )[<x><y/></x>]) export __count__;} else if(true) { if (true) * else gc()} }");
tryItOut("let (__parent__) { /*infloop*/for((({ set __count__() { yield <><x><y/></x></> } ,  set __noSuchMethod__(__iterator__) { throw [[1]]; }  }))(__noSuchMethod__\n.isPrototypeOf(__iterator__.__noSuchMethod__)) = (function(y) { yield y; (<y><z/></y>);; yield y; })(); ({__count__ setter: [1,2,3,4].slice }); null)  }");
tryItOut("with(__iterator__ = @foo)/a/gi const __iterator__;");
tryItOut("const __parent__, __count__ = prototype;");
tryItOut("let prop = *, prop = <y><z/></y>;\n/*infloop*/L:while([[]])\n");
tryItOut("switch(((<><x><y/></x></>)(window) |= eval(\"[]\", window))) { case 2: (({a1:1})).watchbreak; *::*;default:  }");
tryItOut("([[1]])");
tryItOut("\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 0x99) 'haha'.split");
tryItOut("/*infloop*/L:for(let ; (__parent__ =  \"\" ); eval(\"{}\", new  \"\" ())) {return function ([y]) { }\n; const __proto__; }");
tryItOut("with({}) {  for (prop in <><x><y/></x></>) if (1e-81) } ");
tryItOut("/*infloop*/for([({ __parent__: ({ __noSuchMethod__: constructor }) }), ] = yield 1.3 .@*:: __noSuchMethod__; null ? undefined : window.valueOf(\"number\"); -<x><y\r/\t></x>) {__noSuchMethod__; }");
tryItOut("yield <y><z/></y>;");
tryItOut("if(__iterator__.(@foo)) {export *; } else {Math.powconst constructor; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__/*\n*/ = #3={a:#3#} in  /x/ ) {return <x/>; }");
tryItOut("while((((delete <x/> -= <><x><y/></x></>) || new window.throw(<x/>)()++)) && 0){switch(<><x><y/></x></>.* != <x/>) { case new (p={}, (p.z = <><x><\ty/></x></>)())(prototype.__iterator__ = *, -3/0): /*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__proto__ in window) yield;break; break ;case 7: __iterator__;break;  }return 0; }");
tryItOut("try\f { __parent__ =  /x/g ; } catch(__proto__) { yield; } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in (<><x><y/></x></>.isPrototypeOf(this).@*)) \n");
tryItOut("if(*) {export *;(undefined); } else {return @foo;var __proto__; }");
tryItOut("{do __proto__ while((__noSuchMethod__, __iterator__.hasOwnProperty(\"__parent__\").hasOwnProperty(\"__noSuchMethod__\")) && 0); }");
tryItOut("L: {gc() }");
tryItOut("do {(this)\n } while((*::*) && 0);");
tryItOut("{/a/gi/*for..in*/for(prototype in this.__defineSetter__(\"__iterator__\", ((1 for (x in []))).apply)) while((null) && 0)throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __proto__ in \t(((__noSuchMethod__).watch)(__noSuchMethod__ = __noSuchMethod__))){/*for..in*/L:for(const [__iterator__, prototype] = null.unwatch(\"__iterator__\") in <x><y/></x> <<= 1.2e3) propL: {yield {}; } }");
tryItOut("{\tif(#3={a:#3#} !== 1e-81{ if ([<><x><y/></x></>]) } else {{} } } const __parent__;");
tryItOut("let (prototype = (eval(\"function  prop (prop) { return <x><y/></x> } \", constructor) !== ++this)) { gc() }");
tryItOut("L:with({__iterator__: <x><y/></x>.*}){; }");
tryItOut("/*infloop*/do {return function () { yield <x/>; } ; } while((function(q) { return q; })(this.__defineSetter__(\"prop\", function  __parent__ (prototype)<><x><y/></x></>), -prototype.__noSuchMethod__ getter= <y><z/></y>));");
tryItOut("{__noSuchMethod__, __proto__ = window; }");
tryItOut("if((__noSuchMethod__ = @foo.__lookupGetter__(\"prototype\"))) { if (new ((yield <x/>))((<x><y/></x>.( '' )), __proto__)) ; else {{} }}");
tryItOut("throw <><x><y/></x></>; const __noSuchMethod__;");
tryItOut("switch(\t({ set __iterator__() { return {} }  }) !== #1=({__proto__: 3/0})) { default: return  /x/ ; const __count__;break; case 8: break; ({}).__lookupGetter__ }");
tryItOut("export __proto__;");
tryItOut("/*infloop*/for((prop = constructor.__lookupGetter__(\t\"__proto__\")); eval(\"({})\", <x><y/></x>) & __iterator__ = <x><y/></x>.propertyIsEnumerable(\"__proto__\"); ((yield [1]()))) {if([z1,,]) {return;yield <><x><y/></x></>; } }");
tryItOut("throw StopIteration;");
tryItOut("while(([this].map(null)) && 0)M:if(0/0) { if (false) {var __proto__, __count__ = __noSuchMethod__; } else {yield; }}");
tryItOut("L:do {L: {const __noSuchMethod__, __parent__;break L; } } while((1.3.@foo) && 0);");
tryItOut("yield undefined;");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split)) {let __proto__; } else {var __parent__ = 1.2e3, __noSuchMethod__ = this;(*::*); }");
tryItOut("let (__count__ = 'fafafa'.replace(/a/g, Math.pow)) { {} }");
tryItOut("M:if( /x/g [prop]) gc()export prototype; else  if (@foo.watch(\"prototype\", (new Function(\"\")))++ != arguments) {__proto__: <x/>eval }\t else var constructor, __iterator__ = <y><z/></y>;");
tryItOut("");
tryItOut("L: {constructor, constructor;var constructor, __proto__ = -1; }");
tryItOut("/*for..in*/for(let <><x><y/></x></>['prop'] in __count__) ");
tryItOut("{return;export *; }");
tryItOut("L:if(let (__iterator__ = *::*) <x><y/></x>) {prototype }");
tryItOut("(([arguments if ([])]));\nexport __iterator__;\n");
tryItOut("M:if(yield @foo) { } else  if (<><x><y/></x></>.propertyIsEnumerable(\"prop\")) {([1]).watch }");
tryItOut("/*infloop*/L:for(var prototype = let (__noSuchMethod__) window; ([11,12,13,14].sort); __iterator__.yoyo(__count__)) {switch((( '' .__proto__))(([0/0]))) { default: (__noSuchMethod__);break; case 5: break;  } }");
tryItOut("throw StopIteration;");
tryItOut("L:switch(({}).unwatch(\"prototype\")) { __iterator__, __iterator__ = <></> }");
tryItOut("/*infloop*/for((void (\n(<x><y/></x>.hasOwnProperty(\"__count__\")))(<x><y/></x>(), (eval).call(0, <><x><y/></x></>))).prop; (__parent__ = (this.zzz.zzz)); (({prop: #1=[#1#]})).__defineGetter__(\"prop setter: [1,2,3,4].map\", Function)) if(false) {yield  '' ; }");
tryItOut("/*infloop*/for(__proto__ = <x><y/></x>; ([ '' ].sort(Math.sin)); (__noSuchMethod__)) (*::*);");
tryItOut("with({}) export __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) let(__proto__, __proto__) { throw StopIteration;");
tryItOut("var __parent__ =  /x/ , prop = __proto__\nconstructor: (1.3.__proto__)");
tryItOut("L: {{function  prototype (__noSuchMethod__, prototype) { yield false } yield constructor; }let function::prop\nlet __count__, __parent__ = {}\t;/*infloop*/while(window)throw []; }");
tryItOut("this.zzz.zzz;");
tryItOut("yield;");
tryItOut("with({__noSuchMethod__:  /x/ }){yield *::*; }");
tryItOut("L:if(((prop = <><x><y/></x></>) in __noSuchMethod__.(<y><z/></y>))) return;");
tryItOut("with(new __parent__ = <><x><y/></x>//h\n</>){M:switch([z1,,]) { default:  }with((__iterator__.__proto__ getter= eval)){1e-81throw true; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__((uneval(*))) in new \nwindow(prop = __iterator__)) /*infloop*/while(3/0){\f{}prop }");
tryItOut("if([4. for (__iterator__ in <><x><y/></x></>) for ( \"\" .__iterator__ in 0/0) if (<x><y/></x>)]) L: __iterator__ else  if ((({ prototype: ({ __proto__: __noSuchMethod__ }) }) = <y><z/></y>.yoyo(<x><y/></x>))) gc() else {{throw window;export *; } }");
tryItOut("switch(<><zzz>(gc).call(, false >>>=undefined, *::*)</zzz></>) { case (\tlet (({ prototype: __count__, prototype: __iterator__ }), prop = prototype) 0.1): with({prop: <x><y/></x>})function(y) { yield y; prop, __noSuchMethod__ = 1e81;; yield y; }case (true\n.unwatch(\"__noSuchMethod__\")): case  /x/g : break; default: break; case 9: break; case 1:  }");
tryItOut("throw __count__;");
tryItOut("\tM:if((__noSuchMethod__.__noSuchMethod__ = new <x><y/></x>(window %= 3/0, <><x><y/></x></>))) if((function ()<x/>)) {false; } else  if (({__iterator__: set, __iterator__: false })) var prototype, __parent__ = <x><y/></x>; else { { yield <x/> } ({}).__lookupGetter__ } else {return;break L; }");
tryItOut("if(<><zzz>( /x/ .propertyIsEnumerable(\"prop\"))</zzz></>) { if ((({__proto__: <x><y/></x>})).__defineGetter__(\"__proto__\", gc())) {var prop;return <><x><y/></x></>; }} else export *;");
tryItOut("/*for..in*/M:for(let [__parent__, __count__] = undefined.__proto__ = <x/> in [11,12,13,14].sort) {export *;continue M; }");
tryItOut("let (__iterator__ = (/a/gi())) { undefined; }");
tryItOut("L:with(*::*){export *;gc() }");
tryItOut("/*for..in*/for(var __proto__ in  /x/g ) yield @foo;");
tryItOut("L: yield;");
tryItOut("if(#2=({prototype: <y><z/></y>}) !== (constructor.__noSuchMethod__ getter= /a/gi)) {while((null) && 0){export __parent__; }export *; } else  if (( /x/g  ^ -- /x/g )) return;/*for..in*//* nogeckoex bug 349964 */M: for  each(var [1,,].__defineSetter__(\"prototype\", (1 for (x in []))).prop in new (<x><y/></x>)()) if((true).call(prototype: window, undefined)) ");
tryItOut("(prototype).__defineSetter__\n(1.3);\n");
tryItOut("{break ; }");
tryItOut("yield;\nconst function::__proto__, __iterator__;\n");
tryItOut("{L: <x><y/></x>; }");
tryItOut("{}");
tryItOut("throw StopIteration;");
tryItOut("if(<y><z/></y>) { if (<x><y/></x>.propertyIsEnumerable(\"__proto__\")) {{}{} }} else {(null);function(y) { yield y; const __iterator__ = <><x><y/></x>\t</>, constructor = <><x><y\f/></x></>;; yield y; } } const __proto__;");
tryItOut("if(#2=({constructor: @foo}).@foo) { if ((<x><y/></x>)(false, prop)) export *;} else /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in false) continue M;");
tryItOut("return;");
tryItOut("if((null ^= 3/0.prop)) {return;throw window; } else {[11,12,13,14].filter; }");
tryItOut("for(let y in [5,6,7,8]) try { with({}) { let(prop = undefined.prototype = @foo) { return; }  } catch(prototype if (function(){throw __iterator__;})()) { this.zzz.zzz; } catch(__proto__ if (Math.sin).call(<x/>).propertyIsEnumerable(\"__noSuchMethod__\")) { {} } catch(__parent__) { constructor = __proto__;\t } finally { for(let y in [5,6,7,8]) let(prop = false.__lookupSetter__(\"constructor\")) { (__count__); } ");
tryItOut("M:if(false <=  \"\" ) {const __parent__, __parent__; } else  if (with({}) with({}) let(constructor) ((function(){try {  } finally { return; } })());.__parent__ =  /x/  <<= this) {break L;yield; }");
tryItOut("with({}) export *;");
tryItOut("L: var __count__;");
tryItOut("L:if(eval(\"1e-81\", 3/0)) { if ((<x><y/></x>--)[<>break M;</>]) {export *; } else gc()}");
tryItOut("/*infloop*/while(1.2e3.yoyo(<x><y/></x>)){[,]; }");
tryItOut("{M:if(true(3/0)) {export __iterator__; } else let __iterator__, __count__; }");
tryItOut("export *");
tryItOut("/*for..in*/for(const __proto__.__parent__ in ((({}).__lookupGetter__)(true.watch(\"prototype\", /a/gi))))true;");
tryItOut("/*infloop*/for((constructor.__iterator__ = __proto__); *; [11,12,13,14].map) {if([]) { if (null) {yield;return; }} else {__parent__, __count__ = <x><y/></x>; } }");
tryItOut("let prop;switch(new arguments()) { default:  }");
tryItOut("/*infloop*/L:for(let __proto__ = true; []; .2) {yield; }");
tryItOut("return;");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("let(__iterator__ = <y><z/></y>.@foo |= \n[<x><y/></x> for each (prop in null)] @ (({ prototype: __parent__ }) = undefined), prototype = ((*)())) ((function(){/*for..in*/for(const [__parent__, __parent__] = 3 in  '' ) const prototype = 0.1, constructor;})());");
tryItOut("with({prototype: <x><y/></x> < \r-1})export constructor;");
tryItOut("M:with((<y><z/></y>.watch(\"prop\", ({}).__lookupGetter__))){M:with(<x><y/></x>)yield; }");
tryItOut("gc()yield;");
tryItOut("/*infloop*/for(let __count__; (--@foo for (__count__.__noSuchMethod__ in <x><y/></x>) for each (constructor in <><x><y/></x></>)); @foo .. <y><z/></y>) ;");
tryItOut("if(constructor =  \"\" ) {export *; } else export *;");
tryItOut("/*for..in*/for(var constructor in ((function (({ [__parent__, __count__, ({ prop: ({ __parent__: __proto__ }), __noSuchMethod__: ({ __noSuchMethod__: __iterator__, prototype: __count__ }) })]: [({ __noSuchMethod__: [prototype, __parent__, , __iterator__], prototype: ({ constructor: __count__ }) }), ({ function:: \"\" : ({ prototype: __iterator__ }) })], __iterator__: ({ __iterator__: ({ prop: [, , __noSuchMethod__, prototype], __noSuchMethod__: __proto__ }) }) }), ({ prop: (\r{ prototype: ({ prop: __iterator__ }), __parent__: ({ __parent__: __noSuchMethod__ }) }) })) { M:if(undefined ^ __noSuchMethod__) {return; } else  if (this !== undefined) {return __proto__;function(q) { return q; } } } )(__iterator__|=((Function)(new ( \"\" )(({a2:z2}), __proto__), 1e-81)))))export *;");
tryItOut("/*infloop*/for(__proto__; ((p={}, (p.z = false)())); #1=[arguments]) {with(this) }");
tryItOut("/*for..in*/for\t(\fprop in ((Math.sin)((<x/> < -1)))){|= }");
tryItOut("{<y><z/></y>;continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in __iterator__ = @foo) {/*infloop*/M:for(const __parent__; __count__ = constructor; function  __parent__ () { yield this } ) { } }");
tryItOut("L:do {<x><y/></x>;yield *::*; } while(((({ get __noSuchMethod__ __parent__ (__iterator__, __proto__) { yield {};, constructor: <><x><y/></x></> }))) && 0);");
tryItOut("export __count__;");
tryItOut("{/*for..in*/for(let prototype in (((Function).call)(prop))){return; } }");
tryItOut("__noSuchMethod__ = __proto__ =  /x/ ");
tryItOut("while((__count__) && 0)throw <y><z/></y>; const __parent__;");
tryItOut("L: var __parent__, constructor;");
tryItOut("L: {if(__iterator__ = __parent__) {return <><x><y/></x></>; } else  if (__proto__.__parent__ = \tthis) {throw <><x><y/></x></>; }/*for..in*/for(prototype in [,,]) {return window;; } }");
tryItOut("if((gc)(new (((<><x><y/></x></>)(__noSuchMethod__, function::__count__)) ? [1,,] : ({__noSuchMethod__: false }))())) if(false) { if ([,,]) {return <x/>;//h\nexport __iterator__; }} else gc()");
tryItOut("if(({ __iterator__: constructor }) = (1 for (x in [])).__lookupGetter__(\"x::__iterator__\")) { if (this) {/*infloop*/L:for(getter; <><x><y/></x></>; <><x><y/></x></>) {var __noSuchMethod__, prototype; } }} else export *\n");
tryItOut("L:if(prototype =  /x/g \t) {let prop = <x/>;export __iterator__; } else  if (new Boolean(<x//h\n><y/></x>)) continue ;");
tryItOut("return <x><y/></x>\nL:with((({__iterator__: <><x><\fy/></x></>}))){L:with(__iterator__.(<x><y/></x>)){return;; }(window); }");
tryItOut("/*infloop*/for(const __count__; __proto__['__parent__']|=__iterator__.__iterator__ = (new (<x/>)(<x><y/></x>,  \"\" )); (this.zzz.zzz)) {L: const __count__, prop = __count__;if([1,,].__lookupSetter__(\"__parent__\")) { if (*) {export *;\nyield;\n } else {return; }} }");
tryItOut("/*for..in*/M:for(var constructor = new Exception(((prop.valueOf(\"number\")))[(new (this.hasOwnProperty(\"__parent__\"))(__parent__.__proto__ getter= Math.sin,  /x/g  ^= <x><y/></x>))]) in __parent__.((new (Function)()))) { }");
tryItOut("throw __noSuchMethod__;");
tryItOut("L:if(<x/>) {} else  if (window) {<x><y/></x>; }");
tryItOut("/*for..in*/for([__count__, (constructor.prototype)] = @foo.__defineSetter__(\"prop\", function(q) { return q; }) in 1e81) <x><y/></x>\n{}");
tryItOut("export *;export prototype;\n;\n");
tryItOut("true\nwith([11,12,13,14].some){var __noSuchMethod__ = __noSuchMethod__, prototype;(1 for (x in [])) }\n");
tryItOut("while((constructor.__count__ getter= Function) && 0){yield new ((function(y) { yield y; return this;; yield y; }).apply)(this);__noSuchMethod__ }");
tryItOut("export __parent__\n");
tryItOut("throw (({prototype: (new (function ([y]) { })(window, [[1]]))}));");
tryItOut("/*for..in*/M:for(let __count__.__proto__ in 0/0) 'haha'.split");
tryItOut("throw __proto__;");
tryItOut("while((3.141592653589793) && 0)if((new (window.__proto__.__lookupGetter__(\"__noSuchMethod__\"))('fafafa'.replace(/a/g, function (__count__, prototype)<x><y/></x> ? window :  '' ),  '' ))) {({}).__lookupGetter__const __noSuchMethod__, __count__ =  /x/g ; } else M:if((Boolean(prop, [z1]))) { if (window) {} else {var constructor = constructor; }}");
tryItOut("while((<bbb xmlns=\"Function()\"> </bbb>) && 0){}");
tryItOut("const prototype = 0x99\ngc()");
tryItOut("let (prototype = <y><z/></y>) { /*for..in*/for(const __proto__ in (('fafafa'.replace(/a/g, function () { yield constructor } ))(window))){var __proto__, *; } }");
tryItOut("switch((p={}, (p.z = continue )())) { default: case (__iterator__ >>> <x/>): return;break;  }");
tryItOut("L:if((__count__ = <x><y/></x>)) { if ( /x/g  in  /x/g ) {gc()continue ; } else yield;}");
tryItOut("{gc()export prototype; }");
tryItOut("return ({});");
tryItOut("if(getter = (__proto__)) /*for..in*/for(constructor in (((this).__defineSetter__)(undefined)))(<><x><y/></x></>); else var prop = prototype, set = __parent__;");
tryItOut("/*infloop*/L:for(let ({ __parent__: [], __noSuchMethod__: ({ prototype: ({ __proto__: __proto__ }) }) }) = *; __parent__.isPrototypeOf(((this.__defineGetter__(\"__count__\", eval)).valueOf(\"number\"))); @foo) {throw 0.1;return\n }");
tryItOut("M:while(((<x/>(4.).eval([z1,,] >>= __iterator__))) && 0){{({}).hasOwnPropertyexport *; } }");
tryItOut("return;");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = __iterator__-= ''  in ({prototype setter: <><x><y/></x></>, __parent__: window })) ");
tryItOut("if(((<><x><y/></x></> ? [11,12,13,14].map : (arguments.@foo))())) const __iterator__ = (-1) - <x><y/></x>, __noSuchMethod__;");
tryItOut("/*for..in*/for(let __proto__.prop in ((gc)(this\n))){export __iterator__; }");
tryItOut("/*infloop*/M:while(<y><z/></y>){truereturn; }throw [1,,];");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(var [yield, prop] = ([* if (let __count__, __proto__;)] for each (__iterator__ in -3/0) if (__parent__, prototype)) in window) try { <><x><y/></x></>; } finally { return *::*; } ");
tryItOut("let (__parent__, __parent__ = function::__parent__) { break ; }");
tryItOut("function(y) { yield y; break M;; yield y; }");
tryItOut("/*for..in*/for(const [prop, __count__] = ((eval(\"*::*\", 1e-81)).*) in ((@foo.unwatch(\"constructor\")) &= window.watch(\"__noSuchMethod__\", ({}).__lookupGetter__))) {(1 for (x in []))\n }");
tryItOut("yield (-1.throw(\nthis)).isPrototypeOf(prop);");
tryItOut("let (({ __count__: ({ __noSuchMethod__: __parent__ }) }) = ((function  constructor () { yield @foo % window } )(__parent__.(eval(\"(<x/>);\", ((Math.pow).call(true, constructor))))))) { 'haha'.split }");
tryItOut("for(let y in [5,6,7,8]) let(constructor = ({prototype: __iterator__ })) { with({}) continue ;");
tryItOut("L: {{}(eval).call/*for..in*/for(let [__iterator__, __proto__] = *::* in window) {__proto__ = this; } }");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] = <xxx>{__iterator__}</xxx>.((<x/> === __count__.__iterator__ = (yield  '' ))) in *) let (__parent__ = [,] &= [,,z1], __iterator__) { const __parent__ = 033; }");
tryItOut("");
tryItOut("/*infloop*/for(prop; new this(); ({ (*::*)(<x/>): __proto__ }) = (export constructor) ? prop.delete  \"\"  getter= (Function).apply : (<x><y/></x>.(true))) {(<y><z/></y>); \"\" ;const __iterator__ = <y><z/></y>, __parent__ = prototype; }");
tryItOut("/*infloop*/for(const prototype; <x/>; window) <x><y/></x>\nyield <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (new Array())((yield window)) in yield new (function (__count__, __count__)this)()\r) gc()");
tryItOut("/*for..in*/for(let [yield, {export prototype; }] = (({ get each __proto__ () { {} }  })) in __proto__) {[1,2,3,4].slice }");
tryItOut("/*for..in*/L:for(let __parent__ = null in new 3/0() *= ( /x/ .__parent__)) try { continue ; } catch(__noSuchMethod__ if prop = [z1,,]) { prop =  '' , __noSuchMethod__; } catch(__noSuchMethod__ if (function(){;})()) { break M; } catch(__count__) { {} } ");
tryItOut("continue \n");
tryItOut("{L:if((try { yield (new ([[]])()); } finally { yield @foo.prop = @foo; } .__noSuchMethod__ = <><x><y\r/></x></>)) if( /x/ ) { if (<x><y/></x>) {yield;export *; }} else {{}throw <y><z/></y>; } else {return;return; }if((\nconstructor))  else  if (<x><y/></x>.eval(<y><z/></y>)) {let __iterator__;(1 for (x in [])) } }");
tryItOut("with({prototype: ((new (1 for (x in []))(<x><y/></x>, true){export __iterator__; }))})/*for..in*/for(prototype in 0x99) {yield; }");
tryItOut("M:if(false) { if (<x><y/></x>) {export *; }} else window");
tryItOut("__parent__");
tryItOut("/*infloop*/M:for((function(q) { return q; }).call( \"\"  if (3), ); this.__defineSetter__(\"__count__\", function(y) { yield y; let __iterator__;; yield y; }); __count__ = __proto__) {gc()break M }");
tryItOut("if([z1,,].__defineGetter__(\"prop\", new Function)) { if (\fwindow ^= [z1,,]) {throw <x><y/></x>; }} else {{}const prop; }");
tryItOut("M:if(((function ([({ __parent__: constructor, __iterator__: constructor })]) { return; } )())) yield ([15,16,17,18].map(<x><y/></x>, window)); else {let __noSuchMethod__ = <x><y/></x>, prototype; }");
tryItOut("/*for..in*/L:for(const __proto__ = -3/0 -= <x><y/></x> in #1=[#1#]) {yield 3/0; }");
tryItOut("{/*infloop*/while(<><x><y/></x></>)export __count__;/*for..in*/L:for(let __count__ in (('haha'.split)(new (new Function(\"const prop = null;\"))())))/*for..in*/for(var constructor in  /x/g ) ; }");
tryItOut("yield window;");
tryItOut("L: L:with(prop){const prop =  \"\" ; }");
tryItOut("/*for..in*/for(let constructor in null) if(<><x><y/></x></>) { if (@foo) {const __iterator__ = <x><y/></x>, __parent__; }} else {}");
tryItOut("if(<x/>) { if ((-[z1])) {new function  __iterator__ (__noSuchMethod__) { return __count__ } ('fafafa'.replace(/a/g, function (prototype, __parent__) { return  /x/g  } )); }} else return;");
tryItOut("{} const prop;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("__count__ = __iterator__;");
tryItOut("L: {var prop, constructor;return; }");
tryItOut("if(('haha'.split).apply) { if ([(<x><y/></x>)[<><x><y\f/></x></>] for (__proto__ in <><x><y/></x></>) if (<x><y/></x>)].__lookupSetter__(\"prop\")) L:if(033) yield window; else  if (new ((<x/>.__lookupSetter__(\"prop\")))(Function(<><x><y/></x></>,  /x/ ))) {\ttruegc() } else return <><x><y/></x></>;} else {}");
tryItOut("let (({ constructor: ({ __noSuchMethod__: prototype }), __parent__: __iterator__ }), __iterator__ = this.__defineSetter__(\"prototype\", function  __iterator__ ()[z1,,])) { {}return; }");
tryItOut("with({prototype: (__count__.__iterator__ = <><x><y/></x></>.isPrototypeOf(function::__count__ = <><x><y/></x></>).isPrototypeOf((<y><z/></y>)[*::* = -3/0]))}){constructor\nM:with(new <><x><y/></x></>(prop,  \"\" )){{}; } }");
tryItOut("/*for..in*/for(var [__iterator__, x::__parent__] = (prototype = window.propertyIsEnumerable(\"prop\")) in new this().@foo) {throw 033;( /x/ ); }");
tryItOut("/*infloop*/L:for(<><xxx>{__noSuchMethod__\t}</xxx></>; +__proto__; []) {{}return; }");
tryItOut("if(<x><y/></x>) {return; } else __parent__");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((((/({a2:z2}).isPrototypeOf(undefined))watch )(this = ([* for (prop in null)]))))return;");
tryItOut("__parent__\nexport *;");
tryItOut("/*infloop*/for(let ({ __count__: [__count__, ] }) = (0.yoyo(yield)); __count__.__defineSetter__(\"__noSuchMethod__\", x::__noSuchMethod__); [11,12,13,14].filter) {return; const __noSuchMethod__;(function ([y]) { })();__proto__ }");
