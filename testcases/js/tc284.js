tryItOut("L:if(((new <x/>))) { if ((eval.__defineSetter__(\"prop\", <x><y/><\t/x>.__lookupSetter__(\"__parent__\"))[[1] > [1,,].unwatch(\"__parent__\")])) L:if(prop[*]) { if (Boolean(<x/>)) {var prop, __proto__;export *; } else {prop = <x><y/></x>, constructor = <x><y/></x>; }}} else {}");
tryItOut("L: {/*infloop*/do return; while(eval(\"__count__\", *)); }");
tryItOut("with((__parent__ = *\f))if((1.3)(<x><y/></x>, <y><z/></y>)) ; else {export __iterator__;/a/gi }");
tryItOut("{let (prototype = undefined) { __count__; }{} }");
tryItOut("if(1e-81) {var __parent__; } else ((function ([y]) { })());");
tryItOut("");
tryItOut("if(<><x><y/></x></> <= <x/>) {{}var constructor = <y><z/></y>, prop = true; } else  if (function(id) { return id }.unwatch(\"__noSuchMethod__\")) const constructor, __count__ = this; else false\n/*for..in*/for(prop.prop in ((new Function)(++(function ([y]) { })()))){ }");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = __noSuchMethod__ in <><x><y/></x></>) {;return [[]]; }\n{}\n");
tryItOut("{ }");
tryItOut("{yield <x><y/></x>; }");
tryItOut("if([15,16,17,18].sort((1 for (x in [])), undefined)) { } else  if (<x/>) break L\n else {*;const __noSuchMethod__ = *; }");
tryItOut("M:if((__noSuchMethod__.(((yield window)))).unwatch(\"__count__\")) return; else 'haha'.split");
tryItOut("L:with(__parent__ .@*:: [[1]]){yield <x/>; }");
tryItOut("if( == yield true) return undefined;");
tryItOut("with({}) {  } ");
tryItOut("M:with({prop: __count__}){M:with([z1,,]){return;[1,2,3,4].map }const __noSuchMethod__ = null, __iterator__; }");
tryItOut("[[]], @foo");
tryItOut("return this.zzz.zzz");
tryItOut("if(([ /x/  ^ -3/0.@foo].map(Math.pow))) return __count__\n else  if ((([,])())) {return __proto__; } else if(1.3) { if (<x><y/></x>) export *; else {export *;return null; }}");
tryItOut("/*for..in*/for(const __count__ in (p={}, (p.z = <x><y/></x>)())) return;");
tryItOut("switch(((p={}, (p.z = #3={a:#3#})()))) { case 7: default: gc()break;  }if(constructor) { if (({a2:z2})) {export prototype;return; } else __proto__;}\n{1.2e3; }");
tryItOut("/*infloop*/for(({ prototype: ({ prototype: ({ constructor: __proto__ }) }), __count__: __noSuchMethod__ }) = ((this)(<x/>)) *= #1#; .2; <><{prototype}><xxx>{constructor}</xxx><ccc:ddd></ccc:ddd></{prototype}></>) {var __iterator__;export *; }");
tryItOut("/*for..in*/L:for((eval(\" \\\"\\\" \", [,]))((<><x><y/></x></>.@foo)) in (new Function((--undefined), (yield undefined).*))) /*infloop*/do ((-3/0).__defineSetter__).apply while(<y><z/></y>.unwatch(\"prototype\"))\n");
tryItOut("{return; }");
tryItOut("M:with(( get __noSuchMethod__ __count__ ()__iterator__ = <x><y/></x> & function::prototype) != ((uneval(__parent__;.__iterator__)))){break ;\nlet __parent__, x::prop;\nreturn [1,,]; }");
tryItOut("gc()");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = <><x><y/></x>yyy</> in  \"\" ) {; };");
tryItOut("return ({constructor: (function ([y]) { })()});");
tryItOut("let (constructor) { with({}) { var __iterator__ = <y><z/></y>; }  }");
tryItOut("if([[delete null if (<><x><y/></x></>)]].some(function (prototype, ( /x/  - prototype)) { return *::* } )) { if (((prop =  \"\" ))[prop.propertyIsEnumerable(\"__iterator__\")]) {M:\fif(prototype.__defineSetter__(\"__proto__\", [1,2,3,4].map)) { if (([ /x/g ])) break ;; else <x><y/></x>} }} else {{} }");
tryItOut("/*for..in*/for(var prototype in (<x><y/></x>.(var __noSuchMethod__ = __proto__;))) {}");
tryItOut("if(<><bbb xmlns=\"(Function).hasOwnProperty(\"__iterator__\")\"><ccc:ddd></ccc:ddd></bbb></>) { if (({__count__ getter: (function  __parent__ (prototype, __count__)<y><z/></y>).apply, __iterator__: (-1) })) {L: const __count__ = *::*, prop = __parent__; } else var prototype, __iterator__ = prop;}");
tryItOut("if([1,2,3,4].map()) { if ([1]) yield [z1]; else {yield <x><y\f/></x>; }}");
tryItOut("export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [({ __noSuchMethod__: *::*['constructor'], __parent__: constructor }), , , ] in new (1 for (x in []))((<y><z/></y>.throw(constructor = ({a2:z2}))))) if(arguments) {let constructor = window;continue L; } else export *;");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("M:do {<x><y/></x>;export *; } while(({}) && 0);");
tryItOut("L:if(<x/>++) {1e+81;/*infloop*/M:for( /x/ ; <x><y/></x>; *::*) {const __parent__ = <><x><y/></x></>;export function::prototype; } } else  if (new <><x><y/></x></>(__count__, @foo)) yield (true).watch();");
tryItOut("return;");
tryItOut("with(<y><z/></y>(<x><y/></x>)){;/*infloop*/L:for(let ({ __count__: constructor, prototype: constructor }) = prop; <><x><y/></x></> .@x:: 1e-81; ([1,2,3,4].slice)((-0))) { } }");
tryItOut("/*infloop*/M:for(__iterator__; <y><z/></y>; ) {let (__parent__ = ({__count__: * })) { gc() }; }");
tryItOut("{}\n0/0\n");
tryItOut("/*infloop*/do {return false;export *; } while( /* Comment */constructor = null); const __proto__;");
tryItOut("if(__count__.__parent__) let ([,,z1], __count__) { L:if(__noSuchMethod__) { if (undefined) {continue M; } else constructor;} const __proto__;\t } else {if([11,12,13,14].sort) { if (yield __noSuchMethod__ = *) {} else let *::* = 1.2e3;\f}eval }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(constructor = ((<x><y/></x>.valueOf(\"number\")).hasOwnProperty(\"__proto__\")) in 3/0) {var __count__; }");
tryItOut("{yield;export __parent__; }");
tryItOut("/*infloop*/L:while(@foo >>=  '' ){const prop =  '' ; }");
tryItOut("(@foo);\n/*infloop*/M:for(let __count__; __proto__; <x><y/></x>) {let __proto__; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ({ __noSuchMethod__: __proto__, __iterator__: __count__ }) = prop.__iterator__) {/*infloop*/M:while(null)const __noSuchMethod__, __iterator__ = [1,,]; }");
tryItOut("M:do {(__proto__ = <x><y/></x>.eval(<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\"))); } while((this.__defineGetter__(\"prop\", new Function)) && 0);");
tryItOut("M:while((++@foo) && 0){return;yield [z1,,]; }");
tryItOut("/*infloop*/while(<y><z/></y>)yield  /x/ ;");
tryItOut("M:if(<><xxx {constructor}={@foo} /></>) continue L; else  if (*::* .@x::  \"\" ) (<><x><y/></x></>).watch");
tryItOut("if((__count__\n = <x><y/></x>).prop = constructor = <x/> <= (new function (__noSuchMethod__, __parent__)<x><y/></x>(window) for (__iterator__ in  /x/ )).prop = window.__count__) {throw  /x/ ; }try { yield; } catch(__count__) { gc() }  if ([1]) {{}var []; }");
tryItOut("/*infloop*/for(var ({ __count__: __iterator__, x::__parent__: prototype = [z1], __count__ }) = false; 0 ^ 1.2e3; this) {const __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(let __proto__; let (__proto__) 3.throw(constructor = <x><y\t/></x>); prop.__proto__) {return [1];const prop = <y><z/></y>, prototype = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(({ __proto__: prototype }) = [, , , , ] = ({ __count__: [] }); new this(); .2.unwatch(\"__iterator__\")) {export prototype;<><x><y/></x></>; }");
tryItOut("L:if((constructor(null))) with(*::*)  if (eval(\"({})\", this))return; else  if (__iterator__ = undefined) { } else throw <x/>\r");
tryItOut("gc()");
tryItOut("switch([[,]]) { default: yield; }");
tryItOut("/*for..in*/for(const __noSuchMethod__(true != <y><z/></y>) in 0/0) {throw <!--yy-->; }");
tryItOut("{@foo\n; }");
tryItOut("{{<x><y/></x>;*::*; }yield; }\n");
tryItOut("try { <y><z/></y>; } finally { gc() } ");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("M:while((.2) && 0){return;/*infloop*/while(prop){var __noSuchMethod__ =  /x/g , __iterator__ = <y><z/></y>;yield; } }");
tryItOut("if((p={}, (p.z = --false)())) ((<x><y/></x>).watch).apply else  if (([15,16,17,18].filter(({__count__: <x><y/></x>}), this))) {try { return; } catch(__iterator__ if ({ set __proto__ __count__ (prop) { return ({}) }  })) { yield <x><y/></x>; } catch(__proto__) { var prototype; } finally { ; }  } else {continue \n{}function(q) { return q; } }");
tryItOut("let (prototype) { export __parent__; }\t");
tryItOut("try { (constructor) = __proto__; } catch(__parent__ if (function(){for(let y in []);})()) { yield null; } catch(prop if ~window) { for(let y in [5,6,7,8]) ; } catch(__proto__) { return #1#; } ");
tryItOut("if(@foo) return; else  if ((-1)) {{} } else yield\nlet __parent__ = ({}), prototype = <><x><y/></x></>;");
tryItOut("/*for..in*/for(__parent__((__noSuchMethod__ = <x/> @ null)) in (((this.\fvalueOf(\"number\")))(((yield <x/>)).yoyo((true).__count__)[<{prototype}></{prototype}>](1e81))))\tvar __iterator__ = <y><z/></y>, {const prop;throw <x/>; } = 0/0;");
tryItOut("(<y><z/></y>) break L; else ) if prototype (([15,16,17,18].filter([z1,,], <x/>))) {(this);break L; }");
tryItOut("");
tryItOut("with({prop: (<x><y/></x>++)}){do throw prototype; while((undefined) && 0); }");
tryItOut("while((this) && 0){export __proto__; }\n");
tryItOut("/*for..in*/for(const prop = <x><y/></x>.isPrototypeOf( /x/ ) in 1.2e3) {export *;function  __count__ () { return <y><z/></y> }  }");
tryItOut("if(export *\nvar function(q) { return q; }) { if (false) yield;} else {for(let y in [5,6,7,8]) with({}) { {const constructor, prop; } }  }");
tryItOut("try {  } catch(__count__) { ; } finally { return @foo; } ");
tryItOut("const __count__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (prop = <x><y/></x>)) /*infloop*/do {throw <x/>; } while((new __iterator__(<><x><y/></x></>, <x><y/></x>)));");
tryItOut("/*infloop*/for((__proto__+=*::*);  /* Comment */({}).__lookupGetter__; __count__) let __noSuchMethod__, __proto__;");
tryItOut("/*for..in*/for(const __parent__ in [1,,]) yield <y><z/></y>;");
tryItOut("L:if(constructor) if(undefined) {(#1#).watch{} } else const function::__noSuchMethod__;");
tryItOut("/*infloop*/L:for(prototype; __proto__; *::*) { }");
tryItOut("{}");
tryItOut("L:while((yield  /x/g ) && 0)\t{{} }");
tryItOut("if(yield this\f) { if ((\n__count__.__defineSetter__(\"__count__\", gc))) {/*for..in*/for(const __count__ in ((function  constructor (constructor)@foo)( \"\" --))){; } } else export prop;}");
tryItOut("/*infloop*/for(var prototype = ( ''  != (({__parent__ getter: function  __count__ (__iterator__) { return __iterator__ } , prop: ({a1:1}) }))); (this.__defineGetter__(\"constructor\", [1,2,3,4].slice)) @ (({ set __proto__ __count__ () { return (function ([y]) { })() } ,  get prototype prop (__noSuchMethod__, __parent__) { yield <y><z/></y> }  }))--; prototype.__iterator__ getter= function  prop () { (*); } ) ;throw false;");
tryItOut("/*infloop*/for(let ({ __iterator__: ({ __parent__: [, , , ], __noSuchMethod__: ({ __count__: prototype, each: __iterator__ }) }) }) = ('fafafa'\r.replace(/a/g, function  __iterator__ (\t__proto__, __proto__) /x/ )); ((prototype = (<x><y/></x>(false,  '' ))) >= (__proto__).call((-0), new __proto__ = -0(#0=({__count__: setter}), <x/>))); <><x><y/></x></> :: <x><y/></x>) {}\n(-1);");
tryItOut("/*infloop*/do {yield;(<x><y/></x>); } while(<x/> ? prop : __proto__);");
tryItOut("with({}) { let(__iterator__ = [,,], __proto__ = (this)[*::*]) { __noSuchMethod__ = __parent__; } ");
tryItOut("if((uneval(export *;.propertyIsEnumerable(\"__noSuchMethod__\"))) | new (({}).__lookupGetter__)(<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\"), 1e81).@foo) if((__proto__-=<><x><y/></x></>) :: __noSuchMethod__.yoyo((-0).__parent__ = arguments) == (uneval(( /* Comment */-3/0)))) { if (undefined) {yield <x><y/></x>; } else {if( \"\" ) <x><y/></x> else  if ([]) return; else {return __proto__; }gc() }}");
tryItOut("yield #0=({__count__:  /x/g });");
tryItOut("{let (constructor = yield <y><z/></y>) { /*infloop*/M:for(var __parent__ = __proto__; new __count__(window); <y><z/></y>) return; } }");
tryItOut("/*for..in*/L:for(let [__proto__, constructor] = new (try { gc() } catch(__iterator__ if (function(){;})()) { yield; } catch(prototype) { export *; } finally { yield; } )(__noSuchMethod__, true) in  /x/g ) {continue L;yield __count__; }");
tryItOut("yield;");
tryItOut("if() const __noSuchMethod__, __proto__ = (-1);gc() else  if (({ set constructor() { return #2=({__iterator__: __proto__}) } , prototype: ([11,12,13,14].some)[([ /x/ ])] })) *\nlet x::prop; else yield;");
tryItOut("{if(#0=({prop: this})) { if ([,]\n) {<><x><y/></x></>;__iterator__ = <><x><y/></x></>; } else yield undefined;}let __iterator__ = true, __proto__; }");
tryItOut("if(Exception(null,  /x/ ) < new  '' ( /x/g ).@*) { if (({constructor getter: Function, prototype getter: [1,2,3,4].map })\f.__defineSetter__(\"__proto__\", (<><x><y/></x></>( /x/ )).call)) {__noSuchMethod__/*for..in*/for(let constructor in <y><z/></y>) {({a2:z2});yield (function ([y]) { })(); } } else {; }}");
tryItOut(";");
tryItOut("{if(<x/>) { if (@foo) return; else {return;constructor; }} }");
tryItOut("continue ;");
tryItOut("let(__noSuchMethod__, __noSuchMethod__) ((function(){for(let y in [5,6,7,8]) let(prototype, function::__parent__) { yield 4.;})());");
tryItOut("if((((#1=[#1#]).__defineSetter__(#2=({constructor: false}))))(((\nfalse)++))) { if (__parent__ = 'fafafa'.replace(/a/g, window)) {break ;M:if(<x><y/></x>.(<y><z/></y>)) var prototype; else __count__, __proto__; } else {__proto__ = 0\nlet prop = <x><y/></x>, constructor; }}");
tryItOut("{undefined;export *; }");
tryItOut("/*infloop*/while(new (window)(<y><z/></y>).__parent__ = prop%=true <  /x/g .valueOf(\"number\"))/*for..in*/for([function::get, prop] = yield ( '' .@*) in  /x/g ) let __iterator__, __count__ = <><x><y/></x></>;");
tryItOut("L:while((typeof <x/>) && 0){(this);export prototype; }");
tryItOut("with(1.3)constructor = <x><y/></x>\n;");
tryItOut("if(this.__defineSetter__(\"__parent__\", (new Function(\"yield <> { return *::*; } </>;\")))) { { yield (({__count__ setter: function(q) { return q; } })).__parent__ }  } else {{}/*\n*/{} }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, Math.sin); prototype.__noSuchMethod__ = this.watch(\"__proto__\", ({}).watch); new new Function)) /*infloop*/L:while(3)yield <x/>\n__noSuchMethod__ = each;");
tryItOut("var prop = 0/0;\nL:with(( '' [ '' ])){export constructor;return; }\n");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = [, __parent__, constructor, prop] = getter.__count__ in ( /x/g .__defineGetter__(\"prototype\", /a/gi))) {\fyield <y><z/></y>; }");
tryItOut("throw StopIteration;");
tryItOut("export __proto__\nyield;");
tryItOut("L:if((__iterator__.__count__)) { if (( .. false)) return -0;} else {/*infloop*/M:for(var __iterator__ = *; []; <x><y/></x>) ( /x/g ); }");
tryItOut("if((<><x><y/></x></>)) {export __proto__; } else yield false;");
tryItOut("/*infloop*/L:do {; } while(#3={a:#3#}());");
tryItOut("L: {/*infloop*/for((#0=[<><x><y/></x></>]); !(*::* if (#1#)); false.isPrototypeOf( \"\" .prop)) {constructor, __iterator__ =  \"\" ; }yield <><x><y/></x></>; }");
tryItOut("if(arguments & (constructor%=[<><x><y/></x></>])) /*infloop*/for(__proto__ = window.prop; (<y><z/></y> @ [[1]]); new (5.0000000000000000000000)( '' , [z1])) yield <x><y/></x>; else  if ((yield (+1e4 ? <y><z/></y> :  /x/g  ? @foo : <x/>))) ; else const prototype\nMath.pow");
tryItOut("{/*for..in*/for(__count__ in ((function () { var __noSuchMethod__ = <x><y/></x>; } )( /x/ .hasOwnProperty(\"prototype\")))) }");
tryItOut("{\rif(1e-81 |= *::*) {throw *; } else  if (<><x><y/></x></>[false]) {throw undefined;export *; } else continue ; }");
tryItOut("switch(__noSuchMethod__ = <x><y/></x>.<x/>) { (eval(\"function::__count__\", #3={a:#3#})); }");
tryItOut("with({prop: __parent__ = __parent__.yoyo((*.isPrototypeOf(<x/>)))}){yield; }");
tryItOut("try { (*).watch } finally { function ([y]) { }; } ");
tryItOut("let(__noSuchMethod__) { try { yield prototype = <y><z/></y>; } finally { let(__proto__) { try { {} } finally { var prop = @foo; }  } ");
tryItOut("{gc() }");
tryItOut("{L: continue ; }");
tryItOut("if((window\n) ? (<x><y/></x> if (<x><y/></x>)) : (({a2:z2}))) {throw #1=[#1#];return [[]]; } else  if (<x/>.__noSuchMethod__) var __iterator__ = 1.3, prop = <x><y/></x>; else {}");
tryItOut("if((<><x><y/></x></>)()) yield  '' ;");
tryItOut("/*infloop*/for(__iterator__; window * -0;  /x/ .__defineGetter__(\"constructor\", (-0))) {export *; }");
tryItOut("/*infloop*/for(({ prototype: ({ constructor: __proto__, constructor: __noSuchMethod__ }), __proto__: [, __count__, prototype, , ] }) = this.unwatch(\"__count__\"); ({prototype setter: (1 for (x in [])), __proto__: __iterator__ = 1e81 }); 'fafafa'.replace(/a/g, function(q) { return q; })) {#3={a:#3#}; }");
tryItOut("/*for..in*/L:for(const ({a2:z2})-- in [z1,,] ? <x/> : true) {return #1=[#1#];throw this; }");
tryItOut("let (prototype, __count__) { ( /x/g ); }");
tryItOut("M:if(#0=<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {this.zzz.zzz; } else  if (<y><z/></y> && 4. ? prototype = [,,] : this.yoyo(<><x><y/></x></\f>)) this; else continue ;");
tryItOut("if(<x><y/></x>) {([,,z1]); } else let __parent__ = __count__, prototype = ({});");
tryItOut("while((constructor = @foo) && 0)switch( /* Comment */<x/>) { case -0 .@ (function ([y]) { })(): yield; }");
tryItOut("with(<x><y/></x> <<= <><x><y/></x></>.__lookupSetter__(\"__parent__\")){const prototype = false; }\n/*infloop*/while(033 << <x><y/></x>){break M; }");
tryItOut("{let prop = <><x><y/></x></>\nfunction () { return  \"\"  } \nyield  /x/g ; }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, (<><x><y/></x></>).watch); (__parent__-=<x/>); (constructor[arguments])) __iterator__");
tryItOut("*\n");
tryItOut("if((__parent__ = false)()) { if (((p={}, (p.z =  /x/ )()))) {\nwith((yield <x><y/></x>)){M:if(__count__) const function::constructor; else  if (<x><y/></x>) \f{;; } else export *; } } else {[,,];const constructor = <x><y/></x>, __proto__; }}");
tryItOut("{;switch(window) { case 5:  } }");
tryItOut(";\n\rvar x::__proto__ = 3, __parent__;\n");
tryItOut("while((let (__iterator__) (eval(\";\", window))[eval(<><x><y/></x></>, <x/>)]) && 0){\n(<><x><y/></x></>);throw <y><z/></y>; }");
tryItOut("break \nthis.zzz.zzz;");
tryItOut("M:with(yield  /x/g .throw((__iterator__)).__count__)('haha'.split).apply");
tryItOut("try { ; } catch(__count__) { export *; } finally { break ; } ");
tryItOut("/*for..in*/M:for(const (constructor) = [15,16,17,18].filter(<x/>, 1e4 <=  /x/g )\n in ! .@*:: <><x><y/></x></>) /*infloop*/for(let __parent__; [,]; <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {gc()return @foo; }");
tryItOut("with(<><x><y/></x></>)yield <y><z/></y>;\nreturn window;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in ((uneval(window)))) { }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: [prop, , , __noSuchMethod__, ] }) = @foo\n; this.__defineGetter__(\"__iterator__\", 'haha'.split); <!--yy-->) let prop = __iterator__;");
tryItOut("/*for..in*/for(var __iterator__ in [,,z1]) {<><x><y/></x></>; }");
tryItOut("with({__iterator__: (constructor = (uneval(this)))})if(__count__ = undefined) {export *;return; } else throw <y><z/></y>;");
tryItOut("L:if((({ function::prototype: __noSuchMethod__, __proto__: __proto__ }) = true ? null : 3.141592653589793)) {return; /x/ --; } else  if (1.2e3) __noSuchMethod__: <x/>");
tryItOut("{return; }\nreturn;\n");
tryItOut("L:switch((({__parent__: 0/0 }))) { default: if([z1]) {return *::*;return; } else  if (*.propertyIsEnumerable(\"__count__\")) (#1=[#1#]);break; break;  }\nfor(let y in [5,6,7,8]) __iterator__ = ({a1:1});");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = (let (__proto__ = <x><y/></x>, constructor = prototype) ({__parent__: .2})) << <><x><y/></x></>(033) in new String((prop.prototype setter= (({}).__lookupGetter__).call), <><x><y/></x></ default: break; case __proto__.__count__ \fsetter= Function: break; case 7: export *;>) instanceof <x/>) {gc() }");
tryItOut("M:if(( /* Comment */(p={}, (p.z = @foo)()))) __count__");
tryItOut("M:if(<zzz>1.2e3.yoyo(true)(({__proto__: new (prototype = *)(function::__proto__.throw(__count__), #1=[#1#])}))</zzz>) with({})yield prototype >> <><x><y/></x></>; else {break L; }");
tryItOut("{}\n");
tryItOut("yield");
tryItOut("yield\nlet constructor = <x/>, __noSuchMethod__ = __iterator__;");
tryItOut("return;");
tryItOut("{export *;yield @foo; }");
tryItOut("__parent__;export __parent__;");
tryItOut("/*infloop*/for(let __proto__; prototype.__parent__; 4..__noSuchMethod__) ");
tryItOut("L: {export *; }\n");
tryItOut("{/*infloop*/while({__parent__, __noSuchMethod__ = <><x><y/></x></>; }){}let(__iterator__ = *::*.__defineSetter__\r(\"__parent__\", <x/>).hasOwnProperty(\"constructor\"), __parent__) ((function(){let(__proto__ = ([15,16,17,18].some([1,2,3,4].slice, <><x><y/></x></>).eval(([15,16,17,18].some(<><x><y/></x></>, <y><z/></y>))))) { const __count__, __parent__;})()); }");
tryItOut("[, prop, ({ __iterator__: ({ prop: ({ __parent__: ({ __parent__: ({ prototype: ({ __count__: prototype }) }), __proto__: __parent__ }), __count__: ({ __noSuchMethod__: ({ constructor: ({ __count__: delete }) }), prototype: [, , ] }) }) }), __parent__: __parent__ }), __iterator__]");
tryItOut("{{} }");
tryItOut("throw __count__ = prototype;");
tryItOut("let (prototype = *::*) { yield; }");
tryItOut("{; }");
tryItOut("let(({ __noSuchMethod__: [] })) { __proto__ = __noSuchMethod__;");
tryItOut("with({__parent__:  /x/g [ /x/g ].valueOf(\"number\")})throw  '' ;");
tryItOut("M:if(__noSuchMethod__) {[[]] }");
tryItOut("while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0) for (__noSuchMethod__ in true) for each (prototype in window)");
tryItOut("/*infloop*/do {\tif(5.0000000000000000000000) {yield *::*;gc() } } while(this.zzz.zzz);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__(<y><z/></y> in (prototype = prop).__defineSetter__(\"__iterator__\", new Function)) gc()yield <x><y/></x>;\nexport __iterator__/*\n*/;\n\nreturn;\n");
tryItOut("M:do {yield; } while((1.3) && 0);");
tryItOut("/*for..in*/L:for(__parent__ in prototype) /*infloop*/for(let __parent__ = null; function ([y]) { };  \"\" ) prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in false) break ;");
tryItOut(";");
tryItOut("/*infloop*/for(var prototype;  \"\" ;  '' ) (<x><y/></x>).__defineSetter__");
tryItOut("if(this.__defineGetter__(\"__count__\", (1 for (x in []))) & ((*::*)[function ([y]) { }])) {let __count__, __noSuchMethod__;<x/>; } else  if (((<><!--yy--></>--) for (let.__noSuchMethod__ in @foo) if (this))[<x/> = this]) {if(*::*) export *; else  if (yield <x/>) ((/a/gi).call).apply }");
tryItOut("/*infloop*/for(var prototype; ((yield false) if (this)); <y><z/></y>) {{(new Function(\"export prop;\"))(<x><y/></x>); }{@foo; } }");
tryItOut("const constructor");
tryItOut("this.zzz.zzz;");
tryItOut("if( /x/g ) continue L; else  /x/ ;");
tryItOut("{; }");
tryItOut("with(<><y><z/></y></>.((null / <><x><y/></x></>)))gc()");
tryItOut("return 3\n(window);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (uneval(<><x><y/></x></>))) /*infloop*/L:do {'haha'.split } while(@foo);");
tryItOut("switch(prototype) { default: return @foo; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("return\n");
tryItOut("if([1,,]) export *; else break M;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in new yield <><x><y/></x></>) if(window) { if (yield) return; else {([,,z1]); }}");
