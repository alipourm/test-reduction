tryItOut("/*infloop*/do return ({a2:z2}); while(<x/>);");
tryItOut("try { return __iterator__; } catch(prop if (/a/gi).call(each = window, (window |= prop), __count__).__defineSetter__(\"__proto__\", function  __count__ (__noSuchMethod__)*::*) << __parent__ =  /x/ ) { let(prop = <x><y/></x>.__iterator__, ({ (<x><y/></x>.(null).watch(\"constructor\", function  prop () { yield [,,] } )): __parent__, constructor: ({ __parent__: [__count__, ] }) })) { export prop; } catch((-0; = new \fthrow <x/>;()).constructor\f) { with({}) { return (3.141592653589793 if (<y><z/></y>)); }  } finally { __parent__ = __parent__; } ");
tryItOut("switch(( instanceof __parent__ =  \"\" )) { default: break; case 3: /*for..in*/for(let __parent__ in (((undefined >= <y><z/></y>))((prop = (-0))))){return undefined; }break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <bbb xmlns=\"window\"> </bbb> in - '' ) {/*infloop*/while(null)yield; }");
tryItOut("while((*) && 0)");
tryItOut("if(prop) {function ()propreturn constructor; } else return;yield ({a2:z2});\nreturn true;\n");
tryItOut("if(<><x><y/></x></> .@ <x><y/></x>) (1e81); else  if (prop = <x><y/></x>) {}");
tryItOut("/*infloop*/L:do return __proto__%=[,]; while(constructor = prop);");
tryItOut("L: {(prop);throw function ([y]) { }; }");
tryItOut("/*infloop*/L:while(({ constructor: __parent__ }) = prop){(<x><y/></x>);return; }");
tryItOut("/*for..in*/for(let [constructor, __count__] = <employee id=\"1\"><name>Joe</name><age>20</age></employee> >= true in (__proto__ = new (false)(<><x><y/></x></>, [[1]]))) if((__iterator__ = undefined)) export __iterator__; else  if (false) <x><y/></x>;");
tryItOut("if( /x/ ) return;");
tryItOut("(null)\n");
tryItOut("/*infloop*/for(__iterator__; (yield [15,16,17,18].filter(function  constructor () { yield [[]] } , __iterator__)); with({}) { prototype = prop; } .hasOwnProperty(\"prop\")) {}__noSuchMethod__\n");
tryItOut("L: {(constructor);throw <><x><y/></x></>; }");
tryItOut("L:with(constructor = __proto__ = true){gc()if(__parent__) { if (3) {function(y) { yield y; export constructor;; yield y; } }} else {return  /x/ ; } }");
tryItOut("if(<x><y/></x>.hasOwnProperty(\"__proto__\").propertyIsEnumerable(\"constructor\")) {gc() } else  if ((({__proto__: <x><y/></x>.constructor }))) {continue L;return; }return;");
tryItOut("/*infloop*/do {export __parent__;(gc).call } while(let (constructor, __count__) null =  '' );");
tryItOut("continue ");
tryItOut(" const constructor;");
tryItOut("if(__iterator__ = window .@ (<><x><y/></x></>)[ '' ]) /*for..in*/for(var [__iterator__] = 1e81 in  @fooconst __parent__;");
tryItOut("yield;var ; = __iterator__;");
tryItOut("do {/*for..in*/for(var __parent__ = let (prototype, prototype = 1.2e3) <x/>.__lookupSetter__(\"x::prototype\") in [[1]]) ; } while((export *; * #1=[#1#]) && 0);");
tryItOut("L:if( /x/ ) __parent__, __noSuchMethod__\n");
tryItOut("/*for..in*/for(var [prop, prototype] = (({__count__: <><></><ccc:ddd><{[__noSuchMethod__, prop, prototype, prototype]}></{[__noSuchMethod__, prop, prototype, prototype]}>yyy</ccc:ddd></>})) in *::*) {throw prop;return (-033); }");
tryItOut("(\n({}).__lookupGetter__).apply");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("if(new Exception((<x><y/></x>)[[]]))  else  if (3/0 ? ({a1:1}) : <x><y/></x>) (undefined); else {yield; }");
tryItOut("{const prop;{yield [[]];(this); } }");
tryItOut("/*for..in*/M:for(let [constructor, __parent__] = @foo & 1e+81 in ((uneval(<y><z/></y>)))) continue ");
tryItOut("with({prototype: __count__ =  /x/ }){}");
tryItOut("do /*infloop*/L:do {} while( \"\" ); while((__count__) && 0);");
tryItOut("with({}) { ; } \n[1];\n");
tryItOut("if(undefined) { if (undefined) yield; else {const __noSuchMethod__;export *; }}");
tryItOut("({constructor: <x/>, __parent__: 1e4 })");
tryItOut("this.zzz.zzz; const __proto__;");
tryItOut("if((__count__.__parent__ = @foo.__lookupGetter__(\"prop\"))) { if ((__parent__.__proto__.yoyo(this.__defineSetter__(\"__proto__\", gc)))) {break M; } else return  /x/ ;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in (prototype = <><x><y/></x></>.hasOwnProperty(\"__proto__\"))) ");
tryItOut("this.zzz.zzz, #1=[__proto__ = @foo.valueOf(\"number\")]");
tryItOut("L: while(((arguments :: *::*)) && 0)switch(.2 >= -0) { case 3: break ;/*infloop*/for(5.0000000000000000000000; this; <><x><y/></x></>) export *;break; default:  }\nexport __iterator__;");
tryItOut("/*infloop*/for(const prop =  \"\" ; <><x><y/></x></>; <x/>) return;\nyield;\n");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><x><y/></x></>) {return  /x/ ; }");
tryItOut("const constructor =  /x/ , __noSuchMethod__ = <x/>;");
tryItOut("( '' );\nlet constructor = *;\n");
tryItOut("/*for..in*/for(-<>yyy</> in (@foo['function::__proto__'] =  /x/ )) { }");
tryItOut("with({__count__: [11,12,13,14].filter})L:if(<x><y/></x>) {export *; } else { }");
tryItOut("L:with({prototype: (({}).hasOwnProperty).call((eval)(), )(this.zzz.zzz++)}){M:do /*for..in*/for(let prototype in ((function (__iterator__, __proto__) { return <><x><y/></x></> } )( /x/g )))const __iterator__ = 1e-81, __noSuchMethod__ = <x><y/></x>; while((/*\n*/(break )) && 0); }");
tryItOut("/*for..in*/for(__proto__ = (*[ /x/ ]) in ((this.__defineSetter__(\"__parent__\", (1 for (x in []))))++)) if(window) { if ((<><x><y/></x></> .@x:: *)) {let prop, __iterator__; } else {__iterator__;var prop =  /x/ , __parent__; }}");
tryItOut("{gc() }");
tryItOut("L:if(((0)[[,,z1]]).valueOf(\"number\")) export __noSuchMethod__;continue L;");
tryItOut("/*for..in*/M:for(const (prop.prop) in ((({}).__lookupGetter__)(([1,2,3,4].slice((function  prototype (__iterator__) { return * } ).call((eval(\"throw  /x/ ;\", <y><z/></y>)), [15,16,17,18].map(#1#, <><x><y/></x></>), constructor)))))){if((constructor)) {return; } else {(this); } }");
tryItOut("if(new (@foo)()) yield;");
tryItOut("yield\nexport prototype;");
tryItOut("let (prop, __noSuchMethod__) { {} }");
tryItOut("do  while((__parent__.__iterator__) && 0)");
tryItOut("while(((--[((p={}, (p.z = undefined)()))].some(/a/gi))) && 0){if(*) { if (033\t) function (__count__, __proto__) { return this }  else const __count__ = 5.0000000000000000000000, prototype = false;}export __count__; }");
tryItOut("<!--yy--> const __noSuchMethod__;");
tryItOut("/*infloop*/for(this.zzz.zzz ? (\nthis) : void undefined.prop = __noSuchMethod__; ((<x/>.unwatch(\"__parent__\")).__lookupGetter__(\"function::__count__\")); this.zzz.zzz) {return;; }");
tryItOut("return; const __count__");
tryItOut("if(true.__defineGetter__(\"prop\", gc)) {export prototype;( '' ); } else {var __iterator__, __proto__; }");
tryItOut("const __noSuchMethod__ = <x/>");
tryItOut("switch( \"\" ) { default: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.__count__ in  /x/ ) {let __parent__ = <y><z/></y>, __count__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(<><x><y/></x></> , <x/>; <><x><y/></x></>; - .. <x><y/></x>) {undefined;yield; }");
tryItOut("while((constructor.prototype) && 0){[1,2,3,4].mapbreak L; }");
tryItOut("{yield;throw 1e+81; }");
tryItOut("var __count__ = __proto__;");
tryItOut("/*infloop*/for(const __proto__; <y><z/></y> || true; ({prop: <><x><y/></x></>.yoyo(@foo  ) })) ;");
tryItOut("~");
tryItOut("with({prop: yield}){ }");
tryItOut("L: prop = __parent__");
tryItOut("if('fafafa'.replace(/a/g, /a/gi)) __noSuchMethod__ else  if ((#0=[[, __parent__, , ] = Array()])) if([[1]] if (this) *= eval(\"prototype\", (function ([y]) { })())) yield; else  if (({ __noSuchMethod__: ({ __parent__: [], constructor: __parent__ }) }) = __proto__.((__proto__ = false))) {(/*\n*/<><x><y/></x></>); }");
tryItOut("/*for..in*/for([__parent__, __count__] = new (*::*)() in ({})) {continue ;return 3; }");
tryItOut("export prop;");
tryItOut("if((prop.(<y><z/></y>))) {(false);throw prototype; } else  if (<x/>.hasOwnProperty(\"prototype\")) {;gc() }");
tryItOut("if(new (/a/gi)( '' , prop)) return; else  if (<><x><y/></x></>.__count__ = __noSuchMethod__) return; else yield;");
tryItOut("this.zzz.zzz;");
tryItOut("yield ({a1:1}) ? (*[<x><y/></x>]) : new (__parent__-=1e+81)();");
tryItOut("{}");
tryItOut("throw StopIteration;");
tryItOut("do (new *(<><x><y/></x></>)); while(((new ({__noSuchMethod__: window})((this)[[z1,,]],  /x/ [<><x><y/></x></>]))) && 0);");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = [({ __parent__: __proto__, constructor: prototype }), ({ __count__: __parent__, __parent__: __iterator__ }), ({ __parent__: __count__ })] = [__iterator__, __noSuchMethod__, ({ constructor: __count__ })] in __iterator__) continue ;");
tryItOut("if((constructor.__parent__).throw((({constructor: this }))))  else /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in 4.) {export *; }");
tryItOut("L:with\r({function::__parent__: <x><y/></x>}){continue ;(*); }");
tryItOut("/*for..in*/for(let __iterator__ = (yield <x><y/></x>) in (this.zzz.zzz)) (@foo)\nwith(prototype = <><x><y/></x></>){;export constructor; }");
tryItOut("yield (function ([y]) { })();");
tryItOut("/*infloop*/do {M:while((1.2e3) && 0)const constructor = (-0), __noSuchMethod__; } while(<x><y/></x>(({a2:z2}), null).__defineSetter__(\"__noSuchMethod__\", 'haha'.split))");
tryItOut("if(prototype = *::*.valueOf(\"number\")) { if (([11,12,13,14].sort)) {/*for..in*/for([constructor, __proto__] = __count__ in  \"\" ) {const prototype = this; } } else {let constructor, __parent__;; }}");
tryItOut("if([(prop = false)].filter((<x/>).call)) { if ((constructor.__parent__)) {export *, get;break M; } else {{L: ( /x/g );export *; }with({__proto__: <><x><y/></x></>.yoyo(true)}){__noSuchMethod__const prop = (-1), __count__ = __parent__; } }}");
tryItOut("if((<y><z/></y> + (-1))) {var __count__;Math.pow } else  if (undefined[(new (this)(*))].valueOf(\"number\")) return  { yield [__count__].sort(function (__count__, prop)undefined) } ; else throw ( /* Comment */4.);");
tryItOut("if((({__iterator__: new Date(<><x><y/></x></>,  \"\" ) }))) { if (__parent__.prop setter= Math.pow) {while(( \"\" .eval(<x/>)) && 0)continue L; }} else {/*for..in*/for(var __iterator__ in (((new Function(\"\")))(this;)))/*for..in*/for(const prototype = <><x><y/></x></> in [z1]) {return *;yield <y><z/></y>; }export \t__parent__;\t }");
tryItOut("{} const prop;");
tryItOut("/*infloop*/while(<x/>)__count__.__proto__;");
tryItOut("/*for..in*/for([__parent__, __iterator__] = new (__iterator__)(<x/>, prototype)(__count__.prototype.(<x><y/></x>.(prototype))) in ({})\n |= +(1e4)) {if( /x/g ) {#3={a:#3#};throw 1.3; } else  if (null) {{}return; } else ;/*infloop*/M:while(new (function(y) { yield y; __iterator__ = <><x><y/></x></>, __iterator__ = window;; yield y; })()){with({prototype: })gc() } }");
tryItOut(";");
tryItOut("/*for..in*/L:for(__count__ = __noSuchMethod__.__parent__ = ((1.3 = *).__lookupSetter__(\"({ prototype: __parent__, __iterator__: prototype })\")) in [z1].*) /*for..in*/for(let __parent__ in ((function  prototype () { return; } )(prop)))<x><y/></x>;");
tryItOut("if([15,16,17,18].map(function(q) { return q; }, __iterator__.prototype)) export __proto__; else null;");
tryItOut("/*for..in*/for(const __count__ in new Iterator(((uneval(window))))) /*infloop*/while((constructor.yoyo(1e-81))){; }");
tryItOut("{break L;if(window) {yield  '' ; } else  if ([[1]]) {} }");
tryItOut("prop;");
tryItOut("/*infloop*/L:for(<x/> ^= <x/>; ((<x/> |= @foo)()); ({})) {gc() }");
tryItOut("return (__iterator__.__parent__);");
tryItOut("/*for..in*/M:for(const [prototype, __count__\t] = ((constructor.prototype getter= let).__parent__) in (({ constructor: __proto__, __parent__: ({ prop: __count__, __count__: __iterator__ }) }) = ({ constructor: [, prototype, __proto__, ], __iterator__: __iterator__ }))) {with({__noSuchMethod__: __iterator__.(null .. *::*)}){ }gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in (<><x><y/></x></>(({}), function(id) { return id }).@*)) {__count__ = prototype;let __proto__; }");
tryItOut("/*for..in*/for(let __iterator__ = yield __noSuchMethod__ in true) {yield <x><y/></x>; }");
tryItOut("if(({prototype: 3/0, __count__: <x><y/></x> })) gc() else {export prop; }");
tryItOut("if(({prototype: prototype = prop, __count__: ((void <><x><y/></x></>) for each (__count__ in <x><y/></x>) for (__iterator__ in __noSuchMethod__)) })) { if ((__iterator__ = __count__.__lookupGetter__(\"__noSuchMethod__\"))) [1,2,3,4].map else {return; }}");
tryItOut("let(__count__ = constructor, __count__ =  \"\" ) { return;");
tryItOut("while((new (<x><y/></x>)()) && 0)yield  /x/g \n");
tryItOut("yield (__noSuchMethod__);");
tryItOut("let(__count__, __iterator__ = <{prototype}><x><y/></x><!--yy--></{prototype}>) { yield undefined;");
tryItOut("while(((0.1 === prop)) && 0)var __noSuchMethod__, constructor;");
tryItOut("M:if((__proto__ = prop)) { } else  if (<x><y/></x>.(#1=[#1#])) { }");
tryItOut("gc()");
tryItOut("{switch(( '' )) { default: __noSuchMethod__ = 0/0; } }");
tryItOut("if((yield)) {{*::*;return; } } else  if ((({}).__lookupGetter__(Array(), (this.__defineSetter__( try { throw StopIteration; } finally { with({}) break ; }  , Math.pow))))) yield <x/>;");
tryItOut("with(<zzz>this</zzz>)");
tryItOut("M:if(*) { if ((constructor.__noSuchMethod__)) ([1,,]); else __iterator__;}");
tryItOut("let (__count__) { const __count__; }");
tryItOut("let(prototype, ({ __iterator__: constructor, constructor: prototype })) ((function(){\n})());");
tryItOut("if(<x/>) { if (((Function(<x><y/></x>[#1=[#1#]], constructor)) in prototype))  else {export *; }}");
tryItOut("/*infloop*/for(prototype =  /x/g ; <><x><y/></x></>; []) var __noSuchMethod__ = false;");
tryItOut("/*infloop*/while(Number(this.__defineSetter__(\"prop\", function  constructor () { yield <><x><y/></x></> } ) <<= 'haha'.split.unwatch(\"prop\"), [new RangeError(new window()) for each (__parent__ in <y><z/></y>) if (this)])){export __noSuchMethod__; }");
tryItOut("with(__iterator__)yield  /x/g ;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let __count__ in ((((function (__parent__) { return __proto__; } ).call(<x><y/></x>, <x><y/></x>,  /x/g )).watch)( /x/g )))M:if((#1=__iterator__ = __count__)) {/a/gi } else  if ([<x><y/></x>;].map(({}).hasOwnProperty)) return; else ( /x/ );");
tryItOut("/*infloop*/while(null){}");
tryItOut("let(getter, __proto__) { for(let y in [5,6,7,8]) <bbb xmlns=\"false\"><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></bbb>");
tryItOut("throw [,,z1];");
tryItOut("/*for..in*/for(let (__noSuchMethod__) in ((constructor)(__iterator__)))");
tryItOut("with(new (undefined)(<><x><y/></x></>++)){;var prototype = window, prototype = __parent__; }");
tryItOut("if([(3.141592653589793 %  /x/g )])  else  if (<><x><y/></x></>.*) Math.sin else {; }");
tryItOut("do {export __count__;export *; } while((<y><z/></y> | prototype != __noSuchMethod__ = this) && 0);");
tryItOut("/*for..in*/L:for(const ({ prototype: __noSuchMethod__, __noSuchMethod__: ({ __parent__: {prototype;{} } }) }) in ((Function)(new ((1 for (x in [])))()))){export *; }");
tryItOut("yield __iterator__ = null.propertyIsEnumerable(\"prototype\");");
tryItOut("/*for..in*/for(let ('fafafa'.replace(/a/g, function  constructor () { yield ({}).hasOwnProperty } )) in <y><z/></y>) let (__proto__, __noSuchMethod__ = @foo) { with(window)gc() }");
tryItOut("/*infloop*/for(~<x/>; (new <y><z/></y>()); (*)[__noSuchMethod__;]) {/*for..in*/for([constructor, prop] = .2 in <y><z/></y>\f) {;yield; } }");
tryItOut("function::function::prop");
tryItOut("L:if([({ __noSuchMethod__: __count__ }), __parent__, prop, ] = <x><y/></x>.hasOwnProperty(\"prop\") = constructor > ({a1:1})) /*infloop*/L:for((this.zzz.zzz); function (__iterator__) { yield undefined } ; this.zzz.zzz) { }");
tryItOut("/*infloop*/L:for(let ({ __iterator__: ({ prop: __iterator__, __iterator__: prop }) }) = new /a/gi(case 2: export *;break; break; case 8: break L;break; return 3/0;break; default: export get;case 6: let __noSuchMethod__, constructor = <><x><y/></x></>;break; break; case <x><y/></x>: break; case 6: break; ); <x/>; this.__defineSetter__(\"__iterator__\", (__count__).watch)) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x><y/></x>) (<><x><y/></x></>);");
tryItOut("if(Iterator()) { if ((({__proto__: yield this, __iterator__ getter: Function })).prop) {L:if(false) {return this;let __noSuchMethod__; } else  if (<x><y/\t></x>) { '' ; }prototype: <><x><y/></x></> } else {const constructor = #3={a:#3#}, constructor;<x/>; }}");
tryItOut("switch(null.eval(function(id) { return id })) { case -(uneval(<y><z/></y>[-1e4])): /*infloop*/while(this)break; case 9: switch(<x><y/></x>) { case 8: break;  } const prop; }/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in [1]) {export *;{} }");
tryItOut("yield function(id) { return id };");
tryItOut("/*for..in*/for(let <><x><y/></x></>.__parent__ in (([1,2,3,4].slice)(try { this.zzz.zzz; } catch(__iterator__ if <>[[]]</>.(constructor).__defineGetter__(\"prop\", 1e81)) { export __parent__; } catch(__parent__ if (function(){return  \"\" ;})()) { this.zzz.zzz; } catch(__noSuchMethod__ if this.valueOf(\"number\").__lookupSetter__(\"constructor\")) { yield (({__parent__: (yield <x/>)})); }  === undefined.__iterator__ = <x><y/></x>)))if([1]) ; else {var __iterator__, __count__; }");
tryItOut("/*for..in*/for(let <><x><y/></x></>['prototype'] in prototype) {__proto__, __parent__; }");
tryItOut("if(('fafafa'.replace(/a/g, [1,2,3,4].map)) *= function (__count__) { return 033 } ()) { if (([1,2,3,4].map)()) /*for..in*/for(var [prototype, constructor] = ([<><x><y/></x></>]) in <> </>) /*infloop*/for(<x><y/></x>; -1 = window; each) var __proto__;} else const constructor, __count__;");
tryItOut("/*for..in*/for(/*\n*/const 1e4.__parent__ in ((__count__ = <x/>.watch(\"__proto__\", (@foo).__defineSetter__), __noSuchMethod__)(__parent__ = <><x><y/></x></>)))({}).__lookupGetter__");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("if(({ prop: prototype, __noSuchMethod__: constructor }) = function::__proto__) { if ( /* Comment */undefined) {yield window; } else }");
tryItOut("/*infloop*/do {(new Function(\"return 1.3;\"))[1,2,3,4].map } while( /x/ );");
tryItOut("do let 0; while((<><x><y/></x></>.hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("if(<xxx {__parent__}={<x/>} />) {const __noSuchMethod__;{yield; }with(<><x><y/></x></>)return; } else  if ((({__proto__: this.__lookupGetter__(\"__parent__\")})))  { yield <><x><y/></x></> }  else return;");
tryItOut("/*for..in*/M:for(var prop in true) constructor = <x><y/></x>, __proto__ = [z1];");
tryItOut("/*infloop*/for(var constructor; (__proto__.propertyIsEnumerable(\"__count__\")); [1,,].constructor) var <x><y/></x> = <><x><y/></x></>, __parent__ = -3/0;");
tryItOut("{<><x><y/></x></>; }");
tryItOut("(__parent__ .@ <x><y/></x>).watch");
tryItOut(") {for(let y in []);if(-eval(\"<x/>;\", window)) \t }");
tryItOut("L: {(__parent__); }");
tryItOut("return\nlet(prototype = return;, set = this) { for(let y in []);");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in ((function (__noSuchMethod__) { return function::__proto__ } )([])))export *;");
tryItOut("let (({ __count__: ({ __proto__: [, ({ prop: __iterator__, prototype: ({ prop: [__iterator__, ], __parent__: [] }) }), ({ __proto__: prop.__iterator__ })] }) })\f) { (([function ([y]) { } for each (__count__ in  '' )]))(((new (-__parent__)((({ get prototype(constructor) { return; } , __count__ setter: function(y) { yield y;  \"\" ;; yield y; } })), this)).__count__)) = __iterator__; }");
tryItOut("M:with({__count__: <><><ccc:ddd><zzz>-1</zzz> </ccc:ddd></></>})/*infloop*/for(var __iterator__ = this.__defineGetter__(\"__count__\", function(y) { yield y; L: return; const __noSuchMethod__;; yield y; }); ((__noSuchMethod__.(<x/>)) !== prototype = (-0)); prototype = <><x>\t<y/></x></> ? undefined : (undefined.hasOwnProperty(\"__proto__\"))) {return; }");
tryItOut("if(constructor = ;.__defineSetter__(\"__count__\", undefined)) {return; } else  if (prop) {yield this; const prototype;yield true; } else {([[1]]); }");
tryItOut("/*for..in*/for(var prop = <><bbb xmlns=\"__iterator__ =  \"\" \"> </bbb></> in ((-0())++)) var prop = prototype;");
tryItOut("/*infloop*/while(arguments){const prototype, __proto__;yield; }");
tryItOut("/*infloop*/for(__proto__ || null((#1=[#1#]).call(*::*, *::*, <x><y/></x>), *::*); ((window for each (prop in __iterator__))); ({prop getter: function () { return true }  })) if(<x><y/></x>) { if (undefined) ; else {var prop, constructor = __noSuchMethod__; }}");
tryItOut("let (__proto__ = <><x><y/></x></>, function::prototype) { return; }");
tryItOut("M:if((*::*)) (*); else  if ((((x::__proto__ < 3))[([false])] ? __iterator__ = true : )) {(<x><y/></x>);return; }");
tryItOut("\nreturn this;\n");
tryItOut("/*for..in*/for(__count__ = (__proto__.prototype) in <\nx><y/></x>) prop = false, __parent__;");
tryItOut("/*for..in*/M:for(var [prop, constructor] =  /x/  in <><x><y/></x></>) {}");
tryItOut("(.2);");
tryItOut("yield __noSuchMethod__.__count__ = __count__ =  \"\" ;");
tryItOut("with((this.__defineSetter__(\"__iterator__\", (1 for (x in [])))).__defineSetter__(\"__noSuchMethod__\", __noSuchMethod__)){yield __parent__;yield; }");
tryItOut("/*infloop*/while((#2=({__count__: *::*})))export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x><y\f/></x>) (this);");
tryItOut("do if(<x/>.isPrototypeOf(false)) /*\n*/yield\n else  if ((yield *::*)) {{}continue ; } while((0.1.unwatch(\"prototype\")\t) && 0);");
tryItOut("if(1e4) {var __proto__, __proto__ = [1,,]; }");
tryItOut("switch(__count__) { case 7: break; case __parent__: case window: break; case 1: gc()break; default:  }");
tryItOut("export function::__count__;");
tryItOut("prototype = 1e4, constructor;\nyield <x><y/></x>;\n const __proto__;");
tryItOut("let (__iterator__ = *::*, __noSuchMethod__ = this) { return; }");
tryItOut("return\n{}");
tryItOut("/*infloop*/M:for(let ({ __iterator__: function::prop, __parent__: constructor }) = (uneval(<x><y/></x>)); (function(y) { yield y; yield;; yield y; })\n; __noSuchMethod__) {let __iterator__ = constructor, prototype = <y><z/></y>; }");
tryItOut("/*for..in*/L:for(var (new *::*( , <x/>)) in (((__proto__ = 3.141592653589793).watch)(this.zzz.zzz))){/*for..in*/for([prototype, __count__] = [,,] in  '' ) {const __parent__; } }");
tryItOut("__iterator__");
tryItOut("{L:if(<><x><y/></x></>) export *; else throw <x><y/></x>;export prototype; }");
tryItOut("/*for..in*/for(var (getter) in (((({}).hasOwnProperty).apply)(false++.prototype)))return\n");
tryItOut("if((eval(\"this\", .2))) let __iterator__ = <><x><y/></x></>, __noSuchMethod__; else  if (((Math.pow).call(window, true, 1e81))) {return;break L; }");
tryItOut("L: {export __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(let (this)(*::*) = (p={}, (p.z = (#1=[[[1]]]))()); __noSuchMethod__ =  \"\"  += __noSuchMethod__; prop) L:do {__noSuchMethod__;(<><x><y/></x></>); } while((<x><y/></x>) && 0);");
tryItOut("L:if((prop = (<x><y/></x>.__defineGetter__(\"__parent__\", (1 for (x in [])))))) function(id) { return id }; else  if (#2=({prototype:  /x/  ? undefined : <y><z/></y>})) {} else {(new Function(\"{}\"))var __count__, prop = [[1]]; }");
tryItOut("/*infloop*/M:do gc() while((p={}, (p.z = [1.2e3 for each (__iterator__ in <x/>)])()));");
tryItOut("L: ");
tryItOut("switch(<><x><y/></x></> = 1e4) { case __iterator__ = const prototype = <><x><y/></x></>;: default:  }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const (<x><y/></x>.)constructor in  \"\" ) {/*infloop*/while(<><x><y/></x></>){ } } }");
tryItOut("/*for..in*/M:for(var ( /* Comment */<x><y/></x>) in <><x><y/></x></>) false;");
