tryItOut("let (set =  /x/ , prototype) { return; }");
tryItOut("if(<x><y/></x>.__lookupGetter__(\"__parent__\")) { if ((gc).call(this, [,,z1])) __parent__} else return -0;");
tryItOut("/*infloop*/M:do function (prop) { yield <x><y/></x> }  while(({__iterator__ setter: ({}).hasOwnProperty, __iterator__: undefined }));");
tryItOut("yield;");
tryItOut("L:if(null.__iterator__ = <><x><y/></x></>) export prop; else  if (constructor = #1#) __proto__ = <x><y/></x>; else {}");
tryItOut("yield {}\n/*infloop*/M:for(let [__parent__, , __iterator__, ] = null; <x/>; window[[,,z1]]) <x/>;");
tryItOut("break ;(<><x><y/></x></>)\n");
tryItOut("if([, [3.141592653589793, ], , ] = [, [__proto__], , ({ __parent__: __proto__, constructor: __proto__ }), ({ prop: __count__, prop: __noSuchMethod__ })]) {L:while((<x/>) && 0)__iterator__ = null; } else  if (__parent__ = <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) gc() else ;");
tryItOut("with(prototype.__parent__ setter= function  __parent__ () { yield false } )Function");
tryItOut("/*infloop*/M:do {return <x><y/></x>; } while(@foo);");
tryItOut("switch( /x/g ) { case 7: let __proto__, __noSuchMethod__ =  /x/g ; }");
tryItOut("if((<><x><y/></x></>.__lookupSetter__(\"__parent__\"))) {undefined;let __iterator__ = <x><y/></x>, prototype; } else  if (this.__defineGetter__(\"__parent__\", <x/>)) gc()");
tryItOut("/*for..in*/for(false['__iterator__'] in ((<><x><y/></x></>.valueOf(\"number\"))(undefined))){export yield;*::*; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in this) gc()\nnew Function\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__(*.yoyo(<y><z/></y>)) in constructor) {(new Function(\"export __iterator__;\"))export prop; }\nthrow  /x/g ;");
tryItOut("export __iterator__;");
tryItOut("if(prototype.__noSuchMethod__ = window .@*:: <x/>) {null } else  if (<y><z/></y>) {null;{} } else {return <x><y/></x>;yield; }");
tryItOut("while((__noSuchMethod__ ? <y><z/></y> : (<><>yyy</></>)[Iterator( /x/ ).unwatch(\"__proto__\")]) && 0){/*infloop*/while((Function)( '' , ({})))__iterator__ = <x><y/></x>, __noSuchMethod__ = window; }");
tryItOut("with({__parent__: \n<><x><y/></x></>})/*infloop*/while(({__count__ getter: this, __noSuchMethod__ getter: Function })){if(<x><y/></x>) { if (<x><y/></x>) {}} else return prop;(null); }");
tryItOut("M:if(((__parent__) .. [,])) { if (@foo) {yield *::*; } else const __proto__;}");
tryItOut("/*infloop*/while(@foo)if(!*::*) <x><y/></x> else while((prototype) && 0)export __parent__;");
tryItOut("if([]) /*for..in*/for(var @foo.__noSuchMethod__ in <><x><y/></x></>) {-3/0; } else  if ((\n__count__ = (yield (this .. <><x><y/></x></>)))) M:if(3) eval else {{}\n<><x><y/></x></>;\n }");
tryItOut("return;");
tryItOut("M\t:if(__count__ = 3/0) return null; else export *;");
tryItOut("if(<><x><y/></x></> == this) { if (__iterator__) {{} }} else return;");
tryItOut("while(('fafafa'.replace(/a/g, (this).watch)) && 0)export *;");
tryItOut("{__proto__, __iterator__;gc() }");
tryItOut("{prototype = function::__parent__; }\n/*for..in*/for(prototype in [,,]) {return;export prototype; }");
tryItOut("with(undefined)__noSuchMethod__;");
tryItOut("return;");
tryItOut("/*infloop*/for(const __proto__; *::*\n.__iterator__; void __count__) yield;");
tryItOut("{export prop;yield; }");
tryItOut("if(<><x><y/></x></>) { if (null) (<y><z/></y>); else export *;}");
tryItOut("if(__proto__) { if (@foo) } else {return window; }");
tryItOut("/*infloop*/while((new Array(-1 >>> [z1], null)))with( /x/g .__noSuchMethod__ =  /x/ )export __count__;\n{}\n");
tryItOut("__iterator__, prop = [[1]]; const __count__;");
tryItOut("/*infloop*/M:for(const __parent__; (#2=[ /x/g ]).watch(\"__noSuchMethod__\", (new Function(\"throw [z1,,];\"))); (new Function(\"yield this;\"))) {; }");
tryItOut("if(__iterator__) L: *::*; else  if (new @foo(<x/>,  /x/ ).__lookupGetter__(\"prototype\") .@x:: ([window if (<><x><y/></x></>)])) {throw null }");
tryItOut("let (constructor, __parent__ = __count__) { prototype, __parent__ = [,]; }\n");
tryItOut("/*infloop*/for(([11,12,13,14].sort).call(*.yoyo( \"\" ), ); @foo > *.__defineGetter__(\"function::__proto__\", [1,2,3,4].slice); <ccc:ddd><x><y/></x><!--yy--></ccc:ddd>.eval(<x><y/></x>).valueOf(\"number\")) {const __count__, function::prop = window; }\nreturn __count__ = *;");
tryItOut("/*infloop*/for(const constructor; (this.__defineGetter__(\"__proto__\", )); (#1=[#1#]())) (typeof *::*);");
tryItOut("/*for..in*/for(var prop.prototype in (3/0)[*]) {}");
tryItOut("true;");
tryItOut("/*for..in*/for(constructor in [11,12,13,14].some) M:with( /x/ )return <x><y/></x>;");
tryItOut("with({constructor: (<x><y/></x>.@*)})yield <x><y/></x>;");
tryItOut("if(__parent__ = (!new <><x><y/></\nx></>())) {yield;if(this) ; } else {__noSuchMethod__ = <x><y/><\f/x>, constructor;([1])(*) = prop; }");
tryItOut("/*infloop*/while((eval(\"gc()\", false))){var ;break ; }");
tryItOut("/*for..in*/true in ((uneval(.2)))) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in (function ([y]) { })()) (<x/>);");
tryItOut("{export *; }");
tryItOut("if(new RangeError()) const __noSuchMethod__ = undefined; else  if ([z1,,]) {return @foo;(1e4); }");
tryItOut("with({function::__iterator__: <xxx {__noSuchMethod__}={<zzz><><x><y/></x></></zzz>.(false.__lookupSetter__(\"__parent__\").__lookupSetter__(\"prop\"))} />.((uneval((__proto__.__proto__ = *::*))))})gc()");
tryItOut("(<x/>)");
tryItOut("{{prop =  \"\" , __iterator__ = *;return <x><y/></x>; }return (<x/> :: <><x><y/></x></>); }");
tryItOut("L: /*for..in*/for(let ( /x/g )( '' ) in ((function (__parent__, ({ __iterator__: __noSuchMethod__, constructor: prop }))this.__defineSetter__\t(\"__proto__\", Math.sin) for \t(try { export *; } finally { ; }  in  '' ) if ([1,,]))(prototype = /*<><x><y/></x></>.watch(\"prototype\", new Function))))export *;");
tryItOut("if((__proto__ ? //h\nfunction ([y]) { } .@x:: <x><y/></x> : (-1))) {export prop; } else  if (<>[].throw( /x/g )</>) /*for..in*/for(var __noSuchMethod__ in <y><z/></y>) yield <y><z/></y>;export *;");
tryItOut("L:if([(constructor =  '' )]) [__noSuchMethod__, ({ __noSuchMethod__: [, ], constructor: ({ ({ setter: __parent__ }): ({ __count__: __parent__ }), __parent__: ({ function::__iterator__:  /x/  }) }) }), [constructor, ], ]");
tryItOut("/*infloop*/M:for(const prop; true; *::*) {gc() }");
tryItOut("return; const prop;");
tryItOut("let (__proto__ = <x><y/></x>\n) { with({ get __parent__ prototype (__proto__) { return undefined.__lookupGetter__(\"__parent__\") } : (this.__defineSetter__(\"constructor\", function(y) { yield y; ;; yield y; })).__defineGetter__(\"__parent__\", gc)}){L:if(<x/>[__parent__]) { if ((*)(<y><z/></y>)) {{} }} else true;continue L; } }");
tryItOut("/*infloop*/for(let [[], ({ constructor: __iterator__ }), , __count__, [constructor, __iterator__]] = (-1) = [11,12,13,14].map; (({}).__lookupGetter__()); __parent__.constructor = window.__defineSetter__(\"__count__\", (true).watch)) {yield __parent__;({}).__lookupGetter__ }");
tryItOut("let (prop) { const ({ __count__: __iterator__ }), [, __iterator__, , ] = false; }");
tryItOut("if([<x><y/></x>]) { if (({ })) continue ;} else {; }\n/*for..in*/for(const __proto__([,,]) in (('haha'.split)(<x/> &= <><x><y/></x></>)))__iterator__ = ;");
tryItOut("if((({}).__lookupGetter__)) return  /x/g ; else  if //h\n(<></>\f.(__proto__ = null)) (this);");
tryItOut("/*for..in*/for(const (prop)(window) in ((function  __parent__ (__count__, constructor) { ( /x/ ); } )([,])))yield;");
tryItOut("if(({ get __noSuchMethod__(__noSuchMethod__, [__iterator__]) { let __noSuchMethod__ = @foo, __parent__ = __count__; }  })) gc() else  if (Math.sin) {with(){let __noSuchMethod__, __proto__;return *::*; } }");
tryItOut("throw [[]];\n\n");
tryItOut("this");
tryItOut("return;");
tryItOut("/*for..in*/for(const __proto__ = ({ prop: __parent__ }) = new <y><z/></y>() in (this.__noSuchMethod__)) ");
tryItOut("/*infloop*/M:for(prototype for (constructor in this) for each (__proto__ in  /x/g ); __noSuchMethod__ = prop; prop) return\n");
tryItOut("new Function");
tryItOut(" = constructor;");
tryItOut("if(<bbb xmlns:ccc=\"*.throw(<><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb>) {switch(false) { default: export *;break;  } }");
tryItOut("let each, prototype = <x><y/></x>;\n__count__, __count__;\n");
tryItOut("M:with({__count__: (__count__: <y><z/></y>)(new ((Math.sin).call)(<y><z/></y>,  '' ) >>>=({ __count__: __proto__ }) = (__count__.__count__))});/*\n*/");
tryItOut("M:if((-(function (prototype, __parent__) { return new <x><y/></x>() } )[true].throw((( \"\"  for each (3.141592653589793 in this)))))) { if (prototype.eval( \"\" ).valueOf(\"number\")) {export *;null } else \t(0x99);}");
tryItOut("const <ccc:ddd><employee id=\"1\"><name>Joe</name><age>20</age></employee> </ccc:ddd>, __parent__; const prototype");
tryItOut("/*infloop*/for(let __iterator__; ([1].yoyo(<><x><y/></x></>)).yoyo((p={}, (p.z = #3={a:#3#})())); ) for(let y in []);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in 0) {gc() }");
tryItOut("(__iterator__);");
tryItOut("{with({prop: 1.3}); }");
tryItOut("/*for..in*/for(let __parent__ in false) {function  prototype () { yield <x/> }  }");
tryItOut("/*infloop*/for(([function(q) { return q; }(__iterator__ = <><x><y/></x></>)].sort(function  __parent__ (prop) { /*for..in*/M:for(var prop in prototype) let prop =  /x/ ; } )); (*::* * <x><y/></x>) > @foo for each (__parent__ in 0x99) >>> prototype = prototype; (this.__defineSetter__(\"__noSuchMethod__\", (eval).apply))) {var constructor = <x/>, __iterator__ = <><x><y/></x></>; const __count__;/*for..in*/M:for(constructor = <><x\f><y/></x></> in window) yield prop; }");
tryItOut("let(constructor, __parent__) { yield;");
tryItOut("while((constructor) && 0){\nexport *;{} }");
tryItOut("if((eval(\"(<x><y/></x> .@x:: window.__lookupSetter__(\\\"__parent__\\\"))\", ([false__proto__ getter: eval]).@foo))) gc else  if (*::*) {L:while((this) && 0){export __proto__; } }");
tryItOut("M:if((new Error()).__lookupSetter__(\"__iterator__\")) throw <x><y/></x>; else  if (function(id) { return id }) if(<y><z/></y>) {__noSuchMethod__, __parent__; } else  if (*) [,,z1];");
tryItOut("while((! /x/  , window) && 0)with(<x><y/></x>){let __proto__ = <x><y/></x>; }");
tryItOut("function::constructor = constructor\ndo {var __noSuchMethod__ = 0x99;export prototype; } while((break M\f) && 0);");
tryItOut("let(prototype, prop = 3/0) ((function(){continue ;})());");
tryItOut("/*infloop*/while(undefined.__proto__ = <><x><y/></x></>)(function(q) { return q; }).apply");
tryItOut("/*infloop*/M:do {/*infloop*/M:for(var __parent__; arguments; prop) var prototype = -1, __proto__; } while(-3/0);");
tryItOut("/*infloop*/for(__noSuchMethod__ = new  '' (*, @foo\t); this.zzz.zzz; (__noSuchMethod__ > <><x><y/></x></>)) {let (__noSuchMethod__ = true, prototype) { return; } }");
tryItOut("/*infloop*/while(Array()){__parent__ = prop; }");
tryItOut("let (prototype = <y><z/></y>.__noSuchMethod__ = undefined, prop = <><x><y/></x><\n/>) { export *; }");
tryItOut("if(new (prototype.__count__ setter= function (__count__, prototype)<y><z/></y>)(<{constructor}><xxx {__iterator__}={(yield.__count__)} /></{constructor}>, !this.__defineSetter__(\"constructor\", (((1 for (x in []))).\rcall).call))) { if ((({prop: <x><y/></x> for each (__proto__ in [,])}))) [, ({ prototype: __count__, __proto__: __iterator__ })], [, ] = (yield Math.sin); else {let constructor;let (constructor, prototype =  /x/g ) { export __noSuchMethod__; } }}");
tryItOut("prop");
tryItOut("{switch((({__noSuchMethod__: <><x><y/></x></> }))) { default: [1,2,3,4].mapbreak;  } }");
tryItOut("/*for..in*/for(let __proto__ = \nthis.__defineSetter__(\"prop\", gc) in let (({ __count__: [] })) __count__.constructor setter= function  constructor (__count__) { export __iterator__; } ) {M:if(*) { if (<x/>) continue ;} else {export __parent__;{} } }");
tryItOut("/*infloop*/for(constructor; <><x><y/></x></>; *::*) ");
tryItOut("with((prototype.__parent__ setter= <><x><y/></x></>)((this.__defineSetter__(\"__proto__\", (({}).__lookupGetter__).call).__parent__))){M:switch(<{constructor}><!--yy--></{constructor}>) { case  /* Comment */<><x><y/></x></>: yield [];break;  }/*infloop*/for(\n{}; 1e-81.watch(\"__proto__\", <x/>); 5.0000000000000000000000 >>>  \"\" ) var __proto__ = 033; }");
tryItOut("with({}) { with({}) { try { __noSuchMethod__;\nconst prop, __count__ = <x><y/></x>;\n } catch(__count__ if (function(){let(prototype, __iterator__) ((function(){yield window;})());})()) { for(let y in [5,6,7,8]) for(let y in []); } finally { yield *; }  }  } ");
tryItOut("(true);\nconst prototype;\n");
tryItOut("var __count__ = @foo\nreturn\nwindow; const __count__;");
tryItOut("/*for..in*/M:for(__parent__ = ((let (({ __proto__: prop, prototype: __proto__ })) __noSuchMethod__) *= @foo.isPrototypeOf([,,]).throw(__iterator__ = <><x><y/></x></>[(false.propertyIsEnumerable(\"prop\"))]).watch(\"__iterator__\", function(q) { return q; })) in ('haha'.split)) {let __noSuchMethod__ = <x><y/></x>; }");
tryItOut("let(__iterator__ = __noSuchMethod__, prototype) ((function(){yield 1e+81;})());");
tryItOut("if( /x/ ) {export prop;<x><y/></x>; } else  if (x::__parent__ = <x><y/></x>) L: {let __proto__ = <y><z/></y>; }");
tryItOut("/*for..in*/for(prototype in (new (function (prop) { return function(id) { return id } } )([1,,].unwatch(\"__noSuchMethod__\")))) {throw window;yield  /x/g ; }");
tryItOut("try { with({}) ; } catch(prototype if <y><z/></y>) { return (window)[<><x><y\f/></x></>]; } finally { for(let y in [5,6,7,8]) this } ");
tryItOut("switch(-1) { default: if([[]]) { if (window) {(null); } else {function  __iterator__ (prop, __parent__) { yield <x/> }  }}break; case (window.eval(<x><y/></x>)):  }");
tryItOut("if(((this.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>)))[<x/> *= <><x><y/></x></>]) {__parent__ = 1e+81, prop } else  if ( for (prototype in *::*) gc.__defineSetter__(\"__iterator__\", (new Function).call)) //h\n'{;(__parent__); const __iterator__; }");
tryItOut("if(*::*) {} else  if (+*) constructor; else {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in prop = __proto__\t) L: {const __count__, constructor;return; }");
tryItOut("throw 1.2e3;continue L");
tryItOut("with({prop: ({ constructor: ({ __iterator__: [, ] }), constructor: ({ __proto__: ({ constructor: constructor,  /x/g  & this.__defineSetter__(\"__proto__\",  /x/ ), new -0: ({ __noSuchMethod__: __count__ }) }), [({ prop: function::__noSuchMethod__ }), , ({ __iterator__: constructor })]: __iterator__ }) }) = prop = (undefined ? [1,,] : window)})gc()\nlet __parent__ = *;\n");
tryItOut("/*infloop*/do {var constructor = <y><z/></y>, __parent__ = #1#; } while((({constructor setter: (function(q) { return q; }).call })).__defineGetter__(\"prop\", ({}).hasOwnProperty));");
tryItOut("/*for..in*/M:for(function::__iterator__ in (((Math.sin).call)( /x/ ))){; }");
tryItOut("L: ");
tryItOut("if(5.0000000000000000000000) throw <><x><y/></x></>; else  if (( '' .propertyIsEnumerable(\"__iterator__\"))) {/*for..in*/L:for(const __iterator__ in (-1)) {gc()return; } }");
tryItOut("/*infloop*/for( '' .throw(try { ; } catch(prototype if (function(){prop = *::*;})()) { return; } catch(__noSuchMethod__ if (function(){let __proto__ =  '' ;})()) { return; } finally { yield; } ); [11,12,13,14].map; *) {constructor;(new Function(\";\")) }\nwhile((function::prop) && 0){gc()const __count__, prop = <><x><y/></x></>; }\n");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(const __iterator__ in <x><y/></x> >= 0x99) __proto__ = __count__;");
tryItOut("with({__parent__:  \"\" })yield;");
tryItOut("L:if((*::*.yoyo(<y><z/></y>))) {try { export *; } finally { throw <><x><y/></x>\f</>; }  } else  if ((uneval((yield 0/0)))) { }");
tryItOut("return;\nvar prototype = <x/>, __parent__ = 4.;\n");
tryItOut("do <><x><y/></x></> ^= <x><y/></x>.__iterator__ while((<x><y/></x>) && 0);");
tryItOut("const __proto__ =  /x/g , constructor = [,,];");
tryItOut("while(((p={}, (p.z = @foo)())) && 0)yield;");
tryItOut("export *;");
tryItOut("for(let y in [5,6,7,8]) with({}) { ({ __parent__: __proto__, constructor: __proto__ }) } ");
tryItOut("L:if((yield ({__noSuchMethod__: ((*::*)()) }))) {/*infloop*/for(let prop; <y><z/></y>--; @foo) yield *::*; } else {export __proto__; }");
tryItOut("/*infloop*/M:for(const __proto__; ++([1,2,3,4].map).call(__iterator__, ); ([true ? <x><y/></x\t> :  '' , [].prototype].filter(((<x><y/></x>.throw(<><x><y/></x></>))).call))) return;");
tryItOut("with([]){return; }");
tryItOut("with()if((__parent__.__noSuchMethod__--)) var __proto__; else  if (([15,16,17,18].sort(([,,z1]).apply, <x><y/></x>))) {export constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__) in prototype = __count__.watch(\"__proto__\", ({}).__lookupGetter__)) {{;yield; }if( \"\" ) /a/gi else {const __parent__ = <><x><y/></x></>, prototype;throw prop; } }");
tryItOut("let (__proto__) { /*for..in*/for(const [__proto__, __parent__] = this in function ([y]) { }) export *; }");
tryItOut("if(((__proto__ = constructor) ? yield prototype : let (__parent__ = undefined) constructor)) const __parent__ = <><x><y/></x></>;\nyield <x><y/></x>;\f\n else yield false;\f\nif(( /x/  != @foo)) { if ((yield [1])) export constructor;} else var prop, prop;\n");
tryItOut("if(* >>> <y><z/></y>) {export constructor;{} } else  if (\n /x/g .unwatch(\"__proto__\")) {( '' ); }\nyield true;");
tryItOut("with({__proto__: this.zzz.zzz});");
tryItOut("with({} /= __count__)throw  /x/ ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [, , , , ] in  ''  = null) /*infloop*/for(var prototype; undefined; <x/>) return;");
tryItOut("/*for..in*/for(const (undefined >> undefined)((prop.__lookupGetter__(\"__noSuchMethod__\"))) in (((<x><y/></x>).watch)(function(y) { yield y; ;; yield y; }))){[[1]] }");
tryItOut("let (({ prop: (__iterator__), x::constructor: [] }), ({ constructor: constructor, function::__noSuchMethod__: __parent__ }) = #2=[#1=[<><x><y/></x></>]]) { /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__([[1]]) in window) yield <x><y/></x>; }");
tryItOut("if(<bbb xmlns:ccc=\"<x/>.__lookupGetter__(\"prop\")\"><ccc:eee></ccc:eee></bbb>) gc()");
tryItOut("/*for..in*/for(x::__proto__.prototype in (((Function).apply)(<x/>.prototype))){throw null;var __proto__ = this, __parent__ = 3; }");
tryItOut("if((Array(*))) { if (((__iterator__).call(export *;, __proto__))) {return; } else {this; }}");
tryItOut("if(prop = (<x><y/></x>)(__proto__)) { if (__proto__.__parent__) prototype = <><x><y/></x></>;\nexport *;\n} else /*for..in*//* nogeckoex bug 349964 */ for  each(let <><x><y/></x></> in  /x/ ) /*for..in*/for(prototype in ((/a/gi)([[]])))gc()");
tryItOut("/*infloop*/do /*infloop*/L:do { } while(3/0[<><x><y/></x></>]); while(window);");
tryItOut("/*infloop*/do /*for..in*/for(var __proto__ = __iterator__ = (new Function(\"export __count__;\"))() in (0/0.isPrototypeOf(*::*))) break ; while(<y><z/></y>);");
tryItOut("");
tryItOut("if(<><x><y/></x></>) gc()");
tryItOut("/*for..in*/for(var [__proto__, prototype] = [ \"\" [__noSuchMethod__]] in @foo /= false) export *;");
tryItOut("L: if(*) {{} } else  if (<x><y/></x>) ;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(const [constructor, prototype] = ([this].some(Math.sin)) in *) <ccc:ddd> </ccc:ddd>");
tryItOut(";");
tryItOut("M:while(([]) && 0)__parent__ = function(id) { return id }, constructor = <x><y/></x>;");
tryItOut("/*infloop*/for(const __iterator__; new ([(new (function  prop (__noSuchMethod__, __iterator__) {  } )( \"\" ))])();  '' .unwatch(\"__iterator__\")) (1e+81)\n\n\n");
tryItOut("<x><y/></x>;export *\n/*infloop*/L:while(eval(\"var prop, prototype;\", <x/>)){}");
tryItOut("gc()\ngc()\n");
tryItOut("/*infloop*/while(eval(\";\", *\n))export prototype;");
tryItOut("let(({ __parent__: __count__ }) = <y><z/></y>) ((function(){this.zzz.zzz;})());");
tryItOut("with(({ __proto__: prototype.__iterator__ }) = ({ __noSuchMethod__: ({ __parent__: __iterator__ }) })){{}throw  /x/ .isPrototypeOf(null); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in *) {return;__parent__; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in ((-3/0)(this.__defineGetter__(\"__iterator__\", (new Function(\"const __count__, __proto__ = this;\"))))))M:if(prototype) {__iterator__; }");
tryItOut("with({__count__: (window.__defineGetter__(\"__proto__\", (( /x/ ).watch).apply) >= <>undefined</>)}){L:if(window) { if (window) ;} else let __proto__, constructor = <><x><y/></x></>; }");
tryItOut("with({__count__: function(id) { return id }})gc()");
tryItOut("/*for..in*/L:for(const set in ((null ? <><x><y/></x></> : undefined)(yield <x/>))){(0.1.__noSuchMethod__[((function ([y]) { })() if (@foo))])\n\n(break )L; }");
tryItOut("/*infloop*/for(let ({ __count__: ({ __proto__: __noSuchMethod__ }) }) =  /x/ ; (eval(\"const prop = <><x><y/></x></>, __proto__ = *;\", undefined))() ? Error((Exception()), (undefined//h\n)[false].__parent__) : ({__proto__: #3={a:#3#}}); prototype = (<>([11,12,13,14].filter)</><!--yy-->.((p={}, (p.z = 0.1)()).unwatch(\"constructor\")))) {\nyield constructor;\nreturn *::*;export __count__;\nvar __proto__ = window;\n }");
tryItOut("/*infloop*/for(var __count__ = __parent__; constructor = __proto__; (function ([y]) { })()) {; }");
tryItOut("{const __parent__;{export *; } }");
tryItOut(" \"\"  const __count__;");
tryItOut("<x/>; const __proto__;");
tryItOut("do *; while(( /x/g ) && 0);");
tryItOut("/*infloop*/for(let constructor; (@foo.hasOwnProperty(\"__proto__\") !== <x><y/></x>--((uneval(<><x><y/></x></> <= .2)), break M)); 0/0 in <x/>) /*infloop*/L:for(let yield; new new Function(<><x><y/></x>yyy</>, let (__parent__ = <x><y/></x>, prop) __parent__\f); (3 & *)) {/*for..in*/for(var __parent__ in ((eval)(1e4)))yield true; }");
tryItOut("/*for..in*/M:for(let [__proto__, __noSuchMethod__] = ([11,12,13,14].sort) in prototype) {/*infloop*/do {{} ''  } while(void 5.0000000000000000000000); }");
tryItOut("0/0;__iterator__, __parent__ = undefined");
tryItOut("/*infloop*/L:do export __iterator__; while( '' );");
tryItOut("/*for..in*/M:for(const __proto__ in ([<x><y/></x>].sort((1 for (x in [])))) @ [z1]++) if(new Boolean(<x><y/></x>)) = else  if (__noSuchMethod__) (1e81)");
tryItOut("L:if(__count__++) { if ( \"\" ) {return  \"\" \nconstructor = this, __proto__ = this }} else {/*infloop*/for(var __parent__ = @foo; 3/0; [1,,]) {var prop = 1e+81, __iterator__;{} } }");
tryItOut("with({__count__: (({__noSuchMethod__ getter: ({}).__lookupGetter__, prop: <x/> }))})yield [];");
tryItOut("/*infloop*/for(({ prototype: ({ prop: ({ prop: __proto__, constructor: prototype }) }) }) = <><!--yy--></>.__iterator__ = (function(id) { return id })(@foo); !__count__ = #1=[#1#]; #1=) /*for..in*/for(const prop in constructor) export *;");
tryItOut("M:if(3 <= null) yield <y><z/></y>;");
tryItOut("L: {let __parent__ = this;[1,2,3,4].map }");
tryItOut("const __noSuchMethod__;");
tryItOut(" { yield this.throw([z1,,]) } ");
tryItOut("with(prop = <x><y/></x>){continue M; }");
tryItOut("return this.__defineGetter__(\"constructor\", new Function);");
tryItOut("L: with(((({ get constructor(__parent__) { return 033 }  })) | (yield [,]\f)))yield;");
tryItOut("if((<><x><y/></x></> ^= this /= [15,16,17,18].sort(function(q) { return q; },  \"\" ))) { if ( '' .__lookupSetter__(\"prop\")) {(<y><z/></y>);gc() } else {yield <x/>; }}");
tryItOut("/*for..in*/for(const __iterator__ in ((__noSuchMethod__: null)(true)))yield constructor;");
tryItOut("; const prototype;");
tryItOut("do break ; while((('fafafa'.replace(/a/g, function  __parent__ (constructor, __count__)0.1\r))) && 0);");
tryItOut("{} const __noSuchMethod__;");
tryItOut("/*infloop*/M:\nwhile( /x/  for each (prototype in  \"\" )//h\n.__iterator__){export *; }");
tryItOut("if(__count__) { if (<><x><y/></x></>) return {}; else ;}");
tryItOut("/*infloop*/for(let __noSuchMethod__; __proto__ = this.zzz.zzz; (this.__defineGetter__(\"__noSuchMethod__\", new Function).__defineGetter__(\"__parent__\", (1 for (x in []))))) with({}) var __proto__;");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("if(([11,12,13,14]\f.some)) { if (<x/>\n.yoyo(yield __parent__)) __parent__, __noSuchMethod__; else {const constructor;return; }}");
