tryItOut("/*infloop*/M:while(eval(\"L: {<><x><y/></x></>; }\", ([#3={a:#3#}].some(-3/0)).__proto__ = (0.1--)))/*for..in*/M:for(let [] = ((uneval(*))) in null) {{}var __parent__ = window, __count__ = window; }");
tryItOut("switch(([11,12,13,14].sort)) { default: yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (null)[undefined].__defineSetter__(\"__proto__\", /a/gi)) export *;");
tryItOut("new Function\n;\n");
tryItOut("if(constructor = default: throw .2;case 2: yield;export *;case this: break; )   else break M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (({ __parent__: __iterator__, __noSuchMethod__: ({ __iterator__: prop }) }) = [, ])) let (*::*) { const __count__ = this, __noSuchMethod__; }");
tryItOut("/*infloop*/for(const __count__; <x><y/></x>; null) {gc()__iterator__ = <x><y/></x>; }");
tryItOut("L: export __count__;");
tryItOut("/*for..in*/for(var (__proto__)(@foo) in  /x/ ) {yield  /x/ ;export __iterator__; }\t");
tryItOut("/*for..in*/for(let (({a1:1}))(<><x><y/></x></>) = let (prop = window, prop = this) null.constructor = 4. in /*\n*/1.2e3) /*for..in*/for(let __proto__ in <y><z/></y>) {#1#;export *; }");
tryItOut("/*for..in*/for(var [__proto__, __proto__] = (Iterator()) in [z1,,] instanceof <x/>) {gc()const __proto__; }");
tryItOut("return <x/>;");
tryItOut("/*infloop*/while(<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", (<x><y/></x>).watch))");
tryItOut("yield new 1e+81(<><x><y/></x></>, @foo);");
tryItOut("with({constructor:  \"\" }){L:if(@foo) gc()switch( /x/g ) { default: break; case ( /x/ )[1e+81]: with((((Math.sin).apply).call(033, @foo, 4.))){prototype; }case 0: return 1e+81;break;  } }");
tryItOut("{throw  '' \n }");
tryItOut("{with({__count__: \n[,,z1]\n ? *(<x><y/></x>) : function (__noSuchMethod__, __iterator__)<><x><y/></x></>})__count__; }");
tryItOut("/*for..in*/for(var [__proto__, prop] = <x><y/></x> .@ false in (<y><z/></y>.throw(#1#).@*)) __proto__((this.propertyIsEnumerable(\"__proto__\").*))");
tryItOut("const __iterator__ = <x/>;");
tryItOut("switch((* for (__proto__ in <x/>) for (__iterator__ in  /x/ ))) { case <><{prototype}><bbb xmlns:ccc=\" /x/  <<= [,,z1]\"><ccc:eee></ccc:eee></bbb><> /= (\f<y><z/></y> || <x/>)</><ccc:ddd><>(__iterator__.(@foo))</><!--yy--></ccc:ddd></{prototype}></>:  }");
tryItOut("gc()");
tryItOut("yield __iterator__;");
tryItOut("(<y><z/></y>);");
tryItOut("M:if( /x/g .__iterator__) {} else {yield; }");
tryItOut("__iterator__ = __proto__;");
tryItOut("L:while((<><x><y/></x></>) && 0){return;let __iterator__; }");
tryItOut("throw StopIteration;");
tryItOut("{return prototype\n }");
tryItOut("return;");
tryItOut("/*infloop*/while(1e-81){throw  /x/ ; }");
tryItOut("/*for..in*/M:for(__parent__ = (function(id) { return id } | ({a2:z2})) in *) {const __noSuchMethod__ = ({a1:1});yield #3={a:#3#}; }");
tryItOut("{yield <x/>; }");
tryItOut("if((this.__defineGetter__(\"prototype\", *)--)) { if (this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; __proto__ = *, __noSuchMethod__;; yield y; })) {L:if(<x/> instanceof <>__noSuchMethod__</>)  else {return @foo; } }} else {; }");
tryItOut("if(yield (new Exception(__noSuchMethod__.prop = undefined))++) {/*for..in*/for(let __parent__ in <x><y/></x>) {(function(y) { yield y; yield;; yield y; }).calllet prototype, false; }*; } else  if (*) {(this);return <x/>;throw this;(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(//h\nvar __proto__ in ((/a/gi)( /* Comment */eval(\"[,,]\", <><x><y/></x></>))))/*infloop*/do export *; while((yield (this.__defineGetter__(\"*\", window))));");
tryItOut("M:if((prototype(new [1,2,3,4].slice()))) {let (__noSuchMethod__ = <x><y/></x>, prop = <><x><y/></x></>) { ; } } else  if (eval(\"do constructor = window, __proto__ =  '' ; while((<x/>) && 0);\", <x><y/></x>)) let __count__; else yield (this);;");
tryItOut("yield ({prop: Iterator(()), getter: #3={a:#3#} });");
tryItOut("/*infloop*/for(__proto__ = null; __proto__; <x/>) {__iterator__;yield; }");
tryItOut("with((yield #3={a:#3#})){var prop = *, get; }");
tryItOut("/*for..in*/for(const __count__ in __iterator__ =  \"\" .valueOf(\"number\")) /*infloop*/L:do const prototype = <y><z/></y>, __noSuchMethod__ = prop; while(__count__.constructor = constructor);");
tryItOut("yield");
tryItOut("prototype = ((p={}, (p.z = ([1e81 for (prototype in  \"\" )]))()));");
tryItOut("L: {export __proto__;(__proto__); }");
tryItOut("gc()");
tryItOut("/*infloop*/do {switch(#0= /x/g ) { case ({ get prop(prop, prop)eval(\"break L;\", <x><y/></x>) }): case 8: throw function ([y]) { }return;case @foo: break; default: /*for..in*/for\t(var [__iterator__, __proto__] = <x/> in __parent__) {continue M;yield; }break; case new (null)(0.1, <y><z/></y>): const __noSuchMethod__ = [,,z1], prototype;break; case 7:  } } while([({ x::__proto__: ({ constructor: __proto__ }) }), [[__iterator__, __proto__, , function::__noSuchMethod__, prop], ({ __iterator__: constructor }), ({ __parent__: constructor }), ], ] = <><x><y/></x></> === *);");
tryItOut("while(([15,16,17,18].some(({}).__lookupGetter__, <x/>.__lookupSetter__(\"__proto__\")) >> 3 < __proto__ = (({__count__: <x/>}))) && 0)if(__proto__) {0; }");
tryItOut("/*infloop*/for(constructor; ({ __parent__: [, , prop, ] }) = (new Function(1e-81 |= 1.3)).x::__noSuchMethod__; (new Exception(prop = <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")))) {/*for..in*/for(let [__iterator__, prototype] = __proto__ = __parent__ in ((<x><y/></x>).watch(<><x><y/></x></>, undefined))) gc()while(((*::*.__lookupSetter__(\"prop\"))) && 0)const __iterator__ = @foo, __count__; }");
tryItOut("/*for..in*/for(const constructor in ((new Function)((((new (false .@ <x><y/></x>)()) for each (prototype in <!--yy-->) for each (constructor in 0x99) if ( '' ))))))if(<y><z/></y>) export __proto__; else  if (*::*) yield window;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in this) undefined;if(*) { if ([,,z1]) prototype.__noSuchMethod__ = false} else {__proto__;export *; } }");
tryItOut("if((window for (__count__ in <x><y/></x>) for (__iterator__ in  /x/g ))) {return;((function(q) { return q; }).call).apply } else  if (__iterator__.__count__ = #2=*::*) \f;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <><x><y/></x></>) {{}getter }");
tryItOut("if((undefined = *::*)) {/*infloop*/for(__parent__; false; window) {yield *;<><x><y/></x></>; } }");
tryItOut("\tdo var __count__; while(((({__parent__: <><x><y/></x></>, constructor: @foo }))) && 0);");
tryItOut("L:if((__proto__)) ; else  if (.2) ; else {/*for..in*/for(const __count__ = constructor = __count__ in  '' ) export *; }");
tryItOut("/*for..in*/for(prop in ((constructor.constructor = )(Exception((({__count__: [[1] if (033)] }))) + (((yield <x/>.__iterator__ = @foo)).unwatch(\"(arguments)(function(id) { return id })\")))))/*for..in*/for(var prototype((<x/>.watch(\"__count__\", function (prototype)*::*))) in (((([15,16,17,18].some((Function).call, constructor))).apply)({}.constructor))){while(( '' ) && 0){return; } }");
tryItOut("M:with( if ((yield 5.0000000000000000000000)))export *;");
tryItOut("/*for..in*/for(var __proto__ =  \"\"  in <x/>) gc()");
tryItOut("with({({ __noSuchMethod__: [, , (({a2:z2}))(*::*)], prop: __proto__ }): <><zzz>undefined >>= __parent__</zzz></>})export __iterator__;");
tryItOut("/*infloop*/while(prop){return [z1,,].__lookupSetter__(\"prototype\");const __proto__, __iterator__ = <y><z/></y>; }");
tryItOut("while(([15,16,17,18].sort(({}).__lookupGetter__, (<x><y/></x>.valueOf(\"number\").propertyIsEnumerable(\"constructor\")))) && 0)\t0/0");
tryItOut("M:with((<x><y/></x>.hasOwnProperty(\"__count__\")))export __iterator__");
tryItOut("while((window) && 0){return 0.1;export __count__; }\nM:if(<x><y/></x>.eval((yield undefined))) { if (__proto__ =  /x/ .propertyIsEnumerable(\"__parent__\")) {}} else {gc() }");
tryItOut("return;");
tryItOut("{if(constructor) yield; else  if (-3/0) {evalyield; } else let __parent__ = <><x><y/></x></>; }");
tryItOut("switch(<x/>.*) { default: break; case 1: case 5: throw <y><z/></y>;break;  }");
tryItOut("try { [1]; } finally { continue M; } \nL: <><x><y/></x></>;\n");
tryItOut("let (constructor, prop = <><x><y/></x></>) { throw __proto__; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((({}).hasOwnProperty)((let (__parent__ = *, prototype = [[]]) <><x><y/></x></>))))const constructor = <><x><y/></x></>\n");
tryItOut("yield;");
tryItOut("/*infloop*/for(this .@*:: <x/>; ({prop: __iterator__ = 1.2e3.__defineGetter__(\"constructor\", Function) }); ({})) {export prop;return; }");
tryItOut("if((eval(\"with(<employee id=\\\"1\\\"><name>Joe</name><age>20</age></employee>.([__count__]))gc()\", this.zzz.zzz))) /*infloop*/M:for(__parent__; (__count__ = (yield function ([y]) { })); this) \f{var __count__ = [1], __count__ = <><x><y/></x></>; } else {break ; }");
tryItOut("L:with([15,16,17,18].map(((new Function(\"let prototype, __noSuchMethod__ = window;\"))).apply, (__noSuchMethod__ = this)))/*infloop*/do {if( /x/g ) {return;var prop = <x><y/></x>, __iterator__ = false; } else  if (this) const __parent__, __noSuchMethod__ = <y><z/></y>; } while(@foo .@x:: <><x><y/></x></>);");
tryItOut("let(prototype) { continue ;");
tryItOut("/*for..in*/M:for(const prop.constructor in ((function (__count__, __noSuchMethod__) { yield (window <=  /x/ ) %  /x/g  == @foo\n ? <><x><y/></x></> : <><x><y/></x></> } )(__noSuchMethod__ = [,].prop)))yield  /x/ ;");
tryItOut("with({__count__: ({ \nfunction  prop () { L: {return window;window; } } : constructor }) = (yield this\n)})yield Boolean( /x/ , <x><y/></x>);");
tryItOut("{/*for..in*/L:for(const __count__ = [] +=  ''  in prototype) {{} }/*for..in*/for(const (__noSuchMethod__) in this.__defineGetter__(\"constructor\"/*\n*/, this)) yield <><x><y/></x></> ? case ({__count__: 1e+81, __iterator__:  ''  }) ? (1.2e3 .. 4.) :  \"\"  < false: /*for..in*/M:for(let prop = <y><z/></y> > <x><y/></x> in __iterator__) return; : __noSuchMethod__; }");
tryItOut("do {__count__(@foo) = prototype;/*infloop*/L:for(({ __proto__: ({ __noSuchMethod__: ({ constructor: prototype }) }) }) = __count__ = <x/>; new function () { yield window } /*(); this.zzz.zzz) export prototype; } while(( \"\" ) && 0);");
tryItOut("(Function).call");
tryItOut("with({}) __proto__ = __count__;");
tryItOut("with(constructor(false))switch(*::*) { case this.__defineGetter__(\"prop\", <y><z/></y>): /*for..in*/for(const [__parent__, prototype] = __iterator__ = 0.1 in <x><y/></x>) break L;break; case __proto__: prop, prop }");
tryItOut("{/*infloop*/for(let __parent__; (\n '' ); prop = <y><z/></y>.propertyIsEnumerable(\"__iterator__\")) {return this; }; }");
tryItOut("/*for..in*/for(var [__parent__, prop] = this in eval(\"/*infloop*/for(set = *; <y><z/></y>; <x/>) { }\", 4.)) {L:if(undefined) { if (this) yield  /x/g ;} else {yield window; }break L; }");
tryItOut("{/*for..in*/for([__proto__, __noSuchMethod__] = (eval(\"export *;\", <x><y/></x>)) in <y><z/></y>) {(prototype), <><x><y/></x></> } }");
tryItOut("L:with(new (<x><y/></x>)()){return <x/>;var \f__noSuchMethod__ = @foo, __proto__ = <x><y/></x>; }");
tryItOut("with(([<><x><y/></x></>].some(\ffunction  prop (__noSuchMethod__) { return <x><y/></x> } )))L: yield <x/>;");
tryItOut(" prototypeif(");
tryItOut("/*infloop*/do {while(((delete <x><y/></x>) || (({}) *= [[1]])) && 0) } while((-0));");
tryItOut("L:if((<><x><y/></x></> /= 033)) {gc() } else  if (__count__ = this |= this) /*infloop*/do export __iterator__; while(true);");
tryItOut("__iterator__if(*::*) ;");
tryItOut("with({constructor: <y><z/></y>})break ;");
tryItOut("if(window.unwatch(\"__proto__\")) return; else  if (this.__defineSetter__(\"constructor\", <x/> .. getter)) gc()");
tryItOut("M:while(([z1,,]) && 0)switch( /* Comment */(throw \nlet __count__ =  /x/g , constructor =  /x/ ;)) { case 8: break; case 5: /*infloop*/for(var __count__; -3/0; 3/0) yield <><x><y/></x></>; const __count__; }");
tryItOut("break ;");
tryItOut("/*infloop*/while(<x/>)<y><z/></y>");
tryItOut("if(([15,16,17,18].some(function(y) { yield y; return;; yield y; }, (new <x><y/></x>(<x><y/></x>))).valueOf(\"number\"))) {throw <x><y/></x>; } else gc()");
tryItOut("with({}) { with({}) yield ( /* Comment */*); } ");
tryItOut("export *;");
tryItOut("/*for..in*/for(let __proto__(prototype = window) in ((this.__defineGetter__(\"function::__iterator__\", eval))(__proto__ = prototype = __count__))){gc()const ; }{switch(1.2e3++) { default: break;  } }");
tryItOut("with({}) const let = .2, __proto__ = <x><y/></x>;");
tryItOut("if([(<><x><y/></x></>--)].sort(1e-81)) var __count__ = <x/>;");
tryItOut("/*for..in*/L:for(const __proto__ in ((function  prototype (({ prototype: __count__, constructor: __iterator__ }), __iterator__)for(let y in []);)(({ __parent__: __parent__ }) = ({ prop: new Iterator(#1#, <><x><y/></x></>) }))))if((__count__ = <><x><y/></x></>)) yield ;");
tryItOut("__count__");
tryItOut("L:switch((({prototype setter: (gc).apply }))) { case 7: break; default: if(<><x><y/></x></>.constructor) {var __iterator__; } else  if (null.hasOwnProperty(\"__parent__\")) {__parent__ = this; }case 3: break;  }");
tryItOut("/*infloop*/do {export *;export __count__; } while(__count__ = __parent__);");
tryItOut("/*infloop*/__noSuchMethod__ setter: window");
tryItOut("return;");
tryItOut("do {/*infloop*/for(const [, ({ prototype: __proto__, constructor: __proto__ })] = 'fafafa'.replace(/a/g, gc); <y><z/></y>.valueOf(\"number\"); yield <x/>) \t;export __count__; } while((window .@x:: <><x><\ty/></x></>) && 0);");
tryItOut("if(0) { if (prop && [,]) {export __count__; }} else {<><x><y/></x></>; }");
tryItOut("with(1e81 || 1e-81)if(this) /*\n*/{ if (delete <x><y/></x>) yield  /x/g , #1=[#1#]; else {gc() }}\f");
tryItOut("5.0000000000000000000000");
tryItOut("<><x><y/></x></>");
tryItOut("export constructor;");
tryItOut("/*infloop*/M:do L:with({__noSuchMethod__:  /x/g })function (__noSuchMethod__, constructor) {  }  while((yield prop.(false)));\nexport __proto__;\n");
tryItOut("/*for..in*/for(prop in ((function(y) { yield y; ;; yield y; })(constructor.__proto__ getter= new Function))){yield null; }");
tryItOut("L:while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0);");
tryItOut("/*infloop*/do {((function  __parent__ () { <x><y/></x> } ).apply).apply } while(( /x/ .isPrototypeOf(<><x><y/></x></>)));");
tryItOut("yield;");
tryItOut("L:if(({ __iterator__: [/*\n*/({ __parent__: [] }), , []], prop: [, __iterator__, ({ __iterator__: __iterator__, constructor: ({ __parent__: [, prototype] }) }), , ] }) = (undefined)[false]) with({}) { return; }  else {/*infloop*/L:for((); !this; false.eval([,]).prop = function::prototype = <x><y/></x>) if(<x/>) return  '' ; else {5.0000000000000000000000 } }");
tryItOut("/*infloop*/for(const __noSuchMethod__; typeof 5.0000000000000000000000; ( /* Comment */-1)) /*infloop*/L:for(\rlet constructor;  /x/g ; this) ");
tryItOut("M:if((uneval(1e-81))) export __count__; else  if ( \"\" [1e+81]) return <x/>;");
tryItOut("M:if(1e4 ?  ''  : <><x><y/></x></>) throw constructor; else  if (({__proto__: new Function(<x><y/></x>).constructor })) {/*for..in*/M:for([prop, constructor] = this in <x><y/></x>) {(1.3).call }/*infloop*/do var __noSuchMethod__ = prototype; while((uneval([z1]))); }");
tryItOut("do {yield;gc() } while(((({ get __count__ __count__ (prototype, __proto__)window, __proto__ setter: Math.sin })).eval(this !== <x><y/></x>)) && 0);");
tryItOut("if(this.__defineSetter__(\"__parent__\", function(q) { return q; })) { if ([(uneval(this.__defineGetter__(\"constructor\", function(q) { return q; })))].filter(function(q) { return q; })) {; }} else {var __count__, __proto__ = 0.1;if( /x/g ) {{}({}); } else  if ((new ([1,2,3,4].map)())) \r{return; } else export prop; }");
tryItOut("break L;");
tryItOut("/*infloop*/for(var __iterator__; this.zzz.zzz.hasOwnProperty(\"prototype\"); *) let (prop) { throw ({a2:z2}); }\n");
tryItOut("if(({ \fprototype: ({ prototype: ({ prototype: __proto__ }), __proto__: prop }) }) = __iterator__.__defineSetter__(\"__noSuchMethod__\", (Math.sin).call)) { if ( \"\" ) {{} } else {/*infloop*/do  while(this);__count__, __noSuchMethod__; }}");
tryItOut("if((\n[,,] === ( /x/g (<><x><y/></x></>)).__defineGetter__(\"__proto__\", Function))) { if ((new Function(<><x><y/></x></>).constructor = this.__lookupGetter__(\"__noSuchMethod__\"))) export *; else {/*infloop*/for(var \fprop; null; <x><y/></x>) export *; }}");
tryItOut("/*for..in*/for(const constructor =  ''  in  /x/ ) return;");
tryItOut("continue ;\n;\n");
tryItOut("/*infloop*/for(var prop; *; 0.__lookupSetter__(\"__count__\")) {prop;export __iterator__; }");
tryItOut("let (__noSuchMethod__ = null, __count__) { const constructor = prototype; const prototype; }");
tryItOut("do prop = <y><z/></y>, __parent__; while(((__noSuchMethod__ = __proto__)) && 0);");
tryItOut("L:with({constructor: ((Number())\n)})let (constructor, __proto__) { var __iterator__ = <x><y/></x>; }");
tryItOut("L: {do /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 0) {gc() } while((*) && 0);throw function(id) { return id }; }");
tryItOut("/*for..in*/L:for(var prop in (<><y/><)/x) {let __noSuchMethod__, prototype = false;({}).__lookupGetter__ }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = (#0=(eval(\"prototype\", <x><y/></x>))) in ((<x><y/></x>)(__noSuchMethod__))) if( /x/g ) {gc()const __noSuchMethod__ =  '' , function::__parent__ = <y><z/></y>; }");
tryItOut("if( /x/g ) { if (#1#\t) {break L;yield; } else export __count__;}");
tryItOut("/*infloop*/M:do {{}; } while((this)[__count__].throw(<><x><y/></x></>.isPrototypeOf(0x99)));");
tryItOut("if(prototype.prototype = <x><y/></x> <<= <><x><y/></x></>) {const __iterator__ = <x><y/></x>, <><x><y/></x></> = <y><z/></y>;(1.3 instanceof [1]); }");
tryItOut("/*for..in*/for(__parent__ in  /x/  if (<x><y/></x>)) export *; const __count__;");
tryItOut("/*infloop*/for(this; 1e+81; #3={a:#3#}) gc()\n;");
tryItOut("/*infloop*/for(({__iterator__: ({a2:z2}),  get constructor __noSuchMethod__ (\f__proto__, prop) { yield __proto__: constructor }  }); +3/0; ((new Function)(window))) <x/>;");
tryItOut("switch([11,12,13,14].filter) { case 1: break; yield;break;  }");
tryItOut("if(__count__ >>> prototype.propertyIsEnumerable(\"__iterator__\")) { if ([,,].__defineGetter__(\"__proto__\", function(q) { return q; })) {if(undefined) {(this); } else  if (<x><y/></x>) {export *; } else yield; }} else (<x><y/></x>);");
tryItOut("/*infloop*/do 1.2e3; while(\nwindow);");
tryItOut("/*infloop*/for(const yield; null; (-0)) {gc() }");
tryItOut("/*infloop*/do {export prop;\n{}\n } while(({a1:1}).propertyIsEnumerable(\"prop\")); const function::__parent__;");
tryItOut("/*for..in*/for(const (*)( /x/g ) in (([1,2,3,4].slice)())){(false); }");
tryItOut("function () { continue M; } \nyield \tprop;");
tryItOut("export *;");
tryItOut("{L:if((__count__ =  \"\" )) { if (( /* Comment */(<><x><y/></x></>)[ \"\" ])) {gc()yield <><x><y/></x></>; } else function  __count__ () { return *::* } }if() yield; }");
tryItOut("/*infloop*/for(function(id) { return id } ^  \"\" ['__iterator__']; yield prototype = prototype.prototype; (with(4.)), (({}).propertyIsEnumerable(\"function::__iterator__\"))) {(+window.hasOwnProperty(\"prototype\"));let (__iterator__, __parent__) { true; } }");
tryItOut("yield\n;");
tryItOut("/*for..in*/for(const  \"\" .__noSuchMethod__ in @foo.constructor) var prototype, prototype = {}");
tryItOut("new Function");
tryItOut("{if((({ __iterator__: constructor }) = constructor = *::*).unwatch(\"__parent__\")) { if ((<><x><y/></x></>)(true, try { ; } catch(prop if (function(){})()) { export *; } finally { {} } )) {const __count__ = 1e+81, constructor = [,];if(<x><y/></x>) {yield prop; } else {throw  /x/ ; } }} else L:if(<><x><y/></x><'/) export __noSuchMethod__; }");
tryItOut("L:if((1e-81.watch(\"prototype\", [1,2,3,4].map))) {gc() } else {throw <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) prop = [,];");
tryItOut("/*infloop*/do {export *;return; } while(__noSuchMethod__);let prop = 1e+81, __iterator__ = *::*\n{}");
tryItOut("L:if((__noSuchMethod__.prototype getter= (1 for (x in [])))) yield; else  if (([window].some(( '' ).__defineSetter__).isPrototypeOf((prototype.(true))))) /*for..in*/for(var __proto__ = [1,,] in  /x/ ) {}");
tryItOut("let(__iterator__, __proto__ = 'fafafa'.replace(/a/g, [1,2,3,4].slice)) { return;");
tryItOut("/*for..in*/L:for([__proto__, constructor] = #2=constructor = * in let (({ __parent__: constructor, __count__: prototype }) = <y><z/></y>.eval([,,])) false) function  prototype (constructor) { continue M; } ");
tryItOut("while((new ([z1,,].__noSuchMethod__)()) && 0){let __iterator__, __parent__;return false; }");
tryItOut("/*for..in*/for(var ({ constructor: function::__iterator__ }) in 1.3) {/*infloop*/for([1];  /x/g ;  \"\" ) {export __count__; }continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></>) {export prototype;function::__iterator__ = <><x><y/></x></>; }");
tryItOut("if((prototype = __iterator__)) {(3/0);export __count__; }");
tryItOut("/*for..in*/M:for([prop, __noSuchMethod__] = (function  prototype (__iterator__, __noSuchMethod__) { return arguments %= <><x><y/></x></> } ()) in (yield @foo)) with((({__noSuchMethod__:  /x/g  })))gc()");
tryItOut("/*infloop*/for([[, prototype], , ] = \tvoid (new (gc)(<x><y/></x>)); ((({prop:  /x/ })))(<x><y/></x>.@*); let ([[constructor, ({ __noSuchMethod__: __iterator__, __parent__: constructor }), , ({ __noSuchMethod__: constructor, __proto__: prop })], [[__iterator__], , ({ __noSuchMethod__: constructor })]] = [<x><y/></x>].__lookupGetter__(\"constructor\")) (constructor = ('haha'.split(1e4)))[__iterator__ = null]) {while((<x><y/></x>) && 0){export *;(false); }L:if((false.eval(__parent__))) { if ((prop = <y><z/></y>)) return;} else export __iterator__; }");
tryItOut("gc()\n[1,2,3,4].map\n");
tryItOut("M:with({__iterator__: this.__defineSetter__(\"prototype\", function(q) { return q; })})var prop, constructor = <x><y/></x>;");
tryItOut("/*infloop*/for((let (__proto__ = (<x/>.hasOwnProperty(\"prototype\")), constructor = <x><y/></x>) [window]); (<x/>.propertyIsEnumerable(\"constructor\")).__defineGetter__(\"__count__\", <> </>).@foo; null.eval((prop.__parent__ setter= <y><z/></y>.@*))) {yield 4.;throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = ({constructor: prototype.constructor setter= (Function).apply}) in window) {yield null; }");
tryItOut("constructor = __proto__;");
tryItOut("{let __parent__ = -1, __noSuchMethod__ = prototype;let prototype, __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in 4.) {continue L; }");
tryItOut("this.zzz.zzz;");
tryItOut("do  while((1.3) && 0);");
tryItOut("let(__iterator__) { for(let y in [])");
tryItOut("L:if(({prototype:  })) { } else {L:if(this) { if ([]) gc() else {{}break M;//h\n }}/*infloop*/M:do {__parent__;(<x><y/></x>); } while(#1#); }\n");
tryItOut("with({}) for(let y in []);");
tryItOut("{(\fprototype);gc()\nyield; }");
tryItOut("if((yield *)) yield;");
tryItOut("/*for..in*/for([constructor, prototype] = __count__.prototype = (window[__parent__]) in /a/gi) if(with({}) { {} } -=undefined) {return;function  prop () { return __proto__ }  }");
tryItOut("/*infloop*/while(yield null){throw StopIteration; }");
tryItOut("let __iterator__, __parent__ = constructor;");
tryItOut("L: if(<x><y/></x>) { if ([]) return; else {__parent__let __noSuchMethod__ = *::*;\n }}");
tryItOut("with({prototype: eval(\"/*infloop*/for(__proto__; (function(q) { return q; })true.prototype\\f) if(<y><z/></y>) {{__parent__ = <y><z/></y>, prototypelet prototype = window, prop; } } else  if (@foo) {(1e+81).watch<x><y/></x>; } else {export __noSuchMethod__; }\", __noSuchMethod__.unwatch(\"__iterator__\"))}){var prop; }");
tryItOut("yield;\n;\n\nif(({a1:1})) var prop = <y><z/></y>; else  if (<><x><y/></x></>( \"\" ,  /x/g )) break M;");
tryItOut("let(constructor = null, prototype) { yield;");
tryItOut("switch((uneval( \"\" ))) { default: while((yield @foo) && 0)return @foo;case 4: case <><>__iterator__.__defineGetter__(\"__parent__\", (Math.sin).apply) <<= prop.__proto__ =  /x/g </></>: /*for..in*/for([prop, prop] = __iterator__ in __count__) continue L;break; case (<xxx>{__iterator__}</xxx>.(window / *::*)): windowcase 8: break;  }");
tryItOut("var __parent__ = <x/>;\nreturn;\n\nbreak ;");
tryItOut("while(((<x/>.__proto__ = <x><y/></x>)) && 0)continue ; const __parent__;");
tryItOut("return; const __parent__;");
tryItOut("do export *; while((\t(__count__ .@x:: <x><y/></x>.unwatch(\"__noSuchMethod__\")).__parent__ = <bbb xmlns=\"new [1,2,3,4].map()\"><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd><!--yy--></bbb>.([15,16,17,18].map((arguments).watch, [,,].valueOf(\"number\")))) && 0);");
tryItOut("with({}) { return; } \n");
tryItOut("if(let (__parent__, __noSuchMethod__ = <y><z/></y>) <x><y/></x> >>>=(new (window)(@foo).__parent__ = __noSuchMethod__\n)) { if ((function  __count__ (__proto__) { var get, __noSuchMethod__ = 0.1; } ).call(__parent__ =  /x/g , )) {export \t*;gc() } else {yield <x><y/></x>;yield  /x/g ; }}");
tryItOut("/*infloop*/L:for(window; constructor;  /* Comment */[,,]) <x><y/></x>;");
tryItOut("L:switch(prototype = <x><y/></x>) { default: break;  }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((({}).__lookupGetter__)(<><bbb xmlns=\"<y><z/></y>\"><ccc:ddd><x><y/></x></ccc:ddd></bbb></>))){/*for..in*/M:for(var __iterator__ in ((Function)(3/0))){export *;#1=[#1#]; } }");
