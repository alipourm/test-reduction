
tryItOut("if( '' .watch(\"constructor\", function (({ prototype\f: prototype, __proto__: __count__ })) { yield  '' .yoyo(false) } ))((constructor = <><x><y/></x></> < <y><z/></y>))[, __proto__, ({ __count__: ({ __proto__: ({ prop: __count__ }) }) }), ({ __parent__: [] })]) throw undefined\nreturn;{} else  if (__count__ = (p={}, (p.z = ++ '' )())) {/*infloop*/while(*)gc() } else {for(let y in [5,6,7,8]) with({}) { yield  \"\" ; }  }");
tryItOut("if(this) {var __count__, constructor =  '' ;constructor; } else { /x/g ; }");
tryItOut("/*infloop*/L:for(({ prop: [], __noSuchMethod__: __iterator__ }) = (uneval(<><x><y/></x></>)); false ? constructor : <x><y/></x>.valueOf(\"number\"); new 'haha'.split(@foo >>= 0, <x/>.unwatch(\"prop\"))) {/*infloop*/for(const prop; __count__; <x/>) FunctionL: {export constructor; } }");
tryItOut("5.0000000000000000000000;");
tryItOut("if(function  prop () { gc() } .__lookupSetter__(\"__proto__\")) {\nvar prop =  /x/g , prop = window; }");
tryItOut("/*for..in*/for(var constructor = {} in  '' ) {throw <><x><y/></x></>;const __count__ = __count__, __count__ = true; }");
tryItOut("{if([[1]] -= <y><z/></y>) { if ((constructor =  /x/ )) {; }} else {__count__ = <><x><y/></x></> }while((<y><z/></y>) && 0){export *;const prop = ({}); } }");
tryItOut("/*for..in*/for(__parent__ in @foo) *::* const __iterator__;");
tryItOut("export *\nreturn window;");
tryItOut("L:if(<><xxx>{prop}</xxx></>) {yield (<x><y/></x>.yoyo(0.1)); } else  if (<x/>) {throw __iterator__;with( /x/ )yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let __noSuchMethod__; (new ({}).__lookupGetter__([<x><y/></x>.( /x/ )].@foo, __noSuchMethod__.constructor =  /x/ )); (4..valueOf(\"number\"))) {yield; }");
tryItOut("L:if(this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) {;; } else  if (prototype = 0x99) prototype = <y><z/></y>;");
tryItOut("for(let y in []);");
tryItOut("let (constructor = window, __proto__ = ((prototype = constructor) <= [,] || (-1))) { if(<><x><y/></x></>) {yield;var __count__ = undefined, __parent__; } else  if ([1]) export prop; }");
tryItOut("do {throw window;gc() } while((__proto__ = constructor) && 0);");
tryItOut("/*infloop*/for(1e4; <y><z/></y>; *::*) ( /x/g );");
tryItOut("M:while(((['fafafa'.replace(/a/g, [1])])) && 0){export *; }");
tryItOut("/*for..in*/M:for\n(var [__count__, __proto__] = continue M; in undefined) {return;const __count__ = 0.1; }");
tryItOut("while((0.1) && 0){return; }");
tryItOut("__proto__ = __count__;");
tryItOut("switch(__proto__) { default: break; case #2=3.141592653589793: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in <x\t><y/></x>.( /x/ ).prop) let __noSuchMethod__ = this.__defineSetter__(\"__parent__\", function  __parent__ ()this);");
tryItOut("if(this) {return null; } else {;const prop = <><x><\fy/></x></>, __noSuchMethod__; }\n{}");
tryItOut(" ");
tryItOut("if( \"\" ) { if (<y><z/></y>) {__iterator__;const prop = [[]]; }} else export *;");
tryItOut("/*infloop*/do *::*; while(window :: <y><z/></y> < [11,12,13,14].sort);");
tryItOut("L:do {let __noSuchMethod__, __proto__;{} } while(((eval(\"this.eval(<y><z/></y>)\", ((<><zzz>undefined</zzz></>)[constructor =  '' ])))) && 0);");
tryItOut("throw __proto__;");
tryItOut("L: if(()) yield; else {; }");
tryItOut("/*infloop*/for(const prototype; Number(this, [1]) @ 1e-81.throw(<x><y/></x>); (([11,12,13,14].some).@*)) {; }");
tryItOut("/*infloop*/for(__count__ = prototype = [,,] = prop;  /x/ ; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { }");
tryItOut("M:with([*::*].some(gc) *= window.valueOf(\"number\")){; }");
tryItOut("for(let y in [5,6,7,8]) yield ( /x/g  for each (__noSuchMethod__ in 1e81));");
tryItOut("while((window) && 0){continue ;if(<><x><y/></x></>) {function  __parent__ () { yield __proto__ } ; } else  if ( \"\" ) throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const (window)((-1).valueOf(\"number\")) = throw ({a2:z2}); new <x><y/></x>.(.2)(); __parent__ = 3/0) {<x><y/></x>;; }");
tryItOut("M:while((@foo.@foo) && 0){yield;yield; }");
tryItOut("let (__parent__ = (__proto__ = \nconstructor = 3/0), [__noSuchMethod__]) { new Function }\nswitch(-1) { default: case 1: break; case 7: break; case 0: export __noSuchMethod__;yield; }");
tryItOut("if(\f<><x><y/></x></>) { if (<><x><y/></x></>) yield <y><z/></y>; else {}}");
tryItOut("if(__noSuchMethod__.__parent__ = this.__defineSetter__(\"prop\", new Function)) (<x><y/></x>).__defineSetter__ else  if ((p={}, (p.z = <><x><y/></x></>)())((constructor = true), __parent__)) /*infloop*/L:for(let set; __parent__; undefined) {;var __count__ = <y><z/></y>; } else {(<x><y/></x>)\n__proto__; }");
tryItOut("L:if(void let (prop = [1,,], __proto__) null.@foo) {break M; } else  if (++<><x><y/></x></>) export __parent__;");
tryItOut("/*infloop*/L:for(( for each (__noSuchMethod__ in *::*) = (<><x><y/></x></>.__lookupGetter__(\"prototype\")).watch(\"constructor\"\f, function  __iterator__ (__proto__, prototype)((function ([y]) { })().__parent__ =  '' ))); <><>false--</></>.eval(yield __iterator__.__iterator__ getter= gc); (#1=({__iterator__: (({1e+81:  ''  }))}).yoyo((-- \"\"  + <y><z/></y> ^= <><x><y/></x></>)))) M:if(<x><y/></x>\n) const __iterator__; else return;");
tryItOut("if([(__noSuchMethod__.__noSuchMethod__ getter= new Function)]) { if (<x/>.isPrototypeOf(<x><y/></x>)) /*for..in*///h\nfor(let prop = eval(\"<bbb xmlns=\\\"*\\\"></bbb>\", <x/>).__lookupSetter__(\"__iterator__\") in <><x><y/></x></>) {continue L; }/*infloop*/for(var constructor = 0x99; function ([y]) { }; *) yield prop;} else {*::*gc() }");
tryItOut("if(<y><z/></y>) {;return; } else  if ( /x/g ) {export *; }");
tryItOut("if((<><x><y/></x></>.isPrototypeOf( '' ))) { if ((<><x><y/></x></>\n)) ;} else ;\f");
tryItOut("{export __count__;export __proto__; }");
tryItOut("M:while((-1) && 0) { return <><x><y/></x></> } ");
tryItOut("/*for..in*/M:for(let prototype in (\f((constructor))( '' )))gc()");
tryItOut("do {const prop, function(id) { return id }; } while((0/0) && 0);");
tryItOut("/*for..in*/for(let [prop, prototype] = [1,,] in 0) {export prop;{} }");
tryItOut("let __iterator__ = undefined");
tryItOut("with({}) __parent__ = __proto__;");
tryItOut("with({}) export prop;");
tryItOut("let (prototype = window;, prop = 4.) { yield <y><z/></y>; }break L\nlet __noSuchMethod__, prototype = <><x><y/></x></>\nthrow true;");
tryItOut("if(@foo) { if ([15,16,17,18].sort(function(y) { yield y; {}; yield y; }, ([,,z1])(<><x><y/></x></>))) {if(undefined) { if (null) {}} else {yield;(true); }return  \"\" ; }} else var prop, __count__ = prototype;");
tryItOut("throw StopIteration;");
tryItOut("with({}) { __proto__ = __iterator__; } ");
tryItOut("for(let y in []);");
tryItOut("(window)\n");
tryItOut("throw constructor;");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = #1#.__defineGetter__(\"__parent__\", <><x><y/></x></>) in  '' ) {( /x/ );export __noSuchMethod__; }");
tryItOut("/*infloop*/for(const __proto__; (<x/> ? true : <x><y/></x>); (new Array(<y><z/></y>,  /x/g )).__lookupSetter__(\"__proto__\")) G");
tryItOut("/*infloop*/L:for(var prototype; <y><z/></y>.propertyIsEnumerable(\"prototype\") < __count__ = <x/>.eval({ }); new Boolean((\n '' ), (1e+81 :: [,,z1]))) {return <x><y/></x>;var __proto__;/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <><x><y/></x></>) eval }");
tryItOut("if(@foo) { if (null) {this; }} else <y><z/></y>;");
tryItOut("if((({__parent__: @foo,  set __proto__ constructor (__noSuchMethod__, __proto__) { prop = *::*, prototype; }  }))) { if ( /* Comment */ /x/g ) {{var __noSuchMethod__ = <x><y/></x>, __parent__ = <x><y/></x>; } }} else {return;\n }");
tryItOut("yield <>\t<x><y/></x></>;\ngc()\n");
tryItOut("{return 1e81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in 1.3) (false);");
tryItOut("if(window ^= this) { if ({}) if(3.141592653589793) { if (true) {prop = <x/>;export *; } else throw .2;}} else case 7: break; default: case 9: if((RangeError())) { if (-function(id) { return id }) L:with(<x><y/></x>)export *;} else {\t{}return; }yield <x><y/></x>;break; case ({constructor: 3/0 = 1e+81 }): ;");
tryItOut("try { with({}) { var __parent__ = undefined, constructor = false; }  } catch(prop if (null.__lookupSetter__(\"__noSuchMethod__\"))) { let(constructor) {  } catch(__proto__) { for(let y in [5,6,7,8]) export __parent__; } finally { for(let y in []); } ");
tryItOut("do M:if([(<x><y/></x> * <><x><y/></x></>)].map(window)) __count__, __iterator__; while((<><xxx>{__proto__}</xxx></>) && 0);");
tryItOut("let(__iterator__) ((function(){break M;})());");
tryItOut("__count__,  \"\" ");
tryItOut("let (constructor, __iterator__) { ; }");
tryItOut("with({__noSuchMethod__: yield function ([y]) { }.valueOf(\"number\")}){{}if([,,z1]) { if ((<y><z/></y>)) {return *::*; } else {[1,2,3,4].maplet __iterator__, prop = false; }} }");
tryItOut("switch(<><bbb xmlns=\"new (this)(4.).__iterator__\"></bbb></>) { case 3: /*infloop*/for(var \t[[({ prototype: __iterator__ })], ({ __iterator__: [, , function::prop, ], __parent__: ({ prop: prop, __noSuchMethod__: ({ constructor: prototype, __parent__: __count__ }) }) }), ] = (this.zzz.zzz); this.zzz.zzz; delete <y><z/></y> == <><x><y/></x></>) {yield\nyield; /x/  }default: export set;break; break;  }");
tryItOut("/*infloop*/for(var ({ prototype: [, [({ __noSuchMethod__: return; }), , ({ __iterator__: __parent__, __count__: constructor })], , ({ constructor: ({ prototype: __parent__ }) })] }) = 4.; (((RangeError()).prototype).apply)(prototype.__iterator__ getter= new Function, ((( /x/ ).watch).call(function::__proto__.__parent__ = <x><y/></x>, ))); function(id) { return id }.* >>> <><x><y/></x></>) {gc() }");
tryItOut("{;yield #1#; }");
tryItOut("L: {throw StopIteration; }");
tryItOut("/*for..in*/for(__iterator__ in (((1 for (x in [])))(window)))break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in ((<x><y\t/></x>)())) gc()");
tryItOut("/*for..in*/for(function::x::prop(((<><x><y/></x></>)([,,z1]).throw(<x><y/></x>.valueOf(\"number\")))(__iterator__.(<x/>)))while((@foo) && 0)break M;");
tryItOut("throw prototype;break M;");
tryItOut("/*infloop*/M:for(prop; #2=[this].hasOwnProperty(\"prototype\"); <><zzz>(this.__defineGetter__(\"__proto__\", ((new Function(\"yield <x/>;\"))).call))</zzz></> - <y><z/></y> = window << this.zzz.zzz.__defineSetter__(\"__proto__\", ((<><x><y/></x></>).watch).apply)) {switch(null.__iterator__ >>>=({function(y) { yield y; yield;; yield y; }: *::*})) { case 9: case (constructor = prototype = window): return #3={a:#3#};break; case ({prototype:  /x/g  }): ( /x/g );break; continue ;break; __proto__, __iterator__;gcbreak; return; }{gc() } }");
tryItOut("/*for..in*/L:for(__iterator__ = prototype =  /x/g  in x::prop()) {(<x><y/></x>);-1 }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let [15,16,17,18].sort([,,z1], <x/>).prototype in  /x/g ) {switch((<y><z/></y>)(true, *)) { default: /*for..in*/M:for(const [__proto__, __iterator__] =  ''  in ) yield;break;  }L: {} }");
tryItOut("if(<y><z/></y>) { if (this.zzz.zzz) {@foo; }} else {/*infloop*/for(null['constructor'] = <x><y/></x>[[1,,]]; (let (constructor = #1#) @foo); (new prop = prototype())) {yield;return <x><y/></x>; } }");
tryItOut("/*infloop*/M:\ffor(const __proto__; let =  /x/ , constructor; 3) {gc() /x/g ; }\nreturn <x><y/></x>\f;\n");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("if(([[11,12,13,14].some].filter(Function))) { if ([11,12,13,14].filter) with({__proto__: window}){export *; }} else {let __count__ = [[]], __iterator__ = [1]; }");
tryItOut("do {export *;return this; } while((([1].__parent__)) && 0)\n");
tryItOut("switch(*) { default: break;  }");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.prop in 1e4) {throw *::*; }");
tryItOut("if(-0.watch(\"__count__\", Math.pow)) { if (+<x><y/></x> .. undefined <<= 3/0) {yield; }} else const __parent__ =  /x/ , prop = this;");
tryItOut("switch(-3/0.throw(3.141592653589793)) { default: break; case window !== -0.throw([z1,,].valueOf(\"number\")) === .2.__defineSetter__(\"constructor\", ({}).hasOwnProperty): if(<><x><y/></x></>) { if ((function ([y]) { })()) var __proto__ = (-1); else {gc() }}break;  }");
tryItOut("with({}) { with({}) return <x/> for each (constructor in constructor); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const \t__parent__ in <y><z/></y>) continue ;");
tryItOut("if(__count__) { if (\r[15,16,17,18].filter(gc, ('fafafa'.replace(/a/g, new Function)) |= (({ prop: __count__, __iterator__: prop }) = __iterator__))) {const __count__, prop = __parent__ = 1e81; }} else L: {gc() }\t");
tryItOut("window\nexport *\n");
tryItOut("with({__iterator__: __noSuchMethod__ = 0x99 <<= @foo, __proto__}){if(<x><y/></x>) {continue M; } else  if (__parent__) {let constructor = __count__; } else {yield \tnull;break M; }<x><y/></x> }\nswitch(<y><z/></y>.__defineGetter__(/*\n*/\"prototype\", Math.pow)) { case this: (new Function(\"var __iterator__ = [[]], __iterator__;\")) }\n");
tryItOut("prop");
tryItOut("/*infloop*/L:for(<x><y/></x>; 3; window) throw <x><y/></x>;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("if(<><x><y/></x> </>) { if ( ''  + {}.valueOf(\"number\")) __parent__;} else this;");
tryItOut("/*infloop*/do throw window; while(<x><y/></x>.__lookupGetter__(\"prop\"));");
tryItOut("<!--yy-->");
tryItOut("while((this) && 0)continue ;");
tryItOut("let(__proto__, __count__) ((function(){__proto__ = arguments;})());");
tryItOut("do {if(<x><y/></x>)  else  if ( '' ) break M; } while((({ constructor: [, ] }) = (eval(\"0x99\", 'fafafa'.replace(/a/g, function  __proto__ ()this)))) && 0);");
tryItOut("if(eval(\"__count__, __count__ = (function ([y]) { })();\", __count__ = <x><y/></x>)) {return;; } else  if (<{__noSuchMethod__}> </{__noSuchMethod__}>) yield;");
tryItOut("{/*infloop*/M:for(__proto__; 1e+81; 3) gc()(.2); }");
tryItOut("/*infloop*/for(var prop = <><x><y/></x></> %= <y><z/></y>; [1] instanceof <><x><y/></x></>; new (function  prop (__iterator__) { yield constructor } )((-0), 0.1)) {export *;yield ({a1:1}); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in false) {let __count__;\fexport prop; }");
tryItOut("M:with((new ([,,z1]).__defineSetter__()).yoyo([z1])){export __parent__;/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in true) {const __iterator__ = ({a2:z2}), __parent__;; } }");
tryItOut("{}\n");
tryItOut("if(__iterator__) yield @foo; else  if (<><x><y/></x></> >>> <x><y/></x>) (new Function(\"gc()\")) = *::*, prop;");
tryItOut("while((*) && 0){if(function ([y]) { }) gc() else  if (arguments) throw #3={a:#3#}; else <><x><y/></x></>; }");
tryItOut("continue L;");
tryItOut("/*infloop*/for(var __count__ = 0/0; __parent__; 3.141592653589793) {}");
tryItOut("{<><x><y/></x></>yield; }");
tryItOut("with((false >>> ((yield ( /* Comment */3/0--))))){{}/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><x><y/></x></>) {export constructor;; } }");
tryItOut("/*infloop*/while(+__proto__ = this){yield; }");
tryItOut("{prototype const __count__; }");
tryItOut("/*for..in*/for(<y><z/></y>['__parent__'] in <x/>) throw <y><z/></y>;");
tryItOut("\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop(<x/> &= * == *::* ? <><x><y/></x></> : undefined) in __noSuchMethod__ = window.throw(0/0 = __iterator__)) {<><x><y/></x></>;/*for..in*/for(const __proto__ = #1=[#1#] in #1=[#1#]) return false; }");
tryItOut("with((p={}, (p.z = window)()) .. this)return\n(*::*);");
tryItOut("L:if(__parent__((new Object(__proto__ = __parent__, *))) = (((1 for (x in [])))(#0=window, [ ''  for each (__count__ in <><x><y/></x></>)]))) /*infloop*/for(var ({ __count__: ({ constructor: ({ __proto__: ({ __proto__: __parent__, __noSuchMethod__: __proto__ }) }) }), constructor: [] }) = <x/> .. new  /x/ (); #1#; 0x99() instanceof __parent__) {({ __proto__: ({ prop: constructor }) }){} } else  if ((p={}, (p.z = this.zzz.zzz)())\t) {{}if( \"\" ) {throw this;(<x/>); } else return; }");
tryItOut("L:while(((this.zzz.zzz)/*\n*/) && 0)this.zzz.zzz;");
tryItOut("{export *; }");
tryItOut("L:if('fafafa'.replace(/a/g, /a/gi)) with({}) { return; }  else  if ((if(((<x/>)(function ([y]) { }))) { if (<x><y/></x>.(-1)) {export *; } else <><x><y/></x></>;}).hasOwnProperty(\"__count__\")) export __noSuchMethod__;");
tryItOut("if( /x/g ) {yield <y><z/></y>; } else  if (window) yield;\f else {}");
tryItOut("if(*::*) {return prototype; } else  if (1e4) {{} }");
tryItOut("{(function(q) { return q; })(({ set __parent__() { Function }  })) *= -3/0.throw(window) }");
tryItOut("{constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([,,] in prototype = <><x><y/></x></>) /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <y><z/></y>)  '' ;");
tryItOut("for(let y in []);");
tryItOut("with({}) __proto__ = prototype;");
tryItOut("let (default: break; ) { continue ;\ngc()\n }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("L:switch(([prop, , ({ __parent__: ({ prop: [, __parent__, __proto__, , __proto__] }), __proto__: ({ __parent__: __count__ }) })] =  '' )) { case 3: /*infloop*/while(true)throw StopIteration;break;  }");
tryItOut("try { with({}) { {} }  } finally { let(__noSuchMethod__ = <x><y/></x>, __parent__ = #1#) ((function(){(new Function(\"var __iterator__;\"))})()); } ");
tryItOut("{if(<x><y/></x>.(false)) throw __count__; else  if (this.__defineSetter__(\"prototype\", (({}).hasOwnProperty).call)) {yield [z1];gc() } else return; }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", window)) {yield <x/>; } else  if (([<x/>])) throw __noSuchMethod__;\nexport constructor;\n else {if(null) yield; }");
tryItOut("with({}) throw __parent__;");
tryItOut("L:if(\n(__iterator__.prop setter= function (__noSuchMethod__, __noSuchMethod__)</x>.throw((__proto__ = true)))) {M:if( \"\" ) { if (<x/>) {(<x><y/></x>); }} else {__proto__; } } else  if (Iterator()) { } else ;");
tryItOut("/*for..in*/\tfor(const [__parent__, __iterator__] = function ([y]) { } in false) {break M; }");
tryItOut("do {const __noSuchMethod__, __proto__;throw <x/>; } while((new (function  constructor (__count__, __count__)4.).apply((<x><y/></x>)({}, function ([y]) { }), arguments)()) && 0);\f const constructor;");
tryItOut("\f<y><z/></y>;");
tryItOut("let (__proto__ = __parent__ = <><x><y/></x></>, prop = <x/>) { null; }");
tryItOut("return yield.__proto__ setter= function () { /*for..in*/for(prop = (<x><y/></x> * *::*) in null) {<y><z/></y>;\n{} } } ;");
tryItOut("Function");
tryItOut("if(new (<x/>)()) { if (({prop: (eval(\"null\",  '' ))})) export *; else {yield; }}");
tryItOut("L:with(null)({}).hasOwnProperty");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <y><z/></y>) {continue ; }\nconst __iterator__ = 0;\n");
tryItOut("/*infloop*/for(((/a/gi)(.2 >> (/a/gi))); (gc()) = __count__ = constructor /  /x/  ? this : window ? <y><z/></y> *=  \"\"  : <y><z/></y>; this.__defineGetter__(\"__iterator__\", Function)) {( /* Comment */033);<y><z/></y>; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__.prototype in constructor = this) {var constructor, prototype; }");
tryItOut("");
tryItOut("export __count__\n");
tryItOut("while((prop |= __proto__) && 0)const __parent__ = this;");
tryItOut("yield <y><z/></y>\nL:if(window) { if ( \"\" ) {gc() }} else { }");
tryItOut("let(__proto__ = -3/0) { let function::__proto__, __count__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __noSuchMethod__ in  /x/g ) {export *;return this; }");
tryItOut("if( \"\" ) function  prop (__proto__, __proto__) { return <><x><y/></x></> }  else  if (([].unwatch(\"constructor\"))) {function () { return undefined }  }\n");
tryItOut("(true)\nif((Function).call([,,], this)) {([,,z1]);; } else  if ([* for each (__noSuchMethod__ in window)]) 1e+81");
tryItOut("with([11,12,13,14].map){__proto__ }\n");
tryItOut("prop = __noSuchMethod__;");
tryItOut("let(({ __iterator__: prototype, __parent__: [, constructor] }), constructor = #1=[#1#]) { return prop = <y><z/></y>;");
tryItOut("if((p={}, (p.z = typeof <y><z/></y>)())) continue ; else {{} }");
tryItOut("let(__iterator__ = case 8: with(constructor)return;break; ) { return new ((new Function).call(<x><y/></x>\t, true,  /x/ ))((__iterator__ = __parent__), <x><y/></x><x><y/></x>.watch(\"__parent__\", [1,2,3,4].map));");
tryItOut("with({5.0000000000000000000000.__iterator__: null}){switch(this.__defineSetter__(\"prototype\", arguments)) { default: break; throw __proto__;break; case 7: L: throw true;; }/*infloop*/do ( /x/g ); while(__count__); }");
tryItOut("while((__noSuchMethod__(<><x><y/></x></>) = <><x><y/></x></> >>= <x><y/></x>.eval(1.3 ^ <x/> >= -1 += typeof __parent__.throw((<><x><y/></x></>(<><x><y/></x></>, null))))) && 0){return;{return window;gc() } }");
tryItOut("if((undefined.propertyIsEnumerable(\"__parent__\").constructor = new <><x><y/></x></>(this, <x/>)).watch(\"get\", /a/gi)) {return <x/>; } else  if ((eval(\"*\",  '' )).*(null, eval(\"([[1]]);\", 1e4))) {gc() } else return *::*;");
tryItOut("L: {return; }");
tryItOut("return [];");
tryItOut("/*for..in*/for(var (prototype) in (((gc).apply)(*::* &=  /x/ )))L:if((<x><y/></x>.__defineGetter__(\"__count__\", /a/gi))) throw #1#; else {}");
tryItOut("L:if(constructor = null) { } else  if ( ) (this); else var prop;");
tryItOut("if( /* Comment */*::*.@*) {__proto__; }");
tryItOut("/*infloop*/__noSuchMethod__ const prototype;");
tryItOut("with({constructor: (1e-81--)});");
tryItOut("switch(((-1).throw(__count__))) { default: switch(false) { default: break; case __iterator__: {}yield *;case 1: {}break; case  \"\" : break; throw <x><y/></x>;export __proto__; }break; export *; }");
tryItOut("while((@foo) && 0)throw <x/>;");
tryItOut("if((<><x><y/></x></>)()) {gc()gc() } else  if ((eval).call(<><x><y/></x></> .@ @foo, (<><x><y/></x></>)[({a1:1})])) {__iterator__; }");
tryItOut("with({}) { let(__noSuchMethod__ = this.__defineSetter__(\"__proto__\", 3/0), x::prototype) { throw __noSuchMethod__; } ");
tryItOut("/*for..in*/for([__proto__, __proto__] = ((export *).unwatch(\"__iterator__\")) in [ '' ].__lookupSetter__(\"constructor\")) {( \"\" );let __iterator__; }");
tryItOut("/*infloop*/M:for(prop.__proto__ = @foo.constructor = (<x><y/></x>.watch(\"__parent__\", 'haha'.split)); let (constructor, __proto__ = -0) <><x><y/></x></>; *) {L: function () { return <x><y/></x> }  }");
tryItOut("\n");
tryItOut("with({}) for(let y in [5,6,7,8]) let(let = __noSuchMethod__ = this % __iterator__ = __parent__ <= __count__ = <x/>, <><xxx {__count__}={.2.prop} /></>) { yield (String(<x><y/></x>));");
tryItOut("while((__parent__ = *.__proto__ =  /* Comment */<y><z/></y>) && 0){break M; }");
tryItOut("/*for..in*/for(const prototype = this in #3={a:#3#}) ;");
tryItOut("yield ({prototype: <x><y/></x> + @foo })");
tryItOut("M:with({__proto__: this}){return;yield get; }");
tryItOut("/*infloop*/while((<x><y/></x>.__lookupGetter__(\"prop\"))){{};//h\n }");
tryItOut("continue L;");
tryItOut("switch((<><x><y/></x></>.unwatch(\"prop\"))) { default: return;break;  }");
tryItOut("yield [0.1 if (__iterator__)];");
tryItOut("/*infloop*/for(({ __count__: [({ __proto__: ({ prop: prototype, __iterator__: __iterator__ }), __count__: ({ __noSuchMethod__: __count__, prototype: __noSuchMethod__ }) }), []] }) = 1e81 += <x><y/></x>; __proto__ = ( /x/g (false,  /x/g )); !#1=[#1#]) {/*infloop*/do { } while(<><x><y/></x></>); }");
