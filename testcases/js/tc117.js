tryItOut("__iterator__;");
tryItOut("/*for..in*/for(const [prototype, prop] = (this in ((({}).hasOwnProperty).call)) in <x/>) {export __iterator__; }");
tryItOut("with(<y><z/></y> >>= <x/>){<x/> const prototype; }");
tryItOut("{/*infloop*/M:while(*){constructor;\t(<><x><y/></x></>); } }");
tryItOut("if((([window.hasOwnProperty(\"__iterator__\")]))[window\n]) { if (new <><x><y/></x></>()) break ; else {(__iterator__);; }}");
tryItOut("with(function  __noSuchMethod__ (__count__, __count__) { throw undefined; } ){M:if([z1]) { if (#1=[#1#]) {continue ; } else return;}; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in *) const __noSuchMethod__, __iterator__ = false;");
tryItOut("/*infloop*/{var __count__ = *;yield 0.1; } while( for each (__iterator__ in constructor = prop) if ([,,z1]) __proto__);");
tryItOut("/*infloop*/for(var prototype = [1,2,3,4].map; (0\n); this.zzz.zzz && [[1]].propertyIsEnumerable(\"prop\")\t) { }");
tryItOut("return");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [prototype] }) = -1.yoyo(((uneval(true)))); prop; __noSuchMethod__ = <x><y/></x>) {yield; }");
tryItOut("L:switch(true ^ 3) { default: ;case 9: break;  }");
tryItOut("while((undefined) && 0)let __noSuchMethod__ = __count__, __proto__ = [z1];");
tryItOut("L: {var __parent__, __iterator__ = __count__;(this)\nyield prop;\nyield;\n }");
tryItOut("{/*for..in*/for(var prop in (((new new __count__(<x><y/></x>)(*::*++, ({__count__ setter: eval, __iterator__: <x><y/></x> }))))(<x><y/></x> ||  /x/g )))export prototype; }");
tryItOut("/*infloop*/for(([({a1:1})].filter(({}).__lookupGetter__) for each (__parent__ in *)); (uneval((__noSuchMethod__.__parent__ = <x><y/></x>))); (yield ('fafafa'.replace(/a/g, <x><y/></x>)))) {if((__noSuchMethod__ = window)) let constructor, __iterator__; else {return; }; }");
tryItOut("L: {export *;gc() } while((<x/>;");
tryItOut("if([[]]) {gc()export \tconstructor; }");
tryItOut("/*for..in*/for(var __iterator__ in __count__ = <x><y/></x>(1e-81.eval(this),  '' )) {(<x><y/></x>)throw window; }");
tryItOut("throw StopIteration\n");
tryItOut("/*for..in*/for(var [__proto__, __count__] = (new [[1]]++) in ({ __iterator__: constructor, prop: __iterator__ }) = (this for (__proto__ in __iterator__))) {(function ([y]) { })().__lookupGetter__(\"__proto__\");with({}) return (eval(\"<x><y/></x>\", <y><z/></y>)); }");
tryItOut("if(('fafafa'.replace(/a/g, ((__noSuchMethod__ = [, __iterator__, , , __noSuchMethod__]).yoyo((yield  /x/ ))).watch))) /*for..in*//* nogeckoex bug 349964 */ for  each(var new (({}).__lookupGetter__)(<y><z/></y>).__count__ in __noSuchMethod__ = window) switch((-1) instanceof \t0.1) { case [<x><y/></x>].filter( /x/g ): prototype;break;  } else  if (false.eval(*::*.watch(\"prototype\", function  __noSuchMethod__ (__count__) { return <x><y/></x> } ).eval(<bbb xmlns:ccc=\"__count__ = <><x><y/></x></>\"><ccc\f:eee></ccc:eee></bbb>))) {{} } else {/*infloop*/M:while(this)break ; }");
tryItOut("if((const __parent__ =  '' .__proto__ = (function ([y]) { })())) continue ; else \t if (@foo >>>= /x/ ) {prop = <x><y/></x>, __parent__; } else {yield  \"\" ;export *; } const prop;");
tryItOut("yield;");
tryItOut("if(__proto__.*) {; }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("\n");
tryItOut("{{return @foo; } }");
tryItOut("L:if((*[let constructor = *, __proto__ = __proto__\t;])) yield; else  if (typeof  '' ) {yield;gc() } const __count__;");
tryItOut("var __count__ = -3/0;null;");
tryItOut("with(null){if(0/0) {gc()prop, __parent__ = <><x><y/></x></>; } else {yield <x><y/></x>; }M:switch((#1#.propertyIsEnumerable(\"__proto__\"))) { case h.(<><x><y/></x></>): break;  } }");
tryItOut("yield ;\n /x/g ;\n");
tryItOut("throw StopIteration;");
tryItOut("export *;");
tryItOut("if(Function(this.zzz.zzz)) export *; else {{} }");
tryItOut("{let __iterator__, __proto__ = <x><y/></x>;var __count__; }");
tryItOut("/*for..in*/for(const [__proto__, __noSuchMethod__] = 0.1 in *::*) {return;4.; }");
tryItOut("if( \"\" ) { if ([]) let __count__, prototype; else {;const prop = __iterator__, __count__; }}");
tryItOut("return;");
tryItOut("/*infloop*/for(<x><y/></x>; __noSuchMethod__; 0.1) yield .2;");
tryItOut("export __proto__;");
tryItOut("if(<bbb xmlns:ccc=\"(new Iterator())\"><ccc:eee></ccc:eee></bbb>) { if (<x><y/></x> <<= __noSuchMethod__.@*)  else {yield  /x/g ; }}\t");
tryItOut("/*for..in*/L:for(var [__iterator__, prop] = (this.__defineSetter__(\"__proto__\", undefined) === (new ({ prototype: __parent__ }) = <x/>.@*( ''  instanceof [[]]))) in (this.__noSuchMethod__ += __count__)) {return;return prop; }");
tryItOut(" if (__iterator__.function::__iterator__) const prop; const __proto__;");
tryItOut("null");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (<x/>)[<y><z/></y>]['prototype'] in this) [[1]]");
tryItOut("while(((\n<><x><y/></x></>)) && 0)yield window;");
tryItOut("if(<x/>)  '' ; else  { yield window } ");
tryItOut("if((void .2).@*) {L:switch(<y><z/></y>) { case 9:  } }");
tryItOut("if((#1=window)) { } else {export *;export *; }");
tryItOut("if(<y><z/></y>) export *; else  if (window) return  '' ;");
tryItOut("/*for..in*/M:for(const constructor in <><x><y/></x></>) {return <></>;Function }");
tryItOut("{with({}) with({}) { return; } L: yield this;\nexport __parent__;\n }");
tryItOut("{var prop = __iterator__, __parent__ = false;export __count__; }");
tryItOut("/*infloop*/for(this.zzz.zzz;  \"\" .constructor; [,]) (undefined);");
tryItOut("let (x::__proto__ =  /* Comment */__count__, __parent__) { <x/>; }");
tryItOut("/*for..in*/L:for(let  '' .prop in ((function(y) { yield y; with({prototype:  /x/  = window !== <y><z/></y>})export __noSuchMethod__;; yield y; })(([[11,12,13,14].some if (*)]))))let __proto__;\nreturn  '' ;\n");
tryItOut("do L:if( /x/  &= <><x><y/></x></>) { if ((p={}, (p.z = this)())) { } else {var prototype = window;continue \nM; }} while(((yield void <x/>)) && 0);");
tryItOut("let (({ prop: ({ constructor: ({ __parent__: ({ __iterator__: prototype }) }) }) }), __iterator__) { return (p={}, (p.z = 3.141592653589793)()).throw((__noSuchMethod__ = @foo)); }");
tryItOut("{;{}\nreturn;\n }");
tryItOut("M:if(constructor) {{yield;return  /x/g ; }.2 } else  if (\n((window).__defineSetter__)((undefined())) * ((uneval([null(<x/>, <y><z/></y>) for each (prop in  /x/ ) for (prop in <y><z/></y>)])) || (({ constructor: prop, constructor: window }) = this.__noSuchMethod__ = *))) {/*for..in*/for(let __noSuchMethod__ in (((({}).__lookupGetter__).call)(((yield this.__defineGetter__(\"prototype\", 'haha'.split)))))){return window;yield; } } else {(typeof  '' );with({prototype: <x/>}){var __parent__; } }");
tryItOut("{/*infloop*/M:for((this)[<><x><y/></x><\f/>]; (new -0()); 'fafafa'.replace(/a/g, function(q) { return q; }))  }");
tryItOut("if((false.throw(\nthis))) *;");
tryItOut("if(((yield  \"\" ) <<= (0x99 instanceof <x/>))) {if((new window()) ? [*::*] : new ({}).__lookupGetter__(prop, -1)) L:with({prototype: [__proto__ if (<x>/*\n*/<y/></x>)]}\f){var prop, constructor = false; } else  if (<x><y/></x>.hasOwnProperty(\"prototype\")) {return 1e81\n*::*; } } else  if ((yield <><x><y/></x></>)) {yield <><x><y/></x></>; } else break ;");
tryItOut("\n");
tryItOut("yield;");
tryItOut("const prototype = @foo, __parent__\n");
tryItOut("M:with(<x/>)throw <x><y/></x>; const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(const [__parent__, prop] =  ''  in <x><y/></x>.(undefined)) {export *;throw  \"\" ; }");
tryItOut("/*infloop*/while(gc(<x><y/></x>, this)){}");
tryItOut("(*::*); const __count__;");
tryItOut("try { throw StopIteration; } catch(__count__) { /*for..in*/M:for(var prototype in (([1,2,3,4].slice)(window))){break ;export __proto__; } } finally { for(let y in []); } ");
tryItOut("let(({ function::prototype: prop }) = (3.isPrototypeOf(\t.2))) ((function(){var prototype = 0x99;})());");
tryItOut("gc()");
tryItOut("/*for..in*/for(var prop in (((function(y) { yield y; export *;; yield y; }).apply)((__noSuchMethod__)))){L: {; } }");
tryItOut("switch(yield <x><y/></x>) { default:  }");
tryItOut(";\nbreak ;\n");
tryItOut("M:if(( /x/ .__defineSetter__(\"__noSuchMethod__\", *))) {export __iterator__; } else ;");
tryItOut("/*for..in*/for(const [__count__, constructor] = (__noSuchMethod__.(<x><y/></x>)) in []) {break ;return <x><y/></x>; }");
tryItOut("<y><z/></y>;\nvar __iterator__ = <x><y/></x>, __noSuchMethod__;\n");
tryItOut("continue M;");
tryItOut("if(({ constructor: [({ prototype: ({ prototype: ({ let __proto__ = [z1];: __noSuchMethod__ }), __count__: [] }), arguments: ({ __iterator__: ({ __count__: __iterator__ }) }) }), __iterator__, , , ({ __parent__: [x::constructor, [, ]] })], prototype: [[, , ({ __count__: [], __iterator__: ({ __parent__: prototype, __noSuchMethod__: __iterator__ }) })], , ] }) = <xxx>{__proto__}</xxx>.isPrototypeOf(!(__proto__ = this))) this.zzz.zzz; else  if (__noSuchMethod__.__proto__ = (yield  /x/ ).__defineSetter__(\"__noSuchMethod__\", Math.sin).__lookupSetter__(\"prop\")) with(window ? *::* : @foo){return;while((prop = this) && 0)033.valueOf(\"number\") } else ({}).__lookupGetter__var __parent__;");
tryItOut("/*for..in*/for(const [__count__, __count__] = (*::*.__count__ = <y><z/></y>)++ in ) {{} }");
tryItOut("{/*for..in*/for(const [__iterator__, __noSuchMethod__] =  '' \n in <y><z/></y>) {if(<><x><y/></x></>) break ; else {return; } }export prop; }");
tryItOut("yield (__count__ = __proto__);");
tryItOut("if((new Function([[1]].__defineSetter__(\"prototype\", function(y) { yield y; __count__;; yield y; }), <bbb xmlns:ccc=\"(new (3)(this))\"><ccc:eee></ccc:eee></bbb>))) { if (({__noSuchMethod__: true}).isPrototypeOf((__parent__.__lookupGetter__(\"__iterator__\")))) /a/gi} else this;");
tryItOut("/*for..in*/for(const [({ __iterator__: <><x><y/></x></>, __parent__: __proto__ }), prototype] = prototype.__count__ setter= (1 for (x in [])) in window) continue L;");
tryItOut("M:if([15,16,17,18].filter([1,2,3,4].map, ([@foo]))) {/*for..in*/for(constructor.constructor in (prototype = [1,,]).valueOf(\"number\")) yield new function(y) { yield y; yield;; yield y; }(true);while((prop) && 0){L:if('fafafa'.replace(/a/g, Math.pow)) {(undefined);export *; } else  if (<y><z/></y>.hasOwnProperty(\"__iterator__\")) {yield  \"\" ; } else <x><y/></x>; } }");
tryItOut("if(arguments) {return; } else #3={a:#3#};");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: prototype }) = <><bbb xmlns=\"(function(q) { return q; }())\"><ccc:ddd></ccc:ddd></bbb></>; (yield [,,z1]); @foo) {if(<x/>) return 1e-81; else  if ([15,16,17,18].sort(<x/>, *::*)) <x/>throw <><x><y/></x></>\nprop = true, __proto__; }");
tryItOut("if(window) {{}const __parent__; } else gc()");
tryItOut("gc()");
tryItOut("{/*for..in*/for([__proto__, constructor] = ({}).throw(this) in this) {return; } }");
tryItOut("const constructor, __parent__;");
tryItOut("switch((('haha'.split).call(<x/>, arguments, <x><y/></x>))) { case 5:  }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  ''  in (delete = constructor)) {let __count__, __noSuchMethod__ = 1e-81;return; }");
tryItOut("/*for..in*/L:for(var __count__ in <><x><y/></x></>) export __count__;");
tryItOut("/*for..in*/M\t:for(let prototype in ((new Function)((eval(\"export __count__;\", 'fafafa'.replace(/a/g, [1,2,3,4].slice))))));");
tryItOut("M:if((uneval((<><x><y/></x></>.isPrototypeOf(-3/0))))) { if (({ prop: __iterator__, prototype: __parent__ }) = [constructor, , __iterator__].watch(\"<y><z/></y>\", function(y) { yield y; gc(); yield y; })) prototype = <x><y/></x>, prop;} else (@foo).__defineSetter__");
tryItOut("if(<x/>) {<x><y/></x>; } else  if ((window.propertyIsEnumerable(\"__count__\").prop.yoyo([<y><z/></y> in this for each (<x><y/></x> += <x><y/></x>['__iterator__'] in <y><z/></y>)]))) {var constructor = <y><z/></y>; }");
tryItOut("let(({ prototype: ({ /*__proto__: ({ __iterator__: ({ prop: __noSuchMethod__, __iterator__: __proto__ }), __noSuchMethod__: [default: break; case 5: break; , __proto__] })) }) = eval(\"/*for..in*/for(var getter = this in @foo) {export prototype;return; }\", let (constructor)  \"\" )) ((function(){with({}) { with({}) { for(let y in [5,6,7,8]) __iterator__ = prototype; }  } })());");
tryItOut("if(().__iterator__ = (__proto__.((this % 1e81)))) {/*infloop*/\twhile((this.__defineGetter__(\"function::__noSuchMethod__\", \t'haha'.split))){export *; }\nreturn;var prototype; }");
tryItOut("return false << [,,];");
tryItOut("with(prototype = {} << __proto__)yield;if(*.eval(<y><z/></y>)) {throw  /x/g ;null; } else  if (eval(\"gc()\", true)) break ;\n\n");
tryItOut("for(let y in []);");
tryItOut("<><>this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split)</><!--yy--></>");
tryItOut("if((((__noSuchMethod__)[<x><y/></x>])( '' , <x><y/></x>))) throw [,,z1];with({__noSuchMethod__: false.__proto__}){__count__ = -0, __count__ = 1.2e3;var constructor =  /x/g , prop; }");
tryItOut("/*for..in*/for(let prototype = __proto__.__lookupGetter__(\"__count__\") in #1=[#1#].watch(\"__parent__\", (({}).hasOwnProperty).call)) {return; }");
tryItOut("var prototype = <><x><y/></x></>, function::__noSuchMethod__\nexport __iterator__;");
tryItOut("\n");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = false = (<x/>)(*::*) in (( /x/ ))) @foo;");
tryItOut("/*for..in*/M:for(var __parent__ in (((new Function(\"export *;\")))(null.@foo))){@foo;const function::prop; }");
tryItOut("/*for..in*/for([({ constructor: ({ function::prototype: constructor, constructor: prop }) }), __parent__] = <> /x/g </> in <x/>) var __proto__, __noSuchMethod__ = __count__; const __proto__;");
tryItOut("; const __parent__;");
tryItOut("gc()");
tryItOut("/*infloop*/for([15,16,17,18].filter(<><x><y/></x></>, (<x><y/></x>.propertyIsEnumerable(\"__iterator__\"))); <><> </></>; [__parent__].sort((*).__defineSetter__).watch(\"__proto__\", yield *::*;)) {yield;with({__count__: <x><y/></x>})switch(1e81) { default: return; } }");
tryItOut("if(<zzz>((function ([y]) { })().__defineSetter__(\"__count__\", /a/gi)).__count__</zzz>) {gc() } else  if ('fafafa'.replace(/a/g, this.__defineGetter__(\"prototype\", 'haha'.split)) ? ( \"\" .__lookupGetter__(\"prop\")) : ((((p={}, (p.z = @foo.unwatch(\"constructor\"))())).constructor)())) {function  __parent__ (prototype) { return <x><y/></x> }  }");
tryItOut("do {yield;switch(constructor) { case  '' : ( /x/ );break; export __iterator__; } } while((__parent__) && 0);");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = this.throw(__count__) in new (function (__count__, prototype) { yield undefined } )(null,  /x/ ).yoyo(try {  } catch(__parent__ if (constructor)()) { const __proto__ = *::*, __noSuchMethod__ = <><x><y/></x></>; } catch(__count__ if *) { gc() } )) ");
tryItOut("/*for..in*/L:for(const [__parent__, prop] = __iterator__ in null) export *\n");
tryItOut("/*for..in*/for(var constructor.__proto__ in ({__parent__:  \"\" }) >= prototype-=prop = {}, __parent__.valueOf(\"number\")) L:do {switch( \"\" ) { default: break;  }yield #1=[#1#]; } while((((p={}, (p.z = undefined)()))) && 0);");
tryItOut("throw __count__ = __count__;");
tryItOut("__count__, __iterator__ = -3/0;");
tryItOut("{let(__count__ = <><x><y/></x></>, prototype = __iterator__) { ;(({a2:z2})); }");
tryItOut("(3.141592653589793);prototype;{(<><x><y/></x></>); }");
tryItOut("{__count__ = 0, __parent__ = <x><y/></x>;/*infloop*/while(<><x><//h\ny/></x></>) }");
tryItOut("let (__iterator__, __iterator__) { /*infloop*/for(undefined; <x/>; __proto__) {} }");
tryItOut("return <y><z/></y> > <x/> * function ([y]) { };");
tryItOut("L:if((<y><z/></y> , [,])) {return false; } else {window;__count__; }");
tryItOut("; const __iterator__;");
tryItOut("L: {export *;null; }let(__iterator__ = (__iterator__.(<x/>)), __count__) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*/M:for([constructor, __iterator__] = ((<></*\n*/x><y/></x></>)[ /x/ ]) in @foo) export *;");
tryItOut("/*infloop*/L:while([1,2,3,4].map()){let (__noSuchMethod__ = __iterator__, constructor) { var __proto__; }\n__iterator__; }");
tryItOut("L: {var __proto__ = <><x><y/></x></>;/*for..in*/M:for(let __iterator__(<x/>) in null) {return;1e+81; } }");
tryItOut("/*infloop*/L:while(new 'haha'.split(<x><y/></x>, <y><z/></y>))continue M;");
tryItOut("if([, , function::__count__] = this ^= <><x><y/></x></>.__lookupGetter__(\"__proto__\").propertyIsEnumerable(\"__noSuchMethod__\")) {__proto__ } else  if ([({ __parent__: prototype, __noSuchMethod__: prop })].throw(yield new ([1,2,3,4].slice)( \"\" , <x><y/></x>) << \t /x/g (__parent__))) {gc() } else {this.zzz.zzz; }");
tryItOut("L: const __parent__;");
tryItOut("while(((throw this)) && 0){let prototype = @foo, __iterator__ = (-1); }");
tryItOut("switch(.__noSuchMethod__) { default: for(let y in []);break; break; throw __noSuchMethod__; }");
tryItOut("{return true;function(y) { yield y; let __noSuchMethod__, constructor;; yield y; } }");
tryItOut("with(eval(\"return  /x/ ;\", <y><z/></y>))return;");
tryItOut("export __proto__\nwith(<y><z/></y>.__defineSetter__(\"__proto__\", function  prop () { return 1e-81 } )){var __iterator__, __iterator__;var __noSuchMethod__ = <y><z/></y>, __proto__ = \t<x><y/></x>; }");
tryItOut("/*for..in*/for(const prototype = (function (prototype) { return (window .@ -1) } (true)) in __iterator__ = -1) {do {M:if(@foo) { if (undefined) break M; else {yield *::*;yield 0x99; }}if( \"\" ) { if (<><x><y/></x></>) {return false;function ([y]) { }; } else return <y><z/></y>;} } while((constructor.unwatch(\t\"__count__\")) && 0);(<><x><y/></x></>); }");
tryItOut("with({__noSuchMethod__: function  __iterator__ () { yield (<x/> for each (prototype in {})) } }){(1 for (x in []))/a/gi }");
tryItOut("M:if(4..yoyo(<x/>)) {{throw <x/>;export prop; } }");
tryItOut("with({prop: \n ''  >= ({constructor: window}) >>>=<x><y/></x>--}){gc()/*for..in*/for(const __proto__ =  ''  in <x><y/></x>) const __parent__ = ; }");
tryItOut("yield;getter = <x><y/></x>, constructor = *;");
tryItOut("/*infloop*/do {return; } while((-({__count__: <><x><y/></x></>.eval(5.0000000000000000000000),  set prop __parent__ (prototype) { return *::* }  })\n.isPrototypeOf((p={}, (p.z =  /x/g )()))));");
tryItOut("with((prototype = __iterator__)){var __count__;export *; }");
tryItOut("/*infloop*/for((() |= ( * ([prop, , __parent__] = (<><x><\fy/></x></> @  /x/ ))));  /* Comment */__noSuchMethod__; *) /*infloop*/M:for(this; <x><y/></x> != 1e4; -window) {with({constructor: 5.0000000000000000000000})let constructor = 0/0, __parent__ = <x><y/></x>; }");
tryItOut("M:with({__parent__: .2.__parent__ = <y><z/></y>})");
tryItOut("/*for..in*/for(let __proto__ in <><x><y/></x></>) function\t (__proto__) { return -0 } ");
tryItOut("return (yield <><x><y/></x></>);");
tryItOut("{with({constructor: eval(\"null\", __count__.prototype = (-1))}){} }");
tryItOut("{;{;yield prop; } }");
tryItOut("");
tryItOut("/*infloop*/while( '' ){with((__noSuchMethod__ = <y><z/></y>))function (__iterator__) { return null }  }");
tryItOut("L:do {export __iterator__; } while((3.@*) && 0);");
tryItOut("return window\n(new Function(\"(1 for (x in []))\"))");
tryItOut("try { return; } finally { throw StopIteration; } ");
tryItOut("/*infloop*/for(const [] = <x><y/></x>; constructor = false; (\nfunction::prototype)) <x/>");
tryItOut("if((__noSuchMethod__ = window)) {if(<x><y/></x>) {throw undefined;function (__count__) { yield __iterator__ }  } else {export *;1.2e3; } } else  if () yield #1=[#1#];");
tryItOut("gc()");
tryItOut("/*for..in*/for(const [prop, __parent__] = eval(\"export *;\", (([ '' ]).__lookupGetter__(\"function::__proto__\"))) in <x><y/></x>.__lookupSetter__(\"prop\")) {let (__proto__) { export *; } }");
tryItOut("(window);\nexport prop;\n");
tryItOut("M:if(<><x><y/></x></>) ;");
tryItOut("/*infloop*/while((p={}, (p.z = window)())[__noSuchMethod__]){throw [1,,];__iterator__ = this, __parent__ = window; }");
tryItOut("/*for..in*/M:for(var __count__ in ((function  __iterator__ (__proto__) { yield this } )(-[,,z1])))return function ([y]) { };");
tryItOut("\fif(true) {(@foo);yield; } else  if ((new function (__count__, __count__) { yield 1e+81 } (arguments, undefined).yoyo(function::__noSuchMethod__.throw(1e81)))) yield @foo;\t else {}<y><z/></y>;");
tryItOut("let __iterator__, __count__ =  /x/g ;\n\nM:with({prototype:  /* Comment */this.zzz.zzz})if(__proto__.propertyIsEnumerable(\"__count__\")) constructor = window, prototype = window; else  if (<x><y/></x> <= null) { } else yield;");
tryItOut("let ([, ({ function::__count__: ({ __count__: __count__, prop: __proto__ }), prop: (('{ )__count__: ({ __parent__: ({ prototype: __count__, constructor: prototype }) }) } }), __parent__]) { switch(constructor: false) { default: return (yield <><x><y/></x></>)\n;break; case __parent__.__count__: (new Function(\"(({a2:z2}));\"))case 7: /*infloop*/for(*::*; constructor; prop) {return <x/>; }break; case ( '' .__defineGetter__(\"constructor\", ({}).__lookupGetter__)): break; prop = this, try { return; } finally { gc() } ;break; case (<><x><y/></x></>.@foo): break; case 8:  } }");
tryItOut("let (__proto__ = <><bbb xmlns:ccc=\" /x/g \"><ccc:eee></ccc:eee\f></bbb></>\n) { (window); }\f");
tryItOut("M:if((prototype-=1e+81))  else  if (__noSuchMethod__ = <x><y/></x>.unwatch(\"prototype\")) <x><y/></x>; else export *;");
tryItOut("throw StopIteration;");
tryItOut("L:/*\n*/while(((3++)) && 0)if(--((( ''  for each (prototype in  \"\" )))[(__count__ = <x><y/></x>)])) { if ([-__parent__ for each (constructor in  /x/g ) for each (getter in arguments)]) {Math.sinif(//h\n<><x><y/></x></>) {prototype, constructor = null; } else  if ( \"\" ) const __proto__, prototype = 3/0; else {throw 0.1; } } else {yield  /x/g ;yield *; }}");
tryItOut("with(!(({}).hasOwnProperty).apply(<x><y/></x>, <x><y/></x>)){__proto__ = this;/*for..in*/for(var [__parent__, __iterator__] = ({a2:z2}) in <x><y/></x>) throw null; }");
tryItOut("/*for..in*/for(prototype = __iterator__ in @foo) throw @foo;");
tryItOut("/*infloop*/L:for(eval(\"(\\n__count__.(1e-81))\", __proto__); prop.__count__ = ((uneval([*].some(({}).hasOwnProperty)))); (new  /x/g .prop)) L: ");
tryItOut("__noSuchMethod__ = __noSuchMethod__.\r__count__ = false >> null");
tryItOut("M:if(__proto__.valueOf(\"number\")) {{} } else  if ((prop) > new Error(<><x><y/></x></>, .2)) {return; } else export *;");
tryItOut("if([15,16,17,18].map(new Function, )) {(__count__).__defineSetter__ } else {}");
tryItOut("while((1e4) && 0)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <y><z/></y>) {return null;return; }");
tryItOut("while((__iterator__) && 0)yield  /x/ ;");
tryItOut("{}");
tryItOut("/*infloop*/do {yyy } while([[]]);");
tryItOut("/*infloop*/for(const __proto__ = (({ __count__: ({ __count__: __proto__, (constructor): ({ __noSuchMethod__: prop, __count__: prop }) }) }) = (-1)(undefined)); __proto__; eval) {/*for..in*/for(const [prop, __proto__] = (String()) in setter) {let (prototype) { export *; }return <><x><y/></x></>; } }");
tryItOut("if(this.zzz.zzz) yield; else  if ((return)) (prop); else constructor");
tryItOut("/*for..in*/for(const window.prototype in null) yield;");
tryItOut("M:with({__iterator__: (yield <x><y/></x>.isPrototypeOf(yield function(id) { return id }))})let constructor = false, __parent__ = (function ([y]) { })();");
tryItOut("if((yield *::*)) {return prop;yield; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if() L:with(window){gc()export constructor; }");
tryItOut("yield [1];\n__iterator__ = window;\n");
tryItOut("/*for..in*/for(let __parent__ in [11,12,13,14].sort) {export prototype;/*infloop*/while(function ([y]) { }/*\n*/){gc() } }");
tryItOut("let (__count__ = prototype = #1=[#1#].__proto__, prop) { try { return; } finally { let([, ]) { try { gc() } catch(constructor) { return; } finally { ; }  }  }");
tryItOut("{M:switch(<><x><y/></x></>) { case 9: export *;break;  } }\nwith({constructor: __proto__ = (__iterator__.prototype)}){const __iterator__ = prop, __count__ = function(id) { return id }; }\n\n");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = (window.@*.__defineGetter__(\"prop\", function  __proto__ () { return *::* } )) in <x/>) {;; }");
tryItOut("let(__proto__, __iterator__) { for(let y in []);");
