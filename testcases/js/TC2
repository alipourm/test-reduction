
tryItOut("do let prop = window; while((<x/>) && 0);");
tryItOut(";\nswitch(window) { default:  }\n");
tryItOut("\n");
tryItOut("M:do {return;if([z1,,]) \tthrow <x><y/></x>; else  if (*::*) {yield arguments; } } while((<><xxx {__iterator__}={<xxx {[]}={*::*} />} /></>) && 0);");
tryItOut("with({__count__: (uneval((<y><z/></y>.isPrototypeOf([z1])))) /= new @foo(<y><z/></y>)}){yield 3/0; }");
tryItOut("/*for..in*/for(let prop.prop in --*) {break L; }");
tryItOut("{/*for..in*/M:for(let __parent__ = true in <x><y/></x>) ({}).hasOwnPropertyreturn; }");
tryItOut("return;");
tryItOut("while((window.prop) && 0){/*infloop*/for(1.2e3 instanceof null; <><x><y/></x></\n> for each (constructor in window); <>return;</>) export constructor; }");
tryItOut("/*for..in*/for(const prop = constructor = __iterator__.watch(\"__iterator__\", [1,2,3,4].map) in <><x><y/></x>.__defineSetter__(\"__proto__\", this)</>.(this.__defineGetter__(\"prop\", ({}).__lookupGetter__) /= (yield constructor))) {{export __count__; }return; }");
tryItOut("with(__iterator__.constructor){ }");
tryItOut("{__parent__ = prototype; }");
tryItOut("{ for (constructor in *::*) if (<><x><y/></x></>)export *; }");
tryItOut("{try { new Function } finally { let prop, __count__ =  \"\" ; }  }");
tryItOut("/*for..in*/for(var prop in __iterator__) {break M;export *; }");
tryItOut("do let (__noSuchMethod__) { __parent__; } while((({__iterator__: prop = (prop, __iterator__ = *) })) && 0);");
tryItOut("L:with(({__count__: window.constructor}\f)){/*infloop*/for((let (__proto__ = this) <><x><y/></x></>); (__count__ = <y><z/></y>);  /x/g  :: <x><y/></x>) {export *; } }");
tryItOut("/*infloop*/for(let constructor; this :: <y><z/></y>.__lookupGetter__(\"prop\"); __count__ = __noSuchMethod__ = __iterator__(![,,])) /*infloop*/L:do {with(null){yield; } } while(yield true);");
tryItOut("false\n");
tryItOut("with([11,12,13,14].some.watch(\"__count__\", Math.pow) instanceof (3/0\n)){yield;--true }");
tryItOut("if(this) yield ({}); else  if (this.zzz.zzz) ");
tryItOut("/*for..in*/for(let prototype = (uneval(<x><y/></x>.__lookupSetter__\f(\"prototype\"))) in 'fafafa'.replace(/a/g, gc)) __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in window) {throw [z1,,];export *; }");
tryItOut("let (__noSuchMethod__ = *::*) { {} }\n;");
tryItOut("return ");
tryItOut("if([11,12,13,14].some) {continue ;throw <><x><y/></x></>; } else  if (__iterator__ = prop) {let __proto__ = <><x><y/></x></>; } else {__iterator__ = 4., __proto__ =  /x/ ;if(<x/>) { if ( \"\" ) {; }} else {export x::__count__;<x/> } }");
tryItOut("L:switch(new (<><x><y/></x></>)(#1# .. 1e81)) { case 2: default: yield;; }");
tryItOut("L:if(<y><z/></y>.propertyIsEnumerable(\"constructor\")) {yield;\n<x><y/></x>;\n }");
tryItOut("yield;switch(true) { case 9: if(null) const __proto__; else  if (<x><y/></x>) {throw #1#; }\t }");
tryItOut("{/*for..in*/for(const [prop, prop] = (<><x><y/></x></>)[*] in eval(\"return;\", <><x><y/></x></>)) {const __proto__, __noSuchMethod__ = true;\f } }");
tryItOut("/*infloop*/while(((<x><y/></x>)[ /x/ ]--)){const prototype = <x/>, constructor;export *; }");
tryItOut("prop = prototype;");
tryItOut("/*for..in*/for(var prototype in (({ get __proto__ __proto__ (__noSuchMethod__)<x><y/></x>, prototype: <x><y/></x> }).__lookupSetter__(\"prototype\"))) {; }");
tryItOut("with({__iterator__: [1]}){L:if(prop) gc() else  if (__noSuchMethod__+= /x/  :: (function::prop.__count__ getter= *)) {({}).__lookupGetter__ }/*for..in*/M:for(let __iterator__ = <y><z/></y> in *::*) return; }");
tryItOut("L: try { with({}) with({}) { this.zzz.zzz; }  } catch(prototype if (this == <>try { with({}) {} } finally {  \"\"  = __parent__; } </>)) { for(let y in []); } catch([({ __noSuchMethod__: prototype })]) { let(prototype = <>4.</>, ({ __count__: x::__noSuchMethod__, __noSuchMethod__: __iterator__ })) ((function(){for(let y in []);})()); } finally { let(({ __iterator__: [prototype, __proto__] }) = ( /* Comment */[11,12,13,14].sort), ({ prototype: __proto__ }) = (prototype)[<x><y/></x>]) { prop((function (constructor, prop)arguments)()) = __parent__; } ");
tryItOut("/*for..in*/for(let __count__.__count__ in ((gc)(__noSuchMethod__ = __count__))){(true);gc() }");
tryItOut("L: export __iterator__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({}).hasOwnProperty)((yield ({}))))){}__parent__ = __parent__;");
tryItOut("__proto__");
tryItOut("/*for..in*/for(var __parent__ = (function(y) { yield y; break L;; yield y; }()) in -1 ? <><x><y/></x></> : <x><y/></x> >>> [<><x><y/></x></>]) if(eval(\"throw {};\", <x/>)) {gc() }");
tryItOut("L:with({function::({ constructor: ({ __noSuchMethod__: prototype, __parent__: constructor }\t)\n, prototype: __iterator__ }): <x/>.prototype}){return;{1.2e3; } }");
tryItOut("M:if((yield @foo))  else {L: continue M; }");
tryItOut("__noSuchMethod__ = <y><z/></y>;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in  '' ) { }");
tryItOut("let (prototype, __iterator__) { #3={a:#3#};\n\n\n; }");
tryItOut("while(() && 0)return;");
tryItOut("L: {if(void <><x><y/></x></>,  /x/g ) { if ((<><x><y/></x></>.watch(\"prop\", function  __parent__ (__noSuchMethod__, __proto__) { const prototype, prop = <><x><y/></x></>; } )).@foo) const constructor; else {return <>undefined;</>; }}/*infloop*/for(var __iterator__; null; void 5.0000000000000000000000) {return <><x><y/></x></>;gc } }");
tryItOut("with({__proto__: <bbb xmlns:ccc=\"<x/>.unwatch(\"__count__\")\"><ccc:eee></ccc:eee></bbb>}){; }");
tryItOut("{}export __iterator__;\n\r(prop);\n");
tryItOut("if((let (prototype =  /* Comment */1e+81) *::* .@ 1e4)) { if (<><x><y/></x></> + @foo) if(<><x><y/></x></>) const constructor; else  if (<x><y/></x>) {<y><z/></y>; } else {(__proto__);return; } else case new RegExp((export __count__)): this.zzz.zzz;}");
tryItOut("{}");
tryItOut("__count__ = true, __parent__;");
tryItOut("L:with({function::__iterator__: this.zzz.zzz})if(1.2e3) { if ((([1,2,3,4].slice).call([*], (new Function)()))) {return;let __parent__; }} else ;");
tryItOut("/*infloop*/for([, ({ *: __count__ }), , prototype, ] = prototype = (eval)(__noSuchMethod__, *::*); (gc)(033); true >>> *) yield;");
tryItOut("const break ;, __count__;");
tryItOut("prototype = prototype;");
tryItOut("/*infloop*/L:for(var __count__; ((new Function(\"export constructor;\")))(@foo, <x><y/></x>); ((<x><y/></x>.(*)).throw([,]++.__lookupSetter__(\"__parent__\"))) % ( '' )(4.) = __parent__.(__noSuchMethod__)) /*for..in*/M:for(var __iterator__ in <><x><y/></x></>) \fprop = <y><z/></y>, constructor = __iterator__;");
tryItOut("let ([({ prototype: ({ prototype: __parent__ }) }), , prototype, ] =  /x/ ) { export *; }");
tryItOut("if(<x><y/></x>) {<x><y/></x>;let __iterator__ = true, __iterator__ = window; } else  if (window) {throw <><x><y/></x></>;{} }");
tryItOut("try { let(__count__, __iterator__) { {} } finally { throw prop; } ");
tryItOut("{}let __noSuchMethod__ = <x/>, __iterator__ = undefined\nif(<x/>) ;");
tryItOut("/*infloop*/for(__iterator__ = <><bbb xmlns=\" /* Comment */case 3: throw @foo;\"> </bbb></>; ((({__count__ getter: (prototype).watch })) ^ __count__ / <x><y/></x>.yoyo(new ( /x/ )(<><x><y/></x></>, <><x><y/></x></>)--) % ([11,12,13,14].some)); (uneval(*::*)) -= ((p={}, (p.z =  /x/ )()))++) {/*infloop*/while(*)export *; }");
tryItOut("if(033) {<y><z/></y>;continue M; } else  if (<y><z/></y>) let prototype = <><x><y/></x></>, __iterator__ = <><x><y/></x></>; else {this }");
tryItOut("if((#0=[*])) return [z1]; else yield;");
tryItOut("with(((<x><y/></x>)[ /x/g ]))const __proto__ = __noSuchMethod__;");
tryItOut("/*infloop*/for(({__iterator__: let (__iterator__ = null, __iterator__ = <x/>) <><x><y/></x></>}); (-0); (new Object())) L: return <y><z/></y>;");
tryItOut("__count__ = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(//h\nprop in @foo) {throw  \"\" ;let prop =  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in [11,12,13,14].map.__noSuchMethod__ = null.@*) if([1,,]) {yield;yield 1.3; } else prop");
tryItOut("if((uneval(( /x/ .isPrototypeOf( /x/ ))))) {var __noSuchMethod__;L:if(@foo\n .@ window++) {; } else const __proto__; } else  if ((new ((function ([y]) { })().@*)(<y><z/></y>))) undefined else /*for..in*/for(delete = (1e-81 & *) in <y><z/></y>) yield ({a2:z2});");
tryItOut("/*for..in*/for(var __proto__ = true in <y><z/></y>) \f__parent__;");
tryItOut("/*infloop*/for(var __count__; (({__noSuchMethod__ getter: function(y) { yield y; __iterator__ = 0x99, prop = {};; yield y; },  get __count__ __proto__ ()0.1 }).__lookupSetter__(\"prop\")); 'fafafa'.replace(/a/g, [1,2,3,4].slice)) /*infloop*/while(-0 -=  '' ){ '' ;gc() }");
tryItOut("{{}/*infloop*/for(let prop; <><x><y/></x></>; (function ([y]) { })()) export *; }");
tryItOut("yield prototype = 1e+81.hasOwnProperty(\"prototype\");");
tryItOut("gc()\n{yield {throw <><x><y/></x></>;export *; }\n }");
tryItOut(" { prop } ");
tryItOut("(true)\nconst __parent__ = prototype, __iterator__ = #1=[#1#];");
tryItOut("__parent__ = __parent__;");
tryItOut("if((true /  /x/  ==  '' .__lookupSetter__(\"prototype\"))) {return *::*;break ; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((({}).__lookupGetter__)((<x><y/></x> > this) |= window.unwatch(\"constructor\"))))continue ;");
tryItOut("{var __proto__, __parent__ = <x><y/></x>;export *; }");
tryItOut(";");
tryItOut("/*for..in*/M:for(var __parent__ in ((({}).hasOwnProperty)(eval(\"{}\", null) instanceof [[,] ? this : <x/>.yoyo( '' .propertyIsEnumerable(\"__iterator__\"))])))gc()");
tryItOut("if(setter.prop getter= <y><z/></y>) { if (window.throw(.2) :: [15,16,17,18].sort((Function).apply, null).__defineGetter__(\"prop\", ('haha'.split).call)) {{yield this;throw  /x/g ; } }} else {const __iterator__, constructor;window; }");
tryItOut("L: {gc() }");
tryItOut("yield function::__count__.(<x><y/></x>).__defineSetter__(\"__parent__\", ({}).hasOwnProperty);");
tryItOut("/*for..in*/for(let (@foo)(<><x><y/\f></x></>) in __iterator__) {({}).applyvar __iterator__, prop; }\nwindow = __parent__;");
tryItOut("if((constructor = @foo).eval(<x><y/></x>)) export __noSuchMethod__; else  if (<bbb xmlns:ccc=\"typeof  /x/ \"><ccc:eee></ccc:eee></bbb>.(((eval(\"L: yield;\", [1,,])).isPrototypeOf([11,12,13,14].map)))) gc()");
tryItOut("return (constructor.__noSuchMethod__ getter= *);");
tryItOut("/*infloop*/for((this.__defineSetter__(\"constructor\", <y><z/></y>)); prototype; <><x><y\f/></x></>(window) >= ( \"\" )) ;");
tryItOut("");
tryItOut("/*infloop*/for(__proto__; this !== <y><z/></y>.watch(\"__proto__\", Math.sin) %= <><x><y/></x></>\f.__defineGetter__(\"__count__\", (1 for (x in []))); let (({ constructor: __iterator__ }), constructor) new (1e4)(constructor, [,])) {(*);/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in window)  }");
tryItOut("L: {__parent__ = 0x99, __parent__ = -3/0; }");
tryItOut("if(eval(\"arguments\", .2)) {export prop;return undefined; } else  if ( {  } , constructor) {return;return; } else {yield; }");
tryItOut("L:if('fafafa'.replace(/a/g, Math.sin)) { if (@foo) const __proto__ = <x/>; const __noSuchMethod__;} else continue L;");
tryItOut("/*for..in*/for(const prototype in  \"\" .watch(\"__parent__\", L: ;)) prototype");
tryItOut("/*for..in*/for(__proto__ = true.__defineSetter__(\"__count__\", [1,2,3,4].slice).propertyIsEnumerable(\"__noSuchMethod__\") in [,,]) {continue ; }");
tryItOut("L:with((-0)){export __parent__;yield; }");
tryItOut("__noSuchMethod__ = __noSuchMethod__;\n/*infloop*/L:do try {  } catch(__proto__) { export __proto__; } finally { export *; }  while(((this).watch).call(-0, )); const __parent__;\n");
tryItOut("/*infloop*/for(const prop; null; [<><x><y/></x></>]++) {continue M; }");
tryItOut("true");
tryItOut("/*infloop*/while(this(prototype)){__count__, __count__; }");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = this.__defineSetter__(\"prop\", Function) in eval(\"var __iterator__, __noSuchMethod__\\n\", this.__defineSetter__(\"__noSuchMethod__\", (<><x><y/></x></>).watch))) {if(true) return null; else  if (__count__) <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <y><z/></y> in  &= +([<x/> for each (__count__ in <x><y/></x>)] .@ <x><y/></x>)) {yield;with({__parent__: null || window}){;export __iterator__; } }");
tryItOut("if((__iterator__ = @foo)) export *; else  if (__proto__ = ) {let ; }");
tryItOut("return <><x><y/></x></>;");
tryItOut("try { return ({a1:1}); } catch(__parent__) { 1e+81 } finally { export *; } ");
tryItOut("/*for..in*/for(let __count__ = arguments.throw(this.__defineSetter__(\"__proto__\", function  __parent__ (__proto__) { return <x/> } )) in (([ /x/g ])[prototype = __noSuchMethod__.__lookupSetter__(\"prop\")])) {const __iterator__ = [1], prop; const __parent__//h\n;((let (__parent__, __parent__) false)); }");
tryItOut("/*infloop*/do {gc() } while(window);");
tryItOut("with({prop: (([] = ([window for (__parent__ in <><x><y/></x></>)] ? (new Function(\"yield;\")) : prop.__parent__ = *)))[( \"\" .__defineGetter__(\"function::prop\", function  prop () { yield; } ))]}){this;gc() }");
tryItOut("if( /x/ , window) break M; else yield undefined;");
tryItOut("if(__noSuchMethod__ in 3) { if (<x/>--.__lookupGetter__(\"__parent__\") :: eval(\"0/0\", <x><y/></x> ? <><x><y/></x></> : <><x><y/></x></>)) {let constructor; }} else yield 'fafafa'.replace(/a/g, gc);");
tryItOut("/*infloop*//*");
tryItOut("/*infloop*/for(eval(\"'fafafa'.replace(/a/g, (new Function(\\\"gc()\\\")))\", new (eval)((({prop: ({prop setter: Math.pow }) })))); 0; <><>(export *)</></>) __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(var ({ [, , ({ prototype: gc() }), [, __iterator__, __noSuchMethod__, prop, ], ({ prototype: prototype<ccc:ddd><!--yy--></ccc:ddd>, prototype: constructor)]: ({ constructor: ({ __noSuchMethod__: constructor }), prototype: ({ __count__: __proto__, 3.141592653589793: prototype }) }) }) = __proto__ = <x><y/></x>.__count__; (export prototype .@ this(*, <\nx><y/></x>) / (1.3--)); <><xxx {__proto__}={arguments.isPrototypeOf([[]])} /></>) {export __parent__; }");
tryItOut("do {export *;gc() } while(((__proto__.prop)) && 0);");
tryItOut("/*infloop*/for(__noSuchMethod__; ;  /x/g  ? [1]; : *::*) {var __proto__ =  /x/g , __iterator__;gc() }");
tryItOut("if(__count__.eval(0/0)) {let __iterator__, __count__ = <><x><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in prop) {export __iterator__; }");
tryItOut("if(this.__defineSetter__(\"__parent__\", function  each (prop, __proto__) { ([]); } ) for (__noSuchMethod__ in undefined) for each (__count__ in __parent__)) { if ((eval(\"true\", [,,]))) throw this; else {var constructor, __noSuchMethod__; }}");
tryItOut("do {\fbreak ;{} } while((__count__ = <><x><y/></x></>) && 0)\n{return (true.__defineSetter__(\"prototype\", (({}).hasOwnProperty).apply));continue ; }");
tryItOut("if(((yield (eval(\"\", true)))).watch(\" /x/g \", (function  __count__ (__iterator__, prototype)({a2:z2})).apply)) { if ([constructorC]) gc()} else while((undefined) && 0)return;");
tryItOut("M:if(<x><y/></x>) { if (null) {; } else { }};");
tryItOut("with({__iterator__:  '' .prop})break ;");
tryItOut("throw StopIteration;");
tryItOut("M:with({__iterator__: ([] = ({ __iterator__: [, __proto__, __parent__, , ], prop: ({ __parent__: __count__, __proto__: __noSuchMethod__ }) }))})__parent__ = prop, __iterator__ = <><x><y/></x></>;");
tryItOut("for(let y in [5,6,7,8]) with({}) for(let y in [])\n");
tryItOut("/*for..in*/L:for(const ({prototype: <x/>}).propertyIsEnumerable(\"prototype\").prop in ((p={}, (p.z = 3.141592653589793)()))) {/*for..in*/for(const [__noSuchMethod__,  \"\" ] = <><x><y/></x></>.yoyo(*).propertyIsEnumerable/(\"__proto__\"') in window) {__noSuchMethod__; }if((({constructor: __iterator__}))) { if ((@foo--)) {(<><x><y/></x\n></>); } else throw this;} }");
tryItOut("with((window)(0x99)){__proto__, __noSuchMethod__ = this;gc() }");
tryItOut("L: {return; }");
tryItOut("switch(3) { default: break;  }");
tryItOut("/*for..in*/for(\f(<></>.(([11,12,13,14].filter)))['__parent__'] in ( /* Comment */this)) {constructor; }");
tryItOut("try { with({}) return ({a1:1}); } finally { let(__noSuchMethod__) {  } ");
tryItOut("L:with({prototype: @foo.window})/*infloop*/L:for(prototype; __proto__ = ('haha'.split).call(<x><y/></x>, 033); constructor. getter= function (__iterator__) { return <x><y/></x> } ) gc()");
tryItOut("return;");
tryItOut("L:with({prototype: *::*})yield @foo;(__parent__);");
tryItOut("let (constructor) { export *; }");
tryItOut("return\n");
tryItOut("return\nreturn  \"\" \n\ngc()");
tryItOut("__iterator__: (((this).apply)(<x/>, <x/>).unwatch(\"__count__\") if (<><x><y/\f></x></>))");
tryItOut("let (prop =  /x/ , D) { export __count__ }");
tryItOut("while((__iterator__) && 0);");
tryItOut("L: {let __noSuchMethod__;\texport *; }");
tryItOut("with(<xxx>{prop}</xxx>){export __iterator__; }");
tryItOut("with({}) break L;");
tryItOut("L:switch('fafafa'.replace(/a/g, (function (prototype) { yield prototype } ).apply)) { default: constructor = __parent__;case (yield  \"\"  >>> [,,z1]): break; case (prop = __count__): /*for..in*/for(var prop in ((/a/gi)((-1))))case 6: break; break;  }");
tryItOut("/*for..in*/for(var constructor in ((/a/gi)(window += <x><y/></x>.( '' ))))__proto__");
tryItOut(";");
tryItOut("{yield <y><z/></y>; }");
tryItOut("__count__((yield <><x><y/></x></>)) = prop;");
tryItOut("{yield; }");
tryItOut("for(let y in []);");
tryItOut(" { yield this } ");
tryItOut("");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor( \"\" ) in <x/>)  const __proto__; }");
tryItOut("/*for..in*/for(prop in ((false)(true)))var __parent__ =  /x/g ;");
tryItOut("L:if(*) {yield;return <><x><y/></x></>; } else  if ( /x/g ) {export *;(<x><y/></x>); } else return 033;");
tryItOut("if(<x/>) {continue ; } else {(__proto__); const __iterator__; }");
tryItOut("/*for..in*/for(var {/*for..in*/for(var __count__ in <y><z/></y>) #3={a:#3#};constructor } in __proto__ = <y><z/></y>) <y><z/></y>;");
tryItOut("let __parent__\n\n{}\n");
tryItOut("do {export function::constructor;\n(-1);\n } while((<><x><y/></x></> <= <><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = [<><x><y/></x></>].some((new Function(\"yield /*[z1,,];\"))) in  ''  != -1) ");
tryItOut("L:with({__iterator__: ((new Function(\"return *;\"))).call(<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", /a/gi), @foo, <x><y/></x>)})yield;");
tryItOut("with(3.141592653589793.hasOwnProperty(\"prototype\"))yield;");
tryItOut("export *;");
tryItOut("if(<y><z/></y>) { if (prototype = undefined) ;} else L: {export prop; }");
tryItOut("do {while((<x><y/></x>.(this)) && 0)var prop = prototype, prop;if(arguments , ([11,12,13,14].map)) {(<x/>).__defineSetter__ } else  if ((Date() @ (__proto__ = undefined))) {export __count__;{} } else yield <><x><y/></x></>; const prop; } while(( '' .__lookupSetter__(\"let\")) && 0);");
tryItOut("L: gc()");
tryItOut("while(((this.__defineGetter__(\"__parent__\", yield;)).propertyIsEnumerable(\"__proto__\")) && 0){{}return yield;;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in [z1,,]) {return; }\f");
tryItOut("if( \"\" .__defineSetter__(\"__parent__\", 'haha'.split)) let prototype; else [1,2,3,4].slice");
tryItOut("(constructor).watch");
tryItOut("if(new (1 for (x in []))()) { if (( \"\"  / 5.0000000000000000000000.propertyIsEnumerable(\"prop\")).__defineGetter__(\"constructor\", [1,2,3,4].map)) {let __parent__ = this;export __count__; } else return true;}");
tryItOut("do {const prototype = null, __proto__ = <><x><y/></x></>\nexport *; const __parent__; } while((String(__noSuchMethod__, *)) && 0);");
tryItOut("/*infloop*/for(\rfalse['__parent__'] = (<y><z/></y>)[arguments]--; (); __noSuchMethod__ = *::* *= (([1,2,3,4].map)(__noSuchMethod__, constructor = ( /x/g .isPrototypeOf(@foo))))) throw -0;");
tryItOut("if(({ get __count__ prototype (constructor, __count__) /x/  })) {return undefined; }");
tryItOut("L:if(({}) ? true : []) {{} } else __count__");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in 4.) /*infloop*/do return; while((__parent__));");
tryItOut("do {/*infloop*/M:while(default: break; return window;){var __count__;(new Function(\"yield;\")) }const __iterator__; } while(((<xxx>{__noSuchMethod__}</xxx>.((new Function(\"(function ([y]) { })();\"))))) && 0);");
tryItOut("return  \"\" ;");
tryItOut("if((typeof (<x><y/></x>))) { if () if(window) ;} else {var prototype, __count__; }");
tryItOut("let __noSuchMethod__ = 3.141592653589793, prop = <x/>\n");
tryItOut("/*infloop*/while(())/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in __noSuchMethod__ = <x/>) {}");
tryItOut("/*infloop*/for(true; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; try { {} } finally { yield; } .propertyIsEnumerable(\"__iterator__\")) /*for..in*/L:for(let __parent__ in <x><y/></x>) {; }");
tryItOut("with({__iterator__: #2=*})function(y) { yield y; return <><x><y/></x></>;; yield y; }");
tryItOut("/*for..in*/for(let [prototype, constructor] = [1] in 1e4) {[__count__, __iterator__] = __count__ = __parent__return function ([y]) { }; }");
tryItOut("{{}continue ; }");
tryItOut("/*infloop*/for(prop; this.zzz.zzz.throw(<><x><y/></x></> -= __iterator__ < new <x/>.__parent__ = (new ((1 for (x in [])))(<x><y/></x>) <<= constructor.__parent__ setter= 'haha'.split)); 'fafafa'.replace(/a/g, function(q) { return q; })) {let (__iterator__ =  /x/ ) { (1.2e3); } }");
tryItOut("/*infloop*/for(var prototype; (yield <><x><y/></x></>.__lookupSetter__(\"constructor\")(<><x><y/></x></> >> __iterator__, ({a1:1}))); this.__defineSetter__(\"__count__\", __proto__.__proto__)) {break L;if(-0) { if (null) {let each = @foo;var __noSuchMethod__, prototype =  /x/ ; } else export prop;} }");
tryItOut("L: /*for..in*/M:for(let __iterator__ in (((1 for (x in [])))({}))){yield; }/*infloop*/do {return *; } while(({prop: ({ set __count__ prototype (__proto__, __iterator__) { constructor; }  })}));");
tryItOut("[1,2,3,4].map");
tryItOut("/*infloop*/while(<x><y/></x> + __iterator__){(new Function(\"gc()\")) }");
tryItOut("while(((( /x/g  || [,]).isPrototypeOf( \"\" .__lookupGetter__(\"__iterator__\")) >= * !== @foo[(@foo ? <x><y/></x> : null)])) && 0)this.zzz.zzz;");
tryItOut("{export *\n }");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __count__] = function(y) { yield y; <>#1=[#1#]</>; yield y; }(<x/>, prop( \"\" , 5.0000000000000000000000)\n)() in <><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></>\f) {/*infloop*/for(let __count__ = ((__proto__ = <x><y/></x>).propertyIsEnumerable(\"__count__\")); function::prop.__count__ = *; [15,16,17,18].sort(this, 0x99)) <!--yy-->(null); }");
tryItOut("/*infloop*/for(var __iterator__; *::*; *) {return; }");
tryItOut("switch(<x><y/></x>) { case 0: return; }");
